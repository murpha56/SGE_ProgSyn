[{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [8, 7, 0, 5, 8, 3, 6, 2, 2, 0, 7, 9, 9, 4, 2, 2, 5, 5, 0, 2, 2, 5, 2, 5, 8, 0, 5, 9, 3, 4, 6, 6, 4, 8, 5, 4, 5, 2, 6, 7, 9, 0, 4, 3, 6, 5, 8, 0, 1, 1, 0, 3, 1, 1, 9, 8, 0, 7, 5, 8, 7, 5, 5, 0, 6, 5, 4, 5, 2, 5, 9, 2, 5, 1, 4, 4, 6, 9, 2, 9, 9, 0, 9, 6, 7, 1, 2, 1, 8, 5, 1, 8, 5, 3, 1, 4, 8, 4, 8, 7, 6, 7, 4, 2, 8, 9, 5, 9, 5, 2, 4, 7, 2, 6, 8, 3, 6, 9, 9, 1, 0, 6, 5, 7, 4, 1, 2, 0, 0, 4, 0, 1, 9, 7, 4, 0, 2, 2, 3, 0, 3, 0, 5, 9, 5, 4, 5, 9, 3, 0, 1], [3, 3, 4, 4, 1, 4, 2, 4, 2, 1], [2, 2, 2, 0], [1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 2, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [6, 5, 3, 4, 5, 3, 1, 5, 4, 5, 2, 4, 0, 3, 4, 1, 0, 0, 0, 0, 1, 3, 3, 0, 6, 3, 0, 3, 3, 1, 3, 6, 1, 4, 2, 1, 2, 5, 2, 6, 4, 2, 1, 1, 0, 0, 3, 6, 0, 5, 0, 6, 5, 2, 3, 2, 5, 6, 0, 2, 5, 2, 0, 3, 1, 6, 1, 4, 1, 4, 3, 2, 0, 1, 4, 4, 0, 6, 0, 5, 6, 5, 2, 2, 6, 4, 3, 2, 4, 0, 5, 1, 3, 6, 1, 0, 5, 5, 6, 2, 1, 0, 5, 6, 6, 2, 1, 3, 1, 6, 6, 5, 4, 0, 0, 1, 5, 5], [0, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 3, 2, 2, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 3, 1, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 3, 0, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 3, 2, 2, 2, 0, 0, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 2, 3, 1, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 2, 0, 2, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 2, 2, 0, 0, 3, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 3, 1, 2, 1, 0, 2, 3, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 0, "tree_depth": 154, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(max(min(in2, in0), in1), max(in2, in0))\\nif not i1 \\ge max(int(8.0), min(( int(7.0) + mod(mod(int(0.0),int(5.0)),in2) ), divInt(( int(8.0) - min(mod(min(divInt(int(3.0),int(6.0)), in1),( int(2.0) + int(2.0) )), in2) ),abs(( mod(( ( i2 - int(0.0) ) - in1 ),max(i0, divInt(divInt(max(( int(7.0) - divInt(in0,in1) ), min(abs(( abs(int(9.0)) * i1 )), abs(divInt(int(9.0),i0)))),int(4.0)),( i0 * i0 )))) + divInt(mod(int(2.0),max(divInt(max(abs(int(2.0)), i0),i1), in0)),int(5.0)) ))))):{:\\nif mod(in0,i0) \\ge min(min(res0, max(( max(abs(in0), int(5.0)) + mod(i0,max(( max(mod(divInt(mod(min(int(0.0), abs(int(2.0))),in0),int(2.0)),int(5.0)), in0) + ( min(int(2.0), i1) + max(int(5.0), ( int(8.0) - min(min(int(059.0), int(3.0)), ( int(4.0) + divInt(int(6.0),( mod(abs(int(6.0)),in0) * res0 )) )) )) ) ), int(4.0))) ), max(max(divInt(i1,( in1 - min(i2, max(int(8.0), int(5.0))) )), max(int(4.0), min(abs(i1), max(min(int(5.0), ( min(abs(int(2.0)), min(i2, divInt(in2,mod(min(abs(int(6.0)), min(( max(( i2 - ( ( divInt(res0,max(max(( ( in1 + int(7.0) ) - ( divInt(i2,min(( divInt(( i1 * i1 ),i0) * min(min(int(9.0), i0), abs(int(0.0))) ), in0)) + abs(int(4.0)) ) ), abs(res0)), ( int(3.0) * ( mod(abs(int(6.0)),divInt(mod(int(5.0),( max(( divInt(min(abs(mod(abs(abs(i0)),int(8.0))), int(0.0)),in2) - i0 ), min(( ( max(divInt(divInt(max(( min(( res0 - max(in2, int(1.0)) ), mod(divInt(int(1.0),int(0.0)),int(3.0))) * ( abs(i2) - in0 ) ), int(1.0)),i2),divInt(abs(in2),int(1.0))), min(min(min(mod(res0,abs(mod(int(9.0),( ( int(8.0) + int(0.0) ) * abs(int(7.0)) )))), abs(abs(i0))), max(max(min(int(5.0), abs(i2)), ( divInt(abs(int(8.0)),mod(in2,mod(int(7.0),abs(mod(min(max(int(5.0), max(( max(int(5.0), i2) + abs(int(0.0)) ), max(max(i0, divInt(divInt(int(6.0),int(5.0)),in0)), min(max(i1, int(4.0)), max(( int(5.0) + max(mod(res0,( min(abs(int(2.0)), min(max(int(5.0), i1), ( min(in1, i1) + in1 ))) * min(divInt(( int(9.0) - in0 ),divInt(min(( ( max(int(2.0), mod(int(5.0),( ( ( int(1.0) - i2 ) - min(abs(mod(int(4.0),i0)), int(4.0)) ) + int(6.0) ))) + i1 ) - mod(max(int(9.0), int(2.0)),min(( int(9.0) - ( in1 - ( ( int(9.0) + max(( int(0.0) - max(int(9.0), mod(in1,divInt(int(6.0),int(7.0)))) ), i0) ) - divInt(int(1.0),int(2.0)) ) ) ), abs(abs(res0)))) ), max(int(1.0), int(8.0))),abs(int(5.0)))), int(1.0)) )), abs(mod(i0,( in2 - res0 )))) ), in2))))), int(8.0)),int(5.0)))))) - abs(int(3.0)) )), abs(mod(int(1.0),i2)))), min(( mod(i2,res0) * abs(mod(mod(abs(in1),max(in0, ( int(4.0) - min(( i2 + in1 ), i0) ))),in2)) ), int(8.0)))) + i1 ) + int(4.0) ), int(8.0))) - int(7.0) )),mod(divInt(int(6.0),in0),int(7.0)))) * res0 ) ))) + i1 ) * int(4.0) ) ), max(i0, int(2.0))) + in2 ), max(int(8.0), divInt(( abs(in2) - int(9.0) ),int(5.0))))),int(9.0))))) - ( ( abs(max(abs(( abs(res0) * int(5.0) )), i2)) + min(( int(2.0) - i1 ), min(int(4.0), max(int(7.0), mod(int(2.0),i0)))) ) + divInt(abs(abs(abs(in2))),res0) ) )), divInt(int(6.0),res0))))), mod(int(8.0),i2)))), i1):{:\\nif int(36.0) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile ( ( int(9.0) * divInt(max(( in0 + min(int(1.0), int(06.0)) ), int(5.0)),i1) ) \\le int(7.0) or not True ):{:\\nif not res0 \\g max(res0, in2):{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n:}else:{:\\nb0 = True\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 9, 9, 5, 4, 124, 124, 5, 4, 1, 13, 5, 8, 3, 4, 112, 1, 496, 130, 135, 64, 66]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 1, 0, 0], [1, 0], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 7, 0, 8, 7, 7, 3, 4, 9, 1, 6, 7, 1, 5, 9, 2, 6, 0, 3, 4, 5, 4], [5, 1, 4], [1], [], [1, 1, 1], [0, 0, 0], [], [], [1], [2, 3, 5, 2, 2, 6, 2, 3, 1, 2, 2, 3, 0, 6, 5, 3, 2, 6, 0, 1, 2, 5, 6, 0, 5, 4, 6, 4], [1, 0], [1, 2, 2, 0, 3, 3, 0, 1, 2, 0, 3, 3, 2, 2, 0, 1, 0, 3, 3, 3, 0, 2, 1, 3, 0, 3, 0, 3, 0, 2, 0, 1, 1, 1, 1, 0, 1, 3, 3, 1, 1, 3, 2, 0, 0, 1, 3, 2, 3, 2, 2, 3, 1, 0, 2, 2, 3, 3, 3, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 1, 2, 1, 1, 2, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 0, 0, 3, 2, 3, 1, 0, 2, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 2, 2, 1, 2, 1], [0, 1, 1, 2, 2, 0, 1, 1, 2, 2, 0, 1, 0, 0, 2], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1]], "fitness": 43, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(7.0) != divInt(mod(i2,max(min(in0, int(9.0)), ( in2 + min(max(divInt(divInt(i2,int(7.0)),i2), min(min(max(res0, mod(int(0.0),min(i2, min(in0, min(i1, divInt(i2,int(8.0))))))), int(7.0)), int(7.0))), int(3.0)) ))),i2):{:\\nif int(4.0) \\g min(abs(int(9.0)), int(1.0)):{:\\nb1 = min(( in0 - i0 ), int(6.0)) \\le min(divInt(abs(( ( max(int(7.0), res0) - ( mod(abs(abs(max(in2, mod(( in0 * i2 ),( mod(res0,( i0 * int(1.0) )) + ( int(5.0) - int(9.0) ) ))))),( i1 - int(2.0) )) * i2 ) ) * ( ( mod(in2,int(6.0)) + int(0.0) ) - int(3.0) ) )),res0), i0)\\n:}else:{:\\nin2 += abs(( max(int(4.0), in1) + ( int(5.0) * int(4.0) ) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = in1\\n", "other_info": {}, "test_fitness": 460, "mapping_values": [1, 5, 5, 2, 3, 23, 23, 3, 1, 0, 3, 3, 0, 0, 1, 28, 2, 95, 25, 21, 15, 11]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 1, 0, 1], [1, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 5, 8, 3, 9, 9, 9, 1, 5, 5, 3, 0, 3, 1, 3, 3, 8, 4, 6], [2, 0], [2, 1, 1, 1, 1], [], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0], [0, 1, 2, 1, 1, 2, 0, 1], [1, 0, 0, 1], [1, 1, 1], [6, 4, 1, 3, 3, 1, 5, 6, 2, 3, 0, 4, 5, 1, 4, 5, 3, 2, 4, 4, 3, 1, 1, 4, 5, 4, 2, 6, 3, 5, 4, 3, 2], [0, 1, 0, 1, 0], [0, 2, 3, 1, 0, 3, 3, 0, 2, 0, 3, 3, 3, 3, 2, 1, 1, 1, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 3, 0, 3, 0, 3, 1, 1, 2, 2, 1, 0, 0, 1, 3, 3, 1, 0, 3, 0, 3, 2, 3, 1, 0, 0, 3, 3, 2, 2, 3, 2, 0, 3, 1, 0, 2, 3, 0, 2, 3, 0, 3, 3, 0, 2, 1, 3, 0, 1, 1, 1, 1, 3, 1, 1, 2, 3, 1, 3, 0, 0, 3, 3, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 2, 0, 0, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 0, 2, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2], [0, 2, 1, 2, 2, 1, 2, 0, 0, 1, 2, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0]], "fitness": 43, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = in1\\nloopBreak% = 0\\nwhile divInt(min(int(7.0), i1),min(abs(in0), ( in0 + min(min(max(abs(mod(int(0.0),int(5.0))), int(8.0)), ( max(( i1 * in2 ), mod(res0,i2)) - in0 )), i0) ))) == in1:{:\\nif b2:{:\\nif False:{:\\nin2 *= ( ( max(( i1 * max(in1, max(in2, abs(int(3.0)))) ), int(9.0)) - ( ( int(9.0) * in0 ) + i2 ) ) + int(9.0) )\\n:}else:{:\\nloopBreak% = 0\\nwhile not True:{:\\nin1 = max(max(int(1.0), in1), abs(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb1 = True\\n:}\\nif not b1:{:\\nb1 = abs(divInt(min(int(5.0), i1),i1)) \\l abs(abs(mod(( min(divInt(in1,abs(int(5.0))), in2) - mod(min(in1, ( max(i2, min(max(res0, divInt(int(3.0),min(in0, int(0.0)))), int(3.0))) * int(1.0) )),int(3.0)) ),max(int(3.0), int(8.0)))))\\n:}else:{:\\nin2 += divInt(min(int(4.0), abs(in1)),in0)\\n:}\\ni2 = abs(abs(int(6.0)))\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 460, "mapping_values": [1, 13, 13, 5, 8, 20, 20, 2, 5, 0, 10, 2, 8, 4, 3, 33, 5, 98, 19, 31, 12, 9]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 2, 0, 0, 0, 1, 2, 2, 0, 2, 1, 1], [0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 1, 6, 1, 0, 2, 8, 7, 8, 6, 4, 3, 3, 1, 4, 8, 5], [5, 3, 0, 1, 1, 0], [0, 2, 1, 0, 1, 1], [], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0], [1, 0, 2, 2, 1, 2], [0, 0], [1, 1], [5, 0, 6, 1, 2, 5, 6, 3, 4, 6, 2, 5, 6, 3, 3, 1, 1, 5, 3, 3, 0, 0, 2, 2], [1, 1, 0, 1, 0], [0, 2, 3, 3, 0, 2, 2, 2, 1, 1, 1, 3, 3, 2, 0, 2, 0, 1, 1, 3, 1, 1, 0, 1, 0, 3, 3, 0, 0, 0, 0, 2, 1, 1, 3, 1, 0, 1, 3, 2, 1, 2, 1, 1, 3, 0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 3, 0, 2, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 2, 2, 0, 2, 0, 0, 2, 1, 2], [0, 0, 2, 2, 2, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1]], "fitness": 53, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += i0\\nres0 += ( min(max(i1, mod(( ( int(5.0) * int(4.0) ) * int(1.0) ),abs(abs(divInt(i2,divInt(in2,int(6.0))))))), int(1.0)) * min(int(0.0), int(2.0)) )\\nres0 = in0\\nif True:{:\\nb0 = b2\\nb1 = not int(8.0) != in1\\nb0 = abs(min(res0, i2)) \\ge in2\\n:}else:{:\\nres0 += in0\\nloopBreak% = 0\\nwhile not ( int(7.0) + int(8.0) ) \\l min(int(6.0), in0):{:\\nif True:{:\\nb1 = int(4.0) \\g abs(( int(3.0) - divInt(int(3.0),int(1.0)) ))\\n:}else:{:\\nloopBreak% = 0\\nwhile max(i1, int(4.0)) \\g mod(i1,mod(in2,int(8.0))):{:\\nin0 = ( in0 - int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = not mod(abs(i0),( i0 - i2 )) \\l i2\\n", "other_info": {}, "test_fitness": 499, "mapping_values": [1, 14, 14, 4, 10, 18, 18, 6, 6, 0, 12, 6, 6, 2, 2, 24, 5, 62, 14, 11, 10, 7]}, {"genotype": [[0], [1, 1, 1, 0, 1, 1], [2, 2, 1, 1, 2, 1], [0, 0, 1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 2, 7, 1, 7, 0, 2, 2, 3, 0, 6, 5, 9, 3, 2, 0, 6, 9, 4, 3, 6, 7, 8, 5, 3, 4, 1, 0, 3, 0, 6, 1, 4, 0, 5, 4, 3, 9, 9, 5, 6, 2, 0, 3, 3, 5, 1, 1, 5, 3, 9, 9, 9, 3, 1, 9, 5, 7, 5, 3, 6, 9, 0, 8], [2, 4, 2], [2, 1, 2], [], [0, 1, 0, 0, 1, 1], [0, 0, 0], [2, 1, 0], [0], [1, 0], [3, 3, 1, 4, 5, 6, 5, 1, 6, 2, 0, 4, 1, 3, 4, 4, 0, 0, 2, 3, 1, 6, 3, 2, 4, 5, 3, 2, 1, 2, 5, 5, 6, 5, 0, 1, 2, 1, 0, 5, 6, 3, 2, 6, 3, 0, 1, 6, 2, 0, 4, 1, 0, 1, 0, 6, 4, 3, 3, 2, 1, 1, 0, 0, 3, 1, 5, 1, 2, 1, 1, 5, 2, 0, 0, 4], [0], [0, 2, 0, 2, 3, 0, 2, 2, 1, 3, 2, 3, 3, 1, 1, 0, 0, 2, 1, 1, 0, 3, 1, 0, 2, 0, 3, 3, 3, 2, 2, 2, 2, 1, 3, 0, 1, 2, 2, 1, 0, 3, 3, 0, 2, 2, 2, 0, 3, 2, 3, 2, 3, 0, 0, 2, 0, 3, 3, 0, 0, 3, 0, 2, 3, 3, 3, 1, 0, 1, 3, 1, 1, 1, 1, 2, 1, 2, 2, 3, 2, 1, 3, 3, 3, 3, 3, 2, 2, 3, 1, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 3, 1, 0, 2, 0, 0, 2, 3, 3, 3, 1, 1, 2, 1, 3, 2, 2, 1, 2, 1, 0, 3, 0, 1, 0, 3, 3, 2, 2, 2, 2, 0, 0, 3, 2, 3, 1, 3, 2, 2, 0, 3, 0, 1, 0, 1, 3, 2, 1, 3, 2, 1, 3, 2, 2, 0, 0, 0, 0, 0, 2, 3, 0, 0, 2, 3, 2, 0, 1, 3, 0, 0, 2, 3, 0, 2, 2, 3, 0, 1, 3, 2, 3, 3, 1, 3, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 0, 0, 3, 0, 0, 2, 3, 3, 1, 2, 0, 0, 1, 0, 0, 2, 2, 0, 2, 2, 2, 1, 2, 3, 2, 1, 2, 2, 1, 0, 1, 3, 3, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1, 2, 0, 3, 2, 3, 3, 0, 0, 0, 1, 1, 3, 1, 1, 2, 0, 3, 0, 1, 1, 0, 0, 2, 1, 1, 3, 0, 0, 2, 2, 2, 1, 0, 1, 2, 2, 0, 1, 1, 3, 0, 3, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1, 0, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [2, 1, 0, 2, 1, 2, 1, 1, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 0, 2, 2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1, 0, 2, 1, 0, 2, 2, 0, 1, 1, 2, 0, 2, 0, 2, 0, 2, 1, 1, 1, 2, 0, 2, 2, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 1, 0], [2, 0, 1, 0, 2, 0, 2, 2, 2, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 2, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 0, 2, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0]], "fitness": 53, "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not in0 == mod(in0,divInt(abs(i1),( divInt(int(3.0),max(( min(abs(int(6.0)), int(2.0)) * in1 ), in2)) + divInt(int(7.0),int(1.0)) ))):{:\\nif True:{:\\nb2 = b1\\n:}\\n:}else:{:\\nres0 = in2\\nloopBreak% = 0\\nwhile max(int(7.0), i1) \\le ( res0 - abs(max(max(( mod(mod(( int(0.0) + min(i2, int(2.0)) ),mod(( int(2.0) * i0 ),max(max(in1, ( ( ( i1 + abs(mod(min(( max(in0, in1) * ( in1 * abs(max(i0, i0)) ) ), max(i2, ( min(max(min(int(3.0), in0), int(0.0)), min(int(6.0), int(5.0))) * int(9.0) ))),int(3.0))) ) + ( int(2.0) + ( mod(abs(( int(0.0) + abs(max(max(min(abs(( divInt(min(int(6.0), int(9.0)),i1) - min(int(4.0), min(mod(res0,abs(in0)), i2)) )), in1), abs(int(3.0))), in2)) )),( in0 + i2 )) - mod(max(min(abs(int(6.0)), int(7.0)), divInt(int(8.0),max(mod(mod(int(5.0),mod(int(3.0),i1)),min(i2, int(4.0))), in2))),abs(abs(( ( mod(( in2 - res0 ),min(mod(max(int(1.0), max(divInt(mod(in2,abs(i0)),int(0.0)), i1)),int(3.0)), min(mod(int(0.0),abs(( int(6.0) + min(( divInt(i2,i1) - i0 ), in2) ))), res0))) - mod(abs(in0),i2) ) - ( min(mod(res0,int(1.0)), abs(in0)) - i0 ) )))) ) ) ) * mod(max(i1, ( ( max(res0, int(4.0)) * max(( abs(min(int(0.0), abs(abs(int(5.0))))) * divInt(divInt(( int(4.0) + int(3.0) ),divInt(int(9.0),int(9.0))),mod(i2,i0)) ), min(in1, i1)) ) * mod(max(min(int(5.0), ( i0 * i1 )), int(6.0)),i0) )),res0) )), ( mod(in1,divInt(( mod(int(2.0),divInt(max(( int(0.0) * ( mod(int(3.0),in0) * int(3.0) ) ), max(max(( abs(mod(int(5.0),divInt(abs(( int(1.0) - int(1.0) )),int(5.0)))) * ( in0 - max(mod(min(min(i2, i1), i1),int(3.0)), int(9.0)) ) ), abs(int(9.0))), int(9.0))),mod(i0,min(i0, int(3.0))))) - int(1.0) ),in0)) - i1 )))),( int(9.0) * int(5.0) )) - min(in2, i1) ), ( divInt(( int(7.0) + i2 ),int(5.0)) * divInt(( i1 - int(3.0) ),int(6.0)) )), abs(i1))) ):{:\\nb2 = min(in2, i2) == max(( int(9.0) - abs(i0) ), divInt(max(int(0.0), i0),min(in1, int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 535, "mapping_values": [1, 6, 6, 3, 3, 65, 65, 3, 3, 0, 6, 3, 3, 1, 2, 76, 1, 298, 82, 76, 40, 42]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 3], [0], [0], [], [], [], []], "fitness": 53, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = in0\\n", "other_info": {}, "test_fitness": 499, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 1], [], [1, 0, 0, 1], [1, 1, 1, 1, 1, 1], [2, 8, 7, 5, 1, 6], [0], [2, 1, 0], [], [1, 0], [0], [0], [], [], [2, 0, 4, 1, 2, 5, 5, 0, 2, 1, 0, 1, 6, 3], [1, 1], [0, 3, 0, 3, 3, 2, 2, 0, 2, 1, 2, 2, 0, 2, 1, 2, 1, 3, 0, 1, 2, 0, 2, 2, 1, 0, 0, 0, 3, 1, 3, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0, 1, 2, 0], [1, 2, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1]], "fitness": 53, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= i0\\nb2 = abs(in1) \\l min(min(( ( i1 * ( int(2.0) + ( divInt(i2,divInt(int(8.0),mod(int(7.0),max(in2, int(5.0))))) - ( in2 + mod(mod(int(1.0),i0),i2) ) ) ) ) + i1 ), abs(int(6.0))), min(i0, i1))\\nb1 = b0\\nres0 += in0\\n", "other_info": {}, "test_fitness": 499, "mapping_values": [1, 4, 4, 0, 4, 6, 6, 1, 3, 0, 2, 1, 1, 0, 0, 14, 2, 34, 10, 6, 7, 5]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [1], [1, 1], [1, 1], [1, 7], [4, 1], [], [1], [0, 1, 1], [0, 0], [3], [], [], [6, 3, 1, 4, 3, 4, 6], [0, 1], [0, 1, 3, 1, 0, 0, 2, 0, 0], [1], [2], [0], [0]], "fitness": 53, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = in0\\nloopBreak% = 0\\nwhile ( int(1.0) \\le abs(int(7.0)) or i1 \\g in1 ):{:\\nin0 += divInt(in1,res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 499, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 2, 0, 1, 3, 2, 1, 0, 0, 7, 2, 9, 1, 1, 1, 1]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 1, 2, 1, 2, 2, 1, 2, 0, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 8, 1, 3, 5, 8, 0, 3, 7, 4, 2, 9, 3, 9, 3, 0, 9, 1, 6, 1, 2, 6, 0, 5, 5, 0, 1, 2, 4, 0, 4, 3, 1, 9, 4, 6, 2, 0, 1, 2, 3, 7, 9, 2, 0, 1, 8, 7, 8, 3, 4, 6, 0, 8, 1, 7, 0, 8, 6, 4, 2, 3, 2, 1], [2, 3, 0, 0], [1, 0, 1, 0, 1, 1], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 2, 0, 1, 0], [1, 0], [1, 1, 1], [0, 4, 6, 6, 6, 1, 4, 4, 0, 5, 4, 2, 5, 0, 5, 5, 0, 4, 6, 6, 6, 2, 3, 6, 0, 0, 3, 2, 6, 6, 0, 0, 2, 0, 5, 6, 6, 3, 3, 5, 2, 3, 3, 0, 4, 3, 0, 0, 3, 2, 1, 3, 5, 0, 6, 1, 3, 5, 1, 2, 4, 6, 4, 5, 6, 2, 3, 1], [1, 0, 0, 0], [2, 3, 2, 1, 3, 0, 2, 1, 0, 2, 3, 2, 3, 2, 3, 0, 1, 3, 2, 3, 1, 1, 0, 3, 0, 3, 3, 0, 3, 2, 3, 0, 3, 3, 0, 2, 0, 0, 0, 2, 2, 2, 1, 2, 2, 3, 0, 0, 2, 3, 2, 2, 3, 0, 2, 1, 0, 2, 1, 3, 0, 3, 0, 3, 3, 1, 1, 2, 2, 2, 1, 1, 2, 0, 1, 0, 2, 0, 3, 0, 0, 3, 2, 0, 3, 1, 1, 3, 3, 1, 0, 1, 0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 0, 2, 2, 2, 3, 0, 0, 3, 3, 2, 3, 0, 1, 0, 2, 2, 2, 3, 2, 3, 2, 2, 2, 0, 1, 1, 3, 3, 1, 2, 2, 3, 0, 2, 2, 2, 2, 0, 1, 2, 0, 3, 2, 1, 3, 0, 2, 3, 2, 0, 1, 2, 2, 2, 1, 0, 3, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 3, 1, 1, 0, 1, 3, 3, 2, 2, 1, 1, 3, 1, 3, 0, 1, 2, 2, 3, 1, 2, 1, 2, 2, 3, 1, 3, 0, 1, 2, 1, 1, 0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 3, 2, 1, 0, 2, 1, 0, 1, 3, 1, 3, 1, 1, 0, 3, 0, 2, 3, 3, 1, 1, 2, 1, 1, 2, 3, 1, 2, 2, 1, 2, 0, 2, 2, 3, 2, 2, 0, 1, 0, 1, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 2, 0, 1, 0, 1, 0, 2, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 2, 0, 2, 0, 2, 2, 0, 1, 0, 1, 2, 0, 2, 2, 0, 2, 1, 1, 2, 1, 1, 2, 1, 0, 2, 2, 2, 0, 0, 2, 2, 0, 2, 2, 0, 1, 2, 0], [2, 0, 2, 1, 0, 2, 0, 0, 1, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 0, 1, 2, 2, 1, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 1, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0]], "fitness": 63, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\ni0 *= ( min(divInt(int(5.0),abs(in1)), mod(int(7.0),res0)) + ( abs(( min(divInt(max(res0, int(8.0)),min(divInt(max(int(1.0), int(3.0)),res0), min(i1, abs(max(in1, abs(( abs(in1) * abs(min(i0, ( in2 - in1 ))) ))))))), i2) + ( mod(( int(5.0) * ( mod(min(in2, i0),( min(( ( max(in2, ( int(8.0) + in2 )) + ( int(0.0) - max(i0, max(in1, max(abs(int(3.0)), int(7.0)))) ) ) - mod(( ( int(4.0) + int(2.0) ) - divInt(res0,int(9.0)) ),res0) ), divInt(res0,abs(i2))) - in0 )) + max(( res0 + abs(int(3.0)) ), int(9.0)) ) ),min(abs(int(3.0)), i0)) * int(0.0) ) )) - i0 ) )\\n:}else:{:\\nif b1:{:\\nb0 = not b1\\n:}else:{:\\nloopBreak% = 0\\nwhile in0 == i2:{:\\nloopBreak% = 0\\nwhile True:{:\\nres0 = mod(min(res0, abs(mod(divInt(i0,i0),int(9.0)))),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nif b0:{:\\nb1 = i0 \\ge ( ( divInt(abs(in2),res0) * min(max(mod(min(res0, int(1.0)),in0), mod(( ( max(( abs(( ( mod(in0,int(6.0)) - int(1.0) ) + min(abs(int(2.0)), ( divInt(abs(in2),mod(( mod(divInt(i2,int(6.0)),mod(in0,min(( int(0.0) * abs(in0) ), divInt(max(divInt(i0,int(5.0)), ( mod(divInt(int(5.0),in1),max(int(0.0), in0)) * int(1.0) )),i0)))) * int(2.0) ),i0)) - in0 )) )) * int(4.0) ), int(0.0)) + abs(int(4.0)) ) - max(int(3.0), int(1.0)) ),i2)), int(9.0)) ) * max(abs(( ( int(4.0) * int(6.0) ) - max(int(2.0), min(i1, int(0.0))) )), divInt(mod(abs(int(1.0)),divInt(int(2.0),( divInt(abs(int(3.0)),abs(in0)) + int(7.0) ))),( int(9.0) - int(2.0) ))) )\\nin2 = i0\\n:}else:{:\\nloopBreak% = 0\\nwhile res0 \\l min(mod(( ( mod(mod(int(0.0),i1),in0) - in2 ) + min(( int(1.0) - abs(i1) ), divInt(( abs(( int(8.0) * i2 )) + ( int(7.0) + in1 ) ),int(8.0))) ),min(int(3.0), abs(int(4.0)))), int(6.0)):{:\\nres0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = abs(in2) \\l mod(min(max(int(0.0), int(8.0)), divInt(int(1.0),int(7.0))),( abs(int(0.0)) - ( ( int(8.0) + mod(res0,mod(( min(divInt(divInt(i2,int(6.0)),in0), int(4.0)) - mod(int(2.0),int(3.0)) ),divInt(int(2.0),i1))) ) * int(1.0) ) ))\\n", "other_info": {}, "test_fitness": 615, "mapping_values": [1, 13, 13, 6, 7, 65, 65, 4, 6, 0, 10, 4, 6, 2, 3, 68, 4, 272, 82, 61, 42, 41]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1], [2, 1, 6, 8, 3], [], [], [], [], [], [], [], [], [6, 0, 4, 5, 2, 5, 0, 4], [0], [3, 2, 0, 3, 2, 2, 3, 2, 0, 1, 3, 2, 1, 1, 0, 1, 3, 0, 2, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1], [0, 0, 1], [1, 1, 0]], "fitness": 67, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(mod(i0,max(mod(( max(divInt(in1,int(2.0)), min(( int(1.0) + int(6.0) ), in2)) + int(8.0) ),max(i2, ( int(3.0) - in2 ))), i0)), in1)\\n", "other_info": {}, "test_fitness": 705, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 23, 6, 5, 3, 3]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 1, 0, 1, 1, 0], [0], [1, 1, 0, 1, 0], [1, 1, 1, 1], [1, 9, 7, 1], [3], [1, 2], [], [1, 0, 0], [0], [1, 1], [0, 1], [1], [2, 4, 4, 6, 3, 0, 0, 2], [1, 0, 1], [1, 1, 2, 0, 1, 3, 3, 1, 3, 3, 2, 0, 3, 0, 0, 0], [1, 1], [2, 2, 2, 0, 0], [2, 1], [0, 1]], "fitness": 73, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) \\ge int(9.0):{:\\ni2 *= divInt(in1,int(7.0))\\nin1 = abs(abs(int(1.0)))\\nb1 = True\\n:}else:{:\\nres0 -= abs(min(mod(in0,min(i0, i0)), i2))\\n:}\\nb2 = False\\n", "other_info": {}, "test_fitness": 718, "mapping_values": [1, 6, 6, 1, 5, 4, 4, 1, 2, 0, 3, 1, 2, 2, 1, 8, 3, 16, 2, 5, 2, 2]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 0, 0, 0, 0, 1], [0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 8, 2, 3, 6, 8, 5, 7, 4, 2, 2, 3, 8, 2, 7, 0], [1, 4], [0], [], [0, 1, 1], [0, 0], [2], [], [1], [4, 3, 4, 1, 2, 5, 4, 0, 2, 5, 4, 3, 5, 2, 6, 6, 4, 1, 1, 2, 0, 6, 1], [1, 1, 0, 0], [2, 2, 2, 3, 3, 2, 3, 0, 2, 3, 3, 2, 1, 3, 1, 1, 1, 2, 0, 1, 1, 2, 2, 0, 0, 3, 1, 0, 0, 3, 3, 3, 1, 1, 0, 1, 3, 0, 0, 0, 0, 3, 3, 1, 0, 2, 1, 0, 3, 1, 1, 2, 0, 2, 3, 0, 0, 2, 3, 0, 2, 0, 0, 1, 3, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 2, 2, 1, 0, 1, 0, 0, 1, 1, 1, 2, 0, 1, 0], [0, 1, 1, 2, 0, 0, 1, 2, 1, 0], [1, 0, 1, 1, 1, 0]], "fitness": 75, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( ( ( min(min(( min(in1, mod(abs(abs(divInt(int(0.0),max(int(1.0), int(8.0))))),int(2.0))) + mod(in0,int(3.0)) ), int(6.0)), mod(( in1 - i1 ),min(int(8.0), i2))) - in2 ) * max(min(min(int(5.0), int(7.0)), in1), int(4.0)) ) + max(i0, i2) ) \\g in2:{:\\nin1 += in0\\nb0 = max(max(int(2.0), in2), ( int(2.0) - i2 )) \\le abs(int(3.0))\\nres0 *= int(8.0)\\n:}else:{:\\nres0 = mod(in1,divInt(min(i1, i1),( max(i2, ( i0 - res0 )) + int(2.0) )))\\n:}\\ni1 = min(int(7.0), int(0.0))\\n", "other_info": {}, "test_fitness": 739, "mapping_values": [1, 6, 6, 1, 5, 17, 17, 2, 1, 0, 3, 2, 1, 0, 1, 23, 4, 67, 14, 17, 10, 6]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 1], [1, 1, 1, 1], [1, 6, 1, 8], [3, 5], [1], [0], [0, 0, 1, 1], [0, 0], [3, 2], [], [], [3, 1, 0, 6, 3, 0, 2, 1], [0, 1], [3, 1, 3, 1, 0, 0, 1, 2, 1, 0, 3, 0, 3, 0, 0], [1], [0, 1, 2, 1], [1], [0]], "fitness": 79, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( not min(int(1.0), max(int(6.0), in0)) \\ge i1 and int(1.0) != divInt(int(8.0),i0) )\\nres0 = abs(in0)\\ni0 -= max(i2, i1)\\n", "other_info": {}, "test_fitness": 772, "mapping_values": [1, 3, 3, 0, 3, 4, 4, 2, 1, 1, 4, 2, 2, 0, 0, 8, 2, 15, 1, 4, 1, 1]}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 0, 1], [0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 2, 9, 9, 9, 5, 9, 2, 8, 1, 8], [4], [2], [], [1, 0, 0, 0, 0], [0], [2, 2, 2, 1], [1], [0], [1, 6, 1, 1, 6, 6, 5, 4, 0, 6, 3, 6, 6, 3], [0, 1], [0, 2, 0, 2, 2, 2, 3, 1, 3, 3, 2, 2, 3, 3, 1, 3, 1, 0, 0, 0, 2, 1, 0, 3, 3, 1, 1, 0, 0, 3, 2, 3, 3, 3, 1, 1, 1, 0, 2, 1, 2, 2, 2, 0, 3, 0, 3, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 2, 2, 2, 0, 2, 0, 0, 1, 1, 2, 1, 2, 0], [2, 1, 2, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1]], "fitness": 98, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = res0\\nif mod(i1,mod(mod(mod(max(int(7.0), abs(abs(divInt(( abs(min(int(8.0), abs(int(2.0)))) * i1 ),res0)))),res0),mod(int(9.0),in2)),min(min(int(9.0), int(9.0)), in1))) \\le i0:{:\\nres0 -= max(divInt(max(abs(max(int(5.0), int(9.0))), int(2.0)),in0), mod(int(8.0),( ( ( res0 * abs(res0) ) + min(int(1.0), in0) ) - int(8.0) )))\\nb2 = not not not False\\n:}\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 4, 4, 1, 3, 12, 12, 1, 1, 0, 5, 1, 4, 1, 1, 14, 2, 50, 12, 14, 5, 8]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1], [2, 1, 2, 2, 0, 1, 1], [1, 0, 0], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 5, 3, 2, 1, 2, 6, 2, 7, 0, 2, 8, 4, 4, 9, 2, 3, 8, 0, 3, 7, 0, 1, 6], [1, 4, 4, 2, 0, 0], [2, 1, 1, 2], [0, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3, 2, 3, 2, 0, 1], [0], [1, 0], [3, 6, 6, 1, 1, 3, 0, 6, 5, 1, 2, 0, 1, 5, 6, 4, 3, 2, 2], [0], [3, 0, 0, 1, 1, 1, 3, 1, 0, 1, 0, 2, 3, 0, 2, 3, 3, 3, 1, 1, 2, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 3, 1, 1, 1, 1, 2, 0, 3, 0, 3, 0, 0, 2, 3, 1, 3, 1, 2, 1, 3, 1, 1, 1, 3, 0, 3, 2, 1, 2, 0, 3, 0, 1, 1, 1, 3, 0, 2, 0, 2, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [1, 2, 1, 2, 1, 1, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1, 0, 1, 0, 2], [0, 2, 0, 1, 2, 2, 1, 2], [1, 1, 0, 1, 1, 0, 1]], "fitness": 98, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(in0, res0) \\g int(2.0):{:\\nres0 = int(3.0)\\nif int(5.0) \\le abs(int(3.0)):{:\\nif ( i1 \\le int(2.0) and not ( not i1 == ( max(in0, ( abs(max(max(int(1.0), int(2.0)), ( mod(min(int(6.0), i0),min(int(2.0), mod(int(7.0),abs(min(( divInt(( int(0.0) + res0 ),min(int(2.0), int(8.0))) * int(4.0) ), int(4.0)))))) + mod(in2,max(i1, abs(i2))) ))) - i0 )) * ( max(int(9.0), min(int(2.0), mod(int(3.0),max(int(8.0), int(0.0))))) * int(3.0) ) ) and min(i1, max(( int(7.0) - ( in2 * min(res0, int(0.0)) ) ), int(1.0))) \\l int(6.0) ) ):{:\\nb2 = b1\\n:}\\n:}else:{:\\nb1 = abs(in1) \\l divInt(in0,mod(i2,i2))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = True\\n", "other_info": {}, "test_fitness": 986, "mapping_values": [1, 7, 7, 3, 4, 25, 25, 6, 4, 2, 12, 6, 6, 1, 2, 19, 1, 78, 15, 20, 8, 7]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 2, 2, 2, 1, 1, 1], [1, 0, 1, 1, 0, 0], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 8, 9, 7, 7, 7, 9, 6, 9, 5, 8, 9, 3, 7, 8, 2, 3, 7, 9, 7, 0, 3, 8], [0, 4, 3, 5, 1, 2, 1, 2], [1, 1, 0, 2], [0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 1, 3, 0, 3, 0], [0], [0, 0, 0], [0, 4, 6, 6, 1, 1, 1, 3, 2, 0, 5, 6, 3, 1, 4, 4, 3, 0, 2, 3], [1, 1, 0], [0, 0, 1, 3, 0, 0, 2, 2, 2, 0, 1, 0, 0, 1, 1, 0, 1, 2, 2, 0, 1, 2, 2, 3, 1, 0, 3, 2, 3, 1, 1, 1, 0, 2, 2, 0, 1, 0, 1, 3, 1, 2, 1, 1, 0, 1, 2, 3, 2, 2, 1, 3, 3, 0, 3, 1, 2, 1, 3, 0, 1, 2, 1, 1, 3, 1, 3, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2], [0, 2, 1, 2, 2, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1]], "fitness": 98, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\l in1:{:\\nres0 += int(1.0)\\nif ( ( ( min(res0, i1) \\le ( divInt(mod(i1,int(7.0)),i1) * in0 ) and b1 ) or int(8.0) \\ge int(9.0) ) or True ):{:\\nloopBreak% = 0\\nwhile ( i2 != int(7.0) or ( ( i0 - int(7.0) ) * ( ( min(int(7.0), in2) * min(( abs(int(9.0)) + int(6.0) ), int(9.0)) ) + res0 ) ) \\g ( divInt(in0,int(5.0)) + i1 ) ):{:\\nloopBreak% = 0\\nwhile int(8.0) == abs(int(9.0)):{:\\nif divInt(int(3.0),int(7.0)) \\g in1:{:\\nif b1:{:\\nin1 += int(8.0)\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin0 = mod(abs(( mod(int(2.0),abs(min(i0, min(int(3.0), divInt(int(7.0),min(i2, int(9.0))))))) + mod(int(7.0),int(0.0)) )),abs(int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( b2 or abs(in0) == int(8.0) )\\n", "other_info": {}, "test_fitness": 989, "mapping_values": [1, 10, 10, 6, 4, 24, 24, 8, 4, 5, 17, 8, 9, 1, 3, 20, 3, 69, 16, 12, 10, 8]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 0], [1], [1], [7], [4], [], [], [0, 0, 1], [0], [1, 2], [0], [0], [2, 3, 6, 4, 4], [1], [3, 0, 0, 3, 1, 2, 3, 0, 3, 0], [0], [2, 1, 2, 2], [1, 1], []], "fitness": 98, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nif not abs(i2) \\le in0:{:\\nres0 -= max(int(7.0), ( abs(in1) - abs(in1) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 989, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 0, 3, 1, 2, 1, 1, 5, 1, 10, 1, 4, 2, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 1, 0, 2, 0, 0, 2, 2, 1, 0, 0, 1, 0], [1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 9, 3, 6, 1, 5, 3, 7, 5, 4, 7, 9, 3, 4, 4, 7, 9, 9, 8, 6, 7, 2, 7, 0, 9, 6, 8, 6, 8, 7], [3, 1, 1, 0, 1, 1, 4, 0, 4, 5], [2, 0, 2, 0, 1, 1], [0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2], [], [1, 0], [6, 4, 6, 2, 0, 2, 5, 0, 2, 2, 2, 4, 6, 2, 5, 1, 4, 3, 5, 4, 6, 1, 4, 4, 3], [1, 0, 0, 1], [3, 1, 0, 0, 1, 1, 1, 1, 0, 3, 2, 1, 3, 1, 2, 3, 1, 2, 1, 3, 0, 1, 3, 1, 1, 0, 0, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 3, 1, 3, 3, 3, 1, 2, 0, 2, 3, 2, 3, 2, 1, 2, 2, 0, 2, 2, 1, 1, 2, 2, 1, 3, 2, 3, 1, 3, 1, 0, 3, 0, 1, 1, 3, 1, 1, 2, 2, 0, 2, 0, 1, 1, 2, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 1, 1, 2, 2, 1, 0, 0, 2], [0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 2], [0, 0, 1, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(5.0), res0) \\ge in1:{:\\nif int(4.0) \\g int(9.0):{:\\nres0 += int(3.0)\\n:}else:{:\\nb2 = b0\\n:}\\nloopBreak% = 0\\nwhile ( int(6.0) \\g i2 and not max(( int(1.0) + max(int(5.0), ( max(int(3.0), ( int(7.0) + abs(i0) )) * int(5.0) )) ), abs(int(4.0))) \\l int(7.0) ):{:\\nb2 = i2 \\g in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not int(9.0) \\g i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i2 \\le min(int(3.0), i2):{:\\nif int(4.0) \\l i2:{:\\nin1 = res0\\n:}\\nb1 = i2 \\le in2\\ni1 = abs(int(4.0))\\nb1 = abs(abs(max(int(7.0), divInt(in1,( max(divInt(abs(mod(int(9.0),divInt(( in0 - ( mod(int(9.0),int(8.0)) - mod(divInt(int(6.0),abs(mod(max(int(7.0), min(int(2.0), in2)),min(in1, int(7.0))))),int(0.0)) ) ),abs(int(9.0))))),int(6.0)), mod(( res0 - ( i1 * int(8.0) ) ),int(6.0))) + ( int(8.0) + in1 ) ))))) != int(7.0)\\nin1 *= in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 5, 9, 31, 31, 10, 6, 1, 14, 10, 4, 0, 2, 25, 4, 88, 18, 18, 11, 9]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1], [5], [5], [], [], [1], [0], [], [], [], [4, 4, 2], [1], [0, 0, 3, 1], [], [2], [0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 != in1:{:\\ni2 += abs(int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 3, 1, 4, 0, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 0], [1], [1, 1, 0], [1, 1, 1], [2, 5, 0], [3, 5], [0], [], [1, 1], [0, 0], [], [], [], [0, 2, 1, 3, 6, 3], [1, 0], [2, 1, 1, 0, 0, 1, 3, 0, 0], [1], [2], [1], [0]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= divInt(int(2.0),int(5.0))\\nloopBreak% = 0\\nwhile i2 \\ge i1:{:\\nin0 = int(0.0)\\nb0 = abs(res0) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 3, 3, 2, 1, 0, 2, 2, 0, 0, 0, 6, 2, 9, 1, 1, 1, 1]}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 4, 8, 3, 3, 4, 3, 7, 5, 7, 7, 5, 6, 0, 5, 1, 8, 1, 7, 1, 3, 0, 3, 3, 9, 1, 1, 6, 9, 7, 0, 1, 5, 0, 0, 5, 5, 4, 6, 2, 8, 4, 3, 1, 3, 2, 9, 2, 6, 8, 1, 3, 1, 0, 8, 8, 4, 8, 2, 1, 4, 2, 7, 6, 0, 6, 3, 8, 4, 8, 3, 7, 6, 1, 6, 0, 2, 1, 5, 7, 4, 5, 8, 9, 4, 9, 9, 0, 9, 0, 9, 7, 1, 7, 7, 5, 3, 5, 6, 6, 0, 9, 8, 5, 4, 4, 1, 6, 3, 6, 6, 9, 7, 3, 7, 5, 3, 0, 6, 9, 0, 6, 7, 2, 9, 5, 7, 3, 5, 0, 0, 8, 7, 1, 7, 8, 1, 4, 4, 3, 7, 4, 2, 3, 2, 5, 4, 8, 3, 9, 4, 4, 5, 8, 0, 3, 4, 5, 4, 2, 9, 2, 5, 8, 9, 6, 8, 6, 9, 4, 9, 9, 2, 2, 1, 9, 5, 3, 7, 6, 3, 3, 6, 2, 4, 1, 3, 9, 2, 6, 0, 0, 7, 0, 4, 8, 3, 6, 4, 5, 9, 1, 6, 1, 3, 7, 2, 6, 3, 6, 4, 0, 9, 1, 5, 0, 5, 0, 8, 7, 0, 4, 2, 6, 3, 2, 3, 3, 3, 2, 3, 8, 4, 4, 1, 8, 7, 0, 6, 2, 2, 0, 4], [], [], [], [], [], [], [], [], [5, 4, 2, 5, 1, 3, 5, 5, 1, 3, 0, 5, 3, 3, 4, 5, 4, 2, 5, 4, 5, 1, 1, 5, 4, 6, 2, 4, 1, 1, 4, 4, 5, 6, 3, 3, 6, 4, 3, 3, 5, 1, 4, 0, 3, 1, 0, 2, 2, 2, 0, 4, 3, 2, 0, 0, 2, 0, 1, 5, 2, 4, 2, 0, 2, 5, 5, 2, 4, 6, 6, 1, 0, 6, 0, 3, 3, 3, 4, 6, 2, 6, 3, 0, 2, 6, 3, 6, 2, 6, 6, 0, 5, 0, 1, 1, 6, 3, 0, 5, 1, 2, 2, 2, 2, 6, 5, 6, 6, 2, 4, 5, 2, 2, 5, 3, 0, 2, 2, 4, 3, 6, 1, 2, 5, 0, 2, 5, 0, 5, 3, 2, 3, 6, 4, 2, 3, 4, 5, 0, 6, 4, 1, 5, 6, 4, 5, 0, 1, 5, 0, 4, 3, 3, 3, 4, 1, 5, 0, 2, 6, 1, 1, 1, 2, 4, 3, 0, 3, 2, 0, 6, 2, 2, 6, 5, 0, 6, 5, 5, 1, 4, 5, 3, 1, 5, 1, 3, 2, 5, 0, 0, 3, 5, 5, 0, 2, 2, 6, 4, 5, 0, 3, 6, 0, 3, 4, 2, 4, 1, 4, 1, 6, 0, 5, 5, 4, 5, 1, 6, 0, 2, 1, 3, 0, 2, 5, 4, 6, 4, 4, 0, 5], [1, 1, 0], [3, 1, 2, 2, 1, 2, 2, 2, 3, 3, 1, 2, 2, 3, 0, 2, 2, 1, 3, 2, 2, 1, 0, 2, 2, 1, 2, 2, 2, 2, 1, 3, 1, 3, 2, 2, 1, 2, 1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 1, 3, 3, 2, 0, 2, 0, 0, 2, 1, 3, 2, 0, 2, 0, 2, 2, 0, 3, 3, 3, 0, 3, 2, 2, 0, 3, 2, 2, 1, 3, 1, 0, 0, 3, 2, 0, 3, 2, 3, 3, 1, 2, 1, 3, 2, 1, 3, 1, 2, 1, 3, 1, 0, 1, 1, 2, 2, 1, 3, 0, 2, 1, 3, 3, 0, 1, 0, 2, 1, 1, 0, 2, 3, 2, 2, 1, 3, 2, 0, 0, 3, 1, 0, 1, 0, 1, 1, 3, 2, 3, 0, 1, 2, 3, 0, 3, 2, 3, 1, 2, 2, 3, 3, 2, 3, 3, 3, 3, 2, 1, 1, 1, 0, 0, 3, 3, 2, 2, 3, 1, 1, 0, 1, 0, 3, 3, 2, 3, 0, 1, 3, 2, 3, 3, 2, 0, 2, 2, 3, 0, 3, 2, 3, 2, 3, 3, 3, 0, 0, 0, 3, 3, 0, 3, 3, 1, 2, 0, 3, 2, 3, 2, 1, 1, 2, 2, 0, 0, 0, 2, 0, 3, 0, 3, 0, 1, 2, 2, 2, 2, 0, 3, 0, 1, 2, 0, 1, 3, 0, 2, 1, 3, 0, 3, 0, 1, 3, 1, 1, 0, 3, 1, 0, 3, 0, 3, 1, 1, 3, 0, 0, 1, 3, 3, 1, 2, 2, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 1, 3, 2, 0, 3, 0, 2, 3, 3, 0, 3, 2, 2, 2, 3, 2, 2, 1, 0, 1, 2, 1, 2, 2, 1, 0, 0, 2, 2, 0, 2, 2, 0, 1, 0, 3, 2, 1, 2, 1, 0, 1, 2, 3, 1, 0, 2, 3, 1, 1, 1, 1, 3, 1, 3, 2, 3, 3, 1, 1, 1, 3, 0, 0, 3, 2, 2, 0, 3, 3, 0, 1, 1, 0, 3, 1, 2, 3, 3, 3, 0, 0, 3, 2, 3, 0, 1, 3, 1, 2, 0, 1, 2, 0, 3, 3, 2, 3, 1, 1, 0, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 2, 0, 0, 1, 2, 3, 2, 3, 1, 3, 0, 3, 0, 0, 3, 2, 3, 1, 1, 1, 1, 3, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 1, 0, 2, 2, 3, 3, 0, 2, 1, 3, 1, 1, 3, 0, 2, 3, 2, 2, 0, 1, 1, 2, 2, 2, 2, 0, 2, 1, 3, 2, 1, 0, 1, 1, 3, 1, 0, 3, 3, 3, 0, 1, 0, 2, 1, 0, 2, 3, 0, 1, 0, 2, 0, 0, 2, 3, 1, 3, 1, 3, 2, 3, 1, 0, 2, 2, 0, 2, 2, 3, 3, 2, 1, 1, 2, 3, 3, 0, 0, 0, 2, 2, 3, 1, 1, 3, 0, 2, 0, 1, 3, 3, 2, 1, 1, 2, 1, 0, 2, 3, 1, 2, 3, 3, 3, 3, 1, 2, 3, 3, 3, 2, 1, 2, 0, 2, 0, 3, 0, 0, 2, 2, 3, 2, 0, 3, 1, 2, 3, 3, 3, 1, 2, 1, 3, 1, 1, 0, 3, 2, 0, 0, 3, 1, 0, 3, 0, 1, 2, 2, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 0, 0, 0, 2, 1, 2, 1, 1, 2, 2, 3, 3, 3, 0, 3, 1, 3, 2, 2, 3, 0, 3, 2, 3, 1, 3, 3, 3, 1, 2, 3, 2, 0, 1, 0, 3, 2, 1, 2, 0, 1, 0, 2, 2, 2, 0, 1, 3, 3, 0, 3, 3, 1, 0, 1, 2, 2, 3, 2, 2, 2, 3, 0, 3, 0, 1, 1, 3, 1, 2, 3, 2, 1, 0, 1, 3, 0, 0, 1, 3, 3, 3, 0, 1, 0, 3, 0, 3, 0, 0, 3, 3, 2, 1, 3, 2, 3, 0, 1, 0, 1, 0, 3, 0, 1, 3, 2, 2, 3, 3, 2, 3, 0, 3, 1, 0, 0, 3, 1, 3, 1, 0, 1, 1, 2, 0, 2, 2, 1, 1, 3, 3, 3, 2, 3, 0, 0, 1, 2, 1, 2, 0, 1, 3, 3, 2, 2, 2, 2, 3, 3, 2, 2, 0, 2, 2, 2, 3, 1, 3, 3, 0, 2, 0, 1, 1, 0, 3, 2, 2, 2, 0, 2, 3, 0, 3, 2, 1, 0, 3, 3, 3, 2, 1, 2, 1, 2, 0, 2, 1, 1, 2, 1, 3, 2, 3, 1, 0, 2, 3, 2, 1, 1, 1, 1, 1, 3, 3, 1, 2, 3, 1, 1, 2, 1, 2, 2, 3, 3, 2, 1, 0, 3, 2, 0, 0, 0, 2, 1, 2, 1, 0, 3, 2, 1, 1, 2, 0, 1, 1, 2, 0, 0, 3, 0, 2, 0, 3, 2, 3, 0, 0, 2, 2, 1, 2, 0, 1, 1, 3, 2, 1, 3, 1, 2, 2, 1, 2, 2, 0, 2, 2, 2, 3, 0, 2, 1, 1, 3, 1, 2, 2, 0, 2, 0, 0, 3, 3, 2, 3, 3, 2, 2, 3, 2, 3, 3, 1, 1, 2, 2, 0, 0, 3, 2, 1, 2, 0, 0, 3, 3, 1, 3, 1, 0, 2, 2, 2, 2, 1, 2, 0, 1, 0, 2, 2, 3, 3, 2, 2, 0, 1, 0, 3, 1, 2, 0, 3, 2, 3, 0, 3, 1, 3, 3, 3, 2, 3, 2, 3, 1, 3, 0, 0, 2, 1, 3, 3, 3, 2, 3, 0, 0, 2, 0, 1, 0, 3, 2, 1, 3, 1, 0, 3, 1, 3, 0, 2, 0, 1, 1, 0, 2, 2, 0, 3, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 2, 0, 2, 3, 1, 1, 0, 3, 0, 3, 0, 3, 0, 1, 1, 2, 1, 0, 3, 0, 0, 2, 3, 0, 3, 1, 2, 2, 2, 1, 2, 2, 0, 1, 3, 2, 3, 1, 1, 1, 3, 1, 2, 0, 0, 1, 3, 1, 1, 2, 3, 1, 0, 0, 0, 3, 0, 0, 3, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 2, 1, 0, 1, 0, 1, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 0, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 1, 1, 0, 1, 2, 2, 0, 1, 2, 0, 1, 1, 0, 2, 1, 2, 0, 1, 2, 1, 1, 2, 0, 0, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 1, 1, 0, 2, 2, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 0, 0, 1, 1, 0, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 0, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 2, 0, 2, 2, 1, 2, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 1, 2, 0, 0, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 2, 1, 0, 1, 2, 0, 0, 2, 1, 1, 1, 2, 1, 0, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 0, 2, 1, 1, 0, 1, 1, 1, 2, 0, 2, 1, 2, 0, 2, 1, 0, 1, 2, 0, 0, 1, 0, 0, 2, 1, 0, 2, 0, 2, 0, 1, 0, 1, 2, 1, 2, 1, 1, 0, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 0, 2, 2, 1, 2, 2, 0, 2, 1, 1, 0, 1], [0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 2, 1, 1, 1, 0, 0, 1, 1, 0, 2, 0, 0, 1, 2, 1, 1, 1, 1, 0, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 0, 1, 2, 1, 2, 2, 0, 1, 2, 1, 1, 2, 0, 2, 2, 1, 0, 2, 0, 1, 2, 1, 0, 2, 1, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1, 0, 0, 1, 2, 0, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 2, 0, 1, 1, 1, 0, 2, 2, 1, 2, 1, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 115, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += min(int(6.0), ( ( int(2.0) * mod(mod(mod(max(min(int(4.0), divInt(( min(in1, ( ( int(8.0) * abs(divInt(( int(3.0) * i2 ),divInt(mod(int(3.0),divInt(divInt(divInt(( int(4.0) + max(int(3.0), min(mod(( int(7.0) + divInt(int(5.0),max(min(( int(7.0) + in2 ), int(7.0)), i1)) ),in0), int(5.0))) ),int(6.0)),max(max(( in2 + ( in2 * i1 ) ), mod(int(0.0),min(divInt(in0,( i0 + ( ( in2 * min(abs(min(in0, abs(( divInt(in0,min(divInt(mod(int(5.0),min(int(1.0), in1)),in2), abs(( in1 - min(divInt(abs(min(int(8.0), divInt(int(1.0),min(( int(7.0) - min(int(1.0), divInt(int(3.0),min(int(0.0), i2))) ), int(3.0))))),int(3.0)), ( ( int(9.0) - max(in2, divInt(int(1.0),max(abs(in1), int(1.0)))) ) + in2 )) )))) + divInt(int(6.0),int(9.0)) )))), i1) ) - mod(max(mod(( int(7.0) - max(divInt(i1,in2), max(int(0.0), in1)) ),int(1.0)), res0),int(5.0)) ) )), int(0.0)))), max(divInt(abs(i2),int(0.0)), ( max(in1, abs(( min(int(5.0), ( mod(min(min(( abs(abs(max(max(( int(5.0) + int(4.0) ), int(6.0)), i1))) * i1 ), abs(max(( ( min(int(2.0), int(8.0)) + in1 ) + int(4.0) ), in1))), max(max(( abs(in2) - int(3.0) ), max(mod(max(min(divInt(res0,( ( max(in0, abs(mod(abs(mod(min(max(abs(in0), res0), in1),min(max(in0, max(min(int(1.0), divInt(in0,abs(mod(max(( int(3.0) * int(2.0) ), mod(( in2 - i1 ),in1)),( i0 - abs(in0) ))))), min(i1, int(9.0)))), mod(mod(( ( i0 - max(i2, int(2.0)) ) - ( i2 + int(6.0) ) ),abs(i2)),( int(8.0) * max(i0, max(in1, int(1.0))) ))))),abs(int(3.0))))) + int(1.0) ) * in0 )), min(int(0.0), i2)), min(i0, abs(int(8.0)))),int(8.0)), max(i0, i2))), int(4.0))),min(max(int(8.0), mod(( int(2.0) + int(1.0) ),( ( ( i0 + ( int(4.0) - int(2.0) ) ) + int(7.0) ) * int(6.0) ))), abs(( i1 * max(in2, mod(abs(min(i2, max(( ( ( abs(divInt(divInt(int(0.0),in1),int(6.0))) + ( int(3.0) * ( mod(int(8.0),i2) + i0 ) ) ) + mod(( i2 - divInt(( in2 * int(4.0) ),in2) ),min(( int(8.0) - divInt(int(3.0),i2) ), int(7.0))) ) * divInt(max(int(6.0), in1),mod(max(int(1.0), int(6.0)),int(0.0))) ), int(2.0)))),max(int(1.0), min(divInt(abs(abs(int(5.0))),int(7.0)), int(4.0))))) )))) * max(res0, res0) )) + min(mod(mod(i1,abs(max(i0, int(5.0)))),int(8.0)), res0) ))) - abs(int(9.0)) )))),( max(min(max(i0, in0), max(( abs(in0) * int(4.0) ), min(int(9.0), ( in0 - int(9.0) )))), ( in1 - min(max(( max(int(0.0), int(9.0)) * res0 ), int(0.0)), ( min(abs(max(i2, mod(res0,max(in0, int(9.0))))), ( i0 + i2 )) * int(7.0) )) )) * ( abs(( max(int(1.0), abs(res0)) - abs(in0) )) + res0 ) ))),max(( max(int(7.0), int(7.0)) * int(5.0) ), int(3.0))))) ) + abs(( int(5.0) - i2 )) )) * res0 ),int(6.0))), max(abs(divInt(abs(int(6.0)),int(0.0))), res0)),( ( max(abs(i0), mod(int(9.0),max(int(8.0), int(5.0)))) - max(in2, ( max(mod(divInt(i0,int(4.0)),int(4.0)), divInt(( mod(divInt(i1,( int(1.0) + abs(( int(6.0) * i1 )) )),int(3.0)) - int(6.0) ),max(int(6.0), res0))) * min(abs(min(in0, int(9.0))), i0) )) ) + divInt(int(7.0),in2) )),mod(abs(i1),int(3.0))),i2) ) + mod(i2,i2) ))\\ni2 *= mod(abs(int(7.0)),abs(int(5.0)))\\nres0 = abs(divInt(max(int(3.0), in2),( mod(res0,( mod(min(abs(( int(0.0) * int(6.0) )), ( abs(max(res0, i2)) + in1 )),mod(mod(max(int(9.0), int(0.0)),abs(in2)),( i2 + int(6.0) ))) + max(abs(( int(7.0) + int(2.0) )), ( int(9.0) + i2 )) )) - ( min(int(5.0), ( min(min(abs(min(int(7.0), ( abs(abs(max(( int(3.0) - ( in2 - ( in0 * abs(i0) ) ) ), i2))) - ( ( min(( i2 + min(int(5.0), ( max(max(max(int(0.0), mod(int(0.0),min(int(8.0), int(7.0)))), in1), max(( in0 * res0 ), max(int(1.0), i1))) + max(i2, int(7.0)) )) ), divInt(( max(mod(in2,i0), min(int(8.0), i2)) * max(divInt(( in2 - int(1.0) ),int(4.0)), i0) ),in2)) * in0 ) - ( int(4.0) - ( int(3.0) + int(7.0) ) ) ) ))), mod(( max(max(min(i2, min(int(4.0), abs(divInt(divInt(abs(in0),max(( abs(int(2.0)) - min(min(abs(int(3.0)), ( abs(mod(res0,int(2.0))) + in1 )), abs(( int(5.0) * ( i2 - int(4.0) ) ))) ), in0)),( ( divInt(in1,int(8.0)) - min(abs(in2), max(min(int(3.0), i0), int(9.0))) ) - divInt(divInt(abs(( mod(mod(min(res0, min(in1, int(4.0))),int(4.0)),abs(int(5.0))) + divInt(abs(mod(int(8.0),i1)),int(0.0)) )),min(in2, res0)),int(3.0)) ))))), abs(abs(max(in1, int(4.0))))), in2) + max(i0, min(i1, in2)) ),max(min(divInt(int(5.0),abs(mod(max(i0, int(4.0)),in1))), int(2.0)), in0))), min(in0, int(9.0))) - max(( divInt(abs(min(( min(in0, abs(int(2.0))) * in1 ), i1)),max(int(5.0), max(int(8.0), in2))) + int(9.0) ), int(6.0)) )) * ( i0 - ( mod(int(8.0),int(6.0)) - max(abs(max(divInt(min(i2, res0),int(9.0)), divInt(int(4.0),divInt(i1,int(9.0))))), max(abs(divInt(( ( ( abs(max(divInt(( i1 + divInt(mod(divInt(abs(int(9.0)),max(max(i1, ( i2 - int(2.0) )), int(2.0))),in1),abs(divInt(( ( in0 - divInt(abs(i0),max(( int(1.0) + in0 ), abs(abs(max(divInt(int(9.0),( int(5.0) + mod(i2,divInt(int(3.0),int(7.0))) )), mod(int(6.0),abs(( min(int(3.0), i0) + ( abs(( int(3.0) - int(6.0) )) * int(2.0) ) )))))))) ) - int(4.0) ),int(1.0)))) ),max(max(int(3.0), ( min(int(9.0), int(2.0)) * mod(int(6.0),( ( max(max(( int(0.0) * res0 ), max(divInt(i2,i2), res0)), ( int(0.0) - ( int(7.0) + in2 ) )) - abs(divInt(int(0.0),int(4.0))) ) - ( i0 - int(8.0) ) )) )), int(3.0))), divInt(res0,in2))) * min(in2, divInt(i1,abs(( max(in1, in2) * divInt(( int(6.0) + divInt(in0,int(4.0)) ),int(5.0)) )))) ) - abs(( int(9.0) - min(int(1.0), mod(mod(int(6.0),( divInt(i1,mod(( ( abs(in2) - divInt(int(1.0),int(3.0)) ) + max(int(7.0), mod(( i1 * ( in0 * i2 ) ),min(max(( abs(min(( mod(min(( max(min(int(2.0), int(6.0)), divInt(( in2 - i0 ),min(( int(3.0) * mod(i0,in0) ), abs(max(int(6.0), min(int(4.0), in2)))))) - ( divInt(( divInt(int(0.0),divInt(in2,int(9.0))) + i0 ),( mod(abs(min(( mod(i2,int(1.0)) * i2 ), abs(int(5.0)))),( res0 - min(( max(in1, min(int(0.0), max(abs(max(divInt(abs(divInt(max(int(5.0), max(in2, i0)),( int(0.0) - min(abs(abs(divInt(min(in0, res0),( i0 - int(8.0) )))), in0) ))),max(mod(int(7.0),abs(int(0.0))), in1)), abs(int(4.0)))), max(i2, divInt(in1,int(2.0)))))) - int(6.0) ), i1) )) + ( ( in1 * abs(i1) ) - int(3.0) ) )) - divInt(mod(( ( int(2.0) - int(3.0) ) + res0 ),i0),( in2 - ( min(int(3.0), int(3.0)) + in2 ) )) ) ), min(in1, min(in2, abs(i1)))),int(2.0)) * int(3.0) ), ( int(8.0) + res0 ))) + abs(i0) ), i2), mod(max(i1, abs(int(4.0))),divInt(( divInt(int(4.0),( mod(in0,int(1.0)) - abs(divInt(min(int(8.0), int(7.0)),int(0.0))) )) - abs(int(6.0)) ),divInt(i0,i2)))))) ),int(2.0))) + max(int(2.0), int(0.0)) )),divInt(max(int(4.0), in2),in1))) )) ) - res0 ),min(in1, in1))), max(i0, in2))) ) ) ) )))\\n", "other_info": {}, "test_fitness": 990, "mapping_values": [1, 3, 3, 0, 3, 244, 244, 0, 0, 0, 0, 0, 0, 0, 0, 233, 3, 1040, 285, 281, 153, 134]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [5, 5], [2], [1], [], [1], [0], [], [], [], [3, 0, 4, 6], [], [2, 3, 0, 2, 1, 0, 0, 2, 1, 0], [1, 0, 0], [1], [1, 2], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(max(in0, ( int(5.0) - i0 )),in1) == ( int(5.0) * res0 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 10, 3, 1, 2, 1]}, {"genotype": [[0], [1, 1, 0, 0, 1, 1], [2, 1, 1, 2, 1, 1], [0, 1], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 5, 2, 9, 3, 1, 7, 2, 7, 7, 4, 5, 1], [3, 3, 2], [1, 0, 0], [], [0, 1, 1, 1], [0, 0, 0], [0], [], [1], [1, 3, 4, 5, 0, 3, 4, 1, 2, 0, 5, 6, 2, 6, 0, 1, 0, 3], [0, 1], [1, 3, 0, 2, 3, 1, 2, 3, 0, 0, 0, 2, 0, 0, 3, 2, 0, 0, 1, 1, 3, 1, 1, 3, 2, 0, 2, 3, 3, 2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 1, 2, 0, 1, 2, 0, 0, 2, 1, 3, 3, 0, 1, 0, 3, 1, 3, 2, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0], [2, 0, 1, 1, 2, 2, 1, 2, 0, 2, 0, 2, 2], [0, 0, 1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\ni1 = int(6.0)\\n:}else:{:\\nb0 = abs(in0) \\ge divInt(min(int(9.0), ( max(in1, in2) + i0 )),mod(in0,in1))\\nloopBreak% = 0\\nwhile max(mod(i1,i2), int(5.0)) \\ge int(2.0):{:\\ni0 += abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(3.0) == abs(divInt(in2,( max(abs(mod(min(res0, int(1.0)),int(7.0))), mod(( mod(mod(( int(2.0) - ( i2 - int(7.0) ) ),divInt(res0,i0)),( int(7.0) - abs(min(i1, int(4.0))) )) - i0 ),abs(int(5.0)))) + abs(( in0 + int(1.0) )) )))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 14, 14, 3, 3, 0, 4, 3, 1, 0, 1, 18, 2, 59, 16, 13, 8, 9]}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0], [0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 1, 9, 8, 6, 2, 2, 5, 9, 7, 2, 9, 6, 9, 8, 2, 2, 3, 0, 5, 5, 4, 6, 4, 9, 1, 0, 4, 2, 6, 0, 0, 3, 3, 7, 9, 1, 6, 8, 6, 4, 2, 5, 8, 6, 8, 6, 0, 8, 0, 5, 4, 4, 3, 4, 3, 9, 7, 0, 6, 7, 3, 4, 3, 2, 8, 5, 7, 4, 5, 4, 8, 2, 6, 4, 8, 1, 6, 5, 2, 5, 4, 4, 7, 2, 9, 4, 0, 3, 0, 1, 3, 3, 5, 3, 9, 4, 2, 1, 8, 9, 4, 3, 4, 7, 6, 0, 1, 9, 3, 1, 9, 1, 6, 5, 6, 3, 2, 4, 9, 1, 5, 9, 7, 1, 0, 8, 9, 0, 7, 5, 9, 3, 4, 5, 3, 9, 2, 0, 3, 1, 5, 5, 6, 2, 3, 4, 7, 9, 1, 3, 3, 4, 3, 8, 5, 2, 9, 0, 5, 2, 0, 4, 4, 5, 5, 2, 9, 1, 9, 1, 9, 8, 1], [5, 2, 0, 1, 2, 2, 3], [0, 1, 1, 0, 0, 2, 2, 0, 0], [], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2], [], [1, 0, 1, 1], [1, 5, 4, 3, 6, 4, 1, 3, 0, 1, 0, 2, 1, 1, 0, 4, 3, 6, 3, 4, 0, 5, 0, 0, 0, 5, 4, 2, 5, 2, 6, 3, 3, 1, 1, 5, 5, 4, 4, 0, 2, 1, 6, 2, 4, 4, 3, 2, 1, 5, 1, 6, 0, 3, 4, 1, 4, 3, 2, 1, 4, 3, 6, 6, 1, 6, 5, 3, 1, 2, 0, 3, 5, 5, 6, 0, 2, 5, 6, 5, 3, 5, 6, 4, 2, 5, 6, 4, 3, 2, 4, 5, 1, 2, 2, 4, 3, 6, 4, 1, 4, 2, 3, 3, 6, 3, 0, 0, 1, 1, 1, 4, 0, 4, 0, 6, 6, 3, 4, 5, 0, 6, 2, 3, 4, 0, 5, 5, 2, 4, 4, 5, 3, 0, 4, 3, 6, 2, 1, 3, 2, 2, 1, 3, 4, 5, 4, 6, 6, 5, 3, 4, 4, 3, 2, 1, 4, 2, 3, 4, 2, 5, 1, 1, 2, 1, 1, 6, 1, 2, 1, 3, 6, 1, 1, 2, 0], [1, 0], [3, 3, 1, 2, 3, 2, 0, 3, 2, 0, 0, 0, 2, 0, 0, 3, 1, 3, 2, 3, 0, 0, 0, 1, 1, 0, 0, 1, 2, 2, 2, 1, 0, 1, 1, 0, 1, 2, 0, 0, 3, 1, 0, 2, 2, 0, 3, 3, 1, 2, 3, 0, 1, 0, 3, 3, 1, 0, 3, 2, 0, 2, 0, 3, 1, 3, 0, 3, 3, 3, 2, 0, 1, 3, 0, 2, 2, 0, 3, 0, 1, 3, 2, 0, 2, 2, 0, 3, 2, 2, 1, 2, 2, 1, 3, 1, 2, 1, 0, 2, 3, 1, 3, 3, 1, 0, 0, 0, 3, 2, 3, 1, 3, 3, 2, 1, 0, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 0, 0, 3, 1, 2, 1, 2, 1, 2, 1, 3, 1, 2, 2, 3, 0, 3, 3, 0, 3, 3, 3, 2, 2, 2, 2, 2, 2, 0, 3, 0, 2, 2, 1, 3, 2, 3, 0, 0, 2, 3, 3, 3, 3, 3, 0, 0, 3, 3, 2, 0, 2, 1, 0, 2, 0, 2, 0, 0, 3, 1, 2, 1, 2, 3, 3, 2, 0, 2, 3, 2, 0, 0, 1, 0, 3, 0, 2, 0, 2, 2, 0, 3, 3, 3, 3, 1, 2, 0, 1, 0, 2, 0, 1, 3, 0, 3, 2, 0, 1, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1, 2, 3, 1, 3, 3, 2, 3, 3, 1, 3, 3, 3, 2, 2, 2, 3, 0, 3, 1, 3, 1, 2, 0, 3, 3, 0, 0, 1, 1, 2, 3, 2, 1, 2, 1, 0, 2, 3, 1, 2, 3, 0, 2, 1, 2, 0, 2, 3, 1, 3, 1, 3, 3, 1, 0, 3, 0, 2, 2, 2, 0, 0, 0, 1, 3, 1, 0, 3, 1, 3, 2, 0, 1, 2, 1, 2, 0, 3, 2, 3, 3, 1, 2, 3, 1, 0, 1, 1, 2, 2, 3, 2, 0, 1, 2, 2, 3, 1, 0, 0, 2, 2, 3, 0, 1, 2, 2, 3, 3, 0, 1, 2, 3, 2, 1, 3, 0, 0, 3, 2, 1, 0, 2, 3, 3, 2, 2, 3, 2, 2, 2, 0, 3, 1, 3, 0, 3, 0, 2, 3, 1, 1, 1, 1, 0, 2, 0, 2, 1, 3, 3, 2, 0, 0, 0, 3, 1, 2, 3, 1, 1, 2, 0, 2, 3, 0, 2, 0, 0, 3, 2, 2, 3, 0, 3, 1, 2, 3, 3, 0, 0, 1, 1, 0, 2, 3, 3, 0, 3, 0, 2, 3, 2, 2, 1, 2, 2, 2, 2, 1, 1, 3, 1, 0, 2, 3, 1, 3, 3, 0, 1, 1, 1, 3, 0, 1, 0, 0, 3, 3, 2, 1, 2, 3, 0, 0, 1, 2, 0, 2, 3, 2, 0, 1, 3, 2, 3, 2, 3, 2, 1, 0, 0, 3, 3, 1, 0, 3, 3, 1, 0, 2, 1, 1, 0, 0, 2, 1, 2, 1, 3, 3, 1, 1, 2, 0, 0, 3, 0, 2, 3, 0, 1, 1, 2, 2, 1, 0, 2, 3, 3, 3, 0, 0, 1, 3, 3, 1, 2, 0, 2, 3, 2, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 3, 1, 0, 0, 2, 1, 3, 3, 2, 0, 3, 0, 3, 3, 0, 1, 3, 0, 1, 3, 0, 3, 1, 0, 2, 3, 2, 3, 3, 1, 1, 3, 0, 3, 3, 2, 1, 0, 1, 2, 3, 1, 3, 2, 1, 1, 1, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 0, 0, 1, 3, 2, 2, 0, 2, 2, 0, 3, 2, 1, 2, 0, 2, 1, 1, 1, 2, 3, 2, 2, 1, 3, 1, 1, 2, 1, 0, 0, 1, 2, 3, 0, 3, 1, 3, 0, 1, 2, 3, 2, 2, 2, 2, 1, 1, 2, 1, 0, 0, 3, 3, 0, 1, 3, 3, 3, 1, 0, 1, 1, 2, 1, 1, 3, 1, 1, 3, 1, 2, 2, 3, 1, 0, 2, 3, 3, 1, 0, 2, 1, 0, 3, 1, 1, 1, 0, 0, 3, 3, 0, 2, 3, 2, 2, 3, 0, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 2, 1, 0, 3, 2, 0, 3, 1, 2, 2, 2, 1, 3, 3, 1, 1, 0, 1, 1, 0, 2, 3, 0, 3, 0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0], [1, 2, 2, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 2, 0, 1, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 0, 1, 0, 2, 2, 1, 2, 1, 0, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 1, 2, 0, 2, 0, 0, 0, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 1, 2, 1, 0, 2, 2, 2, 1, 0, 0, 0, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 2, 1, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 2, 1, 2, 2, 1, 0, 2, 0, 2, 1, 1, 2, 2, 1, 1, 0, 1, 2, 0, 2, 0, 2, 0, 1, 2, 0, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 1, 1, 1, 2, 2], [1, 0, 1, 0, 2, 0, 0, 0, 1, 2, 0, 2, 2, 0, 0, 1, 2, 1, 0, 1, 0, 2, 2, 1, 0, 0, 0, 1, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 1, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 2, 2, 2, 0, 0, 1, 2, 2, 1, 2, 2, 1, 0, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0, 2, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 147, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nif max(abs(int(7.0)), divInt(abs(divInt(i1,max(( in2 - in1 ), in0))),mod(res0,in1))) != min(int(6.0), abs(divInt(abs(i1),in0))):{:\\nb1 = i0 == int(1.0)\\n:}\\n:}else:{:\\nb1 = b0\\nb0 = not int(9.0) \\l i1\\ni0 += i2\\n:}\\nif int(8.0) \\g divInt(divInt(divInt(int(6.0),i1),int(2.0)),int(2.0)):{:\\ni1 = i0\\n:}else:{:\\nb2 = int(5.0) == mod(in1,in0)\\nif b2:{:\\nb0 = min(int(9.0), res0) == ( divInt(in0,max(max(int(7.0), mod(min(in1, int(2.0)),i0)), max(max(int(9.0), in2), abs(( i0 - ( i0 + min(int(6.0), max(i0, max(min(min(( in2 * int(9.0) ), min(in1, divInt(divInt(i2,min(in2, int(8.0))),min(mod(i2,mod(divInt(res0,max(( mod(int(2.0),( ( int(2.0) + abs(int(3.0)) ) + mod(int(0.0),in0) )) + mod(min(int(5.0), min(max(int(5.0), in0), i1)),i1) ), min(divInt(abs(int(4.0)),min(max(( int(6.0) - in2 ), max(int(4.0), int(9.0))), max(( in2 * int(1.0) ), divInt(int(0.0),abs(in1))))), int(4.0)))),mod(in1,i0))), abs(int(2.0)))))), divInt(int(6.0),divInt(int(0.0),mod(int(0.0),max(int(3.0), mod(( max(i2, min(max(i1, max(min(abs(mod(( mod(divInt(( divInt(res0,max(i2, divInt(divInt(int(3.0),max(mod(min(in1, in1),mod(min(max(max(max(abs(in0), i2), abs(max(( i1 + divInt(int(7.0),in2) ), ( i1 * ( res0 * i0 ) )))), min(int(9.0), mod(int(1.0),divInt(max(min(mod(in0,( abs(( in1 + i1 )) + int(6.0) )), in1), min(in0, divInt(i2,divInt(divInt(i1,min(max(min(abs(int(8.0)), divInt(in1,int(6.0))), in0), mod(res0,int(4.0)))),abs(res0))))),max(divInt(i1,int(2.0)), int(5.0)))))), res0),int(8.0))), int(6.0))),in2))) - int(8.0) ),divInt(int(6.0),in0)),int(0.0)) * ( abs(int(8.0)) - max(min(( min(abs(int(0.0)), max(min(max(( divInt(( min(i1, abs(int(5.0))) + max(int(4.0), ( i2 - min(max(i0, in0), int(4.0)) )) ),int(3.0)) + mod(max(( int(4.0) * ( int(3.0) * in2 ) ), ( abs(int(9.0)) - ( min(in2, divInt(int(7.0),( res0 + ( abs(int(0.0)) + min(int(6.0), min(min(int(7.0), i0), max(i2, ( mod(mod(in2,res0),in2) + int(3.0) )))) ) ))) - abs(int(4.0)) ) )),in0) ), min(int(3.0), max(mod(in2,int(2.0)), ( int(8.0) * mod(res0,min(( min(abs(int(5.0)), mod(max(int(7.0), in1),int(4.0))) * int(5.0) ), divInt(( abs(mod(i2,int(4.0))) - divInt(mod(max(int(8.0), in2),res0),mod(mod(max(in1, int(2.0)),mod(divInt(abs(min(in0, int(6.0))),( max(mod(int(4.0),max(i2, in1)), min(( int(8.0) * in2 ), ( max(min(( mod(min(divInt(mod(( i1 * max(int(1.0), abs(i2)) ),max(i2, divInt(min(int(6.0), int(5.0)),int(2.0)))),int(5.0)), in1),divInt(in0,divInt(int(4.0),abs(abs(( res0 * in1 )))))) + i1 ), abs(int(4.0))), divInt(max(int(7.0), int(2.0)),mod(in1,mod(min(i2, ( in0 * in0 )),min(( ( min(res0, abs(int(9.0))) + ( min(max(in0, i0), int(4.0)) + int(0.0) ) ) - i0 ), ( abs(max(i1, abs(i1))) * ( abs(( mod(int(3.0),divInt(( divInt(( int(0.0) * int(1.0) ),min(int(3.0), i1)) + ( min(int(3.0), max(max(in1, int(5.0)), int(3.0))) * int(9.0) ) ),min(i0, int(4.0)))) * in1 )) * i0 ) )))))) - min(max(( int(2.0) + ( abs(res0) * res0 ) ), int(1.0)), divInt(in0,( min(( in1 * int(8.0) ), max(divInt(max(mod(min(mod(int(9.0),in2), i0),min(max(int(4.0), res0), max(min(int(3.0), i2), divInt(int(4.0),int(7.0))))), in0),in1), divInt(int(6.0),( int(0.0) * max(max(int(1.0), int(9.0)), divInt(i0,in2)) )))) + min(in2, ( abs(i2) - int(3.0) )) ))) ))) + int(1.0) )),( ( int(9.0) + in1 ) + ( max(abs(min(in1, in2)), int(1.0)) * max(abs(int(6.0)), ( in0 + ( min(( mod(i0,in1) - in0 ), mod(( ( res0 + ( ( min(int(5.0), i2) * i1 ) * mod(int(6.0),max(min(( in0 * min(i2, min(max(i2, int(3.0)), max(i1, int(2.0)))) ), min(in0, abs(int(4.0)))), in1)) ) ) + ( max(( abs(abs(int(9.0))) + int(1.0) ), max(in2, min(abs(divInt(int(5.0),in1)), int(9.0)))) - ( min(int(7.0), abs(( int(1.0) * int(0.0) ))) * int(8.0) ) ) ),( res0 - divInt(max(( max(res0, int(9.0)) * abs(int(0.0)) ), in2),int(7.0)) ))) * in0 ) )) ) ))),in1)) ),int(5.0)))) )))), abs(( ( in1 - mod(divInt(in0,max(mod(int(9.0),( i2 + ( int(3.0) - int(4.0) ) )), int(5.0))),divInt(max(mod(( int(3.0) - min(int(9.0), int(2.0)) ),( int(0.0) - i1 )), in1),int(3.0))) ) - mod(max(i2, abs(int(1.0))),min(in0, int(5.0))) ))), divInt(abs(( divInt(mod(( int(5.0) * int(6.0) ),( int(2.0) + in1 )),i2) * min(abs(in2), int(3.0)) )),min(max(abs(int(4.0)), i1), int(7.0))))) * int(9.0) ), divInt(int(1.0),int(3.0))), min(int(3.0), int(4.0))) ) ),abs(int(3.0)))), mod(( abs(int(8.0)) * i1 ),( max(max(int(5.0), i2), mod(int(2.0),i1)) + min(int(9.0), int(0.0)) ))), int(5.0))), i1)) * res0 ),abs(min(i1, mod(min(divInt(( min(i2, int(2.0)) + int(0.0) ),int(4.0)), int(4.0)),int(5.0)))))))))), ( divInt(int(5.0),i1) - int(2.0) )))) ) ))))) - ( int(9.0) + in0 ) )\\n:}else:{:\\nb0 = not max(( res0 + max(int(1.0), ( mod(( int(9.0) - max(max(int(1.0), int(9.0)), i1) ),int(8.0)) + int(1.0) )) ), i1) \\ge ( abs(i2) - abs(i0) )\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 175, 175, 7, 9, 0, 12, 7, 5, 0, 4, 177, 2, 736, 191, 195, 91, 101]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 2, 0, 1, 1, 2, 1], [1, 0, 0], [0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 5, 0, 9, 9, 1, 9, 7, 8, 0, 4, 4, 3, 9, 7, 7, 9, 7, 2, 4, 8, 7, 3, 0, 3, 5, 1, 5, 6, 5, 0, 5, 2, 9, 2, 3, 3, 0, 6, 6, 2, 1, 7, 0, 4], [2, 1, 1, 1], [1, 2, 0], [1], [1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0], [3, 1, 1, 1], [1, 1, 1], [0, 0], [2, 5, 6, 6, 5, 0, 3, 4, 2, 5, 5, 6, 3, 3, 2, 0, 1, 5, 4, 6, 3, 1, 6, 3, 3, 2, 1, 5, 0, 5, 4, 5, 2, 5, 1, 4, 3, 1, 1, 1, 6, 4, 6, 6, 0, 3, 3, 3, 0, 0, 5, 3, 5, 6], [0], [1, 0, 0, 1, 3, 3, 3, 3, 3, 3, 2, 0, 3, 2, 2, 2, 1, 1, 2, 3, 3, 2, 2, 0, 2, 0, 0, 2, 1, 0, 2, 1, 3, 2, 1, 0, 1, 2, 2, 0, 2, 3, 3, 3, 2, 3, 0, 2, 1, 2, 1, 3, 2, 3, 1, 3, 3, 1, 0, 1, 3, 2, 2, 3, 1, 1, 0, 0, 3, 2, 3, 2, 3, 3, 3, 3, 2, 3, 0, 1, 1, 3, 0, 1, 1, 2, 0, 3, 1, 2, 2, 2, 3, 3, 0, 2, 3, 3, 0, 3, 3, 0, 0, 3, 1, 1, 2, 0, 2, 1, 1, 0, 2, 1, 3, 0, 2, 0, 0, 2, 3, 0, 1, 3, 1, 0, 3, 3, 3, 2, 3, 0, 3, 2, 0, 3, 1, 0, 1, 3, 3, 2, 1, 3, 1, 0, 3, 1, 3, 3, 0, 0, 2, 0, 1, 0, 3, 0, 3, 0, 2, 3, 2, 0, 3, 0, 2, 2, 0, 1, 0, 3, 3, 0, 1, 2, 1, 1, 1, 0, 0, 1, 2, 2, 1, 3, 3, 3, 2, 2, 0, 3, 2, 0, 2, 3, 0, 1, 3, 2, 3, 0, 0, 1, 2, 1, 2, 0, 3, 0, 3, 2, 0, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 2, 2, 0, 1, 0, 0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 2, 2, 1, 0, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 0, 2, 2, 0, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 0, 1, 2, 2], [0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 1, 2, 1, 0, 0, 1, 1, 0, 2, 2, 2, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 88, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(98.0) == i2:{:\\nif in2 \\g int(5.0):{:\\nb1 = ( False or min(min(max(min(max(abs(( res0 + abs(( divInt(divInt(int(0.0),int(9.0)),mod(min(max(( ( res0 - ( in2 + i0 ) ) * mod(int(9.0),in0) ), ( int(1.0) - min(( int(9.0) - in1 ), int(7.0)) )), divInt(divInt(i2,divInt(min(abs(abs(divInt(min(in2, divInt(int(8.0),( int(0.0) + max(( abs(int(4.0)) - max(max(int(4.0), in2), int(3.0)) ), abs(mod(divInt(min(int(9.0), int(7.0)),res0),in0))) ))),abs(( abs(divInt(max(min(abs(max(divInt(min(in0, int(7.0)),int(9.0)), max(i2, int(7.0)))), int(2.0)), ( i0 * max(int(4.0), divInt(( mod(abs(max(i1, mod(abs(abs(in2)),abs(abs(in1))))),res0) * abs(int(8.0)) ),int(7.0))) )),( in0 + ( int(3.0) - int(0.0) ) ))) * i1 ))))), ( int(3.0) - abs(res0) )),( in0 + in0 ))),( abs(i2) + int(5.0) ))),max(int(1.0), i1))) - max(abs(max(( abs(in2) - max(mod(i0,min(int(5.0), in2)), int(6.0)) ), abs(abs(mod(int(5.0),min(int(0.0), in1)))))), max(int(5.0), min(min(in2, i2), ( in2 + int(2.0) )))) )) )), i1), abs(in1)), max(in0, ( max(( i1 * max(i1, ( ( i1 * int(9.0) ) * res0 )) ), abs(abs(in1))) - int(2.0) ))), ( int(3.0) + int(3.0) )), int(0.0)) \\g res0 )\\n:}\\nb2 = False\\nb0 = False\\nif res0 \\g int(6.0):{:\\ni0 = ( mod(int(6.0),abs(max(abs(divInt(mod(in0,max(divInt(in0,( abs(in0) - int(2.0) )), min(( max(i0, i0) - int(1.0) ), ( int(7.0) + mod(in2,abs(in0)) )))),abs(divInt(in2,int(0.0))))), int(4.0)))) + res0 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 46, 46, 4, 3, 1, 8, 4, 4, 3, 2, 54, 1, 216, 52, 66, 28, 24]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 0, 2, 2, 0, 0, 1, 0, 1], [1, 1, 1], [0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 8, 2, 0, 4, 7, 2, 2, 7, 6, 5], [3, 3, 2, 2], [2, 0, 2, 1, 0, 2, 1, 2], [1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0], [0, 3, 1, 1, 0, 0], [0, 0], [], [2, 4, 1, 0, 4, 6, 6, 4, 5, 1, 5, 1, 5, 0], [0], [3, 1, 2, 0, 2, 0, 0, 2, 2, 3, 1, 0, 0, 1, 2, 1, 2, 3, 3, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2, 1, 3, 0, 1, 3, 3, 0, 1, 3, 0, 2, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [2, 0, 2, 2, 2, 0, 0, 1, 0, 0, 2], [0, 1, 2], [0, 1, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = ( True or abs(int(3.0)) \\ge divInt(i2,( in1 + i1 )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile mod(divInt(min(int(8.0), i0),in1),int(8.0)) \\ge mod(int(2.0),( abs(abs(abs(res0))) - mod(min(res0, int(0.0)),min(in1, int(4.0))) )):{:\\nloopBreak% = 0\\nwhile True:{:\\nin2 = divInt(int(7.0),max(i1, int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b1\\nb0 = b2\\nb1 = min(min(in2, int(2.0)), abs(i1)) == divInt(( int(7.0) * in2 ),int(6.0))\\nb2 = int(5.0) == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 12, 12, 4, 8, 1, 10, 4, 6, 2, 0, 14, 1, 46, 10, 11, 3, 7]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 0], [], [1, 1, 1, 0], [1, 0, 1, 1, 1, 1], [2, 6, 4, 6, 2, 9], [4], [1], [], [1], [0], [], [], [], [0, 3, 1, 4, 1, 5, 5, 6, 5, 5, 2, 0, 1, 5, 3, 0], [0, 0, 0], [1, 2, 0, 0, 1, 2, 2, 3, 0, 3, 3, 0, 1, 1, 3, 2, 2, 0, 3, 3, 1, 3, 0, 0, 3, 3, 0, 3, 3, 0, 2, 0, 3, 0, 3, 0, 3, 0], [0, 1, 1, 1, 0, 0], [0, 2, 1, 2, 0, 1, 0, 1, 2, 2, 2, 2, 1, 2], [2, 2, 2], [1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(2.0)\\nin0 = ( i1 * in1 )\\ni1 = int(64.0)\\nb1 = mod(divInt(min(in2, abs(max(in2, int(6.0)))),int(2.0)),abs(mod(( res0 * min(max(int(9.0), min(in2, in2)), max(abs(i2), abs(abs(i0)))) ),( i1 * abs(in2) )))) \\le max(in0, abs(i0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 16, 3, 38, 6, 14, 3, 3]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1, 1], [9, 1], [], [1, 1], [], [0], [], [0], [], [], [3, 3], [0], [3, 2, 3, 1, 0, 1], [1], [0, 2], [], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = min(mod(abs(int(9.0)),in0), int(1.0))\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 6, 1, 2, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [6], [], [], [], [], [], [], [], [], [0, 0], [1], [2, 1, 0], [1], [], [1], [0]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= divInt(int(6.0),i0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1], [7, 2, 0, 8, 5, 3, 5], [0], [0], [], [1, 0, 0, 0], [0], [2, 2, 1], [1], [], [1, 3, 6, 3, 0, 3, 6, 2, 2, 1, 2], [0], [3, 1, 1, 3, 0, 2, 2, 3, 3, 1, 1, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 3, 1, 1, 3, 0], [0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 2], [1, 2], [1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(7.0), int(2.0)) \\l max(i1, ( mod(max(min(int(0.0), int(8.0)), in0),mod(mod(res0,( in0 - i0 )),in0)) * res0 )):{:\\ni2 = mod(divInt(mod(int(5.0),min(i2, i1)),min(int(3.0), int(5.0))),abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not not False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 7, 7, 1, 1, 0, 4, 1, 3, 1, 0, 11, 1, 32, 8, 7, 2, 6]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [3], [], [], [], [], [], [], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 1, 2, 1], [0, 1, 1], [0, 0], [1, 1, 1, 1, 1], [4, 9, 7, 6, 9], [5, 2, 2, 5, 0], [2, 0], [], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [], [], [0], [6, 6, 1, 0, 0, 4, 0, 3, 3], [], [0, 3, 0, 1, 0, 1, 1, 2, 0, 0, 3, 1, 0, 2, 0, 1, 0, 0], [1, 0], [1, 1], [0], [1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif res0 != max(res0, int(4.0)):{:\\nloopBreak% = 0\\nwhile i1 == int(9.0):{:\\nb2 = int(7.0) == mod(i0,i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile max(int(6.0), in1) != ( i0 + int(9.0) ):{:\\nb0 = in0 \\l in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 5, 5, 5, 2, 0, 5, 5, 0, 0, 1, 9, 0, 18, 2, 2, 1, 1]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [2, 0, 2, 0, 2, 1, 2, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 4, 0, 0, 7, 5, 2, 8, 1, 9, 4, 8, 5, 0, 7, 6, 4, 1, 5, 4, 1, 7, 6, 7, 6, 3, 3, 8, 3, 8, 6, 3, 5, 6, 2, 9, 5, 1, 5, 4, 9, 6, 1, 1, 6, 4, 1, 5, 3, 6, 6, 6, 6, 4, 4, 8, 6, 5, 2, 6, 9, 5, 8, 1, 4, 6, 4, 4, 7, 4, 3, 0, 9, 4, 5, 0, 4, 0, 0, 0, 5, 3, 9, 6, 5, 9, 9, 1, 7, 1, 0, 3, 3, 5, 9, 9, 1, 4, 9, 5, 0, 7, 2, 1, 4, 4, 1, 8, 6, 1, 0, 7, 3, 2, 6, 3, 7, 6, 6], [5, 3, 1, 2], [0], [1], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0], [0, 3], [], [0], [0, 2, 5, 0, 3, 4, 1, 0, 2, 5, 4, 1, 1, 4, 3, 3, 6, 4, 1, 0, 6, 0, 0, 3, 6, 4, 5, 5, 1, 4, 1, 0, 1, 4, 2, 4, 4, 6, 4, 2, 4, 5, 3, 6, 2, 3, 6, 5, 0, 5, 5, 4, 5, 4, 6, 1, 4, 3, 5, 4, 1, 0, 4, 6, 5, 5, 4, 1, 5, 0, 4, 0, 3, 0, 2, 6, 2, 1, 5, 2, 1, 6, 0, 0, 0, 4, 0, 4, 6, 5, 2, 6, 2, 3, 6, 2, 5, 2, 1, 6, 6, 5, 1, 4, 1, 0, 4, 0, 5, 6, 4, 3, 4, 5, 1, 3, 1, 4, 3], [0, 0, 0, 0, 0, 1], [2, 0, 1, 1, 3, 2, 2, 0, 0, 3, 3, 0, 2, 1, 3, 3, 1, 1, 0, 3, 1, 2, 0, 3, 3, 0, 2, 0, 0, 2, 2, 1, 2, 2, 0, 2, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 3, 3, 2, 1, 1, 3, 0, 2, 3, 3, 3, 1, 0, 0, 0, 2, 0, 2, 3, 3, 1, 1, 3, 3, 0, 2, 2, 2, 3, 1, 0, 3, 3, 3, 1, 2, 3, 0, 0, 1, 1, 2, 0, 0, 2, 1, 3, 3, 1, 2, 0, 2, 2, 0, 3, 1, 0, 1, 2, 2, 0, 2, 1, 2, 2, 2, 3, 1, 2, 3, 1, 0, 1, 1, 1, 3, 3, 1, 1, 0, 2, 1, 2, 2, 0, 1, 3, 3, 0, 2, 3, 2, 3, 1, 2, 3, 2, 2, 2, 2, 2, 0, 0, 3, 2, 0, 0, 2, 1, 2, 2, 3, 2, 0, 2, 1, 0, 1, 1, 1, 0, 3, 3, 3, 0, 2, 2, 1, 2, 3, 2, 0, 1, 1, 2, 1, 2, 3, 2, 0, 0, 2, 1, 0, 2, 2, 1, 1, 1, 0, 0, 2, 0, 3, 3, 0, 0, 2, 2, 0, 1, 0, 3, 1, 2, 2, 0, 0, 3, 3, 2, 1, 2, 3, 3, 2, 2, 1, 3, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 3, 1, 0, 3, 3, 2, 2, 1, 2, 1, 2, 0, 0, 1, 0, 3, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 0, 2, 3, 3, 1, 2, 0, 2, 2, 3, 2, 0, 3, 3, 3, 0, 0, 3, 2, 1, 3, 1, 0, 0, 3, 0, 3, 0, 3, 0, 1, 3, 2, 3, 2, 3, 0, 2, 0, 0, 2, 0, 2, 1, 0, 1, 2, 2, 3, 3, 2, 2, 0, 2, 2, 1, 2, 1, 1, 2, 2, 1, 0, 3, 2, 3, 0, 2, 2, 1, 3, 1, 0, 0, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 1, 1, 0, 0, 1, 1, 3, 3, 2, 1, 1, 2, 1, 1, 3, 3, 3, 3, 0, 1, 2, 3, 0, 3, 3, 0, 3, 0, 3, 2, 2, 3, 0, 3, 3, 2, 0, 3, 1, 0, 2, 1, 0, 3, 0, 2, 1, 0, 3, 1, 2, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 0, 1, 1, 3, 3, 3, 0, 1, 1, 3, 2, 1, 2, 3, 1, 1, 3, 2, 0, 3, 2, 3, 2, 2, 3, 3, 3, 2, 2, 0, 3, 1, 2, 1, 0, 0, 3, 0, 1, 0, 3, 1, 1, 0, 1, 1, 3, 0, 0, 3, 0, 2, 1, 3, 2, 1, 3, 2, 2, 3, 3, 2, 2, 2, 0, 0, 1, 1, 0, 3, 0, 3, 3, 0, 1, 1, 1, 1, 3, 0, 3, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 2, 0, 1, 1, 1, 2, 1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 1, 1, 0, 1, 2, 2, 2, 1, 0, 0, 2, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 2, 0, 0, 2, 2, 2, 0, 0, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1, 0, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 2, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 2, 1, 1, 2, 2, 1, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2], [2, 2, 1, 2, 2, 0, 1, 1, 1, 2, 1, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 0, 1, 2, 2, 2, 1, 2, 2, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 1, 0, 0, 1, 2, 2, 0, 0, 0, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(i0,int(5.0)) != int(1.0):{:\\ni2 = max(mod(mod(in2,i0),abs(min(in0, divInt(int(4.0),max(max(int(0.0), int(0.0)), in1))))), max(int(7.0), mod(i1,abs(max(i0, mod(i2,in2))))))\\nloopBreak% = 0\\nwhile b0:{:\\nin1 = ( ( int(5.0) * ( ( i1 * ( abs(divInt(min(divInt(mod(int(2.0),max(divInt(mod(int(8.0),mod(abs(min(( int(1.0) - int(9.0) ), abs(i1))),divInt(abs(max(abs(int(4.0)), in1)),in0))),in0), ( res0 * mod(max(max(int(8.0), int(5.0)), min(max(in1, ( ( divInt(abs(int(0.0)),i1) * abs(abs(max(int(7.0), ( min(i0, res0) + int(6.0) )))) ) - int(4.0) )), ( i0 - i0 ))),( int(1.0) - min(abs(int(5.0)), ( in0 * divInt(( res0 - max(int(4.0), in1) ),int(1.0)) )) )) ))),( ( in2 + ( int(7.0) - divInt(( mod(abs(int(6.0)),divInt(max(int(7.0), in2),int(6.0))) * int(3.0) ),int(3.0)) ) ) * abs(abs(int(8.0))) )), int(3.0)),i1)) * mod(int(8.0),divInt(divInt(in1,int(6.0)),max(abs(i1), mod(abs(( min(int(3.0), ( abs(( ( mod(( ( i0 * i1 ) - min(( in1 * i2 ), ( int(5.0) - divInt(( max(mod(in1,( int(6.0) - in1 )), int(2.0)) + int(9.0) ),int(5.0)) )) ),res0) - min(min(max(in1, mod(mod(int(1.0),divInt(abs(mod(i2,int(5.0))),int(4.0))),( int(9.0) * ( min(mod(in1,in2), ( int(6.0) * in0 )) * divInt(( int(1.0) - int(1.0) ),int(6.0)) ) ))), res0), i2) ) * mod(in0,min(abs(res0), in2)) )) * mod(( i0 - int(4.0) ),in2) )) - abs(int(1.0)) )),( mod(in2,in1) + abs(min(divInt(int(5.0),( min(min(mod(( int(3.0) + max(in2, int(6.0)) ),in1), int(6.0)), int(6.0)) - res0 )), ( ( i1 + int(6.0) ) + min(int(4.0), in1) ))) ))))) ) ) * max(abs(mod(mod(int(4.0),( int(8.0) * ( in0 - in2 ) )),int(6.0))), in1) ) ) - abs(int(5.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(2.0) \\ge int(6.0):{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( divInt(int(9.0),in1) \\g res0 or int(5.0) == divInt(int(8.0),in2) ):{:\\nin2 = ( min(abs(int(1.0)), divInt(in1,divInt(( abs(mod(i1,max(min(max(in2, i0), max(mod(int(4.0),max(int(6.0), in1)), i0)), min(in0, abs(i0))))) + min(i2, int(4.0)) ),max(mod(max(( max(res0, ( i2 * i1 )) + ( in2 - mod(int(4.0),i2) ) ), int(7.0)),( mod(max(abs(divInt(( i1 + divInt(( int(4.0) * mod(int(3.0),int(0.0)) ),divInt(( int(9.0) - res0 ),min(mod(max(i0, ( ( int(4.0) + min(int(5.0), i0) ) + i0 )),abs(min(int(0.0), min(divInt(int(4.0),int(0.0)), max(( min(int(0.0), int(0.0)) - in1 ), i0))))), int(5.0)))) ),int(3.0))), min(min(( int(9.0) * int(6.0) ), mod(int(5.0),int(9.0))), abs(min(max(min(in1, int(9.0)), mod(min(res0, min(max(in2, min(i2, min(( divInt(min(res0, abs(max(divInt(i2,abs(int(1.0))), in0))),mod(int(7.0),res0)) * max(i2, ( int(1.0) + in2 )) ), max(int(0.0), ( ( int(3.0) + int(3.0) ) + int(5.0) ))))), ( mod(i2,int(9.0)) - divInt(i1,res0) ))),int(9.0))), int(1.0))))),abs(abs(max(res0, int(4.0))))) * int(9.0) )), min(( int(5.0) - mod(abs(int(0.0)),int(7.0)) ), max(( in2 * max(( min(( ( abs(abs(abs(( divInt(i1,max(int(2.0), mod(int(1.0),in1))) * i1 )))) + max(i0, int(4.0)) ) * in1 ), max(int(4.0), int(1.0))) * i0 ), int(8.0)) ), int(6.0))))))) - min(in2, res0) )\\nin1 = min(in0, mod(int(1.0),min(mod(int(0.0),abs(( ( min(min(( mod(divInt(in1,in2),int(7.0)) * int(3.0) ), i1), min(in0, max(min(i1, int(2.0)), int(6.0)))) - int(3.0) ) - int(7.0) ))), max(in1, abs(int(6.0))))))\\nin0 += int(6.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 120, 120, 4, 1, 1, 6, 4, 2, 0, 1, 119, 6, 491, 135, 123, 68, 68]}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 1], [], [1, 0, 0, 1], [], [], [], [0, 2], [], [0, 0], [], [1, 1], [1, 1], [], [3, 6, 6, 6], [1, 1], [0, 0], [], [], [0, 2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += res0\\nb0 = False\\nb2 = False\\nres0 *= res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 4, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [5, 3], [1], [1, 1], [0], [0, 0, 1], [0], [3, 0], [], [], [6, 0, 0], [], [0, 2, 2, 0, 2, 0, 1, 1], [1, 1, 1], [], [], [1, 1, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b1 and res0 \\g mod(mod(i0,divInt(i0,int(5.0))),int(3.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 2, 1, 3, 1, 2, 0, 0, 3, 0, 8, 3, 0, 0, 3]}, {"genotype": [[0], [1], [1], [], [0], [], [], [3], [2], [], [0, 0, 1], [0], [2, 2], [], [], [5, 6], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not not in2 \\ge res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 3, 1, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [8, 0, 5], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += int(805.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 1, 2, 1, 2, 1, 0, 2, 2, 1], [0, 1, 1, 0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 1, 3, 0, 1, 6, 3, 2, 6, 7, 9, 3, 7, 4, 7, 4, 0, 2, 5, 0, 0, 3, 0, 0, 6, 0, 0, 6, 8, 7, 0, 1, 4, 5, 3, 7, 9, 8, 4, 0, 0, 3, 8, 1, 4, 8, 8, 6, 4, 7, 5, 1, 3, 0, 7, 5, 8, 0, 1, 8, 1, 2, 4, 3, 9, 9, 9, 1, 2, 6, 1, 7, 6, 5, 9, 5, 3, 3, 0, 9, 8, 6, 6, 6, 8, 8, 2, 8, 6, 1, 5, 6, 5, 6, 0, 5, 4, 2, 4, 0, 2, 4, 4, 3, 5, 2, 2, 2, 3, 9, 9, 0, 2, 6, 0, 0, 1, 3, 9, 2, 9, 7, 7, 2, 2, 7, 2, 3, 9, 9, 4, 0, 7, 6, 6, 8, 6, 8, 1, 5, 6, 5, 2, 1, 3, 0, 2, 6, 4, 2, 6, 5, 1, 4, 9, 0, 2, 1, 2, 0, 1, 8, 6, 0, 2, 8, 9, 2, 0, 2, 2, 8, 7, 5, 6, 4, 2, 5, 1, 2, 6, 0, 8, 1, 1, 6, 8, 4, 2, 0, 6, 6, 6, 4, 3, 2, 4, 4, 5, 9], [5, 2, 4, 1], [1, 0, 1, 1, 1], [0, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0], [2, 2, 2, 3, 0, 0, 3, 0, 2, 1, 1], [0, 0], [0, 0], [1, 5, 3, 3, 5, 4, 2, 4, 2, 0, 5, 5, 3, 2, 5, 6, 6, 4, 3, 2, 2, 4, 6, 3, 6, 3, 4, 4, 4, 3, 5, 2, 5, 4, 1, 6, 1, 6, 0, 2, 6, 5, 0, 2, 6, 0, 6, 2, 6, 0, 2, 3, 6, 1, 6, 2, 3, 2, 5, 3, 5, 3, 6, 0, 6, 5, 6, 2, 5, 1, 4, 2, 5, 4, 4, 4, 6, 6, 2, 2, 1, 1, 1, 1, 4, 5, 6, 6, 3, 4, 1, 1, 3, 4, 1, 6, 2, 3, 5, 2, 1, 4, 5, 3, 3, 1, 6, 6, 3, 0, 0, 5, 6, 6, 5, 2, 4, 0, 4, 1, 3, 5, 4, 1, 4, 0, 4, 4, 1, 4, 0, 2, 6, 3, 2, 3, 0, 5, 3, 4, 6, 0, 1, 1, 0, 4, 0, 3, 2, 0, 5, 0, 5, 2, 6, 2, 1, 3, 6, 5, 5, 5, 5, 5, 1, 3, 0, 4, 2, 4, 1, 5, 1, 0, 3, 2, 1, 2, 2, 0, 3, 2, 0, 2, 1, 5], [1, 0, 0], [3, 0, 3, 3, 1, 1, 2, 2, 2, 0, 3, 1, 1, 3, 2, 0, 3, 2, 1, 0, 2, 2, 2, 1, 1, 2, 1, 3, 3, 2, 2, 0, 2, 3, 1, 2, 0, 3, 3, 0, 3, 1, 0, 1, 1, 1, 3, 2, 3, 0, 2, 1, 2, 3, 3, 2, 2, 0, 0, 3, 3, 2, 1, 3, 1, 0, 2, 1, 1, 3, 0, 0, 1, 2, 2, 1, 1, 2, 1, 0, 3, 0, 2, 1, 1, 1, 0, 3, 3, 3, 3, 2, 2, 0, 3, 2, 3, 1, 0, 1, 3, 3, 0, 2, 0, 2, 3, 0, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 2, 3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 2, 2, 2, 3, 1, 3, 2, 1, 2, 1, 0, 3, 0, 0, 2, 3, 3, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 3, 2, 2, 3, 1, 2, 0, 0, 2, 3, 2, 2, 2, 1, 2, 2, 1, 3, 3, 1, 3, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 1, 1, 2, 1, 2, 3, 0, 0, 2, 3, 3, 1, 3, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 1, 1, 3, 0, 0, 0, 3, 3, 1, 0, 3, 0, 2, 1, 0, 3, 2, 1, 2, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 1, 3, 1, 3, 0, 3, 3, 1, 2, 3, 1, 0, 2, 3, 0, 3, 1, 3, 1, 0, 1, 1, 1, 3, 1, 2, 3, 2, 1, 0, 1, 0, 0, 1, 3, 1, 0, 2, 3, 2, 2, 2, 3, 3, 2, 2, 3, 2, 2, 2, 1, 1, 3, 2, 2, 0, 2, 1, 3, 2, 3, 0, 0, 0, 0, 3, 0, 2, 3, 0, 1, 1, 1, 3, 0, 3, 0, 2, 2, 3, 3, 0, 3, 0, 0, 2, 0, 3, 1, 3, 3, 0, 1, 1, 2, 0, 3, 2, 0, 3, 2, 2, 1, 3, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 3, 1, 3, 2, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 0, 0, 0, 3, 1, 2, 2, 3, 3, 3, 0, 1, 0, 1, 0, 2, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 2, 1, 3, 2, 2, 2, 2, 1, 1, 1, 2, 0, 1, 1, 1, 3, 3, 1, 3, 1, 0, 2, 0, 2, 0, 2, 2, 1, 0, 1, 3, 1, 2, 3, 0, 3, 3, 2, 2, 0, 1, 2, 1, 1, 3, 0, 0, 1, 0, 1, 3, 3, 3, 1, 2, 0, 3, 3, 2, 1, 2, 2, 0, 0, 0, 3, 3, 0, 1, 1, 2, 2, 3, 2, 0, 1, 0, 3, 1, 1, 3, 2, 3, 0, 1, 2, 2, 3, 3, 2, 2, 3, 3, 2, 0, 1, 1, 0, 0, 0, 2, 3, 1, 3, 3, 3, 0, 3, 3, 2, 0, 1, 2, 2, 2, 2, 3, 2, 2, 3, 3, 3, 3, 2, 1, 2, 0, 0, 2, 2, 1, 3, 2, 2, 1, 0, 3, 1, 1, 3, 2, 1, 0, 0, 0, 1, 3, 2, 2, 2, 3, 0, 1, 1, 1, 2, 3, 0, 1, 3, 3, 2, 2, 0, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 0, 1, 1, 1, 0, 0, 2, 2, 2, 3, 2, 1, 3, 1, 0, 1, 0, 1, 2, 2, 2, 3, 1, 1, 3, 1, 2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 3, 0, 0, 1, 3, 0, 3, 3, 0, 2, 2, 3, 0, 1, 0, 0, 3, 3, 1, 0, 2, 1, 2, 2, 2, 0, 2, 3, 2, 1, 1, 3, 0, 2, 3, 1, 3, 2, 0, 3, 1, 3, 0, 0, 1, 1, 3, 0, 0, 1, 2, 0, 2, 1, 2, 2, 3, 1, 3, 1, 1, 2, 0, 3, 0, 3, 1, 2, 3, 0, 3, 3, 1, 2, 1, 0, 2, 1, 0, 1, 3, 2, 3, 0, 2, 3, 1, 2, 2, 0, 1, 3, 0, 2, 2, 1, 2, 2, 3, 3, 3, 3, 0, 2, 3, 0, 0, 1, 1, 0, 3, 2, 0, 0, 2, 3, 0, 2, 1, 1, 3, 2, 3, 0, 3, 3, 3, 1, 3, 0, 2, 0, 2, 2, 1, 2, 0, 3, 0, 0, 3, 3, 2, 1, 3, 2, 2, 3, 3, 3, 3, 3, 3, 0, 1, 3, 0, 3, 0, 1, 0, 3, 2, 2, 3, 1, 3, 3, 2, 3, 3, 1, 0, 1, 1, 0, 1, 1, 2, 1, 0, 2, 1, 1, 0, 3, 3, 2, 2, 0, 2, 1, 1, 3, 3, 2, 0, 2, 1, 3, 1, 1, 1, 0, 1, 2, 1, 0, 0, 1, 0, 3, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 2, 0, 1, 0, 1, 2, 1, 0, 2, 2, 2, 1, 2, 0, 0, 1, 1, 2, 0, 0, 0, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 2, 1, 0, 1, 1, 1, 0, 1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 0, 2, 1, 2, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1, 1, 2, 1, 0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 1, 2, 2, 0, 2, 2, 0, 0, 1, 0, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1], [0, 1, 0, 2, 1, 2, 2, 0, 1, 1, 0, 1, 1, 1, 2, 2, 1, 2, 2, 0, 2, 2, 0, 0, 0, 1, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 2, 1, 1, 2, 2, 0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 2, 0, 1, 1, 0, 2, 2, 0, 2, 0, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 2, 2, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 2, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 97, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(i1, min(min(int(7.0), int(0.0)), ( ( divInt(in2,max(int(1.0), int(3.0))) + min(mod(in0,max(( int(0.0) - in0 ), mod(divInt(( int(1.0) + int(6.0) ),mod(int(3.0),max(max(divInt(mod(in2,( abs(int(2.0)) * mod(in1,min(max(i2, min(int(6.0), in1)), int(7.0))) )),int(9.0)), int(3.0)), max(mod(abs(i2),divInt(int(7.0),mod(max(min(( mod(i0,in2) - abs(abs(mod(int(4.0),abs(int(7.0))))) ), in2), divInt(int(4.0),int(0.0))),max(in0, i2)))), int(2.0))))),( ( int(5.0) * int(0.0) ) * ( int(0.0) + in2 ) )))), abs(res0)) ) - mod(int(3.0),int(0.0)) ))) != int(0.0):{:\\nres0 -= in1\\n:}\\nloopBreak% = 0\\nwhile min(min(max(max(( ( in0 + abs(mod(min(int(6.0), i2),int(0.0))) ) - min(min(i2, ( in1 - ( abs(res0) - int(0.0) ) )), in0) ), ( res0 * divInt(int(6.0),in0) )), in1), in1), in1) == ( abs(abs(in0)) * int(8.0) ):{:\\nin2 = max(mod(i2,int(7.0)), ( int(0.0) - mod(mod(mod(min(int(1.0), abs(divInt(int(4.0),( int(5.0) * in2 )))),min(in1, i1)),mod(min(min(int(3.0), min(int(7.0), int(9.0))), int(8.0)),divInt(int(4.0),int(0.0)))),int(0.0)) ))\\nloopBreak% = 0\\nwhile not not not int(3.0) \\le max(divInt(min(( divInt(max(int(8.0), divInt(res0,i1)),mod(abs(divInt(divInt(( int(1.0) * ( ( int(4.0) + abs(max(int(8.0), max(mod(res0,max(int(8.0), divInt(int(6.0),max(( max(abs(int(4.0)), int(7.0)) * divInt(int(5.0),divInt(max(i0, i2),mod(min(abs(int(1.0)), max(( divInt(int(3.0),( divInt(( divInt(res0,mod(divInt(divInt(int(0.0),int(7.0)),max(in2, i0)),i2)) * max(max(int(5.0), res0), max(i0, ( int(8.0) + res0 ))) ),min(( int(0.0) + ( int(1.0) + int(8.0) ) ), divInt(( mod(abs(abs(i2)),res0) - i0 ),int(1.0)))) * max(int(2.0), min(i2, min(min(int(4.0), ( min(int(3.0), in0) + divInt(max(res0, max(int(9.0), abs(int(9.0)))),i1) )), int(9.0)))) )) + int(1.0) ), int(2.0))),max(int(6.0), mod(min(( int(1.0) * res0 ), int(7.0)),i2))))) ), in0)))), int(6.0)))) ) + abs(int(5.0)) ) ),i2),divInt(max(( ( mod(min(max(mod(( max(mod(mod(( int(9.0) * int(5.0) ),max(mod(divInt(in2,divInt(int(3.0),min(divInt(max(in0, in2),in0), res0))),min(i0, ( abs(res0) * int(3.0) ))), int(0.0))),int(9.0)), min(in2, max(res0, mod(( abs(abs(i2)) + abs(in2) ),i1)))) * mod(in1,min(int(8.0), abs(max(i2, int(6.0))))) ),int(6.0)), divInt(in2,max(mod(in1,min(( ( int(6.0) + max(int(8.0), in1) ) * int(8.0) ), in1)), res0))), mod(res0,int(2.0))),i2) - i2 ) - i1 ), max(int(8.0), max(mod(i1,i1), abs(divInt(( abs(( ( abs(mod(i1,in1)) * in2 ) * abs(int(6.0)) )) + ( ( max(max(min(res0, int(1.0)), res0), int(5.0)) * in0 ) * mod(in1,int(6.0)) ) ),mod(i1,int(5.0))))))),i1))),int(6.0))) + int(0.0) ), ( mod(divInt(int(5.0),abs(divInt(mod(( divInt(int(4.0),int(2.0)) - int(4.0) ),( in0 - int(0.0) )),int(2.0)))),int(4.0)) - max(abs(int(4.0)), min(int(3.0), in1)) )),( i1 - mod(res0,mod(( int(5.0) + i2 ),int(2.0))) )), min(int(2.0), ( min(in0, min(max(divInt(( in2 + int(2.0) ),( int(3.0) * int(9.0) )), max(i2, i1)), int(9.0))) + in1 ))):{:\\nb1 = ( int(0.0) \\g min(abs(max(int(2.0), divInt(in2,max(max(mod(int(6.0),divInt(mod(in0,in0),i1)), abs(max(res0, int(0.0)))), int(0.0))))), ( ( min(( res0 - int(1.0) ), in0) - min(int(3.0), int(9.0)) ) + abs(divInt(max(i0, int(2.0)),( ( max(abs(( ( max(max(mod(i0,int(9.0)), int(7.0)), in2) * res0 ) * res0 )), divInt(abs(int(7.0)),min(max(max(in2, min(abs(divInt(i2,int(2.0))), ( ( ( divInt(max(( divInt(min(max(min(abs(divInt(int(2.0),( in1 + i0 ))), divInt(mod(int(7.0),min(( ( int(2.0) * in1 ) + abs(int(3.0)) ), int(9.0))),min(mod(int(9.0),i1), in0))), in2), int(4.0)),min(( ( divInt(min(in1, int(0.0)),int(7.0)) - int(6.0) ) - divInt(min(i1, int(6.0)),abs(min(( ( in1 - abs(int(8.0)) ) - ( divInt(( int(6.0) + i0 ),in1) - divInt(( in1 - int(8.0) ),int(1.0)) ) ), int(5.0)))) ), i1)) * in1 ), ( ( ( max(mod(int(6.0),min(int(5.0), i0)), int(2.0)) + i2 ) - int(1.0) ) - ( ( divInt(min(int(3.0), int(0.0)),abs(int(2.0))) * ( divInt(res0,( mod(( divInt(( int(6.0) * min(min(in0, i2), int(4.0)) ),min(in0, min(max(i0, ( mod(min(in2, int(2.0)),in0) * in1 )), min(abs(int(6.0)), res0)))) - mod(int(5.0),( ( mod(i0,divInt(max(mod(int(1.0),int(4.0)), abs(i1)),( abs(int(9.0)) + min(divInt(i1,abs(int(0.0))), abs(i0)) ))) + in1 ) + int(2.0) )) ),int(1.0)) * min(i0, in0) )) * int(2.0) ) ) - ( i2 + divInt(int(0.0),( divInt(min(int(1.0), max(int(8.0), int(6.0))),mod(i0,min(in2, min(int(0.0), ( min(i0, max(abs(int(2.0)), mod(int(8.0),in2))) * mod(int(9.0),i2) ))))) * int(2.0) )) ) ) )),abs(( abs(res0) + mod(min(int(0.0), divInt(( i2 + int(2.0) ),abs(i1))),divInt(divInt(int(2.0),( divInt(abs(max(abs(abs(in0)), divInt(max(res0, in2),int(8.0)))),int(7.0)) + in2 )),abs(mod(in2,in2)))) ))) - mod(max(in2, ( int(5.0) * int(6.0) )),max(( abs(i1) + abs(min(max(int(4.0), max(in0, ( i0 + mod(( int(2.0) - divInt(in1,max(i2, in1)) ),min(max(( int(5.0) + max(divInt(mod(max(max(abs(max(min(min(i1, int(1.0)), min(in2, abs(i1))), int(2.0))), i0), abs(( divInt(abs(int(6.0)),abs(abs(mod(min(min(int(0.0), in0), int(8.0)),int(1.0))))) + i2 ))),int(1.0)),int(6.0)), mod(int(8.0),i1)) ), ( int(4.0) * int(2.0) )), i2)) ))), abs(abs(divInt(mod(i2,( int(0.0) + int(6.0) )),min(abs(( i0 + mod(int(6.0),max(int(6.0), int(4.0))) )), int(3.0))))))) ), in0)) ) - int(2.0) ) + mod(int(4.0),i2) ))), i0), int(4.0)))) + i2 ) + max(int(5.0), i1) ))) )) and b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b1\\nif ( b1 or not True ):{:\\nloopBreak% = 0\\nwhile True:{:\\nin2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 201, 201, 4, 5, 2, 15, 4, 11, 2, 2, 186, 3, 822, 226, 212, 102, 125]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1], [1], [1], [0, 0], [], [1, 0], [0], [0], [], [], [5, 2, 0, 6], [], [2, 2, 1, 2, 0, 0, 0, 0], [1, 0, 1], [], [0], [0, 0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(( int(1.0) + divInt(in2,i2) ),i0) \\g res0:{:\\nb0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 0, 0, 4, 0, 8, 3, 0, 1, 2]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 0, 2, 0, 0, 2, 2, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 7, 2, 1, 4, 1, 5, 4, 0, 5, 9, 9, 1, 0, 9, 4, 0, 0, 7, 1, 3, 9, 0, 7, 9, 1, 2, 0, 7, 8, 6, 4, 5, 4, 1, 6, 3], [5, 3, 5, 5, 3, 2, 2, 2, 3, 4, 3], [2, 2, 1, 1, 2, 0, 1], [1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 2, 0, 2], [], [1, 1], [6, 2, 5, 2, 5, 3, 2, 1, 6, 2, 3, 6, 2, 3, 3, 3, 0, 5, 0, 5, 2, 6, 2, 6, 3, 6, 1, 6], [0, 0], [2, 1, 1, 0, 0, 0, 3, 0, 1, 3, 1, 2, 2, 0, 3, 1, 2, 1, 2, 3, 0, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1, 3, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 3, 0, 2, 1, 2, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0, 3, 3, 1, 3, 0, 2, 1, 3, 1, 3, 1, 0, 3, 2, 3, 2, 1, 2, 1, 2, 1, 0, 0, 0, 2, 1, 2, 1, 1, 0, 2, 2, 2, 3, 2, 0, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 2, 2, 2, 0, 0, 2, 1, 0, 0, 0, 2, 2, 1, 1, 1, 2], [2, 2, 1, 2, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(4.0) * int(2.0) ) != res0:{:\\nif i2 \\ge in2:{:\\ni2 = max(in2, int(7.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile not max(int(2.0), mod(( in0 * min(int(1.0), ( int(4.0) - mod(abs(i2),abs(abs(min(int(1.0), ( int(5.0) * int(4.0) ))))) )) ),int(0.0))) != i1:{:\\nres0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = i2 != divInt(in0,int(9.0))\\n:}\\nloopBreak% = 0\\nwhile ( min(res0, mod(int(9.0),i2)) \\ge abs(in0) or not not in0 == in0 ):{:\\nloopBreak% = 0\\nwhile int(1.0) == int(0.0):{:\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not max(i0, divInt(int(9.0),mod(in2,divInt(int(4.0),int(0.0))))) == int(0.0)\\nb2 = ( ( int(7.0) + int(1.0) ) * i0 ) \\ge min(min(int(3.0), min(in2, ( int(9.0) * abs(int(0.0)) ))), abs(int(7.0)))\\nb0 = i2 \\le max(( max(( int(9.0) - ( int(1.0) + ( int(2.0) + res0 ) ) ), i2) * res0 ), divInt(int(0.0),( int(7.0) - int(8.0) )))\\nb1 = in0 \\ge divInt(( ( max(( res0 - int(6.0) ), ( int(4.0) + int(5.0) )) - ( int(4.0) - divInt(abs(int(1.0)),int(6.0)) ) ) + mod(i1,res0) ),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 5, 8, 38, 38, 11, 7, 1, 17, 11, 6, 0, 2, 28, 2, 111, 28, 19, 17, 11]}, {"genotype": [[0], [1], [1], [], [0], [1], [1], [2], [1], [], [1], [0], [], [], [], [0], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i0 == int(1.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1], [1, 2, 1, 0, 1], [0], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 2, 5, 6, 5, 9, 7, 1, 2], [0, 4], [1, 1, 0, 1, 1, 0], [], [1, 0, 0, 1, 0], [0, 0], [0, 1, 0], [1], [1], [5, 4, 6, 5, 0, 4, 0, 3, 6, 0, 3, 5, 4, 2, 4], [], [0, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 2, 0, 3, 1, 0, 1, 2, 1, 1, 2, 1, 2, 2, 0, 0, 3, 0, 3, 0, 2, 3, 0, 2, 2, 1, 0, 2, 1, 1, 3, 1, 3, 0, 2, 0, 3, 1, 3, 0, 0, 3, 0, 3, 0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 1, 1, 2, 1, 2, 2], [2, 2, 1], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in2 \\l abs(min(divInt(mod(abs(abs(min(max(abs(( divInt(in1,max(int(5.0), res0)) * int(1.0) )), mod(int(2.0),int(5.0))), ( int(6.0) * divInt(mod(in2,i0),abs(in1)) )))),abs(i0)),mod(min(in0, ( mod(int(5.0),res0) - mod(int(9.0),int(7.0)) )),max(int(1.0), max(i0, divInt(in0,abs(int(2.0))))))), max(in2, in1)))\\nif b1:{:\\nb0 = False\\nb1 = abs(i2) \\le abs(in1)\\n:}else:{:\\nb1 = b0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 10, 10, 2, 6, 0, 5, 2, 3, 1, 1, 15, 0, 55, 13, 17, 3, 10]}, {"genotype": [[0], [0, 0, 0, 0, 1], [0, 0, 1, 1, 1], [], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [9, 8, 9, 4, 4, 0], [0], [0], [], [1], [0], [], [], [], [2, 5, 6, 4, 6, 5], [0, 0, 1, 1], [2, 2, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0], [], [0, 1, 2], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = divInt(( int(9.0) + int(8.0) ),int(9.0)) \\l int(4.0)\\ni2 = int(4.0)\\nin2 = int(0.0)\\nres0 -= in1\\nres0 *= in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 0, 5, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 6, 4, 10, 2, 0, 3, 1]}, {"genotype": [[0], [1], [0], [], [0], [1], [4], [5], [0, 1], [0, 1], [0, 0, 0, 0, 1], [0], [3, 3, 1, 0], [1], [], [4], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( ( False and b1 ) or int(4.0) != in1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 2, 2, 5, 1, 4, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1], [4, 7, 7], [2], [2, 2, 0], [], [0, 1], [0], [0], [], [], [3, 2], [], [1, 2, 0, 3, 1, 3, 3, 1, 3, 0], [1], [0, 1, 2, 2], [], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\nb0 = int(4.0) == divInt(in0,min(int(7.0), max(abs(int(7.0)), abs(i2))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 3, 0, 2, 1, 1, 0, 0, 2, 0, 10, 1, 4, 0, 1]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 2, 0], [0, 1, 0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 6, 1, 2, 0, 8, 9, 4, 4, 6, 9, 5, 2, 4, 6, 6, 5, 2], [1, 2, 0, 0], [2, 1], [1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0], [0, 2, 3, 1, 2, 2, 2, 3, 1], [1, 0], [1, 0], [5, 2, 5, 5, 4, 0, 6, 2, 6, 5, 0, 6, 3, 3, 1, 5, 3, 5, 0, 1, 5, 4, 6, 1], [0], [3, 2, 0, 2, 2, 2, 2, 3, 0, 0, 2, 3, 3, 1, 1, 0, 2, 2, 1, 0, 2, 3, 3, 3, 1, 0, 3, 1, 3, 0, 0, 2, 1, 2, 1, 3, 2, 2, 0, 2, 1, 0, 1, 2, 0, 0, 3, 1, 1, 1, 2, 0, 3, 3, 3, 1, 1, 0, 3, 1, 0, 2, 0, 0, 3, 3, 0, 2, 2, 1, 3, 3, 3, 0, 3, 0, 0, 0, 2, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 2, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1, 0, 1, 1, 2, 1, 2], [0, 0, 0, 2, 1, 1, 2, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(mod(in2,divInt(( mod(divInt(abs(i2),in2),divInt(min(min(int(4.0), int(8.0)), in2),divInt(divInt(int(6.0),in1),( abs(abs(min(int(1.0), i0))) + min(int(2.0), max(res0, i2)) )))) + divInt(int(0.0),mod(int(8.0),abs(( ( res0 + ( int(9.0) * in2 ) ) - int(4.0) )))) ),( i0 - res0 ))), abs(int(4.0))) \\g int(6.0):{:\\nloopBreak% = 0\\nwhile int(9.0) == ( in0 * abs(max(min(int(5.0), int(2.0)), in0)) ):{:\\ni1 = max(int(4.0), in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif b2:{:\\nloopBreak% = 0\\nwhile not ( False or not not not ( in0 + in2 ) \\l min(max(i0, ( mod(int(6.0),max(abs(max(i1, abs(in2))), in1)) + res0 )), mod(int(6.0),int(5.0))) ):{:\\nb1 = ( True or i1 \\l int(2.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 19, 19, 4, 2, 2, 13, 4, 9, 2, 2, 24, 1, 83, 20, 21, 9, 11]}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 1, 2, 0, 2, 2, 0, 0, 0, 2, 2, 1, 1], [1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 9, 9, 1, 1, 2, 9, 1, 5, 6, 2, 2, 9, 8, 4, 7, 0, 0, 0, 6, 3, 1, 5, 5, 5, 3, 3, 0, 8], [5, 3, 0, 2, 1, 2], [1, 1, 2, 1], [], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 2, 2, 1, 0], [1, 0], [0, 1], [0, 0, 4, 0, 0, 3, 3, 2, 3, 5, 1, 1, 4, 1, 3, 3, 0, 5, 6, 2, 5, 6, 0, 3, 1, 1, 1, 2], [1, 1, 0, 1], [3, 2, 2, 3, 0, 0, 2, 3, 3, 3, 1, 1, 3, 1, 3, 3, 0, 0, 1, 0, 1, 3, 2, 1, 1, 1, 3, 1, 2, 3, 1, 3, 0, 1, 1, 3, 1, 3, 0, 3, 2, 0, 2, 2, 3, 1, 0, 2, 2, 3, 1, 2, 3, 2, 2, 0, 1, 1, 1, 1, 3, 1, 3, 0, 0, 1, 0, 0, 0, 3, 0, 1, 2, 3, 1, 2, 0, 2, 2, 1, 2, 0, 2, 0, 3, 3, 3, 3, 2, 1, 0, 1, 0, 2, 3, 1, 1, 0, 1, 3, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 2, 0, 0, 1, 0, 1, 2, 1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 1, 2, 2, 2, 0, 1, 2, 2, 2], [0, 0, 0, 2, 1, 0, 0, 1, 0, 1, 0, 1, 2, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(( ( max(i0, i0) + divInt(abs(min(min(int(3.0), int(3.0)), max(int(9.0), min(max(in1, i0), int(9.0))))),i0) ) + int(1.0) ), abs(( int(1.0) + int(2.0) ))) != int(9.0):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not not max(int(1.0), ( abs(int(5.0)) * abs(in0) )) \\ge int(6.0):{:\\nb1 = int(2.0) \\l min(int(2.0), min(in0, abs(mod(i2,divInt(divInt(min(int(9.0), in0),( ( max(int(8.0), divInt(max(( ( in2 - int(4.0) ) + int(7.0) ), int(0.0)),int(0.0))) + max(int(0.0), max(i1, i1)) ) - int(6.0) )),in1)))))\\nloopBreak% = 0\\nwhile i1 == in0:{:\\nif abs(in0) \\g int(3.0):{:\\ni0 += ( abs(int(1.0)) - ( in2 + mod(mod(int(5.0),( res0 - divInt(i2,abs(min(max(abs(mod(int(5.0),in2)), int(5.0)), res0))) )),( abs(int(3.0)) * int(3.0) )) ) )\\n:}else:{:\\nb2 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= in0\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile int(0.0) == abs(int(8.0)):{:\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 30, 30, 6, 4, 0, 11, 6, 5, 2, 2, 28, 4, 103, 21, 28, 15, 9]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [0, 1], [], [0, 0], [], [1, 1], [1, 1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [1, 1], [1, 1, 1], [4, 1, 0], [], [0], [], [0], [], [0], [], [], [5, 5, 1, 5, 1, 0], [1, 1], [2, 1, 2, 0, 2, 0, 2, 2, 0, 1, 1, 0], [1, 1, 1, 0, 0], [], [2, 2, 1, 0], [1, 1, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= mod(int(4.0),mod(in2,mod(i1,( ( in2 * int(1.0) ) - int(0.0) ))))\\nloopBreak% = 0\\nwhile b0:{:\\ni1 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 0, 1, 0, 1, 0, 1, 0, 0, 6, 2, 12, 5, 0, 4, 3]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 2, 0], [0, 0], [1, 0], [0, 1], [4, 2], [5, 5], [0, 1], [], [1, 0, 1], [0, 0], [0], [], [0, 0], [6, 2, 1, 4, 0, 3], [0], [1, 0, 0, 3, 2, 0, 0, 0], [0], [2], [2], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(42.0)\\nif i2 != i1:{:\\nif b0:{:\\nb1 = abs(( in1 * i0 )) != in0\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 993, "mapping_values": [1, 4, 4, 2, 2, 2, 2, 2, 2, 0, 3, 2, 1, 0, 2, 6, 1, 8, 1, 1, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 8, 4, 9, 7, 5, 0, 8, 9, 7, 2, 2], [], [0], [], [0], [], [1], [0], [], [4, 3, 0, 0, 3, 0, 3, 5, 6, 0, 0, 5, 6, 6, 6], [0], [3, 2, 3, 0, 0, 3, 3, 0, 2, 3, 1, 2, 2, 2, 3, 1, 3, 1, 0, 0, 0, 2, 0, 2, 3, 1, 2, 3, 0, 3, 2, 0, 1, 2, 2, 2, 3, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0, 1, 1, 1, 1, 1, 3, 3, 0, 3, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 2, 1, 1, 1, 0, 0, 1, 2, 0, 0, 2, 2], [0, 2, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\nin1 = min(mod(min(in0, i0),abs(max(i0, ( max(int(5.0), divInt(divInt(mod(max(int(4.0), min(int(8.0), in0)),i0),in0),divInt(in2,( min(int(4.0), ( max(res0, abs(( i0 + int(9.0) ))) * mod(( divInt(min(int(7.0), mod(int(5.0),mod(i0,in2))),( res0 + ( res0 + int(0.0) ) )) + int(8.0) ),int(9.0)) )) + int(7.0) )))) - int(2.0) )))), min(abs(res0), abs(int(2.0))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 0, 1, 0, 1, 0, 1, 1, 0, 15, 1, 57, 16, 14, 7, 9]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 2, 2, 1, 0, 1, 2, 1, 2, 1], [1, 1, 1, 1], [0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [9, 6, 5, 9, 5, 1, 6, 6, 3, 6, 4], [1, 0, 4, 0], [0, 2, 0], [], [1, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0], [2, 1, 2, 1, 1], [1, 1, 0], [], [4, 1, 2, 1, 4, 5, 2, 1, 3, 5, 1, 5, 1, 2, 3], [0, 1, 1], [3, 2, 3, 3, 3, 0, 1, 3, 2, 0, 0, 3, 2, 3, 1, 1, 1, 0, 1, 0, 2, 0, 3, 0, 0, 0, 0, 0, 1, 0, 2, 1, 1, 1, 3, 1], [1, 0, 0, 0, 0], [1, 2, 1, 2, 0, 1, 0, 0, 2], [0, 1, 1, 1, 1, 1], [1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(mod(abs(max(abs(in1), int(9.0))),min(( i1 + i2 ), max(( min(int(6.0), int(5.0)) - int(9.0) ), i1))), int(5.0)) \\g in1\\nloopBreak% = 0\\nwhile ( in2 - min(i2, i1) ) \\l in0:{:\\nloopBreak% = 0\\nwhile not False:{:\\nb2 = not in2 \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = int(1.0)\\ni1 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(6.0) - int(6.0) ) \\l int(36.0):{:\\nin0 -= abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 11, 11, 4, 3, 0, 9, 4, 5, 3, 0, 15, 3, 36, 5, 9, 6, 1]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 2, 2, 1, 2, 0, 1, 1], [0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 4, 9, 8, 6, 2, 5, 6, 4, 4, 0, 3, 4, 0, 2, 5, 9, 7, 7, 0, 3, 7, 2, 7, 1, 0, 3, 6, 7, 7, 1, 7, 1, 3, 9, 2, 7, 5, 9, 0, 4, 1, 0], [2, 5, 2, 1, 2, 1, 2], [1, 2, 0, 1], [1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 2, 0], [], [1, 0, 1], [0, 0, 0, 6, 1, 4, 4, 0, 4, 5, 0, 0, 4, 5, 1, 4, 4, 3, 3, 6, 2, 4, 0, 6, 6, 4, 5, 0, 6, 5, 3, 5, 5, 1, 5, 6, 5, 6, 4, 5, 3, 2, 0, 1, 1, 5, 4, 6, 4, 6, 4, 2, 6, 1, 5, 1, 0, 4, 5], [0, 1, 1, 1], [0, 3, 2, 3, 2, 2, 2, 3, 1, 0, 3, 0, 1, 2, 0, 0, 0, 0, 1, 2, 2, 0, 2, 0, 2, 1, 2, 3, 3, 3, 2, 0, 2, 1, 2, 3, 1, 0, 0, 2, 3, 1, 1, 3, 2, 0, 3, 0, 2, 0, 2, 0, 0, 3, 3, 0, 3, 2, 0, 3, 3, 1, 1, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 3, 1, 1, 1, 3, 1, 0, 1, 0, 1, 2, 2, 0, 2, 2, 3, 1, 2, 1, 2, 1, 3, 2, 1, 2, 2, 1, 2, 2, 2, 3, 3, 3, 1, 2, 2, 0, 1, 0, 2, 3, 0, 1, 0, 3, 1, 0, 0, 2, 1, 0, 1, 1, 0, 0, 1, 1, 3, 0, 1, 2, 0, 3, 2, 3, 0, 0, 2, 0, 2, 1, 3, 1, 2, 2, 3, 0, 0, 3, 2, 2, 0, 2, 2, 1, 3, 0, 0, 2, 0, 3, 1, 2, 2, 2, 0, 2, 1, 3, 3, 1, 0, 2, 1, 2, 2, 0, 1, 3, 1, 3, 3, 0, 0, 1, 3, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 0, 1, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 1, 1, 2, 2, 0, 1, 2, 0, 1, 0, 0, 0, 1, 2, 0, 0, 2, 0, 2, 2, 2, 1, 0, 1, 2], [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1, 1, 2, 1, 1, 0, 2, 1, 0, 1, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = i0\\nif max(( min(divInt(( ( max(int(0.0), i0) + abs(res0) ) + int(4.0) ),( i1 + in1 )), in1) + i0 ), int(4.0)) == divInt(( in1 * divInt(in2,( int(9.0) + divInt(min(abs(min(mod(i0,( int(8.0) + ( abs(int(6.0)) * i0 ) )), in1)), ( min(int(2.0), int(5.0)) + min(( in2 + min(i1, ( in1 + mod(in1,in0) )) ), min(abs(in0), abs(divInt(res0,max(max(int(6.0), int(4.0)), i2))))) )),in1) )) ),divInt(i0,divInt(( res0 + res0 ),in1))):{:\\nb1 = ( int(4.0) - in2 ) != i0\\n:}else:{:\\nif ( ( int(0.0) == abs(int(3.0)) or int(4.0) \\g int(0.0) ) or b2 ):{:\\nif abs(int(2.0)) == res0:{:\\nloopBreak% = 0\\nwhile not int(5.0) \\g in2:{:\\nin0 *= int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b0:{:\\nin2 *= ( ( in2 * mod(( min(int(7.0), divInt(int(7.0),divInt(int(0.0),max(( int(3.0) - mod(( int(7.0) * ( mod(( abs(min(max(int(2.0), ( mod(i1,int(7.0)) - in2 )), ( min(res0, int(1.0)) + in2 ))) + min(int(0.0), res0) ),in1) * mod(int(3.0),in2) ) ),int(6.0)) ), int(7.0))))) - in0 ),i2) ) - int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\ni0 *= int(1.0)\\nb1 = min(i1, int(7.0)) == ( i1 - max(( abs(in2) - in1 ), divInt(res0,mod(int(1.0),min(int(3.0), mod(( min(in1, res0) + abs(mod(( in1 * mod(mod(int(9.0),min(i2, res0)),divInt(i1,abs(int(2.0)))) ),( ( ( in2 - mod(int(7.0),abs(abs(int(5.0)))) ) + i1 ) - ( int(9.0) * mod(mod(i0,int(0.0)),max(int(4.0), min(max(in1, in2), int(1.0)))) ) ))) ),abs(int(0.0))))))) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 44, 44, 7, 4, 2, 12, 7, 5, 0, 3, 59, 4, 194, 56, 39, 33, 26]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 2, 2, 0, 1, 0, 1, 1], [0, 0, 0], [1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 5, 6, 3, 6, 6, 7, 9, 0, 4, 4, 2, 8, 1, 0, 9, 3, 8, 3, 9, 6, 9, 4, 2, 8, 6, 1, 5, 5, 4, 7, 9, 3, 0, 7, 1, 0, 3, 4, 4, 9, 5, 7, 0, 1, 2, 7, 2, 0, 3, 6, 5, 9, 0, 8, 5, 0, 7, 3, 4, 9, 6, 3, 5, 7, 8, 2, 4, 7, 4, 9, 8, 8], [1, 1, 3, 5], [2, 0, 2], [], [0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0], [2, 1, 1], [1, 1], [1, 0, 1], [4, 6, 5, 0, 1, 0, 2, 0, 2, 5, 4, 6, 3, 5, 4, 1, 0, 0, 3, 5, 4, 1, 4, 1, 2, 2, 6, 4, 6, 5, 2, 4, 3, 3, 5, 3, 3, 6, 3, 4, 6, 0, 3, 1, 3, 6, 6, 4, 3, 1, 0, 3, 6, 0, 4, 6, 5, 6, 2, 1, 0, 3, 1, 3, 3, 6, 3, 0, 0, 1, 2, 3, 3, 0, 1, 3, 0, 0, 5, 3, 0, 1, 0, 5, 5, 3], [0, 1, 1], [3, 3, 0, 2, 1, 0, 1, 0, 0, 0, 2, 2, 3, 2, 3, 0, 3, 2, 3, 2, 2, 1, 3, 3, 0, 1, 3, 1, 0, 1, 3, 0, 0, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 1, 1, 1, 1, 3, 2, 0, 3, 0, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 2, 0, 2, 3, 3, 3, 2, 1, 1, 1, 2, 2, 2, 0, 2, 2, 1, 2, 3, 1, 3, 2, 2, 0, 0, 1, 0, 1, 2, 2, 2, 2, 2, 1, 1, 0, 2, 1, 0, 0, 1, 1, 3, 2, 3, 2, 2, 2, 1, 2, 1, 0, 3, 3, 0, 0, 3, 2, 2, 3, 2, 0, 2, 2, 1, 2, 3, 3, 0, 2, 1, 0, 1, 0, 0, 1, 3, 0, 0, 1, 0, 3, 3, 1, 1, 0, 1, 2, 3, 2, 1, 0, 3, 0, 1, 3, 0, 1, 2, 0, 0, 1, 3, 0, 2, 0, 2, 1, 3, 0, 2, 2, 0, 0, 2, 1, 3, 2, 0, 0, 3, 2, 3, 3, 0, 2, 3, 0, 0, 0, 0, 1, 3, 0, 3, 1, 2, 0, 3, 1, 3, 2, 2, 1, 2, 3, 3, 1, 0, 2, 1, 1, 0, 3, 3, 3, 3, 3, 2, 1, 3, 2, 3, 3, 2, 1, 3, 3, 3, 1, 2, 2, 0, 1, 2, 2, 2, 1, 0, 2, 3, 3, 0, 0, 2, 3, 1, 0, 3, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 2, 1, 3, 2, 1, 1, 2, 1, 3, 3, 0, 1, 2, 1, 1, 2, 2, 0, 2, 0, 1, 2, 2, 2, 0, 0, 2, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 1, 0, 3, 0, 3, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 1, 1, 2, 1, 0, 1, 1, 1, 2, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 1, 1, 0, 1, 1, 2, 0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 0, 2, 1, 0, 2, 1, 0], [0, 2, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 0, 0, 2, 2, 2], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not False:{:\\nin1 = max(min(res0, ( int(9.0) + in2 )), int(4.0))\\nif i0 \\g i1:{:\\nif False:{:\\ni0 *= i2\\n:}else:{:\\nb2 = mod(divInt(min(( max(i0, min(divInt(abs(( mod(int(5.0),min(abs(i2), int(6.0))) - max(int(3.0), in2) )),int(6.0)), max(in1, res0))) * int(6.0) ), divInt(( divInt(mod(max(in0, in2),in1),i1) * int(7.0) ),int(9.0))),int(0.0)),int(4.0)) \\g max(( i0 + max(i0, ( max(divInt(min(min(int(4.0), abs(int(2.0))), mod(min(int(8.0), ( in0 * ( min(min(max(( int(1.0) + int(0.0) ), int(9.0)), ( mod(( in2 * ( divInt(int(3.0),mod(max(int(8.0), abs(( ( in1 * i1 ) - int(3.0) ))),in1)) - int(9.0) ) ),( ( divInt(divInt(divInt(int(6.0),int(9.0)),i1),( int(4.0) - i2 )) * i2 ) + int(2.0) )) * int(8.0) )), max(( min(mod(( mod(int(6.0),divInt(int(1.0),res0)) + max(max(in1, res0), max(( mod(abs(mod(in2,mod(mod(int(5.0),mod(min(max(i2, mod(int(5.0),in1)), int(4.0)),in0)),in0))),int(7.0)) + min(in2, in0) ), int(9.0))) ),in0), max(max(int(3.0), int(0.0)), res0)) * int(7.0) ), ( min(mod(int(1.0),in0), abs(in1)) * int(0.0) ))) + max(res0, int(3.0)) ) )),divInt(i0,in0))),int(4.0)), max(i1, ( in0 + ( int(4.0) * min(res0, divInt(mod(res0,in1),( int(9.0) * max(mod(in0,i1), max(mod(min(max(i0, mod(max(in0, res0),i0)), in1),int(5.0)), abs(res0))) ))) ) ))) - min(int(7.0), ( in2 + min(int(0.0), abs(mod(mod(int(1.0),( abs(abs(int(2.0))) * res0 )),divInt(int(7.0),int(2.0))))) )) )) ), i2)\\n:}\\n:}\\nb0 = min(min(max(abs(max(( int(0.0) + max(( abs(max(mod(int(3.0),min(max(min(int(6.0), ( divInt(i1,int(5.0)) + mod(mod(( int(9.0) + i0 ),( abs(abs(in0)) - i1 )),mod(min(int(0.0), in0),abs(in0))) )), int(8.0)), int(5.0))), ( res0 + ( in0 - i0 ) ))) + mod(i0,mod(int(0.0),max(( int(7.0) + int(3.0) ), mod(int(4.0),min(abs(i1), int(9.0)))))) ), ( int(6.0) + int(3.0) )) ), divInt(( i2 - ( in0 * int(5.0) ) ),divInt(( mod(in0,i0) + mod(divInt(int(7.0),divInt(divInt(i1,int(8.0)),divInt(( int(2.0) + ( in0 * i0 ) ),divInt(int(4.0),i0)))),in2) ),in0)))), ( int(7.0) * int(4.0) )), int(9.0)), i0) \\ge max(i1, min(int(8.0), i0))\\nin2 *= int(8.0)\\n:}else:{:\\nb2 = in2 != in0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 74, 74, 4, 3, 0, 7, 4, 3, 2, 3, 86, 3, 319, 92, 70, 43, 51]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [1, 2], [], [0], [], [0], [], [], [1, 0, 3], [0], [3, 0, 0], [], [0], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = min(i0, in0)\\nb1 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 3, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [8, 5, 4], [4], [0, 2], [0, 0], [0, 1, 0, 0, 0], [0], [3, 3, 1, 0], [1], [], [4, 1, 5, 0], [], [0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 0, 1], [0, 1], [1, 1, 0, 2], [0], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( in1 \\le ( max(max(i1, min(int(8.0), abs(in2))), divInt(int(5.0),i0)) + int(4.0) ) and ( False and b2 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 2, 2, 5, 1, 4, 1, 0, 4, 0, 13, 2, 4, 1, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 2, 0, 1, 2, 1, 0], [0, 1], [0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 7, 9, 2, 2, 1, 7, 3, 3, 3, 0, 2, 5, 4, 7, 1, 3, 2, 5, 7, 8, 0, 0, 2, 3, 0, 4, 3, 7, 6, 8], [2, 1, 0, 1, 3, 3, 5], [0, 2, 2, 2, 1], [0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 3, 2, 0, 2, 3], [], [1], [1, 1, 0, 6, 6, 6, 3, 6, 4, 0, 4, 0, 3, 4, 0, 6, 0, 0, 1, 3, 3, 3, 3, 0, 4, 5, 2, 5, 3, 1], [1, 1], [1, 2, 1, 3, 1, 0, 2, 2, 3, 0, 2, 1, 3, 1, 3, 3, 2, 1, 3, 0, 1, 3, 3, 3, 3, 0, 0, 3, 1, 1, 1, 1, 1, 3, 0, 1, 0, 0, 2, 3, 2, 1, 3, 2, 0, 3, 2, 0, 0, 3, 2, 0, 2, 3, 3, 0, 0, 3, 2, 2, 2, 3, 3, 1, 3, 1, 1, 2, 1, 1, 0, 2, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1, 3, 1, 0, 3, 2, 3, 2, 0, 1, 1, 2, 3, 1, 0, 3, 1, 1, 3, 0, 1, 0, 2, 3, 0, 0, 3, 2, 1, 0, 3, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 2, 0, 2, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0, 0, 2, 2, 2, 1, 1, 0, 0, 2, 1, 1, 2, 1, 1, 2], [2, 1, 2, 1, 0, 2, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not not int(1.0) == mod(int(0.0),min(int(7.0), i1))\\ni1 *= ( divInt(min(i0, ( int(9.0) - abs(int(2.0)) )),min(abs(divInt(int(2.0),max(res0, int(1.0)))), abs(min(max(min(res0, res0), min(int(7.0), int(3.0))), int(3.0))))) * int(3.0) )\\nif not int(0.0) \\g min(in0, int(2.0)):{:\\nb2 = not ( not b2 and not ( res0 \\l in1 or divInt(abs(mod(int(5.0),max(divInt(i0,min(mod(in1,i0), max(mod(in0,divInt(min(min(in1, i0), abs(mod(mod(( abs(abs(int(4.0))) - max(int(7.0), int(1.0)) ),divInt(int(3.0),int(2.0))),res0))),divInt(i0,int(5.0)))), int(7.0)))), i0))),int(8.0)) \\g i1 ) )\\n:}else:{:\\nin0 += max(int(0.0), ( int(0.0) * min(int(2.0), in0) ))\\n:}\\nloopBreak% = 0\\nwhile min(divInt(abs(mod(in0,int(3.0))),int(0.0)), ( max(int(4.0), in0) + max(int(3.0), int(7.0)) )) \\ge abs(i0):{:\\nb2 = int(6.0) \\ge in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( max(in2, i2) + max(( int(8.0) + in2 ), abs(in0)) ) != i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 32, 32, 7, 5, 2, 16, 7, 9, 0, 1, 30, 2, 114, 22, 32, 9, 15]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1], [7], [3], [0, 2, 2], [0], [1, 0, 0, 0], [0], [3, 0, 1], [0], [], [0], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i0 \\ge int(7.0)\\nb2 = ( b2 and True )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 3, 1, 4, 1, 3, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 4], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 0, 2, 1], [1, 0, 1, 1, 1], [0, 0], [1, 1, 1, 1, 1], [4, 2, 1, 4, 5], [2, 5, 1, 3], [0, 2, 1], [], [0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1], [0, 0], [1], [5, 0, 5, 5, 2, 6, 6, 5, 6, 6], [], [2, 0, 0, 2, 3, 0, 0, 1, 2, 2, 3, 3, 0, 2, 1, 1, 0, 0, 0, 0, 3, 2, 0, 1, 1], [0, 1, 1, 1, 0, 0], [2, 2, 2, 0], [0, 1, 0], [0, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nif ( in2 + i0 ) == divInt(abs(in2),in2):{:\\nloopBreak% = 0\\nwhile int(4.0) != divInt(mod(abs(abs(i2)),( int(2.0) - int(1.0) )),res0):{:\\nloopBreak% = 0\\nwhile res0 \\g in2:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile res0 \\ge min(( res0 + int(4.0) ), int(5.0)):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 5, 2, 5, 5, 4, 3, 0, 7, 4, 3, 2, 1, 10, 0, 25, 6, 4, 3, 3]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1], [7, 2, 4, 8, 5, 5, 0], [5], [0], [], [0, 1], [0], [2], [], [], [0, 6, 4, 3], [1], [1, 3, 1, 1, 3, 2, 3, 1, 2, 1, 1, 2, 0, 3, 0, 3, 0, 1], [1, 1, 1], [0, 2, 1, 1, 0], [1], [0, 1, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not int(7.0) != min(int(2.0), int(4.0))\\ni0 -= abs(divInt(max(int(8.0), mod(int(5.0),int(5.0))),mod(res0,max(in1, min(in0, int(0.0))))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 1, 1, 0, 2, 1, 1, 0, 0, 4, 1, 18, 3, 5, 1, 3]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [0, 0], [1, 1, 1, 1, 1, 1], [7, 3, 0, 5, 2, 3], [0, 2], [2, 0, 1], [], [0, 1, 1, 0], [0, 0], [2, 0], [], [], [4, 3, 2, 5, 2, 3, 2, 0, 1], [], [0, 3, 1, 1, 3, 2, 3, 2, 3, 3, 2, 2, 0, 3, 3, 3, 0, 0, 3, 0, 1, 1, 3, 3, 1, 0, 2, 0, 3, 0, 1, 0], [0, 1, 1, 1, 0], [2, 1, 1, 1, 2, 0, 2, 2, 2, 2, 1, 0], [2, 0], [1, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not in1 \\l abs(int(7.0)):{:\\nb2 = int(3.0) == max(( max(mod(max(abs(divInt(mod(in0,min(abs(abs(i2)), in2)),abs(i2))), int(0.0)),int(5.0)), abs(max(int(2.0), in0))) * ( i2 + min(i0, int(3.0)) ) ), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 2, 3, 0, 4, 2, 2, 0, 0, 9, 0, 32, 5, 12, 2, 3]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1], [5, 6], [5], [2, 0], [], [0, 1], [0], [1], [0], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nb0 = int(5.0) != int(6.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 1], [0, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 7, 3, 7, 1, 0, 4, 6, 1, 1, 5, 6, 4, 8], [3, 1, 4], [2], [], [1, 1, 1], [0, 0, 0], [], [], [0, 0], [2, 4, 0, 6, 2, 2, 6, 4, 6, 4, 6, 2, 3, 4, 6, 4, 4], [0], [1, 2, 2, 0, 0, 1, 2, 2, 2, 2, 3, 0, 3, 1, 1, 0, 2, 2, 0, 3, 2, 3, 1, 0, 2, 0, 1, 1, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 0, 0, 2, 3, 1, 1, 3, 1, 2, 1, 2, 0, 0, 0, 2, 2, 3, 1, 0, 3, 1, 3, 0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 0, 0, 2, 2, 1, 2, 2, 2], [1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) \\ge ( ( i2 - in1 ) + int(9.0) ):{:\\nb2 = mod(( mod(divInt(min(i0, abs(int(7.0))),int(3.0)),res0) - mod(mod(i2,min(( min(int(7.0), i2) * ( res0 + int(1.0) ) ), int(0.0))),int(4.0)) ),int(6.0)) \\g in1\\nif ( res0 - ( mod(( divInt(abs(in1),res0) + divInt(abs(int(1.0)),int(1.0)) ),max(int(5.0), ( int(6.0) - mod(i2,in0) ))) + in1 ) ) \\le ( ( abs(int(4.0)) * res0 ) - abs(int(8.0)) ):{:\\nin1 = abs(in1)\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 15, 15, 3, 1, 0, 3, 3, 0, 0, 2, 17, 1, 61, 20, 10, 11, 9]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 1, 1, 2, 1, 0], [0, 1], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 4, 2, 8, 4, 4, 2, 2, 7, 8, 8, 5, 8, 7, 5, 5, 9, 4, 0, 1, 1, 5, 2], [0, 3, 4, 5, 3, 1], [0], [0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0], [3, 3, 3, 2, 2], [], [1], [0, 2, 4, 0, 6, 1, 3, 4, 1, 1, 1, 6, 2, 5, 6, 1, 4, 4, 0, 6, 5, 3, 2, 1, 2], [1, 0, 1], [0, 3, 1, 2, 0, 2, 3, 3, 0, 2, 0, 1, 3, 0, 0, 2, 0, 3, 3, 0, 2, 3, 1, 0, 0, 3, 1, 1, 1, 2, 0, 2, 2, 3, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 0, 3, 1, 1, 3, 3, 1, 0, 0, 1, 3, 0, 3, 1, 2, 2, 1, 3, 2, 2, 0, 1, 0, 2, 2, 0, 0, 0, 3, 1, 1, 3, 1, 0, 0, 2, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 2, 0, 1, 1, 2, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2], [1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 0, 2], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( i0 \\l max(int(1.0), ( i2 - divInt(min(abs(in1), mod(i0,int(9.0))),min(res0, i1)) )) and ( in0 * max(max(in1, ( abs(int(4.0)) - i1 )), i1) ) \\ge max(int(2.0), int(8.0)) ) or ( not int(4.0) \\le divInt(i1,divInt(( min(int(4.0), mod(int(2.0),int(2.0))) - divInt(mod(int(7.0),( int(8.0) - divInt(int(8.0),res0) )),abs(int(5.0))) ),int(8.0))) and abs(min(int(7.0), i2)) != in2 ) ):{:\\nres0 *= int(5.0)\\ni1 = max(in1, abs(int(5.0)))\\nloopBreak% = 0\\nwhile mod(( int(9.0) - max(( ( in1 * int(4.0) ) - i0 ), ( mod(res0,in2) * in0 )) ),max(int(0.0), int(1.0))) \\ge abs(int(1.0)):{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = not i2 \\g ( int(5.0) * int(2.0) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 24, 24, 6, 1, 3, 11, 6, 5, 0, 1, 25, 3, 83, 20, 17, 12, 10]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 6, 3, 8, 7, 0, 6], [], [1], [], [0], [], [1], [0], [], [3, 4, 0, 1], [1], [2, 3, 2, 2, 3, 2, 3, 1, 2, 1, 2, 1, 1, 3, 1, 1, 0, 1, 0, 1, 3, 0], [1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 2], [2, 2, 2, 0], [1, 0, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nin0 *= mod(max(divInt(( max(( max(int(7.0), mod(int(1.0),( int(6.0) * int(3.0) ))) * min(int(8.0), int(7.0)) ), in1) + int(0.0) ),i0), int(6.0)),abs(i1))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 8, 8, 0, 1, 0, 1, 0, 1, 1, 0, 4, 1, 22, 6, 5, 4, 3]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 1, 0, 1, 2, 0, 0, 0], [1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 1, 7, 3, 1, 3, 9, 3, 8, 1, 3, 9, 1, 4, 9, 6, 4, 2, 9, 4, 7, 0, 5, 6, 8, 8, 7, 0, 8, 0, 7, 9, 4, 0, 8, 4, 6, 6, 2, 1, 0, 8, 8, 3, 4, 0, 0, 1, 3, 9, 3, 0, 2, 1, 8, 8, 6, 5, 3, 7, 9, 7, 6, 1, 8, 4, 1, 8, 0, 9], [0, 3, 0, 0, 2, 4, 3, 4], [1, 0, 1, 2, 1, 1, 2], [0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 0, 2, 3, 0, 1, 2], [0, 0], [0, 1], [6, 4, 0, 1, 3, 4, 3, 0, 0, 3, 5, 1, 5, 0, 5, 4, 6, 4, 4, 3, 3, 5, 4, 3, 6, 0, 4, 1, 3, 2, 2, 6, 1, 5, 0, 2, 5, 6, 6, 4, 6, 1, 1, 0, 2, 2, 4, 4, 4, 4, 4, 1, 3, 5, 1, 0, 3, 1, 4, 2, 2, 2, 3, 4, 3, 0, 5, 3, 2, 0, 0, 0, 6, 5, 1, 2], [0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 1, 1, 3, 2, 3, 3, 3, 0, 1, 1, 3, 1, 0, 2, 2, 1, 2, 1, 3, 1, 3, 0, 2, 0, 2, 2, 0, 3, 0, 0, 3, 1, 2, 2, 3, 1, 0, 2, 0, 1, 0, 0, 3, 3, 1, 2, 3, 0, 0, 3, 3, 2, 1, 3, 2, 2, 0, 3, 2, 0, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0, 3, 3, 1, 2, 1, 2, 1, 2, 3, 2, 1, 2, 0, 3, 1, 1, 1, 1, 1, 2, 1, 3, 2, 3, 1, 2, 0, 2, 3, 3, 1, 0, 3, 1, 0, 2, 1, 0, 2, 0, 3, 1, 2, 0, 2, 3, 1, 2, 0, 3, 3, 2, 1, 0, 1, 1, 2, 3, 0, 3, 3, 2, 2, 3, 0, 2, 2, 3, 1, 0, 1, 1, 1, 1, 3, 2, 0, 0, 2, 1, 2, 1, 3, 3, 1, 2, 0, 2, 0, 3, 1, 3, 0, 3, 3, 0, 2, 0, 1, 3, 1, 0, 0, 1, 2, 0, 3, 3, 0, 2, 3, 1, 0, 3, 1, 1, 0, 2, 3, 0, 3, 0, 0, 1, 3, 1, 2, 0, 2, 3, 0, 3, 3, 2, 1, 3, 1, 2, 3, 0, 3, 2, 0, 2, 1, 0, 2, 3, 2, 2, 2, 3, 0, 3, 0, 2, 2, 0, 0, 1, 0, 2, 2, 3, 3, 0, 1, 2, 1, 0, 3, 2, 1, 0, 2, 3, 1, 2, 3, 1, 3, 1, 0, 0, 1, 1, 1, 0, 3, 1, 0, 1, 3, 2, 2, 1, 3, 1, 3, 1, 0, 0, 1, 1, 2, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0], [2, 0, 0, 2, 0, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 1, 0, 2, 1, 1, 1, 1, 0, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 0, 2, 2, 1, 2, 2, 2, 1, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 2, 1, 0, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 2, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = divInt(( int(8.0) - int(6.0) ),abs(( min(min(abs(in1), int(1.0)), int(7.0)) + min(int(3.0), i0) )))\\nb1 = ( divInt(int(1.0),( int(3.0) * max(int(9.0), max(i1, divInt(in0,mod(mod(in1,max(in0, i0)),abs(int(3.0)))))) )) - ( divInt(abs(int(8.0)),i0) + ( in0 * int(1.0) ) ) ) \\l in2\\nloopBreak% = 0\\nwhile True:{:\\nb0 = not b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = in2\\nloopBreak% = 0\\nwhile abs(min(int(3.0), ( min(i0, in2) - max(min(( int(9.0) - abs(mod(mod(in1,min(divInt(res0,in1), mod(( ( ( in1 * mod(int(1.0),in0) ) * in0 ) - max(max(int(4.0), ( int(9.0) + divInt(int(6.0),divInt(max(mod(int(4.0),mod(in2,min(int(2.0), int(9.0)))), int(4.0)),int(7.0))) )), int(0.0)) ),divInt(int(5.0),min(( min(int(6.0), mod(in1,mod(min(min(int(8.0), in0), max(int(8.0), res0)),( int(7.0) - i0 )))) + mod(in1,min(int(0.0), mod(i1,( max(int(8.0), ( in0 - min(max(( int(0.0) + i2 ), int(7.0)), int(9.0)) )) * divInt(abs(i2),abs(abs(( mod(abs(res0),( ( abs(int(4.0)) - i1 ) - int(0.0) )) + int(8.0) )))) )))) ), int(4.0)))))),int(6.0))) ), abs(divInt(in2,i0))), divInt(int(6.0),( int(2.0) - max(abs(int(1.0)), ( i2 + ( in2 + min(int(0.0), max(res0, min(abs(res0), mod(in1,int(8.0))))) ) )) ))) ))) \\ge max(int(8.0), res0):{:\\nb2 = not i1 \\l int(3.0)\\nloopBreak% = 0\\nwhile ( divInt(i1,max(max(i0, divInt(max(int(4.0), i2),min(int(0.0), int(0.0)))), i2)) \\l ( max(in1, abs(in1)) * in1 ) and b1 ):{:\\nif True:{:\\nin1 -= int(1.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = max(int(3.0), divInt(i1,mod(abs(in0),max(max(( int(9.0) - abs(int(3.0)) ), ( abs(in2) + max(divInt(i1,( int(0.0) + i0 )), ( abs(divInt(( ( abs(in0) + abs(i1) ) - ( ( in1 * i2 ) + int(2.0) ) ),i2)) + mod(mod(max(min(i2, int(1.0)), ( int(8.0) - in0 )),abs(mod(int(8.0),in1))),( abs(int(6.0)) * ( max(int(5.0), abs(int(3.0))) + in0 ) )) )) )), i0))))\\nloopBreak% = 0\\nwhile int(7.0) == int(9.0):{:\\nb1 = not int(7.0) \\le in2\\nin0 += abs(int(6.0))\\ni2 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(1.0) \\ge abs(mod(mod(int(8.0),max(int(4.0), abs(int(1.0)))),i0)):{:\\ni0 *= res0\\n:}else:{:\\nb2 = int(8.0) \\le int(0.0)\\nin2 *= mod(( i1 + i2 ),int(9.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 19, 19, 6, 13, 71, 71, 8, 7, 1, 16, 8, 8, 2, 2, 76, 8, 281, 73, 69, 41, 37]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [0, 1, 1], [5, 5, 9], [5], [1, 0, 2], [], [0, 1], [0], [0], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\nb2 = int(55.0) != int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 3, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 2, 1, 1, 2, 2, 1, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 6, 7, 2, 7, 0, 1, 6, 2, 9, 2, 4, 1, 2, 7, 1, 8, 4, 6, 1, 5, 3, 1, 1, 7, 1, 2, 5, 8, 0, 5, 9, 0, 7, 1, 2, 5, 4, 0, 0, 6, 7, 7, 6, 7, 3, 2, 7, 2, 4, 7, 7, 9, 0, 4, 2, 6, 3, 2, 1, 4, 3, 1, 7, 3, 6, 5, 5, 5, 0, 5, 9, 8, 6, 9, 4, 1, 9, 3, 3, 4, 6, 8, 0, 2, 6, 0, 1, 3, 3, 8, 9, 1, 5, 4, 0, 9, 1, 1, 1, 6, 7, 4, 1, 7, 5, 9, 6, 1, 1, 5, 0, 7, 9, 7, 2, 7, 2, 4, 1, 0, 3, 2, 6, 7, 4, 2, 4, 8, 6, 2, 3, 4, 0, 2, 7, 5, 6, 9, 7, 8, 2, 3, 7, 7, 5, 7, 3, 3, 6, 9, 9, 0, 9, 2, 8, 5, 8, 9, 3], [0, 4, 5, 1, 3, 0, 1, 0, 4], [1, 2, 1], [0, 1, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 3, 3, 3, 1, 1, 0, 1], [0, 0, 0, 0], [1, 0, 1, 1], [6, 3, 6, 2, 2, 6, 6, 5, 5, 2, 1, 6, 1, 0, 3, 1, 1, 2, 4, 0, 5, 0, 5, 2, 4, 2, 6, 1, 4, 5, 1, 1, 0, 0, 5, 5, 0, 0, 0, 2, 0, 3, 0, 1, 6, 5, 5, 3, 5, 3, 4, 3, 0, 1, 1, 1, 6, 4, 4, 3, 1, 6, 6, 0, 1, 1, 1, 3, 1, 6, 5, 1, 5, 1, 6, 3, 2, 6, 2, 4, 4, 6, 6, 6, 3, 4, 5, 4, 2, 0, 2, 5, 4, 0, 6, 2, 5, 3, 1, 1, 5, 3, 3, 4, 2, 6, 1, 2, 6, 1, 5, 1, 2, 1, 0, 1, 3, 6, 6, 2, 5, 1, 0, 5, 5, 6, 0, 6, 2, 6, 2, 1, 5, 6, 3, 2, 0, 6, 3, 6, 5, 4, 4, 2, 6, 0, 5, 0, 6, 0, 4, 6, 0, 6, 2, 1, 6, 2, 1, 6, 0, 5, 6, 0, 0, 5, 4, 6, 4, 0, 3, 3, 6, 4, 3], [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [2, 3, 2, 1, 1, 3, 2, 1, 0, 2, 2, 0, 1, 0, 1, 1, 2, 3, 3, 3, 0, 1, 3, 2, 2, 0, 3, 1, 2, 2, 2, 1, 1, 1, 1, 0, 2, 0, 1, 3, 1, 1, 0, 2, 1, 2, 0, 3, 3, 2, 1, 2, 3, 1, 3, 3, 2, 0, 2, 3, 0, 1, 2, 0, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 0, 2, 3, 1, 2, 2, 0, 0, 0, 0, 2, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 3, 3, 1, 0, 3, 2, 3, 0, 0, 0, 3, 3, 2, 2, 1, 1, 2, 0, 1, 1, 3, 1, 1, 2, 1, 3, 2, 2, 1, 2, 0, 1, 2, 1, 1, 0, 1, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0, 2, 0, 0, 3, 2, 1, 2, 2, 3, 1, 3, 1, 2, 2, 0, 3, 1, 3, 0, 0, 0, 3, 1, 1, 3, 2, 3, 3, 2, 3, 2, 3, 2, 3, 1, 1, 2, 1, 3, 1, 2, 3, 1, 2, 3, 3, 0, 2, 3, 2, 0, 1, 3, 1, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 2, 3, 2, 0, 2, 0, 0, 3, 1, 0, 1, 1, 1, 1, 3, 1, 1, 2, 1, 3, 0, 0, 1, 0, 3, 0, 1, 1, 3, 2, 3, 2, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 1, 0, 1, 0, 1, 3, 1, 1, 3, 3, 3, 1, 0, 0, 0, 2, 2, 3, 0, 3, 3, 2, 3, 1, 3, 0, 1, 3, 2, 2, 2, 0, 0, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 3, 0, 2, 3, 0, 0, 1, 2, 0, 3, 2, 3, 1, 1, 0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 3, 0, 3, 0, 0, 0, 1, 3, 2, 2, 1, 3, 2, 0, 0, 3, 2, 3, 2, 0, 1, 3, 1, 0, 2, 0, 3, 2, 3, 3, 2, 3, 2, 0, 0, 3, 3, 1, 0, 2, 1, 3, 3, 0, 0, 2, 1, 0, 3, 2, 2, 2, 3, 0, 0, 1, 3, 2, 2, 3, 3, 3, 3, 1, 2, 2, 0, 2, 1, 0, 0, 0, 1, 3, 2, 3, 3, 1, 2, 3, 1, 2, 0, 0, 0, 3, 3, 2, 2, 2, 1, 3, 0, 3, 1, 0, 0, 2, 3, 2, 0, 3, 0, 2, 2, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 3, 0, 1, 2, 1, 1, 1, 3, 2, 1, 2, 2, 1, 0, 2, 1, 2, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 3, 3, 2, 0, 2, 0, 3, 2, 0, 2, 2, 1, 2, 2, 1, 3, 0, 0, 3, 1, 2, 1, 2, 0, 1, 2, 0, 3, 0, 2, 3, 3, 0, 1, 3, 1, 2, 2, 0, 3, 3, 2, 0, 0, 2, 1, 1, 3, 0, 2, 2, 3, 1, 0, 0, 3, 2, 1, 3, 3, 2, 3, 1, 3, 0, 1, 1, 1, 0, 1, 3, 1, 0, 2, 2, 3, 3, 3, 2, 3, 1, 2, 2, 0, 0, 3, 0, 1, 0, 2, 3, 2, 0, 2, 0, 1, 3, 2, 2, 1, 0, 2, 1, 2, 3, 0, 1, 0, 3, 1, 0, 0, 3, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 3, 2, 1, 3, 0, 3, 0, 0, 3, 3, 3, 0, 3, 1, 3, 2, 3, 1, 1, 0, 2, 3, 2, 0, 1, 0, 3, 3, 2, 3, 3, 2, 1, 1, 1, 0, 0, 2, 1, 2, 3, 3, 3, 2, 3, 3, 1, 3, 1, 1, 0, 3, 2, 0, 3, 2, 1, 3, 1, 2, 2, 3, 2, 0, 1, 0, 1, 0, 0, 1, 2, 2, 0, 1, 2, 1, 0, 3, 3, 1, 3, 0, 1, 2, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [2, 0, 1, 1, 1, 2, 0, 1, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 0, 0, 1, 1, 0, 0, 1, 2, 1, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 2, 2, 0, 1, 2, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0, 2, 2, 2, 2, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 2, 2, 2, 0, 2, 1, 1, 0, 0, 1, 1, 2, 2, 0, 0, 0, 2, 1, 1, 2, 2, 0, 2, 2, 1, 2, 1, 0, 2], [2, 0, 1, 2, 2, 0, 1, 0, 2, 1, 1, 1, 1, 0, 0, 2, 0, 1, 2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 1, 2, 1, 2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 2, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 2, 1, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 0, 2, 1, 2, 0, 0, 2, 2, 1, 2, 0, 2, 2, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= mod(abs(mod(int(3.0),int(6.0))),min(( int(6.0) + in0 ), ( ( res0 - int(7.0) ) * i2 )))\\nif int(2.0) \\l int(7.0):{:\\ni2 *= ( max(max(max(res0, int(0.0)), abs(( ( res0 + min(int(1.0), ( mod(divInt(int(6.0),int(2.0)),int(9.0)) - int(2.0) )) ) + in2 ))), ( in2 * int(4.0) )) - max(int(1.0), int(2.0)) )\\n:}else:{:\\ni2 = i1\\n:}\\nloopBreak% = 0\\nwhile not divInt(int(7.0),mod(res0,min(abs(( int(1.0) - ( min(int(8.0), min(min(divInt(i1,( abs(i0) - int(4.0) )), ( in0 - ( i1 + int(6.0) ) )), ( mod(int(1.0),( int(5.0) + ( divInt(int(3.0),int(1.0)) * int(1.0) ) )) + int(7.0) ))) - i1 ) )), ( abs(int(1.0)) * mod(( i2 * in1 ),i0) )))) \\le in2:{:\\nif True:{:\\ni0 = divInt(int(2.0),( in2 * ( i2 - in1 ) ))\\n:}\\ni2 += res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= divInt(in1,in2)\\nif abs(abs(int(5.0))) != i1:{:\\nloopBreak% = 0\\nwhile abs(( min(i1, i0) * i0 )) \\g abs(min(( ( int(8.0) - int(0.0) ) - ( in2 * int(5.0) ) ), int(9.0))):{:\\nin2 *= abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(7.0) \\ge ( int(1.0) + max(mod(mod(int(2.0),mod(i0,int(5.0))),( int(4.0) - int(0.0) )), i0) ):{:\\nb1 = ( ( ( int(0.0) \\l divInt(( max(i0, abs(( mod(i2,i0) * in0 ))) - i0 ),divInt(i1,res0)) and True ) or max(( int(6.0) * divInt(( abs(int(7.0)) * max(int(7.0), divInt(( in2 * min(int(6.0), max(in2, in0)) ),in2)) ),max(int(7.0), int(3.0))) ), abs(mod(min(min(mod(max(( max(mod(min(int(2.0), int(7.0)),( int(2.0) + min(int(4.0), ( max(int(7.0), divInt(abs(max(in0, divInt(abs(mod(in1,int(7.0))),abs(int(9.0))))),( in0 + int(0.0) ))) + mod(int(4.0),max(( mod(mod(divInt(mod(max(( i0 + divInt(i1,i1) ), min(int(2.0), i1)),int(6.0)),int(3.0)),int(2.0)),int(1.0)) - max(int(4.0), int(3.0)) ), divInt(int(1.0),min(res0, in1)))) )) )), int(7.0)) + in1 ), abs(in0)),int(3.0)), int(6.0)), max(( max(mod(int(5.0),i1), int(5.0)) * divInt(res0,( divInt(mod(int(5.0),res0),mod(max(( max(int(0.0), i0) - int(5.0) ), i1),int(9.0))) + abs(int(8.0)) )) ), int(6.0))),min(min(abs(int(9.0)), i1), i1)))) \\g in0 ) or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile divInt(mod(max(i1, min(min(( min(int(4.0), max(res0, int(1.0))) + min(( ( ( in2 * i1 ) - abs(( ( divInt(( ( ( abs(( ( int(9.0) + abs(in2) ) + ( min(i1, res0) * int(3.0) ) )) * divInt(in0,abs(( abs(int(3.0)) - int(4.0) ))) ) - i2 ) - ( ( int(6.0) * ( divInt(int(8.0),mod(res0,i2)) * int(0.0) ) ) * int(2.0) ) ),mod(( int(6.0) - in1 ),in1)) * int(0.0) ) + divInt(res0,min(res0, max(res0, in0))) )) ) * in1 ), int(1.0)) ), max(divInt(mod(int(3.0),max(( in2 + in1 ), max(mod(min(divInt(i2,int(3.0)), abs(int(8.0))),i0), mod(i2,max(divInt(abs(min(divInt(min(mod(in2,in1), abs(max(int(9.0), i0))),( int(1.0) * abs(abs(res0)) )), i2)),mod(int(5.0),in2)), min(mod(( divInt(max(in0, i1),int(4.0)) * abs(mod(( max(min(min(min(int(0.0), divInt(divInt(i1,( int(9.0) + in2 )),in0)), in0), int(1.0)), abs(divInt(min(min(int(1.0), ( abs(int(1.0)) + mod(in1,i2) )), res0),min(min(( ( ( int(6.0) * min(i1, abs(int(7.0))) ) - i2 ) + res0 ), mod(max(mod(i1,abs(in2)), mod(mod(abs(i1),abs(min(int(4.0), i2))),divInt(i1,abs(abs(abs(i0)))))),int(1.0))), ( int(7.0) - int(5.0) ))))) + int(9.0) ),abs(( int(6.0) + divInt(( int(1.0) * i1 ),( int(1.0) - divInt(in0,int(5.0)) )) )))) ),abs(( int(0.0) + max(divInt(int(7.0),abs(res0)), abs(max(divInt(res0,( i2 - min(mod(in2,( divInt(int(9.0),divInt(( int(7.0) + abs(i1) ),i0)) + max(int(2.0), divInt(int(7.0),mod(in2,int(2.0)))) )), ( in2 * max(res0, divInt(max(max(i0, int(4.0)), max(int(1.0), divInt(( res0 - abs(abs(divInt(i2,res0))) ),( int(0.0) - int(3.0) )))),abs(i2))) )) )), ( ( min(int(2.0), i1) - in2 ) + abs(divInt(int(6.0),abs(abs(divInt(abs(int(7.0)),max(res0, int(4.0))))))) )))) ))), int(2.0))))))),int(4.0)), in0)), int(8.0))),max(int(6.0), i2)),( mod(min(abs(max(mod(min(int(2.0), divInt(mod(i0,res0),max(in0, int(3.0)))),res0), divInt(max(( in2 + ( in1 * int(4.0) ) ), min(( divInt(int(0.0),in1) * ( int(2.0) - mod(max(i2, int(7.0)),res0) ) ), abs(int(5.0)))),i0))), in2),abs(mod(i0,( res0 - i0 )))) - divInt(( in1 - res0 ),i0) )) \\l abs(divInt(int(6.0),min(res0, abs(i2)))):{:\\ni1 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif max(max(min(i2, min(int(9.0), max(( max(int(7.0), int(8.0)) + i1 ), ( abs(( res0 * int(2.0) )) - i0 )))), abs(min(( min(min(mod(int(3.0),int(7.0)), int(7.0)), in2) * res0 ), ( int(5.0) + mod(abs(max(max(( abs(abs(int(7.0))) + min(int(3.0), int(3.0)) ), i0), abs(divInt(i0,abs(( int(6.0) * max(int(9.0), ( ( abs(( in2 * int(9.0) )) - in1 ) * int(0.0) )) )))))),res0) )))), in1) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile b2:{:\\ni0 += ( divInt(in0,int(2.0)) * ( int(8.0) * in0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 -= max(min(int(5.0), abs(in1)), int(8.0))\\n:}\\nin0 = divInt(int(9.0),int(3.0))\\n:}\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 22, 22, 9, 13, 161, 161, 9, 3, 3, 18, 9, 9, 4, 4, 175, 11, 686, 194, 167, 105, 96]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [0], [0, 0], [1, 1, 1, 1, 1, 1], [6, 6, 2, 9, 5, 0], [0, 5, 0], [2, 0], [1], [1, 0, 1, 1, 0, 0], [0, 0, 0], [3, 2, 1], [1], [0], [1, 0, 1, 3], [], [2, 3, 3, 2, 0, 1, 1, 1, 1, 3, 0, 0, 1, 1, 0], [1, 0], [0, 0, 2], [1], [0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(min(min(( i1 - int(6.0) ), int(6.0)), int(2.0)),int(9.0)) \\l abs(i0):{:\\nb2 = ( i1 != int(5.0) or int(0.0) \\l in0 )\\n:}\\nb0 = not False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 3, 2, 1, 6, 3, 3, 1, 1, 4, 0, 15, 2, 3, 1, 1]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [5, 6], [], [], [], [], [], [], [], [], [0], [1], [2, 1, 1], [1], [], [1], [0]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= divInt(int(5.0),int(6.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 1, 1, 1, 2, 2, 0, 1, 0], [0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 8, 5, 7, 7, 0, 0, 4, 7, 6, 1, 6, 0, 3, 6, 6, 8, 7, 1, 1, 5, 0, 1, 4, 7, 6, 4, 0, 2, 9, 2, 1, 3, 7, 0, 9, 5, 7, 3, 9, 1, 9, 1, 4, 7, 3, 9, 4, 3, 7, 1, 6, 2, 1, 9, 9, 0, 2, 9, 8, 1, 7, 4], [4, 3, 0, 1, 5, 0, 1], [0, 2, 1, 2, 1, 2], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 1, 2], [1], [0, 0, 1, 1], [3, 0, 2, 0, 1, 2, 0, 4, 1, 3, 4, 2, 6, 4, 1, 3, 6, 5, 4, 5, 6, 6, 5, 0, 2, 1, 5, 6, 3, 0, 1, 6, 6, 3, 1, 1, 4, 5, 0, 5, 3, 5, 3, 4], [0, 1], [1, 3, 0, 2, 1, 3, 1, 1, 0, 1, 2, 2, 3, 2, 0, 3, 2, 1, 1, 0, 2, 0, 2, 1, 1, 3, 3, 0, 0, 1, 1, 1, 2, 1, 2, 3, 1, 2, 2, 3, 2, 3, 0, 0, 0, 3, 1, 1, 0, 2, 2, 3, 1, 1, 1, 0, 3, 2, 0, 2, 2, 2, 0, 2, 0, 1, 3, 3, 1, 2, 3, 0, 3, 2, 3, 1, 3, 1, 2, 3, 3, 2, 0, 1, 3, 3, 2, 1, 3, 2, 1, 2, 3, 1, 0, 1, 3, 3, 1, 3, 0, 1, 2, 3, 2, 0, 2, 3, 1, 0, 1, 0, 0, 1, 0, 3, 3, 1, 3, 2, 2, 3, 2, 0, 1, 2, 0, 3, 3, 2, 1, 2, 1, 1, 2, 3, 0, 3, 3, 2, 2, 0, 2, 1, 1, 3, 1, 0, 3, 2, 0, 1, 0, 2, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 2, 3, 1, 3, 2, 0, 1, 0, 2, 0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 3, 2, 2, 1, 0, 2, 1, 2, 2, 0, 1, 0, 3, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 2, 0, 2, 1, 0, 1, 1, 2, 2, 1, 0, 1, 0, 1, 1, 1, 2, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 1, 2, 2, 0, 0, 0, 2, 2, 1], [0, 0, 2, 0, 1, 2, 0, 2, 0, 1, 2, 0, 0, 0, 0, 2, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 2], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nb2 = False\\n:}\\nif int(3.0) \\le max(in0, ( int(7.0) + max(int(8.0), int(5.0)) )):{:\\nb1 = i0 \\ge int(7.0)\\n:}\\ni2 = ( mod(min(( i0 + abs(divInt(int(7.0),int(0.0))) ), i1),( i2 * ( int(0.0) + int(4.0) ) )) - min(abs(i0), in1) )\\ni1 *= int(76.0)\\nif int(1.0) \\l int(6.0):{:\\nif ( int(0.0) + mod(max(int(3.0), mod(mod(min(( max(in0, in1) * i2 ), max(int(6.0), int(6.0))),res0),( mod(abs(int(8.0)),int(7.0)) + int(1.0) ))),in1) ) \\g abs(mod(i1,divInt(mod(( in0 - ( res0 * int(1.0) ) ),max(min(int(5.0), ( max(in2, min(( max(int(0.0), max(int(1.0), mod(max(abs(divInt(in1,int(4.0))), min(min(( int(7.0) + min(( int(6.0) + divInt(max(int(4.0), in2),int(0.0)) ), abs(abs(int(2.0)))) ), min(res0, int(9.0))), mod(abs(( res0 + ( abs(int(2.0)) + in2 ) )),int(1.0)))),i0))) * i2 ), int(3.0))) - i1 )), abs(max(int(7.0), max(( ( min(mod(in2,int(0.0)), mod(res0,abs(max(( int(9.0) + divInt(int(5.0),int(7.0)) ), divInt(min(in0, min(min(( ( i0 - ( int(3.0) - int(9.0) ) ) - max(int(1.0), i1) ), max(( res0 + int(9.0) ), res0)), ( min(int(1.0), int(4.0)) - int(7.0) ))),int(3.0)))))) - int(9.0) ) + ( ( abs(max(abs(abs(( min(int(4.0), min(mod(in0,int(3.0)), i1)) - divInt(i1,min(int(7.0), int(1.0))) ))), int(6.0))) - in1 ) * in2 ) ), i0))))),in2))):{:\\nb2 = in0 != int(2.0)\\n:}else:{:\\nb1 = not ( int(1.0) - ( ( int(9.0) + abs(int(9.0)) ) - int(0.0) ) ) \\l int(2.0)\\n:}\\n:}else:{:\\nb2 = abs(divInt(( int(9.0) + in2 ),( int(8.0) - ( mod(in0,int(1.0)) * in1 ) ))) \\g max(int(7.0), int(4.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 4, 7, 64, 64, 7, 6, 0, 10, 7, 3, 1, 4, 44, 2, 210, 54, 51, 34, 21]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [2, 0, 8], [], [], [], [], [], [], [], [], [1, 3], [1], [2, 3, 1, 0, 3, 1, 1], [1], [1, 0], [2], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= divInt(max(int(2.0), in0),min(int(0.0), int(8.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 7, 1, 2, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 1, 1, 1, 0, 2, 2, 0, 2, 1, 2, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 5, 5, 8, 6, 2, 8, 3, 0, 8, 6, 9, 4, 6, 6, 8, 7, 8, 9, 4, 9, 7, 3, 3, 1, 8, 0, 1, 0, 0, 5, 3, 4, 2, 7, 3, 5, 3, 6, 4, 4, 9, 3, 6, 3, 4, 3, 2, 6, 8, 1, 1, 1, 3, 9, 1, 3, 1, 0, 5, 3, 2, 8, 4, 4, 3], [3, 3, 2, 4, 1, 4, 1, 5, 2, 4, 1, 1], [0, 1, 0, 1, 2, 0, 2, 0, 1, 0], [0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 1, 2, 0, 2, 0, 3, 0, 2, 2, 3, 1], [0, 1], [1, 0, 1, 0, 1, 0], [0, 4, 2, 6, 6, 0, 0, 2, 4, 0, 0, 0, 3, 5, 0, 3, 5, 3, 6, 0, 6, 6, 5, 1, 6, 4, 1, 5, 3, 5, 0, 4, 4, 6, 3, 2, 5, 5, 3, 1, 0, 3, 2, 6, 0, 4, 4, 2, 5, 0, 3, 0, 0, 3, 0, 0, 4, 2, 5, 6, 3, 4, 0, 2, 6, 4, 3, 3, 1, 3, 6, 2, 6, 6], [0, 1, 0, 1, 1, 1, 0], [3, 1, 0, 2, 3, 3, 3, 1, 1, 3, 0, 0, 0, 0, 2, 0, 1, 2, 1, 2, 1, 3, 0, 0, 3, 1, 2, 1, 0, 0, 3, 2, 3, 0, 0, 1, 0, 1, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 1, 3, 1, 0, 0, 2, 1, 2, 2, 1, 0, 0, 1, 0, 2, 3, 1, 3, 3, 2, 2, 1, 2, 3, 3, 1, 1, 2, 2, 1, 0, 1, 2, 3, 3, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 2, 3, 2, 0, 1, 3, 0, 0, 2, 2, 3, 1, 0, 3, 2, 2, 3, 1, 0, 3, 0, 1, 2, 3, 1, 0, 0, 2, 3, 0, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 3, 0, 0, 2, 3, 0, 3, 2, 0, 3, 1, 1, 3, 3, 0, 3, 2, 0, 0, 0, 3, 3, 2, 0, 2, 3, 0, 0, 1, 0, 2, 0, 2, 0, 3, 0, 1, 3, 2, 3, 2, 0, 1, 3, 3, 1, 1, 0, 2, 1, 0, 3, 3, 0, 0, 3, 2, 3, 1, 3, 1, 3, 3, 3, 0, 3, 2, 1, 0, 0, 1, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 3, 2, 1, 1, 1, 3, 2, 3, 2, 2, 0, 3, 1, 2, 1, 1, 3, 1, 2, 2, 2, 1, 2, 0, 0, 3, 1, 0, 3, 3, 3, 3, 2, 1, 1, 3, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 1, 0, 2, 1, 0, 2, 2, 2, 1, 1, 1, 2, 2, 1, 0, 0, 1, 1, 2, 2, 1, 0, 2, 1, 1, 0, 2, 0, 2, 2, 1, 2, 0, 0, 2], [0, 1, 2, 0, 1, 1, 1, 0, 1, 1, 2, 0, 0, 0, 1, 2, 1, 1, 0, 1, 2, 1, 1, 0, 2, 0, 2, 0, 1, 2, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = abs(int(0.0))\\nb0 = in1 \\ge ( min(max(max(int(5.0), int(5.0)), min(i2, res0)), res0) + i0 )\\nif not not b1:{:\\nloopBreak% = 0\\nwhile b0:{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif not b2:{:\\nloopBreak% = 0\\nwhile not mod(i0,int(8.0)) \\ge mod(int(6.0),divInt(int(2.0),max(i2, in1))):{:\\nloopBreak% = 0\\nwhile min(int(8.0), ( int(3.0) - i0 )) == i0:{:\\nif b0:{:\\ni0 *= abs(mod(abs(in0),in2))\\n:}else:{:\\nloopBreak% = 0\\nwhile int(0.0) \\le i0:{:\\nloopBreak% = 0\\nwhile ( int(8.0) \\g in0 and b2 ):{:\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nb0 = not int(6.0) \\le mod(int(9.0),mod(res0,mod(int(4.0),( int(6.0) + min(int(6.0), i0) ))))\\nb1 = res0 \\g divInt(int(8.0),( ( int(7.0) - res0 ) - in2 ))\\nb0 = int(8.0) != i1\\nif divInt(max(int(9.0), max(max(mod(( int(4.0) - ( min(max(int(9.0), int(7.0)), divInt(( int(3.0) + res0 ),int(3.0))) - mod(abs(min(int(1.0), in1)),divInt(( i1 - abs(abs(abs(min(max(abs(in2), ( max(divInt(in0,int(8.0)), min(in2, i0)) * divInt(( min(int(0.0), in1) + min(mod(divInt(max(int(1.0), in1),max(res0, int(0.0))),divInt(min(int(0.0), in0),i2)), mod(min(in2, mod(abs(int(5.0)),mod(abs(int(3.0)),mod(( int(4.0) + int(2.0) ),min(in2, in0))))),( max(i1, min(mod(i0,abs(int(7.0))), int(3.0))) + max(min(in0, abs(mod(i2,res0))), i0) ))) ),abs(abs(divInt(in1,( max(in1, i2) - int(5.0) ))))) )), in2)))) ),( i0 * divInt(in0,max(i0, int(3.0))) ))) ) ),max(( abs(( i0 - int(6.0) )) - abs(max(int(4.0), int(4.0))) ), in0)), ( int(9.0) + i0 )), min(min(i0, in1), max(( max(int(3.0), abs(int(6.0))) - abs(max(min(i2, abs(( int(3.0) * in2 ))), res0)) ), int(4.0))))),in0) == max(in1, int(3.0)):{:\\nloopBreak% = 0\\nwhile i0 \\le i2:{:\\nres0 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not ( int(6.0) \\g int(8.0) and int(1.0) \\g max(mod(int(1.0),int(1.0)), int(3.0)) ):{:\\nin1 -= min(( abs(divInt(( in0 + min(int(9.0), ( int(1.0) * int(3.0) )) ),abs(int(1.0)))) + ( ( ( int(0.0) * mod(in0,i1) ) + abs(int(5.0)) ) - in0 ) ), max(abs(min(min(( int(3.0) * int(2.0) ), abs(int(8.0))), res0)), i2))\\n:}else:{:\\nif False:{:\\nres0 += int(4.0)\\n:}\\n:}\\n:}\\nres0 = int(43.0)\\n", "other_info": {}, "test_fitness": 998, "mapping_values": [1, 24, 24, 12, 12, 66, 66, 12, 10, 2, 27, 12, 15, 2, 6, 74, 7, 257, 56, 69, 31, 29]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 2], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 1, 1], [1], [1, 1, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 7, 2, 5, 5, 9, 7, 0, 7, 8, 6, 7, 9, 9, 3, 0, 4, 1, 3, 4, 0, 3, 1, 5, 1, 5, 9, 0, 7, 5, 0, 7, 0, 6, 8, 0, 2, 7, 9, 9, 1, 5, 9, 3, 0, 5, 7, 7, 8], [5], [], [], [1], [0], [], [], [], [4, 4, 6, 4, 1, 4, 1, 1, 5, 3, 3, 3, 0, 0, 5, 1, 0, 5, 6, 4, 3, 2, 0, 2, 3, 5, 3, 4, 5, 3, 3, 5, 0, 1, 1, 0, 6, 6, 4, 3, 1, 4, 2, 4, 4, 6, 3], [1, 1, 1], [1, 1, 3, 2, 1, 2, 2, 2, 3, 2, 0, 3, 2, 2, 3, 0, 0, 1, 2, 0, 0, 0, 1, 3, 1, 3, 0, 1, 2, 0, 2, 3, 3, 1, 2, 3, 2, 1, 3, 0, 0, 0, 1, 1, 3, 2, 1, 0, 1, 3, 2, 3, 1, 0, 0, 2, 3, 2, 0, 0, 3, 2, 0, 3, 1, 2, 2, 0, 1, 2, 2, 2, 1, 3, 0, 2, 2, 2, 3, 2, 3, 3, 3, 1, 0, 3, 1, 3, 1, 0, 3, 0, 3, 1, 2, 3, 3, 0, 2, 3, 3, 0, 2, 0, 1, 2, 3, 2, 2, 2, 1, 1, 3, 3, 2, 3, 3, 2, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 0, 1, 3, 0, 2, 0, 1, 2, 0, 1, 2, 3, 2, 1, 0, 1, 0, 3, 1, 1, 1, 2, 3, 2, 3, 1, 1, 3, 1, 1, 3, 3, 1, 1, 1, 3, 0, 0, 0, 3, 0, 1, 2, 0, 2, 2, 2, 1, 0, 0, 3, 0, 2, 3, 3, 3, 1, 2, 0, 1, 3, 0, 3, 1, 3, 1, 1], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 2, 0, 1, 0, 1, 1, 0, 1, 2, 0, 1, 0, 0, 1, 1, 2, 0, 0, 0, 2, 1, 1, 0, 1, 1, 2, 0, 1, 0, 0, 2, 2, 2, 0, 2, 2, 1, 1, 2, 2, 0, 1, 1, 2, 2, 0, 1, 1, 1, 2, 2], [0, 2, 0, 1, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 2, 1, 1, 1, 0, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 74, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(26.0) != int(72.0):{:\\nin1 += min(( int(5.0) * ( divInt(mod(min(mod(in1,max(mod(divInt(abs(res0),in1),int(5.0)), ( i1 + in1 ))), i1),int(9.0)),min(int(7.0), max(i1, int(0.0)))) - ( in2 * divInt(min(max(int(7.0), divInt(max(( int(8.0) * min(in0, in0) ), in0),int(6.0))), int(7.0)),max(( int(9.0) - i0 ), int(9.0))) ) ) ), abs(mod(min(int(3.0), i0),in2)))\\ni1 -= ( max(( i0 * in2 ), min(( res0 - min(int(0.0), ( ( in1 + int(4.0) ) - ( ( mod(int(1.0),max(in0, mod(( mod(max(divInt(abs(min(min(int(3.0), i2), min(int(4.0), abs(int(0.0))))),i0), max(i2, max(int(3.0), mod(min(max(in0, ( max(abs(in2), ( in0 + int(1.0) )) + divInt(min(( divInt(mod(int(5.0),int(1.0)),max(min(( min(abs(( int(5.0) * abs(in1) )), divInt(mod(abs(int(9.0)),min(in2, in0)),in0)) - int(0.0) ), abs(in2)), mod(i0,int(7.0)))) - mod(i1,int(5.0)) ), divInt(abs(( int(0.0) - i1 )),int(7.0))),i0) )), max(int(0.0), int(6.0))),int(8.0))))),( max(divInt(abs(int(0.0)),int(2.0)), abs(int(7.0))) + int(9.0) )) + min(max(int(9.0), int(1.0)), int(5.0)) ),max(res0, res0)))) + in1 ) - abs(in0) ) )) ), int(9.0))) * divInt(i1,mod(mod(( int(3.0) + in1 ),i2),abs(in1))) )\\nin1 += mod(min(max(max(int(0.0), mod(res0,int(5.0))), max(in0, abs(int(7.0)))), abs(int(7.0))),int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 50, 50, 1, 0, 0, 1, 1, 0, 0, 0, 47, 3, 195, 49, 54, 25, 27]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 1], [1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 9, 4, 9, 3, 5, 5, 5, 4, 1, 3, 6, 0, 4, 3, 3, 8, 7, 3, 2, 8, 5, 0, 8, 2, 4, 2, 7, 9, 6, 5, 8, 3, 7, 0, 9, 9, 6, 4, 2, 4, 0, 1, 6, 1, 2, 6, 0, 7, 9, 7, 2, 1, 8, 4, 5, 2, 4, 7, 7, 0, 2, 7], [2, 2, 4, 4, 3, 2, 4, 4, 4, 2, 3, 5], [0, 2, 2, 0, 1, 2, 0, 1, 1, 0], [1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 0, 3, 0], [], [0, 0], [5, 1, 2, 5, 4, 3, 3, 0, 2, 1, 1, 6, 1, 3, 1, 6, 5, 4, 4, 0, 4, 6, 3, 3, 2, 4, 3, 3, 3, 5, 2, 0, 2, 1, 1, 2, 0, 1, 4, 0, 6, 5, 1, 4, 1, 2, 6, 1, 4, 6], [1], [1, 2, 3, 2, 2, 3, 0, 2, 0, 0, 1, 3, 1, 2, 2, 0, 1, 3, 2, 1, 1, 0, 2, 3, 1, 1, 3, 3, 2, 2, 0, 2, 0, 1, 1, 2, 2, 0, 2, 1, 3, 3, 2, 1, 1, 1, 0, 1, 1, 1, 3, 3, 0, 3, 0, 3, 1, 0, 1, 3, 0, 2, 1, 3, 2, 2, 1, 1, 1, 3, 0, 2, 3, 3, 2, 1, 1, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0, 1, 0, 0, 3, 2, 2, 1, 0, 0, 1, 3, 2, 2, 1, 3, 1, 3, 3, 2, 1, 0, 1, 2, 1, 3, 0, 0, 3, 3, 0, 3, 3, 1, 0, 2, 3, 0, 2, 1, 3, 3, 3, 2, 2, 1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 0, 0, 2, 1, 1, 1, 3, 2, 0, 2, 1, 2, 3, 1, 2, 1, 2, 3, 0, 3, 1, 2, 3, 2, 1, 2, 1, 1, 0, 1, 2, 0, 3, 1, 0, 2, 2, 0, 2, 3, 3, 0, 2, 3, 3, 2, 0, 0, 1, 2, 3, 3, 1, 0, 1, 3, 0, 0, 1, 2, 1, 0, 0, 2, 2, 2, 3, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 2, 1, 1, 1, 0, 2, 2, 0, 1, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 2, 1, 2, 2, 2, 2, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 0, 2, 1, 1, 2], [1, 1, 2, 2, 1, 1, 1, 0, 0, 2, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(8.0) == mod(min(( mod(max(in2, ( i1 - i2 )),int(5.0)) - max(int(9.0), mod(divInt(in2,int(4.0)),min(mod(int(9.0),int(3.0)), in1))) ), mod(abs(int(5.0)),int(5.0))),max(max(divInt(divInt(in0,mod(in0,int(5.0))),int(4.0)), mod(( i0 * divInt(int(1.0),max(min(mod(int(3.0),int(6.0)), int(0.0)), i2)) ),int(4.0))), int(3.0))):{:\\nb0 = int(3.0) == abs(abs(i1))\\nif b2:{:\\nloopBreak% = 0\\nwhile ( min(i1, max(int(8.0), res0)) \\le int(7.0) or min(i1, mod(int(3.0),max(divInt(mod(int(2.0),int(8.0)),int(5.0)), min(in0, divInt(abs(abs(( int(0.0) * int(8.0) ))),int(2.0)))))) \\le ( divInt(int(4.0),( i1 - res0 )) - in2 ) ):{:\\nb2 = not in1 \\ge in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b0:{:\\ni0 -= int(2.0)\\nb1 = int(7.0) == ( ( int(9.0) + in1 ) + int(6.0) )\\nb2 = res0 \\le in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile max(divInt(( int(5.0) * in0 ),i2), int(8.0)) \\le min(mod(divInt(int(3.0),abs(int(7.0))),min(max(( int(0.0) * in1 ), int(9.0)), mod(int(9.0),abs(in0)))), in0):{:\\nb0 = max(abs(in0), abs(abs(int(6.0)))) \\le in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( ( abs(i2) * ( int(4.0) * min(max(abs(divInt(divInt(int(2.0),int(4.0)),divInt(int(0.0),i0))), mod(mod(int(1.0),mod(int(6.0),i2)),i1)), mod(int(1.0),int(2.0))) ) ) == int(6.0) or b1 ):{:\\nb1 = abs(divInt(i1,divInt(int(0.0),divInt(max(int(7.0), ( int(9.0) + ( min(i2, min(int(7.0), ( abs(divInt(int(2.0),divInt(int(1.0),int(8.0)))) - i0 ))) - int(4.0) ) )),( i1 * abs(int(5.0)) ))))) \\ge in1\\nb0 = mod(mod(i0,divInt(max(min(res0, ( min(min(divInt(in2,i1), int(2.0)), ( abs(max(int(4.0), in1)) - int(7.0) )) - max(i1, i2) )), int(7.0)),divInt(int(0.0),res0))),i1) != ( ( ( abs(int(2.0)) - in1 ) - int(7.0) ) + res0 )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 64, 64, 12, 10, 2, 18, 12, 6, 0, 2, 50, 1, 218, 59, 46, 22, 38]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1], [4, 2], [1, 0], [1], [0], [1, 0, 0, 1], [0, 0], [3, 1], [0], [], [3, 2, 6], [], [1, 2, 3, 0, 1, 0, 0], [1], [2], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(4.0) \\g mod(abs(in0),int(2.0)):{:\\nb1 = ( True and i2 \\l res0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 4, 2, 2, 1, 0, 3, 0, 7, 1, 1, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1], [5, 0, 9, 9, 6, 4, 9], [], [], [], [], [], [], [], [], [1, 5, 4, 5, 5], [1], [2, 2, 3, 0, 2, 0, 3, 3, 1, 3, 3, 3, 1, 1, 2, 0, 2, 0, 3, 1, 1, 3, 1, 1], [0, 1, 0, 1, 1], [1, 0, 1, 0, 2, 2, 2, 1], [1, 0, 1], [0, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= ( divInt(max(in2, ( in1 + min(max(int(5.0), min(abs(abs(int(0.0))), int(9.0))), mod(in2,divInt(in2,abs(int(9.0))))) )),int(6.0)) - max(int(4.0), int(9.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 24, 5, 8, 3, 3]}, {"genotype": [[0], [1], [1], [], [1], [1], [8], [], [], [], [], [], [], [], [], [4, 0, 1], [0], [2, 0, 2, 0, 1], [0, 1], [], [2], [1]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( i0 * mod(i1,int(8.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 2, 0, 1, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 9, 4, 0, 8, 1, 7], [1], [2], [], [1], [0], [], [], [], [1, 4, 1, 2, 2, 6, 3, 6, 6, 0, 2, 2, 3, 4, 0], [], [3, 2, 1, 3, 0, 2, 3, 2, 1, 2, 2, 3, 1, 3, 2, 0, 3, 3, 0, 1, 0, 0, 2, 1, 0, 3, 0, 2, 0, 2, 2, 3, 0, 2, 0, 0, 3, 0, 1, 2, 0, 3, 2, 1, 1, 3, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 2, 1, 2, 2, 1, 0, 0, 2], [0, 2, 2, 2, 0, 1], [0, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(divInt(int(5.0),max(i1, ( max(mod(int(1.0),divInt(( max(int(9.0), abs(( in1 + max(abs(i1), int(4.0)) ))) * i2 ),i2)), divInt(int(0.0),res0)) * abs(in0) ))), divInt(res0,( ( max(res0, ( i0 * i2 )) + min(i2, int(8.0)) ) - divInt(in0,min(mod(int(1.0),int(7.0)), abs(in1))) ))) \\g i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 8, 8, 1, 1, 0, 1, 1, 0, 0, 0, 15, 0, 48, 13, 12, 6, 7]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 0, 1], [1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 4, 7, 9, 2, 0, 8, 8, 4, 7, 8, 0, 5, 5, 1, 9, 9, 6, 8, 2, 2, 7, 0, 1, 6, 7, 8, 5, 0, 7, 5, 1, 5, 6, 3, 2, 4, 1, 4, 0, 7, 2, 6, 8, 2, 9, 2, 7, 8, 5, 1, 4, 1, 6, 9, 2, 8, 9, 5, 4, 7, 9, 4, 5, 5, 5, 7, 1, 6, 1, 7, 6, 1, 0, 0, 1, 7, 9, 8, 4, 4, 0, 1, 3, 5, 3, 0, 9, 6, 7, 5, 8, 0, 8, 4, 6, 8, 8, 7, 5, 8, 4, 6, 6, 1, 5, 8, 8, 7, 3, 8, 4, 8, 7, 3, 6, 7, 9, 9, 2, 2, 4, 8, 4, 2, 0, 1, 7, 4, 1, 6, 3, 0, 8, 8, 4, 0, 6, 8, 5, 6, 8, 4, 1, 1, 4, 3, 1, 4, 6, 7, 9, 5, 0, 7, 5, 0, 9, 7, 3, 9, 8, 6, 6, 6, 6, 4, 2, 6, 9, 5, 4, 5, 7, 8, 6, 3, 6, 4, 5, 3, 8, 6, 1, 9, 8, 6, 7, 3, 8, 2, 6, 3, 7, 2, 0, 6, 9, 5, 0, 5, 4, 0, 3, 5, 5, 8, 8, 2, 1, 3, 4, 1, 4, 6, 1, 2, 2, 4, 8, 0, 8, 9, 0, 0, 2, 5, 8, 9, 7, 0, 7, 1, 4, 0, 6, 3, 6, 8, 4, 7, 2, 5, 4, 7, 3, 7, 2, 0, 8, 6, 6, 4, 2, 2, 9, 1, 4, 2, 8, 9, 9], [5, 0, 3, 3, 5, 4, 3, 0, 3, 5], [2, 2, 0, 0, 2], [0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 3, 2, 0], [0], [1], [6, 6, 4, 3, 0, 2, 5, 4, 1, 3, 3, 1, 5, 5, 0, 5, 4, 5, 2, 4, 4, 6, 6, 5, 5, 6, 6, 4, 3, 3, 4, 5, 0, 0, 6, 1, 4, 5, 3, 2, 3, 2, 6, 1, 1, 3, 3, 6, 5, 1, 5, 2, 0, 2, 5, 4, 4, 0, 2, 6, 4, 5, 2, 1, 6, 6, 5, 1, 6, 5, 4, 4, 5, 2, 3, 5, 1, 1, 4, 0, 4, 1, 0, 5, 6, 5, 0, 5, 4, 6, 3, 6, 0, 2, 0, 2, 5, 2, 5, 0, 4, 5, 0, 1, 3, 0, 6, 4, 3, 2, 2, 2, 3, 3, 1, 0, 4, 6, 6, 3, 0, 1, 0, 2, 0, 5, 6, 3, 5, 0, 3, 0, 4, 3, 3, 6, 5, 0, 2, 5, 5, 4, 3, 2, 6, 2, 1, 3, 1, 5, 6, 4, 4, 2, 6, 4, 6, 6, 3, 5, 3, 6, 1, 6, 6, 6, 2, 4, 4, 3, 5, 2, 6, 2, 5, 3, 0, 1, 6, 4, 0, 2, 5, 0, 6, 6, 6, 0, 6, 6, 1, 3, 0, 0, 3, 5, 6, 5, 5, 6, 1, 4, 6, 0, 6, 4, 1, 2, 0, 6, 3, 1, 4, 2, 2, 4, 2, 1, 6, 6, 1, 4, 5, 2, 3, 4, 4, 0, 3, 6, 4, 1, 5, 0, 1, 0, 6, 0, 0, 4, 6, 2, 2, 2, 2, 1, 0, 0, 4, 4, 2, 3, 6, 5, 5, 5, 2, 6, 4, 4, 4, 4, 1, 6, 2, 2, 5, 2, 0, 0, 6, 5, 6, 0, 4, 2, 4, 6, 4, 3, 2, 2, 3, 1, 1, 5, 0, 6, 6, 2, 2, 3, 0, 5, 2], [1, 0, 0, 0, 0, 1], [1, 3, 3, 2, 1, 3, 2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 0, 0, 0, 1, 3, 1, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 2, 2, 2, 3, 3, 2, 3, 1, 1, 1, 2, 2, 2, 3, 1, 0, 3, 1, 2, 0, 0, 3, 2, 3, 0, 2, 0, 1, 0, 1, 3, 0, 1, 0, 2, 2, 0, 3, 1, 2, 2, 2, 3, 2, 3, 3, 0, 3, 2, 3, 0, 2, 2, 1, 0, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 2, 0, 0, 3, 0, 1, 1, 2, 2, 1, 3, 1, 0, 2, 0, 0, 1, 1, 2, 2, 3, 1, 1, 3, 2, 2, 3, 1, 3, 3, 3, 3, 2, 2, 3, 3, 2, 0, 0, 1, 2, 2, 2, 2, 3, 2, 3, 3, 3, 1, 0, 2, 2, 3, 2, 0, 2, 1, 0, 0, 3, 0, 3, 2, 1, 1, 1, 0, 1, 3, 2, 3, 2, 3, 2, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 2, 1, 0, 0, 0, 3, 1, 2, 2, 3, 1, 2, 2, 3, 2, 1, 3, 3, 2, 3, 3, 1, 3, 1, 0, 2, 0, 1, 2, 1, 0, 3, 0, 2, 3, 0, 2, 1, 2, 3, 0, 0, 3, 2, 0, 2, 3, 1, 0, 1, 0, 1, 1, 3, 1, 2, 1, 3, 2, 1, 2, 1, 3, 0, 0, 3, 1, 2, 0, 1, 0, 3, 2, 2, 3, 3, 2, 3, 0, 0, 3, 1, 3, 3, 2, 3, 2, 2, 3, 3, 1, 2, 3, 1, 1, 3, 0, 0, 3, 1, 2, 1, 0, 2, 3, 1, 2, 0, 0, 2, 2, 1, 3, 0, 3, 1, 0, 1, 3, 0, 2, 0, 1, 2, 3, 1, 3, 0, 1, 2, 1, 0, 1, 3, 3, 2, 0, 0, 3, 3, 3, 1, 2, 0, 3, 1, 3, 2, 1, 0, 0, 2, 3, 2, 0, 0, 2, 3, 2, 3, 1, 2, 3, 0, 0, 3, 2, 2, 2, 3, 1, 3, 3, 2, 3, 2, 0, 2, 2, 1, 1, 1, 1, 0, 3, 3, 0, 0, 2, 2, 3, 2, 1, 3, 3, 2, 3, 3, 1, 2, 0, 0, 0, 1, 0, 3, 3, 2, 2, 3, 1, 3, 3, 2, 3, 3, 1, 0, 3, 3, 0, 2, 1, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 2, 2, 3, 0, 1, 1, 2, 0, 3, 3, 0, 1, 0, 0, 1, 0, 2, 2, 3, 2, 3, 3, 2, 2, 2, 0, 3, 0, 0, 0, 2, 1, 0, 2, 3, 1, 3, 1, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 1, 2, 3, 2, 3, 3, 1, 0, 2, 2, 2, 0, 1, 2, 1, 1, 3, 0, 0, 0, 1, 3, 0, 2, 2, 1, 2, 3, 1, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 0, 2, 0, 2, 3, 3, 1, 0, 0, 1, 1, 0, 1, 3, 2, 2, 3, 3, 3, 0, 0, 1, 0, 3, 1, 3, 3, 0, 0, 2, 1, 1, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 2, 0, 3, 2, 3, 2, 3, 2, 0, 2, 3, 1, 3, 3, 1, 1, 3, 3, 0, 1, 0, 0, 1, 2, 2, 1, 0, 0, 3, 2, 3, 0, 3, 3, 1, 1, 0, 1, 1, 0, 1, 0, 2, 0, 3, 0, 3, 3, 3, 3, 0, 3, 2, 2, 3, 3, 2, 0, 3, 3, 3, 2, 2, 0, 2, 3, 2, 0, 0, 3, 3, 1, 2, 1, 2, 2, 2, 2, 3, 3, 0, 2, 3, 2, 0, 2, 0, 3, 2, 2, 2, 0, 3, 1, 0, 3, 1, 1, 1, 0, 3, 3, 0, 0, 3, 0, 0, 2, 0, 3, 3, 2, 1, 2, 3, 2, 3, 0, 2, 0, 1, 0, 3, 0, 2, 0, 3, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 2, 3, 1, 2, 0, 1, 1, 2, 3, 1, 2, 2, 0, 3, 1, 2, 1, 3, 2, 3, 2, 0, 2, 1, 1, 2, 3, 3, 2, 0, 2, 2, 2, 0, 1, 2, 2, 3, 1, 2, 2, 0, 0, 3, 2, 3, 0, 3, 0, 2, 3, 0, 3, 0, 2, 0, 3, 2, 1, 2, 1, 0, 0, 2, 2, 0, 3, 1, 0, 2, 2, 3, 3, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 3, 0, 1, 3, 0, 3, 3, 1, 1, 0, 1, 1, 2, 3, 0, 2, 1, 0, 1, 0, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 3, 3, 3, 0, 3, 3, 3, 1, 1, 1, 3, 2, 3, 1, 1, 1, 1, 0, 0, 2, 2, 2, 1, 1, 2, 2, 2, 3, 1, 3, 3, 1, 0, 2, 1, 2, 2, 3, 1, 1, 3, 0, 0, 2, 3, 0, 2, 0, 1, 2, 3, 3, 1, 2, 2, 1, 3, 1, 3, 0, 3, 2, 3, 2, 1, 2, 2, 2, 1, 0, 1, 1, 1, 3, 1, 0, 1, 3, 1, 0, 2, 3, 0, 0, 3, 1, 3, 3, 3, 0, 1, 0, 2, 3, 0, 2, 0, 3, 1, 2, 0, 1, 0, 0, 1, 3, 1, 2, 3, 1, 0, 2, 0, 0, 3, 1, 3, 0, 3, 2, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 2, 0, 3, 0, 1, 3, 1, 3, 2, 1, 1, 0, 2, 1, 1, 0, 1, 2, 2, 2, 0, 1, 2, 0, 0, 1, 0, 2, 0, 2, 2, 0, 3, 3, 0, 0, 2, 3, 3, 3, 0, 3, 0, 1, 3, 0, 2, 3, 2, 0, 0, 0, 1, 3, 1, 2, 1, 2, 0, 3, 1, 2, 0, 1, 3, 2, 2, 2, 3, 0, 3, 2, 0, 1, 1, 0, 0, 0, 3, 3, 2, 3, 3, 3, 0, 0, 0, 3, 3, 1, 0, 0, 1, 1, 1, 1, 3, 0, 2, 2, 0, 1, 3, 1, 2, 0, 2, 3, 0, 0, 2, 1, 3, 1, 3, 1, 3, 2, 3, 3, 3, 3, 1, 2, 1, 3, 3, 2, 3, 1, 3, 1, 2, 0, 1, 2, 2, 0, 2, 3, 1, 1, 1, 3, 2, 2, 2, 1, 2, 3, 3, 0, 3, 2, 3, 0, 0, 2, 2, 3, 1, 0, 1, 3, 2, 0, 3, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 0, 3, 1, 3, 3, 0, 2, 1, 0, 3, 2, 3, 1, 0, 3, 1, 1, 0, 0, 3, 0, 1, 3, 0, 1, 2, 2, 2, 1, 1, 1, 3, 0, 3, 2, 1, 0, 1, 1, 1, 2, 1, 0, 0, 0, 3, 3, 3, 0, 2, 3, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [2, 2, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 1, 0, 1, 1, 2, 2, 2, 1, 1, 2, 2, 0, 0, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 0, 2, 0, 2, 0, 2, 1, 1, 1, 2, 0, 0, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 1, 1, 2, 1, 0, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 0, 2, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 2, 1, 2, 0, 0, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 2, 2, 0, 0, 2, 2, 2, 1, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 0, 1, 2, 0, 0, 2, 2, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 2, 1, 0, 0, 1, 0, 1, 0, 0, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 2, 1, 2, 0, 1, 2, 1, 0, 2, 1, 2, 2, 0, 2, 0, 2, 1, 2, 2, 2, 0, 1, 0, 1, 2, 2, 1, 2, 0, 2, 1, 2, 2, 0, 2, 1, 2, 0, 2, 1, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 1, 2, 2, 1, 1, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1, 2, 0, 1, 0, 1, 0, 2], [0, 0, 2, 1, 1, 2, 2, 2, 2, 2, 0, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 1, 2, 2, 1, 1, 2, 2, 0, 2, 0, 2, 1, 0, 1, 0, 2, 2, 1, 0, 0, 1, 0, 1, 2, 0, 1, 0, 1, 1, 0, 2, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 2, 1, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 1, 2, 2, 0, 0, 0, 1, 2, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 2, 2, 0, 1, 2, 1, 1, 1, 0, 0, 2, 1, 2, 1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 2, 1, 0, 1, 0, 1, 0, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 1, 1, 1, 1, 2], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 151, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(0.0)\\nloopBreak% = 0\\nwhile abs(abs(mod(int(0.0),min(( res0 + in1 ), in0)))) != ( i0 * mod(( i2 - int(0.0) ),in2) ):{:\\nb2 = in1 \\l i1\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(4.0) \\ge max(int(7.0), ( divInt(in0,int(9.0)) - ( ( ( in0 * divInt(int(2.0),divInt(( ( max(max(( abs(int(0.0)) * int(8.0) ), int(8.0)), ( ( ( abs(int(4.0)) * i1 ) * abs(int(7.0)) ) * ( in2 + in2 ) )) * abs(( abs(i0) + mod(in2,int(8.0)) )) ) * in1 ),int(0.0))) ) - abs(in2) ) + int(5.0) ) )) and ( i2 \\ge ( mod(in1,max(int(5.0), mod(divInt(mod(min(( min(abs(in1), max(( max(res0, divInt(mod(int(1.0),res0),in2)) - ( in2 - int(9.0) ) ), int(9.0))) - int(6.0) ), ( int(8.0) * res0 )),( res0 - divInt(in1,in0) )),abs(in0)),int(2.0)))) + int(2.0) ) and ( divInt(mod(int(7.0),abs(int(0.0))),in1) != divInt(in2,i0) or int(1.0) \\le int(6.0) ) ) ):{:\\ni0 = ( ( max(int(7.0), int(8.0)) - min(( ( max(int(5.0), max(abs(abs(abs(( mod(max(max(divInt(res0,i1), int(0.0)), divInt(divInt(( ( abs(mod(abs(min(min(int(7.0), in1), mod(mod(abs(divInt(in2,( int(5.0) + in0 ))),i2),max(in0, max(( int(1.0) - int(5.0) ), int(6.0)))))),i2)) * int(3.0) ) * abs(( max(mod(abs(divInt(max(int(2.0), int(4.0)),int(1.0))),res0), ( int(4.0) - i1 )) - int(0.0) )) ),i1),mod(( int(7.0) * in0 ),in0))),res0) * max(int(2.0), ( ( max(int(6.0), mod(mod(max(( int(8.0) + max(min(mod(min(max(int(2.0), min(int(9.0), in2)), ( i1 * int(2.0) )),mod(int(7.0),in2)), abs(i2)), ( max(i0, ( int(8.0) + mod(min(i2, in2),min(divInt(in1,( max(int(5.0), in1) * int(1.0) )), i0)) )) - int(4.0) )) ), int(1.0)),abs(int(6.0))),( int(9.0) + min(( int(2.0) - mod(int(8.0),min(i2, res0)) ), abs(int(9.0))) ))) + ( in1 * int(5.0) ) ) * in2 )) )))), min(( divInt(abs(min(mod(abs(i2),i1), max(int(4.0), max(max(( abs(( ( min(min(int(7.0), ( max(int(9.0), int(4.0)) - abs(res0) )), res0) + abs(int(5.0)) ) + mod(int(5.0),in2) )) - ( min(int(5.0), ( i1 + res0 )) - ( mod(int(7.0),max(in2, abs(int(1.0)))) * in1 ) ) ), int(6.0)), abs(in1))))),divInt(in2,int(1.0))) + mod(min(int(7.0), abs(i2)),int(6.0)) ), ( int(1.0) - in0 )))) + int(0.0) ) - min(max(divInt(in2,i1), min(min(min(int(0.0), divInt(i1,max(int(1.0), max(divInt(int(7.0),in1), i0)))), divInt(max(mod(in1,i1), ( abs(( max(int(9.0), mod(min(i0, in2),max(( mod(mod(abs(int(8.0)),min(abs(( max(mod(res0,divInt(mod(int(4.0),int(4.0)),int(0.0))), int(1.0)) - in2 )), abs(max(i0, in2)))),( divInt(max(mod(int(3.0),abs(max(( abs(abs(int(5.0))) + ( in1 * res0 ) ), in0))), int(3.0)),res0) + max(max(( ( min(int(0.0), abs(min(( min(min(int(9.0), i0), min(min(i2, ( int(6.0) * divInt(i0,( int(7.0) + mod(( mod(i2,in2) - int(5.0) ),mod(( min(i2, int(8.0)) - int(0.0) ),mod(in2,abs(min(i0, int(8.0)))))) )) )), in1)) * in2 ), int(4.0)))) + i0 ) - ( divInt(abs(( min(abs(mod(( ( i1 * max(in0, i0) ) + res0 ),( int(6.0) * in1 ))), mod(abs(int(8.0)),max(int(8.0), int(7.0)))) - mod(int(5.0),( abs(divInt(int(8.0),( min(mod(in0,i2), divInt(i2,i2)) + in0 ))) + ( in0 + i1 ) )) )),divInt(int(4.0),( abs(( min(min(int(6.0), i0), mod(( ( in1 + int(6.0) ) * ( int(1.0) - int(5.0) ) ),min(res0, res0))) * in0 )) - int(8.0) ))) + min(i0, ( ( int(8.0) * ( min(int(7.0), max(mod(i1,i0), ( ( min(divInt(i2,i0), ( ( max(( in2 - res0 ), in0) - ( in2 - divInt(min(min(int(3.0), i0), in0),int(8.0)) ) ) * int(4.0) )) - i0 ) - int(8.0) ))) - min(mod(( max(abs(abs(in1)), in0) + int(7.0) ),in0), abs(int(3.0))) ) ) * max(abs(res0), in2) )) ) ), mod(int(6.0),int(7.0))), divInt(( min(( min(divInt(i0,min(i2, int(9.0))), ( in2 + ( in2 - int(9.0) ) )) - ( ( in1 - ( in0 - abs(( min(mod(min(mod(i2,mod(abs(int(2.0)),max(abs(int(2.0)), int(4.0)))), max(min(res0, int(8.0)), i2)),i1), int(4.0)) - divInt(( int(2.0) + in0 ),i1) )) ) ) + max(mod(abs(in2),max(max(int(0.0), int(1.0)), res0)), int(7.0)) ) ), int(4.0)) - in1 ),int(1.0))) )) + in1 ), divInt(i2,abs(res0))))) + max(max(max(abs(in1), max(mod(( min(max(divInt(res0,abs(abs(min(mod(divInt(res0,divInt(min(( in0 * in2 ), abs(abs(int(6.0)))),( int(3.0) - ( ( ( divInt(abs(max(in0, ( abs(( res0 - ( i1 * min(( ( mod(res0,min(int(0.0), res0)) + abs(int(8.0)) ) - int(8.0) ), int(4.0)) ) )) * res0 ))),max(min(i2, in1), max(in1, in0))) * ( in2 + max(min(divInt(int(0.0),mod(abs(( abs(i2) + divInt(res0,int(6.0)) )),i2)), min(in2, ( in0 + max(( mod(i0,( ( int(8.0) - i1 ) * ( int(5.0) * divInt(mod(abs(int(6.0)),mod(res0,int(8.0))),int(4.0)) ) )) - ( min(int(1.0), ( divInt(in1,min(int(1.0), ( int(4.0) - abs(( abs(mod(i0,( int(3.0) + int(1.0) ))) + mod(min(max(( i2 + ( mod(( in2 * int(4.0) ),( mod(min(int(6.0), ( ( i0 * res0 ) - abs(mod(min(res0, min(res0, ( min(i0, min(res0, ( res0 - abs(( int(7.0) * ( int(9.0) + i1 ) )) ))) - in0 ))),( ( i0 * min(int(5.0), i0) ) * mod(divInt(max(abs(int(0.0)), in0),max(abs(( int(7.0) + in2 )), int(5.0))),int(0.0)) ))) )),res0) - min(in2, int(9.0)) )) * min(in2, min(abs(int(7.0)), int(3.0))) ) ), res0), int(9.0)),int(8.0)) )) ))) - mod(max(i1, ( int(6.0) - in1 )),int(6.0)) )) - res0 ) ), i0) ))), int(6.0)) ) ) + divInt(int(6.0),( ( divInt(mod(mod(int(4.0),min(min(min(res0, min(max(abs(int(2.0)), int(6.0)), int(9.0))), max(mod(min(int(5.0), int(4.0)),int(5.0)), int(7.0))), in1)),i1),( ( ( int(8.0) + int(6.0) ) * ( ( divInt(min(int(3.0), max(min(int(6.0), i2), ( int(4.0) - mod(( max(int(5.0), int(3.0)) * min(i0, res0) ),mod(min(in0, ( i1 - int(8.0) )),divInt(abs(min(int(6.0), mod(( int(1.0) * max(int(9.0), max(in1, abs(( max(divInt(int(8.0),divInt(divInt(( int(6.0) - i2 ),int(7.0)),int(3.0))), int(8.0)) * min(int(2.0), i2) )))) ),int(6.0)))),min(int(3.0), in1)))) ))),( min(i2, i1) + abs(int(7.0)) )) - abs(max(abs(res0), int(2.0))) ) + res0 ) ) * ( min(i1, ( in1 - max(int(0.0), divInt(in2,int(6.0))) )) - i2 ) )) * in0 ) + int(9.0) )) ) + abs(int(5.0)) ) ))),( max(int(0.0), in1) * divInt(in1,i0) )), min(int(5.0), abs(in0)))))), max(mod(int(4.0),abs(res0)), int(0.0))), in1) - abs(int(3.0)) ),( ( min(( i1 + abs(in2) ), int(5.0)) - min(int(5.0), abs(( int(8.0) + int(8.0) ))) ) - i0 )), ( int(2.0) + int(1.0) ))), i1), int(3.0)) )) + mod(( ( i0 * int(4.0) ) - ( res0 * i0 ) ),int(1.0)) )),i0)), ( in1 + divInt(mod(res0,max(abs(i2), i2)),( abs(abs(min(i2, max(i2, int(4.0))))) - min(i1, ( max(mod(i0,i0), in1) - int(6.0) )) )) ))), abs(int(1.0))) ), mod(int(2.0),( in1 - abs(int(2.0)) ))) ) * divInt(i2,int(4.0)) )\\nb0 = not max(( mod(mod(abs(in0),min(( res0 + int(8.0) ), int(0.0))),in2) + in2 ), in2) \\ge abs(max(( abs(abs(min(i2, res0))) + in1 ), abs(max(int(8.0), in1))))\\nloopBreak% = 0\\nwhile in1 \\l int(9.0):{:\\nb0 = int(0.0) \\ge int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = int(2.0)\\nloopBreak% = 0\\nwhile abs(i1) != mod(( res0 + int(5.0) ),min(int(8.0), ( i2 - mod(abs(i2),in2) ))):{:\\ni2 = ( int(9.0) * max(int(7.0), min(int(0.0), max(divInt(min(min(max(min(int(7.0), ( int(1.0) * abs(max(mod(min(int(4.0), min(int(0.0), divInt(i0,int(6.0)))),( divInt(i0,divInt(max(int(3.0), int(6.0)),int(8.0))) + abs(( divInt(divInt(int(4.0),( abs(max(res0, max(( min(in2, res0) + mod(( max(int(7.0), i0) + int(2.0) ),max(mod(in1,abs(( ( divInt(int(5.0),( ( i2 - divInt(int(4.0),int(7.0)) ) - in1 )) * abs(int(3.0)) ) * max(max(res0, mod(int(7.0),in1)), abs(( min(int(2.0), in0) + min(int(0.0), int(8.0)) ))) ))), i2)) ), i2))) - max(in0, int(6.0)) )),abs(i1)) * int(6.0) )) )), mod(( divInt(int(4.0),int(2.0)) - int(2.0) ),min(i1, max(( int(9.0) - in2 ), int(1.0)))))) )), int(4.0)), int(2.0)), ( int(8.0) - i0 )),res0), res0))) )\\nif b2:{:\\ni2 = min(max(min(i2, ( abs(in0) - i0 )), in2), int(9.0))\\n:}else:{:\\ni2 *= int(9.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 5, 10, 264, 264, 10, 5, 3, 16, 10, 6, 1, 1, 295, 6, 1183, 328, 302, 187, 143]}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 1], [], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 3, 1, 1, 3, 6, 8, 0, 3, 5, 2, 3, 4, 2, 6, 7, 9, 4, 2, 2, 9, 8, 8, 0, 2, 8, 3, 8, 7, 2, 6, 4, 4, 8, 9, 3, 1, 1, 8, 0], [], [], [], [], [], [], [], [], [3, 4, 1, 5, 0, 0, 2, 2, 3, 4, 3, 5, 1, 3, 5, 2, 4, 0, 3, 0, 2, 1, 3, 2, 1, 6, 2, 6, 0, 3, 5, 5, 0, 3, 1, 5, 4, 3, 2, 2, 5, 5, 0, 0, 6], [0, 0, 1, 0], [2, 0, 2, 3, 2, 1, 2, 1, 3, 3, 0, 3, 1, 2, 2, 1, 2, 0, 1, 3, 2, 1, 0, 3, 3, 1, 3, 2, 3, 1, 0, 2, 3, 3, 0, 0, 1, 3, 2, 2, 2, 3, 1, 1, 1, 0, 1, 0, 2, 0, 1, 0, 2, 1, 3, 1, 2, 2, 0, 2, 3, 2, 1, 3, 1, 2, 0, 0, 3, 0, 2, 2, 2, 3, 0, 1, 2, 3, 1, 3, 2, 2, 1, 2, 3, 0, 1, 3, 3, 3, 0, 2, 0, 2, 0, 3, 3, 1, 1, 1, 2, 0, 2, 1, 3, 2, 3, 0, 1, 0, 3, 3, 1, 0, 0, 1, 2, 3, 3, 3, 1, 0, 3, 3, 3, 3, 1, 1, 1, 1, 2, 3, 1, 2, 3, 3, 3, 1, 3, 3, 1, 3, 0, 2, 0, 3, 2, 0, 2, 0, 1, 0, 0, 2, 2, 3, 0, 3, 0, 3, 0, 1, 0, 3, 3, 3, 2, 3, 2, 1, 2, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 2, 1, 0, 1, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 2, 0, 2, 1, 2, 2, 2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0], [1, 1, 2, 1, 0, 2, 0, 2, 1, 2, 2, 0, 1, 2, 0, 0, 2, 0, 0, 2, 0, 2], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( in1 - ( max(( int(8.0) - ( int(7.0) * max(abs(i1), min(int(3.0), divInt(mod(int(1.0),mod(in2,int(1.0))),min(divInt(int(3.0),i0), min(min(int(6.0), min(( min(int(8.0), i0) - divInt(abs(max(i2, i2)),int(0.0)) ), min(( mod(( abs(int(3.0)) + int(5.0) ),int(2.0)) * in0 ), int(3.0)))), in1))))) ) ), mod(in0,int(4.0))) + in2 ) )\\ni1 = divInt(int(2.0),abs(int(6.0)))\\nin0 *= divInt(divInt(in2,( abs(( int(7.0) - abs(int(9.0)) )) * mod(i2,in1) )),max(i0, divInt(mod(( min(in0, int(4.0)) * divInt(max(int(2.0), max(( ( int(2.0) + mod(min(i0, int(9.0)),abs(min(max(i2, ( i1 - ( in0 * max(min(int(8.0), int(8.0)), int(0.0)) ) )), mod(i2,divInt(int(2.0),min(( min(i1, int(8.0)) + res0 ), min(min(int(3.0), i2), res0))))))) ) + int(8.0) ), mod(max(abs(abs(int(7.0))), i0),min(min(abs(min(int(2.0), int(6.0))), int(4.0)), int(4.0))))),( abs(int(8.0)) * mod(max(abs(abs(int(9.0))), abs(max(int(3.0), min(in0, ( in2 + abs(( in2 + mod(i0,int(1.0)) )) ))))),in0) )) ),i1),( ( abs(in2) * min(in1, min(in0, int(1.0))) ) + i2 ))))\\ni2 = min(abs(max(( min(mod(int(8.0),mod(in2,in2)), i0) * i0 ), res0)), int(0.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 45, 4, 177, 43, 52, 22, 22]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1], [5, 8, 4, 0, 4], [3], [1], [], [1], [0], [], [], [], [5, 6, 6, 5], [], [3, 2, 1, 2, 1, 0, 1, 2, 0, 2, 3, 3, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0], [0, 2, 1], [1, 0], [0, 1, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(divInt(int(5.0),mod(int(8.0),in2)), int(4.0)) \\ge ( res0 - divInt(abs(max(( int(0.0) + res0 ), int(4.0))),in2) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 17, 5, 3, 2, 3]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [8, 9, 7, 5, 5, 1, 8], [4], [0], [], [1], [0], [], [], [], [4, 2, 1, 1, 5, 4, 4, 2, 2, 5, 4, 2, 0, 6], [1, 0], [0, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 0, 0, 3, 1, 2, 0, 1, 1, 3, 3, 0, 0, 3, 3, 0, 2, 0, 2, 0, 3, 2, 3, 1, 2, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 2, 0, 2, 2], [2, 2, 1, 0], [1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= i2\\nb0 = max(min(mod(i1,int(8.0)), int(9.0)), i1) \\le mod(divInt(( in2 * in1 ),min(int(7.0), divInt(in1,int(5.0)))),int(5.0))\\ni2 = min(min(i2, in2), abs(min(in1, divInt(i2,mod(i0,abs(( abs(int(1.0)) - ( res0 + int(8.0) ) )))))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 14, 2, 37, 9, 9, 4, 6]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [2, 6], [1], [0], [], [1], [0], [], [], [], [0], [], [3, 1, 3, 1, 0], [], [2, 0], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(int(2.0)) \\g min(int(6.0), i0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 5, 0, 2, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 0, 1, 1, 1], [1, 1], [0, 1, 0, 1, 1, 1], [0, 0, 1], [2, 5, 7], [], [1, 0, 2, 2], [], [0, 0, 0, 0], [], [0, 1, 0, 1], [0, 0], [], [5, 6, 3, 4, 6, 5, 3], [0, 0, 0, 0], [0, 0, 0, 1], [], [], [], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\nloopBreak% = 0\\nwhile True:{:\\nin2 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in1\\nres0 = in2\\nin0 = int(257.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 3, 3, 0, 4, 0, 4, 0, 4, 2, 0, 7, 4, 4, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1], [0, 2, 1, 1, 1], [0], [0, 0, 1, 0], [1, 1, 1], [0, 9, 0], [5], [2, 1, 1, 2, 1], [0], [0, 0, 0, 0, 0, 1, 0, 0], [0], [0, 2, 3, 2, 0, 1, 1], [0, 1], [1], [4, 3], [0], [1, 2, 1, 1, 0], [0], [], [0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\nif not ( not b1 and int(0.0) != ( int(9.0) + int(0.0) ) ):{:\\nb2 = True\\nin1 = in0\\n:}else:{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 3, 3, 1, 5, 1, 8, 1, 7, 2, 1, 2, 1, 5, 1, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [2, 3, 3], [0], [3, 2, 0, 1, 0], [0], [0], [0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = min(( in0 + int(9.0) ), in0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 1, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1], [2, 1, 0, 2, 0, 0, 1], [0, 0], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 8, 4, 3, 2, 9, 7, 5, 7, 8], [3, 3, 5, 4, 1], [2, 0, 2, 1], [0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [3, 2, 0, 3, 1], [1], [1, 1], [1, 6, 1, 5, 1, 5, 1, 6, 3, 4, 0, 3], [1, 0], [3, 2, 0, 1, 0, 3, 3, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 0, 3, 0, 1, 1, 3, 1, 0, 3, 2, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0], [2, 1, 0, 0, 1, 2], [0, 2, 2, 0], [0, 1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(divInt(i1,int(8.0))) \\ge res0 and max(min(i1, in2), i1) \\ge in2 ):{:\\ni1 += int(9.0)\\n:}else:{:\\nb2 = not ( int(8.0) * int(4.0) ) != mod(( res0 * min(in0, int(3.0)) ),int(2.0))\\n:}\\nif b0:{:\\nb2 = max(int(9.0), in1) \\le abs(( int(7.0) + int(5.0) ))\\nb1 = ( False or i0 \\g int(7.0) )\\n:}else:{:\\nin0 = int(8.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 11, 11, 5, 4, 2, 10, 5, 5, 1, 2, 12, 2, 32, 5, 6, 4, 2]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 0, 1, 2, 2, 1, 1, 1, 1, 1, 0], [1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 5, 3, 1, 8, 1, 1, 2, 7, 9, 1, 0, 0, 9, 4, 4, 2, 1, 8, 5, 6, 9, 1, 7, 2, 0, 9, 6, 3, 3, 4, 4, 1, 7, 9, 9, 0, 4, 0, 8, 4, 5, 6, 8, 1, 9, 2, 2, 2, 3, 7, 0, 4, 4, 9, 1, 2, 2, 9, 0, 2], [5, 0, 0, 3, 0, 0, 1, 4, 0, 4], [1, 2, 0, 2, 0], [0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 2, 2], [], [1], [1, 4, 4, 2, 4, 1, 2, 5, 6, 1, 1, 1, 4, 6, 0, 5, 1, 1, 6, 2, 3, 0, 1, 0, 3, 3, 5, 5, 3, 5, 2, 4, 2, 6, 3, 0, 2, 5, 5, 3, 6, 0, 0, 1, 2, 6, 5, 6, 3, 0, 5, 1, 5, 1, 3, 0, 0, 1, 3, 5, 1], [0, 1, 0, 0], [3, 1, 0, 2, 0, 0, 0, 2, 1, 2, 1, 3, 3, 0, 3, 0, 3, 3, 1, 1, 0, 2, 2, 0, 3, 3, 2, 3, 0, 0, 1, 2, 3, 1, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 3, 1, 2, 0, 0, 2, 0, 1, 3, 1, 1, 1, 0, 3, 0, 2, 2, 3, 2, 3, 0, 2, 3, 0, 2, 0, 2, 2, 1, 3, 3, 2, 1, 2, 0, 3, 3, 3, 1, 1, 0, 3, 2, 1, 1, 3, 2, 1, 1, 2, 1, 3, 1, 1, 1, 1, 3, 1, 2, 2, 2, 1, 3, 3, 1, 3, 2, 1, 1, 3, 0, 1, 2, 3, 0, 1, 1, 0, 3, 0, 2, 1, 1, 2, 3, 2, 2, 0, 0, 1, 0, 0, 0, 2, 3, 2, 3, 2, 1, 3, 1, 0, 3, 3, 0, 1, 1, 2, 1, 0, 1, 0, 0, 3, 3, 2, 2, 2, 1, 0, 3, 2, 1, 2, 3, 3, 0, 3, 0, 2, 2, 3, 1, 1, 3, 2, 2, 2, 3, 0, 2, 1, 2, 2, 0, 1, 2, 1, 0, 3, 2, 0, 1, 0, 2, 2, 0, 2, 2, 2, 0, 3, 3, 0, 2, 3, 3, 1, 1, 1, 0, 1, 0, 1, 2, 0, 1, 1, 3, 3, 3, 0, 0, 0, 1, 2, 0, 3, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 2, 0, 1, 0, 0, 1, 0, 2, 2, 2, 0, 1, 2, 1, 1, 2, 0, 2, 1, 0, 2, 0, 1, 0, 2, 1, 2, 0, 1, 1, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 1, 1, 0, 0, 1, 2, 1, 2, 2, 0, 2, 0, 0, 2, 2, 1], [1, 0, 0, 0, 2, 2, 0, 2, 1, 1, 2, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 0, 1, 1, 2], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(8.0), i1) != ( in1 - in1 ):{:\\nb1 = not ( i2 \\l ( int(9.0) + ( int(5.0) + min(abs(in1), min(i1, max(min(int(3.0), int(1.0)), i2))) ) ) and ( mod(in2,min(max(mod(min(res0, i1),int(8.0)), ( abs(int(1.0)) + i1 )), i1)) * in1 ) \\l int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = abs(abs(min(int(2.0), i0)))\\nb2 = in2 \\ge max(int(7.0), ( i1 * i1 ))\\nloopBreak% = 0\\nwhile ( divInt(res0,int(9.0)) \\l abs(int(1.0)) or not int(0.0) \\l int(0.0) ):{:\\nif i2 \\g max(in0, ( divInt(max(( abs(i0) + mod(min(i1, mod(i0,( ( int(9.0) * abs(max(mod(int(4.0),( in0 - min(abs(min(int(4.0), int(2.0))), in0) )), max(( int(1.0) - int(8.0) ), min(( int(5.0) * int(6.0) ), mod(int(9.0),abs(int(1.0))))))) ) - int(7.0) ))),int(2.0)) ), int(0.0)),max(int(9.0), divInt(( divInt(int(6.0),abs(min(int(3.0), max(divInt(int(3.0),int(4.0)), max(in2, int(4.0)))))) + ( min(in2, int(1.0)) - int(7.0) ) ),in0))) - max(in2, divInt(int(9.0),int(9.0))) )):{:\\ni2 -= mod(abs(mod(( in1 + i2 ),int(0.0))),res0)\\n:}else:{:\\nb0 = in0 \\le i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(abs(( max(( int(4.0) - min(int(0.0), in2) ), min(abs(in2), int(8.0))) - int(4.0) )),mod(int(5.0),in0))\\nb2 = not int(6.0) \\l res0\\ni0 = i0\\nb0 = abs(min(( divInt(divInt(int(8.0),i1),max(divInt(int(1.0),( max(min(i2, min(res0, mod(divInt(max(int(9.0), int(2.0)),abs(( ( ( max(in2, ( int(2.0) - ( ( res0 + int(2.0) ) * mod(int(3.0),in0) ) )) - abs(( i0 + int(7.0) )) ) * in2 ) - ( mod(i1,( ( ( in2 - abs(min(i1, ( abs(min(int(0.0), int(4.0))) - int(4.0) ))) ) - in0 ) + int(9.0) )) - i0 ) ))),int(1.0)))), divInt(i0,int(2.0))) - int(2.0) )), min(abs(abs(i1)), in0))) * in2 ), int(9.0))) \\le mod(i1,max(int(0.0), int(2.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 3, 9, 62, 62, 10, 5, 2, 15, 10, 5, 0, 1, 61, 4, 234, 57, 58, 33, 25]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1], [2, 0, 0, 2, 2, 1], [0, 0, 1], [0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 5, 2, 4, 4, 8, 8, 3, 9, 8, 0, 1, 8, 4, 6, 2, 3, 9, 7, 6, 1, 7, 6, 6, 1, 5, 4, 3, 1, 7, 4, 3, 8, 1, 6, 3, 1, 1, 9, 0, 2, 0, 0, 8, 2, 9, 8, 8, 4, 2, 8, 7, 4, 1, 2, 8, 9, 1, 5, 2, 8, 7, 1, 1, 6, 9, 4, 8, 3, 3, 8, 5, 6, 3, 8, 3], [2, 0, 5], [1], [], [1, 0, 1, 1], [0, 0, 0], [1], [1], [0, 0], [6, 1, 3, 3, 4, 0, 1, 5, 4, 2, 4, 0, 0, 5, 2, 5, 2, 5, 5, 3, 0, 6, 0, 3, 1, 0, 0, 2, 4, 5, 5, 3, 4, 4, 6, 4, 3, 3, 0, 0, 4, 0, 0, 1, 4, 6, 0, 0, 2, 4, 6, 5, 3, 0, 2, 1, 2, 6, 5, 5, 4, 0, 4, 6, 5], [0, 0], [1, 3, 0, 1, 1, 3, 1, 2, 2, 1, 1, 0, 0, 2, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 2, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2, 1, 3, 0, 3, 0, 3, 0, 3, 2, 1, 3, 2, 0, 1, 0, 0, 3, 1, 3, 1, 0, 2, 3, 0, 3, 0, 3, 2, 3, 1, 1, 2, 3, 0, 2, 3, 1, 1, 0, 3, 1, 2, 3, 1, 1, 3, 3, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 2, 0, 2, 3, 0, 2, 2, 3, 3, 2, 2, 2, 2, 1, 0, 2, 3, 1, 1, 0, 3, 3, 2, 1, 2, 2, 1, 1, 3, 3, 3, 0, 2, 3, 1, 3, 2, 1, 0, 1, 2, 0, 3, 2, 0, 2, 0, 3, 2, 1, 0, 3, 0, 3, 3, 0, 3, 2, 1, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2, 1, 1, 0, 2, 0, 1, 2, 3, 3, 0, 3, 0, 3, 3, 2, 1, 3, 2, 3, 0, 3, 0, 3, 1, 2, 3, 0, 0, 3, 3, 3, 2, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 3, 2, 0, 0, 1, 3, 0, 2, 3, 1, 3, 2, 0, 3, 2, 1, 1, 3, 1, 2, 1, 0, 0, 3, 0, 0, 0, 3, 1, 1, 1, 3, 1, 0, 2, 1, 3, 1, 1, 3, 0, 0, 1, 2, 0, 1, 2, 3, 1, 0, 2, 2, 1, 1, 1, 3, 3, 3, 0, 1, 1, 3, 1, 2, 2, 0, 3, 2, 3, 3, 3, 1, 0, 3, 1, 1, 1, 3, 2, 2, 1, 2, 1, 0, 2, 1, 3, 0, 3, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 2, 1, 0, 2, 0, 1, 0, 0, 2, 2, 1, 2, 0, 0, 2, 0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 0, 0, 2, 2, 2, 0, 0, 1, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 1, 2, 2, 2, 1, 2, 0, 1, 2, 0, 1, 0, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1], [2, 0, 1, 1, 2, 1, 1, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 0, 2, 2, 0, 2, 1, 2, 0, 2], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 98, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(5.0) == max(res0, int(4.0)):{:\\nb1 = False\\n:}\\ni1 = int(52.0)\\nif max(int(4.0), mod(mod(int(4.0),int(8.0)),in0)) \\l in0:{:\\nloopBreak% = 0\\nwhile mod(min(in1, divInt(abs(divInt(int(8.0),max(min(abs(min(( max(( i0 * mod(int(3.0),min(min(int(9.0), int(8.0)), mod(int(0.0),abs(i1)))) ), abs(in2)) + max(in1, abs(( int(1.0) - min(divInt(i2,int(8.0)), in1) ))) ), i0)), min(int(4.0), abs(int(6.0)))), i0))),( min(in2, max(i2, min(( max(int(2.0), int(3.0)) - ( abs(in2) * divInt(min(int(9.0), int(7.0)),i2) ) ), min(int(6.0), ( min(int(1.0), int(7.0)) - max(min(mod(( in2 - in2 ),int(6.0)), divInt(int(6.0),min(divInt(( ( in0 + ( min(i0, divInt(divInt(min(max(mod(( ( ( int(1.0) * res0 ) + ( abs(int(5.0)) * int(4.0) ) ) * i0 ),abs(abs(( int(3.0) * ( mod(int(1.0),int(7.0)) * abs(max(max(in0, ( abs(int(4.0)) * abs(divInt(int(3.0),i1)) )), int(8.0))) ) )))), divInt(i0,abs(mod(i0,( i2 * max(( int(1.0) * in1 ), max(in2, min(min(in2, abs(mod(int(6.0),( int(3.0) - abs(abs(divInt(min(in0, in1),divInt(int(1.0),( int(1.0) * int(9.0) ))))) )))), in1))) ))))), ( res0 * int(0.0) )),divInt(min(max(in1, max(in0, abs(min(divInt(int(2.0),max(divInt(abs(in0),min(i0, min(int(0.0), ( min(i0, in1) - min(min(max(divInt(divInt(int(0.0),divInt(( min(max(i0, i0), ( int(8.0) - abs(divInt(i1,in1)) )) * int(2.0) ),abs(res0))),( abs(int(9.0)) - max(( i0 - abs(( int(8.0) * int(8.0) )) ), min(int(4.0), ( int(2.0) - i0 ))) )), i2), max(in1, res0)), in2) )))), abs(int(8.0)))), int(7.0))))), int(4.0)),min(int(1.0), in0))),mod(int(2.0),max(int(8.0), int(9.0))))) + min(i0, i2) ) ) * int(1.0) ),( i1 * int(5.0) )), mod(abs(int(2.0)),i2)))), mod(divInt(int(8.0),int(7.0)),int(1.0))) ))))) + abs(abs(min(res0, int(1.0)))) ))),int(6.0)) != abs(int(9.0)):{:\\nin2 = ( mod(in2,max(( min(min(max(int(4.0), in1), min(int(8.0), int(3.0))), int(3.0)) * min(divInt(( int(8.0) - ( int(5.0) * i0 ) ),( int(6.0) + min(in1, max(int(3.0), res0)) )), int(8.0)) ), in2)) * int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 77, 77, 3, 1, 0, 4, 3, 1, 1, 2, 65, 2, 298, 71, 88, 36, 35]}, {"genotype": [[0], [1, 0, 0, 1, 0, 1], [2, 0, 0, 1, 1, 1], [0], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 7, 5, 1, 0, 1, 9, 6, 7, 6, 0, 1, 7, 5, 7, 8, 2, 0, 7, 0, 8, 4, 0, 6], [0], [2], [], [0, 1], [0], [1], [0], [1], [4, 2, 1, 2, 1, 5, 2, 4, 4, 3, 0, 3, 3, 6, 3, 4, 2, 0, 5, 6, 5, 3, 3, 6, 6, 1, 5, 3, 0, 0, 6, 2, 3], [1, 1, 1, 0], [1, 3, 3, 3, 1, 3, 3, 0, 1, 3, 2, 0, 1, 1, 2, 2, 1, 2, 1, 3, 2, 3, 3, 0, 0, 2, 3, 3, 3, 0, 1, 2, 0, 2, 2, 0, 3, 0, 0, 1, 2, 2, 0, 1, 0, 2, 0, 3, 3, 2, 3, 2, 0, 1, 3, 2, 3, 0, 3, 2, 3, 0, 1, 0, 2, 1, 3, 3, 0, 2, 2, 2, 3, 1, 0, 3, 3, 1, 1, 1, 0, 0, 1, 2, 2, 3, 1, 1, 3, 2, 3, 2, 0, 0, 0, 1, 0, 0, 0, 1, 2, 2, 0, 2, 1, 0, 3, 1, 3, 0, 1], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 2, 1, 1, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 2, 0, 2, 0, 0], [0, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 2, 1, 0, 2], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin1 += int(4.0)\\ni2 *= abs(abs(min(int(2.0), abs(max(i1, int(7.0))))))\\ni2 -= min(divInt(i1,int(5.0)), int(1.0))\\n:}else:{:\\nb2 = ( ( int(0.0) - ( int(1.0) + min(divInt(abs(max(in2, i2)),mod(max(min(abs(in1), int(9.0)), ( in1 - mod(( in0 + max(i0, in0) ),int(6.0)) )),mod(( in0 + int(7.0) ),res0))), divInt(in0,max(abs(divInt(min(mod(in1,int(6.0)), min(( min(i2, min(divInt(max(i0, int(0.0)),in2), mod(int(1.0),min(abs(res0), ( divInt(mod(max(int(7.0), in2),max(min(int(5.0), int(7.0)), int(8.0))),in0) - in0 ))))) - int(2.0) ), ( ( abs(int(0.0)) * int(7.0) ) - min(( abs(( res0 * res0 )) - i1 ), int(0.0)) ))),in2)), in0))) ) ) + i0 ) \\l int(8.0)\\ni0 = ( divInt(res0,divInt(int(4.0),i2)) * min(int(0.0), min(in0, int(6.0))) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 25, 25, 1, 1, 0, 2, 1, 1, 1, 1, 33, 4, 111, 27, 30, 16, 14]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [2, 4], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(24.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1], [0, 1, 2, 1, 0, 1], [0], [0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 0, 9, 0, 5, 7, 4, 6, 3], [0, 1, 4], [1, 1, 1], [], [1, 0, 1, 1], [0, 0, 0], [1], [0], [0], [6, 6, 4, 6, 6, 3, 3, 1, 4, 4], [0, 1], [3, 2, 0, 1, 1, 1, 0, 3, 3, 2, 1, 1, 0, 1, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 3, 0, 1, 1], [1, 1, 1, 1, 0, 1], [1, 1, 2, 2, 0, 1], [2, 2], [0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(divInt(res0,int(6.0)), int(5.0)) \\l int(0.0)\\nb1 = True\\nif res0 \\g max(abs(divInt(int(9.0),int(0.0))), in1):{:\\nres0 = int(5.0)\\nb1 = divInt(abs(res0),mod(min(int(7.0), in0),( int(4.0) * in0 ))) \\le i1\\nin1 *= divInt(max(in1, int(6.0)),int(3.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 10, 10, 3, 3, 0, 4, 3, 1, 1, 1, 10, 2, 30, 6, 6, 2, 5]}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 9, 6, 4, 8, 0, 3, 4, 9, 0, 0], [5, 3, 0], [], [1, 0], [0, 0, 1, 1, 1], [0, 0, 0], [3, 3], [], [], [6, 2, 4, 4, 4, 6, 0], [1, 0], [2, 1, 1, 1, 0, 1, 0, 2, 0, 2, 2, 2, 1, 1, 0, 1, 3, 2, 1, 3, 1, 1, 1, 2, 0, 1], [0, 0, 1, 0, 1, 0, 0], [0, 0], [0, 2, 2, 2, 2, 0], [1, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( ( int(4.0) + int(2.0) ) != int(9.0) or res0 \\ge int(6.0) ) and i2 \\l ( in1 * mod(( mod(int(4.0),int(8.0)) * in1 ),int(0.0)) ) ):{:\\nin1 *= min(( int(3.0) * min(int(4.0), int(9.0)) ), int(0.0))\\nres0 = ( i0 + int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 12, 12, 3, 0, 2, 5, 3, 2, 0, 0, 7, 2, 26, 7, 2, 6, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [1], [1], [], [1], [0], [], [], [], [3, 4], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in0 \\g in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1], [4], [1], [2], [], [1], [0], [], [], [], [0], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i0 \\g int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [1, 5], [], [], [], [], [], [], [], [], [5], [0], [2, 1, 1], [0], [], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( int(1.0) * int(5.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1], [1, 2, 0, 1, 0], [0], [0, 1, 1, 0], [1, 1, 1, 1], [7, 0, 5, 5], [2], [1, 0, 0], [], [0, 0, 1], [0], [1, 0], [1], [1], [0, 4, 2, 2, 6], [1, 1], [1, 3, 1, 2, 2, 3, 0, 0, 1, 1, 0], [1, 0], [2, 1], [1, 1, 2], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nif b0:{:\\ni0 -= int(7.0)\\n:}else:{:\\nin1 -= abs(int(0.0))\\n:}\\nb0 = mod(( max(i2, i2) * int(5.0) ),int(5.0)) == res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 4, 4, 1, 3, 0, 3, 1, 2, 1, 1, 5, 2, 11, 2, 2, 3, 1]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1], [5], [], [2, 0], [], [0], [], [0], [], [], [3, 0], [0], [3, 0, 1], [], [1], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\nin0 = max(i0, int(5.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 9, 5, 1, 9, 0, 9, 3, 4, 8, 4, 6], [5, 1, 0], [1, 2], [], [1, 0, 1, 1], [0, 0, 0], [2], [], [0], [4, 0, 2, 3, 0, 6, 5, 1, 0, 4, 2, 4, 5, 5, 0, 1, 2, 5, 3], [], [3, 3, 3, 0, 0, 2, 3, 1, 0, 0, 3, 3, 3, 2, 3, 2, 1, 2, 2, 0, 0, 1, 0, 0, 2, 3, 2, 0, 0, 3, 3, 2, 0, 2, 0, 3, 2, 0, 0, 1, 0, 0, 0, 3, 2, 1, 1, 2, 3, 2, 0, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 2, 2, 2, 1, 1, 0, 0, 2, 1, 0, 1, 0], [1, 2, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(min(abs(in1), i0), divInt(abs(int(1.0)),i2)) != in0\\nif not abs(max(max(mod(min(divInt(int(4.0),( divInt(i0,res0) - int(9.0) )), in2),i1), mod(min(mod(i0,in1), abs(max(( i2 * ( in1 - min(divInt(in2,in2), int(5.0)) ) ), i0))),i1)), i2)) \\g max(( int(1.0) - int(9.0) ), divInt(min(mod(in2,int(0.0)), ( int(9.0) - divInt(mod(int(3.0),int(4.0)),in0) )),int(8.0))):{:\\nb2 = int(4.0) \\l int(6.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 13, 13, 3, 2, 0, 4, 3, 1, 0, 1, 19, 0, 62, 16, 14, 5, 11]}, {"genotype": [[0], [1], [1], [], [1], [1], [0], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [0, 0, 1], [1, 1, 1], [4, 0, 4], [4, 4], [2, 2], [], [1, 1], [0, 0], [], [], [], [4, 5, 2, 3], [1], [0, 3, 1, 1, 3, 1, 0, 0], [], [2, 0], [1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in1 \\le abs(int(4.0))\\nb2 = int(0.0) \\le min(int(4.0), in2)\\ni2 -= in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 2, 2, 0, 2, 2, 0, 0, 0, 4, 1, 8, 0, 2, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1], [3, 8, 0, 2, 7], [], [], [], [], [], [], [], [], [3, 5, 5, 2], [1], [3, 3, 1, 3, 2, 1, 3, 0, 2, 1, 3, 1, 2, 1, 0, 0], [1, 1, 1], [2, 0, 0, 1, 0], [0], [1, 0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += abs(min(int(3.0), min(mod(int(8.0),max(in2, divInt(int(0.0),min(int(2.0), divInt(int(7.0),in2))))), i2)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 16, 3, 5, 1, 3]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 2, 0, 1, 0, 1, 1], [0], [0, 0, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 8, 3, 0, 7, 7, 3, 7, 7, 1, 7, 2, 5, 6, 2, 9, 7, 6, 4, 0, 2, 7, 7, 3, 6, 3, 1, 9, 2, 5, 8], [5, 3, 1, 5, 4], [2, 1, 2, 2], [], [1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2], [], [1], [2, 0, 5, 4, 0, 2, 2, 1, 3, 1, 0, 6, 5, 6, 1, 6, 2, 5, 6, 6, 1, 1, 6, 0, 0, 4, 3, 5, 5, 5, 3, 1, 1], [0, 1, 0, 0], [2, 0, 3, 1, 2, 0, 2, 3, 0, 3, 1, 1, 3, 1, 1, 2, 3, 3, 1, 0, 3, 0, 2, 0, 3, 3, 2, 3, 1, 1, 2, 1, 0, 2, 2, 1, 1, 3, 0, 2, 3, 3, 3, 2, 3, 3, 0, 1, 1, 0, 1, 0, 2, 0, 0, 1, 0, 2, 2, 0, 3, 2, 3, 0, 2, 0, 3, 2, 0, 3, 3, 2, 1, 1, 1, 2, 1, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 0, 2, 3, 0, 3, 1, 0, 1, 3, 3, 2, 1, 3, 0, 1, 3, 2, 3, 1, 3, 3, 1, 0, 3, 0, 3, 0, 1, 1, 1, 3, 3, 2, 3, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 2, 1, 2, 1, 2, 2, 2, 2, 0, 1, 2, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 0, 1, 1, 1, 1, 0, 2, 0, 1, 2, 2, 2, 2], [2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 2], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( i2 * min(int(8.0), ( i0 - divInt(min(in2, abs(int(6.0))),int(8.0)) )) ) != max(int(3.0), int(0.0))\\nb1 = not ( abs(max(int(7.0), in1)) * abs(i0) ) \\ge mod(i2,abs(abs(mod(abs(int(7.0)),int(3.0)))))\\nb2 = ( int(7.0) - i2 ) \\g ( ( int(7.0) + int(1.0) ) + min(i1, mod(max(abs(max(( abs(max(in0, int(7.0))) + int(2.0) ), i1)), int(5.0)),i0)) )\\nif ( res0 + in2 ) != int(6.0):{:\\nres0 = i1\\nres0 += mod(mod(i2,max(( min(in2, divInt(res0,min(divInt(res0,min(min(( int(2.0) + int(9.0) ), int(7.0)), mod(int(6.0),int(4.0)))), ( i1 - i1 )))) - abs(int(0.0)) ), int(2.0))),int(7.0))\\n:}else:{:\\nres0 = divInt(mod(i0,( abs(i0) * min(int(7.0), in1) )),int(3.0))\\n:}\\nin0 = max(max(( int(6.0) - max(in2, int(3.0)) ), max(( min(int(1.0), abs(min(int(9.0), in2))) + max(in2, abs(in0)) ), int(2.0))), int(5.0))\\nb2 = int(8.0) \\le abs(abs(( abs(i1) * i1 )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 1, 8, 32, 32, 5, 4, 0, 6, 5, 1, 0, 1, 33, 4, 123, 26, 36, 16, 11]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 4, 7, 6, 8, 9, 3, 9, 4], [], [], [], [], [], [], [], [], [5, 1, 3, 0, 3, 2, 1, 0, 0, 4, 6, 2, 0, 1], [0], [2, 2, 3, 0, 3, 0, 2, 2, 1, 1, 2, 0, 0, 2, 3, 3, 1, 3, 2, 2, 2, 3, 0, 1, 0, 1, 0, 2, 2, 0, 3, 1, 0, 3, 1, 0, 0, 2, 2, 0, 2, 3, 1, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 1, 1, 1], [2, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = divInt(( min(i1, abs(in0)) * mod(mod(int(6.0),int(6.0)),divInt(i0,in0)) ),divInt(min(min(int(4.0), min(divInt(( mod(min(i2, int(7.0)),i1) + int(6.0) ),i0), divInt(( i0 * max(int(8.0), in1) ),max(int(9.0), res0)))), i2),( ( i0 - ( max(int(3.0), i1) * int(9.0) ) ) + int(4.0) )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 46, 14, 9, 6, 8]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1, 1, 1, 1], [6, 3, 2, 9], [1], [], [], [1], [0], [], [], [0], [4, 2, 2, 4], [0], [3, 3, 1, 3, 0, 0, 3, 1, 1, 0, 1], [], [0, 0, 0, 0], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(min(int(6.0), min(in1, i2)), min(int(3.0), int(2.0))) \\g i2:{:\\nin1 = int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 4, 4, 1, 0, 0, 1, 1, 0, 0, 1, 4, 1, 11, 0, 4, 0, 0]}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 0, 2, 1, 2, 1], [0, 1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 3, 5, 4, 8, 8, 2, 3, 8, 7, 0, 0, 0, 2, 5, 6, 4, 0, 8, 0, 7, 5, 2, 2], [2, 1], [0], [], [1, 0, 1], [0, 0], [0], [], [1], [0, 4, 5, 3, 5, 3, 4, 6, 3, 0, 6, 1, 5, 0, 6, 1, 5, 3, 1, 2, 4, 4, 1, 3, 6, 1, 1, 4, 3, 6, 0, 2], [0, 0, 0], [1, 1, 1, 2, 2, 0, 0, 2, 2, 3, 0, 1, 0, 1, 1, 1, 3, 3, 0, 0, 2, 0, 3, 1, 2, 3, 2, 2, 3, 2, 2, 1, 2, 1, 1, 1, 3, 2, 2, 3, 2, 0, 2, 2, 1, 1, 1, 0, 0, 3, 1, 2, 3, 1, 2, 3, 3, 3, 0, 1, 3, 3, 2, 0, 2, 1, 0, 2, 2, 0, 3, 3, 0, 1, 3, 3, 2, 1, 3, 3, 3, 0, 2, 2, 2, 3, 0, 3, 1, 3, 0, 0, 1, 0, 1, 0, 3, 0, 0, 3, 0, 2, 1, 0, 3, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 0], [0, 2, 2, 2, 2, 0, 2, 2, 2, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(8.0) == int(9.0):{:\\ni0 = int(3.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile b0:{:\\nin1 = divInt(mod(in2,in0),( divInt(max(in2, int(5.0)),in0) + int(4.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(8.0) \\g int(8.0):{:\\nin1 = min(min(res0, in0), mod(i0,min(int(2.0), mod(max(mod(mod(abs(( ( int(3.0) * mod(int(8.0),int(7.0)) ) * int(0.0) )),min(( ( min(divInt(res0,( divInt(int(0.0),int(0.0)) * int(2.0) )), i1) * in2 ) + max(int(5.0), ( min(int(6.0), ( min(max(min(i0, int(4.0)), abs(min(( res0 * ( int(0.0) * i1 ) ), divInt(divInt(in2,min(abs(in0), int(8.0))),min(max(mod(int(0.0),abs(abs(abs(i1)))), divInt(divInt(mod(abs(i2),max(int(7.0), abs(in1))),in1),int(5.0))), i1))))), int(2.0)) * in0 )) - max(res0, i1) )) ), max(i1, mod(int(2.0),in1)))),min(in0, res0)), i0),i2))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 25, 25, 2, 1, 0, 3, 2, 1, 0, 1, 32, 3, 109, 27, 28, 10, 17]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 0, 1, 1], [0, 1, 1, 0], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 0, 6, 7, 2, 7, 9, 2, 0, 1, 1, 5, 6, 5, 6, 7, 9, 6, 8, 3, 4, 4, 8, 9, 8, 9, 7, 3, 2, 2, 7, 2, 7, 7, 4, 7, 2, 1, 3, 0, 0, 7], [2, 3, 3, 5, 2, 1, 0, 5, 5], [2, 0, 2, 2, 0, 2, 1, 2], [0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 0, 3, 3, 2, 3, 0, 1, 3, 0, 3, 0, 1, 2], [0, 0], [1, 1], [1, 5, 2, 6, 0, 4, 2, 1, 3, 0, 3, 0, 0, 5, 3, 0, 0, 1, 5, 5, 4, 6, 2, 2, 6, 0, 3, 1, 6, 5, 2, 1, 5, 6, 3, 0, 1, 3, 5, 0, 3, 0, 5, 6, 2], [], [3, 2, 1, 2, 2, 2, 1, 3, 2, 3, 2, 0, 1, 0, 2, 2, 3, 3, 0, 0, 3, 2, 3, 3, 2, 1, 3, 2, 0, 3, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 0, 2, 3, 1, 3, 0, 1, 1, 2, 0, 1, 2, 3, 0, 0, 3, 2, 0, 3, 2, 2, 1, 2, 0, 1, 0, 1, 1, 0, 0, 0, 0, 3, 0, 0, 2, 3, 3, 3, 3, 1, 3, 0, 2, 3, 0, 1, 0, 3, 1, 1, 2, 0, 3, 0, 1, 0, 0, 2, 0, 3, 1, 3, 1, 2, 0, 2, 1, 1, 1, 3, 1, 2, 1, 0, 2, 0, 3, 2, 2, 3, 0, 3, 0, 3, 3, 3, 3, 0, 3, 2, 3, 3, 1, 3, 0, 2, 2, 3, 2, 2, 2, 1, 1, 3, 1, 0, 2, 3, 1, 3, 3, 3, 3, 0, 2, 0, 1, 1, 0, 1, 2, 1, 0, 2, 0, 3, 1, 3, 1, 0, 0, 3, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 2, 2, 0, 1, 0, 2, 2, 2, 1, 2, 0, 0, 2, 1, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0], [0, 0, 2, 0, 1, 1, 0, 0, 1, 0, 1, 2, 2, 2, 0, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not abs(divInt(int(9.0),mod(( ( int(6.0) + min(mod(abs(mod(i1,int(0.0))),in2), ( ( max(max(i2, res0), max(( abs(min(divInt(int(6.0),min(( i0 + min(int(7.0), int(2.0)) ), int(7.0))), int(9.0))) * int(2.0) ), int(0.0))) + in1 ) - i2 )) ) - divInt(int(1.0),i1) ),( min(int(1.0), abs(in0)) + int(5.0) )))) == int(6.0):{:\\nb2 = mod(i0,int(5.0)) \\ge mod(max(in0, i0),max(divInt(i0,min(( ( int(6.0) + mod(in2,int(7.0)) ) - in0 ), int(9.0))), int(6.0)))\\nloopBreak% = 0\\nwhile ( i0 \\ge i0 and ( b0 and ( ( i1 != in2 and not ( b2 or min(in2, in1) == divInt(max(max(min(min(int(8.0), min(res0, ( max(i2, int(3.0)) + i2 ))), abs(int(4.0))), int(4.0)), divInt(res0,abs(i0))),int(8.0)) ) ) or in0 \\g i1 ) ) ):{:\\nloopBreak% = 0\\nwhile True:{:\\nif ( b2 or ( b0 and ( res0 - min(int(9.0), max(int(8.0), ( in2 * ( int(9.0) * int(7.0) ) ))) ) \\l int(3.0) ) ):{:\\nb2 = True\\n:}else:{:\\nb1 = min(int(2.0), divInt(int(2.0),i2)) != ( i1 * abs(( ( abs(in2) + abs(res0) ) + max(abs(min(min(in0, abs(mod(max(abs(int(7.0)), min(i0, divInt(divInt(abs(divInt(( divInt(int(2.0),int(7.0)) - abs(int(7.0)) ),i1)),mod(abs(int(4.0)),abs(abs(min(min(in0, mod(in2,int(7.0))), int(2.0)))))),i0))),int(1.0)))), divInt(int(3.0),in0))), divInt(i0,min(int(0.0), max(int(0.0), in2)))) )) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = not res0 != min(int(7.0), i2)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 43, 43, 9, 8, 7, 25, 9, 16, 2, 2, 45, 0, 175, 39, 48, 17, 22]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 1, 0, 1, 1, 1], [1, 1, 1, 0], [0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 6, 5, 6, 9, 6, 7, 8], [5, 1, 1], [0, 0, 2, 0, 1, 1], [], [0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0], [0, 0, 1, 1, 1], [0, 0, 1], [1], [5, 1, 0, 6, 2, 0, 3, 0], [1, 0], [2, 0, 3, 3, 1, 1, 0, 2, 2, 1, 0, 0, 1, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1], [0, 1, 0, 1], [1, 2, 1, 2, 0], [2, 2, 2], [0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b0\\nloopBreak% = 0\\nwhile ( in2 * max(abs(int(2.0)), int(4.0)) ) != i1:{:\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile True:{:\\nif divInt(( int(6.0) * i0 ),res0) \\g int(5.0):{:\\nb0 = True\\n:}else:{:\\nb1 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= max(abs(int(6.0)), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i0 \\g divInt(min(int(6.0), in0),int(7.0))\\ni0 = int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 9, 9, 3, 6, 0, 8, 3, 5, 3, 1, 8, 2, 24, 4, 5, 3, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 7, 8, 0, 6, 4, 5, 2, 3, 8, 0, 3, 2, 9, 7, 6, 6, 0, 7, 9, 9, 1, 6], [4], [1], [], [1], [0], [], [], [], [3, 1, 4, 0, 0, 2, 1, 5, 4, 5, 2, 5, 6, 0, 0, 1, 3, 1, 4], [0], [3, 0, 2, 2, 3, 3, 0, 0, 2, 1, 3, 3, 2, 2, 0, 1, 3, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 0, 3, 3, 3, 2, 1, 2, 3, 2, 2, 2, 1, 2, 2, 1, 1, 3, 2, 0, 2, 1, 3, 1, 3, 2, 2, 0, 0, 2, 0, 2, 1, 2, 3, 0, 0, 2, 0, 1, 3, 1, 1, 1, 0, 1, 3, 0, 3, 0, 3, 0, 3, 3, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [2, 1, 0, 1, 2, 1, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 1, 2, 2, 1], [0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 1, 2, 2, 0, 1, 2, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = abs(in0) \\le ( divInt(max(min(i1, in1), divInt(int(6.0),max(abs(( ( i0 + int(2.0) ) + max(int(7.0), int(8.0)) )), int(0.0)))),( mod(int(6.0),int(4.0)) + mod(( ( i0 + abs(abs(max(divInt(int(5.0),( abs(divInt(( ( int(2.0) + ( divInt(int(3.0),int(8.0)) - min(( i2 - divInt(int(0.0),min(int(3.0), max(divInt(( i1 * in2 ),mod(in1,divInt(int(2.0),( max(in2, i2) + ( in2 - int(9.0) ) )))), abs(int(7.0))))) ), int(6.0)) ) ) - int(6.0) ),res0)) * int(0.0) )), abs(i0)))) ) * max(i0, abs(i1)) ),abs(max(( ( int(7.0) + int(9.0) ) - ( int(9.0) * in0 ) ), int(1.0)))) )) - int(6.0) )\\ni1 = in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 24, 24, 1, 1, 0, 1, 1, 0, 0, 0, 19, 1, 90, 28, 20, 17, 11]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [8, 8], [], [], [], [], [], [], [], [], [0, 5], [0], [2, 3, 1, 1, 3, 0], [1], [0, 2], [], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = divInt(min(int(8.0), int(8.0)),abs(in2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 6, 1, 2, 0, 1]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 0, 1, 0], [0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 8, 6, 5, 9, 3, 6, 8, 3, 3, 0, 0, 7, 9, 6, 5], [3, 1, 4, 4, 4, 5], [2, 1, 0, 2, 2, 0], [0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 1, 3, 0, 0, 3, 3, 0], [1, 0], [1, 0], [3, 6, 4, 5, 3, 1, 1, 5, 2, 4, 1, 6, 6, 0, 2, 5, 3, 5, 6, 6, 4, 6, 2, 1], [0, 0, 0, 0, 1], [1, 0, 2, 2, 0, 1, 3, 0, 0, 2, 0, 1, 0, 1, 3, 0, 0, 1, 3, 3, 1, 0, 0, 3, 0, 0, 1, 3, 2, 1, 1, 1, 3, 3, 2, 2, 2, 2, 3, 0, 1, 2, 3, 1, 3, 2, 3, 3, 1, 1, 0, 0, 1, 0, 1, 3, 0, 0, 2, 0, 1], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [2, 0, 2, 2, 2, 1, 1, 1, 0, 2, 1, 2, 0, 0], [2, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(6.0) \\ge in0\\nif False:{:\\nloopBreak% = 0\\nwhile mod(divInt(res0,int(5.0)),abs(in1)) \\g in2:{:\\nin0 = mod(i1,int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\ni1 = in2\\n:}\\nb1 = int(6.0) \\le min(i2, in1)\\n:}else:{:\\nloopBreak% = 0\\nwhile ( b0 and b2 ):{:\\ni1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( abs(abs(int(9.0))) \\le res0 or res0 \\le abs(i0) ):{:\\nb2 = ( b0 or i2 != int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = max(divInt(int(6.0),int(8.0)), int(3.0))\\n:}\\nin0 *= max(max(divInt(( mod(( min(in2, int(3.0)) + ( abs(int(0.0)) + max(divInt(abs(min(int(0.0), int(7.0))),res0), res0) ) ),int(9.0)) - in1 ),int(6.0)), min(res0, i2)), mod(i1,int(5.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 5, 8, 17, 17, 6, 6, 3, 14, 6, 8, 2, 2, 24, 5, 61, 11, 14, 4, 8]}, {"genotype": [[0], [1], [0], [], [1], [1], [7], [], [], [], [], [], [], [], [], [5, 1, 0, 1], [1], [2, 3, 2, 0, 1, 0, 0], [1, 1], [0], [2], [0, 0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= divInt(min(divInt(i1,int(7.0)), i0),i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 7, 2, 1, 1, 2]}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [0], [1, 0], [1, 1, 1, 1, 1, 1], [6, 1, 2, 2, 1, 5], [1, 4, 5], [0], [1], [1, 0, 1, 1], [0, 0, 0], [3], [], [1], [0, 6, 1, 6], [0], [3, 0, 1, 1, 0, 1, 1, 3, 0, 1, 1], [], [1, 1], [], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(i0, int(6.0)) \\g int(1.0):{:\\nres0 = i1\\n:}else:{:\\nb0 = ( int(2.0) \\le int(2.0) or max(res0, int(1.0)) != int(5.0) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 3, 1, 1, 4, 3, 1, 0, 1, 4, 1, 11, 0, 2, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 1, 1], [1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 8, 8, 5, 8, 0, 2, 2, 3, 5, 2, 7, 9, 7, 9, 2, 8, 1, 4, 0, 9, 2, 9, 0, 9, 3, 7, 6, 2, 8, 8, 3, 2, 4, 9, 3, 0, 1, 9, 2, 8, 4, 4, 2, 3, 6, 6, 5, 8, 5, 0, 2, 8, 5, 7, 7, 0, 7, 4, 4, 9, 2, 1, 2, 7, 6, 8, 6, 6, 4, 2, 4, 0, 1, 9, 5, 1, 3], [0], [2, 2, 1], [1], [0, 0, 0, 1, 0, 0, 0], [0], [2, 3, 2, 0, 2, 0], [], [], [3, 4, 4, 4, 3, 4, 1, 6, 1, 3, 6, 1, 2, 6, 4, 0, 5, 4, 3, 6, 2, 2, 4, 0, 6, 0, 6, 3, 3, 2, 0, 3, 4, 1, 1, 3, 2, 1, 4, 6, 0, 4, 5, 6, 3, 4, 2, 0, 0, 3, 4, 6, 2, 5, 6, 5, 5, 2, 1, 0, 2, 0, 1, 0, 4, 5, 1, 5, 3, 5, 6, 0, 3, 6, 5, 0, 1, 0, 4], [0, 1], [2, 2, 1, 2, 1, 1, 3, 2, 3, 2, 1, 3, 3, 1, 2, 1, 3, 2, 2, 2, 1, 2, 2, 1, 3, 3, 0, 2, 1, 2, 2, 0, 1, 3, 2, 2, 0, 3, 1, 3, 2, 1, 1, 3, 0, 3, 1, 3, 1, 2, 3, 1, 2, 1, 2, 2, 2, 1, 3, 0, 0, 3, 3, 2, 3, 3, 1, 3, 1, 1, 2, 2, 3, 2, 0, 0, 1, 0, 1, 3, 3, 2, 1, 2, 3, 0, 1, 3, 2, 0, 2, 1, 0, 1, 3, 2, 1, 1, 0, 2, 1, 3, 1, 3, 2, 0, 0, 0, 1, 0, 0, 0, 3, 3, 3, 3, 1, 3, 2, 3, 2, 1, 0, 2, 3, 1, 1, 0, 1, 2, 1, 2, 2, 3, 0, 2, 3, 0, 3, 1, 3, 0, 2, 1, 1, 0, 2, 2, 0, 3, 2, 1, 2, 1, 3, 0, 3, 2, 1, 1, 0, 2, 2, 3, 0, 0, 0, 0, 3, 2, 2, 2, 1, 0, 2, 2, 3, 3, 3, 2, 1, 1, 0, 3, 3, 2, 3, 2, 3, 2, 3, 0, 2, 2, 3, 3, 2, 0, 1, 1, 1, 2, 3, 0, 0, 3, 3, 2, 0, 3, 3, 3, 1, 2, 3, 0, 1, 1, 2, 0, 1, 3, 0, 2, 3, 3, 3, 2, 0, 0, 1, 1, 2, 0, 2, 0, 2, 0, 3, 1, 3, 3, 0, 2, 1, 2, 1, 2, 0, 3, 2, 0, 1, 3, 2, 3, 2, 1, 0, 2, 2, 2, 3, 0, 1, 1, 0, 1, 2, 0, 0, 0, 1, 0, 2, 3, 3, 2, 2, 2, 0, 3, 0, 1, 1, 3, 2, 1, 0, 1, 3, 2, 1, 1, 2, 0, 0, 2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 3, 1, 3, 1, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 2, 3, 3, 0, 0, 0, 1, 3, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 0, 0, 0, 2, 0, 0, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 2, 2, 0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 1, 1, 1, 0, 0, 1, 2, 2, 1, 0, 1, 0, 1, 1, 2, 1, 0, 0, 2, 1, 0, 2, 0, 1, 0, 1, 2, 1, 0, 0, 2], [2, 2, 2, 1, 2, 0, 1, 2, 0, 0, 1, 2, 1, 0, 2, 1, 2, 0, 2, 1, 1, 2, 2, 1, 2, 0, 1, 0, 2, 0, 2, 0, 1, 1, 2, 0, 1, 1, 2, 0, 1, 2, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 94, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not ( not divInt(divInt(int(0.0),( int(5.0) * int(8.0) )),max(divInt(max(mod(int(8.0),abs(max(int(5.0), ( int(8.0) * max(mod(( mod(int(0.0),( ( int(2.0) * max(max(in0, divInt(int(2.0),( ( in1 - int(3.0) ) * abs(divInt(mod(in1,abs(int(5.0))),max(( int(2.0) + int(7.0) ), min(in1, min(int(9.0), min(int(7.0), mod(abs(int(9.0)),mod(int(2.0),divInt(( divInt(int(8.0),min(in0, in1)) - min(abs(mod(abs(abs(int(1.0))),max(int(4.0), int(0.0)))), ( ( max(( i1 * res0 ), int(9.0)) + i1 ) + int(2.0) )) ),abs(abs(mod(int(9.0),mod(max(in0, int(0.0)),max(( res0 - ( int(9.0) * i1 ) ), int(3.0))))))))))))))) ))), max(mod(int(7.0),int(6.0)), i2)) ) - mod(int(2.0),max(int(8.0), min(divInt(res0,in1), i0))) )) + int(8.0) ),in2), in1) )))), in0),max(min(max(min(int(3.0), min(( min(divInt(int(2.0),res0), divInt(max(int(4.0), int(9.0)),i2)) * int(3.0) ), ( int(0.0) - divInt(( max(i2, ( abs(in1) * abs(int(1.0)) )) + min(i0, ( int(9.0) * int(2.0) )) ),res0) ))), mod(divInt(i0,min(divInt(int(8.0),( int(4.0) - min(res0, abs(mod(int(4.0),int(2.0)))) )), in0)),divInt(divInt(abs(in0),i2),i0))), in0), min(divInt(( ( int(3.0) - in1 ) * ( divInt(min(max(min(( int(6.0) * int(6.0) ), i1), max(min(( max(divInt(min(divInt(abs(i1),( mod(abs(max(( in0 - int(5.0) ), int(8.0))),int(5.0)) * ( max(i2, i1) + max(min(( in1 - min(max(abs(int(0.0)), ( abs(res0) + int(2.0) )), int(8.0)) ), ( i0 * int(5.0) )), max(in1, divInt(min(max(min(( in2 + res0 ), int(7.0)), int(7.0)), ( in0 * divInt(in1,( i2 + max(int(0.0), max(abs(i0), ( int(7.0) - ( int(4.0) - mod(i0,max(( in0 * int(4.0) ), min(( min(divInt(int(9.0),in1), mod(mod(divInt(abs(res0),int(2.0)),int(1.0)),i2)) + int(2.0) ), ( in2 - res0 )))) ) ))) )) )),in2))) ) )), int(7.0)),in2), mod(max(min(divInt(( mod(i2,abs(i1)) - int(6.0) ),int(8.0)), min(divInt(int(6.0),i0), int(6.0))), max(( int(4.0) * int(2.0) ), ( i2 + i0 ))),divInt(i1,mod(int(4.0),( i0 - int(0.0) ))))) * in1 ), int(1.0)), in2)), min(int(9.0), max(int(5.0), i1))),in2) - in0 ) ),in2), res0))), i0)) \\l abs(int(1.0)) or b2 ):{:\\nin0 = max(res0, mod(min(min(in2, i0), i1),int(3.0)))\\nb2 = not b1\\ni0 -= abs(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 79, 79, 1, 3, 1, 7, 1, 6, 0, 0, 79, 2, 330, 90, 84, 44, 47]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [0, 1, 1, 1], [9, 0, 5, 2], [3], [0], [], [1], [0], [], [], [], [3, 5, 0], [0], [1, 3, 0, 0, 2, 1, 1], [1], [0], [], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(90.0)\\nb0 = min(in2, i0) \\ge divInt(int(5.0),int(2.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 7, 1, 1, 0, 1]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1], [9, 4, 3], [], [], [], [], [], [], [], [], [0, 1, 1, 4], [0], [3, 2, 0, 1, 2, 0, 3, 2, 2, 0, 1, 1], [1, 1, 0, 0], [0, 2], [2, 2], [0, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = min(divInt(i1,int(9.0)), divInt(i1,abs(( ( in1 * int(4.0) ) * int(3.0) ))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 4, 2, 2, 2]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1, 1], [2, 0], [4], [1], [], [0, 1, 0, 0], [0], [2, 2, 1], [0], [], [], [], [1, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not int(2.0) \\le abs(int(0.0)):{:\\nb1 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 4, 1, 3, 1, 0, 0, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1], [4, 2, 6], [], [], [], [], [], [], [], [], [4, 6, 0, 0, 6, 4], [1], [2, 2, 0, 2, 0, 3, 2, 0, 1, 0, 2, 1, 2, 1, 0], [1, 1, 0, 0, 0, 1], [0], [0, 0, 1, 2], [0, 1, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += divInt(mod(res0,( i0 + min(( i0 - int(4.0) ), res0) )),( int(2.0) * divInt(int(6.0),in1) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 15, 6, 1, 4, 3]}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [1, 1], [1, 1, 1, 1], [3, 9, 7, 2], [5], [], [], [1], [0], [], [], [], [2, 4, 6, 0], [1, 1], [1, 2, 0, 1, 0, 3, 3, 1, 1], [1], [2, 0], [0, 1], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += int(3.0)\\nloopBreak% = 0\\nwhile mod(in1,int(9.0)) != res0:{:\\ni0 -= abs(min(int(7.0), int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 1, 0, 0, 1, 1, 0, 0, 0, 4, 2, 9, 1, 2, 2, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 2, 1], [0], [1, 0, 1, 1, 0, 0, 0, 1], [1, 1, 1, 1], [7, 9, 8, 4], [3], [1, 2, 2, 0, 1, 0], [], [0, 0, 0, 0, 0, 0, 1], [0], [1, 0, 2, 1, 0, 2], [0, 0], [0], [6, 0, 1, 1, 1, 1, 3, 4, 3, 6, 2], [1, 1, 0, 1], [1, 0, 2, 3, 1, 0, 2, 0, 2, 0, 0, 1, 0, 3, 1, 0], [0, 0, 0], [1, 0], [1, 0, 2, 1, 2, 0], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= int(7.0)\\nb1 = True\\ni0 += i1\\ni1 = ( max(int(9.0), i1) * ( i1 - ( in0 * in1 ) ) )\\nb2 = b2\\nb0 = not True\\nb1 = b0\\nif not int(8.0) \\ge in0:{:\\nres0 += min(int(4.0), i2)\\n:}\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 9, 9, 1, 8, 4, 4, 1, 6, 0, 7, 1, 6, 2, 1, 11, 4, 16, 3, 2, 6, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 1, 0, 2, 2, 0, 1], [1, 1, 0], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 7, 1, 7, 2, 4, 1, 0, 0, 2, 0, 8, 6], [5, 3, 2, 3, 2, 0], [0, 2], [1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [3, 2, 2, 2], [], [0], [4, 1, 2, 4, 1, 5, 5, 0, 1, 3, 5, 6, 6, 6, 5, 3, 2, 5, 4, 4, 0, 3, 4, 4, 0, 5], [1, 0], [3, 3, 0, 3, 3, 0, 1, 0, 2, 1, 0, 0, 2, 0, 1, 2, 1, 0, 1, 3, 2, 1, 3, 1, 1, 0, 2, 3, 3, 3, 0, 1, 2, 1, 0, 1, 2, 2, 2, 0, 0, 2, 3, 3, 3, 2, 2, 0, 3, 2, 0, 0, 0, 3, 2, 0, 0, 3, 0, 3, 0, 0, 1, 1, 0, 3, 0, 2, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 1, 0, 2, 0, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1], [1, 1, 2, 2, 2, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(abs(in1), max(min(i1, int(4.0)), i2)) != ( int(1.0) - in1 ):{:\\ni1 -= in2\\nb0 = ( ( in2 * int(7.0) ) \\ge ( int(1.0) * i0 ) or not int(7.0) == abs(( int(2.0) * min(int(4.0), int(1.0)) )) )\\nloopBreak% = 0\\nwhile i1 \\ge divInt(max(abs(abs(in0)), int(0.0)),( int(0.0) + in2 )):{:\\nif int(2.0) == ( divInt(mod(res0,res0),divInt(max(abs(abs(divInt(( res0 + abs(divInt(in2,in0)) ),i2))), max(divInt(in2,in1), abs(in1))),max(i0, in0))) + int(0.0) ):{:\\nin1 = int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not not in1 \\l max(i0, divInt(int(6.0),in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 14, 14, 6, 2, 1, 10, 6, 4, 0, 1, 26, 2, 70, 15, 17, 8, 8]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 0, 1], [0], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 9, 7, 5, 3, 4, 9, 5, 1, 5], [2, 4], [2], [], [1, 1], [0, 0], [], [], [0], [4, 2, 5, 6, 4, 5, 6, 6, 5, 5], [0, 0], [2, 0, 0, 2, 1, 3, 2, 0, 0, 3, 2, 1, 1, 1, 3, 2, 2, 0, 0, 1, 0, 3, 2, 1, 3, 0, 1, 1], [0, 1, 0, 1, 0, 1, 1], [0, 1, 2, 2, 0], [2, 2, 0], [1, 1, 0, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( i2 * in2 )\\nif mod(int(6.0),min(( res0 * in1 ), max(mod(int(9.0),int(7.0)), int(5.0)))) == abs(( divInt(in2,res0) + int(3.0) )):{:\\nb2 = res0 \\le abs(divInt(int(4.0),min(in2, int(9.0))))\\n:}\\nin2 = int(515.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 10, 10, 2, 1, 0, 2, 2, 0, 0, 1, 10, 2, 28, 7, 5, 3, 4]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 6, 4, 2], [0], [3, 2, 2, 0, 0, 0], [1, 1], [2], [], [0, 1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = abs(divInt(mod(res0,in1),i2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6, 2, 1, 0, 2]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 1, 2, 0, 0, 2, 0, 1], [1, 0, 1], [0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 6, 1, 9, 2, 4, 9, 6, 3, 0, 0, 4, 4, 2, 3, 5, 6, 3, 8, 4, 6, 6, 8, 5, 4, 9, 3, 7, 9, 5, 3, 7, 4, 1, 6, 5, 4, 2, 2, 6, 0, 6, 6, 0, 8, 5, 0, 4, 4, 3, 1, 8, 9], [5, 5, 5, 2, 3, 2, 2], [1, 1, 1, 2, 0], [1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 0, 3, 1, 1, 3], [1, 1, 0], [1], [6, 2, 3, 0, 2, 2, 0, 5, 1, 3, 6, 3, 1, 4, 4, 5, 2, 4, 3, 1, 6, 3, 3, 0, 3, 4, 6, 1, 1, 2, 1, 5, 4, 4, 2, 1, 4, 1, 4, 6, 6, 1, 6, 3, 4, 5, 4, 1, 4, 2, 2, 6, 3, 1, 3, 4, 5], [0, 1], [1, 2, 2, 1, 2, 0, 2, 3, 0, 3, 1, 1, 3, 3, 3, 2, 1, 2, 3, 2, 3, 0, 3, 3, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 1, 2, 3, 2, 0, 2, 2, 3, 2, 2, 0, 0, 3, 1, 3, 2, 1, 0, 0, 2, 3, 2, 1, 0, 0, 1, 3, 2, 3, 3, 2, 0, 1, 2, 0, 2, 1, 3, 0, 1, 1, 3, 1, 1, 1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 1, 1, 0, 2, 3, 3, 0, 0, 3, 3, 0, 0, 1, 1, 3, 3, 3, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 2, 0, 0, 3, 1, 0, 1, 3, 2, 2, 1, 3, 2, 0, 2, 2, 2, 2, 3, 0, 3, 0, 1, 3, 1, 1, 0, 2, 3, 0, 1, 3, 3, 1, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 3, 2, 2, 0, 0, 1, 3, 2, 0, 3, 0, 0, 1, 2, 3, 3, 3, 3, 0, 3, 2, 0, 1, 3, 0, 1, 3, 3, 1, 1, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 3, 3, 1, 2, 2, 1, 3, 3, 3, 1, 0, 2, 0, 1, 2, 3, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 2, 2, 0, 2, 0, 1, 0, 1, 1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 1, 1, 0, 2, 0, 2, 0, 2, 2, 1, 1, 2, 0, 1, 1, 2, 0, 2, 0, 2, 1, 2, 0, 0, 0, 2, 0, 1, 1, 1, 0, 0, 2, 1, 1, 1, 2, 2, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 0], [2, 0, 2, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 1, 0, 0, 2, 1, 2], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( int(8.0) != divInt(divInt(int(6.0),mod(res0,divInt(max(i2, min(int(6.0), int(1.0))),abs(abs(min(mod(int(9.0),mod(abs(( min(in0, max(min(int(2.0), mod(( int(4.0) * i0 ),int(9.0))), i2)) + i2 )),int(6.0))), divInt(int(3.0),( max(( i0 * ( ( max(mod(( in2 - i1 ),abs(int(0.0))), min(divInt(int(0.0),in0), res0)) - divInt(abs(( int(4.0) + in0 )),i1) ) + int(4.0) ) ), abs(( abs(max(mod(in1,int(2.0)), ( in1 * divInt(int(3.0),abs(in2)) ))) + int(5.0) ))) + int(6.0) )))))))),min(int(3.0), int(8.0))) or ( False or b1 ) )\\nloopBreak% = 0\\nwhile ( False or int(4.0) != min(int(6.0), max(divInt(int(6.0),int(8.0)), int(5.0))) ):{:\\nb1 = int(4.0) != ( int(9.0) + int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i2 == mod(max(min(in1, in0), abs(min(i1, res0))),int(7.0)):{:\\nin0 = int(9.0)\\nb2 = True\\n:}else:{:\\nloopBreak% = 0\\nwhile abs(min(abs(in0), ( mod(i0,abs(max(max(abs(min(max(max(abs(in0), min(abs(min(abs(int(5.0)), mod(in1,res0))), max(int(3.0), i1))), int(7.0)), abs(( ( int(4.0) + min(mod(i1,mod(divInt(( divInt(min(i2, min(i1, int(1.0))),abs(int(6.0))) - int(5.0) ),in2),mod(min(in1, int(4.0)),max(max(int(2.0), in1), mod(int(2.0),i2))))), int(6.0)) ) * i1 )))), in1), int(0.0)))) - i1 ))) \\ge in1:{:\\nres0 += res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( max(( divInt(i1,res0) + int(6.0) ), min(divInt(in0,min(in1, in2)), int(6.0))) == mod(abs(max(max(max(in1, abs(mod(i1,int(0.0)))), abs(in1)), int(8.0))),min(abs(int(5.0)), int(0.0))) or ( divInt(min(max(i2, i2), abs(res0)),int(4.0)) * in0 ) == min(abs(int(4.0)), ( mod(int(3.0),max(min(abs(int(1.0)), i1), ( in0 - int(8.0) ))) * mod(min(int(9.0), in1),in2) )) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 54, 54, 7, 5, 4, 15, 7, 8, 3, 1, 57, 2, 227, 49, 69, 20, 30]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1], [1, 9], [5], [1, 1], [], [1, 0], [0], [1], [0], [], [1, 1, 3, 1], [], [2, 3, 3, 0, 3, 2, 0, 3, 0, 0, 1, 1], [0, 1], [2, 1, 2, 0], [2], [0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( abs(max(i1, abs(divInt(i1,min(in0, i1))))) * int(1.0) ) != int(9.0)\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 1, 1, 1, 0, 4, 0, 12, 2, 4, 1, 1]}, {"genotype": [[0], [1], [0], [], [0], [1], [3], [1], [2], [], [1], [0], [], [], [], [4, 0, 1, 0, 2, 4], [], [2, 2, 0, 0, 3, 2, 3, 0, 3, 0, 3, 1, 0, 0], [0, 0, 0], [1, 1, 2, 2], [2, 0, 2], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( in1 * i0 ) + max(( max(i1, abs(i0)) * abs(int(3.0)) ), i2) ) \\g in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 6, 0, 14, 3, 4, 3, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [1, 9], [0], [2], [], [1], [0], [], [], [], [3, 3, 6], [], [2, 2, 3, 0, 0, 3, 3, 3, 1, 0, 3, 1], [0, 1], [2, 1, 2, 2, 2], [1], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( divInt(abs(in0),in0) - max(abs(abs(int(1.0))), res0) ) \\l abs(int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 12, 2, 5, 1, 1]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1], [6, 4, 6, 3, 5, 1, 2], [], [], [], [], [], [], [], [], [4, 2, 1, 2, 2, 5, 4, 3, 3, 4, 2, 3, 6, 4], [0, 1], [3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 3, 3, 2, 3, 2, 1, 0, 3, 1, 0, 1, 3, 2, 0, 0, 0, 1, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 2, 2], [2, 0, 0, 1, 0, 2], [0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(min(min(i2, ( divInt(( mod(mod(i1,i2),i2) * ( max(max(( min(divInt(int(6.0),in2), abs(int(4.0))) + in1 ), int(6.0)), abs(divInt(in0,in0))) + in1 ) ),int(3.0)) - i2 )), ( int(5.0) + divInt(int(1.0),int(2.0)) )), in0)\\nres0 *= in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 14, 2, 38, 11, 8, 6, 6]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 1, 1, 1, 1, 2, 1, 0], [0, 1, 0], [1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 6, 9, 9, 4, 9, 3, 8, 8, 8, 1, 5, 0, 8, 7, 1, 8, 0, 2, 7, 2, 2, 0, 6, 8], [4, 5], [2, 0, 1], [], [1, 0, 0, 0, 0, 1], [0, 0], [1, 1, 0, 2], [0, 0], [1, 0], [0, 1, 2, 1, 0, 0, 4, 5, 0, 3, 4, 2, 2, 4, 6, 2, 3], [1, 0, 0, 1], [1, 0, 3, 3, 0, 3, 3, 3, 3, 1, 0, 1, 3, 1, 0, 2, 3, 3, 1, 3, 2, 1, 2, 1, 3, 2, 0, 2, 3, 2, 3, 1, 0, 3, 1, 2, 1, 2, 1, 3, 0, 1, 2, 3, 2, 2, 0, 0, 1, 1, 1, 3, 2, 2, 3, 1, 1, 0, 1, 2, 2, 1, 1, 1, 1, 3, 2, 2, 0, 0, 2, 3, 1, 1, 0, 2, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 2, 1, 1, 2, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 1, 2, 2, 2], [2, 0, 0, 1, 1, 0, 2, 1, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(0.0) \\le i0:{:\\nloopBreak% = 0\\nwhile True:{:\\ni1 *= min(abs(i2), max(max(abs(abs(int(7.0))), i1), int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = abs(int(9.0))\\n:}else:{:\\ni0 = in1\\nb2 = True\\nif b0:{:\\nb1 = not ( min(abs(int(9.0)), min(( int(4.0) + mod(int(9.0),min(divInt(in2,mod(min(divInt(min(int(3.0), i0),max(int(8.0), ( int(8.0) + ( int(8.0) - min(in0, int(1.0)) ) ))), ( max(mod(mod(in1,i2),int(5.0)), int(0.0)) - int(8.0) )),max(divInt(divInt(abs(int(7.0)),int(1.0)),i2), int(8.0)))), ( mod(int(0.0),int(2.0)) + int(7.0) ))) ), int(2.0))) * abs(divInt(( in1 - res0 ),( abs(int(2.0)) + int(0.0) ))) ) != i2\\n:}\\nin0 += divInt(int(6.0),int(8.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 26, 26, 2, 3, 0, 6, 2, 4, 2, 2, 17, 4, 78, 19, 20, 10, 11]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [1, 1, 1, 2, 1, 0], [0], [1, 0, 1, 0, 1], [1, 1, 1, 1], [5, 8, 4, 2], [4, 1], [0, 0, 2], [], [1, 1, 0], [0, 0], [0], [], [1], [2, 6, 5, 0, 0, 1, 0, 2, 5], [1, 1, 0], [3, 1, 3, 3, 0, 0, 0, 1, 0, 2, 1, 0, 0, 1], [1], [2, 1, 1], [1, 1], [1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= abs(int(5.0))\\nb0 = max(max(res0, in2), i0) \\le int(8.0)\\ni0 -= i1\\nif mod(int(4.0),i0) \\g i2:{:\\nb0 = b2\\n:}else:{:\\nin2 = int(2.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 4, 4, 2, 3, 0, 3, 2, 1, 0, 1, 9, 3, 14, 1, 3, 2, 1]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 4, 9, 0, 4, 9, 6, 8, 3, 8, 6, 6, 4, 2, 4, 2, 1, 8], [0, 2], [0, 2], [1], [0, 0, 0, 1, 1], [0, 0], [3, 0, 2], [], [0], [2, 2, 2, 4, 1, 6, 5, 1, 1, 2, 4, 5, 6, 5, 6, 2, 4, 2, 0, 6], [1], [1, 0, 3, 1, 2, 3, 3, 0, 3, 3, 3, 2, 2, 3, 1, 2, 1, 2, 2, 1, 1, 3, 0, 1, 3, 1, 3, 1, 0, 3, 1, 2, 2, 2, 2, 2, 1, 1, 3, 3, 0, 1, 1, 1, 2, 1, 0, 0, 3, 3, 1, 2, 0, 0, 0, 2, 0, 1, 2, 0, 0, 3, 0, 2, 0, 3, 0, 3, 0, 0, 3, 3, 1, 0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0, 1, 2], [1, 2, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( b2 or not int(4.0) \\l i2 )\\nif max(int(2.0), divInt(max(min(i2, min(max(min(( divInt(max(int(4.0), ( int(9.0) - ( divInt(int(0.0),int(4.0)) * abs(i2) ) )),int(9.0)) + max(int(6.0), min(int(8.0), in1)) ), abs(int(3.0))), divInt(mod(divInt(( mod(int(8.0),int(6.0)) + min(max(i1, int(6.0)), int(4.0)) ),int(2.0)),( int(4.0) + res0 )),in2)), max(min(int(2.0), ( i1 + i1 )), i2))), ( in1 + int(1.0) )),( in2 + res0 ))) == max(in2, ( res0 * min(i2, min(in1, i2)) )):{:\\ni0 += max(abs(int(8.0)), res0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 19, 19, 2, 2, 1, 5, 2, 3, 0, 1, 20, 1, 74, 16, 20, 10, 7]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [1, 1], [1, 1, 1], [3, 0, 2], [], [1], [], [0, 0], [], [2, 0], [], [0], [6, 2, 2, 5, 1], [0, 1], [0, 2, 1, 2, 1, 3, 3, 0, 0, 1], [0, 1], [1, 0], [2, 2], [0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = i2\\nif not b1:{:\\ni2 *= ( int(3.0) * divInt(int(0.0),max(min(in2, i1), int(2.0))) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 0, 1, 0, 2, 0, 2, 0, 1, 5, 2, 10, 2, 2, 2, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 0, 0, 6, 5, 0, 1, 3, 5, 2, 6, 4, 5, 3, 8, 0, 4, 8, 6, 5, 3, 1, 0, 3, 3, 0, 7, 4], [3], [2], [], [1], [0], [], [], [], [1, 3, 2, 4, 5, 1, 3, 4, 3, 2, 3, 1, 3, 5, 5, 0, 2, 6, 3, 6, 6, 5, 4, 0, 2, 1, 3, 1, 2, 5, 1, 6, 1, 6, 1, 5, 6, 3], [0], [2, 3, 3, 3, 2, 0, 3, 3, 1, 0, 3, 2, 0, 2, 3, 3, 2, 1, 2, 0, 2, 3, 3, 3, 0, 2, 0, 2, 3, 2, 2, 2, 3, 1, 2, 0, 3, 2, 0, 3, 0, 2, 0, 2, 1, 2, 3, 0, 0, 3, 1, 0, 1, 2, 0, 2, 3, 2, 3, 2, 2, 2, 0, 2, 1, 2, 1, 2, 1, 2, 0, 1, 1, 1, 0, 3, 0, 0, 3, 1, 2, 0, 2, 3, 0, 3, 1, 2, 0, 0, 3, 3, 0, 0, 2, 0, 3, 1, 3, 1, 0, 1, 1, 2, 1, 3, 3, 2, 1, 1, 3, 2, 1, 2, 2, 1, 0, 3, 2, 2, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 0, 0, 2, 1, 0, 3, 2, 1, 0, 3, 2, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 2, 0, 2, 2, 0, 1, 2, 1, 1, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 1, 2, 1, 2, 1, 1, 2, 1, 1, 0, 1, 2, 2], [0, 2, 1, 2, 0, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = divInt(max(abs(min(( in0 + abs(abs(int(1.0))) ), i2)), min(mod(in1,( max(abs(divInt(int(5.0),mod(in2,( max(max(min(i1, mod(in0,mod(abs(mod(( ( abs(int(0.0)) * divInt(in1,abs(( in0 - min(i2, mod(in0,divInt(int(0.0),( max(i1, in0) * abs(int(6.0)) )))) ))) ) + in2 ),int(5.0))),( in2 - ( abs(divInt(min(divInt(( ( i0 - ( int(0.0) + divInt(int(1.0),mod(int(3.0),divInt(i2,int(5.0)))) ) ) * int(2.0) ),int(6.0)), res0),min(in0, res0))) * max(int(4.0), divInt(res0,( abs(in2) * max(int(5.0), ( in1 + i0 )) ))) ) )))), abs(max(i2, i1))), divInt(in0,max(int(3.0), abs(int(8.0))))) + i1 )))), int(0.0)) + int(4.0) )), divInt(int(8.0),max(max(( int(6.0) + int(5.0) ), min(divInt(int(3.0),divInt(divInt(int(1.0),i2),max(mod(( in2 + int(0.0) ),( i1 + int(3.0) )), res0))), int(3.0))), int(0.0))))),( ( i1 - res0 ) - divInt(int(7.0),i1) ))\\nb2 = abs(( int(4.0) + in2 )) \\ge abs(mod(res0,in0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 29, 29, 1, 1, 0, 1, 1, 0, 0, 0, 38, 1, 143, 44, 33, 20, 24]}, {"genotype": [[0], [1], [0], [], [0], [1], [9], [5], [0], [], [1], [0], [], [], [], [4], [], [0, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = in1 != abs(int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [0, 1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 4, 8, 7, 8, 6, 6, 3, 5, 3, 7, 6, 0, 8, 2, 7, 1, 5, 8, 9, 9, 5, 6, 6, 9, 4, 3, 4, 9, 4, 4, 6, 2, 6, 0, 5, 7, 9, 8, 6, 4, 8, 5, 3, 0], [1, 2, 2], [2], [0, 1], [1, 0, 0, 0, 0, 1, 1], [0, 0, 0], [2, 3, 3, 0], [], [0], [6, 5, 2, 2, 1, 4, 4, 4, 0, 1, 1, 4, 1, 0, 3, 4, 3, 5, 6, 0, 1, 3, 4, 4, 6, 6, 6, 3, 1, 3, 5, 2, 4, 0, 1, 3, 1, 1, 5], [0], [3, 1, 3, 1, 1, 2, 1, 1, 3, 1, 0, 2, 3, 1, 3, 2, 3, 1, 1, 2, 3, 2, 0, 3, 0, 3, 3, 3, 2, 2, 0, 3, 1, 3, 1, 2, 3, 0, 0, 2, 3, 2, 0, 3, 3, 2, 0, 3, 3, 2, 3, 1, 2, 2, 3, 2, 1, 1, 1, 2, 3, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1, 2, 2, 3, 0, 0, 2, 1, 2, 2, 2, 0, 2, 3, 1, 0, 2, 1, 0, 0, 3, 1, 1, 3, 1, 2, 0, 3, 2, 2, 3, 1, 0, 1, 1, 1, 3, 0, 0, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 0, 3, 2, 2, 3, 0, 0, 1, 1, 3, 0, 2, 2, 2, 3, 2, 2, 2, 1, 0, 1, 3, 3, 2, 0, 1, 0, 3, 2, 1, 3, 2, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 0, 1, 2, 3, 1, 1, 0, 3, 1, 2, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 2, 2, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2, 1, 2, 0, 1, 0, 0, 0, 2, 1, 2], [2, 0, 0, 2, 0, 1, 2, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 1, 2, 2], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(int(0.0), max(int(6.0), int(4.0))) \\g mod(int(8.0),int(7.0)):{:\\nloopBreak% = 0\\nwhile not ( ( b2 and min(int(8.0), res0) == divInt(min(int(6.0), abs(divInt(max(int(6.0), int(3.0)),( min(( in2 * abs(i2) ), max(max(min(( ( i2 + max(int(5.0), abs(int(3.0))) ) + divInt(min(i1, in1),( abs(mod(in1,abs(max(divInt(in1,max(max(( max(int(7.0), divInt(( abs(mod(int(6.0),int(0.0))) * int(8.0) ),( min(int(2.0), i0) + i1 ))) - i1 ), min(int(7.0), in1)), ( i1 * int(1.0) ))), mod(mod(abs(i0),in0),divInt(int(5.0),( ( divInt(in1,mod(abs(int(8.0)),in0)) + ( int(9.0) + in2 ) ) * res0 ))))))) + abs(int(9.0)) )) ), int(5.0)), min(int(6.0), divInt(i0,min(mod(divInt(max(int(6.0), i1),int(9.0)),int(4.0)), int(3.0))))), max(in0, in1))) + in1 )))),int(4.0)) ) or mod(max(int(9.0), ( abs(int(4.0)) + ( abs(res0) * min(( divInt(abs(res0),res0) * int(4.0) ), int(6.0)) ) )),max(in0, ( divInt(divInt(abs(divInt(divInt(( int(2.0) * i1 ),int(6.0)),min(max(( in0 + int(0.0) ), in2), min(mod(int(5.0),min(divInt(int(7.0),( ( int(9.0) - i2 ) * int(8.0) )), in1)), divInt(i0,int(6.0)))))),min(abs(i1), int(4.0))),divInt(max(int(8.0), int(5.0)),in0)) * abs(int(3.0)) ))) == divInt(i1,int(0.0)) ):{:\\ni1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 46, 46, 3, 1, 2, 7, 3, 4, 0, 1, 39, 1, 176, 47, 45, 20, 27]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [7, 0], [3], [2], [], [1], [0], [], [], [], [4, 4, 2, 0], [], [2, 2, 0, 1, 3, 2, 1, 0, 0, 0], [1, 0, 0], [1], [1, 2], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(( in1 - int(7.0) ),max(( int(0.0) * in1 ), i2)) \\ge i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 10, 3, 1, 2, 1]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 2, 0, 2, 0, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 6, 2, 2, 2, 2, 3, 1, 3, 5, 8, 3, 5, 4, 2, 2, 6, 1], [5], [1], [], [1, 0, 0], [0], [0, 1], [1], [], [6, 1, 4, 3, 4, 1, 3, 1, 1, 6, 1, 3, 1, 0, 4, 1, 1, 0, 1, 2, 1, 3, 1, 2, 0, 5, 1], [1, 1, 0], [0, 3, 1, 2, 3, 1, 0, 2, 3, 3, 3, 0, 0, 1, 1, 1, 2, 0, 2, 1, 2, 2, 3, 3, 2, 1, 3, 0, 2, 2, 1, 3, 2, 0, 1, 1, 1, 2, 3, 2, 0, 2, 0, 2, 2, 1, 2, 0, 1, 0, 1, 2, 3, 2, 0, 3, 3, 0, 0, 2, 3, 2, 1, 3, 3, 0, 0, 2, 2, 2, 2, 0, 3, 1, 2, 3, 0, 0, 0, 2, 3, 1, 0, 0, 3, 3, 1, 0, 2, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 1, 2, 1, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 1, 2, 2, 2], [1, 2, 2, 2, 2, 0, 1, 2, 1, 1, 1, 0, 2, 1, 0, 2], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile res0 != min(int(8.0), ( abs(int(9.0)) - i1 )):{:\\nloopBreak% = 0\\nwhile b1:{:\\nin1 *= mod(max(abs(max(in0, in1)), int(6.0)),int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\ni1 *= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = ( i1 * divInt(int(2.0),( divInt(abs(min(mod(int(2.0),min(i1, ( ( int(3.0) * min(mod(res0,int(1.0)), int(3.0)) ) + int(5.0) ))), divInt(abs(( i1 - ( in0 * divInt(( int(8.0) - ( i1 - int(3.0) ) ),i0) ) )),int(5.0)))),( abs(( in1 - min(min(i1, i1), divInt(min(( int(4.0) + min(abs(i0), i1) ), ( ( divInt(mod(i2,abs(int(2.0))),mod(max(i1, in0),i1)) * mod(abs(int(2.0)),i2) ) - i0 )),abs(abs(int(6.0))))) )) + in2 )) * mod(i1,int(1.0)) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 19, 19, 1, 1, 0, 3, 1, 2, 1, 0, 27, 3, 91, 27, 21, 16, 13]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 0], [0, 0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 2, 5, 7, 3, 9, 6, 7, 1, 6, 6, 9, 8, 6, 9, 2, 2, 8, 2, 4, 0, 8, 5, 9, 0, 0, 2, 3, 1, 5, 0, 9, 8, 8, 2, 0, 5, 5, 3, 0, 9, 7, 2, 0, 2, 8, 2, 2, 3, 7, 0, 9, 4, 4, 6, 8, 9, 3, 7, 7], [0, 0, 0, 0, 2], [1, 0, 1, 1], [1, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0], [3, 2, 2, 0, 2, 3, 0, 3], [], [1, 0], [1, 6, 1, 5, 3, 4, 4, 5, 1, 0, 5, 1, 6, 6, 6, 1, 5, 2, 5, 6, 5, 3, 4, 4, 2, 2, 1, 4, 2, 0, 4, 3, 1, 5, 3, 5, 3, 5, 5, 4, 4, 1, 3, 5, 4, 3, 3, 2, 0, 4, 2, 1, 5, 4, 3, 2, 4, 1, 2, 1, 2, 6, 5, 5, 3, 5, 1, 1, 1, 2, 2, 2], [], [0, 1, 2, 0, 0, 0, 2, 0, 1, 3, 2, 3, 3, 2, 3, 1, 1, 3, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 1, 1, 0, 1, 3, 1, 0, 3, 3, 0, 3, 3, 2, 3, 3, 2, 1, 2, 0, 1, 2, 1, 2, 0, 3, 2, 3, 1, 2, 0, 2, 3, 2, 1, 0, 2, 2, 2, 1, 0, 3, 1, 3, 2, 2, 1, 3, 0, 0, 2, 2, 0, 1, 3, 0, 3, 0, 3, 2, 0, 2, 3, 0, 2, 1, 0, 3, 1, 3, 0, 2, 2, 2, 3, 1, 0, 0, 1, 1, 1, 3, 0, 0, 0, 0, 1, 2, 2, 1, 0, 2, 1, 3, 3, 1, 2, 3, 2, 0, 0, 2, 2, 2, 0, 2, 2, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 2, 2, 2, 2, 0, 2, 0, 1, 2, 3, 1, 3, 3, 1, 0, 1, 0, 2, 0, 0, 0, 2, 3, 3, 2, 3, 1, 2, 0, 1, 2, 1, 0, 3, 0, 3, 1, 1, 3, 0, 2, 0, 0, 2, 3, 0, 1, 2, 2, 0, 1, 2, 3, 2, 0, 2, 2, 0, 3, 1, 2, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 1, 2, 0, 1, 3, 3, 2, 2, 2, 0, 0, 2, 3, 3, 0, 2, 1, 1, 2, 2, 2, 1, 1, 0, 1, 2, 1, 3, 3, 0, 2, 0, 1, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 2, 2, 2, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [2, 1, 2, 0, 1, 2, 0, 0, 0, 0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 0, 1, 1, 0, 1, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 2, 2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 0, 2, 2, 1, 0, 2, 1, 0, 1, 2, 1, 2, 2, 1, 0], [2, 0, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2, 1, 2, 2, 0, 2, 1, 1, 0, 0, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 2, 0, 0, 1, 2, 0, 1, 2], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 83, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( i1 \\l int(2.0) or mod(res0,i1) \\l in2 ):{:\\nif not not b1:{:\\nb0 = not ( b1 or ( ( in0 * int(5.0) ) \\l abs(mod(max(abs(mod(min(int(2.0), int(5.0)),max(in1, int(7.0)))), int(3.0)),int(9.0))) and divInt(( mod(( ( ( mod(int(6.0),abs(in1)) + min(min(int(7.0), int(1.0)), in2) ) + int(6.0) ) * min(int(6.0), i1) ),min(abs(i0), abs(max(( max(max(divInt(int(9.0),( in2 + int(8.0) )), ( int(6.0) - divInt(i1,abs(( abs(int(9.0)) * ( res0 * ( abs(divInt(int(2.0),res0)) + divInt(( ( int(2.0) + res0 ) + abs(int(8.0)) ),min(divInt(( int(2.0) * max(i1, in2) ),divInt(( i2 + int(4.0) ),max(in2, min(res0, max(divInt(in2,mod(min(in0, ( int(0.0) * in1 )),min(int(8.0), max(in1, ( mod(( max(int(5.0), i2) * i2 ),int(9.0)) + int(0.0) ))))), int(0.0)))))), abs(i1))) ) ) ))) )), in1) + i2 ), i0)))) * int(2.0) ),( divInt(int(3.0),in1) + ( int(1.0) * abs(min(int(5.0), ( min(mod(in0,i1), ( ( divInt(in2,mod(( max(max(( abs(min(min(int(0.0), ( abs(max(mod(divInt(( ( ( in0 * divInt(in2,int(9.0)) ) - mod(abs(int(8.0)),abs(min(int(8.0), in0))) ) * int(2.0) ),in2),( in2 * in1 )), in1)) + ( abs(max(divInt(abs(int(0.0)),( i1 * int(5.0) )), ( int(5.0) - in0 ))) - max(in2, max(int(3.0), int(0.0))) ) )), max(in1, divInt(in0,in0)))) + mod(max(i2, int(9.0)),divInt(mod(i0,int(7.0)),mod(abs(mod(in1,( mod(i2,min(int(2.0), ( int(0.0) + ( int(2.0) * i1 ) ))) + int(8.0) ))),in2))) ), in1), in0) + int(2.0) ),int(2.0))) - i2 ) - in1 )) * int(3.0) ))) ) )) \\l ( i1 + int(7.0) ) ) )\\n:}\\n:}else:{:\\nb1 = ( i2 + int(0.0) ) == abs(abs(( ( ( i1 * i2 ) * ( max(min(res0, ( int(9.0) - int(4.0) )), ( mod(( int(4.0) * int(6.0) ),in2) + int(8.0) )) + ( int(9.0) - abs(max(in2, ( in0 * int(3.0) ))) ) ) ) + min(max(abs(max(abs(in2), abs(i1))), max(i1, min(i1, divInt(( ( i2 - i2 ) * i2 ),int(7.0))))), int(7.0)) )))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 61, 61, 5, 4, 3, 13, 5, 8, 0, 2, 72, 0, 280, 82, 65, 49, 33]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 1, 1], [9, 0, 8, 2, 5], [2, 2, 4], [0, 0], [0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0], [3, 3, 3, 1, 3, 2, 1, 0], [1, 1], [], [5], [], [1, 1, 3, 0, 1, 1, 1], [], [2], [], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(9.0) == int(0.0) and ( ( abs(in2) == int(8.0) or False ) or int(2.0) \\le int(5.0) ) ):{:\\nb0 = ( not False or b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 5, 5, 3, 2, 4, 11, 3, 8, 2, 0, 1, 0, 7, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 1, 0, 2, 0], [1, 1], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [6, 1, 2, 3, 0, 2, 1], [2, 0, 4], [2, 1, 0], [], [0, 1, 0, 1, 1, 0], [0, 0, 0], [1, 2, 1], [1, 0], [], [4, 3, 2, 0, 4], [], [1, 1, 1, 0, 3, 2, 3, 0, 0, 1, 3, 2, 2, 1, 0, 0, 2, 1, 1], [1, 1, 0, 0], [0, 2, 0], [1, 0], [1, 1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb2 = int(6.0) == int(1.0)\\nb1 = not int(2.0) \\l in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(mod(abs(in0),i2), int(3.0)) \\le min(mod(( int(0.0) - i0 ),in1), ( int(2.0) + int(1.0) )):{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 7, 7, 3, 3, 0, 6, 3, 3, 2, 0, 5, 0, 19, 4, 3, 2, 2]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1, 1], [8, 0, 4], [5], [1], [], [1], [0], [], [], [], [3, 3, 5], [1], [2, 0, 1, 2, 0, 1, 1], [1, 0], [], [2, 0], [1]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(in0,int(8.0)) != ( in0 * int(0.0) )\\nin2 += int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 7, 2, 0, 2, 1]}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1], [2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 6, 3, 0, 3, 0, 4, 4, 4, 4, 4, 5, 6, 7, 0, 5, 0, 4, 2, 8, 5, 9, 0, 5, 0, 7, 5], [5, 2, 4, 1, 5, 1], [2, 0, 2, 1, 0, 0, 0, 1], [0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [2, 3, 2, 3, 2, 1, 0, 0, 0], [1], [1], [6, 1, 3, 5, 0, 3, 4, 3, 2, 1, 3, 5, 4, 0, 1, 6, 1, 2, 4, 6, 2, 6, 4, 6, 6, 0, 3, 6, 1, 1, 5, 3, 4, 6], [], [2, 0, 3, 2, 2, 0, 3, 3, 3, 2, 3, 3, 2, 3, 1, 3, 2, 0, 0, 0, 2, 1, 2, 3, 3, 3, 2, 0, 2, 2, 3, 1, 1, 2, 2, 3, 2, 3, 3, 1, 2, 0, 1, 0, 0, 3, 3, 2, 1, 2, 3, 0, 0, 3, 0, 0, 1, 0, 2, 3, 0, 2, 2, 1, 2, 0, 0, 3, 1, 0, 1, 3, 1, 2, 2, 3, 3, 0, 3, 1, 0, 1, 0, 1, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 0, 1, 2, 0, 3, 1, 1, 1, 0, 3, 1, 0, 3, 3, 0, 0, 0, 3, 3, 2, 0, 2, 1, 1, 1, 3, 1, 2, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 1, 1, 2, 1, 2, 0, 1, 0, 0, 2, 0, 2, 1, 0, 1, 1, 0, 1, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 1, 1], [1, 0, 2, 2, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 2], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( ( res0 - abs(( ( i1 + abs(max(max(( abs(max(mod(abs(int(5.0)),min(divInt(in0,in2), i0)), ( int(3.0) * ( max(min(min(mod(in0,mod(divInt(abs(int(6.0)),int(3.0)),( ( min(divInt(abs(max(int(0.0), divInt(in1,int(3.0)))),in0), i2) * min(max(( int(0.0) + mod(max(i1, in0),min(in2, in1)) ), int(4.0)), i0) ) - divInt(max(i1, ( ( int(4.0) + divInt(res0,i1) ) * max(int(4.0), i2) )),int(4.0)) ))), abs(int(4.0))), ( ( max(min(in1, abs(int(5.0))), res0) - int(6.0) ) + i2 )), int(7.0)) + int(0.0) ) ))) - res0 ), in1), int(5.0))) ) - divInt(( mod(int(0.0),res0) + divInt(res0,int(4.0)) ),( i0 * abs(int(2.0)) )) )) ) != int(8.0) and not int(5.0) == in0 ):{:\\nloopBreak% = 0\\nwhile ( abs(int(9.0)) \\le res0 and not abs(abs(i1)) \\g i1 ):{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = b2\\nb1 = b0\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = in2 != abs(max(divInt(in0,mod(int(0.0),int(5.0))), int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = max(int(7.0), divInt(int(5.0),in1)) \\g res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 28, 28, 6, 8, 2, 15, 6, 9, 1, 1, 34, 0, 125, 31, 32, 15, 16]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [0, 4, 8], [0], [0], [], [1], [0], [], [], [], [0, 2], [], [2, 1, 2, 1, 2, 1, 3, 0, 0], [1, 1, 1], [2], [], [0, 1, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = divInt(int(0.0),mod(int(4.0),mod(int(8.0),abs(i0)))) \\l i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 9, 3, 1, 0, 3]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [2, 5, 6, 1], [1, 0], [0, 0], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= in2\\nres0 = i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1], [5, 0, 0, 6, 1, 8], [], [], [], [], [], [], [], [], [2, 0, 1, 2], [0], [3, 3, 2, 1, 1, 2, 2, 1, 1, 2, 3, 2, 3, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1], [0, 0, 2, 1], [0], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = min(min(( int(5.0) + int(0.0) ), divInt(divInt(int(0.0),int(6.0)),mod(abs(divInt(max(i0, i1),int(1.0))),i2))), int(8.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 18, 5, 4, 1, 4]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [2, 0, 1, 1, 1, 2, 0, 1, 0, 0], [1, 1], [1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 6, 6, 5, 5, 9, 7, 3, 8, 6, 1], [5, 4], [1, 0, 2, 1, 2], [], [1, 0, 0, 1, 0], [0, 0], [1, 0, 0], [1], [], [1, 1, 2, 1, 5, 3, 6, 5, 1, 4, 1, 5, 1, 1, 2], [1, 0, 1, 1, 0], [0, 0, 3, 0, 1, 3, 2, 2, 3, 0, 2, 0, 1, 2, 1, 1, 1, 3, 3, 2, 2, 3, 0, 2, 1, 0, 1, 2, 1, 0, 3, 1, 1, 0, 2, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 2, 2, 2, 1], [0, 0, 1, 1, 2, 1, 0], [1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 != i1:{:\\ni2 += min(i1, int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = min(mod(( max(in0, ( res0 + int(6.0) )) - divInt(int(6.0),int(6.0)) ),int(5.0)), abs(abs(( divInt(abs(in2),( int(5.0) - i1 )) * int(9.0) ))))\\nin1 -= mod(int(7.0),i1)\\nb1 = False\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = max(int(3.0), int(8.0)) \\le in2\\ni1 += divInt(int(6.0),int(1.0))\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 2, 8, 12, 12, 2, 5, 0, 5, 2, 3, 1, 0, 15, 5, 38, 9, 7, 7, 5]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [1, 1, 0], [], [], [], [], [], [], [], [], [2, 3, 2, 6, 2], [0], [2, 2, 3, 0, 0, 2, 3, 1, 2, 1, 0, 3, 3, 3, 3, 1, 0], [1, 0, 0, 0], [2, 0, 0, 2, 2, 2], [2, 1, 1], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = divInt(( abs(in0) * i2 ),( min(int(1.0), ( int(1.0) - res0 )) - min(abs(abs(abs(int(0.0)))), i2) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 17, 4, 6, 3, 1]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1, 1, 1], [4, 3, 7, 5], [1], [], [], [1], [0], [], [], [], [4, 1, 4], [0], [2, 3, 0, 1, 1, 3, 1, 0, 1], [1], [0, 1], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(min(in1, int(4.0)),int(3.0)) \\g max(int(7.0), i1):{:\\nin1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 4, 4, 1, 0, 0, 1, 1, 0, 0, 0, 3, 1, 9, 1, 2, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 2, 6, 2, 0, 3, 4], [], [], [], [], [], [], [], [], [4, 0, 3, 0, 3, 1, 1, 5, 3, 5, 0], [0], [3, 2, 2, 2, 0, 2, 2, 0, 1, 2, 0, 1, 2, 1, 3, 3, 0, 0, 1, 2, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 3, 1, 0, 3, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 2, 1, 2], [2, 1, 2, 0, 2, 0], [1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(( mod(divInt(i0,( divInt(in0,int(9.0)) * ( i0 - int(8.0) ) )),divInt(int(2.0),min(max(in0, i1), int(6.0)))) * mod(( ( ( max(min(abs(i1), in2), in0) + int(2.0) ) * max(int(0.0), in2) ) + abs(i0) ),int(3.0)) ), int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 37, 11, 8, 6, 5]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 1, 2, 0, 2, 2, 2, 0, 1, 2, 2, 2, 1, 1, 2, 0, 2, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 7, 0, 4, 6, 8, 1, 0, 4, 5, 9, 8, 9, 0, 4, 8, 3, 1, 1, 0, 1, 6, 6, 1, 0, 3, 8, 4, 2, 0, 7, 9, 8, 9, 8, 3], [5, 1, 4, 2, 5, 0, 1, 3, 3, 1, 3, 5, 4, 5], [0, 2, 2, 1, 0, 2, 2], [0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 3, 3, 3, 1, 2, 1, 3, 1], [0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 3, 0, 1, 1, 1, 5, 6, 2, 4, 4, 5, 6, 0, 4, 4, 4, 2, 5, 0, 2, 6, 3, 2, 6, 0, 5, 0, 5, 2, 4, 0, 6, 2, 1, 0, 1, 2, 6, 4, 2, 5], [1, 0, 1, 0, 0], [1, 2, 0, 2, 3, 0, 3, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 3, 3, 3, 0, 2, 0, 0, 3, 0, 3, 3, 0, 1, 1, 1, 3, 3, 3, 3, 0, 0, 2, 1, 1, 2, 3, 1, 0, 3, 0, 1, 0, 1, 1, 3, 3, 0, 1, 0, 1, 1, 3, 0, 2, 3, 0, 2, 0, 1, 3, 1, 1, 0, 2, 1, 1, 0, 0, 0, 3, 3, 3, 3, 1, 3, 2, 0, 1, 0, 0, 3, 3, 1, 1, 1, 1, 2, 3, 2, 2, 1, 1, 0, 2, 0, 0, 2, 1, 0, 1, 0, 3, 3, 1, 3, 2, 1, 1, 2, 3, 0, 1, 2, 1, 1, 2, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [2, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 0, 1, 2, 0, 1, 1, 0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\nif int(4.0) != ( i0 - mod(abs(in0),min(( i0 + ( i1 - i1 ) ), i1)) ):{:\\nin2 -= res0\\ni2 = mod(in1,int(3.0))\\nif not abs(min(max(in1, divInt(in2,res0)), abs(i0))) \\g abs(min(in1, int(7.0))):{:\\nin1 += int(0.0)\\n:}\\n:}else:{:\\nif int(4.0) \\le min(min(abs(abs(in1)), i2), ( int(6.0) + int(8.0) )):{:\\nloopBreak% = 0\\nwhile b2:{:\\nif ( ( abs(int(1.0)) + in2 ) == min(i0, int(0.0)) and ( ( i2 != int(4.0) or int(5.0) \\l max(abs(res0), int(9.0)) ) or in0 \\g int(8.0) ) ):{:\\nb1 = int(9.0) \\ge min(i2, mod(max(res0, ( i0 + int(0.0) )),max(int(4.0), int(8.0))))\\n:}else:{:\\nin2 = i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( int(3.0) - int(1.0) ) \\ge in2:{:\\nif True:{:\\nloopBreak% = 0\\nwhile i2 \\g in1:{:\\nb0 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = min(abs(min(min(int(1.0), max(( i0 - int(0.0) ), res0)), i2)), abs(min(int(1.0), int(6.0)))) \\ge int(6.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(1.0) != divInt(min(( divInt(int(0.0),int(3.0)) - i1 ), mod(i0,i1)),( int(8.0) - i2 )):{:\\nb2 = ( int(4.0) \\le res0 or False )\\n:}\\nloopBreak% = 0\\nwhile min(min(int(2.0), abs(divInt(int(0.0),int(7.0)))), ( max(in1, int(9.0)) + mod(int(8.0),int(9.0)) )) != ( int(8.0) + int(3.0) ):{:\\ni2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 10, 10, 37, 37, 14, 7, 4, 25, 14, 11, 3, 6, 42, 5, 126, 21, 31, 14, 9]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 0, 2, 2, 2, 1, 0, 2, 1, 1], [1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 9, 4, 7, 0, 0, 4, 8, 7, 4, 9, 8, 6, 8, 7, 3, 1, 4, 2, 2, 3, 2, 5, 9, 3, 5, 3, 2, 9, 7, 5], [0, 0, 1, 2, 1, 0, 2, 5], [0, 1, 0, 1, 2, 1], [0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 3, 1, 2, 0], [0], [1, 1, 1], [2, 2, 0, 0, 1, 1, 5, 0, 3, 3, 2, 3, 6, 6, 6, 5, 6, 1, 0, 3, 0, 0, 4, 0, 2, 6, 0, 4, 4, 1, 5, 6, 1, 5, 1, 5, 1, 6, 3, 0, 1, 4, 2, 0, 6, 3, 6], [0, 0], [2, 1, 1, 3, 1, 1, 1, 0, 3, 3, 1, 2, 0, 0, 0, 3, 0, 1, 2, 3, 0, 2, 3, 1, 2, 1, 0, 0, 3, 3, 3, 2, 0, 3, 3, 3, 2, 3, 0, 0, 3, 3, 2, 3, 3, 2, 1, 0, 1, 0, 2, 2, 2, 1, 2, 1, 1, 1, 0, 0, 0, 0, 1, 3, 1, 0, 3, 0, 2, 2, 3, 1, 2, 2, 1, 3, 0, 3, 1, 2, 0, 0, 2, 1, 1, 1, 0, 3, 2, 1, 0, 0, 2, 0, 3, 2, 0, 0, 2, 3, 1, 2, 3, 0, 0, 1, 0, 0, 3, 0, 2, 3, 0, 3, 2, 1, 0, 0, 1, 0, 2, 2, 2, 1, 0, 3, 0, 3, 0, 3, 2, 1, 2, 3, 2, 0, 0, 3, 0, 1, 2, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 0, 1, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 1, 1, 2], [1, 0, 1, 0, 0, 1, 1, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0, 0, 2, 2], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not ( int(2.0) - int(3.0) ) \\l abs(int(9.0)):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(7.0) \\l i2\\nif abs(min(int(0.0), ( i0 + i0 ))) \\g i1:{:\\nif max(i1, int(0.0)) == divInt(abs(in2),mod(min(int(4.0), mod(int(8.0),i0)),in0)):{:\\nloopBreak% = 0\\nwhile min(min(min(( in0 - abs(min(max(( min(i2, in0) + min(max(divInt(min(min(( int(7.0) + res0 ), int(4.0)), res0),mod(( ( int(9.0) - ( int(8.0) - int(6.0) ) ) + int(8.0) ),res0)), in2), res0) ), i1), int(7.0))) ), max(int(3.0), i0)), max(in0, ( ( max(int(1.0), divInt(divInt(int(4.0),abs(i0)),max(int(2.0), ( i0 - in1 )))) * divInt(int(2.0),int(3.0)) ) - int(2.0) ))), i0) \\g min(( int(5.0) + i2 ), res0):{:\\ni0 = ( in1 * abs(( in1 - i1 )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = ( True and not mod(min(int(9.0), ( min(in2, res0) * int(3.0) )),i1) \\l in2 )\\n:}\\n:}else:{:\\nif b1:{:\\nb2 = abs(i1) == ( max(in2, min(( int(5.0) - i1 ), res0)) + int(3.0) )\\n:}else:{:\\nb1 = in0 != mod(divInt(( int(2.0) + i0 ),min(i1, min(in1, max(( int(9.0) * ( max(divInt(i2,i0), abs(res0)) * int(7.0) ) ), mod(in0,int(5.0)))))),res0)\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 32, 32, 8, 6, 1, 14, 8, 6, 1, 3, 47, 2, 144, 33, 34, 20, 13]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 2, 2, 1, 2, 0, 0, 0, 2, 1], [0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 0, 9, 5, 7, 7, 1, 8, 3, 8, 5, 0, 1, 9, 4, 6, 4, 3, 4, 3, 7, 1, 3, 1, 8, 6, 7, 2], [1, 2, 0, 2, 1, 4, 1, 5], [2, 1, 1, 0, 2, 1, 0, 1], [1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 3, 1, 2], [0, 1, 0], [1, 0], [3, 0, 3, 3, 4, 2, 0, 4, 5, 5, 3, 4, 4, 2, 5, 1], [0], [2, 0, 2, 0, 2, 0, 3, 0, 3, 3, 1, 3, 3, 1, 2, 1, 1, 1, 0, 2, 2, 0, 1, 2, 3, 1, 1, 2, 3, 3, 1, 1, 3, 3, 1, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 0, 1, 3, 2, 2, 0, 2, 0, 0, 3, 0, 0, 3, 2, 0, 0, 1, 2, 2, 1, 3, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 0, 1, 2, 1], [2, 0, 1, 1, 1, 1, 2, 0, 1, 2, 2], [0, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nb1 = ( in0 * ( i0 + divInt(in0,min(in0, min(abs(int(7.0)), abs(min(int(7.0), ( int(0.0) - int(9.0) )))))) ) ) \\g int(5.0)\\nb1 = in1 == mod(mod(i2,int(7.0)),( min(int(7.0), int(1.0)) - ( abs(abs(int(8.0))) - int(3.0) ) ))\\nif b0:{:\\nif min(min(int(8.0), mod(int(5.0),int(0.0))), int(1.0)) \\l divInt(int(9.0),int(4.0)):{:\\nb2 = i0 == int(6.0)\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nb1 = int(4.0) \\g in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = int(3.0)\\n:}\\nb0 = ( abs(( ( in2 - ( in0 * in1 ) ) + min(in1, i2) )) \\le max(( in2 - i1 ), int(4.0)) or True )\\nloopBreak% = 0\\nwhile not divInt(( int(3.0) * abs(int(7.0)) ),( int(1.0) * int(3.0) )) \\g max(divInt(int(1.0),int(8.0)), int(6.0)):{:\\nb1 = int(7.0) != int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 29, 29, 8, 8, 1, 14, 8, 6, 3, 2, 16, 1, 77, 18, 15, 11, 7]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 1, 2, 1, 2, 0, 2, 1, 2, 1], [1, 0, 1, 0, 1], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 3, 3, 1, 2, 4, 1, 2, 7, 3, 5, 7, 7, 5, 8, 0, 6, 5, 8, 1, 2, 5, 9, 6, 7, 6, 0, 9, 3, 9, 7, 4, 6, 1, 6, 2, 2, 5, 2, 7, 2, 0, 3, 5, 7, 8, 9, 2, 4, 1], [0, 5, 3, 2, 2], [0, 2, 1], [], [1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 1], [0], [0, 1], [6, 1, 4, 5, 6, 1, 5, 4, 3, 2, 3, 6, 5, 0, 0, 4, 6, 6, 3, 6, 1, 2, 1, 0, 2, 1, 0, 1, 0, 1, 4, 5, 1, 2, 1, 3, 2, 2, 1, 5, 6, 4, 1, 2, 1, 2, 3, 6, 3, 5, 0, 1, 1, 1, 1, 5, 5, 0, 5, 3, 2, 0], [0, 1, 0], [3, 3, 1, 1, 1, 3, 0, 3, 2, 3, 2, 2, 1, 0, 3, 1, 3, 2, 2, 2, 2, 1, 3, 0, 1, 3, 1, 1, 0, 3, 3, 0, 3, 0, 3, 2, 0, 3, 0, 2, 3, 1, 3, 3, 0, 2, 2, 2, 3, 2, 1, 3, 2, 0, 1, 0, 3, 0, 1, 1, 0, 1, 1, 1, 2, 2, 1, 3, 3, 0, 2, 1, 1, 0, 3, 1, 2, 2, 0, 3, 2, 2, 3, 3, 3, 2, 2, 2, 0, 3, 1, 2, 2, 3, 1, 0, 2, 1, 2, 1, 2, 2, 2, 1, 3, 3, 1, 1, 3, 0, 1, 0, 3, 1, 2, 2, 2, 0, 1, 0, 3, 3, 0, 0, 1, 3, 3, 3, 0, 3, 0, 3, 2, 0, 3, 1, 3, 0, 0, 0, 2, 1, 2, 3, 2, 2, 1, 0, 2, 2, 3, 3, 3, 1, 2, 0, 2, 1, 2, 0, 0, 0, 3, 2, 1, 3, 0, 1, 3, 3, 1, 0, 3, 3, 2, 2, 2, 2, 3, 3, 3, 2, 2, 3, 1, 0, 0, 0, 0, 1, 1, 2, 3, 0, 0, 3, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0, 1, 3, 1, 1, 2, 3, 0, 1, 0, 0, 0, 2, 1, 0, 3, 0, 3, 0, 1, 2, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [2, 0, 1, 2, 2, 2, 0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 0, 2, 1, 0, 0, 0, 0, 1, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 2, 1, 1, 0], [2, 1, 2, 0, 0, 1, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 2, 0, 2, 2, 0, 2, 2, 1, 2, 2], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(min(int(0.0), int(5.0))) \\l int(3.0):{:\\nres0 = max(i1, abs(( abs(( mod(int(3.0),in1) * abs(int(1.0)) )) - min(divInt(mod(divInt(( int(2.0) * max(in2, int(4.0)) ),max(int(1.0), int(2.0))),res0),min(max(i1, abs(in2)), max(divInt(in1,abs(in0)), mod(min(int(7.0), min(max(i2, divInt(divInt(( max(( int(3.0) + abs(divInt(in0,int(5.0))) ), res0) + abs(in2) ),int(7.0)),int(7.0))), i0)),int(5.0))))), int(8.0)) )))\\nif b0:{:\\ni0 -= int(0.0)\\n:}\\nloopBreak% = 0\\nwhile divInt(( int(6.0) * abs(min(in1, ( int(5.0) - int(8.0) ))) ),res0) != abs(int(1.0)):{:\\nres0 = ( divInt(in0,max(divInt(( min(min(min(( divInt(mod(res0,min(int(2.0), ( ( max(int(5.0), i1) * mod(int(9.0),mod(int(6.0),mod(( mod(int(7.0),abs(abs(int(6.0)))) * int(0.0) ),abs(i2)))) ) + int(9.0) ))),i1) - abs(int(3.0)) ), ( divInt(divInt(i0,int(9.0)),i2) * max(min(i1, i0), int(7.0)) )), abs(abs(abs(i1)))), max(i0, abs(( i1 * abs(int(4.0)) )))) - abs(in1) ),in2), i1)) * divInt(int(6.0),( max(( ( int(1.0) * i2 ) + ( ( max(max(min(int(6.0), mod(i1,mod(int(2.0),mod(in0,i2)))), i2), abs(mod(int(2.0),min(i1, int(5.0))))) * min(max(int(2.0), in2), min(min(mod(( ( divInt(min(abs(min(mod(mod(min(int(7.0), res0),in1),i1), i2)), int(2.0)),int(0.0)) * divInt(min(i1, i2),abs(in0)) ) + divInt(res0,mod(divInt(in0,int(3.0)),in2)) ),mod(i0,int(5.0))), abs(int(7.0))), int(8.0))) ) * ( max(i1, int(9.0)) * i1 ) ) ), i1) - i1 )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( int(2.0) * in2 ) \\ge max(in2, min(i0, int(4.0))):{:\\nb2 = True\\n:}else:{:\\nloopBreak% = 0\\nwhile ( int(1.0) * in2 ) == in0:{:\\nb1 = i2 == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 10, 10, 5, 5, 51, 51, 5, 3, 0, 7, 5, 2, 1, 2, 62, 3, 231, 59, 62, 26, 34]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1], [1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 0, 7, 5, 7, 8, 7, 4, 0, 6, 9, 1, 7, 9], [4, 4, 2, 1, 2, 2], [0, 0, 0, 2], [0, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3, 0, 1, 0, 2, 3, 1], [1, 1], [0, 1], [2, 6, 0, 3, 4, 6, 2, 1, 4, 6, 6, 0, 5, 5, 1, 6, 5, 1, 1, 1, 2], [0, 0, 0, 0], [1, 0, 2, 3, 3, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 0, 3, 3, 0, 2, 1, 3, 0, 0, 3, 3, 3, 0, 1, 1, 2, 0, 1, 1, 0, 3, 3, 3, 3, 1, 1, 3, 0, 0, 1, 2, 2, 3, 2, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0], [2, 0, 2, 2, 0, 1, 0, 0, 2, 2, 2, 0, 2, 1, 1, 2, 2], [2, 0, 2, 0, 0], [0, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(5.0) \\le i2:{:\\nloopBreak% = 0\\nwhile divInt(abs(min(res0, int(7.0))),abs(abs(min(( i0 * in0 ), in1)))) \\le res0:{:\\nif ( i2 == max(min(i1, ( int(0.0) + min(in1, res0) )), abs(abs(abs(res0)))) and b0 ):{:\\ni0 = int(7.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\nin2 = int(57.0)\\nloopBreak% = 0\\nwhile b0:{:\\nif ( in2 * int(8.0) ) \\g int(7.0):{:\\nloopBreak% = 0\\nwhile i1 == min(abs(max(max(int(4.0), int(0.0)), abs(res0))), in2):{:\\ni1 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = not ( divInt(( abs(( int(9.0) + i1 )) + int(1.0) ),int(7.0)) == int(9.0) and False )\\n:}\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 15, 15, 6, 4, 2, 13, 6, 7, 2, 2, 21, 4, 55, 7, 17, 5, 2]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 7], [0], [0], [], [1], [0], [], [], [], [1, 4, 3, 0], [], [3, 1, 3, 0, 2, 3, 0, 1, 2, 0, 0], [0, 0], [0, 2, 1], [0, 0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(8.0), abs(i1)) \\l ( max(in1, int(7.0)) + ( in0 + i0 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 11, 2, 3, 2, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 2, 1, 0], [1, 1], [1, 0, 0], [0, 1, 0, 1, 1, 1], [7, 5, 0, 3, 6, 6], [4, 2, 2, 4], [2, 2], [], [1, 0, 0, 1, 1, 1], [0, 0, 0, 0], [2, 2], [], [], [1, 3, 6, 5, 5, 4, 6, 4, 2], [0], [1, 1, 3, 0, 0, 0, 0, 0, 3, 0, 2, 2, 1, 0, 1, 0], [0, 0], [2, 1], [0, 1], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(75.0) \\le int(03.0):{:\\ni1 = abs(in0)\\nloopBreak% = 0\\nwhile not not res0 == in2:{:\\nb2 = in2 == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = max(res0, ( ( int(6.0) + in1 ) - int(6.0) )) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 6, 6, 4, 2, 0, 6, 4, 2, 0, 0, 9, 1, 16, 2, 2, 2, 0]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 5, 4, 6, 8, 0, 8, 0, 3, 7, 9, 7, 1, 3, 8, 5, 5, 2, 8, 3, 4, 1, 4], [5], [0], [], [0, 1, 0, 0], [0], [2, 1, 1], [0, 1], [0], [5, 5, 2, 5, 3, 1, 0, 4, 3, 5, 1, 2, 6, 5], [], [2, 3, 1, 3, 3, 2, 3, 2, 2, 0, 0, 1, 1, 3, 2, 2, 1, 3, 1, 0, 0, 0, 3, 3, 2, 2, 2, 1, 3, 0, 0, 2, 1, 0, 1, 3, 2, 2, 3, 3, 2, 1, 3, 0, 2, 1, 2, 1, 3, 0, 3, 2, 0, 1, 2, 2, 3, 1, 2, 3, 3, 3, 1, 2, 2, 1, 1, 2, 3, 3, 1, 0, 1, 3, 1, 1, 0, 1, 1, 3, 1, 0, 3, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 1, 1, 2, 1, 0, 1, 0, 2, 0, 0, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2], [0, 1, 2, 2, 2, 1, 0, 2, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not divInt(abs(int(7.0)),min(max(( max(mod(mod(in2,in2),int(4.0)), int(5.0)) + abs(mod(( int(4.0) - max(int(6.0), i2) ),in2)) ), in0), min(max(divInt(divInt(( int(8.0) * min(i1, i0) ),divInt(int(0.0),in1)),int(8.0)), abs(divInt(mod(min(min(divInt(int(0.0),abs(in0)), ( int(3.0) * divInt(int(7.0),max(in2, abs(( i1 * int(9.0) )))) )), divInt(( max(int(7.0), ( max(abs(abs(int(1.0))), ( mod(int(3.0),int(8.0)) - ( abs(max(int(5.0), i2)) + int(5.0) ) )) * abs(int(2.0)) )) - int(8.0) ),res0)),int(3.0)),int(4.0)))), max(int(1.0), in2)))) != abs(int(4.0)):{:\\nif True:{:\\nb0 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 24, 24, 1, 1, 0, 4, 1, 3, 2, 1, 14, 0, 84, 22, 24, 9, 13]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 2, 1, 0, 2, 1, 0, 0, 1, 2, 1, 0], [1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 4, 2, 2, 1, 0, 7, 1, 8, 8, 4, 3, 6, 3, 7, 6, 7, 4, 9, 5, 4, 2, 0, 9, 8, 9, 3, 8, 9, 1, 9, 9, 5, 2, 6, 2, 1, 0, 4, 6, 5, 1, 0, 3, 0, 9, 7, 4, 2, 1, 3, 1, 6, 1, 0, 6, 9, 8, 9, 8, 5, 9, 6, 8, 7, 3, 2, 5, 5, 3, 7, 9, 7, 9, 2, 9, 1, 6, 4, 9, 1, 5, 8, 7, 6, 1, 6, 0, 3, 2, 6, 1, 1, 2, 2, 0, 1, 6, 1, 9, 6, 9, 5, 8, 1, 2, 6, 7, 9, 3, 4, 3, 2, 5, 7, 9, 7, 8, 2, 0], [2, 1, 2, 0, 0, 2, 3, 3], [1, 2, 1, 0, 1, 2, 1, 2], [], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 2, 0, 1], [1, 1], [1, 1], [6, 4, 6, 2, 0, 3, 6, 3, 5, 6, 2, 0, 3, 1, 6, 5, 1, 2, 1, 3, 4, 2, 1, 4, 1, 1, 6, 5, 3, 2, 3, 2, 2, 6, 6, 4, 0, 2, 0, 5, 4, 4, 0, 3, 5, 1, 2, 4, 2, 5, 3, 6, 6, 0, 4, 0, 6, 3, 5, 4, 4, 6, 4, 2, 5, 3, 5, 1, 2, 1, 6, 1, 1, 1, 6, 1, 1, 6, 0, 5, 3, 6, 0, 5, 2, 1, 5, 5, 1, 4, 6, 6, 2, 2, 6, 2, 1, 5, 3, 3, 6, 0, 0, 3, 1, 0, 5, 3, 5, 3, 3, 6, 4, 4, 0, 1, 1, 0, 5, 1, 6, 5, 1, 1], [1, 0], [0, 2, 2, 2, 3, 3, 0, 0, 2, 2, 2, 1, 2, 3, 0, 1, 2, 2, 2, 0, 1, 3, 1, 0, 0, 0, 1, 3, 3, 0, 2, 0, 2, 1, 3, 3, 0, 0, 2, 3, 1, 2, 3, 0, 0, 2, 1, 0, 0, 2, 3, 3, 3, 2, 1, 2, 1, 1, 0, 3, 3, 1, 1, 0, 2, 1, 2, 2, 0, 0, 2, 3, 0, 1, 3, 0, 3, 0, 3, 2, 0, 2, 1, 3, 0, 1, 2, 2, 1, 0, 3, 1, 2, 3, 0, 1, 2, 3, 1, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 3, 2, 3, 2, 0, 0, 0, 3, 2, 3, 2, 2, 3, 2, 1, 1, 3, 1, 0, 2, 1, 3, 3, 0, 1, 1, 3, 2, 0, 0, 0, 3, 1, 3, 1, 3, 2, 2, 1, 1, 1, 2, 2, 3, 3, 2, 1, 0, 0, 0, 3, 2, 3, 2, 2, 2, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 3, 3, 3, 0, 2, 1, 3, 2, 1, 3, 3, 2, 0, 1, 1, 2, 2, 0, 3, 3, 1, 2, 1, 1, 2, 3, 0, 1, 0, 1, 0, 0, 2, 1, 2, 3, 1, 2, 2, 0, 0, 2, 0, 1, 3, 2, 2, 3, 0, 2, 0, 0, 0, 2, 1, 3, 1, 1, 3, 2, 1, 0, 3, 2, 1, 3, 0, 2, 3, 2, 3, 3, 3, 1, 2, 0, 2, 2, 1, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 0, 0, 2, 0, 0, 2, 1, 3, 2, 2, 3, 0, 1, 1, 0, 0, 2, 1, 1, 2, 2, 3, 3, 1, 2, 0, 3, 0, 1, 3, 3, 1, 1, 2, 3, 3, 2, 3, 0, 0, 0, 0, 2, 3, 2, 2, 3, 3, 2, 0, 0, 1, 3, 1, 2, 2, 3, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 0, 0, 1, 3, 0, 3, 0, 3, 1, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 3, 3, 0, 3, 0, 1, 0, 1, 2, 3, 1, 0, 0, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 1, 3, 0, 3, 3, 3, 2, 1, 1, 3, 1, 0, 0, 0, 1, 2, 3, 1, 0, 2, 2, 2, 3, 1, 0, 1, 2, 1, 2, 1, 1, 2, 3, 3, 1, 0, 1, 3, 2, 3, 0, 1, 3, 0, 2, 3, 0, 0, 3, 1, 0, 2, 0, 0, 2, 1, 3, 3, 3, 1, 0, 0, 0, 3, 0, 2, 1, 1, 1, 0, 2, 3, 2, 2, 0, 3, 3, 3, 1, 1, 2, 2, 3, 1, 0, 1, 1, 2, 3, 3, 0, 2, 3, 3, 0, 2, 0, 2, 1, 3, 2, 1, 1, 1, 1, 0, 1, 1, 2, 3, 3, 0, 0, 0, 1, 3, 0, 3, 0, 1, 2, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 2, 1, 0, 0, 1, 0, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1, 2, 0, 1, 2, 0, 0, 2, 1, 0, 1, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 0, 0, 2, 2, 2, 2, 2, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 2, 1, 0, 2, 0, 0, 1, 0, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0, 0, 2, 1, 2, 0, 2, 0], [1, 1, 2, 2, 1, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 1, 0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 1, 1, 1, 2, 2, 0, 2, 1, 1, 2, 1, 1, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 95, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not res0 == divInt(( mod(min(abs(in1), res0),mod(( ( int(1.0) - divInt(max(i2, int(4.0)),divInt(mod(divInt(i0,int(2.0)),max(int(2.0), in0)),res0)) ) - in0 ),int(1.0))) * abs(abs(in2)) ),( res0 * ( int(0.0) - max(min(i2, i0), divInt(max(int(7.0), mod(max(in0, i1),( int(1.0) * res0 ))),in2)) ) ))\\nloopBreak% = 0\\nwhile not False:{:\\nif ( min(min(min(divInt(int(8.0),( int(8.0) + int(4.0) )), i1), max(max(int(3.0), int(6.0)), i2)), divInt(int(3.0),divInt(divInt(i1,in0),divInt(min(in1, int(7.0)),min(i2, abs(i1)))))) - abs(mod(in1,divInt(int(6.0),max(i1, int(7.0))))) ) \\g mod(( int(4.0) + i1 ),max(int(9.0), mod(abs(res0),int(5.0)))):{:\\nb2 = ( max(int(4.0), mod(mod(( divInt(min(divInt(( ( int(2.0) + in2 ) - min(int(0.0), max(min(( ( divInt(int(9.0),int(8.0)) - ( abs(mod(max(mod(in0,i2), in0),min(divInt(max(divInt(mod(abs(( int(9.0) - int(3.0) )),abs(int(8.0))),i2), mod(int(9.0),min(min(i2, int(1.0)), int(9.0)))),abs(( res0 - res0 ))), in1))) + max(int(9.0), abs(int(5.0))) ) ) + min(( ( int(2.0) * int(6.0) ) * int(2.0) ), divInt(mod(max(abs(( int(1.0) * i0 )), i2),i0),min(mod(min(mod(( divInt(in2,int(0.0)) * int(4.0) ),mod(( abs(max(min(divInt(divInt(max(min(abs(in1), ( int(6.0) * abs(mod(int(5.0),max(max(( in1 * int(1.0) ), int(0.0)), ( mod(i0,min(min(int(3.0), ( int(0.0) - int(9.0) )), ( abs(in0) + int(7.0) ))) * in2 )))) )), int(4.0)),i1),i2), mod(int(2.0),mod(abs(int(1.0)),( ( in1 - i2 ) * ( in2 * int(3.0) ) )))), min(( mod(min(in0, ( res0 - res0 )),i0) * divInt(int(1.0),min(int(6.0), int(1.0))) ), abs(( int(0.0) + in1 ))))) * min(( int(6.0) - min(i0, ( abs(mod(abs(max(max(int(9.0), divInt(res0,divInt(( int(8.0) * int(9.0) ),( ( min(int(8.0), int(5.0)) - ( divInt(int(9.0),min(in0, in2)) + divInt(in1,in1) ) ) + ( int(6.0) * min(mod(divInt(abs(res0),int(8.0)),int(7.0)), in1) ) )))), i2)),( int(3.0) + int(2.0) ))) + ( mod(max(abs(int(5.0)), ( in2 * abs(in0) )),int(5.0)) - abs(abs(int(3.0))) ) )) ), int(7.0)) ),divInt(abs(max(( abs(in2) - i1 ), i2)),i1))), mod(max(mod(divInt(min(min(( res0 * i1 ), int(9.0)), abs(int(7.0))),( mod(abs(mod(int(9.0),abs(i1))),( ( divInt(divInt(i1,( res0 + i1 )),int(2.0)) - abs(i1) ) - abs(res0) )) - max(int(9.0), i0) )),in2), in0),res0)),mod(mod(( int(1.0) * max(i0, min(min(in2, max(i2, int(6.0))), i1)) ),int(4.0)),divInt(min(int(9.0), in2),in2))), max(divInt(int(1.0),int(5.0)), i1)))) ), in1), res0)) ),res0), int(8.0)),max(int(7.0), min(i2, max(max(min(mod(int(6.0),int(1.0)), abs(int(6.0))), i2), res0)))) * i2 ),int(0.0)),( max(int(3.0), i1) + divInt(( ( min(int(2.0), in2) * int(6.0) ) - mod(int(1.0),divInt(int(1.0),int(2.0))) ),mod(abs(min(int(2.0), in0)),int(0.0))) ))) - min(( max(in0, int(1.0)) * min(res0, ( abs(i0) - i0 )) ), abs(int(6.0))) ) == in0\\n:}else:{:\\ni1 -= ( i0 + in2 )\\n:}\\nif not ( int(1.0) + abs(min(min(int(9.0), in0), in2)) ) \\l in0:{:\\nb1 = max(in0, ( int(6.0) * int(9.0) )) \\l int(5.0)\\n:}else:{:\\nb0 = b1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\nb1 = res0 == ( max(mod(( in1 + abs(max(abs(int(8.0)), int(1.0))) ),( divInt(min(int(2.0), in1),int(6.0)) * int(7.0) )), ( max(min(i0, ( min(abs(i1), ( i1 * mod(int(9.0),max(( int(3.0) * int(4.0) ), int(3.0))) )) + int(2.0) )), i0) + int(5.0) )) + int(7.0) )\\nloopBreak% = 0\\nwhile divInt(abs(min(in2, i1)),res0) \\ge int(97.0):{:\\nin2 = abs(i1)\\nb2 = min(i1, int(8.0)) \\ge divInt(int(2.0),int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 4, 9, 120, 120, 8, 8, 0, 14, 8, 6, 2, 2, 124, 2, 506, 139, 126, 67, 73]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 0, 2, 1, 1], [0, 0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 0, 3, 2, 1, 3, 2], [3, 0], [1, 1, 0, 2], [1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0], [3, 1, 3, 0, 2, 0, 2, 1], [1, 1], [1, 1], [2, 5, 6, 5, 2], [1], [2, 0, 0, 0, 1, 2, 2, 3, 3, 2, 1, 3, 3, 3, 2, 3, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1], [2, 1, 0, 2, 2, 2], [2, 2], [1, 1, 0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( False or ( b1 and not b1 ) ):{:\\nb0 = mod(i2,in2) \\ge res0\\n:}else:{:\\nif not False:{:\\nin2 *= int(9.0)\\n:}else:{:\\nb2 = mod(divInt(abs(max(( int(9.0) * min(abs(abs(divInt(abs(i2),int(0.0)))), int(3.0)) ), int(2.0))),int(1.0)),int(3.0)) \\l int(2.0)\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 8, 8, 2, 4, 2, 10, 2, 8, 2, 2, 5, 1, 23, 5, 6, 2, 4]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1, 1, 1], [5, 9, 3, 2, 9], [0], [2], [], [1], [0], [], [], [], [1, 3, 3, 5, 6, 5, 5], [], [1, 2, 2, 1, 0, 2, 3, 2, 2, 1, 3, 3, 3, 3, 0, 2, 3, 0, 0, 2, 0, 1, 3, 3, 0, 0], [1, 0, 1, 0, 0, 1, 0], [2, 2, 2, 2, 1, 1, 2, 2], [2, 2, 2, 1], [1, 0, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(59.0) \\l mod(( int(3.0) * i1 ),divInt(abs(( ( int(2.0) * abs(abs(abs(max(in0, divInt(max(in0, in2),( res0 * int(9.0) )))))) ) - abs(abs(in2)) )),in2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 7, 0, 26, 7, 8, 4, 3]}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 1, 2, 1, 2, 2, 1, 0, 0], [1, 0, 0, 1], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 6, 4, 3, 2, 4, 8, 3, 5, 6, 9, 5, 0, 9, 2, 7, 8, 3, 8, 7, 0, 7, 3, 0, 1, 8, 6, 9, 2, 9, 9, 2, 3, 2, 2, 3, 5, 8, 8], [2, 5, 2, 4, 0, 2], [0, 0, 2, 1, 0], [0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 1, 1, 3, 3, 1], [0, 1, 0], [1, 1], [4, 1, 3, 5, 4, 1, 0, 4, 5, 1, 4, 2, 5, 5, 5, 5, 4, 2, 3, 6, 4, 3, 0, 4, 6, 6, 1, 2, 5, 1, 0, 4, 1, 1, 4, 3, 4, 1, 6, 0, 4, 1, 6, 1, 0, 0, 3], [1], [1, 2, 3, 0, 1, 1, 1, 2, 3, 2, 0, 1, 3, 0, 1, 0, 2, 3, 3, 3, 3, 3, 2, 1, 1, 2, 0, 3, 2, 2, 0, 0, 2, 3, 0, 0, 1, 1, 1, 0, 3, 3, 0, 2, 2, 1, 2, 1, 1, 1, 0, 2, 0, 0, 1, 3, 2, 2, 2, 3, 3, 0, 1, 2, 3, 2, 3, 1, 3, 1, 3, 2, 0, 0, 1, 0, 0, 3, 3, 3, 3, 2, 0, 1, 0, 1, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 2, 1, 0, 3, 0, 0, 2, 0, 0, 3, 3, 2, 0, 1, 0, 2, 2, 1, 3, 1, 2, 3, 0, 0, 3, 0, 2, 1, 2, 2, 0, 0, 3, 2, 3, 1, 3, 2, 2, 2, 0, 1, 2, 3, 1, 3, 3, 3, 2, 0, 3, 0, 2, 0, 2, 1, 3, 0, 0, 1, 0, 0, 1, 3, 2, 2, 2, 0, 0, 0, 2, 3, 1, 1, 1, 2, 0, 3, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 2, 2, 2, 2, 0, 2, 1, 0, 1, 1, 2, 0, 2, 0, 2, 0, 1, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1, 2], [0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\nb2 = ( int(3.0) == ( max(in1, int(7.0)) + int(6.0) ) and ( int(4.0) != ( max(( i1 + int(3.0) ), min(in0, int(2.0))) - in2 ) or ( max(max(abs(abs(abs(( int(4.0) + int(8.0) )))), divInt(in1,max(mod(mod(i1,i0),mod(max(in1, in2),int(3.0))), int(5.0)))), int(6.0)) + i1 ) == max(min(in1, ( divInt(int(9.0),mod(int(5.0),int(0.0))) * int(9.0) )), i2) ) )\\nif mod(in2,in2) \\le int(2.0):{:\\nloopBreak% = 0\\nwhile True:{:\\nin2 += min(( divInt(mod(min(min(in2, int(7.0)), mod(abs(( max(int(8.0), abs(int(3.0))) + abs(( in1 * i2 )) )),int(8.0))),in0),res0) + abs(abs(min(abs(( in1 + int(7.0) )), in0))) ), int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = max(( int(7.0) - min(int(3.0), int(0.0)) ), ( i0 - max(max(divInt(int(1.0),in1), abs(res0)), res0) )) \\l ( i1 - i2 )\\n:}\\n:}else:{:\\nb0 = min(abs(divInt(in2,int(8.0))), i1) == divInt(mod(int(6.0),min(int(9.0), ( abs(i0) + in1 ))),min(i1, divInt(int(2.0),( divInt(i1,in1) + max(divInt(abs(int(9.0)),min(mod(mod(mod(in0,int(9.0)),divInt(min(int(2.0), max(min(abs(divInt(in1,min(i1, ( res0 * divInt(int(3.0),abs(i0)) )))), in1), int(2.0))),i1)),res0), int(2.0))), max(( ( mod(i1,i0) * i0 ) * ( max(int(3.0), int(5.0)) * int(8.0) ) ), ( in0 + abs(int(8.0)) ))) ))))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 40, 40, 6, 5, 2, 12, 6, 6, 3, 2, 47, 1, 175, 44, 45, 21, 24]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 1, 1, 2, 1, 2, 1, 0, 0], [1, 0, 0], [0, 0, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 9, 3, 6, 7, 3, 3, 3, 4, 3, 7, 1, 2, 9, 2, 6, 4, 1, 8, 6, 2, 2, 8, 0, 1, 6, 1, 7, 6, 4, 1, 5, 8, 6, 7, 6, 6, 2, 0, 9, 4, 9, 9, 6, 9, 9, 3, 3, 4, 9, 0, 9, 8, 1, 0, 2, 6, 1, 9, 4, 4, 5, 4, 5, 6, 9, 2, 6, 3, 2, 4, 6, 7, 0, 9, 9, 3, 9, 5, 1, 7, 6, 9, 1, 6, 0, 3, 6, 7, 1, 5, 7, 0, 9, 7, 5, 5, 1, 7, 8, 2, 5, 5, 2, 1, 3, 6, 6, 3, 4, 9, 5, 5, 0, 9, 6, 1, 5, 8, 5, 8, 7, 2, 3, 1, 1, 6, 5, 1, 2, 9, 1, 2, 2, 5, 6, 2, 6, 7, 1, 7, 9, 1, 0, 6, 3, 9, 8, 5, 0, 6, 2, 1, 3, 7, 5, 9, 7, 5, 1, 8], [4, 5, 3, 2, 1], [1, 1, 1, 2, 0], [0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 1, 3, 2, 1], [0, 0], [0, 1], [0, 6, 5, 1, 4, 2, 2, 2, 1, 4, 5, 1, 6, 4, 0, 6, 2, 1, 6, 6, 0, 3, 6, 1, 3, 5, 3, 4, 1, 0, 5, 0, 6, 5, 6, 3, 6, 5, 0, 6, 2, 4, 3, 0, 4, 4, 0, 6, 2, 1, 6, 3, 3, 6, 3, 4, 5, 0, 4, 1, 6, 3, 4, 2, 6, 5, 4, 6, 1, 1, 0, 0, 0, 2, 0, 4, 0, 5, 0, 6, 2, 3, 4, 0, 2, 4, 6, 1, 4, 3, 3, 2, 5, 5, 2, 5, 1, 1, 4, 0, 3, 0, 1, 5, 3, 0, 3, 4, 6, 4, 4, 2, 4, 1, 6, 5, 0, 5, 3, 1, 5, 6, 1, 5, 4, 4, 2, 2, 0, 2, 3, 1, 6, 3, 3, 1, 2, 5, 1, 3, 2, 6, 0, 6, 2, 0, 4, 0, 1, 6, 1, 4, 2, 4, 2, 2, 6, 4, 3, 3, 0, 4, 1], [1, 1, 0], [0, 1, 0, 1, 0, 3, 2, 2, 0, 1, 2, 0, 2, 0, 3, 3, 1, 0, 2, 2, 2, 3, 2, 1, 3, 0, 1, 0, 3, 2, 1, 1, 0, 1, 3, 2, 2, 2, 2, 3, 1, 1, 1, 1, 3, 1, 2, 3, 0, 2, 1, 3, 3, 3, 0, 0, 1, 3, 2, 3, 3, 0, 3, 3, 1, 1, 2, 1, 0, 1, 0, 3, 2, 2, 1, 2, 2, 3, 2, 1, 2, 0, 0, 2, 1, 3, 3, 2, 1, 2, 3, 2, 2, 3, 0, 3, 0, 3, 3, 2, 3, 1, 3, 0, 3, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 0, 2, 0, 0, 3, 3, 2, 3, 0, 0, 3, 2, 2, 3, 2, 2, 1, 0, 2, 1, 1, 0, 2, 3, 2, 3, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0, 2, 1, 1, 1, 3, 1, 0, 2, 3, 2, 1, 1, 0, 2, 0, 1, 0, 0, 1, 3, 0, 2, 0, 2, 2, 3, 0, 3, 1, 3, 1, 2, 2, 0, 1, 0, 1, 1, 1, 3, 3, 3, 2, 3, 2, 0, 3, 3, 2, 3, 0, 3, 2, 0, 3, 1, 0, 3, 3, 3, 2, 2, 3, 1, 0, 2, 0, 1, 3, 1, 2, 1, 2, 1, 0, 2, 1, 3, 0, 2, 2, 1, 2, 3, 3, 1, 0, 3, 3, 3, 3, 0, 1, 1, 3, 1, 3, 3, 0, 3, 3, 0, 2, 0, 3, 1, 3, 3, 2, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3, 3, 1, 0, 2, 2, 1, 2, 2, 1, 1, 0, 3, 1, 3, 2, 0, 3, 3, 0, 0, 3, 1, 1, 2, 3, 1, 3, 0, 3, 2, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 2, 1, 3, 1, 3, 3, 0, 2, 1, 1, 3, 0, 2, 3, 3, 0, 3, 2, 3, 0, 0, 2, 1, 1, 3, 1, 0, 2, 3, 2, 2, 2, 3, 1, 3, 3, 2, 3, 1, 1, 1, 3, 1, 2, 0, 3, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 0, 2, 3, 0, 0, 2, 2, 3, 2, 1, 2, 2, 2, 2, 0, 3, 3, 1, 2, 3, 0, 2, 1, 0, 1, 0, 1, 0, 3, 2, 1, 3, 3, 2, 2, 1, 0, 3, 2, 3, 2, 0, 3, 1, 3, 1, 0, 3, 3, 3, 1, 0, 0, 0, 0, 3, 0, 0, 3, 0, 2, 2, 1, 1, 2, 1, 0, 3, 2, 0, 3, 2, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 2, 0, 0, 3, 1, 3, 2, 3, 0, 1, 2, 2, 2, 3, 2, 1, 2, 2, 0, 3, 0, 0, 1, 2, 1, 3, 1, 3, 0, 2, 1, 2, 2, 0, 3, 0, 2, 0, 2, 2, 3, 0, 2, 2, 3, 1, 1, 1, 0, 2, 3, 1, 0, 3, 3, 2, 2, 1, 2, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 0, 3, 2, 0, 3, 0, 1, 3, 3, 2, 1, 0, 0, 3, 0, 2, 2, 0, 0, 3, 3, 3, 0, 0, 0, 2, 1, 0, 3, 1, 0, 3, 3, 2, 0, 3, 0, 1, 1, 3, 3, 2, 1, 2, 0, 0, 2, 3, 3, 0, 1, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 1, 0, 1, 1, 3, 2, 3, 0, 0, 1, 0, 3, 3, 1, 0, 3, 3, 2, 3, 3, 2, 1, 3, 2, 1, 3, 3, 2, 0, 2, 3, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 2, 2, 0, 3, 2, 0, 1, 2, 1, 0, 3, 1, 3, 1, 3, 0, 2, 2, 3, 2, 3, 3, 3, 3, 2, 1, 3, 1, 2, 0, 3, 2, 0, 0, 1, 3, 0, 1, 3, 2, 3, 2, 2, 2, 0, 1, 0, 2, 2, 1, 1, 1, 2, 3, 1, 0, 3, 1, 1, 3, 0, 1, 1, 2, 0, 0, 0, 2, 0, 0, 2, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0], [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 0, 1, 0, 1, 2, 1, 1, 2, 1, 1, 0, 2, 1, 2, 0, 1, 1, 1, 1, 2, 0, 0, 2, 2, 1, 1, 0, 2, 2, 2, 0, 2, 1, 1, 2, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 2, 2, 1, 0, 1, 0, 0, 2, 2, 0, 1, 1, 2, 2, 2, 0, 1, 2, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 0, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 1, 2, 2, 2, 1, 2, 2, 0, 0, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 0, 0, 2, 1, 2, 2, 0, 2, 2, 0, 1, 0, 0, 1, 0], [2, 0, 0, 1, 2, 1, 2, 1, 2, 2, 1, 0, 0, 1, 0, 2, 0, 1, 1, 1, 2, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 2, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 1, 2, 0, 2, 0, 2, 1, 2, 2, 1, 0, 2], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 126, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\nloopBreak% = 0\\nwhile True:{:\\nb1 = ( i0 \\le int(1.0) and res0 != int(2.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in2 \\ge max(mod(( i1 * int(9.0) ),mod(in1,( i2 + max(abs(int(3.0)), i2) ))), divInt(divInt(( abs(( int(6.0) + abs(i2) )) - int(7.0) ),i1),abs(divInt(int(3.0),int(3.0)))))\\nif not in1 == int(3.0):{:\\nin2 *= abs(( ( mod(mod(abs(int(4.0)),int(3.0)),int(7.0)) - int(1.0) ) * max(int(2.0), divInt(abs(i1),mod(int(9.0),max(min(min(res0, in1), int(2.0)), min(divInt(min(max(i0, min(max(int(6.0), int(4.0)), ( int(1.0) - res0 ))), int(8.0)),i2), abs(divInt(( int(6.0) * ( ( max(( int(2.0) * divInt(i1,res0) ), mod(int(2.0),max(abs(( int(8.0) - ( max(divInt(divInt(max(res0, min(i0, abs(max(divInt(abs(int(0.0)),min(in0, max(divInt(int(1.0),mod(divInt(res0,divInt(( int(6.0) + divInt(int(1.0),i1) ),( in0 + in2 ))),max(max(mod(max(in0, in1),abs(mod(( min(divInt(mod(int(7.0),i1),divInt(int(6.0),int(4.0))), i0) - ( min(( abs(abs(max(max(in2, i0), res0))) + mod(divInt(mod(in2,divInt(int(1.0),int(5.0))),int(8.0)),min(int(6.0), res0)) ), ( abs(mod(int(7.0),int(6.0))) * in0 )) + ( res0 - int(6.0) ) ) ),in2))), i0), int(2.0)))), abs(res0)))), divInt(i2,mod(( abs(in1) - min(int(0.0), abs(int(9.0))) ),( divInt(in0,int(4.0)) - i0 ))))))),int(9.0)),int(9.0)), int(6.0)) * max(max(abs(( min(mod(in1,abs(min(( min(in1, max(( i0 * max(int(9.0), res0) ), min(min(abs(divInt(divInt(min(int(9.0), i2),( i1 - int(3.0) )),abs(int(3.0)))), ( int(4.0) * ( int(9.0) + res0 ) )), ( int(0.0) + min(in0, mod(( int(9.0) * ( min(max(int(8.0), in0), abs(max(abs(min(res0, int(1.0))), int(0.0)))) * max(int(2.0), min(min(in0, abs(max(in1, ( in2 - max(int(6.0), abs(min(( i0 + ( int(1.0) * min(in1, mod(int(9.0),abs(( abs(max(int(4.0), i1)) + mod(( int(4.0) + ( ( int(5.0) * int(4.0) ) - res0 ) ),min(int(5.0), max(( in0 + min(min(in1, i2), abs(int(6.0))) ), int(9.0)))) )))) ) ), divInt(abs(int(2.0)),min(res0, max(( ( max(in2, int(6.0)) + divInt(( in1 + int(3.0) ),int(2.0)) ) + res0 ), mod(int(4.0),abs(int(6.0))))))))) )))), abs(abs(i1)))) ) ),( int(7.0) * int(0.0) ))) )))) * min(i1, ( max(abs(i0), abs(divInt(abs(i0),i0))) * mod(int(9.0),int(9.0)) )) ), max(int(3.0), i2)))), ( max(( divInt(mod(max(int(9.0), min(min(( max(int(5.0), int(1.0)) * int(7.0) ), max(int(6.0), ( i0 - max(int(9.0), divInt(divInt(int(1.0),int(6.0)),divInt(( int(0.0) * ( int(3.0) * divInt(in1,( abs(i0) - in2 )) ) ),divInt(( min(mod(int(6.0),( divInt(( divInt(i0,abs(max(int(7.0), ( max(res0, ( int(1.0) - i2 )) - int(5.0) )))) + in0 ),int(7.0)) + in1 )), abs(mod(int(0.0),max(max(divInt(mod(int(9.0),i0),abs(( abs(divInt(i2,min(int(7.0), abs(int(5.0))))) + in1 ))), max(max(max(int(5.0), res0), i1), in1)), in0)))) - abs(in0) ),i2)))) ))), min(in2, mod(( int(1.0) - int(7.0) ),mod(int(8.0),in2))))),min(( i2 * max(( in2 + ( i1 - int(2.0) ) ), int(5.0)) ), i1)),in1) + i0 ), int(5.0)) - int(2.0) )) - mod(in0,i0) )), max(int(1.0), min(mod(min(i1, int(3.0)),( ( ( min(mod(int(6.0),( mod(in2,min(in0, i0)) + int(6.0) )), divInt(int(3.0),max(int(4.0), abs(in0)))) - mod(int(9.0),( ( in1 - abs(res0) ) + divInt(in1,( mod(abs(in1),( mod(max(int(5.0), int(5.0)),int(0.0)) + i2 )) - ( max(int(9.0), in1) * max(abs(mod(( int(6.0) - ( max(int(1.0), mod(int(5.0),mod(max(min(max(int(8.0), mod(i1,max(( res0 - abs(in2) ), int(5.0)))), max(min(divInt(int(8.0),i0), in2), abs(in0))), divInt(( i1 - in2 ),max(max(min(res0, i1), in2), divInt(int(7.0),in1)))),abs(int(2.0))))) - in1 ) ),min(max(divInt(i2,min(i2, int(3.0))), int(1.0)), max(max(divInt(int(1.0),( i0 - i2 )), divInt(abs(abs(in0)),int(6.0))), divInt(i1,( int(5.0) - int(1.0) )))))), res0) ) )) )) ) - int(2.0) ) * in0 )), int(9.0)))), divInt(int(1.0),in0)) ) )), int(2.0)))) - int(2.0) ) + abs(( max(i1, i2) * int(5.0) )) ) ),in2))))))) ))\\nif True:{:\\nb0 = abs(abs(int(6.0))) \\g i1\\n:}else:{:\\nin0 *= min(min(divInt(abs(abs(divInt(int(2.0),max(( int(6.0) + min(min(( i2 + divInt(max(res0, int(7.0)),( abs(abs(mod(i0,int(1.0)))) - int(7.0) )) ), res0), divInt(( i2 * max(( i0 + int(9.0) ), ( int(1.0) * in1 )) ),min(int(0.0), min(int(6.0), min(i0, divInt(( abs(( max(abs(abs(min(divInt(int(3.0),abs(int(9.0))), ( i1 + abs(mod(res0,i1)) )))), int(8.0)) * min(in1, int(5.0)) )) - max(mod(min(( divInt(divInt(i2,int(0.0)),in1) * ( mod(int(6.0),int(2.0)) * int(1.0) ) ), ( min(int(3.0), i2) - max(int(7.0), int(5.0)) )),min(i2, int(9.0))), int(7.0)) ),divInt(res0,in1))))))) ), in0)))),( in0 + i0 )), ( int(5.0) * int(1.0) )), int(8.0))\\n:}\\nin1 = i1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 162, 162, 5, 5, 1, 10, 5, 5, 2, 2, 163, 3, 695, 186, 187, 93, 95]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 4, 8, 2, 5, 9, 0, 0, 5, 4, 1, 0, 8, 5, 9, 1, 2, 5], [], [], [], [], [], [], [], [], [1, 1, 2, 3, 3, 3, 4, 5, 0, 2, 4, 3, 3, 4, 3, 5], [0], [2, 3, 2, 1, 2, 3, 0, 2, 1, 2, 3, 3, 1, 1, 1, 1, 3, 0, 3, 1, 2, 2, 3, 3, 3, 2, 2, 3, 1, 2, 2, 2, 2, 2, 0, 3, 1, 2, 2, 1, 1, 3, 3, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 3, 3, 3, 1, 0, 3, 0, 3, 0, 0, 3, 1, 3, 1, 0, 3, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 2, 1, 1, 2, 1, 2, 0, 1, 2, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 2], [2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = ( min(divInt(int(6.0),mod(abs(i1),mod(int(3.0),( max(max(int(4.0), int(8.0)), int(2.0)) * int(5.0) )))), abs(i2)) + max(int(9.0), ( mod(abs(min(max(( divInt(abs(int(0.0)),mod(mod(divInt(mod(divInt(in0,max(int(0.0), divInt(( int(5.0) - int(4.0) ),max(max(int(1.0), in0), in0)))),int(0.0)),in1),mod(in2,int(8.0))),int(5.0))) - i0 ), max(min(max(int(9.0), i2), min(in1, min(in0, in0))), min(int(1.0), min(int(2.0), in1)))), abs(in0))),int(5.0)) + in2 )) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 19, 19, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 72, 17, 21, 5, 12]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 2, 2, 0, 1, 1, 0, 1], [1, 0], [1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 5, 0, 5, 5, 7, 0, 1, 5, 9, 9, 1, 3, 4, 2, 7, 8, 3, 0, 3, 6, 6, 1, 2, 4, 3, 3, 0, 3, 2, 3, 6, 1, 9, 0, 5, 7, 7, 4, 3, 9, 0, 0, 5, 6, 5, 3, 3, 0, 6, 2, 3, 9, 9, 7, 9, 8, 4, 9, 2, 2, 9, 7, 3, 7, 6, 5, 4, 1, 6, 9, 0, 8, 0, 1], [3, 0], [1, 1], [1], [1, 1, 0, 0, 0, 0], [0, 0], [2, 3, 1, 0], [1], [1], [2, 1, 2, 2, 3, 0, 1, 1, 0, 4, 1, 1, 5, 4, 4, 6, 1, 1, 0, 2, 1, 3, 0, 1, 5, 1, 0, 0, 6, 3, 1, 0, 2, 4, 0, 0, 0, 0, 1, 1, 2, 3, 4, 4, 1, 0, 5, 6, 4, 3, 6, 6, 2, 4, 6, 0, 6, 3, 4, 1, 5, 2, 0, 5, 5, 1, 1, 1, 5, 1, 4, 3, 0, 2, 6, 6, 3, 2], [1, 1, 1, 0, 0], [3, 2, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 2, 1, 0, 3, 3, 1, 0, 2, 1, 1, 1, 2, 2, 2, 2, 2, 0, 3, 2, 3, 1, 1, 1, 3, 3, 2, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 0, 2, 1, 3, 3, 2, 3, 0, 2, 3, 2, 3, 3, 3, 2, 1, 1, 2, 3, 3, 0, 2, 3, 3, 3, 3, 1, 1, 3, 0, 0, 1, 0, 0, 3, 2, 0, 1, 1, 0, 2, 1, 1, 1, 0, 3, 3, 3, 2, 1, 2, 3, 2, 3, 1, 3, 0, 2, 0, 0, 1, 2, 2, 2, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 2, 1, 3, 0, 2, 3, 2, 2, 1, 1, 3, 2, 3, 2, 1, 0, 3, 3, 3, 3, 2, 3, 0, 0, 1, 2, 0, 0, 0, 3, 3, 1, 0, 0, 3, 2, 0, 2, 2, 2, 0, 3, 1, 1, 2, 3, 0, 0, 2, 2, 3, 1, 2, 0, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 2, 2, 1, 3, 0, 2, 0, 2, 3, 1, 1, 3, 2, 3, 0, 2, 2, 3, 0, 1, 2, 3, 0, 0, 1, 0, 3, 3, 3, 3, 0, 3, 2, 1, 0, 2, 0, 1, 3, 0, 1, 0, 1, 1, 2, 1, 0, 1, 3, 2, 2, 0, 0, 2, 0, 2, 2, 2, 3, 1, 0, 3, 1, 2, 0, 2, 2, 0, 1, 2, 1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 1, 3, 0, 1, 3, 0, 0, 2, 3, 2, 1, 2, 3, 2, 0, 2, 2, 3, 3, 2, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 0, 0, 1, 3, 0, 1, 0, 2, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 2, 0, 1, 2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 2, 1, 0, 0, 1, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 1, 0, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 0, 0], [0, 0, 2, 1, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 1, 0, 0, 2, 0, 1, 1, 1, 1, 2, 0, 2, 0, 2, 2, 2, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += min(mod(divInt(abs(int(2.0)),i1),( abs(int(7.0)) + i2 )), int(5.0))\\nloopBreak% = 0\\nwhile int(0.0) \\ge ( int(5.0) * i2 ):{:\\nif min(max(int(5.0), in0), divInt(int(7.0),int(0.0))) \\l int(1.0):{:\\nb1 = not ( False or b1 )\\n:}else:{:\\ni0 -= mod(mod(mod(( divInt(i1,abs(divInt(min(int(5.0), int(9.0)),int(9.0)))) + min(min(mod(mod(abs(i1),int(1.0)),i0), int(3.0)), ( min(mod(abs(in1),divInt(int(4.0),abs(min(divInt(max(i1, mod(max(( min(max(min(( int(2.0) - int(7.0) ), ( max(max(i1, mod(max(min(max(max(int(8.0), int(3.0)), abs(in2)), in1), int(0.0)),in1)), res0) + abs(( i1 + int(3.0) )) )), int(6.0)), i1) * divInt(int(6.0),int(1.0)) ), int(2.0)),i0)),max(max(min(mod(int(4.0),( abs(mod(max(int(3.0), min(i2, divInt(i1,in0))),int(3.0))) * mod(mod(divInt(i0,int(0.0)),i1),int(3.0)) )), in2), i1), i0)), int(2.0))))), int(3.0)) * int(6.0) )) ),mod(int(1.0),min(i0, ( max(divInt(mod(int(9.0),int(0.0)),abs(mod(min(( int(5.0) + res0 ), abs(min(min(max(( max(in0, i1) + int(7.0) ), divInt(i0,i2)), in1), max(max(int(7.0), i0), i0)))),min(mod(i0,( divInt(mod(i0,max(int(4.0), int(3.0))),( min(i1, i1) * divInt(( min(int(9.0), mod(i2,divInt(( int(0.0) - int(0.0) ),int(5.0)))) + max(in0, in1) ),int(6.0)) )) + int(5.0) )), ( ( int(3.0) * max(in1, mod(i1,divInt(max(int(3.0), int(0.0)),min(( min(i0, divInt(( min(in2, int(6.0)) + mod(min(res0, in1),int(2.0)) ),in0)) - max(max(min(min(res0, max(divInt(int(3.0),res0), ( i2 - int(9.0) ))), abs(in1)), int(9.0)), res0) ), int(7.0))))) ) - int(9.0) ))))), mod(int(8.0),i0)) - int(4.0) )))),min(divInt(mod(res0,in0),divInt(in1,divInt(( divInt(max(int(9.0), i1),min(int(2.0), ( in2 * mod(mod(i2,int(2.0)),( int(9.0) + abs(( i0 * abs(mod(mod(max(in2, abs(divInt(int(7.0),abs(in2)))),int(3.0)),abs(i1))) )) )) ))) + i1 ),( min(( int(7.0) * divInt(abs(( i1 * ( ( max(max(divInt(abs(int(6.0)),int(5.0)), int(4.0)), int(1.0)) * min(int(6.0), int(9.0)) ) - int(0.0) ) )),int(8.0)) ), in2) - i1 )))), int(0.0))),min(in1, int(1.0)))\\n:}\\nin0 += i0\\ni2 = mod(res0,res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 76, 76, 2, 2, 1, 6, 2, 4, 1, 1, 78, 5, 308, 82, 77, 33, 52]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 1, 1], [], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 1, 5, 3, 4, 1, 5, 6, 6, 1, 8, 4, 2, 7, 1, 3, 5, 4, 1, 4], [4, 3, 4], [0, 2], [0], [0, 0, 1, 0, 1, 1], [0, 0, 0], [3, 2, 2], [], [], [2, 5, 6, 5, 2, 0, 4, 2, 1, 0, 4, 4, 6, 1, 6, 3, 0, 3, 1], [1, 1], [2, 1, 2, 0, 3, 2, 2, 1, 3, 1, 1, 1, 0, 1, 1, 3, 3, 2, 0, 3, 2, 1, 0, 2, 1, 2, 1, 3, 1, 3, 3, 2, 0, 3, 2, 1, 3, 1, 2, 2, 0, 3, 2, 1, 0, 0, 3, 0, 2, 0, 3, 2, 2, 2, 3, 0, 2, 3, 1, 0, 0, 1, 2, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 0, 2, 0, 2, 1, 2, 2, 0, 1, 1, 1, 2, 1], [1, 2, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not mod(int(7.0),( i2 - abs(( ( int(1.0) * max(int(5.0), int(3.0)) ) * int(4.0) )) )) \\le in2 and not int(1.0) \\ge int(5.0) )\\nb2 = min(abs(( res0 + min(divInt(int(6.0),in2), ( int(6.0) - divInt(int(1.0),abs(int(8.0))) )) )), max(abs(( i2 - abs(( int(4.0) + min(int(2.0), ( mod(i0,max(divInt(int(7.0),in1), i2)) - max(i1, divInt(i0,max(divInt(mod(divInt(abs(in1),mod(max(int(1.0), in1),res0)),int(3.0)),mod(i1,int(5.0))), res0))) )) )) )), in0)) \\le i0\\nin0 -= int(41.0)\\ni1 -= int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 20, 20, 3, 2, 1, 6, 3, 3, 0, 0, 19, 2, 70, 19, 15, 10, 11]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1], [2, 2, 2, 1, 0, 1, 1], [1, 0, 0], [0, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 8, 4, 1, 2, 6, 4, 3, 3, 9, 6, 2, 0, 1, 5, 8, 2, 4, 0, 4, 8, 0, 5, 7, 3, 7, 1, 3, 1, 9, 2, 7, 3, 1, 8, 0, 8, 9, 0, 6, 4, 0, 9], [3, 4, 5, 2], [2, 0, 2], [1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0], [2, 3, 0, 1], [0], [1, 1], [1, 6, 1, 6, 1, 1, 3, 3, 0, 5, 1, 3, 4, 2, 3, 4, 6, 2, 6, 1, 0, 5, 2, 0, 5, 0, 2, 6, 0, 2, 5, 1, 1, 5, 1, 2, 0, 4, 4, 6, 0, 4, 5, 4, 3, 1, 5, 2, 1, 5, 4, 3], [1, 0], [2, 1, 0, 1, 1, 3, 2, 3, 3, 0, 0, 2, 1, 1, 3, 2, 2, 0, 1, 3, 0, 0, 3, 0, 1, 3, 3, 3, 2, 2, 1, 3, 1, 1, 2, 3, 2, 3, 3, 2, 1, 1, 0, 2, 0, 3, 1, 3, 3, 0, 2, 2, 1, 2, 1, 0, 3, 0, 1, 0, 2, 1, 3, 2, 0, 3, 0, 0, 3, 2, 1, 1, 0, 2, 2, 0, 3, 3, 2, 3, 2, 2, 1, 0, 0, 2, 2, 2, 1, 1, 0, 3, 2, 0, 3, 1, 2, 3, 0, 3, 2, 3, 0, 0, 2, 2, 1, 0, 3, 3, 0, 1, 2, 0, 0, 3, 1, 3, 2, 3, 0, 3, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 1, 0, 0, 2, 0, 3, 3, 2, 3, 2, 1, 0, 3, 2, 2, 1, 3, 0, 1, 2, 2, 0, 3, 2, 3, 0, 0, 2, 2, 1, 0, 2, 2, 0, 0, 3, 1, 0, 2, 1, 3, 1, 2, 1, 2, 0, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 3, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 1, 2, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 1, 2, 2, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2], [1, 2, 2, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1, 2], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(1.0) - i1 ) \\ge int(38.0):{:\\nif int(4.0) \\le min(mod(min(abs(res0), i1),( int(1.0) * int(2.0) )), abs(( mod(res0,int(6.0)) * min(i1, i1) ))):{:\\nif min(in0, int(4.0)) != min(min(max(( ( int(3.0) + max(int(3.0), int(9.0)) ) + ( max(mod(max(abs(mod(int(6.0),int(2.0))), in0),divInt(i0,abs(int(0.0)))), min(max(in2, mod(( int(1.0) * ( int(5.0) * i1 ) ),abs(in0))), int(8.0))) * in1 ) ), ( int(2.0) + max(( i2 + max(in0, in1) ), min(divInt(int(4.0),int(0.0)), res0)) )), mod(mod(i2,max(abs(( min(( mod(int(4.0),res0) - i1 ), divInt(( divInt(int(8.0),int(0.0)) + i0 ),max(divInt(in2,max(int(5.0), ( abs(i2) + max(divInt(max(i0, in2),divInt(( int(7.0) - i0 ),abs(abs(i2)))), int(3.0)) ))), divInt(res0,i0)))) + max(int(7.0), abs(( min(i2, min(in2, mod(i1,min(int(1.0), int(3.0))))) * mod(min(max(int(1.0), int(9.0)), i1),in2) ))) )), divInt(i1,min(abs(mod(min(divInt(int(2.0),i2), max(divInt(mod(int(7.0),abs(i0)),int(3.0)), mod(( in1 + abs(mod(min(in1, res0),( divInt(int(1.0),i0) - ( ( in1 + in2 ) + min(int(8.0), in1) ) ))) ),divInt(int(0.0),min(int(8.0), divInt(int(9.0),( in0 + i1 ))))))),int(0.0))), int(6.0))))),in2)), i2):{:\\nb2 = not ( b0 or i1 == in2 )\\n:}else:{:\\nb2 = True\\n:}\\n:}else:{:\\nin1 -= ( int(4.0) * int(0.0) )\\n:}\\nin0 = abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 44, 44, 4, 3, 1, 8, 4, 4, 1, 2, 52, 2, 190, 50, 47, 23, 28]}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 0, 1, 2, 6, 6, 4, 6, 6, 6, 4, 9, 9, 3, 7, 7, 6, 1, 2, 1, 8, 7, 6], [3, 3], [2], [], [1, 1], [0, 0], [], [], [0], [4, 3, 5, 2, 3, 4, 4, 3, 4, 3, 3, 3, 2, 2, 4, 2, 4, 6, 5, 5, 4, 6, 0, 3, 4, 1, 4, 4, 5, 3, 1, 2, 6, 5, 2, 1, 4, 1, 5], [1], [3, 0, 3, 0, 3, 0, 0, 0, 3, 3, 2, 0, 3, 1, 3, 3, 0, 2, 3, 3, 2, 0, 1, 3, 1, 1, 3, 2, 0, 3, 2, 0, 2, 3, 2, 3, 1, 1, 3, 1, 2, 3, 0, 0, 2, 2, 0, 3, 2, 3, 2, 2, 2, 1, 0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 0, 3, 1, 2, 2, 2, 3, 3, 1, 0, 0, 1, 2, 3, 2, 0, 3, 2, 2, 3, 1, 1, 0, 0, 0, 0, 1, 2, 0, 2, 3, 0, 0, 2, 0, 2, 0, 3, 0, 3, 3, 1, 3, 2, 3, 2, 3, 3, 2, 1, 2, 3, 1, 2, 0, 1, 3, 3, 0, 2, 1, 1, 2, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 2, 1, 2, 1, 0, 2, 1, 2, 2, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 2, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2], [2, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(in1, abs(in0)) \\ge max(in2, i2):{:\\nb2 = in0 \\ge abs(max(( in1 * min(int(6.0), abs(max(in1, ( abs(abs(mod(in0,int(6.0)))) - max(int(0.0), int(1.0)) )))) ), min(divInt(in1,min(mod(in0,divInt(max(divInt(abs(int(2.0)),int(6.0)), min(int(6.0), ( min(in0, in0) * divInt(divInt(i2,min(( min(mod(( ( int(4.0) - i2 ) - in1 ),divInt(i2,in1)), int(6.0)) * res0 ), int(6.0))),in2) ))),divInt(in2,max(int(6.0), mod(mod(( min(min(int(4.0), in1), res0) * int(9.0) ),mod(abs(mod(i0,abs(mod(mod(min(int(9.0), int(3.0)),in0),in1)))),i1)),in1))))), int(7.0))), divInt(in1,divInt(abs(in2),in0)))))\\ni1 += ( i2 * mod(res0,min(in2, abs(max(int(7.0), max(( min(mod(max(abs(( int(6.0) - ( abs(int(1.0)) - ( i2 + int(2.0) ) ) )), min(abs(i1), ( int(1.0) * int(8.0) ))),( in1 - i1 )), in2) + int(7.0) ), int(6.0)))))) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 24, 24, 2, 1, 0, 2, 2, 0, 0, 1, 39, 1, 132, 34, 36, 15, 20]}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 1, 2, 0, 0], [0, 1], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 1, 1, 0, 2, 6, 4, 2], [2, 1], [1, 2], [0], [0, 0, 1, 0, 1, 0], [0, 0], [1, 3, 1, 1], [0, 0, 1], [1], [1, 6, 3, 1, 1, 0, 4, 2, 6, 3, 0], [0], [2, 3, 0, 2, 1, 0, 3, 0, 1, 0, 2, 3, 1, 2, 2, 3, 0, 1, 3, 1, 3, 1, 3, 2, 1, 2, 3, 2, 3, 0, 1, 0, 0, 0, 2, 3, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 2, 0, 0, 0, 1, 2, 2, 2, 2], [2, 2, 0, 1], [0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\ni1 = divInt(max(res0, ( int(7.0) * in0 )),abs(i1))\\n:}else:{:\\nloopBreak% = 0\\nwhile ( int(2.0) == i1 and True ):{:\\nb1 = mod(min(int(1.0), ( divInt(min(i0, int(1.0)),min(int(0.0), max(int(2.0), abs(mod(int(6.0),( abs(( abs(in1) * int(4.0) )) + i2 )))))) - res0 )),in0) \\g divInt(abs(i0),int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 9, 9, 2, 2, 1, 6, 2, 4, 3, 1, 11, 1, 38, 9, 10, 4, 5]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [1, 1], [], [], [], [], [], [], [], [], [2, 2], [1], [3, 2, 1, 1, 0], [0], [0], [1, 0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= min(( int(1.0) + int(1.0) ), i2)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 5, 1, 1, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [1], [7], [5], [1], [], [1], [0], [], [], [], [1], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i1 != int(7.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1], [7, 3, 2, 2, 9], [5], [1, 1], [], [0, 0, 1], [0], [1, 2], [0], [], [4, 4, 5, 4, 3, 4, 3, 4, 3], [], [2, 0, 3, 1, 2, 2, 2, 1, 3, 0, 0, 2, 0, 2, 3, 3, 3, 0, 0, 0, 3, 2, 0, 3, 1, 2, 0, 1, 1], [1, 1, 1, 1, 1, 0, 1, 0], [0, 2, 1, 0, 0, 2, 2], [2, 1], [1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nb1 = not mod(in1,min(int(7.0), divInt(divInt(divInt(int(3.0),abs(in1)),in2),mod(in1,( max(min(min(in0, in1), in0), abs(mod(in1,abs(int(2.0))))) * ( in0 - int(2.0) ) ))))) != int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 2, 0, 3, 1, 2, 1, 0, 9, 0, 29, 8, 7, 2, 6]}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 2, 2, 6, 9, 2, 8], [3, 0], [2, 1], [0], [1, 0, 0, 1], [0, 0], [3, 0], [], [], [1, 4, 3, 5, 3], [0], [3, 0, 3, 2, 1, 3, 1, 2, 1, 3, 3, 2, 1, 0, 1, 0, 3, 0, 1, 1, 1], [0, 1, 1], [1, 0, 1, 2, 2, 1], [0], [1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(i1, min(( int(1.0) + max(int(7.0), mod(int(2.0),abs(abs(divInt(int(2.0),in1))))) ), int(6.0))) \\ge in0:{:\\nb2 = ( b1 and max(in2, int(9.0)) \\l int(2.0) )\\nin0 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 8, 8, 2, 2, 1, 4, 2, 2, 0, 0, 5, 1, 21, 3, 6, 1, 2]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 0, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 1], [0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 5, 8, 5, 5, 6, 9, 9, 4, 3, 0, 6, 9, 9, 0, 6, 7, 7, 4, 4, 6, 1, 9, 0, 5, 7, 2, 4, 1, 9, 7, 5, 2, 7, 3, 9, 5, 8, 0, 9, 7, 3, 8, 6, 5, 7, 4, 3, 7, 7, 0, 4, 8, 6, 6, 4, 8, 1, 4, 2, 7, 4, 4, 5, 3, 6, 9, 7, 8, 5, 3, 2, 3, 3, 2, 7, 2, 6, 7], [4, 5, 3, 5, 4, 1, 2, 0], [2, 2, 1, 0], [1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 1, 2, 1, 1, 3, 1], [0, 1, 1, 0], [1, 0], [1, 3, 3, 2, 1, 5, 3, 5, 5, 3, 3, 6, 4, 4, 1, 4, 6, 0, 4, 4, 1, 2, 0, 3, 5, 6, 3, 0, 4, 4, 3, 0, 3, 5, 5, 6, 6, 3, 0, 4, 4, 5, 5, 1, 1, 1, 5, 1, 1, 1, 4, 0, 4, 3, 4, 4, 3, 0, 3, 3, 5, 2, 6, 6, 5, 6, 2, 6, 3, 0, 3, 2, 1, 4, 2, 5, 5, 2, 2, 3, 0, 4, 6, 3, 1, 5, 2, 0, 5, 3, 5, 6, 4, 6, 2, 1, 1, 0, 6, 2, 1], [0, 0, 1], [0, 2, 2, 3, 1, 0, 0, 0, 0, 3, 2, 2, 1, 3, 3, 0, 3, 2, 0, 2, 3, 3, 1, 3, 1, 1, 1, 3, 0, 1, 1, 3, 0, 2, 2, 3, 1, 0, 2, 0, 3, 3, 0, 0, 3, 3, 2, 2, 0, 1, 3, 1, 3, 2, 0, 2, 1, 2, 3, 3, 3, 1, 0, 2, 2, 0, 2, 1, 0, 3, 0, 0, 1, 0, 2, 2, 3, 1, 1, 3, 3, 2, 0, 3, 0, 3, 3, 1, 2, 3, 0, 0, 2, 0, 1, 2, 1, 0, 1, 1, 2, 3, 2, 3, 0, 0, 3, 0, 2, 0, 2, 3, 3, 1, 3, 1, 3, 0, 2, 3, 3, 2, 3, 1, 2, 2, 2, 3, 2, 0, 1, 0, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 1, 0, 2, 1, 1, 2, 2, 3, 0, 0, 0, 2, 0, 3, 3, 2, 1, 2, 0, 2, 0, 1, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 0, 2, 1, 2, 2, 2, 0, 3, 1, 0, 1, 2, 3, 2, 0, 1, 2, 1, 2, 1, 1, 0, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 2, 0, 2, 2, 2, 2, 1, 1, 3, 2, 0, 1, 0, 1, 0, 0, 3, 1, 0, 2, 0, 3, 2, 2, 3, 0, 3, 1, 2, 3, 0, 2, 3, 2, 2, 0, 3, 3, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 2, 1, 2, 2, 0, 1, 0, 1, 2, 0, 1, 2, 3, 1, 0, 0, 2, 0, 3, 1, 0, 0, 2, 0, 1, 1, 3, 3, 0, 2, 3, 1, 1, 2, 2, 3, 2, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 3, 2, 0, 2, 0, 3, 3, 0, 0, 3, 3, 1, 0, 2, 3, 1, 2, 0, 3, 3, 0, 2, 1, 0, 2, 3, 0, 3, 1, 0, 3, 1, 3, 0, 0, 0, 0, 2, 1, 0, 3, 2, 0, 3, 1, 2, 0, 0, 3, 3, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 1, 2, 1, 1, 2, 0, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 2, 2, 1, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 1, 2, 0, 0, 2, 0, 2, 1, 2, 1, 1, 2, 2, 0, 0, 0, 0, 2, 1, 2, 0, 1, 2, 1, 2, 2, 2, 0, 1, 0, 2, 0, 0, 2, 1, 1, 2, 0, 1, 0, 0, 1, 2, 2, 0, 1, 2, 1, 1, 1], [1, 1, 0, 0, 0, 2, 0, 1, 2, 2, 0, 2, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 1, 2, 1, 0, 2, 0, 0, 0, 1, 1, 0, 1, 2], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\le ( ( abs(int(7.0)) - in0 ) - in0 ):{:\\nb2 = i2 != i1\\nloopBreak% = 0\\nwhile abs(divInt(( int(3.0) + max(max(in2, abs(( in0 + divInt(max(max(int(5.0), abs(int(8.0))), int(5.0)),int(5.0)) ))), min(in2, int(6.0))) ),int(9.0))) \\ge max(in2, divInt(mod(abs(int(9.0)),in0),divInt(in0,min(max(res0, in1), min(min(mod(( in1 + int(4.0) ),min(int(3.0), max(( i1 * divInt(int(0.0),( max(max(abs(int(6.0)), in1), mod(( res0 + mod(int(9.0),i0) ),max(in1, in1))) - int(9.0) )) ), i1))), mod(mod(max(int(0.0), int(6.0)),abs(min(( i2 * abs(i0) ), abs(abs(int(7.0)))))),( min(in0, in2) * mod(res0,int(7.0)) ))), mod(int(4.0),in0)))))):{:\\nif not ( True or not False ):{:\\ni0 = int(4.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = False\\nloopBreak% = 0\\nwhile int(6.0) != mod(min(mod(abs(in1),in1), abs(in0)),divInt(i0,( abs(max(int(1.0), abs(int(9.0)))) + max(in0, ( max(max(( max(int(0.0), ( ( ( min(divInt(in2,int(5.0)), in2) * int(7.0) ) - abs(max(max(int(2.0), min(min(max(abs(int(4.0)), int(1.0)), res0), divInt(int(9.0),int(7.0)))), ( divInt(min(res0, in0),i0) + mod(in1,min(abs(divInt(int(5.0),( in1 + divInt(in2,int(2.0)) ))), int(7.0))) ))) ) * min(divInt(in2,( abs(( int(3.0) * i1 )) + ( i1 + ( int(9.0) + mod(( divInt(i1,max(int(5.0), in2)) * int(8.0) ),divInt(abs(mod(i1,int(0.0))),mod(int(9.0),( int(7.0) + int(3.0) )))) ) ) )), i1) )) * max(max(abs(abs(int(8.0))), int(6.0)), min(min(i1, min(min(( in1 * ( divInt(( ( int(5.0) + int(7.0) ) - abs(divInt(i0,int(4.0))) ),in1) + int(3.0) ) ), in0), in1)), max(int(7.0), in1))) ), ( in0 + abs(divInt(( min(i0, max(int(7.0), mod(abs(in0),( max(( ( in0 - abs(abs(int(0.0))) ) + divInt(( int(4.0) - in2 ),i2) ), int(8.0)) + ( res0 - ( divInt(int(6.0),mod(mod(res0,int(6.0)),in2)) - int(4.0) ) ) )))) + ( res0 * int(8.0) ) ),( abs(int(1.0)) - i2 ))) )), res0) - ( in0 + min(int(4.0), i0) ) )) ))):{:\\nin0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( i1 - int(2.0) ) \\le int(7.0):{:\\nin1 *= max(min(i2, ( abs(int(4.0)) - int(4.0) )), ( divInt(min(( min(in2, divInt(int(5.0),mod(( abs(int(3.0)) + ( mod(int(6.0),divInt(in2,int(9.0))) * ( i2 + ( int(7.0) + i2 ) ) ) ),int(8.0)))) + in0 ), divInt(i0,max(divInt(in1,( res0 - max(abs(in0), i1) )), min(max(int(5.0), in2), ( min(int(3.0), ( i2 - min(max(i0, divInt(int(2.0),in2)), ( abs(in0) + abs(int(3.0)) )) )) - in2 ))))),min(int(3.0), max(res0, in1))) * res0 ))\\nb1 = ( i2 \\g divInt(int(2.0),i1) or abs(mod(i1,max(int(7.0), mod(i0,res0)))) == max(max(int(2.0), i2), int(6.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(7.0) \\l i1:{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 80, 80, 8, 4, 2, 16, 8, 8, 4, 2, 101, 3, 370, 98, 94, 52, 47]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 0, 2, 2, 2, 2, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 1, 8, 2, 8, 7, 4, 1, 0, 9, 6, 8, 3, 9, 4, 2, 5, 4, 3, 9, 7, 3, 3, 7, 4, 6, 8], [3, 1, 3, 4, 5, 4], [1], [0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0], [3, 1, 2, 3, 3, 3, 0, 1], [1, 0], [1, 1], [6, 4, 4, 4, 3, 5, 4, 2, 4, 2, 5, 0, 1, 2, 3, 0, 4, 1, 2, 4, 2, 2, 6, 6, 3, 2, 1, 1, 4, 5, 0, 1, 1, 6, 6, 0], [0, 0, 0, 1], [3, 2, 1, 0, 3, 3, 2, 1, 0, 2, 1, 3, 0, 2, 1, 1, 3, 2, 0, 3, 2, 2, 2, 1, 3, 1, 0, 3, 0, 1, 0, 0, 2, 0, 0, 0, 1, 3, 1, 1, 3, 2, 2, 1, 3, 3, 3, 1, 1, 0, 0, 0, 3, 1, 0, 2, 3, 0, 1, 1, 0, 2, 2, 0, 2, 3, 2, 0, 0, 3, 2, 0, 3, 0, 3, 3, 2, 3, 1, 1, 0, 3, 3, 3, 2, 1, 0, 3, 0, 2, 0, 2, 1, 3, 3, 0, 1, 0, 2, 3, 0, 2, 1, 1, 1, 3, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0, 2, 1, 0, 1, 2, 1, 1], [0, 0, 0, 1, 1, 2, 2, 2, 1, 0], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( max(( int(3.0) + res0 ), abs(abs(mod(int(7.0),in1)))) \\ge ( int(1.0) + min(in1, ( int(8.0) + int(2.0) )) ) and False ):{:\\nin1 = min(mod(in0,min(mod(divInt(( int(8.0) - max(int(7.0), in2) ),max(in1, int(4.0))),i2), in1)), mod(i2,in2))\\ni0 = i1\\n:}else:{:\\nif not int(1.0) \\g abs(int(0.0)):{:\\nloopBreak% = 0\\nwhile int(9.0) \\ge min(( divInt(int(6.0),min(min(min(int(8.0), int(3.0)), i2), in0)) - i0 ), abs(int(9.0))):{:\\nloopBreak% = 0\\nwhile ( in1 \\le divInt(max(i1, int(4.0)),int(2.0)) and i2 != mod(( in1 * divInt(max(mod(i2,i2), max(mod(res0,abs(res0)), abs(max(mod(max(int(5.0), int(4.0)),in0), min(abs(max(( int(3.0) * i2 ), min(i1, ( i1 * ( int(9.0) - max(abs(in1), int(7.0)) ) )))), in2))))),mod(max(i0, mod(int(3.0),int(3.0))),int(7.0))) ),max(int(4.0), int(6.0))) ):{:\\nloopBreak% = 0\\nwhile ( ( b1 or True ) and i1 \\le int(8.0) ):{:\\ni1 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 += i0\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 28, 28, 6, 1, 4, 14, 6, 8, 2, 2, 36, 4, 112, 23, 29, 10, 14]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 3], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1], [5], [], [0], [], [0], [], [0], [], [], [5], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nin2 -= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 0, 1], [1], [1, 0, 0], [1], [8], [1, 4], [1, 2], [], [0, 1, 1], [0, 0], [1], [1], [], [4, 1, 5, 5, 2, 6, 2, 6], [1], [2, 3, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0], [1], [2, 1, 1], [1], [0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= divInt(abs(i1),in2)\\nloopBreak% = 0\\nwhile False:{:\\nb1 = max(in2, i2) \\g int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = max(res0, i2) \\le res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 2, 2, 0, 3, 2, 1, 1, 0, 8, 1, 12, 1, 3, 1, 1]}, {"genotype": [[0], [1], [1], [], [0], [1], [3], [2], [1], [], [1], [0], [], [], [], [5, 0], [], [2, 0, 1, 0], [0], [], [0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( in2 + int(3.0) ) == i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 0, 0, 6, 8, 7, 5], [1, 5, 3], [1, 0], [0], [1, 0, 0, 1, 1], [0, 0, 0], [3, 1], [0], [1], [2, 6, 4, 5, 2, 3], [], [3, 1, 1, 3, 2, 1, 3, 3, 0, 2, 0, 1, 0, 0, 1, 2, 3, 1, 3, 2, 1, 0, 1, 0], [0, 1, 1, 0], [1, 2, 0, 2, 1, 0], [2, 0], [0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(int(6.0), int(0.0)) \\g abs(( int(0.0) * min(abs(i2), divInt(res0,int(0.0))) )):{:\\nb1 = ( True and in1 != in2 )\\n:}else:{:\\nb0 = int(6.0) \\ge mod(max(int(8.0), min(( int(7.0) + i2 ), int(5.0))),in0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 8, 8, 3, 2, 1, 5, 3, 2, 1, 1, 6, 0, 24, 4, 6, 2, 2]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 3, 2], [1], [2, 0, 0], [0], [], [1, 0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= ( in0 + i2 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 0, 1], [1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 2, 5, 8, 7, 1, 1, 9, 6, 4, 7, 2, 7, 3, 7, 6, 0, 0], [0, 1, 3, 0, 0, 3], [2, 1, 0, 2, 1], [], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [2, 1], [1], [], [0, 2, 0, 5, 0, 0, 5, 2, 4, 2, 1, 5, 5, 1, 2, 2, 0, 3, 0, 3, 3, 3], [1, 1, 0, 1, 1], [2, 1, 0, 2, 3, 3, 1, 0, 0, 1, 3, 0, 1, 1, 0, 3, 1, 0, 3, 2, 2, 1, 0, 1, 1, 0, 3, 0, 2, 2, 2, 0, 2, 3, 0, 0, 3, 1, 0, 1, 2, 0, 1, 1, 3, 0, 3, 3, 3, 1, 0, 1, 2, 3, 1, 3, 3, 1, 3, 1, 3, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 2, 0, 1], [2, 1, 1, 1, 2, 1], [0, 0, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not divInt(int(0.0),i0) \\l ( max(max(int(3.0), i2), i0) * int(2.0) )\\nin2 -= min(i0, int(5.0))\\nloopBreak% = 0\\nwhile int(8.0) \\g i0:{:\\nin2 -= abs(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = in1\\nb1 = max(divInt(mod(int(1.0),i2),int(1.0)), int(9.0)) \\ge i1\\nb0 = max(in2, mod(mod(divInt(in2,mod(abs(i1),i2)),abs(int(6.0))),i2)) \\l int(4.0)\\ni0 -= divInt(in0,int(7.0))\\nloopBreak% = 0\\nwhile False:{:\\ni0 *= int(2.0)\\nb2 = abs(in0) \\l abs(min(abs(int(7.0)), in0))\\nb1 = int(3.0) \\ge ( max(int(7.0), abs(abs(int(6.0)))) - min(int(0.0), max(in0, int(0.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 2, 10, 19, 19, 6, 5, 0, 8, 6, 2, 1, 0, 22, 5, 63, 10, 17, 6, 8]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 0, 6, 8, 9, 7, 6, 4, 7, 1, 0, 0, 1, 2, 4, 9, 0, 8, 3], [], [], [], [], [], [], [], [], [2, 6, 6, 6, 1, 3, 2, 5, 3, 4, 4, 6, 4, 5, 1, 5, 1, 1, 5, 3, 3, 1, 6, 3, 3, 3, 1, 5, 0, 5, 1, 2], [1, 1], [3, 3, 2, 0, 3, 2, 1, 2, 3, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 1, 2, 3, 3, 1, 2, 3, 1, 3, 2, 2, 1, 3, 2, 1, 3, 3, 3, 2, 3, 3, 0, 3, 2, 1, 0, 1, 0, 0, 2, 1, 3, 1, 1, 2, 0, 0, 2, 2, 2, 3, 2, 0, 0, 0, 1, 2, 0, 0, 2, 2, 0, 3, 1, 0, 1, 3, 3, 1, 3, 3, 0, 0, 2, 2, 1, 3, 2, 3, 3, 0, 0, 3, 0, 0, 2, 2, 1, 1, 2, 0, 0, 3, 0, 1, 3, 2, 1, 0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 0, 1, 0, 2, 2, 2, 1, 0, 2], [1, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= max(max(divInt(res0,abs(mod(int(6.0),( abs(( ( divInt(mod(res0,( res0 * i1 )),in0) * i2 ) + in2 )) * int(9.0) )))), ( min(min(int(0.0), ( max(int(6.0), max(mod(divInt(int(8.0),min(( int(9.0) * min(abs(min(( abs(min(in0, min(divInt(int(7.0),in1), int(6.0)))) * in1 ), res0)), mod(int(4.0),abs(int(7.0)))) ), int(1.0))),( in1 * in2 )), ( divInt(divInt(abs(( i1 - in2 )),i1),int(0.0)) * ( i1 - in2 ) ))) - ( divInt(in0,max(int(0.0), in0)) + int(1.0) ) )), abs(min(int(2.0), max(min(i1, res0), mod(( int(4.0) + abs(divInt(abs(abs(in0)),in0)) ),max(in0, i1)))))) - ( ( int(9.0) - int(0.0) ) - ( in2 - i0 ) ) )), min(in2, int(8.0)))\\ni1 += abs(divInt(int(3.0),i2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 32, 2, 109, 31, 28, 19, 14]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0], [1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 9, 5, 3, 8, 1, 6, 0, 1, 3, 9, 5, 5, 9, 1, 1], [], [2, 0, 0], [], [0, 0], [], [0, 0], [], [], [3, 5, 3, 2, 3, 1, 5, 3, 0, 3, 5, 3, 6, 4, 1, 3], [1, 0], [2, 0, 2, 2, 2, 3, 0, 2, 1, 3, 1, 3, 1, 2, 2, 3, 1, 2, 3, 0, 3, 0, 3, 2, 2, 1, 2, 1, 3, 0, 1, 3, 2, 1, 2, 2, 0, 1, 0, 1, 3, 1, 3, 3, 3, 0, 1, 3, 2, 1, 2, 0, 3, 1, 0, 3, 3, 0, 1, 1, 0, 0, 2, 1, 0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 2, 0, 2, 0, 1, 2, 0, 1, 1, 2, 0, 0, 2, 1, 1, 1], [1, 1, 2, 1, 2, 2, 1, 0, 2], [0, 1, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nin0 -= divInt(in2,( ( mod(max(in0, mod(int(4.0),abs(int(2.0)))),min(int(9.0), ( ( abs(int(5.0)) - ( min(i2, max(in0, abs(mod(divInt(int(3.0),mod(int(8.0),min(i1, int(1.0)))),max(( int(6.0) * ( ( in2 - int(0.0) ) * in0 ) ), int(1.0)))))) * max(int(3.0), abs(min(min(i0, int(9.0)), abs(divInt(int(5.0),mod(in0,max(int(5.0), in2))))))) ) ) - max(max(in0, int(9.0)), int(1.0)) ))) + res0 ) * in1 ))\\ni1 = divInt(int(1.0),in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 17, 17, 0, 3, 0, 2, 0, 2, 0, 0, 16, 2, 65, 17, 17, 9, 9]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 2, 4, 6, 4, 8, 1, 7, 7, 6, 4, 3, 0, 1, 0, 9, 4, 4, 7, 9, 5, 3, 1, 0, 7, 7, 3, 0, 2, 4, 5, 2, 1, 9], [3], [0], [], [1], [0], [], [], [], [2, 0, 3, 3, 3, 4, 2, 4, 2, 3, 4, 3, 1, 4, 0, 0, 6, 4, 5, 1, 4, 4, 5], [], [3, 2, 1, 0, 2, 2, 0, 2, 1, 3, 3, 2, 3, 2, 2, 0, 3, 1, 1, 3, 3, 1, 2, 0, 0, 3, 0, 1, 2, 1, 2, 3, 3, 1, 3, 3, 3, 3, 3, 2, 0, 3, 2, 0, 3, 2, 0, 2, 2, 1, 3, 1, 3, 0, 3, 0, 3, 2, 1, 3, 2, 1, 1, 1, 1, 2, 0, 3, 0, 2, 2, 2, 1, 1, 3, 2, 3, 3, 1, 1, 3, 2, 3, 0, 0, 3, 1, 0, 2, 2, 1, 2, 0, 2, 3, 0, 1, 1, 3, 1, 1, 1, 0, 2, 1, 2, 3, 2, 2, 1, 0, 2, 3, 1, 1, 2, 3, 0, 1, 1, 3, 1, 3, 1, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [2, 0, 0, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0, 2, 0], [1, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 1, 2, 2, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(( int(9.0) - i2 )) \\ge divInt(divInt(i0,mod(int(2.0),min(min(mod(abs(( ( in0 * abs(int(2.0)) ) * int(4.0) )),max(max(int(6.0), ( in0 * in0 )), abs(in1))), int(4.0)), divInt(int(8.0),mod(max(abs(int(1.0)), max(abs(abs(abs(max(( i2 * max(( in1 - min(mod(i2,mod(mod(int(7.0),max(int(7.0), min(in0, min(in1, abs(( int(6.0) * abs(( int(4.0) * int(3.0) )) )))))),int(0.0))), int(1.0)) ), divInt(in0,abs(i1))) ), ( mod(( int(0.0) * int(9.0) ),min(mod(min(min(int(4.0), int(4.0)), min(( min(in1, i0) + max(int(7.0), i0) ), ( mod(int(9.0),( res0 * divInt(abs(in1),int(5.0)) )) - int(3.0) ))),max(int(1.0), int(0.0))), int(7.0))) * in2 ))))), mod(int(7.0),mod(abs(( divInt(int(3.0),i1) * divInt(max(int(0.0), int(2.0)),mod(min(in1, int(4.0)),int(5.0))) )),abs(int(2.0)))))),min(int(1.0), ( in1 - in2 ))))))),int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 35, 35, 1, 1, 0, 1, 1, 0, 0, 0, 23, 0, 128, 34, 36, 15, 19]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1], [2, 0, 1, 0, 2, 1, 1, 0], [0, 1], [0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 4, 4, 1, 1, 9, 1, 2, 0, 8, 4, 1, 1, 0, 1, 5, 7, 9, 2, 0, 4, 1, 6, 6, 6, 7, 7], [0, 0, 4], [0, 0, 0, 1, 1], [1], [0, 0, 0, 1, 1, 0, 1], [0, 0, 0], [0, 0, 3, 1], [1], [1], [6, 0, 1, 0, 4, 0, 3, 4, 1, 4, 5, 0, 6, 2, 3, 5, 6, 1, 5, 2, 2, 4, 2, 5, 6, 6, 5, 0, 2, 6, 5, 2, 5, 2, 0, 5], [0, 0, 1], [0, 1, 3, 3, 2, 2, 1, 2, 2, 1, 3, 1, 3, 0, 2, 3, 1, 2, 1, 3, 3, 3, 3, 3, 2, 2, 0, 2, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 0, 0, 0, 0, 3, 2, 1, 3, 3, 0, 0, 0, 1, 2, 0, 0, 2, 3, 1, 2, 0, 1, 2, 3, 3, 1, 1, 0, 0, 3, 0, 2, 1, 3, 2, 3, 1, 1, 2, 3, 1, 3, 0, 2, 3, 0, 3, 3, 1, 1, 2, 0, 3, 2, 0, 2, 3, 0, 3, 3, 2, 0, 1, 0, 2, 2, 2, 3, 0, 0, 2, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 2, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 0, 2, 1, 2, 0, 1, 2, 0, 1, 0, 2, 2, 2], [0, 0, 0, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nb0 = b0\\nres0 = i0\\ni1 = int(4.0)\\nloopBreak% = 0\\nwhile ( min(abs(( mod(int(3.0),( divInt(int(4.0),abs(int(4.0))) + min(i0, divInt(min(int(1.0), ( int(1.0) + abs(min(min(min(max(divInt(mod(in1,divInt(i0,in0)),mod(int(9.0),int(1.0))), in1), ( i1 + in1 )), ( in2 + ( int(2.0) - int(0.0) ) )), int(8.0))) )),( int(4.0) + ( ( int(1.0) * int(1.0) ) * i0 ) ))) )) - res0 )), i2) \\l in0 or max(( int(0.0) - max(max(in2, res0), i1) ), int(1.0)) \\l mod(in2,i2) ):{:\\ni2 -= mod(min(int(5.0), ( in1 - int(7.0) )),( min(abs(int(9.0)), int(2.0)) + i2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = False\\nb1 = in2 \\le min(res0, ( int(0.0) + abs(( max(int(4.0), int(1.0)) + mod(abs(int(6.0)),min(res0, mod(max(in2, abs(min(int(6.0), int(6.0)))),divInt(i0,max(( i2 + divInt(min(res0, abs(abs(( in2 * int(7.0) )))),i2) ), mod(( ( abs(in2) * i2 ) - mod(i0,int(7.0)) ),in2)))))) )) ))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 28, 28, 3, 5, 1, 7, 3, 4, 1, 1, 36, 3, 123, 33, 29, 19, 15]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [0, 1], [1, 1, 1], [4, 0, 3], [2], [2, 2], [], [1, 0], [0], [0], [], [], [0, 5, 5], [0], [3, 1, 1, 2, 0, 1, 0], [1], [1], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(4.0), int(0.0)) == mod(i0,int(3.0)):{:\\nb2 = b2\\nin2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 1, 2, 0, 2, 1, 1, 0, 0, 3, 1, 7, 1, 1, 0, 1]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 0], [], [1, 0, 0, 0], [1, 1, 1], [2, 8, 3], [2, 2], [2, 1, 1, 1], [0], [0, 0, 1, 1, 0], [0, 0], [3, 1, 0], [0], [], [4, 0, 1, 5, 4, 0], [1], [0, 0, 2, 3, 0, 0, 0, 1, 3, 1, 1], [0], [1, 0], [1, 2], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= i0\\nb2 = ( True and i1 == ( max(in2, in1) * i0 ) )\\nb1 = int(2.0) == min(int(8.0), int(3.0))\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 3, 3, 2, 4, 1, 5, 2, 3, 1, 0, 6, 1, 11, 1, 2, 2, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 4], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [0, 2, 2, 0, 0, 0], [1, 0], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 9, 4, 6, 9, 8, 0, 5, 9, 0, 9, 6, 6, 2, 6, 6, 9, 7, 1, 2, 4, 4, 0, 2, 7, 0, 1, 3, 7, 8, 7, 0, 7, 6, 9, 2, 6, 6, 6, 2, 5, 6, 9, 9, 7, 7, 5, 2, 8], [1, 5, 5], [1, 2, 1], [1], [0, 1, 0, 0, 1, 0, 1], [0, 0, 0], [3, 0, 1, 2], [0], [0], [2, 2, 3, 6, 1, 0, 6, 6, 6, 6, 6, 5, 0, 4, 4, 0, 5, 0, 6, 4, 3, 0, 6, 5, 4, 5, 6, 2, 4, 4, 6, 5, 3, 0, 4, 3, 2, 6, 0, 2, 2, 4, 4, 1, 1, 4, 1, 0, 2, 4, 6], [1, 1], [0, 0, 2, 1, 2, 2, 1, 2, 2, 3, 3, 2, 1, 2, 3, 2, 2, 0, 3, 3, 0, 3, 1, 0, 3, 2, 3, 0, 1, 2, 2, 3, 3, 2, 3, 0, 2, 1, 0, 1, 1, 2, 1, 2, 2, 3, 0, 0, 3, 3, 0, 2, 2, 0, 0, 1, 2, 1, 0, 1, 2, 0, 1, 3, 0, 1, 2, 2, 3, 2, 0, 2, 1, 0, 2, 0, 0, 2, 2, 3, 2, 2, 3, 0, 0, 3, 1, 2, 3, 1, 0, 1, 2, 3, 0, 2, 3, 2, 3, 1, 2, 3, 2, 3, 2, 1, 0, 1, 2, 3, 3, 1, 0, 3, 1, 3, 3, 2, 2, 0, 1, 2, 1, 3, 0, 0, 3, 3, 0, 3, 1, 2, 3, 3, 3, 0, 3, 0, 0, 0, 3, 1, 2, 0, 2, 3, 3, 3, 1, 1, 3, 1, 3, 1, 1, 2, 0, 1, 1, 1, 1, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 0, 1, 1, 0, 2, 2, 1, 2, 2, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 1, 2, 3, 2, 2, 0, 0, 0, 0, 2, 1, 3, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 2, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 2, 1, 1, 0, 2, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 0, 1, 0, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 0, 2, 0, 2, 2, 0, 0], [1, 2, 1, 0, 1, 0, 2, 0, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 2, 2, 0, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 88, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( i2 \\g i2 or b2 )\\nloopBreak% = 0\\nwhile True:{:\\nif mod(int(8.0),( mod(int(8.0),( ( max(max(( int(1.0) - divInt(abs(( ( in0 * abs(min(res0, max(int(9.0), i1))) ) - min(divInt(min(i0, int(4.0)),( divInt(max(max(( max(res0, mod(int(6.0),res0)) + int(9.0) ), int(8.0)), mod(int(0.0),( ( max(res0, res0) - min(max(res0, divInt(divInt(in2,i0),int(5.0))), mod(int(9.0),in1)) ) + int(0.0) ))),( in1 * int(9.0) )) + max(i0, int(6.0)) )), mod(( max(divInt(in2,( int(6.0) * i0 )), divInt(res0,in1)) * mod(mod(abs(( ( max(in0, i0) - max(int(2.0), mod(min(int(6.0), res0),int(6.0))) ) - ( abs(in2) - divInt(abs(( min(int(9.0), ( abs(divInt(max(( int(7.0) + in1 ), int(1.0)),mod(max(min(int(2.0), in2), max(int(4.0), min(max(( ( res0 + int(4.0) ) + ( int(0.0) - abs(i2) ) ), in1), min(max(in1, min(int(2.0), mod(min(max(abs(res0), max(in2, in0)), i0),abs(int(7.0))))), mod(in1,( min(abs(abs(int(0.0))), int(1.0)) + abs(int(3.0)) )))))),max(int(7.0), int(8.0))))) * ( in0 + int(7.0) ) )) * int(0.0) )),int(7.0)) ) )),int(6.0)),min(min(int(9.0), i2), abs(min(int(2.0), abs(int(6.0)))))) ),int(6.0))) )),res0) ), int(6.0)), int(2.0)) - i0 ) * divInt(divInt(int(5.0),divInt(mod(divInt(int(6.0),abs(int(9.0))),i2),( int(9.0) * i2 ))),in1) )) + int(7.0) )) != int(7.0):{:\\nin1 -= i1\\n:}\\nb1 = not i1 != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 -= ( min(( ( i1 - i0 ) + i2 ), in1) - ( int(2.0) + min(res0, int(8.0)) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 51, 51, 3, 3, 1, 7, 3, 4, 1, 1, 51, 2, 207, 55, 52, 31, 26]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 1, 0, 0, 2, 2, 0, 2, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 7, 0, 6, 3, 2, 4, 5, 4, 7, 6, 3, 4, 1, 3, 7, 2, 6, 6, 6, 4, 0, 2, 1, 9, 6, 4, 6, 0, 8, 0, 2, 1, 9, 6, 1, 0, 6, 4, 2, 5, 8, 1, 7, 9, 9, 2, 0, 1, 9, 2, 3, 9, 1, 7, 4, 5, 4, 6, 6, 7, 0, 8, 0, 9, 3, 4], [2, 2, 2, 5, 5], [0, 2, 1, 0, 2], [], [1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 2, 0], [], [1, 1, 0], [2, 2, 2, 3, 1, 3, 0, 0, 1, 5, 0, 3, 1, 5, 1, 1, 1, 3, 1, 0, 3, 0, 1, 4, 4, 6, 4, 3, 6, 4, 2, 3, 4, 5, 6, 0, 3, 4, 3, 5, 1, 3, 2, 2, 3, 5, 5, 3, 2, 6, 0, 2, 1, 3, 0, 0, 3, 1, 5, 4, 4, 5, 4, 1, 0, 3, 3, 0, 2, 4, 0, 4], [0, 0, 1], [1, 3, 2, 0, 2, 1, 3, 0, 3, 0, 1, 0, 1, 3, 3, 1, 3, 3, 1, 2, 1, 0, 2, 1, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 1, 1, 0, 2, 3, 2, 0, 1, 3, 2, 2, 3, 0, 3, 3, 3, 1, 2, 2, 3, 3, 2, 2, 3, 3, 1, 0, 2, 2, 1, 2, 1, 1, 1, 2, 2, 0, 2, 1, 1, 3, 1, 2, 3, 1, 0, 2, 2, 1, 3, 0, 3, 2, 2, 0, 0, 1, 0, 3, 2, 1, 2, 3, 2, 0, 3, 3, 2, 2, 3, 3, 2, 1, 2, 1, 0, 0, 3, 2, 0, 2, 1, 0, 2, 2, 1, 3, 1, 1, 0, 1, 3, 0, 3, 0, 1, 0, 3, 2, 3, 2, 1, 2, 1, 1, 2, 2, 0, 2, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 1, 3, 3, 2, 3, 0, 3, 0, 3, 1, 0, 2, 3, 2, 1, 2, 1, 3, 0, 0, 2, 3, 2, 1, 3, 3, 0, 3, 2, 0, 0, 1, 1, 3, 1, 2, 0, 2, 3, 3, 1, 3, 1, 1, 0, 0, 3, 0, 2, 2, 3, 0, 2, 2, 3, 2, 0, 1, 0, 2, 3, 1, 0, 3, 3, 0, 3, 3, 2, 3, 2, 2, 1, 2, 1, 3, 0, 2, 3, 3, 0, 0, 0, 0, 3, 0, 3, 1, 2, 2, 0, 1, 2, 3, 0, 3, 2, 3, 0, 2, 0, 0, 0, 1, 1, 3, 3, 0, 2, 1, 2, 1, 1, 2, 1, 2, 1, 0, 0, 0, 2, 3, 2, 1, 0, 3, 2, 1, 3, 1, 2, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 2, 2, 1, 1, 2, 2, 0, 0, 2, 2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 1, 2, 1, 0, 2, 0, 2, 0, 1, 0, 0, 2, 1, 0, 2, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 0, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 2, 1, 0, 2, 2, 0, 1, 0, 1, 0, 2, 0, 2], [0, 1, 1, 2, 1, 2, 2, 2, 0, 1, 0, 1, 1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 0, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 0, 0, 2, 1, 1, 2, 1, 2], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(5.0) == max(divInt(i2,( int(3.0) + min(i2, min(i2, int(7.0))) )), in0):{:\\nb0 = int(0.0) == min(max(int(6.0), min(abs(int(3.0)), mod(int(2.0),i1))), ( int(4.0) - abs(( in0 - i0 )) ))\\nb2 = b1\\n:}else:{:\\nb0 = not mod(max(int(5.0), i0),int(4.0)) == int(7.0)\\n:}\\nif int(6.0) != int(3.0):{:\\nif i1 != ( max(( in2 * int(4.0) ), abs(( divInt(abs(i0),min(min(abs(int(1.0)), ( ( abs(max(divInt(mod(abs(min(int(3.0), in0)),( divInt(int(7.0),divInt(int(2.0),int(6.0))) - int(6.0) )),( ( i1 * divInt(int(6.0),int(4.0)) ) * max(int(0.0), ( abs(int(2.0)) * in2 )) )), ( mod(int(1.0),abs(i1)) + abs(divInt(mod(i1,i1),int(9.0))) ))) - in0 ) + min(divInt(int(6.0),divInt(abs(( i1 - max(abs(divInt(( max(min(( int(4.0) - divInt(int(6.0),i0) ), in0), abs(divInt(i0,( int(0.0) - i1 )))) - ( ( int(8.0) + min(int(0.0), int(2.0)) ) * in1 ) ),int(1.0))), abs(in1)) )),min(res0, int(9.0)))), in1) )), max(( min(( int(6.0) * divInt(int(1.0),int(0.0)) ), ( mod(in0,divInt(( int(6.0) - int(4.0) ),res0)) - in1 )) - i2 ), in0))) - min(abs(in1), in2) ))) + max(min(int(2.0), abs(max(( abs(res0) * min(i0, max(int(5.0), in0)) ), ( abs(divInt(int(8.0),( int(1.0) - max(in1, in0) ))) * ( abs(mod(int(7.0),min(min(in2, max(mod(i1,in0), int(9.0))), int(9.0)))) - abs(int(2.0)) ) )))), ( i2 * divInt(min(abs(int(0.0)), max(int(1.0), int(9.0))),i2) )) ):{:\\nin0 = in2\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nin2 = min(in0, mod(( max(i2, ( divInt(min(( res0 - int(2.0) ), i0),( max(int(3.0), i2) - min(min(i1, min(abs(mod(abs(divInt(( int(9.0) - ( int(1.0) * abs(in0) ) ),( max(min(i0, i0), in0) * i1 ))),abs(in2))), abs(int(7.0)))), ( ( in1 - int(4.0) ) - divInt(min(in1, max(( min(in2, mod(in1,i1)) + i0 ), int(5.0))),int(4.0)) )) )) + max(min(in0, divInt(int(6.0),mod(int(6.0),int(7.0)))), mod(int(0.0),( int(8.0) * in0 ))) )) - i0 ),i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 -= ( abs(mod(int(0.0),i0)) * min(( int(9.0) - abs(int(3.0)) ), ( in1 * int(4.0) )) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 68, 68, 5, 5, 0, 8, 5, 3, 0, 3, 72, 3, 289, 76, 76, 43, 34]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 0, 2, 2, 2, 0, 2, 1, 1, 2, 1, 1, 1, 2, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 5, 4, 0, 7, 4, 0, 9, 4, 7, 4, 7, 3, 9, 7, 2, 4, 4, 7, 0, 4, 2, 9, 4, 4, 9, 1, 2, 1, 9, 4, 1, 7, 2, 4, 2, 0, 1, 4, 9, 7, 6, 4, 6, 6, 6, 6, 2, 5, 7, 0, 9, 1, 6, 7, 2, 1, 6, 0, 6, 7, 8, 9, 4, 7, 7, 8, 6, 2, 7, 4, 1, 9, 6, 6, 8, 8, 8, 1, 8, 1, 0, 2, 0, 1, 0, 9, 2, 9, 3, 5, 8, 8, 4, 1, 5, 7, 4, 1, 2, 0, 2, 6, 5, 2, 4, 8, 5, 6, 2, 0, 5, 4, 3, 0, 1, 1, 2, 1, 0], [0, 2, 2, 0, 4, 0, 5, 0, 1, 4, 4, 3, 5], [0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0], [1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 2, 1, 0, 3, 2, 0, 1, 2, 3, 2, 2, 1, 0], [0, 0, 0], [0, 1, 1, 0, 1, 1, 1], [0, 5, 0, 5, 2, 0, 5, 0, 6, 5, 5, 4, 1, 6, 0, 1, 4, 6, 6, 4, 6, 4, 5, 2, 1, 2, 4, 2, 6, 0, 4, 3, 6, 5, 0, 3, 2, 2, 6, 3, 1, 2, 1, 2, 1, 4, 2, 1, 0, 0, 4, 4, 4, 5, 3, 1, 6, 1, 5, 3, 5, 4, 3, 6, 4, 1, 0, 5, 6, 1, 0, 2, 1, 4, 5, 1, 3, 1, 0, 6, 3, 4, 3, 2, 2, 2, 6, 4, 3, 1, 0, 0, 2, 5, 2, 1, 6, 2, 5, 2, 2, 2, 6, 0, 5, 3, 4, 0, 2, 3, 6, 0, 3, 4, 6, 0, 2, 2, 4, 5, 0, 4, 6, 0, 5, 4, 5, 1, 6, 2, 0, 6, 6, 3, 3, 6, 4, 0, 1, 5, 1, 3, 6, 5, 1, 0, 0, 3, 4, 5, 2, 2, 1, 5, 3, 2, 0, 3, 2, 4, 4], [0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 2, 2, 2, 2, 0, 0, 2, 3, 2, 2, 3, 3, 3, 3, 2, 3, 2, 1, 0, 3, 1, 2, 2, 3, 3, 3, 0, 2, 1, 0, 1, 3, 1, 3, 0, 0, 3, 0, 1, 2, 1, 3, 2, 3, 2, 1, 0, 2, 1, 1, 2, 1, 1, 3, 1, 3, 2, 0, 1, 0, 0, 0, 2, 0, 1, 2, 1, 1, 3, 0, 1, 2, 2, 0, 0, 3, 2, 1, 3, 2, 2, 2, 1, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 3, 1, 1, 3, 2, 3, 1, 3, 1, 2, 2, 3, 2, 1, 1, 2, 0, 0, 0, 0, 2, 0, 1, 2, 0, 2, 0, 0, 1, 0, 0, 1, 0, 2, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1, 1, 2, 2, 2, 0, 0, 3, 3, 0, 0, 3, 2, 0, 0, 0, 0, 2, 2, 2, 0, 3, 1, 2, 1, 3, 3, 3, 0, 1, 2, 2, 0, 3, 0, 0, 2, 0, 0, 1, 3, 3, 3, 3, 3, 0, 3, 1, 1, 0, 0, 3, 2, 2, 2, 2, 3, 0, 0, 0, 3, 2, 0, 3, 3, 0, 2, 2, 0, 0, 1, 1, 3, 3, 3, 2, 3, 3, 0, 1, 1, 0, 1, 0, 0, 1, 1, 2, 0, 2, 1, 0, 2, 2, 3, 3, 1, 0, 3, 2, 2, 2, 1, 3, 1, 3, 0, 0, 3, 3, 1, 3, 1, 0, 2, 0, 3, 2, 0, 1, 0, 0, 3, 3, 0, 1, 1, 1, 3, 1, 1, 1, 2, 0, 1, 0, 0, 0, 2, 3, 0, 0, 3, 0, 1, 1, 1, 3, 2, 1, 2, 2, 1, 2, 3, 1, 2, 1, 1, 1, 2, 2, 3, 0, 2, 2, 0, 2, 0, 3, 0, 0, 1, 3, 3, 3, 2, 2, 2, 3, 0, 0, 0, 0, 0, 2, 3, 2, 1, 1, 0, 2, 0, 3, 2, 2, 0, 2, 0, 3, 1, 2, 2, 0, 2, 2, 0, 1, 3, 2, 1, 0, 2, 3, 3, 3, 3, 1, 3, 0, 1, 2, 0, 0, 3, 1, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 2, 3, 3, 2, 2, 2, 2, 0, 3, 1, 3, 3, 0, 1, 1, 1, 1, 0, 0, 2, 0, 3, 1, 1, 0, 1, 3, 3, 0, 2, 2, 2, 2, 1, 2, 3, 2, 2, 0, 1, 0, 2, 1, 0, 0, 2, 2, 3, 3, 2, 0, 0, 2, 0, 2, 3, 0, 2, 2, 3, 3, 2, 3, 2, 2, 3, 0, 2, 2, 1, 2, 0, 0, 0, 0, 1, 2, 1, 0, 1, 1, 0, 0, 2, 0, 0, 1, 3, 2, 1, 1, 3, 0, 2, 0, 0, 1, 1, 2, 1, 1, 2, 1, 3, 3, 3, 3, 0, 2, 0, 3, 1, 1, 0, 3, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 2, 1, 0, 3, 0, 2, 1, 3, 1, 1, 3, 0, 2, 2, 2, 1, 3, 2, 1, 3, 3, 1, 0, 0, 0, 0, 1, 2, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 0, 3, 1, 1, 0, 1, 2, 0, 1, 0, 2, 0, 3, 1, 3, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 2, 1, 0, 2, 1, 1, 1, 0, 0, 1, 0, 0, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1, 1, 2, 0, 2, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 2, 0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1, 1, 0, 0, 1, 2, 1, 2, 0, 1, 2, 0, 2, 2, 1, 1, 0, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 0, 1, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 1, 2, 2, 1, 2, 1, 0, 2, 2, 0, 2, 0, 2], [0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 0, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1, 1, 2, 0, 1, 1, 1, 2, 2, 1, 0, 2, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 2], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = max(mod(divInt(( divInt(in2,i0) + ( max(mod(divInt(max(abs(max(min(( abs(( int(2.0) + in2 )) + max(int(3.0), ( mod(max(max(min(i2, divInt(int(5.0),i0)), int(4.0)), min(int(0.0), max(in2, i0))),min(res0, int(7.0))) - ( int(4.0) + min(mod(max(( int(0.0) + in2 ), ( int(9.0) + int(4.0) )),mod(int(7.0),int(4.0))), abs(int(7.0))) ) )) ), min(( in2 * int(3.0) ), in1)), i1)), res0),mod(i0,int(9.0))),( int(7.0) * int(2.0) )), abs(i1)) - int(4.0) ) ),( ( in1 + res0 ) - abs(( int(4.0) - abs(divInt(mod(( int(7.0) + ( ( mod(mod(res0,( in1 - divInt(res0,divInt(min(int(0.0), int(4.0)),min(divInt(abs(int(2.0)),min(int(9.0), mod(( max(( int(4.0) - int(4.0) ), ( in1 * in2 )) * i2 ),i1))), ( i2 * int(9.0) )))) )),( in1 * ( i2 * res0 ) )) + int(1.0) ) - i0 ) ),in1),int(2.0))) )) )),in0), divInt(divInt(int(1.0),int(9.0)),( max(max(abs(divInt(divInt(int(4.0),int(1.0)),( ( ( res0 - in2 ) - min(abs(i0), in0) ) - min(divInt(i2,i2), res0) ))), in0), divInt(divInt(( i1 * min(int(7.0), divInt(int(2.0),min(abs(max(i2, int(4.0))), ( mod(i1,max(i2, i1)) - mod(in1,i2) )))) ),int(2.0)),min(min(min(max(max(i1, max(int(0.0), int(1.0))), i0), i0), min(( ( mod(( min(in1, in1) - in1 ),max(( in2 + abs(min(in0, divInt(mod(i1,res0),int(4.0)))) ), int(9.0))) - max(abs(max(( min(min(i1, int(7.0)), int(6.0)) - in2 ), int(4.0))), in0) ) + in2 ), int(6.0))), int(6.0)))) * mod(in1,divInt(int(6.0),in0)) )))\\nif mod(mod(max(max(int(6.0), res0), min(( ( ( int(2.0) + max(int(5.0), min(in1, i1)) ) * abs(abs(int(7.0))) ) - max(int(0.0), i0) ), ( in2 + max(( res0 - int(9.0) ), i1) ))),i0),abs(min(i2, int(1.0)))) \\l int(6.0):{:\\nif int(7.0) == min(int(2.0), int(1.0)):{:\\ni1 -= int(6.0)\\n:}else:{:\\nb0 = b0\\n:}\\n:}\\nb2 = ( mod(in1,int(0.0)) == in2 or ( ( i1 \\l in0 and divInt(max(i1, i0),min(res0, int(6.0))) \\le int(7.0) ) and b2 ) )\\nif not True:{:\\nb2 = int(8.0) \\l abs(divInt(int(9.0),divInt(( int(4.0) * mod(min(int(7.0), divInt(int(7.0),int(8.0))),int(6.0)) ),divInt(divInt(abs(in0),divInt(mod(in1,( in0 + abs(i2) )),i2)),int(2.0)))))\\n:}else:{:\\nif b0:{:\\ni2 = min(abs(min(divInt(( ( max(res0, in1) - in0 ) - i1 ),i0), ( max(mod(int(7.0),int(4.0)), i0) - ( i2 * min(( divInt(in2,( i2 * min(int(1.0), ( ( i1 - ( mod(res0,int(9.0)) + max(divInt(int(6.0),i2), ( abs(max(abs(min(int(6.0), max(in2, int(8.0)))), ( i2 * i2 ))) - abs(int(8.0)) )) ) ) + int(8.0) )) )) - min(int(1.0), abs(i2)) ), int(8.0)) ) ))), res0)\\n:}\\n:}\\ni0 = int(1.0)\\nb1 = ( in2 != ( in0 + ( abs(max(divInt(divInt(( mod(in1,max(int(0.0), min(abs(i0), int(2.0)))) + int(0.0) ),int(1.0)),int(0.0)), i2)) - in0 ) ) or not mod(res0,abs(int(9.0))) \\l int(2.0) )\\nif i0 \\g int(9.0):{:\\nloopBreak% = 0\\nwhile max(abs(in0), ( divInt(divInt(( int(3.0) + ( abs(divInt(divInt(in1,int(5.0)),res0)) - mod(int(8.0),i0) ) ),i2),divInt(( abs(abs(mod(i2,in1))) - mod(in2,mod(abs(i0),divInt(mod(abs(min(( min(mod(( abs(in1) + ( divInt(int(8.0),( res0 + i0 )) - in2 ) ),in1), int(4.0)) * mod(int(1.0),in2) ), int(5.0))),int(7.0)),i1))) ),res0)) + divInt(i2,i0) )) \\le int(4.0):{:\\nloopBreak% = 0\\nwhile abs(divInt(int(1.0),int(2.0))) \\le max(res0, ( res0 - in0 )):{:\\nb2 = int(0.0) \\ge int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b2:{:\\nin0 *= ( int(6.0) * int(5.0) )\\n:}else:{:\\nres0 = mod(int(2.0),min(max(max(min(in1, ( i0 - abs(int(4.0)) )), int(8.0)), i1), min(( max(min(min(min(abs(min(( ( max(divInt(int(5.0),in2), max(i1, ( int(6.0) * abs(int(2.0)) ))) + int(0.0) ) + abs(in0) ), mod(mod(( int(5.0) * max(mod(int(4.0),abs(max(int(3.0), res0))), in2) ),i1),i0))), int(0.0)), divInt(i0,min(divInt(abs(in0),in1), in2))), i2), abs(min(i2, abs(int(1.0))))) + int(1.0) ), i1)))\\n:}\\nif True:{:\\nin2 += int(2.0)\\n:}else:{:\\nb0 = not ( not not True or b0 )\\n:}\\nin0 += ( i2 * int(1.0) )\\n:}else:{:\\nloopBreak% = 0\\nwhile i0 != ( in0 * min(int(0.0), abs(i2)) ):{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 25, 25, 10, 15, 121, 121, 13, 11, 5, 31, 13, 18, 3, 7, 161, 9, 554, 150, 131, 77, 77]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [1], [], [], [], [], [], [], [], [], [5, 4], [1], [2, 0, 1], [1], [], [2], [0]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= divInt(in1,int(1.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1], [1, 1, 2, 0, 2, 2, 0], [0, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 6, 4, 0, 1, 2, 7, 1], [4, 4, 2], [0, 2, 2], [0], [1, 0, 0, 0, 1, 0, 1], [0, 0, 0], [0, 1, 3, 1], [0, 0], [0], [2, 5, 5, 4, 5, 4, 2, 0, 2, 5, 6, 0, 1], [0, 0], [3, 0, 0, 1, 1, 3, 2, 3, 3, 0, 3, 3, 1, 0, 0, 2, 1, 2, 0, 0, 3, 1, 2, 0, 1, 0, 0, 1, 2, 3, 1, 0, 1], [0, 1, 1, 0, 0], [0, 0, 1, 0, 2, 1, 0, 0], [1, 2, 0], [0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(i2, in2) \\le int(6.0)\\nb2 = b2\\nif True:{:\\nin2 = int(2.0)\\nloopBreak% = 0\\nwhile ( min(( max(min(in1, abs(max(int(6.0), in2))), in1) - divInt(int(4.0),divInt(i2,i0)) ), min(int(0.0), ( i2 * int(1.0) ))) \\le in2 and True ):{:\\nloopBreak% = 0\\nwhile res0 == int(2.0):{:\\ni0 = ( min(int(7.0), i1) + int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 9, 9, 3, 3, 1, 7, 3, 4, 2, 1, 13, 2, 33, 5, 8, 3, 2]}, {"genotype": [[0], [1], [0], [], [1], [1], [0], [], [], [], [], [], [], [], [], [5], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 6, 2, 3, 8, 9, 1, 6, 3, 1, 0, 6, 0, 9, 6, 0, 2, 4, 5, 9, 4, 8, 2, 9, 9, 1, 0, 6, 7, 3, 7, 3, 4, 9, 0, 2, 2, 1, 2, 0, 6, 5, 5, 6, 4, 7, 9, 4, 2, 9, 6, 6, 5, 2, 5, 6, 1, 4, 3, 8, 6, 2, 1, 2, 3, 6, 8, 4, 8, 8, 5, 6, 5, 3, 0, 6, 4, 0, 1, 8, 3, 7, 0, 3, 4, 1, 8, 4, 4], [1, 2, 1, 5, 5, 4, 1, 0, 2], [0, 2, 0, 0], [1, 1, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 2, 3, 0, 2, 3, 2, 1, 1], [1, 0], [1, 1, 1], [1, 3, 0, 0, 1, 3, 3, 4, 1, 4, 6, 4, 6, 0, 1, 5, 6, 1, 4, 2, 3, 6, 3, 6, 6, 2, 1, 5, 0, 1, 4, 1, 4, 1, 3, 6, 6, 2, 4, 4, 0, 5, 2, 2, 3, 2, 1, 4, 0, 5, 4, 3, 5, 6, 5, 6, 5, 0, 6, 3, 6, 4, 2, 5, 0, 2, 3, 4, 1, 5, 2, 5, 4, 0, 1, 0, 1, 4, 4, 5, 6, 0, 6, 4, 4, 4, 3, 5, 5, 5, 2, 2, 2, 5, 0, 1, 6, 2], [0, 1, 0, 0, 0], [0, 1, 0, 3, 2, 0, 2, 0, 2, 1, 1, 3, 1, 2, 3, 2, 0, 2, 2, 2, 3, 2, 2, 0, 2, 3, 2, 0, 2, 1, 2, 1, 1, 3, 1, 2, 0, 3, 2, 2, 3, 0, 0, 2, 3, 1, 3, 2, 2, 2, 0, 3, 0, 3, 1, 1, 1, 0, 3, 2, 3, 2, 2, 3, 0, 1, 2, 3, 3, 1, 2, 1, 2, 0, 1, 1, 3, 1, 2, 1, 0, 0, 2, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2, 1, 1, 0, 1, 2, 3, 0, 1, 1, 0, 1, 1, 0, 3, 1, 0, 2, 1, 2, 2, 0, 3, 2, 1, 0, 2, 3, 2, 0, 2, 1, 2, 3, 2, 3, 1, 1, 2, 2, 2, 0, 3, 0, 3, 1, 3, 0, 2, 3, 3, 0, 2, 3, 2, 3, 0, 0, 3, 3, 1, 2, 2, 0, 3, 3, 2, 2, 2, 1, 2, 1, 1, 0, 3, 0, 3, 2, 1, 2, 0, 3, 1, 0, 0, 2, 1, 0, 1, 2, 2, 0, 1, 0, 3, 2, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 3, 0, 0, 3, 3, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3, 3, 0, 1, 0, 3, 2, 0, 1, 3, 3, 1, 1, 2, 3, 2, 3, 3, 0, 1, 3, 2, 3, 0, 2, 0, 3, 1, 3, 0, 2, 2, 1, 2, 2, 1, 0, 0, 2, 1, 3, 0, 0, 3, 0, 0, 1, 3, 0, 2, 3, 0, 1, 1, 0, 2, 0, 3, 2, 3, 1, 1, 0, 1, 2, 3, 1, 3, 1, 2, 2, 2, 2, 3, 3, 2, 0, 3, 1, 3, 2, 0, 3, 2, 1, 0, 3, 0, 2, 1, 2, 0, 0, 0, 1, 1, 3, 2, 3, 1, 3, 0, 0, 1, 3, 3, 3, 3, 2, 2, 1, 3, 2, 2, 0, 2, 3, 2, 3, 3, 3, 2, 0, 0, 0, 2, 1, 3, 3, 0, 2, 3, 1, 3, 1, 0, 3, 1, 2, 1, 0, 1, 1, 0, 3, 3, 1, 3, 1, 0, 1, 3, 2, 1, 3, 3, 0, 0, 3, 2, 0, 0, 0, 3, 3, 1, 2, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 1, 2, 1, 1, 0, 1, 0, 2, 0, 1, 1, 2, 0, 0, 1, 2, 0, 0, 0, 1, 2, 1, 0, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 2, 1, 1, 0, 1, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 1, 2, 0], [2, 1, 1, 0, 1, 0, 1, 2, 2, 2, 0, 1, 2, 2, 2, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 1, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 0, 1, 1, 0, 2, 1, 1, 2, 2], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\g int(5.0):{:\\nb0 = ( in0 == abs(divInt(i0,( i0 * divInt(int(0.0),int(6.0)) ))) or abs(int(2.0)) \\g ( min(divInt(i1,( divInt(divInt(min(( divInt(in0,( abs(( in0 - ( int(3.0) - ( int(8.0) + int(9.0) ) ) )) - min(int(1.0), ( in1 + min(( ( min(i1, in1) - ( abs(int(6.0)) * max(divInt(mod(mod(res0,min(in1, min(int(3.0), int(1.0)))),int(0.0)),res0), max(( abs(mod(( abs(i0) * int(6.0) ),( abs(min(int(0.0), ( int(9.0) * ( i1 + int(6.0) ) ))) - int(0.0) ))) * abs(int(2.0)) ), ( int(4.0) * in2 ))) ) ) * res0 ), ( int(5.0) - ( int(9.0) + int(4.0) ) )) )) )) - ( ( min(int(8.0), min(( int(2.0) + int(9.0) ), i1)) - int(9.0) ) - ( abs(in1) + int(1.0) ) ) ), int(0.0)),i2),int(6.0)) - int(7.0) )), in0) - min(int(3.0), res0) ) )\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile ( int(7.0) - divInt(( in0 * abs(( int(3.0) * res0 )) ),mod(min(mod(res0,divInt(int(4.0),divInt(abs(divInt(min(int(9.0), int(0.0)),mod(mod(divInt(i2,min(i1, min(int(2.0), abs(in2)))),divInt(max(max(i0, ( max(( min(i1, in1) - max(abs(int(2.0)), ( ( i1 - max(max(divInt(( mod(int(1.0),divInt(int(2.0),int(0.0))) + in1 ),min(i1, max(( int(6.0) * mod(in0,min(int(5.0), res0)) ), res0))), mod(int(5.0),i2)), int(6.0)) ) - ( divInt(in1,int(4.0)) * in1 ) )) ), abs(divInt(int(7.0),i0))) + divInt(in2,int(9.0)) )), int(4.0)),i2)),i2))),in0))), int(2.0)),min(i2, i1))) ) != max(max(( divInt(int(9.0),abs(in1)) * i0 ), int(6.0)), in2):{:\\nloopBreak% = 0\\nwhile not int(6.0) != min(min(in1, int(5.0)), in0):{:\\nloopBreak% = 0\\nwhile ( b0 or max(( in2 - int(2.0) ), abs(min(int(5.0), int(6.0)))) \\le divInt(min(( min(max(res0, int(1.0)), abs(( max(in2, divInt(res0,min(int(4.0), min(in2, ( mod(int(3.0),( ( int(8.0) - i0 ) * res0 )) + ( int(6.0) - max(in0, res0) ) ))))) - abs(in1) ))) * i2 ), int(2.0)),abs(in2)) ):{:\\nloopBreak% = 0\\nwhile not divInt(max(i0, int(1.0)),int(2.0)) \\g i2:{:\\nin0 = ( in1 * abs(( abs(int(3.0)) * int(6.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = i1 \\l int(8.0)\\nif ( mod(abs(int(4.0)),abs(int(8.0))) == divInt(divInt(mod(( abs(min(( in2 - abs(int(8.0)) ), abs(( i2 * abs(divInt(int(5.0),in2)) )))) - min(in1, divInt(int(6.0),mod(i0,i1))) ),i0),int(5.0)),int(3.0)) or not False ):{:\\ni1 += min(mod(abs(int(0.0)),abs(in1)), in1)\\n:}else:{:\\nif True:{:\\nin2 = int(6.0)\\n:}else:{:\\nres0 = abs(min(max(min(( ( int(4.0) * max(divInt(( i0 + ( abs(( max(max(min(( res0 + in1 ), in1), ( int(0.0) - max(abs(in1), ( abs(int(1.0)) - min(int(8.0), in0) )) )), abs(int(3.0))) + ( int(7.0) * in2 ) )) - int(0.0) ) ),int(3.0)), in2) ) - abs(abs(int(4.0))) ), min(int(1.0), in2)), int(8.0)), max(( int(4.0) * abs(min(i2, i2)) ), max(divInt(i2,in2), i0))))\\n:}\\n:}\\ni1 = abs(min(int(4.0), ( res0 * i2 )))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 8, 7, 90, 90, 9, 4, 3, 19, 9, 10, 2, 3, 98, 5, 381, 101, 97, 59, 43]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [2, 0, 2, 0, 0, 1], [1, 0], [1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 6, 2, 6, 1], [4], [1, 0], [], [1, 0, 0], [0], [0, 1], [1], [0], [4, 2, 4, 5, 0, 0], [1, 1, 1], [0, 3, 1, 1, 0, 3, 2, 1, 3, 1, 2, 3, 0, 1], [0, 0], [2, 2, 0, 2], [1, 1, 1, 0, 1], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 \\le abs(int(0.0)):{:\\ni2 -= int(6.0)\\nif b1:{:\\nin1 -= in2\\n:}\\ni0 -= abs(( int(2.0) + min(int(6.0), ( abs(i0) - int(1.0) )) ))\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 5, 5, 1, 2, 0, 3, 1, 2, 1, 1, 6, 3, 14, 2, 4, 5, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [0, 0, 1], [], [], [1], [1, 0, 1], [], [0, 1], [0], [0], [], [], [4, 6, 5, 3], [0], [0, 0, 0], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\nb1 = in1 \\g res0\\nin2 = in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 1, 3, 0, 2, 1, 1, 0, 0, 4, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [1], [], [], [], [], [], [], [], [], [2], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= int(1.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [0, 3], [], [], [], [], [], [], [], [], [4, 4, 1], [1], [2, 0, 3, 1, 3, 3, 0, 1], [1], [0, 2, 1], [0], [1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += mod(in1,min(int(0.0), abs(max(i1, int(3.0)))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 8, 1, 3, 1, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 6, 8, 0, 5, 8, 2, 9, 1, 2, 4, 1, 7, 9, 1, 5, 6, 0, 4, 5, 1, 4, 1, 7, 5, 0, 5, 9, 8, 0, 2, 4], [0], [0], [], [0, 1], [0], [2], [], [], [6, 3, 1, 2, 2, 0, 6, 0, 5, 2, 2, 6, 1, 3, 2, 5, 5, 3, 1, 3, 1, 3, 2, 2, 6, 5, 4, 3, 2, 6, 2, 3, 1, 3, 5, 5, 3, 4, 6, 1, 5, 1, 4, 3, 3, 4, 1], [0], [0, 1, 3, 3, 3, 2, 1, 3, 2, 3, 2, 3, 2, 3, 0, 3, 1, 0, 1, 2, 0, 0, 3, 3, 2, 2, 0, 0, 3, 1, 2, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 2, 2, 1, 1, 1, 2, 0, 1, 3, 2, 3, 0, 2, 2, 0, 3, 0, 1, 2, 0, 2, 3, 1, 2, 2, 0, 2, 0, 3, 0, 3, 2, 3, 1, 2, 2, 3, 3, 3, 0, 2, 2, 1, 0, 3, 3, 3, 3, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 2, 0, 3, 0, 1, 1, 0, 2, 0, 1, 1, 1, 0, 1, 3, 1, 2, 2, 3, 0, 2, 3, 1, 2, 2, 3, 0, 2, 3, 1, 0, 3, 0, 0, 3, 3, 2, 2, 3, 1, 0, 0, 0, 3, 0, 2, 2, 1, 0, 2, 0, 0, 3, 0, 3, 1, 1, 2, 3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 1, 1, 0, 0, 1, 2, 1, 0, 2, 3, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 2, 2, 2, 1, 1, 0, 1, 2, 1, 1, 2, 2, 1, 2, 1, 0, 2, 1, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2], [1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 1, 2, 1, 2, 2, 1, 2], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 104, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not res0 \\l int(0.0)\\nin0 = abs(abs(abs(divInt(int(1.0),abs(( abs(mod(max(( max(i1, min(int(0.0), i2)) - int(6.0) ), divInt(i2,i0)),max(abs(mod(mod(res0,i0),max(int(8.0), ( mod(( max(abs(divInt(( abs(divInt(max(abs(mod(( int(0.0) * int(5.0) ),int(8.0))), divInt(in2,int(2.0))),max(( min(i2, ( ( i2 - abs(res0) ) - int(9.0) )) + mod(i1,divInt(max(int(1.0), mod(( in0 + mod(i2,max(in2, max(mod(min(int(2.0), ( ( abs(min(min(in2, mod(( int(4.0) + in0 ),min(abs(abs(max(i1, ( mod(in0,( i1 + ( in0 + i2 ) )) + ( int(1.0) + divInt(mod(i2,min(res0, int(7.0))),int(9.0)) ) )))), in2))), divInt(in1,int(1.0)))) * int(5.0) ) + int(6.0) )),in0), int(0.0)))) ),abs(int(4.0)))),mod(( abs(i2) - divInt(abs(int(5.0)),divInt(( min(res0, mod(abs(int(1.0)),i2)) - abs(in0) ),i1)) ),min(abs(divInt(( max(int(4.0), in0) - in2 ),in2)), max(in0, divInt(( int(1.0) * in1 ),divInt(res0,i1))))))) ), abs(in2)))) - abs(int(7.0)) ),int(5.0))), divInt(abs(max(max(int(0.0), abs(( i1 * int(5.0) ))), divInt(int(9.0),int(8.0)))),int(0.0))) * in1 ),in0) - int(2.0) )))), divInt(int(4.0),in0)))) * divInt(abs(in1),i1) ))))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 34, 34, 1, 1, 0, 2, 1, 1, 0, 0, 47, 1, 181, 53, 48, 22, 31]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 2, 2, 0, 2, 1, 2, 0, 1], [1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 5, 4, 8, 2, 0, 4, 2, 2, 6, 0, 0, 9, 9, 3, 6, 6, 6, 6, 3, 8, 1, 9, 7, 9, 2, 3, 1, 4, 1, 6, 4, 1, 9, 4, 8, 5, 6, 1, 8, 3, 0, 8, 3, 5, 3, 1, 3, 6, 4, 8, 2, 6, 3, 0, 3, 0, 9], [2, 3, 4, 0, 0], [0, 1, 1, 2], [0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0], [1, 2, 3, 0, 1], [1, 0], [0, 0, 1], [1, 0, 0, 2, 5, 4, 4, 1, 2, 2, 6, 0, 0, 3, 5, 1, 5, 6, 0, 1, 0, 2, 2, 2, 0, 3, 5, 2, 4, 3, 6, 4, 4, 2, 3, 1, 0, 5, 2, 3, 3, 0, 1, 1, 1, 3, 4, 5, 5, 1, 6, 4, 0, 4, 3], [1, 1, 0, 0], [3, 3, 0, 0, 2, 1, 1, 2, 3, 0, 3, 0, 3, 3, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 3, 0, 2, 1, 3, 3, 2, 3, 0, 1, 2, 1, 1, 1, 3, 1, 2, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 2, 0, 2, 3, 3, 3, 1, 1, 2, 1, 1, 1, 1, 2, 3, 3, 3, 0, 3, 1, 2, 1, 3, 2, 1, 3, 1, 3, 0, 2, 0, 3, 2, 1, 0, 2, 2, 1, 1, 2, 1, 3, 2, 3, 3, 0, 2, 0, 2, 2, 1, 0, 0, 2, 1, 3, 0, 3, 2, 1, 0, 1, 0, 3, 3, 0, 0, 2, 2, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 0, 1, 3, 0, 1, 3, 2, 2, 1, 2, 2, 0, 3, 3, 2, 1, 1, 0, 2, 0, 1, 0, 2, 1, 1, 1, 3, 1, 0, 2, 1, 2, 2, 0, 1, 3, 1, 0, 2, 3, 2, 0, 2, 1, 2, 0, 2, 0, 0, 1, 2, 1, 2, 1, 2, 2, 3, 0, 3, 0, 2, 0, 0, 1, 2, 3, 1, 0, 3, 3, 2, 3, 1, 0, 0, 1, 0, 2, 0, 3, 3, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 1, 1, 2, 0, 1, 1, 2, 2, 1, 1, 2], [0, 1, 2, 0, 2, 2, 0, 1, 1, 0, 2, 2, 2, 0, 2, 1, 1, 0, 1, 0, 2, 0, 2, 2, 1, 1, 0, 1, 1, 2, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += max(abs(i0), i0)\\nb0 = ( int(5.0) - int(2.0) ) == mod(max(i2, min(in2, max(max(int(5.0), max(int(4.0), max(min(in1, max(in1, ( int(8.0) * max(i1, ( int(2.0) + abs(min(( max(i2, int(0.0)) * ( int(4.0) * int(2.0) ) ), int(2.0))) )) ))), min(int(6.0), ( ( ( int(0.0) + int(0.0) ) - int(9.0) ) - i2 ))))), res0))),i0)\\nb1 = False\\nloopBreak% = 0\\nwhile not int(9.0) \\ge mod(int(3.0),mod(i0,( max(max(min(int(6.0), int(6.0)), ( int(6.0) + int(6.0) )), int(3.0)) * int(8.0) ))):{:\\nif mod(abs(max(min(in0, min(int(1.0), mod(int(9.0),abs(mod(int(7.0),abs(int(9.0))))))), min(in2, ( i1 * min(divInt(int(2.0),in2), ( ( int(3.0) * int(1.0) ) + ( int(4.0) * abs(( min(max(res0, ( i0 - mod(mod(int(1.0),i1),i0) )), ( int(6.0) - min(i2, min(( int(4.0) + i2 ), int(1.0))) )) - i2 )) ) )) )))),min(abs(i0), in0)) \\le ( ( min(mod(in2,divInt(min(int(9.0), min(mod(min(max(i2, int(4.0)), min(in1, int(8.0))),abs(divInt(mod(int(5.0),( divInt(in0,max(max(( int(6.0) + int(1.0) ), res0), divInt(in1,int(8.0)))) * in1 )),( int(3.0) + int(0.0) )))), int(8.0))),max(int(3.0), i2))), divInt(int(5.0),mod(( in0 * int(3.0) ),max(int(1.0), i1)))) * mod(abs(divInt(i0,( int(3.0) - ( in2 - divInt(i2,in0) ) ))),int(6.0)) ) + mod(int(4.0),( int(8.0) - mod(( min(in0, max(i0, divInt(i1,i1))) - int(2.0) ),mod(max(int(6.0), i1),abs(abs(( max(int(3.0), in0) * in1 ))))) )) ):{:\\nb1 = ( int(0.0) \\l in2 and mod(in2,max(abs(i1), int(3.0))) \\l int(0.0) )\\n:}\\nif b2:{:\\nres0 -= in1\\n:}\\nif True:{:\\ni0 = int(9.0)\\n:}else:{:\\nin1 = in0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 4, 7, 59, 59, 5, 4, 1, 10, 5, 5, 2, 3, 55, 4, 218, 55, 53, 31, 26]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1], [8, 4], [4], [2], [], [1], [0], [], [], [], [6, 2, 2, 1], [1], [1, 0, 2, 1, 2, 0, 0], [0, 1], [], [1, 1], [1]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= int(8.0)\\nb2 = i2 \\le ( int(4.0) - mod(i2,i1) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 7, 2, 0, 2, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 6, 1], [1], [2, 0, 0], [0], [], [0, 1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += ( res0 - i1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 1, 1], [0], [0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 0, 3, 4, 4, 6, 3, 6, 6, 1], [2, 3, 1, 0], [0, 1, 2], [], [1, 1, 1, 1], [0, 0, 0, 0], [], [], [0], [4, 1, 5, 3, 0, 4, 0, 6, 3, 0, 6, 3, 4, 4], [0], [2, 3, 2, 0, 2, 3, 0, 2, 2, 2, 0, 0, 0, 1, 3, 1, 1, 2, 0, 1, 3, 2, 0, 2, 1, 0, 1, 0, 2, 1, 3, 2, 1, 0, 0, 3, 2, 2, 3, 2, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [2, 2, 2, 2, 0, 2, 2], [2, 0, 2, 0, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(( in1 * ( abs(i1) + mod(divInt(mod(in2,in0),i0),int(6.0)) ) )) * abs(int(0.0)) ) == int(0.0):{:\\nb0 = ( in1 + int(3.0) ) \\ge abs(mod(i0,( int(4.0) * res0 )))\\nb1 = int(4.0) \\g in0\\ni0 = divInt(int(6.0),min(( int(3.0) - res0 ), in0))\\n:}\\nb2 = abs(( mod(abs(( int(6.0) + int(6.0) )),int(1.0)) - in1 )) \\l in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 11, 11, 4, 3, 0, 4, 4, 0, 0, 1, 14, 1, 45, 14, 7, 8, 6]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 2, 6, 1], [1], [3, 0, 2, 0, 0], [0], [1], [2, 0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= max(i2, ( res0 + i1 ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 2, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 2, 1, 2, 1, 0, 1, 1, 1], [0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 0, 3, 9, 2, 6, 6, 5, 6, 9, 5, 4, 1, 2, 4, 5, 9, 7, 6, 2, 6, 2, 8, 2, 1, 4, 3, 3, 0, 6, 6, 2, 8, 5], [0, 2, 1, 4, 2], [2, 2], [1], [0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [3], [], [1], [6, 3, 0, 1, 2, 3, 1, 6, 0, 3, 4, 1, 4, 0, 5, 0, 1, 6, 3, 4, 4, 0, 5, 5, 5, 6, 3, 4, 1], [1, 0, 1, 0, 1], [2, 2, 1, 1, 2, 1, 2, 3, 2, 2, 3, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 2, 0, 0, 3, 1, 1, 0, 3, 0, 0, 2, 1, 1, 3, 0, 3, 3, 3, 1, 2, 3, 1, 0, 1, 0, 1, 2, 1, 3, 2, 3, 1, 3, 1, 3, 0, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 1, 2, 0, 2, 3, 3, 0, 2, 2, 3, 2, 0, 2, 2, 1, 1, 2, 0, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 1, 1, 1, 1, 1, 2, 0, 3, 3, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 2, 1, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2], [1, 1, 1, 0, 0, 0, 1, 0, 2, 2, 1, 1, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= ( ( int(4.0) - int(6.0) ) - mod(int(0.0),mod(min(( mod(min(in0, mod(divInt(int(3.0),i0),( min(int(9.0), i1) + i2 ))),( in0 + i1 )) + min(int(2.0), int(6.0)) ), res0),abs(i0))) )\\nif ( in0 \\l mod(int(6.0),int(5.0)) or max(in1, max(min(abs(int(6.0)), ( abs(int(9.0)) - i1 )), int(5.0))) == in1 ):{:\\nb2 = int(4.0) \\g ( int(1.0) + max(divInt(max(int(2.0), min(int(4.0), abs(i0))),in2), int(5.0)) )\\nloopBreak% = 0\\nwhile ( mod(max(i0, int(9.0)),divInt(divInt(int(7.0),int(6.0)),mod(i1,( max(abs(res0), ( ( max(( in0 * ( mod(int(2.0),int(6.0)) * ( in1 - in1 ) ) ), mod(int(2.0),int(8.0))) - int(2.0) ) + int(1.0) )) + i0 )))) - ( int(4.0) - int(3.0) ) ) \\le in2:{:\\nin2 = ( int(3.0) - int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 += int(6.0)\\nres0 = int(6.0)\\nb2 = int(2.0) == mod(in0,min(abs(int(8.0)), in1))\\ni1 += int(5.0)\\n:}\\n", "other_info": {}, "test_fitness": 997, "mapping_values": [1, 9, 9, 2, 7, 35, 35, 5, 2, 1, 6, 5, 1, 0, 1, 29, 5, 109, 30, 20, 19, 14]}, {"genotype": [[0], [0, 1, 0, 1, 0, 1], [2, 1, 1, 2, 1, 1], [1, 0], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 2, 4, 0, 6, 9, 6, 8, 8, 7, 9, 7, 1, 1, 1, 7, 1, 6, 3, 2, 0, 5, 6, 8, 1], [4, 1, 4], [1, 1, 1], [], [1, 1, 1, 0], [0, 0, 0], [0], [], [0], [1, 6, 1, 4, 4, 0, 4, 4, 3, 1, 3, 6, 5, 4, 2, 2, 4, 3, 3, 1, 6, 0, 2, 1, 3], [0, 1], [2, 0, 2, 0, 1, 3, 2, 2, 3, 3, 3, 1, 2, 3, 2, 0, 2, 2, 3, 2, 0, 3, 3, 3, 1, 1, 2, 3, 3, 2, 2, 3, 2, 1, 3, 0, 1, 1, 1, 0, 0, 1, 0, 3, 3, 0, 2, 0, 2, 3, 1, 2, 2, 0, 0, 2, 0, 1, 1, 3, 2, 0, 3, 1, 2, 0, 3, 1, 1, 1, 0, 3, 2, 2, 1, 3, 0, 2, 0, 3, 1, 3, 1, 0, 1, 3, 1, 1, 0, 1, 1, 3, 3, 0, 0, 1, 2, 0, 3, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 2, 2, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 2, 2, 0, 0, 2, 0, 1, 1, 2, 1, 2, 2], [0, 0, 0, 2, 1, 0, 0, 1, 2], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(i1,mod(res0,int(4.0))) \\le min(( divInt(min(min(abs(int(1.0)), ( abs(( i1 + ( mod(min(( in1 + min(abs(max(int(2.0), int(4.0))), mod(max(max(( mod(max(mod(int(0.0),abs(in1)), int(6.0)),int(9.0)) + int(6.0) ), i0), in1),int(8.0))) ), in1),min(min(in0, mod(i1,divInt(abs(int(8.0)),mod(mod(in0,res0),divInt(in2,int(7.0)))))), int(9.0))) * abs(divInt(in1,min(int(7.0), ( i2 - min(int(1.0), int(1.0)) )))) ) )) + int(1.0) )), i2),abs(divInt(mod(int(7.0),min(in1, mod(in0,max(int(1.0), max(int(6.0), in0))))),int(3.0)))) + abs(int(2.0)) ), int(0.0)):{:\\nb1 = i1 \\g int(5.0)\\nres0 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif max(abs(i0), i2) \\le int(8.0):{:\\nb1 = b1\\ni1 -= ( in0 * abs(int(1.0)) )\\n:}\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 6, 6, 2, 4, 26, 26, 3, 3, 0, 4, 3, 1, 0, 1, 25, 2, 100, 24, 27, 9, 16]}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 1, 1], [0, 1], [0, 1], [1, 1], [8, 8], [4], [2, 1, 2], [], [0, 0, 0, 0, 1], [0], [2, 2, 0, 0], [], [0], [6, 2], [0], [1, 1, 0], [], [], [], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not not b2:{:\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = int(8.0) \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i2\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 2, 2, 1, 3, 0, 5, 1, 4, 0, 1, 2, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 2, 1, 2, 2, 0, 1, 1], [0, 1, 0], [1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 7, 2, 1, 6, 3, 2, 8, 8, 1, 0, 6, 9, 7, 2, 8, 9, 6, 2, 0, 5, 1, 7, 8, 3, 7, 7, 9, 5, 5, 9, 3, 0, 6, 2, 5, 9, 0, 8, 1, 4], [0, 4, 4, 0, 3], [2, 2, 1, 1, 0], [0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [2, 1, 2, 3, 2, 1, 0, 2], [1, 0], [0, 0], [2, 2, 4, 2, 2, 3, 3, 4, 0, 1, 0, 2, 2, 5, 0, 5, 1, 1, 1, 6, 4, 3, 2, 4, 5, 2, 6, 6, 3, 1, 0, 1, 3, 2, 2, 2, 1, 6, 5, 6, 2, 4], [1, 0], [3, 3, 1, 3, 2, 2, 0, 2, 2, 1, 0, 0, 3, 2, 2, 1, 0, 1, 1, 2, 0, 0, 2, 3, 2, 1, 1, 3, 1, 2, 3, 3, 3, 0, 3, 2, 0, 2, 1, 1, 3, 3, 1, 0, 3, 0, 2, 3, 2, 0, 1, 0, 1, 1, 0, 1, 3, 3, 0, 2, 1, 1, 2, 1, 2, 2, 0, 2, 3, 2, 0, 0, 2, 2, 2, 1, 1, 2, 0, 2, 2, 0, 1, 2, 3, 3, 0, 1, 2, 3, 3, 2, 1, 0, 2, 3, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 1, 0, 1, 2, 2, 3, 2, 2, 1, 2, 2, 1, 3, 1, 0, 1, 0, 1, 3, 2, 2, 2, 3, 0, 2, 2, 0, 2, 3, 0, 3, 0, 1, 0, 1, 0, 0, 1, 3, 3, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0, 3, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 2, 0, 2, 1, 2, 1, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 2, 0, 2, 0, 0, 0, 1, 1, 2, 0], [0, 1, 2, 1, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 2, 1, 1, 0, 1, 2, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += max(abs(int(6.0)), min(mod(( i2 - ( ( int(7.0) * in1 ) - i2 ) ),abs(mod(mod(int(7.0),i2),int(2.0)))), int(1.0)))\\nb2 = not False\\nif ( in0 * in0 ) \\l mod(max(( int(6.0) + int(3.0) ), abs(int(2.0))),( max(max(max(in1, min(divInt(i0,divInt(int(8.0),int(8.0))), max(abs(int(1.0)), i1))), max(i0, ( min(( i2 + int(0.0) ), i2) - int(6.0) ))), int(9.0)) * in2 )):{:\\nb2 = int(7.0) \\le max(min(i0, ( int(2.0) - int(8.0) )), mod(int(9.0),mod(divInt(in2,( min(( i1 * i1 ), ( ( ( int(6.0) + int(2.0) ) - ( i1 + mod(mod(res0,int(0.0)),( abs(min(in1, int(5.0))) - ( max(min(mod(int(1.0),in0), mod(max(i2, in1),in2)), i2) * mod(divInt(int(7.0),int(8.0)),abs(int(3.0))) ) )) ) ) * int(7.0) )) - res0 )),int(7.0))))\\nloopBreak% = 0\\nwhile not mod(( min(( ( int(9.0) - mod(mod(int(5.0),abs(int(5.0))),res0) ) + int(9.0) ), in0) - int(3.0) ),min(( mod(divInt(min(i1, mod(divInt(i0,divInt(min(i1, max(in0, int(0.0))),i2)),int(6.0))),i2),i2) * int(2.0) ), max(abs(i1), res0))) \\le int(5.0):{:\\nif int(9.0) \\l int(0.0):{:\\nin2 = ( int(8.0) + mod(int(1.0),res0) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = ( not True and b1 )\\nb0 = not min(int(4.0), i2) \\ge in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 42, 42, 5, 5, 1, 13, 5, 8, 2, 2, 42, 2, 160, 46, 32, 23, 24]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 8, 8, 6, 3, 0, 2, 9, 9, 1, 1, 1], [0, 2], [0], [], [1, 1], [0, 0], [], [], [], [1, 1, 6, 0, 0, 3, 6, 6, 2, 0, 3, 0, 5, 3, 6, 2], [], [0, 2, 3, 2, 0, 3, 3, 2, 2, 2, 1, 2, 3, 2, 0, 3, 3, 0, 2, 3, 3, 0, 1, 3, 3, 1, 1, 1, 3, 3, 2, 1, 1, 1, 3, 0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 3, 2, 0, 0, 0, 3, 0, 3, 1, 0, 3, 1, 0, 3, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [2, 2, 1, 1, 2, 0, 1, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 2, 1], [2, 1, 0, 1, 2, 2, 1], [0, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\l ( abs(( i1 * abs(max(( divInt(divInt(int(4.0),( max(divInt(res0,abs(min(i0, mod(max(abs(i0), int(5.0)),max(max(int(8.0), int(8.0)), int(6.0)))))), max(abs(mod(int(3.0),int(0.0))), int(2.0))) - abs(in0) )),res0) + ( divInt(min(res0, max(mod(( i2 - abs(( i0 * in0 )) ),i0), min(in2, abs(int(9.0))))),in0) * abs(int(9.0)) ) ), res0)) )) - max(int(1.0), int(1.0)) ):{:\\nb0 = i2 == int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 13, 13, 2, 1, 0, 2, 2, 0, 0, 0, 16, 0, 63, 14, 20, 7, 7]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 0, 0, 0, 0], [0], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 2, 3, 2, 5, 2, 9, 1, 3, 9, 2, 6, 3, 7, 9, 9, 8, 4, 9, 8, 3, 2, 9, 1, 4, 0, 3, 0], [3], [], [], [1], [0], [], [], [0], [1, 5, 6, 6, 0, 6, 1, 4, 2, 4, 5, 3, 4, 0, 4, 4, 0, 6, 5, 1, 2, 5, 5, 4, 6, 4, 0, 4, 2, 6, 2, 1, 4, 1, 3, 1, 1, 4, 2, 5, 6, 1, 3, 2, 2, 2, 6, 6, 1], [0, 1, 0, 0], [2, 3, 1, 1, 2, 2, 1, 2, 0, 2, 0, 0, 2, 0, 3, 3, 2, 0, 1, 1, 3, 3, 0, 2, 1, 3, 1, 3, 2, 1, 0, 0, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 1, 0, 3, 2, 3, 2, 2, 0, 2, 3, 2, 0, 3, 2, 1, 0, 2, 2, 1, 0, 3, 0, 2, 1, 0, 0, 0, 0, 0, 3, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 3, 0, 3, 0, 2, 0, 0, 2, 1, 2, 3, 2, 1, 3, 2, 0, 3, 0, 1, 0, 2, 1, 2, 2, 0, 1, 2, 2, 0, 0, 1, 1, 3, 3, 1, 3, 3, 2, 1, 1, 2, 0, 0, 3, 3, 3, 3, 1, 0, 0, 3, 0, 1, 3, 1, 3, 3, 3, 2, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 2, 0, 0, 1, 1, 0, 0, 0, 2, 0, 1, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1], [2, 0, 1, 1, 2, 0, 2, 1, 2, 0, 1, 0, 2, 1, 1, 0, 2, 2, 2, 0, 0, 2, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( max(int(5.0), int(3.0)) * ( ( int(2.0) + ( i1 - mod(in2,res0) ) ) - ( res0 * min(min(( i0 + int(3.0) ), int(2.0)), max(min(res0, ( int(5.0) * max(int(2.0), max(( int(9.0) - i1 ), in1)) )), int(1.0))) ) ) ) \\ge abs(i2):{:\\nin1 = ( in2 * in0 )\\nin1 += i0\\nin1 = int(3.0)\\n:}\\nin1 = min(min(int(9.0), i0), max(divInt(max(divInt(mod(res0,mod(min(( in2 - min(( int(2.0) + i1 ), mod(( int(6.0) * i2 ),min(in2, divInt(int(3.0),in2)))) ), in1),res0)),in1), i0),abs(( in1 - mod(( i2 - ( mod(res0,i2) + mod(( ( min(i1, max(in1, mod(i1,in0))) * ( int(7.0) * divInt(max(( int(9.0) * abs(mod(i1,min(i1, int(9.0)))) ), in1),mod(int(8.0),( divInt(i2,int(4.0)) + divInt(( in2 + res0 ),int(9.0)) ))) ) ) * int(8.0) ),max(abs(int(3.0)), abs(min(( int(2.0) + int(9.0) ), ( i1 + in0 ))))) ) ),min(max(min(max(int(1.0), i2), i2), min(i2, int(4.0))), min(int(0.0), min(abs(max(divInt(int(3.0),res0), res0)), int(0.0))))) ))), i1))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 29, 29, 1, 0, 0, 1, 1, 0, 0, 1, 49, 4, 148, 40, 34, 24, 17]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [0, 1, 1, 1], [5, 8, 0, 7], [], [], [], [], [], [], [], [], [2, 5, 3, 2], [0, 1], [1, 3, 3, 1, 0, 2, 0, 1], [1], [0, 0], [1], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(58.0)\\nin2 -= min(min(int(0.0), in0), divInt(i2,int(7.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 8, 1, 2, 1, 1]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 2, 0, 1], [1, 1, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 7, 9, 3, 8, 6, 5, 2, 0, 7, 3, 7, 5, 4, 4, 2, 7, 8, 5, 1, 7, 9, 9, 9, 0, 7, 2, 6, 9, 8, 7, 7, 1, 2, 1, 3, 7, 7, 5, 6, 0, 9], [0, 1, 5, 1], [0], [0], [0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0], [1, 2, 3], [1], [], [2, 6, 0, 5, 1, 3, 6, 4, 1, 1, 6, 3, 1, 5, 4, 3, 3, 3, 3, 3, 0, 2, 4, 2, 1, 4, 6, 3, 5, 4, 2, 1, 2, 6, 3, 5, 2, 4, 3, 0, 5, 0, 6, 2], [0], [3, 0, 2, 3, 1, 3, 2, 1, 0, 3, 0, 2, 2, 1, 2, 1, 3, 2, 3, 0, 1, 1, 3, 1, 2, 2, 3, 3, 0, 2, 2, 0, 0, 0, 1, 0, 2, 0, 0, 3, 3, 0, 3, 2, 0, 2, 2, 1, 1, 2, 3, 1, 0, 1, 0, 3, 0, 2, 0, 1, 3, 2, 0, 2, 2, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 3, 2, 1, 1, 0, 3, 0, 2, 2, 2, 0, 2, 0, 1, 1, 1, 1, 0, 3, 3, 3, 0, 0, 0, 1, 2, 3, 3, 1, 0, 2, 3, 1, 1, 1, 3, 2, 0, 2, 1, 1, 2, 1, 2, 1, 1, 3, 2, 3, 2, 3, 2, 1, 1, 1, 1, 2, 2, 3, 3, 0, 1, 3, 3, 2, 3, 0, 0, 0, 3, 1, 2, 2, 0, 1, 0, 2, 0, 2, 3, 0, 1, 3, 3, 0, 2, 0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 3, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0], [1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 2, 1, 1, 2, 0, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 1, 1, 0, 0, 0, 2, 0], [0, 2, 1, 0, 2, 2, 0, 2, 1, 2, 1, 1, 1, 2, 0, 0, 0, 1, 1, 1, 2, 0, 1, 2], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile not max(i2, ( abs(int(5.0)) + max(mod(int(8.0),res0), abs(i0)) )) \\l ( divInt(int(7.0),( int(9.0) * min(( max(in2, int(3.0)) - int(8.0) ), min(int(6.0), ( ( abs(max(i1, mod(( in0 + res0 ),in1))) * int(5.0) ) * i1 ))) )) + divInt(i1,res0) ):{:\\nloopBreak% = 0\\nwhile ( max(min(in0, max(mod(i1,divInt(( int(2.0) * int(0.0) ),mod(max(int(7.0), in2),int(3.0)))), in1)), min(in0, divInt(in0,int(7.0)))) \\g min(( in0 - ( mod(mod(in0,( abs(max(int(5.0), max(divInt(abs(( min(divInt(int(4.0),int(4.0)), in0) * max(i0, ( ( divInt(i2,( in1 - int(2.0) )) - int(7.0) ) - int(8.0) )) )),int(5.0)), i2))) * min(abs(abs(i1)), in1) )),res0) + int(1.0) ) ), ( abs(min(int(7.0), in0)) + ( min(int(9.0), int(9.0)) + int(9.0) ) )) and min(divInt(in2,( int(0.0) - int(7.0) )), ( int(2.0) - ( int(6.0) - int(9.0) ) )) != min(mod(min(divInt(min(( int(8.0) * int(7.0) ), int(7.0)),int(1.0)), mod(mod(abs(min(in1, int(2.0))),max(abs(divInt(max(i2, i1),i2)), max(int(1.0), ( mod(res0,int(3.0)) + in0 )))),( in2 - divInt(max(i2, int(7.0)),min(min(in1, ( in0 * int(7.0) )), i0)) ))),min(in2, int(5.0))), i0) ):{:\\nres0 = abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(6.0) \\g min(int(0.0), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 43, 43, 4, 1, 1, 7, 4, 3, 1, 0, 44, 1, 174, 45, 43, 24, 21]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 0], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [1], [], [], [], [], [], [], [], [], [0, 1], [1], [2, 1, 0], [1], [], [2], [1]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= mod(int(1.0),i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 0, 0, 2, 1], [0], [0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 8, 7, 6, 6, 3, 8, 3, 4], [4, 1], [2], [], [1, 1], [0, 0], [], [], [0], [0, 4, 4, 0, 0, 0, 1, 0, 1, 6, 3, 6, 5, 1, 1], [1, 1, 0], [3, 2, 1, 3, 0, 0, 1, 0, 1, 2, 0, 2, 3, 2, 1, 0, 2, 0, 0, 3, 2, 1, 2, 2, 3, 2, 0, 1, 2, 1, 0, 0, 2, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [2, 1, 2, 2, 0], [2, 2, 2, 2, 0, 0, 2, 2, 0], [1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = abs(( int(2.0) * max(i0, in1) )) \\le int(0.0)\\nin1 *= i0\\ni0 *= int(87.0)\\nif ( i0 * mod(abs(( int(6.0) + i1 )),( i0 + i1 )) ) \\g abs(divInt(int(6.0),divInt(( min(( res0 * int(3.0) ), divInt(int(8.0),in0)) * res0 ),mod(int(3.0),( in2 + i1 ))))):{:\\ni1 = int(4.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 10, 10, 2, 1, 0, 2, 2, 0, 0, 1, 15, 3, 38, 12, 5, 9, 5]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1], [0, 3, 8, 7, 0, 9, 9], [4], [2], [], [1], [0], [], [], [], [1, 1, 5, 6, 5, 0, 5, 0, 3, 0, 1, 6, 0], [], [3, 3, 0, 2, 2, 1, 2, 1, 3, 3, 0, 2, 2, 0, 2, 0, 2, 3, 3, 0, 3, 1, 1, 3, 0, 2, 1, 3, 0, 0, 2, 3, 1, 1, 2, 2, 2, 0, 0, 0, 2, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 2, 0, 1, 1, 2, 2, 2, 2], [2, 1, 0, 2, 2, 2, 0, 0], [1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(min(i1, ( ( int(0.0) * mod(int(3.0),abs(min(i1, divInt(( in2 - mod(res0,( max(max(in2, abs(int(8.0))), int(7.0)) + abs(i0) )) ),( int(0.0) * abs(in2) ))))) ) * i0 )), mod(abs(int(9.0)),int(9.0))) \\le ( ( ( in0 * i0 ) + i1 ) + divInt(res0,i0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 13, 0, 43, 13, 10, 8, 5]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 1], [2, 0, 2, 0, 0, 2, 2, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 3, 4, 4, 9, 6, 7, 6, 5, 9, 2, 3, 6, 9, 3, 6, 8, 2, 0, 1, 7, 3, 1, 2, 1, 0, 9, 9, 2, 9, 1, 0, 7, 5], [3, 0, 4, 4, 4, 2, 0, 4, 0], [0, 1, 2, 1], [0, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1], [0], [1, 0, 1], [5, 1, 0, 2, 4, 1, 1, 3, 6, 4, 6, 0, 0, 3, 3, 3, 2, 6, 2, 5, 0, 1, 3, 6, 4, 3, 1, 5, 4, 2, 1, 1, 0, 6, 4, 5, 4, 2, 0, 3, 3, 2, 2, 0, 6], [0], [1, 1, 0, 1, 2, 0, 2, 3, 0, 0, 1, 1, 0, 1, 3, 3, 1, 1, 0, 0, 1, 2, 2, 1, 3, 1, 1, 0, 3, 2, 2, 1, 3, 3, 0, 0, 0, 0, 3, 3, 0, 2, 2, 2, 0, 1, 3, 2, 3, 1, 1, 0, 0, 2, 3, 2, 3, 1, 2, 0, 1, 2, 2, 2, 0, 3, 3, 0, 3, 1, 3, 0, 3, 0, 0, 0, 3, 1, 1, 1, 2, 3, 2, 1, 3, 3, 3, 0, 1, 0, 2, 0, 0, 2, 2, 1, 2, 0, 1, 2, 0, 2, 0, 3, 1, 2, 0, 2, 0, 3, 2, 3, 2, 0, 2, 2, 2, 2, 3, 3, 3, 0, 0, 1, 0, 3, 3, 3, 3, 3, 3, 1, 3, 3, 2, 2, 0, 1, 0, 2, 3, 3, 0, 0, 0, 0, 1, 1, 3, 2, 1, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 2, 1, 1, 1, 2, 2, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 0, 1, 2, 0, 1, 1, 2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 0, 1], [0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 2, 0, 2, 0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(4.0) \\ge int(1.0) and in2 \\l int(3.0) ):{:\\nb0 = ( mod(i1,mod(min(i0, i2),int(4.0))) \\le int(4.0) and in1 \\le int(9.0) )\\nif abs(abs(int(6.0))) \\le int(7.0):{:\\nb1 = i1 == i1\\n:}\\n:}else:{:\\nin0 = int(6.0)\\nif divInt(( int(5.0) + max(int(9.0), int(2.0)) ),res0) \\l max(( ( int(3.0) + max(abs(in1), res0) ) * i0 ), i0):{:\\nloopBreak% = 0\\nwhile abs(min(in0, divInt(mod(( in0 - int(6.0) ),abs(( abs(int(9.0)) + int(3.0) ))),in0))) \\le i2:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = ( max(( min(int(6.0), divInt(res0,int(8.0))) + mod(mod(mod(i2,max(max(in2, min(int(2.0), min(i0, abs(i1)))), in0)),res0),max(int(0.0), int(1.0))) ), int(7.0)) + divInt(abs(divInt(int(3.0),max(min(max(in1, int(1.0)), in0), ( i1 * in2 )))),mod(( int(2.0) + ( in1 + int(1.0) ) ),( i2 + mod(i1,abs(int(0.0))) ))) ) \\l mod(i1,( i0 - min(( max(mod(res0,( mod(( mod(max(abs(min(in1, in2)), int(9.0)),in1) + abs(max(abs(abs(max(abs(int(9.0)), abs(abs(( mod(i2,int(2.0)) * i0 )))))), ( abs(min(in0, in0)) * i2 ))) ),i2) + int(9.0) )), int(1.0)) * max(( int(0.0) + int(7.0) ), i0) ), divInt(res0,int(5.0))) ))\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 35, 35, 9, 4, 2, 12, 9, 3, 1, 3, 45, 1, 156, 37, 40, 18, 19]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1], [1], [], [1], [], [0], [], [0], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\ni2 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [0, 1], [1], [1, 1, 1, 1, 1, 1, 1], [2, 8, 4, 0, 2, 9, 5], [0, 0], [], [], [0, 1, 0, 1], [0, 0], [2, 2], [], [0], [5, 0, 0, 5, 6], [1], [0, 2, 0, 1, 1, 2, 1, 2, 3, 2, 2, 1, 3, 1, 3, 1, 1, 0, 0], [0, 0, 0, 1, 0], [2, 2, 1], [1, 1, 1, 1, 0], [1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not in2 \\l ( i0 - int(2.0) ):{:\\nloopBreak% = 0\\nwhile not int(8.0) \\l ( int(4.0) - ( abs(mod(( int(0.0) - abs(int(2.0)) ),max(int(9.0), int(5.0)))) - i0 ) ):{:\\nin2 += res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 7, 7, 2, 0, 0, 4, 2, 2, 0, 1, 5, 1, 19, 5, 3, 5, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 2, 0, 1, 2, 1, 1, 0, 0], [1, 1], [0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 1, 7, 0, 9, 8, 1, 2, 4, 0, 8, 2], [3, 3, 1, 0], [2, 0, 0, 1, 0, 1], [], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0], [2, 0, 2, 0, 2], [], [], [2, 2, 5, 5, 1, 1, 3, 1, 1, 4, 3, 5, 2, 3, 3, 5, 2, 6, 6, 0], [1, 0, 0], [1, 0, 0, 1, 3, 1, 1, 0, 2, 1, 3, 2, 3, 3, 3, 2, 0, 2, 3, 3, 1, 1, 0, 0, 2, 3, 2, 1, 3, 2, 2, 0, 0, 2, 0, 3, 3, 0, 0, 3, 1, 3, 3, 0, 0, 1, 1, 3, 2, 0, 1, 0, 3, 2, 0, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 2, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1], [2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not int(6.0) \\ge i2\\nloopBreak% = 0\\nwhile b0:{:\\ni2 *= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not int(5.0) \\ge min(int(1.0), int(7.0))\\nloopBreak% = 0\\nwhile in2 \\g mod(int(0.0),max(mod(min(abs(min(mod(i1,mod(min(abs(int(9.0)), int(8.0)),i1)), in0)), divInt(abs(( int(1.0) + abs(divInt(mod(i1,i1),( in1 + min(abs(in0), in2) ))) )),abs(int(2.0)))),abs(abs(i2))), in0)):{:\\nin0 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b0\\nb1 = not int(0.0) \\l min(mod(in2,int(8.0)), i2)\\nres0 = max(( res0 - i0 ), int(2.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 2, 7, 13, 13, 4, 6, 0, 9, 4, 5, 0, 0, 20, 3, 57, 11, 16, 4, 8]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1], [1, 2, 2, 1, 1, 0, 0], [1, 0], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 1, 5, 3, 5, 1, 8, 3, 2], [0, 5, 2], [0], [], [1, 1, 0, 1], [0, 0, 0], [2], [], [1], [4, 6, 5, 6, 0, 4, 5, 0, 4, 0, 3, 0, 4], [1, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 3, 0, 2, 1, 1, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 0, 3, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0], [0, 0, 1, 2], [0, 0, 1, 0, 2], [0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += res0\\nloopBreak% = 0\\nwhile in2 \\l res0:{:\\nif ( int(7.0) + int(2.0) ) != int(1.0):{:\\ni0 = min(in1, ( int(5.0) - int(3.0) ))\\n:}else:{:\\nin2 = divInt(int(5.0),int(1.0))\\n:}\\nb0 = not i0 == ( min(divInt(in1,( max(i0, abs(int(8.0))) + in0 )), int(3.0)) * i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 10, 10, 3, 1, 0, 4, 3, 1, 0, 1, 13, 4, 29, 6, 4, 5, 2]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [], [], [2, 1, 2], [], [0, 0], [], [0, 1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\nb2 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 3, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 5, 4, 7, 7, 3, 0, 4, 9, 1, 6, 8, 9, 2, 4, 8, 2, 7, 5, 5, 3, 4, 2, 5, 2, 1, 4, 5, 8, 9, 7, 8, 9, 1, 3, 7, 5, 1, 7, 7, 8, 4, 3, 9, 1, 1, 3, 8, 3, 5, 1, 9, 0, 6, 1, 1, 7, 6, 8, 9, 6, 9, 8, 8, 7, 8, 9, 9, 4, 1, 0, 2, 1, 6, 2, 9, 0, 2, 4, 6, 7, 7, 6, 9, 4, 1, 0, 4, 6, 5, 2, 6, 6, 3, 2, 7, 0, 3, 2, 3, 8, 4, 9, 1, 8, 3, 1, 2, 1, 9, 3, 5, 5, 6, 6, 9, 8, 9, 8, 4, 4, 2, 3, 1, 9, 8, 5, 6], [3, 3, 3, 1, 2, 2, 3, 4, 1, 0, 4], [1, 2, 1, 1, 1, 2], [0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 3, 0, 3, 3, 2, 2, 0, 1, 2], [0], [1, 1, 1, 1, 1], [3, 4, 6, 4, 3, 4, 3, 6, 3, 4, 4, 2, 2, 6, 0, 4, 2, 3, 1, 3, 4, 3, 6, 4, 6, 0, 0, 4, 5, 2, 6, 3, 5, 2, 0, 2, 0, 0, 4, 0, 3, 1, 4, 4, 3, 6, 1, 1, 0, 1, 6, 1, 1, 0, 4, 0, 0, 4, 2, 6, 4, 1, 0, 0, 5, 5, 0, 1, 4, 5, 3, 1, 1, 2, 6, 4, 3, 5, 1, 4, 0, 1, 3, 2, 6, 5, 2, 1, 0, 5, 5, 6, 2, 5, 1, 5, 5, 5, 5, 6, 4, 4, 6, 6, 3, 5, 4, 6, 6, 5, 0, 1, 2, 6, 2, 4, 4, 4, 0, 5], [0, 0, 1, 1, 0, 0], [1, 0, 2, 2, 0, 1, 1, 2, 1, 3, 1, 1, 2, 0, 1, 2, 3, 3, 1, 2, 3, 3, 1, 3, 1, 0, 1, 1, 3, 2, 0, 1, 1, 2, 3, 1, 2, 0, 1, 1, 2, 1, 0, 1, 2, 1, 0, 1, 3, 3, 0, 1, 3, 3, 1, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 2, 1, 2, 0, 3, 0, 1, 3, 1, 3, 1, 3, 2, 1, 0, 3, 1, 1, 3, 1, 0, 2, 2, 2, 2, 3, 0, 2, 0, 3, 2, 1, 0, 3, 1, 2, 2, 2, 1, 3, 2, 1, 2, 0, 2, 3, 2, 2, 0, 3, 3, 3, 0, 2, 0, 0, 1, 2, 3, 1, 2, 2, 0, 0, 1, 3, 2, 0, 1, 2, 3, 1, 3, 1, 3, 2, 2, 0, 3, 2, 0, 0, 0, 3, 1, 0, 3, 3, 2, 3, 2, 1, 3, 2, 1, 1, 0, 3, 3, 3, 0, 3, 0, 1, 3, 1, 2, 2, 1, 2, 0, 0, 2, 3, 2, 3, 3, 0, 2, 0, 1, 2, 3, 3, 3, 0, 3, 0, 0, 3, 2, 0, 0, 1, 1, 1, 1, 2, 1, 0, 3, 0, 1, 2, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 3, 2, 0, 3, 1, 2, 3, 0, 3, 2, 0, 0, 2, 0, 1, 2, 0, 2, 3, 0, 1, 1, 0, 1, 3, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 3, 1, 3, 2, 2, 3, 2, 3, 0, 3, 1, 0, 0, 3, 1, 3, 2, 0, 2, 1, 3, 2, 1, 2, 3, 3, 0, 1, 1, 1, 2, 3, 2, 1, 0, 3, 3, 0, 1, 1, 2, 2, 3, 3, 2, 1, 3, 3, 0, 3, 1, 3, 2, 0, 2, 3, 0, 3, 0, 3, 1, 0, 1, 0, 2, 0, 3, 1, 2, 3, 1, 2, 3, 0, 1, 0, 1, 2, 3, 0, 2, 1, 3, 1, 2, 0, 3, 1, 1, 2, 3, 1, 1, 3, 2, 1, 1, 3, 0, 1, 0, 2, 0, 1, 1, 2, 3, 2, 1, 0, 3, 2, 0, 0, 3, 0, 2, 0, 3, 1, 2, 2, 2, 1, 2, 1, 3, 3, 2, 2, 3, 1, 3, 2, 0, 3, 3, 0, 1, 3, 0, 0, 2, 1, 2, 1, 0, 1, 2, 2, 3, 0, 2, 1, 2, 3, 3, 0, 0, 2, 2, 0, 2, 3, 2, 3, 3, 3, 3, 1, 3, 1, 1, 2, 3, 3, 3, 1, 3, 2, 1, 1, 3, 2, 0, 1, 3, 1, 0, 2, 1, 2, 3, 0, 2, 1, 3, 1, 3, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 0, 0, 0, 2, 0, 3, 1, 0, 3, 1, 2, 1, 1, 0, 3, 3, 0, 0, 2, 0, 0, 1, 1, 3, 2, 3, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 1, 2, 0, 1, 2, 2, 0, 0, 1, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 0, 2, 1, 2, 0, 0, 1, 0, 1, 1, 2, 0, 0, 2, 0, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2, 1, 0, 0, 1, 0, 0, 1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 2, 1, 2, 0, 2, 0, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 0, 0, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 2, 0, 0, 1, 0, 1, 0, 2, 0, 0, 2, 1, 0, 0, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 0, 2, 0, 0, 0, 2, 2, 0, 1, 0, 1, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 84, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nin0 = int(1.0)\\nif ( ( in1 \\ge ( ( res0 + int(4.0) ) - int(5.0) ) and ( b2 and ( b1 and divInt(int(4.0),min(int(7.0), int(7.0))) \\ge divInt(in1,int(3.0)) ) ) ) or ( divInt(min(max(int(0.0), mod(abs(min(int(4.0), max(int(9.0), in0))),int(1.0))), int(6.0)),min(( in1 - int(8.0) ), int(9.0))) \\ge mod(min(int(2.0), ( in0 - int(4.0) )),int(8.0)) or mod(int(2.0),res0) \\g int(7.0) ) ):{:\\nin0 = divInt(int(5.0),in1)\\n:}else:{:\\nif ( not int(5.0) == min(abs(in1), int(3.0)) and max(min(int(4.0), int(2.0)), min(int(5.0), mod(max(abs(divInt(min(max(divInt(mod(int(2.0),( i2 - abs(i2) )),int(1.0)), abs(int(4.0))), min(int(5.0), min(divInt(int(8.0),res0), max(int(9.0), int(7.0))))),abs(int(8.0)))), i0),mod(( ( divInt(max(in1, ( i2 - max(( int(9.0) + in0 ), max(int(1.0), ( divInt(mod(int(3.0),min(( int(7.0) + divInt(i1,( min(divInt(mod(in0,min(min(abs(in1), ( in0 - res0 )), int(5.0))),( max(int(1.0), divInt(( in1 + res0 ),int(7.0))) - min(( i0 - int(7.0) ), ( abs(int(8.0)) * max(int(4.0), abs(mod(divInt(i0,min(mod(in1,in2), i2)),min(int(3.0), res0)))) )) )), max(min(divInt(max(( int(9.0) + max(( int(1.0) + int(1.0) ), in0) ), abs(min(min(in2, abs(i2)), int(3.0)))),min(int(8.0), divInt(( int(3.0) - ( i0 + i2 ) ),mod(max(divInt(abs(min(i0, ( i0 - int(5.0) ))),divInt(min(min(max(in1, max(i0, in0)), min(divInt(i1,in1), int(1.0))), int(9.0)),int(0.0))), int(6.0)),mod(int(1.0),in1))))), min(in0, int(1.0))), ( min(int(7.0), res0) + i1 ))) * int(6.0) )) ), i1)),i0) + i1 ))) )),res0) + i1 ) * int(8.0) ),max(divInt(i1,abs(int(9.0))), divInt(max(i0, min(( in1 - i0 ), divInt(i0,int(6.0)))),( in1 + ( min(i2, int(9.0)) + int(8.0) ) ))))))) == res0 ):{:\\nif int(8.0) \\ge max(( divInt(in1,divInt(divInt(divInt(int(7.0),( i1 * ( min(int(8.0), min(( ( max(divInt(max(i0, max(int(9.0), i0)),in2), abs(int(9.0))) - abs(( in2 * ( int(4.0) + max(( int(1.0) * ( min(max(i0, int(0.0)), int(2.0)) - int(1.0) ) ), ( max(( int(6.0) * i1 ), min(max(in1, int(2.0)), int(9.0))) - ( divInt(max(max(mod(int(0.0),min(abs(in2), abs(int(2.0)))), min(( in0 * ( min(i1, min(i1, min(int(4.0), i2))) - int(6.0) ) ), res0)), mod(in1,min(int(7.0), ( min(int(7.0), divInt(abs(in0),int(6.0))) * in2 )))),int(9.0)) - divInt(min(i1, ( int(4.0) - max(int(1.0), ( in1 * abs(int(0.0)) )) )),int(4.0)) ) )) ) )) ) + ( abs(int(6.0)) * int(5.0) ) ), max(mod(int(2.0),int(6.0)), abs(i0)))) + int(6.0) ) )),i1),( in0 + int(3.0) ))) + int(2.0) ), ( min(( int(7.0) * i2 ), abs(( res0 * in2 ))) + min(i2, ( i1 - min(int(0.0), ( mod(mod(int(3.0),mod(int(2.0),abs(max(( ( max(int(3.0), min(( i0 + max(abs(in2), int(8.0)) ), abs(in2))) - res0 ) * ( int(4.0) * mod(int(9.0),i2) ) ), int(1.0))))),mod(divInt(min(in2, ( int(8.0) + mod(abs(min(i1, in2)),( ( in2 - divInt(min(divInt(max(max(min(abs(int(3.0)), abs(int(1.0))), int(2.0)), mod(max(abs(min(int(1.0), min(( int(9.0) * int(3.0) ), max(( in2 * int(5.0) ), abs(int(5.0)))))), in2),( int(6.0) + divInt(abs(res0),( int(6.0) + abs(int(9.0)) )) ))),min(in1, abs(in1))), int(8.0)),res0) ) + int(9.0) )) )),mod(res0,( min(in0, int(8.0)) * in2 ))),in1)) + res0 )) )) )):{:\\nloopBreak% = 0\\nwhile not ( res0 - abs(int(4.0)) ) \\le in2:{:\\ni0 += min(int(4.0), divInt(int(2.0),int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 *= i2\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}else:{:\\nif not abs(abs(res0)) \\g i2:{:\\nloopBreak% = 0\\nwhile ( in1 + in1 ) \\l int(1.0):{:\\nb2 = int(9.0) \\le abs(( abs(in1) + int(8.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 = int(5.0)\\n:}\\n:}\\nin2 = int(6.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 8, 8, 129, 129, 11, 6, 6, 25, 11, 14, 1, 5, 120, 6, 496, 122, 131, 67, 57]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 2, 0, 1], [1, 1, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 1, 8, 1, 1, 6, 6], [4, 3, 4, 4], [1, 2, 0], [1, 0], [1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0], [3, 3, 0, 0], [], [0], [4, 3, 2, 0, 3, 4, 4, 2, 0, 0, 4, 5, 5], [1], [2, 0, 0, 1, 1, 0, 3, 0, 2, 2, 3, 3, 0, 3, 3, 2, 0, 2, 2, 0, 0, 2, 3, 0, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 2, 0, 1, 3, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0], [2, 2, 2, 2, 0, 1, 2, 2, 2, 2], [0, 1, 1, 2, 2, 2, 2], [1, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( in1 + in0 ) \\le int(8.0):{:\\nloopBreak% = 0\\nwhile ( ( int(2.0) \\ge i2 or b1 ) and b2 ):{:\\nif abs(i0) \\le mod(( abs(abs(in0)) - abs(min(( in1 - ( mod(in1,i2) * ( max(i0, int(1.0)) * int(8.0) ) ) ), i0)) ),abs(abs(in1))):{:\\nb0 = int(1.0) \\le abs(divInt(int(1.0),( in2 * int(6.0) )))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 *= abs(int(6.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 8, 8, 4, 3, 2, 8, 4, 4, 0, 1, 13, 1, 39, 9, 10, 7, 3]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0, 0], [], [2, 1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [6], [], [], [], [], [], [], [], [], [4], [1], [3, 1], [], [2], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= abs(int(6.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1], [2, 2, 0, 1, 2, 0, 1], [0, 0, 1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 6, 6, 7, 5, 6, 3, 3, 9, 3, 9, 3, 5, 5, 0, 1, 9, 0, 6, 4, 6, 9, 1, 7, 3, 4, 5, 4, 8, 8, 3, 7, 7, 8, 0, 2, 4, 1, 3, 7, 9, 4, 8, 5, 6, 4, 0, 7, 1, 8, 6, 5, 7, 0], [1, 5, 0, 0], [1, 0], [1], [0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0], [0, 3, 2], [], [0, 1], [1, 3, 4, 1, 5, 2, 6, 3, 2, 6, 3, 0, 1, 4, 2, 4, 1, 1, 5, 3, 5, 1, 0, 4, 1, 6, 4, 0, 2, 1, 2, 5, 5, 2, 6, 0, 3, 4, 3, 3, 5, 4], [0, 1, 1], [1, 1, 3, 1, 1, 1, 1, 0, 1, 3, 3, 2, 3, 1, 1, 1, 0, 1, 3, 3, 0, 2, 1, 3, 1, 1, 3, 3, 3, 0, 3, 2, 1, 2, 3, 0, 1, 2, 2, 2, 2, 1, 1, 2, 3, 2, 1, 2, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 2, 0, 2, 0, 2, 2, 2, 3, 1, 2, 3, 2, 0, 0, 2, 0, 1, 3, 3, 3, 3, 1, 2, 2, 1, 1, 1, 1, 3, 3, 1, 3, 0, 2, 0, 0, 2, 0, 3, 2, 2, 2, 0, 0, 2, 3, 0, 2, 3, 2, 3, 1, 1, 3, 1, 3, 0, 3, 3, 3, 1, 2, 2, 3, 2, 1, 1, 0, 1, 0, 1, 1, 3, 3, 1, 0, 0, 3, 3, 0, 3, 2, 1, 2, 2, 2, 0, 3, 2, 0, 1, 3, 0, 3, 1, 1, 3, 2, 1, 2, 1, 3, 1, 1, 1, 1, 0, 0, 2, 3, 0, 1, 3, 2, 1, 3, 2, 1, 0, 3, 0, 0, 0, 1, 3, 1, 3, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0], [1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 2, 1, 2, 2, 1, 1, 0, 2, 0, 0, 1, 1, 0, 0, 1, 2, 1, 2, 2, 0, 0, 1, 0, 0], [1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 1, 1, 2, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nif ( int(6.0) \\g int(7.0) or not max(int(6.0), int(6.0)) != int(7.0) ):{:\\ni1 = int(5.0)\\n:}else:{:\\nin0 -= in1\\n:}\\nloopBreak% = 0\\nwhile int(6.0) \\l abs(min(mod(min(int(3.0), int(3.0)),int(9.0)), i1)):{:\\nb0 = int(3.0) \\l abs(min(in2, mod(int(9.0),min(int(3.0), int(5.0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 += max(min(min(res0, min(( int(5.0) + ( max(in0, int(0.0)) + ( ( divInt(divInt(int(1.0),int(9.0)),mod(min(mod(int(0.0),mod(int(6.0),i2)), res0),max(min(abs(in0), i0), i1))) * min(in1, ( i2 + ( in1 * ( mod(mod(min(int(4.0), mod(max(divInt(i1,i1), ( in2 + int(6.0) )),min(min(abs(min(int(9.0), ( divInt(int(1.0),int(7.0)) * int(3.0) ))), int(4.0)), min(max(int(5.0), min(in0, divInt(in2,i1))), mod(i0,min(mod(( divInt(in1,i1) + divInt(min(res0, divInt(abs(( max(int(4.0), int(8.0)) * abs(int(8.0)) )),abs(in1))),max(max(min(int(3.0), ( ( abs(divInt(int(7.0),int(7.0))) - i0 ) * int(8.0) )), i2), int(0.0))) ),int(2.0)), min(min(int(4.0), i1), i2))))))),max(max(in2, min(divInt(int(1.0),mod(( divInt(in2,min(divInt(i2,int(3.0)), max(res0, abs(int(7.0))))) + int(9.0) ),max(( int(4.0) - mod(int(8.0),abs(int(5.0))) ), int(6.0)))), int(4.0))), int(0.0))),i0) - in0 ) ) )) ) * mod(abs(in1),int(7.0)) ) ) ), min(( int(1.0) + min(( int(8.0) - in0 ), max(in0, in2)) ), in1))), int(6.0)), min(int(5.0), min(int(7.0), int(0.0))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 55, 55, 4, 2, 1, 7, 4, 3, 0, 2, 42, 3, 188, 42, 52, 19, 25]}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [1, 0, 0], [1, 1, 1, 1], [1, 6, 2, 8], [1, 3, 2, 0], [0, 0], [0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0], [2, 3, 3, 2, 3, 3, 1, 1], [1, 0], [], [6, 6, 3, 4, 4, 4, 2, 4], [0], [0, 1, 0, 2, 1, 3, 0, 0, 0, 1, 0, 0, 1], [1], [1], [], [1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = res0\\nb0 = not ( ( int(1.0) \\g in0 and not ( mod(int(6.0),max(in1, in1)) \\ge in1 or ( int(2.0) == i2 and in1 \\l int(8.0) ) ) ) or False )\\nb0 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 4, 4, 4, 2, 4, 12, 4, 8, 2, 0, 8, 1, 13, 1, 1, 0, 1]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 8, 2, 8, 6, 0, 2], [2, 2, 4, 4], [], [1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0], [3, 1, 3, 3, 3], [1], [0], [0, 6, 1, 6, 0, 2, 5, 6, 0, 3, 3, 3, 1, 3], [0], [1, 2, 3, 1, 3, 0, 0, 1, 0, 3, 0, 1, 3, 0, 2, 2, 1, 0, 2, 1, 0, 2, 0, 1, 0, 2, 3, 0, 2, 1, 2, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 1, 2, 1], [2, 0, 0], [0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( False or ( ( int(7.0) == ( min(int(4.0), max(i0, res0)) * int(8.0) ) or i1 == max(res0, int(2.0)) ) and ( abs(i0) \\le divInt(( int(8.0) + i2 ),divInt(int(6.0),in2)) or divInt(res0,int(0.0)) \\le i0 ) ) ):{:\\nin0 = ( max(in0, mod(int(2.0),mod(in0,i1))) + in0 )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 8, 8, 4, 0, 4, 9, 4, 5, 1, 1, 14, 1, 34, 8, 5, 3, 5]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [0, 0, 2, 1, 0, 2, 1], [1, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [9, 7, 7, 2, 2, 7, 4, 5, 1, 6, 3, 2], [2, 1, 4], [2, 2, 2], [1], [0, 0, 1, 0, 1, 0, 1], [0, 0, 0], [3, 0, 2, 1], [0], [], [0, 3, 1, 6, 1, 6, 0], [1, 1, 0], [3, 1, 1, 1, 1, 2, 2, 1, 0, 3, 1, 1, 0, 2, 1, 0, 1, 2, 3, 1, 0, 1], [1, 0, 1, 1], [0, 2, 0], [2, 1, 1], [1, 0, 0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= min(int(9.0), int(7.0))\\nin0 -= int(7.0)\\nloopBreak% = 0\\nwhile ( b2 or int(2.0) == mod(( int(2.0) - i1 ),abs(int(7.0))) ):{:\\nb2 = not int(4.0) \\g res0\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(int(5.0),i1) \\le int(16.0):{:\\nres0 = divInt(min(int(3.0), i0),int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 12, 12, 3, 3, 1, 7, 3, 4, 1, 0, 7, 3, 22, 4, 3, 3, 3]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 2, 2, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 1, 7, 2, 2, 6, 5, 7, 3, 6, 0, 0, 9, 7, 0, 6, 7, 8, 4, 7, 9, 8, 1, 2, 4, 4, 4, 0, 8, 2, 8, 1, 0, 3, 0, 9, 9, 6, 2, 0, 5, 4, 4, 4, 0, 7, 6, 0, 8, 4, 5, 0, 8, 0, 6, 2, 7, 9, 3, 5, 6, 2, 2, 5, 0, 2, 7, 0, 9, 6, 1, 4, 9, 6, 8, 0, 3, 6, 9, 6, 7, 7, 9, 9, 8, 3, 7, 6, 0, 8, 3, 4, 9, 9, 2, 3, 0, 4, 9, 9, 7, 5, 5, 7, 2, 9, 6, 3, 2, 5, 6, 5, 0, 4, 1, 8, 9, 5, 6, 5, 3, 1, 4, 8, 7, 3, 7, 2, 1, 7, 3, 2, 4, 1, 9, 1], [0, 0, 4, 3, 3, 5, 3, 4, 5, 1, 1, 0, 2], [2, 0, 1, 0], [0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 2, 1, 2, 3, 3, 2], [1, 1], [1, 0, 1, 1, 1], [3, 3, 6, 5, 5, 6, 0, 2, 6, 4, 5, 6, 0, 5, 2, 2, 4, 0, 5, 3, 2, 0, 3, 1, 5, 5, 4, 1, 6, 1, 1, 1, 6, 0, 2, 3, 5, 3, 5, 3, 1, 6, 3, 1, 1, 6, 3, 2, 2, 3, 3, 4, 3, 6, 6, 1, 1, 3, 1, 1, 3, 4, 3, 4, 3, 4, 3, 2, 4, 3, 3, 6, 6, 6, 3, 0, 0, 5, 4, 0, 5, 1, 2, 5, 1, 1, 1, 5, 4, 5, 0, 1, 1, 3, 1, 3, 1, 2, 4, 1, 0, 2, 6, 6, 2, 6, 4, 5, 3, 1, 6, 0, 3, 4, 6, 4, 1, 2, 3, 2, 2, 1, 1, 4, 1, 6, 0, 1, 1, 1, 5, 5, 1, 2, 3, 2, 6, 4, 3, 5, 6, 2, 4, 0, 5, 1, 4, 2, 5, 3, 0, 0, 2, 1, 5, 0], [0, 1, 0, 1, 1, 0], [0, 2, 3, 3, 2, 1, 1, 0, 2, 0, 2, 2, 0, 2, 2, 3, 0, 0, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0, 1, 3, 2, 0, 2, 3, 3, 1, 3, 1, 3, 1, 1, 0, 2, 2, 0, 1, 0, 3, 3, 3, 3, 1, 0, 1, 2, 2, 0, 3, 0, 0, 2, 3, 2, 1, 1, 3, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 1, 2, 3, 1, 0, 3, 2, 3, 2, 0, 3, 1, 3, 0, 3, 2, 1, 3, 0, 2, 0, 1, 0, 3, 0, 2, 2, 2, 0, 3, 0, 1, 3, 3, 3, 2, 1, 1, 0, 2, 3, 0, 3, 0, 2, 2, 2, 2, 3, 2, 1, 1, 2, 2, 3, 2, 1, 3, 3, 0, 1, 3, 0, 3, 3, 1, 3, 3, 0, 2, 0, 0, 1, 0, 1, 2, 1, 2, 3, 2, 3, 0, 2, 3, 3, 2, 3, 2, 0, 1, 0, 3, 0, 1, 2, 3, 1, 1, 3, 3, 2, 3, 2, 1, 3, 3, 2, 1, 1, 1, 3, 3, 0, 2, 0, 3, 1, 3, 0, 0, 2, 1, 3, 0, 1, 2, 1, 2, 2, 2, 1, 1, 3, 3, 2, 2, 3, 3, 2, 0, 0, 2, 3, 0, 0, 2, 1, 1, 1, 0, 2, 3, 3, 2, 2, 2, 1, 2, 2, 1, 2, 3, 0, 3, 1, 2, 1, 3, 3, 3, 2, 1, 0, 1, 3, 0, 1, 0, 0, 0, 2, 3, 3, 0, 3, 1, 0, 0, 0, 1, 3, 1, 0, 3, 0, 3, 0, 1, 0, 2, 0, 3, 0, 2, 1, 3, 3, 3, 1, 3, 3, 1, 0, 1, 1, 3, 2, 1, 1, 3, 3, 2, 3, 2, 3, 0, 2, 2, 0, 3, 3, 3, 1, 1, 0, 3, 2, 2, 3, 1, 1, 1, 3, 3, 0, 0, 2, 1, 3, 1, 0, 2, 0, 0, 1, 1, 2, 0, 1, 1, 2, 2, 2, 2, 1, 3, 1, 2, 0, 2, 1, 3, 3, 2, 3, 0, 2, 0, 3, 2, 2, 2, 1, 0, 0, 2, 2, 1, 3, 3, 1, 1, 3, 2, 1, 1, 3, 1, 0, 1, 0, 3, 2, 3, 1, 1, 3, 0, 0, 0, 1, 2, 1, 1, 0, 3, 0, 0, 3, 2, 2, 0, 1, 2, 0, 2, 3, 3, 1, 0, 3, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1, 0, 3, 1, 0, 3, 2, 2, 2, 0, 2, 1, 1, 1, 2, 0, 3, 0, 0, 0, 0, 0, 2, 3, 1, 0, 2, 0, 0, 0, 2, 2, 3, 3, 1, 1, 2, 1, 2, 3, 2, 0, 0, 1, 2, 2, 2, 0, 0, 3, 0, 2, 3, 2, 3, 2, 1, 3, 1, 3, 0, 3, 3, 3, 2, 0, 1, 2, 2, 1, 2, 0, 1, 2, 2, 3, 0, 2, 2, 3, 1, 1, 3, 0, 1, 2, 1, 2, 2, 3, 0, 0, 0, 1, 2, 0, 3, 0, 0, 0, 0, 3, 1, 3, 3, 1, 1, 2, 1, 0, 2, 3, 1, 1, 3, 2, 2, 3, 1, 3, 3, 1, 3, 3, 2, 1, 0, 0, 2, 3, 3, 0, 3, 1, 2, 0, 0, 2, 0, 1, 3, 2, 2, 1, 0, 2, 0, 2, 3, 2, 2, 0, 1, 1, 0, 2, 0, 0, 1, 0, 3, 2, 0, 3, 2, 1, 1, 2, 1, 3, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 1, 1, 0, 2, 2, 2, 1, 1, 0, 0, 2, 0, 1, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 2, 1, 0, 0, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 0, 0, 1, 2, 2, 0, 0, 2, 1, 0, 2, 2, 2, 1, 0, 0, 2, 0, 1, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 0, 2, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 0, 2, 2, 0, 1, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 1, 1, 1, 0, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 0, 2, 1, 1, 0, 0, 0, 0, 1, 2, 1, 2, 1, 1, 0, 1, 2, 2, 0, 2, 0, 0, 0, 1, 2, 0, 0, 0], [2, 1, 0, 0, 0, 1, 1, 2, 2, 0, 2, 1, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 1, 1, 0, 0, 2, 0, 2, 2, 2, 1, 1, 2, 2, 0, 2, 1, 0, 2, 2, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 95, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nif in0 \\l mod(abs(max(mod(int(1.0),int(8.0)), in0)),mod(res0,mod(mod(in2,( ( max(in2, res0) * min(i0, i2) ) - res0 )),abs(abs(abs(in1)))))):{:\\nloopBreak% = 0\\nwhile in2 \\l res0:{:\\ni0 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nin2 += max(( i2 + ( max(min(int(7.0), min(int(2.0), abs(int(2.0)))), int(6.0)) + i2 ) ), divInt(( in1 - int(5.0) ),i0))\\n:}\\nloopBreak% = 0\\nwhile min(max(abs(min(int(7.0), in2)), int(3.0)), mod(mod(in0,min(i2, i0)),mod(min(mod(int(6.0),int(0.0)), max(in0, min(i1, ( min(abs(in2), mod(in2,min(int(0.0), ( min(int(9.0), in1) - abs(divInt(abs(divInt(i1,max(int(7.0), max(res0, abs(divInt(int(0.0),min(i1, ( i1 * int(6.0) )))))))),i1)) )))) * min(res0, divInt(( ( i0 + abs(i2) ) * int(7.0) ),min(min(abs(( int(8.0) - int(4.0) )), in0), mod(max(in2, min(in0, ( divInt(( divInt(min(( int(7.0) + int(9.0) ), ( divInt(abs(( int(8.0) - max(max(in2, int(1.0)), max(in0, min(min(int(2.0), abs(min(i1, divInt(res0,in0)))), int(4.0)))) )),i1) * int(4.0) )),mod(int(4.0),( abs(divInt(min(i1, ( min(min(mod(max(( res0 + int(0.0) ), in0),abs(i2)), int(8.0)), ( abs(int(2.0)) * int(8.0) )) + min(min(divInt(abs(divInt(int(1.0),max(min(( int(0.0) - int(3.0) ), int(0.0)), abs(abs(i2))))),divInt(in0,abs(int(9.0)))), max(in0, in1)), mod(int(9.0),min(in0, int(6.0)))) )),( int(2.0) - mod(( ( int(0.0) * int(5.0) ) + min(abs(divInt(mod(min(max(mod(res0,res0), ( max(i1, i1) + ( int(4.0) + int(4.0) ) )), int(4.0)),in0),( min(abs(( mod(( int(0.0) - ( ( int(7.0) * ( max(i1, min(int(6.0), divInt(int(0.0),max(max(abs(mod(int(8.0),i1)), int(4.0)), abs(in0))))) * int(5.0) ) ) * in1 ) ),in0) * in1 )), mod(max(min(in0, abs(int(0.0))), in1),in0)) - i2 ))), int(8.0)) ),max(int(0.0), in1)) ))) - abs(in0) ))) - max(in0, int(6.0)) ),res0) - ( res0 + min(res0, ( int(2.0) * abs(max(min(int(7.0), max(min(int(9.0), in0), int(3.0))), int(5.0))) )) ) ))),abs(mod(int(6.0),int(2.0))))))) )))),abs(max(( max(( min(i0, divInt(divInt(i0,min(min(abs(int(2.0)), int(5.0)), in2)),max(divInt(divInt(min(int(0.0), int(2.0)),int(7.0)),abs(abs(in1))), i0))) - ( int(0.0) - min(int(9.0), in2) ) ), divInt(i1,i2)) + int(6.0) ), int(1.0)))))) \\le ( in2 + int(4.0) ):{:\\ni1 = int(9.0)\\nif divInt(divInt(( ( int(6.0) - max(int(8.0), divInt(i1,( int(0.0) - min(min(( max(i1, ( in2 + max(( mod(( int(3.0) + in1 ),in2) * divInt(( int(6.0) + min(max(int(9.0), int(6.0)), abs(divInt(int(7.0),int(7.0)))) ),min(int(9.0), i0)) ), int(9.0)) )) * i1 ), abs(mod(abs(int(8.0)),int(3.0)))), abs(i1)) ))) ) * in0 ),i1),int(7.0)) \\ge ( int(6.0) * int(0.0) ):{:\\nb2 = ( not in0 \\ge max(i1, i2) and max(divInt(( in1 - int(8.0) ),mod(i1,( max(max(int(3.0), i0), min(int(4.0), i2)) - ( res0 * res0 ) ))), int(9.0)) != i2 )\\n:}else:{:\\nloopBreak% = 0\\nwhile int(9.0) \\ge int(2.0):{:\\nif int(3.0) \\le int(0.0):{:\\nif res0 != abs(int(4.0)):{:\\nb0 = False\\n:}else:{:\\nin1 *= in2\\n:}\\n:}else:{:\\nb1 = abs(mod(divInt(mod(in0,mod(int(9.0),int(9.0))),int(7.0)),mod(i1,max(res0, i0)))) \\g in0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 += res0\\nin1 = i1\\nb0 = not ( ( divInt(max(int(5.0), i2),( in0 * i2 )) \\g i2 or ( divInt(abs(abs(int(5.0))),int(7.0)) - mod(int(2.0),mod(max(( i1 + i1 ), int(9.0)),divInt(divInt(( in1 * i1 ),max(res0, ( abs(( max(( int(6.0) * min(int(3.0), abs(i0)) ), max(max(min(divInt(i1,int(2.0)), ( divInt(int(5.0),mod(i1,int(6.0))) - ( mod(min(i1, mod(( min(int(5.0), int(0.0)) - min(in2, int(4.0)) ),( int(1.0) * mod(( max(in2, i1) + i2 ),int(8.0)) ))),( in0 * abs(i2) )) * res0 ) )), in1), in0)) * max(int(9.0), abs(max(int(5.0), int(6.0)))) )) + ( int(5.0) + in2 ) ))),divInt(max(int(3.0), int(1.0)),min(mod(mod(max(int(4.0), abs(abs(int(8.0)))),min(abs(divInt(int(7.0),res0)), i2)),( min(min(in1, min(int(3.0), mod(i0,in2))), ( i1 * int(7.0) )) + max(mod(( int(2.0) * in1 ),divInt(i2,mod(abs(( ( in2 * int(1.0) ) + int(7.0) )),in0))), divInt(i0,i0)) )), int(3.0)))))) ) \\l i2 ) and not min(mod(i1,min(divInt(int(2.0),int(4.0)), mod(int(1.0),min(int(9.0), in2)))), int(1.0)) == i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 8, 10, 137, 137, 13, 4, 3, 21, 13, 8, 2, 5, 156, 6, 591, 148, 156, 72, 79]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 4], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [0, 1, 0, 1], [9, 0, 3, 5], [], [], [], [], [], [], [], [], [2, 5], [0, 0], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(90.0)\\nin2 = int(35.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 1, 2, 1], [1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 8, 0, 3, 2, 2, 6, 4, 6, 4, 2, 2, 6, 2, 3, 7, 5, 6, 1, 5, 1, 8, 8, 7, 7, 9, 5, 7, 1, 6, 8, 8, 7, 7, 3, 0, 6, 3, 1, 1, 9, 5, 8, 2, 7, 8, 1, 1, 5, 7, 7, 7, 4, 5, 5, 9, 6, 7, 6, 7, 4, 7, 2, 4, 6, 4, 1, 3, 2, 0, 6, 5, 3, 4, 5], [0, 5, 3, 3, 0, 5, 0], [1, 0, 0, 0, 1, 0], [], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [2, 0, 1, 1, 0, 2], [1, 0], [0, 1, 0, 0], [3, 5, 0, 3, 2, 2, 3, 6, 0, 6, 4, 4, 2, 6, 3, 5, 1, 4, 2, 0, 4, 3, 2, 6, 0, 3, 1, 6, 5, 0, 2, 5, 1, 6, 1, 5, 6, 2, 4, 3, 1, 1, 2, 6, 6, 2, 0, 6, 5, 2, 0, 4, 1, 2, 1, 2, 1, 0, 6, 5, 0, 0, 2], [1, 0, 0, 1], [0, 2, 3, 3, 1, 1, 3, 1, 0, 3, 2, 2, 3, 0, 3, 1, 2, 2, 2, 1, 2, 3, 3, 1, 1, 3, 3, 1, 2, 3, 1, 0, 3, 3, 3, 1, 1, 3, 2, 2, 3, 0, 3, 1, 3, 1, 1, 0, 3, 2, 2, 1, 0, 1, 1, 0, 3, 0, 3, 0, 3, 1, 3, 1, 3, 0, 0, 3, 1, 1, 0, 2, 0, 2, 3, 3, 1, 2, 3, 1, 0, 1, 2, 2, 1, 0, 3, 2, 3, 2, 3, 0, 2, 2, 2, 2, 1, 2, 0, 0, 0, 2, 3, 3, 3, 3, 0, 3, 2, 0, 1, 2, 0, 0, 1, 2, 1, 1, 1, 0, 0, 3, 1, 3, 2, 1, 0, 3, 3, 1, 3, 3, 2, 3, 1, 2, 0, 1, 0, 0, 3, 1, 3, 0, 1, 2, 1, 1, 0, 1, 0, 1, 3, 1, 1, 1, 0, 3, 0, 3, 0, 3, 2, 1, 3, 3, 1, 0, 1, 3, 3, 3, 1, 3, 2, 2, 0, 2, 2, 2, 3, 0, 1, 2, 1, 1, 3, 0, 2, 1, 1, 0, 2, 1, 0, 2, 0, 2, 1, 3, 3, 3, 2, 2, 1, 1, 0, 2, 2, 1, 2, 3, 2, 0, 0, 1, 2, 1, 1, 0, 2, 3, 0, 2, 3, 3, 1, 1, 0, 3, 1, 1, 2, 1, 0, 2, 3, 1, 3, 2, 0, 3, 0, 2, 1, 2, 1, 2, 2, 2, 0, 3, 1, 2, 1, 0, 1, 0, 0, 2, 1, 0, 1, 2, 0, 2, 1, 3, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 2, 0, 1, 2, 2, 1, 1, 2, 1, 1, 0, 2, 0, 0, 1, 1, 0, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 2, 2, 2, 1, 1, 2, 2, 0, 0, 2, 1, 0, 0, 2, 0, 1, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 1, 2, 1, 0, 0, 2, 2, 0, 1, 0, 0, 2, 2, 2, 0, 1, 1, 0, 2, 2, 2, 1, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not b0\\nloopBreak% = 0\\nwhile in0 \\l divInt(max(max(int(2.0), int(2.0)), min(int(2.0), in2)),min(divInt(mod(min(i0, min(int(8.0), mod(( ( int(0.0) - mod(abs(min(int(3.0), int(2.0))),max(abs(int(2.0)), ( abs(int(6.0)) * in0 ))) ) - max(max(abs(int(4.0)), int(6.0)), max(divInt(( max(i2, min(int(4.0), abs(int(2.0)))) * int(2.0) ),i2), min(mod(( int(6.0) * in0 ),int(2.0)), int(3.0)))) ),res0))),min(i0, max(res0, max(int(7.0), min(int(5.0), max(in1, in1)))))),max(int(6.0), int(1.0))), i2)):{:\\nres0 -= ( in0 - ( abs(min(int(5.0), ( min(int(1.0), in2) * int(8.0) ))) + mod(divInt(int(8.0),i1),abs(mod(max(mod(min(in1, ( ( ( mod(int(7.0),divInt(i2,i0)) * in1 ) * mod(min(min(max(min(in0, max(mod(i2,int(7.0)), divInt(res0,i0))), int(9.0)), ( int(5.0) - int(7.0) )), int(1.0)),in0) ) * i1 )),min(int(6.0), abs(divInt(int(8.0),res0)))), min(min(int(8.0), max(max(divInt(max(int(7.0), ( in2 - int(7.0) )),i0), i2), min(int(3.0), abs(in2)))), int(0.0))),( int(6.0) + int(3.0) )))) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = i1 != int(1.0)\\nb0 = False\\nres0 = i1\\nif int(1.0) \\ge abs(int(9.0)):{:\\nloopBreak% = 0\\nwhile int(5.0) \\ge int(8.0):{:\\nloopBreak% = 0\\nwhile True:{:\\nif in2 \\l abs(res0):{:\\nb1 = max(i2, max(( int(2.0) + abs(abs(int(7.0))) ), in1)) != int(8.0)\\n:}else:{:\\nif b0:{:\\nin0 = min(min(abs(int(1.0)), max(( mod(i1,( ( ( min(i1, int(1.0)) * ( int(5.0) * int(7.0) ) ) + min(i2, mod(int(7.0),int(7.0))) ) - res0 )) + ( int(4.0) + res0 ) ), ( i2 * ( int(5.0) * abs(min(max(( ( int(5.0) * int(9.0) ) + i0 ), divInt(mod(int(6.0),( min(( res0 - in2 ), int(7.0)) - ( int(6.0) + int(7.0) ) )),i2)), mod(max(i0, divInt(min(max(int(4.0), int(7.0)), in1),max(int(2.0), int(4.0)))),( int(6.0) * i1 )))) ) ))), divInt(min(int(4.0), abs(divInt(i2,min(i1, mod(int(1.0),divInt(int(3.0),( divInt(( i2 * min(int(2.0), divInt(int(0.0),i1)) ),int(6.0)) * i0 ))))))),res0))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not divInt(int(5.0),in2) \\l int(3.0):{:\\ni0 -= ( i0 + ( int(4.0) + max(i2, int(5.0)) ) )\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 7, 8, 77, 77, 7, 6, 0, 13, 7, 6, 2, 4, 63, 4, 270, 64, 70, 35, 31]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 9, 2, 9, 0, 3, 1, 2, 2, 6, 2, 2, 8, 6, 1, 3, 4, 3, 2, 9, 5, 9], [1], [2], [], [0, 1], [0], [2], [], [], [0, 4, 3, 4, 1, 3, 4, 0, 4, 1, 1, 5, 1, 1, 1, 6, 4, 1, 3, 4, 5, 2, 4, 6], [0], [3, 2, 1, 2, 2, 0, 0, 3, 0, 0, 2, 2, 2, 3, 2, 2, 3, 1, 1, 2, 0, 1, 1, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 2, 1, 3, 1, 0, 1, 2, 1, 3, 2, 2, 0, 2, 0, 2, 1, 1, 2, 1, 3, 2, 2, 2, 2, 1, 2, 3, 2, 3, 0, 0, 1, 0, 2, 2, 3, 2, 3, 0, 1, 1, 2, 1, 3, 1, 1, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0], [2, 1, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 2, 0, 2, 0, 2, 1], [0, 2, 1, 0, 2, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not abs(( int(3.0) + ( ( i0 * in1 ) - max(in0, in1) ) )) \\g ( ( ( min(( divInt(max(int(4.0), int(9.0)),( i1 + int(2.0) )) * int(9.0) ), in0) + abs(max(mod(( max(max(in1, i0), abs(max(( int(0.0) + min(int(3.0), in1) ), int(1.0)))) + ( int(2.0) + max(( divInt(i1,( i1 * ( int(2.0) * int(6.0) ) )) + divInt(int(2.0),abs(mod(( mod(mod(int(2.0),divInt(min(( abs(in2) * i1 ), int(8.0)),i1)),( ( min(divInt(abs(i1),int(6.0)), int(1.0)) * ( int(3.0) + max(int(4.0), int(3.0)) ) ) * int(2.0) )) * divInt(int(9.0),res0) ),in1))) ), i1) ) ),in0), ( int(5.0) * in1 ))) ) - ( in2 + i2 ) ) - int(9.0) )\\nin1 = res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 23, 23, 1, 1, 0, 2, 1, 1, 0, 0, 24, 1, 95, 31, 18, 21, 10]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 7, 2, 2, 9, 6, 7, 4, 9, 0, 9, 3, 2, 6, 9, 6, 3, 9, 5, 8, 4], [], [], [], [], [], [], [], [], [0, 2, 4, 1, 6, 2, 2, 3, 4, 3, 5, 5, 4, 6, 3, 2, 2, 1, 1, 5, 3, 1, 4], [0, 0], [0, 3, 2, 2, 0, 2, 2, 1, 0, 0, 2, 0, 3, 0, 1, 3, 1, 2, 1, 2, 3, 1, 3, 1, 1, 3, 2, 3, 2, 0, 1, 2, 1, 2, 3, 2, 2, 1, 3, 2, 1, 1, 3, 2, 3, 0, 3, 2, 3, 1, 3, 0, 3, 0, 2, 2, 0, 2, 0, 0, 1, 1, 1, 0, 3, 1, 1, 3, 1, 0, 0, 2, 2, 0, 0, 2, 2, 3, 0, 1, 2, 1, 2, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 1, 0, 0, 0, 2], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = i2\\nin1 = max(mod(( i1 - divInt(mod(int(3.0),res0),i2) ),( i2 * min(in0, int(6.0)) )), min(int(7.0), divInt(int(2.0),( max(int(2.0), max(int(9.0), int(6.0))) * max(divInt(abs(mod(in1,int(7.0))),( int(4.0) + ( max(( divInt(int(9.0),max(mod(int(0.0),int(9.0)), max(mod(max(in0, abs(divInt(min(int(3.0), min(in2, max(in2, ( ( in1 - ( res0 + in0 ) ) * int(2.0) )))),int(6.0)))),int(9.0)), i2))) - max(int(6.0), int(3.0)) ), min(int(9.0), i2)) + i1 ) )), divInt(( i1 + in2 ),mod(mod(min(in0, int(5.0)),( int(8.0) + ( i1 * in1 ) )),int(4.0)))) ))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 23, 2, 86, 25, 18, 12, 13]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 1, 1, 0, 2, 0], [0, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 6, 9, 3, 2, 5, 8, 8, 4, 7, 9, 1, 6, 4], [2, 4, 2, 5, 4], [2, 1, 1], [0], [1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0], [2, 3, 0], [], [1, 0], [5, 2, 0, 5, 0, 5, 3, 4, 1, 1, 0, 4, 4, 6, 0, 2, 5, 6], [0, 1, 1], [1, 2, 1, 1, 2, 1, 2, 3, 1, 3, 0, 1, 0, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 3, 3, 3, 1, 2, 0, 3, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 3, 2, 0, 0, 3, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 2, 2, 0, 2], [0, 1, 0, 1, 0, 1, 2, 2], [1, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(8.0) == mod(int(7.0),int(6.0)):{:\\nif ( int(9.0) + ( min(int(3.0), min(in2, int(2.0))) - i2 ) ) \\le int(5.0):{:\\nb2 = not ( ( ( divInt(( int(8.0) + int(8.0) ),int(4.0)) - divInt(int(7.0),max(min(abs(int(9.0)), mod(i0,abs(in2))), int(1.0))) ) + i0 ) == int(6.0) and in2 != in0 )\\n:}\\n:}else:{:\\nb1 = b1\\nin1 = i1\\n:}\\ni1 -= mod(i0,in1)\\nloopBreak% = 0\\nwhile ( in1 * min(mod(res0,i0), abs(i2)) ) \\le in2:{:\\nres0 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 15, 15, 5, 3, 1, 8, 5, 3, 0, 2, 18, 3, 50, 12, 8, 8, 6]}, {"genotype": [[0], [1], [1], [], [0], [], [], [0], [0], [], [1], [0], [], [], [], [6, 1], [], [0, 3, 0], [], [2], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = res0 \\l abs(i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [0, 2, 4, 0], [0, 1], [0, 0], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = i2\\nin1 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 2, 1, 2, 0], [1, 0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 3, 7, 5, 5, 1, 6, 0, 2, 2, 2, 7, 6, 8, 7, 5, 1, 6, 3, 9], [4, 4, 1, 2, 2, 4, 4, 3], [2, 0, 2, 2], [0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 3, 1, 3], [0], [0, 1], [4, 3, 3, 0, 0, 0, 2, 6, 4, 2, 0, 3, 2, 4, 5, 6, 0, 4, 1], [1], [2, 3, 0, 2, 0, 3, 3, 2, 0, 0, 2, 0, 0, 3, 3, 0, 2, 1, 2, 1, 1, 3, 1, 3, 0, 1, 1, 2, 1, 2, 1, 0, 1, 1, 1, 3, 0, 1, 2, 0, 0, 3, 1, 1, 2, 1, 0, 3, 3, 3, 1, 3, 1, 2, 1, 0, 2, 0, 3, 3, 1, 1, 3, 0, 0, 2, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 2, 2, 0, 2, 2, 0, 2, 2, 1, 0, 0, 2, 0, 0], [1, 1, 2, 2, 0, 2], [1, 0, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(min(in1, divInt(in0,max(abs(mod(in0,i0)), mod(i0,i0)))),abs(min(i2, ( int(0.0) - ( int(1.0) - int(3.0) ) )))) \\le abs(int(7.0))\\nloopBreak% = 0\\nwhile not abs(res0) \\le int(5.0):{:\\nin1 *= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( int(1.0) * mod(int(6.0),i2) ) \\g int(0.0):{:\\nif b0:{:\\nloopBreak% = 0\\nwhile ( int(2.0) == int(2.0) and min(i0, int(2.0)) == ( in0 + i2 ) ):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( abs(int(7.0)) \\le int(6.0) and divInt(int(8.0),in1) \\le abs(max(min(int(7.0), min(int(5.0), mod(int(1.0),in2))), divInt(res0,abs(min(int(6.0), int(3.0)))))) ):{:\\nb2 = min(i0, in1) \\ge ( i1 * int(9.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 21, 21, 8, 4, 2, 13, 8, 5, 1, 2, 19, 1, 68, 13, 16, 6, 8]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1], [2, 0, 2, 0, 2, 1, 1], [0, 1, 0], [0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 2, 6, 7, 5, 0, 0, 3, 5, 6, 8, 7, 7, 5, 5, 0, 1, 0, 2, 1, 6, 8, 7, 7, 4, 9, 9, 3, 0, 7, 9, 9, 5, 2, 5, 3, 5, 1, 0, 3, 3, 5, 9, 3, 8], [5, 1, 5, 0, 2, 0, 3], [0], [0, 1, 1], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 3, 3], [], [0, 0], [4, 0, 2, 1, 2, 5, 2, 3, 6, 4, 5, 0, 3, 3, 2, 5, 3, 6, 6, 4, 5, 2, 2, 1, 3, 5, 3, 4, 5, 1, 4, 1, 1, 1, 6, 3, 0], [0, 0, 0], [0, 3, 1, 3, 0, 2, 3, 3, 0, 2, 2, 2, 1, 3, 0, 2, 1, 0, 3, 2, 3, 1, 3, 1, 3, 1, 1, 2, 3, 3, 2, 2, 1, 1, 0, 1, 1, 3, 0, 2, 1, 3, 2, 0, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 0, 1, 2, 1, 3, 3, 2, 0, 2, 0, 1, 3, 3, 1, 0, 1, 2, 1, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 0, 1, 3, 1, 0, 0, 1, 2, 1, 2, 3, 2, 1, 1, 2, 3, 1, 1, 1, 0, 2, 1, 1, 0, 2, 3, 0, 3, 1, 3, 3, 0, 1, 0, 1, 3, 0, 2, 1, 2, 0, 2, 2, 3, 0, 3, 0, 3, 2, 2, 3, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 1, 1, 3, 0, 2, 2, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 2, 2, 2, 0, 2, 1, 2, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 2, 2, 0], [2, 2, 2, 0, 0, 2, 0, 1, 2, 0, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in1 != max(int(6.0), max(i0, ( max(max(i2, mod(divInt(mod(int(5.0),max(i1, ( int(2.0) * i2 ))),min(( min(int(6.0), max(int(7.0), min(int(5.0), int(0.0)))) * mod(max(max(mod(( int(0.0) * int(3.0) ),in2), int(5.0)), int(6.0)),max(i2, ( int(8.0) + min(( in0 + ( max(divInt(int(7.0),( res0 * in1 )), abs(abs(( in2 + int(7.0) )))) - ( int(5.0) * abs(min(mod(i0,divInt(in0,int(5.0))), abs(max(int(0.0), in0)))) ) ) ), int(1.0)) ))) ), divInt(int(0.0),( i2 + int(2.0) )))),mod(int(1.0),abs(int(6.0))))), in2) - divInt(mod(in0,int(8.0)),max(int(7.0), res0)) ))) and ( res0 \\g int(7.0) or ( divInt(int(4.0),divInt(min(( int(9.0) - int(9.0) ), ( abs(int(3.0)) + int(0.0) )),int(7.0))) != in1 or ( int(9.0) - int(9.0) ) \\l in2 ) ) ):{:\\nb0 = divInt(max(i2, min(int(5.0), min(abs(i2), int(2.0)))),i1) == int(5.0)\\n:}\\nloopBreak% = 0\\nwhile min(in0, mod(int(3.0),mod(in2,( ( min(in0, abs(in1)) + abs(( divInt(abs(int(5.0)),int(1.0)) * ( int(0.0) + int(3.0) ) )) ) + in2 )))) \\l i1:{:\\nin1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(3.0) \\ge ( int(5.0) + int(9.0) ):{:\\ni1 = min(i1, ( ( int(3.0) + res0 ) - in0 ))\\ni0 = int(8.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 46, 46, 7, 1, 3, 10, 7, 3, 0, 2, 37, 3, 153, 39, 34, 21, 18]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [0, 1], [0, 1, 1, 1, 1], [4, 7, 3, 7, 2], [0, 0], [1], [], [1, 1], [0, 0], [], [], [], [5, 6, 4], [1], [1, 0, 3, 0, 1, 1, 1], [], [0], [0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(47.0) \\l in2:{:\\nb1 = min(res0, int(3.0)) \\l int(7.0)\\nin1 += int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 5, 5, 2, 1, 0, 2, 2, 0, 0, 0, 3, 1, 7, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [2, 0, 0], [], [0, 0], [], [1, 0], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nb0 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 3, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 2, 2, 2, 1, 0, 2, 1], [0, 0, 1, 1, 1], [0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 3, 3, 4, 7, 3, 8, 0, 0, 7, 7, 8, 7, 0, 1, 0, 2, 9, 5, 3, 2], [5, 1, 1, 4, 3, 4], [1, 0, 2, 1], [], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [1, 0], [1], [1, 1], [4, 1, 2, 0, 1, 3, 6, 2, 1, 0, 2, 0, 3, 3, 5], [0, 0], [3, 2, 1, 3, 0, 3, 0, 2, 0, 0, 0, 2, 0, 2, 0, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 2, 2, 1, 0, 0, 3, 2, 3, 0, 2, 0, 1, 1, 1, 1, 2, 1, 2, 3, 3, 2, 2, 1, 2, 2, 3, 3, 1, 2, 1, 0, 1, 3, 1, 1, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2], [1, 0, 1, 0, 2], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nif abs(( int(9.0) - max(in1, max(i1, mod(i2,i0))) )) != i1:{:\\nb0 = mod(in0,divInt(res0,int(6.0))) \\g int(3.0)\\nif int(3.0) \\g int(4.0):{:\\nloopBreak% = 0\\nwhile int(7.0) \\le int(3.0):{:\\nloopBreak% = 0\\nwhile b2:{:\\nb1 = divInt(int(8.0),divInt(abs(( ( int(0.0) + i2 ) - i1 )),abs(mod(max(i0, divInt(i2,int(0.0))),int(7.0))))) \\ge int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 = int(8.0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( int(7.0) + divInt(abs(abs(mod(divInt(int(0.0),mod(divInt(max(abs(int(1.0)), ( int(0.0) * in0 )),int(2.0)),abs(int(9.0)))),int(5.0)))),int(3.0)) ) \\le in0:{:\\nin2 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 22, 22, 6, 4, 0, 8, 6, 2, 1, 2, 15, 2, 63, 17, 11, 5, 12]}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 2, 2, 0, 1, 0, 0, 2, 0, 0], [1, 0, 0], [1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 9, 7, 5, 0, 6, 1, 4, 7, 0, 6, 0, 4, 4, 0, 9, 8, 9, 6, 5, 0, 1, 9, 9, 7, 6, 5, 5, 7, 9, 4, 4, 7, 0, 8, 6, 8, 4, 8, 5, 7, 0, 6, 0, 3, 2, 6, 6, 2, 9, 5, 4, 3, 9, 4, 9, 4, 9, 7, 4, 8, 8, 3, 8, 5, 2, 1, 3, 0, 5, 1, 3, 8, 8, 3, 8, 0, 3, 6, 1, 9, 3, 7, 7, 6, 0, 0, 5, 1, 2, 5, 5], [3, 2, 2, 0, 0], [0, 1], [], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [], [], [1, 0], [3, 3, 5, 0, 4, 4, 2, 0, 0, 4, 3, 4, 3, 1, 3, 4, 5, 1, 0, 5, 3, 0, 1, 0, 5, 6, 3, 3, 5, 3, 4, 1, 2, 5, 2, 2, 3, 3, 4, 5, 5, 6, 4, 0, 4, 3, 6, 5, 6, 3, 2, 4, 1, 6, 0, 2, 2, 1, 2, 4, 1, 2, 0, 0, 5, 3, 0, 3, 3, 5, 4, 6, 5, 1, 6, 5, 1, 4, 4, 5, 3, 2, 1, 1, 2, 2, 0, 4, 5], [0, 0, 0, 1, 1], [3, 1, 2, 1, 0, 0, 2, 3, 1, 1, 1, 1, 3, 3, 2, 3, 1, 3, 0, 0, 2, 2, 3, 3, 3, 0, 2, 3, 2, 3, 2, 3, 1, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 1, 2, 1, 3, 1, 1, 1, 1, 2, 3, 1, 3, 2, 2, 3, 1, 0, 2, 2, 3, 1, 0, 0, 0, 3, 1, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 0, 2, 1, 2, 1, 1, 0, 1, 1, 1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 1, 2, 3, 0, 2, 2, 2, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 0, 0, 2, 2, 1, 0, 1, 0, 2, 1, 3, 2, 1, 3, 3, 0, 2, 1, 3, 3, 0, 0, 2, 0, 2, 3, 2, 0, 1, 0, 3, 0, 3, 3, 0, 0, 0, 0, 2, 3, 3, 2, 2, 2, 3, 3, 3, 1, 1, 3, 0, 2, 0, 3, 1, 1, 3, 0, 1, 0, 1, 0, 3, 1, 2, 3, 2, 2, 2, 0, 2, 2, 2, 3, 0, 0, 3, 1, 3, 3, 2, 3, 1, 1, 1, 3, 0, 2, 3, 2, 3, 2, 0, 1, 2, 3, 1, 2, 3, 3, 2, 3, 0, 3, 2, 0, 3, 3, 1, 0, 3, 1, 2, 1, 2, 2, 3, 1, 3, 2, 3, 1, 3, 0, 2, 0, 0, 3, 3, 3, 0, 1, 1, 3, 1, 0, 0, 3, 1, 3, 2, 2, 1, 0, 2, 0, 2, 1, 0, 2, 3, 1, 3, 3, 3, 1, 1, 0, 3, 0, 1, 1, 2, 3, 1, 3, 2, 2, 1, 0, 1, 3, 2, 2, 0, 2, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3, 0, 2, 1, 3, 3, 3, 1, 1, 3, 2, 0, 1, 0, 3, 0, 2, 3, 1, 3, 2, 3, 3, 0, 1, 0, 1, 0, 3, 3, 1, 0, 1, 0, 0, 0, 3, 2, 0, 0, 1, 3, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 1, 1, 1, 0, 1, 1, 1, 2, 1, 0, 0, 2, 2, 0, 1, 0, 0, 1, 2, 1, 1, 0, 0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 0, 1, 0, 1, 2, 2, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 1, 2, 1, 2, 2, 0, 0, 1, 0, 2, 1, 2, 0, 1, 2, 0, 0, 2, 2, 2, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 2], [1, 0, 1, 0, 1, 1, 1, 2, 2, 2, 0, 2, 2, 1, 2, 2, 0, 1, 2, 2, 0, 0, 1, 0, 0, 0, 2, 2, 1, 2, 2, 2, 1, 0, 1, 2, 2, 0, 1, 2], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = abs(int(7.0))\\nloopBreak% = 0\\nwhile mod(int(3.0),in0) \\ge in2:{:\\nif mod(max(int(9.0), int(7.0)),int(5.0)) == int(0.0):{:\\ni0 = max(max(mod(min(int(6.0), max(in1, in1)),mod(( max(max(abs(i2), ( max(( min(( min(int(1.0), i0) - ( int(4.0) + int(7.0) ) ), divInt(mod(( int(0.0) - mod(int(6.0),( mod(int(0.0),int(4.0)) + int(4.0) )) ),int(0.0)),mod(abs(int(9.0)),int(8.0)))) - mod(abs(min(max(min(min(max(abs(divInt(int(9.0),divInt(int(6.0),max(int(5.0), int(0.0))))), int(1.0)), int(9.0)), mod(max(int(9.0), min(divInt(mod(min(int(7.0), i0),( divInt(min(int(6.0), in1),in0) - in1 )),min(int(5.0), in0)), divInt(int(5.0),i1))),in0)), in1), divInt(in2,i1))),i0) ), in2) - ( int(7.0) * in0 ) )), mod(int(9.0),( int(4.0) * int(4.0) ))) * i0 ),int(7.0))), int(0.0)), int(8.0))\\n:}else:{:\\nb0 = ( int(6.0) + int(8.0) ) == divInt(i1,int(4.0))\\n:}\\nb1 = divInt(i0,in2) \\l int(8.0)\\nres0 = ( abs(in0) * ( ( ( min(max(min(abs(in0), abs(in2)), in0), min(min(in1, i1), mod(( int(5.0) * i2 ),int(7.0)))) - in2 ) * ( int(0.0) * max(divInt(int(6.0),min(max(i2, ( int(0.0) + abs(abs(i2)) )), in0)), mod(in0,( min(mod(in1,int(3.0)), in2) - min(in2, max(max(res0, in1), i0)) ))) ) ) * in1 ) )\\nif ( min(max(divInt(( ( min(min(max(int(2.0), int(6.0)), min(in0, ( res0 * max(int(6.0), int(2.0)) ))), max(in2, int(9.0))) + res0 ) + int(5.0) ),in0), max(int(4.0), divInt(max(( ( ( i2 - mod(( divInt(min(in1, i1),abs(int(3.0))) + min(max(divInt(max(int(9.0), int(4.0)),int(9.0)), abs(res0)), ( abs(divInt(abs(( i0 + int(4.0) )),mod(min(int(9.0), ( max(min(divInt(abs(i2),abs(( i2 + max(min(int(7.0), i1), max(int(4.0), ( int(8.0) * divInt(divInt(abs(int(8.0)),max(mod(abs(int(3.0)),abs(i2)), divInt(in1,i1))),min(min(max(i2, int(8.0)), int(5.0)), min(int(2.0), i0))) ))) ))), i0), abs(int(1.0))) * max(( divInt(int(3.0),in2) - divInt(in0,( int(0.0) * i0 )) ), divInt(abs(int(5.0)),min(max(abs(int(1.0)), int(3.0)), in0))) )),min(in0, int(8.0))))) * int(8.0) )) ),divInt(min(int(3.0), abs(mod(( int(8.0) * in2 ),int(0.0)))),abs(mod(( in1 - divInt(int(3.0),res0) ),in2)))) ) + i1 ) - int(6.0) ), ( abs(int(1.0)) * int(9.0) )),mod(max(res0, mod(int(3.0),max(max(abs(int(7.0)), int(7.0)), min(divInt(in2,int(6.0)), i1)))),min(in1, ( min(int(0.0), max(mod(min(max(in1, int(0.0)), in2),int(5.0)), in0)) * min(min(int(1.0), i2), int(2.0)) )))))), i1) + i1 ) \\l i2:{:\\ni2 -= min(divInt(i0,in1), int(5.0))\\n:}\\nin2 *= abs(int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 93, 93, 5, 2, 0, 5, 5, 0, 0, 2, 89, 5, 366, 87, 102, 40, 49]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [6, 4], [], [], [], [], [], [], [], [], [3], [0], [3, 2, 1, 1], [0], [2], [1], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = abs(( int(6.0) - int(4.0) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1], [2, 7, 9, 2], [0], [0], [], [1], [0], [], [], [], [3, 0], [], [0, 2, 3, 2, 0, 2, 3, 1, 3, 1, 1, 1], [0, 1, 1], [1, 2, 2], [0], [0, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = in0 \\l ( max(divInt(i0,mod(abs(int(2.0)),abs(int(7.0)))), int(9.0)) + int(2.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 12, 3, 3, 1, 2]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [1, 5], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= int(15.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 2, 0, 0, 1, 2, 1, 1], [1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 8, 5, 9, 7, 8, 9, 8, 2, 2, 3, 3, 2, 3, 3, 6, 0, 5, 4, 5, 8, 1, 2, 3, 5, 4, 2, 3, 7, 9, 7, 9, 7, 5, 5, 2, 1, 2, 4, 3, 4, 7, 2, 3, 3, 0, 9, 2, 1, 2, 9, 9, 9, 3, 2, 0, 8, 5, 7, 4, 6, 1, 0, 2, 5, 5, 0, 6, 9, 8, 3, 7, 5, 9, 6, 7, 9, 9, 0, 4, 6, 6, 7, 6, 1, 7, 7, 0, 1, 8, 4, 8, 7, 6, 6, 0, 9], [4, 0, 4, 1, 1, 3, 5, 1], [2, 2, 2], [], [1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1], [0], [0, 1, 0], [3, 5, 2, 3, 2, 3, 4, 1, 1, 6, 5, 1, 2, 2, 2, 4, 3, 5, 1, 0, 0, 0, 4, 6, 2, 1, 6, 6, 6, 4, 3, 1, 0, 5, 4, 6, 6, 2, 2, 1, 0, 2, 6, 5, 2, 6, 1, 3, 2, 4, 4, 3, 4, 5, 3, 0, 5, 3, 1, 2, 2, 2, 1, 0, 2, 0, 5, 0, 2, 0, 3, 6, 2, 6, 3, 5, 1, 2, 3, 6, 4, 6, 0, 4, 3], [0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 1, 3, 2, 1, 0, 2, 3, 3, 1, 0, 2, 1, 0, 0, 2, 3, 2, 1, 3, 2, 3, 2, 3, 1, 1, 1, 1, 1, 1, 2, 1, 3, 2, 2, 1, 3, 2, 2, 1, 3, 3, 3, 1, 2, 2, 3, 3, 1, 2, 3, 3, 0, 0, 1, 3, 3, 2, 3, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 3, 0, 1, 2, 0, 3, 0, 1, 3, 3, 2, 0, 3, 2, 1, 0, 3, 2, 2, 2, 0, 0, 0, 3, 0, 2, 0, 1, 3, 1, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 1, 1, 3, 3, 3, 0, 2, 3, 1, 2, 1, 2, 2, 0, 3, 0, 1, 1, 1, 3, 0, 2, 2, 0, 3, 0, 3, 3, 0, 1, 2, 2, 1, 1, 1, 0, 3, 2, 3, 0, 0, 0, 1, 2, 2, 3, 0, 2, 3, 3, 3, 0, 0, 2, 0, 1, 2, 2, 1, 3, 0, 3, 1, 2, 0, 2, 2, 2, 0, 3, 1, 0, 1, 3, 1, 2, 3, 3, 1, 2, 3, 2, 3, 3, 0, 0, 3, 1, 1, 1, 2, 1, 2, 0, 1, 2, 3, 1, 2, 2, 2, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 2, 0, 2, 0, 1, 0, 2, 2, 2, 1, 3, 2, 1, 0, 0, 2, 1, 1, 3, 3, 2, 3, 1, 2, 1, 3, 3, 2, 3, 3, 0, 0, 0, 1, 3, 0, 0, 3, 3, 3, 2, 1, 0, 0, 1, 0, 3, 3, 1, 1, 2, 3, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2, 3, 1, 3, 1, 2, 0, 1, 0, 1, 2, 3, 3, 3, 2, 3, 1, 0, 0, 3, 3, 3, 2, 2, 1, 3, 0, 2, 2, 1, 3, 1, 3, 2, 1, 0, 2, 1, 0, 3, 0, 1, 3, 0, 1, 1, 1, 3, 3, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 1, 2, 2, 1, 0, 0, 1, 2, 1, 1, 1, 1, 2, 1, 0, 1, 0, 0, 2, 0, 0, 2, 1, 2, 0, 2, 0, 0, 0, 1, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 2, 0, 2, 0, 1, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1, 1, 0, 2, 1, 1, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2], [1, 0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 0, 1, 0, 1, 2, 2, 0, 2, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(7.0)\\nloopBreak% = 0\\nwhile int(8.0) \\le int(5.0):{:\\nif True:{:\\nif int(9.0) \\l int(7.0):{:\\nif int(8.0) \\le max(( ( ( int(9.0) - abs(divInt(int(8.0),in2)) ) + mod(max(abs(int(2.0)), i2),divInt(int(2.0),in0)) ) + i2 ), divInt(abs(divInt(int(3.0),max(( min(mod(min(int(3.0), int(2.0)),int(3.0)), int(3.0)) - int(6.0) ), int(0.0)))),mod(int(5.0),max(mod(divInt(int(4.0),abs(( ( int(5.0) - max(max(max(int(8.0), divInt(( max(abs(int(1.0)), mod(max(min(in0, in1), int(2.0)),max(min(( min(i1, i1) * res0 ), in2), i1))) - divInt(( i2 + mod(i2,abs(int(3.0))) ),int(5.0)) ),min(min(abs(max(abs(int(4.0)), min(int(2.0), int(3.0)))), mod(int(7.0),int(9.0))), abs(i2)))), int(7.0)), ( in1 - min(in0, int(9.0)) )) ) - min(min(mod(in2,max(mod(int(7.0),i1), abs(( mod(( i0 * i0 ),i0) * min(in1, ( res0 * int(5.0) )) )))), max(int(5.0), divInt(mod(int(2.0),i2),( int(1.0) * int(2.0) )))), i1) ))),( int(4.0) + int(3.0) )), int(4.0))))):{:\\nres0 -= max(max(max(res0, mod(max(int(7.0), ( int(2.0) - ( ( res0 - min(in1, int(3.0)) ) - int(3.0) ) )),int(0.0))), min(in0, divInt(divInt(i1,min(i0, min(min(in2, int(9.0)), divInt(( int(2.0) * int(1.0) ),int(2.0))))),in1))), abs(mod(min(res0, res0),i2)))\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(9.0) \\g mod(( min(i2, ( min(abs(max(i1, i0)), ( i2 - int(9.0) )) + ( divInt(int(9.0),min(res0, abs(int(3.0)))) - mod(in2,mod(( ( i2 + min(int(2.0), res0) ) + int(0.0) ),abs(int(8.0)))) ) )) - ( min(max(int(5.0), ( max(divInt(abs(abs(i1)),in0), min(int(7.0), int(4.0))) + int(6.0) )), divInt(int(1.0),divInt(i2,int(0.0)))) - mod(abs(int(2.0)),( ( ( int(5.0) * in1 ) * in1 ) + abs(int(5.0)) )) ) ),in0):{:\\nb2 = in1 \\g in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 *= ( ( divInt(i0,( in2 - int(0.0) )) + in0 ) + ( mod(( int(6.0) - max(( int(9.0) * i1 ), i2) ),mod(int(8.0),int(3.0))) + abs(max(mod(abs(int(7.0)),mod(int(5.0),min(min(divInt(min(max(i2, i2), i1),int(9.0)), max(i0, i2)), min(abs(max(( int(6.0) - i0 ), in2)), int(7.0))))), i0)) ) )\\ni2 += max(min(int(9.0), int(9.0)), mod(abs(i0),mod(divInt(( in0 + divInt(res0,mod(i2,( int(0.0) - ( res0 - ( abs(int(4.0)) - abs(int(6.0)) ) ) ))) ),( in0 * int(6.0) )),in2)))\\nloopBreak% = 0\\nwhile int(7.0) \\ge ( max(abs(min(( min(int(6.0), i1) + i2 ), abs(min(abs(mod(( int(1.0) * max(in0, ( ( int(7.0) * max(int(7.0), min(( int(0.0) - res0 ), ( int(1.0) - in1 ))) ) * max(res0, int(8.0)) )) ),min(i0, int(4.0)))), int(8.0))))), int(7.0)) - abs(abs(int(6.0))) ):{:\\nb2 = in1 != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(60.0) \\g int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 97, 97, 8, 3, 0, 9, 8, 1, 1, 3, 85, 4, 363, 93, 93, 52, 44]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1], [0, 2, 1, 2, 2, 1, 1], [0, 0, 0], [0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 1, 7, 3, 2, 7, 1, 2, 7, 7, 9, 6, 1, 1, 7, 6, 7, 1, 9, 2, 3, 2, 9, 1, 3, 4, 3, 4, 5, 1, 9, 6, 2, 8, 0, 8, 7, 4, 7, 9, 5, 1, 0, 1, 2, 2, 3, 0, 4, 5, 5, 3, 8, 8, 4, 7, 7, 4, 4, 4, 5, 5, 8, 3, 6, 5, 6, 6, 4, 3, 7, 9, 2, 8, 1, 0, 6, 9, 6, 9, 8, 0], [4, 3, 1], [0], [], [1, 1, 1, 0], [0, 0, 0], [1], [0], [0, 0, 1], [4, 3, 1, 5, 2, 3, 3, 6, 5, 0, 3, 6, 2, 0, 0, 2, 2, 2, 5, 6, 2, 2, 0, 6, 3, 1, 2, 5, 4, 0, 1, 3, 0, 0, 1, 5, 1, 0, 3, 5, 2, 6, 2, 1, 6, 3, 5, 1, 0, 1, 5, 3, 2, 1, 3, 5, 5, 1, 6, 5, 0, 4, 6, 2, 0, 2, 5, 0, 4, 2, 5, 0, 0, 6, 4, 4, 2, 2, 5, 5, 4, 1, 1, 0], [0, 1, 1], [1, 0, 3, 0, 0, 0, 0, 2, 3, 1, 0, 0, 3, 2, 0, 2, 2, 3, 3, 2, 1, 0, 1, 2, 2, 2, 1, 0, 1, 3, 3, 3, 0, 2, 3, 3, 0, 0, 3, 1, 3, 2, 3, 2, 2, 1, 3, 0, 3, 2, 1, 3, 2, 2, 2, 1, 1, 3, 0, 1, 3, 2, 3, 0, 0, 1, 3, 1, 3, 1, 3, 0, 2, 0, 2, 1, 0, 2, 0, 3, 1, 3, 3, 1, 0, 3, 1, 3, 1, 2, 0, 0, 3, 2, 3, 2, 0, 1, 1, 0, 3, 0, 0, 2, 3, 2, 0, 3, 3, 0, 0, 2, 0, 3, 3, 2, 0, 2, 1, 3, 1, 3, 2, 1, 1, 2, 1, 3, 1, 3, 3, 2, 3, 2, 2, 0, 0, 2, 0, 2, 3, 2, 1, 3, 3, 0, 0, 2, 2, 0, 2, 3, 2, 1, 0, 0, 2, 2, 2, 1, 2, 0, 3, 2, 2, 2, 0, 3, 2, 1, 1, 2, 1, 0, 2, 0, 3, 3, 2, 2, 3, 0, 2, 1, 3, 2, 2, 2, 2, 2, 3, 0, 2, 0, 3, 1, 1, 0, 1, 1, 2, 2, 2, 3, 0, 3, 0, 2, 3, 3, 1, 0, 2, 1, 2, 2, 1, 1, 0, 3, 1, 2, 3, 3, 3, 1, 2, 3, 0, 3, 2, 2, 3, 0, 0, 2, 1, 2, 3, 1, 0, 2, 2, 3, 0, 3, 1, 0, 0, 2, 0, 0, 2, 1, 2, 3, 3, 0, 0, 0, 1, 3, 3, 2, 1, 3, 1, 0, 3, 3, 0, 1, 3, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 3, 1, 1, 1, 3, 3, 1, 3, 3, 1, 0, 1, 1, 1, 2, 3, 1, 1, 2, 1, 0, 1, 0, 3, 3, 0, 2, 0, 3, 3, 1, 2, 1, 1, 1, 2, 0, 0, 2, 1, 3, 2, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 2, 1, 1, 2, 0, 2, 0, 1, 0, 0, 1, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 1, 1, 2, 2, 1, 2, 0, 2, 0, 2, 1, 0, 1, 1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 1, 1, 0, 2, 0, 2], [0, 1, 1, 1, 1, 2, 2, 0, 1, 0, 1, 2, 0, 2, 0, 1, 0, 1, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 1, 1, 2, 2, 0, 2, 2, 1, 0, 1, 0, 2, 1, 0, 2, 2, 2, 0, 0, 1, 1, 2, 0, 2, 2, 0, 0], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 134, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(9.0) \\le in1\\nif max(in0, i1) \\ge in2:{:\\ni2 = in0\\nif ( abs(int(8.0)) + in0 ) \\g res0:{:\\nif True:{:\\nin2 -= max(( i0 - mod(divInt(max(abs(mod(int(1.0),in0)), int(7.0)),( ( ( int(3.0) - res0 ) - int(2.0) ) * min(abs(min(i2, ( max(min(i0, i0), min(int(7.0), max(divInt(max(mod(divInt(int(1.0),abs(i2)),min(( int(2.0) * min(divInt(( mod(int(7.0),int(7.0)) + abs(i2) ),int(9.0)), min(( abs(i2) - in2 ), int(6.0))) ), abs(int(1.0)))), min(int(1.0), max(res0, ( i2 + ( int(7.0) - i2 ) )))),mod(i0,abs(int(6.0)))), min(abs(int(7.0)), res0)))) * min(int(1.0), min(int(9.0), ( in0 + i1 ))) ))), abs(mod(max(divInt(i2,int(2.0)), int(3.0)),in2))) )),abs(in1)) ), i0)\\n:}else:{:\\ni1 *= ( max(( in0 + min(max(i0, i0), ( i1 - max(max(( in2 + mod(int(2.0),abs(int(9.0))) ), abs(( int(1.0) - int(3.0) ))), mod(int(4.0),max(int(3.0), abs(min(( abs(( ( i1 - i0 ) + divInt(in0,divInt(min(mod(int(4.0),abs(max(in2, i2))), mod(mod(res0,divInt(min(( int(5.0) - i2 ), i1),mod(divInt(( int(1.0) - mod(res0,max(( ( ( in0 + max(mod(int(9.0),int(6.0)), ( int(2.0) * in2 )) ) * ( i1 * max(abs(( divInt(min(i0, mod(int(8.0),max(mod(mod(divInt(( divInt(max(i1, divInt(in2,abs(int(0.0)))),int(8.0)) - in0 ),int(7.0)),int(4.0)),( ( ( min(i2, max(i1, ( max(min(int(7.0), in0), ( int(9.0) * mod(divInt(int(5.0),int(1.0)),in2) )) - max(int(0.0), mod(min(min(min(int(1.0), ( max(in2, abs(( ( min(i1, res0) - ( int(2.0) * mod(min(int(2.0), in2),mod(mod(min(i0, abs(int(3.0))),in1),res0)) ) ) * mod(i2,i0) ))) + ( int(0.0) * divInt(max(min(i2, in2), i0),int(4.0)) ) )), min(abs(( int(5.0) * abs(int(5.0)) )), in1)), abs(max(i2, int(3.0)))),min(in2, divInt(i0,int(8.0))))) ))) - mod(int(8.0),abs(abs(i0))) ) + ( int(4.0) - res0 ) ) + ( int(7.0) * in1 ) )), ( int(7.0) - int(4.0) )))),int(4.0)) + int(4.0) )), int(5.0)) ) ) * mod(int(5.0),int(8.0)) ), ( ( ( int(3.0) * ( max(int(6.0), int(5.0)) * int(6.0) ) ) + min(max(int(6.0), abs(max(int(4.0), in1))), int(3.0)) ) + int(7.0) ))) ),int(9.0)),( max(int(2.0), int(8.0)) - ( int(1.0) - i2 ) )))),int(0.0))),i2)) )) * max(min(in2, ( in2 + abs(min(int(6.0), ( int(9.0) * int(6.0) ))) )), int(9.0)) ), ( in1 * i1 )))))) )) ), mod(int(8.0),abs(( int(0.0) + i1 )))) + i0 )\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 83, 83, 3, 1, 0, 4, 3, 1, 1, 3, 84, 3, 347, 95, 88, 55, 42]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 6, 0, 7, 7], [0], [0], [], [1], [0], [], [], [], [1, 1, 1, 0, 2, 2, 0, 2, 0, 4, 4, 4], [1], [2, 3, 2, 2, 1, 2, 1, 2, 3, 0, 0, 3, 1, 2, 2, 3, 0, 1, 3, 2, 3, 0, 3, 0, 1, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [2, 2, 2, 1, 2, 0, 1, 1, 0], [0, 2, 1, 0, 1, 2, 1], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += ( abs(( ( int(1.0) * ( int(0.0) - divInt(abs(i1),i1) ) ) + abs(int(3.0)) )) - divInt(mod(max(i0, int(6.0)),abs(( min(i2, max(i2, int(0.0))) * max(( divInt(int(7.0),i0) - min(i2, i0) ), in1) ))),int(7.0)) )\\nb0 = in1 \\l in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 12, 1, 37, 10, 9, 7, 4]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1], [1, 1, 2, 1, 1, 0, 1], [0], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 2, 1, 7, 3, 8, 3, 9, 7, 3, 1, 5, 2, 7, 3, 8, 3, 4, 4], [3, 3, 1, 3], [2, 0], [0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0], [3, 3, 3, 0], [], [0], [1, 1, 6, 6, 3, 1, 0, 2, 3, 4, 2, 5, 0, 0, 2, 1, 6, 0, 3, 5, 1, 1, 3, 4, 3, 3, 4, 3, 1, 3], [1, 1, 0, 0, 1], [2, 2, 1, 3, 2, 2, 2, 1, 2, 0, 0, 0, 3, 3, 0, 0, 1, 3, 3, 1, 2, 1, 0, 3, 3, 0, 0, 0, 3, 1, 3, 0, 0, 0, 3, 2, 3, 3, 0, 1, 2, 0, 0, 0, 1, 3, 2, 2, 3, 1, 1, 3, 3, 0, 2, 3, 0, 3, 3, 0, 2, 2, 3, 0, 1, 0, 3, 2, 1, 3, 2, 1, 0, 2, 0, 0, 1, 2, 1, 3, 3, 0, 1, 3, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0], [2, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 1, 2, 0, 0, 0, 2], [1, 2, 1, 1, 1, 2, 2, 2, 2, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( ( divInt(mod(int(4.0),abs(divInt(mod(( int(7.0) - ( i1 * i1 ) ),res0),min(min(res0, in0), int(2.0))))),abs(abs(int(1.0)))) \\ge divInt(int(7.0),i1) and max(max(i0, i2), in0) \\ge min(int(3.0), min(in1, i2)) ) or in2 \\g abs(( abs(min(i0, int(8.0))) - divInt(i0,i2) )) ) and b0 )\\ni1 -= res0\\nif int(3.0) \\ge abs(( mod(min(int(9.0), int(7.0)),min(abs(i0), ( max(in0, abs(abs(in2))) - ( mod(max(i1, int(3.0)),i1) * abs(divInt(int(1.0),min(( int(5.0) * in0 ), ( in1 * in0 )))) ) ))) * int(2.0) )):{:\\nin0 += ( int(7.0) - min(min(in1, int(3.0)), abs(int(8.0))) )\\nin0 = int(3.0)\\ni1 = int(4.0)\\nin0 -= int(4.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 20, 20, 4, 2, 3, 8, 4, 4, 0, 1, 30, 5, 88, 18, 25, 12, 9]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 2, 1, 0], [0, 0], [0, 1, 1], [1, 1, 1, 1], [0, 7, 2, 4], [5], [0], [], [1, 0, 0], [0], [1, 1], [1, 0], [0, 0], [0, 5, 4, 6], [0, 0], [3, 1, 1, 0, 2, 1, 1, 0], [0], [0], [0], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(0.0), int(7.0)) != i0\\nif False:{:\\nif True:{:\\nin2 = ( int(2.0) + int(4.0) )\\n:}\\n:}\\nin1 = res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 4, 4, 1, 1, 0, 3, 1, 2, 2, 2, 4, 2, 8, 1, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 1, 1], [0], [0, 0, 0, 0], [], [3, 2, 0, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not b1 and b1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 3, 1, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 0], [0, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 4, 9, 7, 3, 4, 9, 7, 8, 7, 0, 7, 1, 0, 5, 9], [5, 1, 1], [0, 0], [1], [1, 0, 0, 1, 1], [0, 0, 0], [3, 0], [], [0, 0], [4, 3, 4, 4, 3, 2, 2, 0, 6, 2, 6, 3, 5], [1], [2, 0, 3, 2, 2, 0, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 2, 0, 2, 2, 1, 1, 0, 2, 0, 2, 0, 3, 2, 2, 0, 0, 3, 1, 2, 3, 3, 2, 1, 1, 1, 1, 2, 0, 2, 1, 3, 1, 1, 3, 2, 1, 3, 0, 3, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 1, 2, 2, 2, 2, 0, 0, 2, 2], [2, 1, 0, 2, 2, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(in1,min(mod(mod(in0,int(1.0)),int(8.0)), int(4.0))) != ( abs(( min(abs(int(9.0)), max(divInt(in1,mod(( int(7.0) * int(3.0) ),in1)), mod(in0,mod(i2,abs(mod(( i2 - i0 ),abs(int(4.0)))))))) + divInt(abs(abs(( int(9.0) * int(7.0) ))),int(8.0)) )) * int(7.0) ):{:\\nres0 -= divInt(i2,divInt(int(0.0),min(int(7.0), int(1.0))))\\nif ( b0 or min(divInt(int(0.0),abs(res0)), abs(in0)) \\g in2 ):{:\\nb0 = int(5.0) \\g int(9.0)\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 17, 17, 3, 2, 1, 5, 3, 2, 0, 2, 13, 1, 59, 17, 13, 6, 12]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [1, 1], [1, 1, 1], [7, 0, 2], [0], [], [0], [0, 0, 0, 1], [0], [3, 1, 2], [1], [0], [0, 3, 2, 3, 5, 4, 1], [0, 0], [0, 0, 1, 2, 0, 3, 2, 1, 1, 2, 0, 0], [0, 1, 1], [0], [1], [0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( False and not i0 \\l in0 ):{:\\ni2 = int(7.0)\\nin0 = ( in2 - min(divInt(int(0.0),int(2.0)), mod(in1,i1)) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 1, 0, 1, 4, 1, 3, 1, 1, 7, 2, 12, 3, 1, 1, 2]}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 1], [], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1], [8, 2, 1, 1, 7, 8], [0, 1], [2, 1, 2], [], [0, 1, 1], [0, 0], [1], [0], [], [2, 0, 4, 3, 1, 4, 2, 4, 0], [0], [2, 2, 1, 1, 0, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 3, 3, 2, 0, 2, 3, 0, 0, 0, 3, 1, 0], [0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 1, 1, 2], [1, 1, 1], [1, 1, 0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nb1 = ( ( int(8.0) - int(2.0) ) - i2 ) \\l ( i0 - abs(mod(int(1.0),int(1.0))) )\\nb2 = in1 \\g mod(abs(int(7.0)),abs(max(divInt(in0,mod(max(i1, in1),i2)), abs(int(8.0)))))\\nin1 = i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 6, 6, 2, 3, 0, 3, 2, 1, 1, 0, 9, 1, 27, 7, 6, 3, 4]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 1, 0, 1], [0], [1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 3, 2, 8, 8, 8, 4, 3, 3, 1, 0, 8, 0, 5, 7, 4, 1], [3], [2], [], [0, 1], [0], [1], [0], [0], [0, 5, 5, 4, 5, 4, 3, 2, 5, 0, 2, 0, 1, 5, 1, 2, 3, 3, 4, 2, 5, 2, 2, 1, 0], [0, 1, 0], [3, 2, 0, 2, 2, 2, 3, 2, 1, 1, 2, 0, 3, 2, 3, 3, 3, 3, 3, 0, 1, 3, 2, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 2, 1, 3, 0, 2, 1, 1, 2, 2, 0, 0, 3, 3, 1, 3, 2, 1, 3, 0, 1, 0, 0, 3, 2, 1, 1, 2, 0, 0, 3, 0, 1, 2, 3, 0, 1, 1, 1, 3, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 1], [2, 1, 1, 1, 2, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\ni0 = min(( in2 * divInt(divInt(mod(min(( int(6.0) - int(5.0) ), ( in2 - min(mod(max(abs(max(min(min(in1, int(3.0)), min(mod(max(in2, in1),in0), mod(int(2.0),int(8.0)))), i2)), in2),i0), ( int(8.0) - ( int(8.0) * max(i2, ( int(4.0) * int(3.0) )) ) )) )),( divInt(i0,i1) + max(max(int(3.0), min(divInt(int(1.0),min(in2, int(0.0))), i1)), i2) )),min(divInt(int(8.0),int(0.0)), divInt(in0,in0))),min(in1, int(5.0))) ), ( abs(i2) + int(7.0) ))\\nb2 = int(4.0) \\ge int(1.0)\\nin2 += max(i2, i2)\\ni1 = i0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 18, 18, 1, 1, 0, 2, 1, 1, 1, 1, 25, 3, 77, 18, 19, 9, 10]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1, 1, 1], [6, 9, 1], [5, 5], [1], [], [1, 1], [0, 0], [], [], [], [1, 4, 4, 6, 5, 0, 4, 2, 3], [], [3, 0, 3, 0, 0, 2, 0, 0, 2, 0, 3, 3, 2, 3, 0, 1, 3, 0, 1, 1, 0], [1, 0, 1], [0, 0, 1, 0, 1, 2], [2], [0, 1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(i1, min(in1, in1)) != divInt(res0,in2):{:\\nb1 = ( i0 * max(min(mod(max(in1, int(6.0)),abs(i2)), int(9.0)), int(1.0)) ) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 2, 1, 0, 2, 2, 0, 0, 0, 9, 0, 21, 3, 6, 1, 2]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [1, 0, 1], [1, 1, 1], [6, 3, 9], [4], [2], [], [1], [0], [], [], [], [4, 1, 1, 4, 3], [1, 0], [0, 3, 2, 1, 0, 0, 1, 3, 1], [0], [0, 2], [2, 2], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= i1\\nb2 = min(( int(6.0) * i1 ), in1) \\le int(3.0)\\nin0 = abs(int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 5, 2, 9, 1, 2, 2, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [2, 2, 0, 1, 1, 0, 0], [1, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 5, 0, 2, 1, 4, 4, 8, 1, 3, 7, 1, 7, 9, 9, 4, 0, 1, 2], [], [0, 2], [0], [0, 0, 0, 0], [], [3, 1, 0, 0], [0], [0], [5, 5, 4, 5, 5, 0, 6, 4, 6, 2, 1, 4, 1, 0, 6], [1, 1, 1, 0, 1], [1, 2, 2, 0, 0, 1, 2, 3, 2, 0, 2, 0, 0, 3, 0, 3, 2, 2, 1, 1, 2, 2, 1, 3, 0, 3, 2, 0, 1, 2, 3, 2, 0, 3, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 3, 0, 2, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 2, 0, 2, 0, 0, 0, 2], [0, 2, 0, 1, 2, 0, 0, 0, 2, 0, 2], [1, 1, 1, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( True and b0 ):{:\\nif b2:{:\\nin2 += int(7.0)\\n:}\\nin2 *= mod(( in1 + in2 ),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 -= mod(min(mod(i0,mod(res0,in1)), max(res0, abs(mod(( int(0.0) * int(2.0) ),( divInt(int(1.0),min(i2, abs(mod(i1,int(4.0))))) + ( min(( in1 + min(int(4.0), ( ( int(8.0) + divInt(int(1.0),int(3.0)) ) * int(7.0) )) ), int(1.0)) + int(7.0) ) ))))),min(int(9.0), abs(i1)))\\ni0 = divInt(int(9.0),int(4.0))\\nres0 *= int(012.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 19, 19, 0, 2, 1, 4, 0, 4, 1, 1, 15, 5, 52, 16, 9, 11, 9]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 6], [0], [3, 3, 0], [], [2, 2], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(abs(res0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 0], [1, 1, 0, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 6, 4, 7, 8, 1, 0, 8, 0, 5, 1], [0, 1, 4, 0], [2, 0, 1], [1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0], [0, 3, 1, 3, 0], [0], [1], [2, 2, 2, 1, 4, 3, 1, 6, 4, 1, 1, 6, 3, 2, 1, 0, 0, 0], [1, 1], [3, 0, 3, 1, 0, 0, 0, 3, 0, 3, 2, 3, 0, 2, 1, 3, 1, 1, 2, 0, 1, 2, 3, 1, 0, 1, 0, 0, 3, 2, 0, 3, 1, 0, 1, 2, 1, 0, 2, 0, 3, 1, 3, 2, 2, 3, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2], [0, 0, 2, 2, 0, 0, 0], [0, 1, 1, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile max(i2, max(int(2.0), i2)) \\l i2:{:\\ni1 += in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( True or ( max(in0, abs(divInt(max(i1, mod(int(4.0),max(int(6.0), int(4.0)))),( res0 + int(7.0) )))) \\g ( min(int(8.0), in1) * int(1.0) ) or i1 \\le i1 ) ):{:\\nloopBreak% = 0\\nwhile min(mod(res0,min(int(0.0), in0)), int(8.0)) \\l ( int(0.0) * i2 ):{:\\ni1 += mod(i0,max(int(5.0), abs(( ( abs(i0) + i0 ) + int(1.0) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = b1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 12, 12, 4, 3, 2, 9, 4, 5, 1, 1, 18, 2, 49, 9, 12, 7, 4]}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 0, 1, 2, 2, 2, 1, 2, 2, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 7, 4, 0, 9, 9, 0, 0, 7, 1, 1, 8, 4, 1, 4, 3, 6, 6, 8, 8, 6, 9, 4, 7, 0, 2, 3, 8, 6, 9, 8, 2, 9, 7, 7, 9, 5, 0, 9, 5, 3, 0, 2, 2, 1, 6, 0, 5, 5, 1, 7, 3, 6, 1, 7, 7, 3, 5, 8], [1, 2, 5, 0, 0, 5, 5], [2, 0, 2, 2, 1, 1, 0, 2, 1, 0, 1], [1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 2, 0, 3, 2, 0, 2, 1, 2, 1, 3, 2, 1, 1, 0, 0], [0, 0, 0, 1], [1, 1, 1], [1, 0, 2, 1, 6, 1, 3, 1, 4, 1, 5, 1, 2, 0, 3, 5, 2, 4, 6, 0, 4, 0, 6, 3, 5, 6, 2, 5, 1, 0, 3, 4, 1, 3, 3, 2, 0, 3, 0, 1, 6, 6, 2, 1, 1, 2, 0, 1, 4, 5], [0, 0], [3, 0, 0, 2, 3, 2, 2, 3, 2, 1, 3, 2, 3, 2, 0, 2, 0, 0, 1, 3, 0, 2, 3, 3, 1, 2, 0, 1, 3, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 3, 2, 2, 2, 1, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 1, 2, 2, 2, 3, 3, 1, 3, 1, 2, 2, 3, 1, 0, 2, 3, 3, 1, 0, 2, 3, 2, 3, 3, 2, 2, 1, 3, 2, 1, 1, 0, 3, 0, 1, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 0, 0, 3, 3, 0, 0, 3, 0, 1, 2, 2, 1, 2, 0, 1, 2, 2, 1, 0, 1, 3, 0, 0, 2, 0, 0, 0, 2, 1, 3, 3, 0, 2, 1, 0, 1, 2, 3, 1, 0, 1, 0, 1, 3, 0, 0, 0, 1, 1, 0, 2, 3, 3, 1, 2, 0, 0, 2, 2, 1, 3, 1, 1, 2, 3, 1, 0, 1, 1, 2, 3, 3, 0, 3, 3, 3, 2, 1, 3, 0, 2, 3, 2, 1, 1, 0, 0, 0, 3, 3, 1, 1, 3, 1, 3, 3, 2, 2, 3, 1, 1, 0, 3, 3, 1, 1, 1, 2, 1, 1, 0, 3, 1, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0], [2, 1, 2, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 0, 1, 1, 2, 0, 1, 2, 1], [1, 2, 2, 2, 2, 0, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 2, 2, 0, 2], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(i1) \\g i0 or b2 ):{:\\nb0 = ( not b2 and mod(max(mod(divInt(abs(( int(2.0) - abs(divInt(min(( i2 * mod(i1,res0) ), int(9.0)),abs(i1))) )),divInt(min(abs(int(7.0)), ( in0 * int(4.0) )),min(abs(min(divInt(max(int(0.0), i1),min(( int(9.0) * in1 ), int(9.0))), max(( mod(divInt(int(0.0),i1),mod(in2,min(int(0.0), int(7.0)))) * ( min(max(int(1.0), max(int(1.0), mod(int(8.0),mod(( divInt(min(min(int(4.0), abs(int(1.0))), ( divInt(abs(int(4.0)),i1) + mod(max(max(int(3.0), i2), ( max(( max(abs(mod(( int(6.0) - max(( int(6.0) - int(8.0) ), i0) ),abs(in0))), int(8.0)) - ( divInt(int(6.0),int(9.0)) + divInt(int(4.0),in2) ) ), int(7.0)) + i2 )),( in1 * res0 )) )),i0) - abs(min(in1, i0)) ),min(res0, int(0.0)))))), ( ( int(2.0) - divInt(in0,int(3.0)) ) - ( mod(int(8.0),in2) - int(6.0) ) )) * min(res0, i2) ) ), ( in2 * i1 )))), i0))),divInt(int(9.0),abs(min(in0, ( int(8.0) - in1 ))))), int(2.0)),( max(int(9.0), i1) - int(7.0) )) == in0 )\\nb2 = ( not b1 and not True )\\nb1 = int(7.0) != max(in0, i2)\\n:}else:{:\\nloopBreak% = 0\\nwhile not True:{:\\nloopBreak% = 0\\nwhile i0 \\l int(9.0):{:\\nif int(5.0) \\l in0:{:\\nb0 = ( not True or ( abs(abs(int(0.0))) * divInt(i0,i1) ) != mod(divInt(int(9.0),min(int(5.0), int(3.0))),( min(int(0.0), res0) + int(2.0) )) )\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nif b2:{:\\nres0 = int(2.0)\\n:}else:{:\\nb1 = ( min(min(i2, max(max(abs(mod(int(1.0),abs(i1))), ( min(( int(6.0) * int(0.0) ), i1) * i2 )), i0)), max(min(int(5.0), int(5.0)), max(int(1.0), max(abs(mod(mod(min(int(7.0), int(3.0)),i1),max(abs(int(6.0)), int(1.0)))), int(7.0))))) + ( int(7.0) * int(3.0) ) ) != in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b1\\n:}\\nin2 = max(int(5.0), int(8.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 60, 60, 7, 11, 4, 25, 7, 18, 4, 3, 50, 2, 218, 53, 57, 26, 27]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 2, 1, 1, 2, 0, 0], [1, 0, 1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 2, 6, 1, 2, 1, 8, 9], [4, 1, 2], [0], [], [1, 0, 0, 1, 1], [0, 0, 0], [2, 1], [0], [1], [2, 0, 5, 0, 5, 2, 5, 1, 3, 5, 2], [1, 1, 0], [0, 1, 1, 2, 3, 3, 0, 3, 3, 3, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 3, 1, 3, 0, 3, 0, 3, 1, 1], [1, 1, 1], [2, 1, 0, 1, 2, 2, 1, 0, 2], [1, 2], [0, 0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i2 \\le int(7.0):{:\\nif not True:{:\\ni0 -= int(3.0)\\n:}else:{:\\nin2 *= divInt(abs(max(i0, min(max(abs(divInt(in2,divInt(i2,int(2.0)))), in2), i1))),int(6.0))\\n:}\\nloopBreak% = 0\\nwhile int(1.0) \\g int(2.0):{:\\nb0 = abs(int(1.0)) == max(in0, min(in2, abs(int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 9, 9, 3, 1, 0, 5, 3, 2, 1, 1, 11, 3, 29, 3, 9, 2, 3]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 1, 8, 7, 6, 6, 6, 0, 5, 3, 9, 0], [0], [0, 2], [], [1, 0], [0], [0], [], [], [5, 6, 2, 0, 5, 2, 3, 0, 5, 4, 6, 4], [], [1, 3, 2, 2, 2, 0, 2, 2, 0, 1, 2, 2, 2, 2, 3, 2, 1, 1, 0, 3, 3, 3, 2, 2, 0, 2, 0, 1, 0, 1, 0, 3, 0, 3, 1, 2, 3, 1, 1, 2, 3, 0, 3, 1, 1, 3, 0, 3, 0, 2, 3, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0], [2, 1, 2, 1, 2, 2, 1, 2, 0, 1, 0, 2, 1], [1, 0, 2, 2, 0, 1, 2, 2], [0, 1, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(3.0) \\l abs(( ( divInt(in2,mod(( res0 - int(0.0) ),( ( divInt(( max(divInt(int(1.0),int(8.0)), i2) + abs(max(abs(divInt(mod(i0,divInt(in2,int(7.0))),i2)), int(6.0))) ),in0) * abs(i0) ) * max(int(6.0), mod(abs(int(6.0)),int(0.0))) ))) + ( min(in2, max(int(5.0), int(3.0))) - min(in1, abs(res0)) ) ) * ( max(in1, int(9.0)) * int(0.0) ) )):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 13, 13, 1, 2, 0, 2, 1, 1, 0, 0, 12, 0, 54, 16, 13, 8, 8]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1, 1], [6, 8, 1, 1, 9], [5], [1], [], [1], [0], [], [], [], [0, 5, 1, 6, 1, 3, 0, 3, 2, 0], [0], [0, 3, 0, 3, 0, 2, 0, 3, 3, 2, 3, 1, 1, 2, 3, 1, 2, 2, 1, 3, 0, 3, 0, 0, 0, 2, 1, 3, 0], [1, 1, 1, 0, 0, 0], [2, 0, 1, 1, 2, 0, 2, 1, 2], [0, 1, 0], [1, 1, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = in2\\nb1 = abs(i1) != min(res0, mod(i1,max(max(mod(abs(int(6.0)),int(8.0)), mod(min(int(1.0), ( ( int(1.0) + abs(in0) ) - max(i0, in0) )),i2)), ( int(9.0) + abs(i0) ))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 10, 1, 29, 6, 9, 3, 3]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1], [8, 6, 5, 8, 4, 8, 4], [1, 2], [0, 2], [], [1, 1], [0, 0], [], [], [], [2, 1], [], [2, 3, 3, 2, 0, 1, 1, 3, 1, 1, 2, 1, 0, 1, 3, 1], [0, 1, 1], [1, 2, 0, 2], [1], [1, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( max(abs(mod(i2,int(8.0))), int(6.0)) - min(int(5.0), int(8.0)) ) \\g mod(int(4.0),i1)\\nb2 = int(8.0) == abs(int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 2, 2, 0, 2, 2, 0, 0, 0, 2, 0, 16, 3, 4, 1, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [0], [1], [], [0, 1], [0], [2], [], [], [5, 1], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not in2 \\l i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [1, 2, 2, 1, 0, 1], [1, 0], [1, 1, 0, 0], [1, 1, 1, 1], [1, 2, 7, 6], [3, 2, 2], [0, 1, 0], [1], [0, 1, 1, 0, 1, 0], [0, 0, 0], [3, 1, 0], [0], [0], [3, 6, 2, 1, 4, 6, 2, 3, 2, 3, 4, 0], [1, 1], [0, 1, 2, 0, 2, 0, 1, 3, 0, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 2, 0, 1], [0, 1, 1, 0], [0, 2, 0, 2], [1, 2, 0, 2], [0, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= res0\\nloopBreak% = 0\\nwhile ( int(1.0) \\ge ( i2 * divInt(i1,int(2.0)) ) or min(in1, int(7.0)) == res0 ):{:\\nif True:{:\\ni2 += in0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = abs(mod(min(i2, in0),in1)) == abs(( i0 * int(6.0) ))\\nb1 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 4, 4, 3, 3, 1, 6, 3, 3, 1, 1, 12, 2, 22, 4, 4, 4, 2]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1], [1, 0], [0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 4, 4, 6, 6, 4, 7, 4, 0, 0, 1, 6, 9, 8, 1, 7, 5, 6, 1, 8, 4, 6, 9, 5, 1, 9, 3, 1, 6, 1, 7, 2, 5, 5, 8, 1, 3, 5, 5, 4, 8, 2, 8, 3, 4, 1, 4, 8, 1, 6, 9, 4, 2, 2, 2, 6, 4, 7, 6, 4, 4, 5], [2, 3, 0, 0, 3, 4, 0], [1, 0, 1, 2], [0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 3, 1, 1], [0, 1], [0], [4, 0, 4, 2, 2, 0, 1, 0, 3, 3, 0, 6, 2, 5, 1, 4, 1, 2, 2, 0, 4, 5, 5, 1, 3, 4, 3, 1, 2, 3, 0, 6, 2, 6, 3, 3, 5, 0, 3, 0, 4, 5, 0, 1, 0, 6, 4, 1, 6, 6, 5, 5, 3, 1, 5, 5, 1, 0, 2, 1], [0, 0], [1, 3, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 3, 2, 2, 0, 0, 1, 1, 0, 2, 3, 1, 2, 3, 1, 3, 3, 2, 1, 0, 2, 0, 2, 0, 2, 3, 0, 3, 3, 0, 2, 3, 1, 1, 1, 0, 3, 2, 1, 1, 0, 0, 0, 3, 1, 0, 1, 2, 1, 1, 0, 2, 1, 2, 3, 0, 3, 0, 2, 3, 1, 1, 2, 2, 3, 1, 1, 3, 2, 3, 2, 1, 0, 3, 2, 3, 0, 1, 2, 2, 2, 1, 3, 3, 1, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 0, 0, 1, 1, 3, 1, 1, 0, 3, 3, 0, 3, 1, 2, 1, 3, 1, 2, 2, 0, 3, 0, 3, 2, 1, 1, 3, 3, 3, 3, 3, 2, 3, 2, 2, 1, 0, 1, 0, 0, 2, 0, 0, 2, 3, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 3, 3, 2, 3, 3, 1, 0, 3, 1, 0, 1, 2, 2, 2, 1, 0, 2, 0, 3, 1, 1, 3, 2, 1, 0, 0, 3, 3, 1, 3, 3, 2, 0, 3, 1, 1, 3, 0, 0, 1, 0, 0, 3, 2, 3, 1, 2, 3, 2, 2, 3, 0, 0, 1, 0, 3, 1, 1, 1, 1, 2, 0, 0, 0, 3, 1, 3, 2, 0, 3, 3, 0, 3, 0, 1, 2, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 1, 2, 0, 2, 1, 2, 1, 0, 0, 1, 1, 2, 2, 2, 0, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 2, 2, 1, 1], [2, 0, 1, 1, 1, 2, 1, 1, 2, 0, 1, 2, 2, 2, 1, 1, 2, 2, 0, 2, 1, 2, 1, 2, 0, 2, 2], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( int(9.0) == abs(in1) and ( divInt(( int(1.0) * mod(divInt(int(4.0),i0),int(4.0)) ),abs(divInt(divInt(in1,i2),int(6.0)))) + int(6.0) ) \\ge i2 ) or not ( True and ( abs(int(4.0)) - ( abs(int(7.0)) - max(min(divInt(int(4.0),i0), divInt(i1,( i0 - ( min(in0, min(max(in0, mod(max(int(0.0), int(0.0)),int(1.0))), i0)) * max(mod(int(6.0),int(9.0)), res0) ) ))), i2) ) ) \\l in2 ) )\\ni1 = abs(int(8.0))\\nin1 = i1\\nloopBreak% = 0\\nwhile int(1.0) \\l ( int(7.0) - int(5.0) ):{:\\nb0 = i2 \\ge divInt(int(6.0),( min(i2, max(i0, mod(max(int(1.0), int(8.0)),( ( max(int(4.0), int(6.0)) - min(( min(mod(int(9.0),in1), min(divInt(max(in2, int(5.0)),mod(divInt(divInt(int(1.0),min(min(int(9.0), ( ( int(3.0) * mod(in2,i1) ) + int(1.0) )), int(6.0))),( ( divInt(int(1.0),in0) - in1 ) * int(7.0) )),int(2.0))), min(int(5.0), int(5.0)))) * in0 ), min(min(i1, abs(int(8.0))), mod(int(1.0),abs(int(3.0))))) ) * ( divInt(i2,min(in0, max(( int(5.0) - int(5.0) ), min(min(max(abs(min(mod(abs(mod(( int(4.0) - i0 ),int(8.0))),res0), i2)), divInt(res0,in0)), divInt(max(int(2.0), abs(( mod(in0,divInt(in2,max(int(8.0), divInt(i0,min(min(divInt(max(max(int(3.0), in0), abs(int(4.0))),i0), int(1.0)), mod(mod(( int(4.0) * in1 ),( in2 * abs(int(8.0)) )),int(1.0))))))) + abs(divInt(int(6.0),i0)) ))),i1)), min(abs(int(9.0)), max(max(divInt(i0,min(int(4.0), int(2.0))), max(res0, in1)), int(2.0))))))) * i1 ) )))) - res0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif max(( max(int(2.0), ( min(mod(( max(res0, in2) * int(6.0) ),in2), min(int(4.0), int(7.0))) - int(6.0) )) * int(4.0) ), ( in0 + i1 )) \\le in2:{:\\nb1 = min(int(4.0), abs(( in2 * abs(max(i1, max(i0, int(5.0)))) ))) \\l ( i2 * i1 )\\nb2 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 63, 63, 7, 4, 3, 13, 7, 6, 2, 1, 60, 2, 242, 60, 61, 27, 33]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 2, 1], [1, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 8, 9, 6, 1, 4, 0, 0, 8, 0, 9, 8, 0, 4, 8, 9, 3, 8, 4, 2, 6, 1, 0, 2, 2, 4, 1, 5, 5, 7, 1, 4, 9, 2, 3, 7, 6, 1, 1, 9, 3, 9, 5, 1, 4, 4, 8], [1, 1], [2, 0], [], [1, 0, 0, 1], [0, 0], [0, 2], [], [0], [1, 1, 6, 4, 0, 0, 4, 1, 6, 1, 5, 5, 0, 2, 4, 2, 2, 1, 5, 2, 5, 5, 6, 1, 5, 2, 2, 0, 3, 5, 2, 0, 2, 3, 6, 3, 5, 1, 2, 1, 5, 5, 0, 6, 6, 4, 0, 1, 6, 0, 0, 0, 6, 3, 3], [1], [0, 1, 2, 2, 0, 3, 2, 2, 2, 3, 2, 0, 2, 2, 3, 1, 1, 3, 3, 3, 0, 3, 2, 2, 2, 3, 0, 3, 2, 0, 2, 2, 1, 0, 2, 1, 3, 3, 0, 3, 2, 0, 2, 3, 2, 1, 2, 3, 1, 0, 2, 1, 2, 0, 2, 2, 3, 1, 2, 1, 0, 0, 3, 1, 1, 3, 0, 1, 3, 0, 3, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 3, 2, 0, 0, 1, 2, 3, 2, 2, 3, 1, 0, 2, 2, 2, 2, 0, 3, 2, 3, 3, 2, 0, 2, 2, 3, 0, 1, 1, 0, 3, 0, 3, 2, 0, 1, 1, 3, 2, 1, 1, 0, 1, 1, 3, 2, 3, 2, 1, 2, 0, 0, 0, 0, 2, 3, 2, 3, 0, 2, 1, 3, 2, 2, 0, 0, 2, 3, 1, 0, 1, 2, 2, 3, 1, 0, 0, 1, 2, 3, 3, 0, 1, 1, 1, 2, 1, 3, 0, 2, 2, 3, 2, 2, 0, 2, 0, 3, 1, 3, 0, 0, 2, 3, 2, 2, 0, 0, 1, 3, 1, 2, 3, 2, 3, 0, 1, 3, 3, 1, 1, 3, 1, 0, 1, 2, 0, 3, 2, 2, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 1, 1, 0, 2, 2, 2, 0, 1, 2, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 1, 0, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0], [0, 1, 0, 2, 0, 0, 1, 1, 2, 2, 0, 1, 1, 1, 2, 1, 0, 0, 2, 2, 0, 0, 2, 1, 1, 0, 2, 2, 2, 0, 2, 0, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 83, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i1 \\g int(3.0)\\nloopBreak% = 0\\nwhile b0:{:\\nif not ( ( i1 + max(( mod(( abs(( res0 - divInt(( max(int(5.0), int(8.0)) + max(max(min(in1, abs(divInt(( ( abs(i0) * abs(divInt(i0,divInt(divInt(int(9.0),in1),( int(6.0) + min(max(i1, abs(( res0 + ( min(mod(int(1.0),( max(int(4.0), i1) - divInt(int(0.0),( in2 - mod(mod(abs(int(0.0)),divInt(int(8.0),in2)),i0) )) )), min(int(0.0), int(9.0))) * min(i2, int(8.0)) ) ))), max(in1, abs(i2))) )))) ) * int(0.0) ),i2))), i1), in2) ),divInt(i2,in2)) )) + mod(in2,int(4.0)) ),divInt(res0,abs(divInt(i1,in2)))) - int(8.0) ), ( max(( divInt(min(int(9.0), i2),mod(divInt(mod(( i2 - min(divInt(abs(abs(( i0 - divInt(mod(max(in0, int(3.0)),int(8.0)),in2) ))),min(i2, max(( i0 * int(4.0) ), int(2.0)))), min(( int(6.0) - int(1.0) ), i2)) ),int(0.0)),int(2.0)),min(( abs(( int(2.0) + divInt(in0,res0) )) + in0 ), in2))) * divInt(abs(( min(i1, ( int(4.0) * max(( ( i2 + i1 ) + mod(min(int(1.0), in2),int(5.0)) ), mod(( abs(int(5.0)) * in2 ),i0)) )) - int(7.0) )),( min(max(res0, int(1.0)), int(4.0)) - int(9.0) )) ), ( int(2.0) + min(res0, ( divInt(abs(( divInt(in1,divInt(i0,min(int(3.0), abs(i1)))) * res0 )),divInt(abs(mod(( i0 * i0 ),int(7.0))),abs(int(6.0)))) * mod(abs(( abs(i0) + int(1.0) )),max(abs(int(1.0)), int(9.0))) )) )) * max(int(3.0), res0) )) ) + int(9.0) ) \\g divInt(in0,min(mod(mod(int(5.0),int(1.0)),int(4.0)), int(4.0))):{:\\nin0 *= int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 48, 48, 2, 2, 0, 4, 2, 2, 0, 1, 55, 1, 219, 67, 50, 33, 35]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 1, 1, 0, 2, 0], [1, 1], [1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [9, 6, 9, 1, 0, 8, 5, 8, 1, 2, 7, 4], [0, 4], [2, 0, 0], [1], [0, 0, 1, 0, 1], [0, 0], [0, 3, 0], [], [], [2, 6, 4, 6, 0, 4, 3, 3, 0], [0, 0, 1], [0, 1, 2, 0, 1, 2, 0, 0, 1, 1, 3, 3, 2, 1, 1, 2, 1, 2, 2, 1, 3, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1], [2, 0, 2], [0, 0, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\ni2 = res0\\nb0 = ( int(9.0) \\l ( in1 * int(6.0) ) or b0 )\\nres0 = divInt(i0,in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(91.0) \\le int(08.0):{:\\nin0 += max(max(divInt(int(5.0),int(8.0)), divInt(int(1.0),( mod(int(2.0),max(in0, int(7.0))) * i0 ))), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 12, 12, 2, 3, 1, 5, 2, 3, 0, 0, 9, 3, 25, 6, 3, 3, 4]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 0, 1], [0, 0, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 5, 6, 3, 6, 4, 2, 2, 6, 2], [4, 0, 5], [1], [], [1, 0, 1, 1], [0, 0, 0], [1], [0], [0, 0, 1], [5, 5, 3, 5, 0, 4, 2, 2, 6, 4, 3, 3], [1], [1, 0, 3, 3, 1, 1, 1, 2, 0, 2, 1, 2, 0, 3, 3, 3, 0, 3, 3, 2, 2, 0, 0, 2, 2, 3, 0, 1, 1, 1, 1, 1, 0, 1, 3, 3, 2, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 1], [2, 1, 0, 2, 1, 1, 0, 1, 2, 1], [2, 0, 0, 2, 1], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(8.0) \\le in2:{:\\nif True:{:\\nif abs(max(int(4.0), int(5.0))) \\l int(6.0):{:\\nb1 = divInt(in2,( int(3.0) * divInt(in0,min(abs(max(in2, max(min(( mod(i0,in1) + ( ( max(i2, int(6.0)) + int(4.0) ) * int(2.0) ) ), int(2.0)), int(6.0)))), i2)) )) != int(2.0)\\n:}else:{:\\nres0 -= abs(max(divInt(in1,in0), in0))\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 11, 11, 3, 1, 0, 4, 3, 1, 1, 3, 12, 1, 40, 8, 10, 5, 4]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 3], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [1, 8], [1], [1], [], [1], [0], [], [], [], [1, 4], [], [3, 3, 0, 1, 0, 1], [], [1, 0], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(min(i1, int(1.0)), in1) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 6, 0, 2, 0, 0]}, {"genotype": [[0], [1, 1, 0, 1], [2, 1, 0, 1], [0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 6, 6, 6, 0, 0, 6], [4, 1], [0, 0], [], [0, 1, 1], [0, 0], [1], [0], [1], [5, 5, 5, 1, 2], [1], [0, 0, 1, 2, 3, 2, 0, 3, 1, 3, 3, 1, 1, 1, 2, 0, 1, 1, 1], [1, 1, 0], [0, 1, 1, 0], [1, 2], [1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb0 = in2 \\le in2\\n:}else:{:\\nb0 = int(5.0) \\g mod(min(divInt(in2,max(int(5.0), max(min(int(6.0), int(6.0)), int(6.0)))), ( i1 - int(0.0) )),int(0.0))\\ni2 *= int(6.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 8, 8, 2, 2, 0, 3, 2, 1, 1, 1, 5, 1, 19, 3, 4, 2, 2]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [1, 2, 2, 0, 2, 0], [0, 0, 1], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 6, 9, 1, 3], [3, 4, 5], [2, 0, 2, 2], [], [1, 0, 0, 1, 0, 1], [0, 0, 0], [2, 0, 0], [], [0, 0], [4, 5, 2, 5, 0, 2], [1], [3, 3, 1, 1, 3, 1, 0, 2, 1, 0, 0, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [1, 0, 2], [1, 1], [1, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= max(min(int(6.0), int(2.0)), abs(int(5.0)))\\nif in2 \\ge ( int(6.0) - i2 ):{:\\nif not b2:{:\\nb0 = in2 \\le int(9.0)\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = mod(i0,i2) != mod(int(1.0),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 7, 7, 3, 4, 0, 6, 3, 3, 0, 2, 6, 1, 18, 3, 3, 2, 2]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1], [7, 1, 7, 0, 0, 2, 7], [0], [1], [], [1], [0], [], [], [], [2, 2, 6, 6, 2, 6, 4, 4, 5], [0], [2, 2, 2, 2, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 0, 1, 0, 3, 1, 2, 1, 0, 3, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 0, 2, 2, 0, 0, 2, 2, 1, 0], [1, 1], [1, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = ( mod(mod(mod(max(int(7.0), max(min(abs(abs(min(min(abs(abs(i2)), res0), res0))), int(1.0)), i2)),int(7.0)),res0),max(int(0.0), ( int(0.0) - in1 ))) - min(in1, int(2.0)) )\\nb1 = int(7.0) \\l in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 9, 1, 31, 5, 11, 2, 3]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 2, 0, 0, 0, 1, 2, 0, 1], [1, 0, 1], [0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 7, 2, 7, 3, 7, 3, 6, 6, 2, 9, 6, 2, 8], [5, 0], [0, 1, 0, 2, 2, 1], [], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0], [1, 1, 2, 0, 1, 0], [1, 1, 0], [0], [4, 1, 0, 6, 3, 5, 5, 0, 1, 4, 1, 1, 4, 2, 4, 6, 2], [1, 1, 0], [3, 2, 1, 2, 0, 2, 1, 1, 2, 1, 2, 2, 2, 1, 3, 0, 1, 0, 2, 2, 0, 1, 1, 0, 0, 0, 1, 3, 2, 3, 2, 0, 3, 2, 3, 1, 1, 0, 2, 3, 0, 1, 2, 2, 1, 3, 2, 0, 0, 1, 2, 2, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 1, 0, 2, 1, 2, 2], [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(( int(2.0) * ( in1 * divInt(int(2.0),int(7.0)) ) )) != ( int(2.0) * divInt(( ( int(7.0) * max(i1, int(3.0)) ) * i0 ),divInt(divInt(res0,int(7.0)),int(3.0))) )\\nloopBreak% = 0\\nwhile False:{:\\nif False:{:\\nb1 = not b0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 *= in2\\nb2 = True\\nin2 -= i0\\nloopBreak% = 0\\nwhile i1 \\l int(6.0):{:\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = max(divInt(min(mod(i1,abs(( max(int(6.0), int(2.0)) - i1 ))), mod(abs(in1),int(9.0))),( ( int(6.0) - abs(( i2 - in1 )) ) - int(2.0) )), ( ( int(8.0) + res0 ) - i2 ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 15, 15, 2, 6, 0, 8, 2, 6, 3, 1, 17, 3, 55, 18, 8, 13, 7]}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 0], [1, 1, 1, 0, 1, 1, 1], [9, 3, 7, 0, 1, 3, 8], [0], [0], [], [1], [0], [], [], [], [5, 0, 1, 4, 0, 2, 4, 2], [0, 1], [3, 1, 2, 1, 1, 0, 1, 3, 3, 3, 2, 2, 3, 0, 2, 0, 3, 1, 3, 3, 0, 0, 3, 1, 0], [1, 0, 1, 0], [0, 2, 2, 1, 2, 2, 1, 0, 2], [0, 2, 1], [1, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = min(int(9.0), mod(int(3.0),int(7.0)))\\ni0 += i1\\nb0 = int(01.0) \\l abs(abs(max(( divInt(abs(in1),( i0 * abs(int(3.0)) )) - max(min(i2, in1), abs(int(8.0))) ), i2)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 8, 2, 25, 4, 9, 3, 2]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [9, 7], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(97.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1], [5, 7, 3, 3], [], [], [], [], [], [], [], [], [0, 5, 6, 1], [0], [3, 3, 0, 1, 2, 2, 0, 3, 2, 2, 3, 3, 1, 1, 3, 1, 0], [0, 0, 1, 1], [0, 1, 2, 2, 2, 2], [0, 0], [0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = min(max(in2, int(5.0)), ( ( res0 + abs(divInt(mod(abs(abs(int(7.0))),int(3.0)),abs(int(3.0)))) ) + i1 ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 17, 4, 6, 2, 2]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 1, 3, 1, 1, 9, 9, 3, 8, 1, 4, 5, 9, 7, 9, 9, 1, 3, 3, 2], [1], [1, 0], [], [1, 0], [0], [0], [], [], [4, 0, 3, 0, 2, 0, 0, 1, 3, 1, 5, 0, 6, 3, 1, 4, 0, 0, 3, 3, 2], [1], [3, 3, 1, 2, 0, 2, 2, 1, 3, 1, 0, 2, 1, 2, 2, 2, 0, 0, 2, 0, 2, 3, 0, 3, 2, 0, 1, 2, 0, 0, 1, 2, 2, 1, 1, 1, 1, 1, 3, 2, 3, 2, 2, 1, 2, 3, 0, 2, 1, 2, 2, 0, 0, 0, 3, 0, 3, 0, 0, 1, 2, 3, 0, 1, 1, 3, 2, 0, 2, 3, 2, 3, 2, 0, 1, 1, 2, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 1, 0, 2, 0], [1, 1, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(max(int(1.0), ( in1 - ( ( int(9.0) - min(int(1.0), i0) ) * ( int(3.0) + ( mod(mod(in0,i0),( i2 + divInt(max(i0, min(( i0 - int(1.0) ), ( i1 * in0 ))),int(1.0)) )) * mod(divInt(int(9.0),int(9.0)),int(3.0)) ) ) ) )), int(8.0)) \\g int(1.0):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= max(divInt(min(divInt(divInt(int(4.0),( abs(in2) * divInt(int(5.0),( ( i0 * res0 ) * in0 )) )),max(i1, max(in1, i0))), int(9.0)),( max(i0, int(7.0)) + int(9.0) )), min(( in0 * divInt(abs(( min(( in0 - int(9.0) ), int(1.0)) - ( int(3.0) + int(3.0) ) )),int(2.0)) ), i2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 21, 21, 1, 2, 0, 2, 1, 1, 0, 0, 21, 1, 81, 26, 14, 17, 10]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 1, 1, 0, 2, 1], [0, 1], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 2, 9, 2, 2, 9, 6, 0, 2, 9, 5], [5, 1], [2, 1, 2], [], [0, 1, 0, 1], [0, 0], [1, 0], [1], [0], [1, 3, 0, 6, 4, 3], [0, 0], [2, 2, 0, 2, 2, 0, 1, 1, 1, 3, 3, 1, 0, 3, 3, 1, 1, 3, 1, 3, 0, 1, 1, 1], [1, 0, 1, 1], [0, 1, 1, 2, 2, 1], [0], [1, 1, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nb2 = mod(( i1 + mod(mod(in0,int(3.0)),int(2.0)) ),int(9.0)) != min(max(int(2.0), i0), max(abs(int(2.0)), int(9.0)))\\n:}\\nb1 = b2\\nres0 = abs(int(6.0))\\nloopBreak% = 0\\nwhile max(in1, int(0.0)) \\g int(29.0):{:\\nin0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 6, 6, 2, 4, 11, 11, 2, 3, 0, 4, 2, 2, 1, 1, 6, 2, 24, 4, 6, 1, 3]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0], [1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 0, 4, 9, 1, 2, 3, 6, 9, 5, 5, 8, 5, 6, 3, 7], [2, 0, 4, 3, 3, 2, 1, 5], [1, 0, 1, 0], [1, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1], [1], [1], [5, 4, 4, 5, 2, 2, 4, 5, 1, 0, 3, 1, 6, 5, 6, 2, 3, 1, 4, 3, 6, 5, 2, 1, 4, 0, 4, 1, 1, 3, 5, 1, 1, 5, 2, 3], [0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 3, 1, 0, 3, 0, 2, 2, 3, 2, 3, 3, 1, 3, 3, 1, 2, 2, 0, 0, 0, 3, 0, 0, 2, 1, 3, 0, 3, 3, 0, 1, 0, 0, 3, 0, 0, 2, 0, 2, 1, 0, 3, 3, 3, 2, 1, 2, 3, 3, 1, 0, 0, 3, 3, 2, 0, 0, 0, 0, 2, 3, 3, 1, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 2, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 0, 2, 1], [2, 2, 1, 2, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in2 == in1:{:\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(6.0) \\l i2 or ( int(0.0) \\le max(int(4.0), i2) or abs(in1) \\ge divInt(( max(( min(max(int(9.0), abs(max(int(1.0), mod(divInt(in2,i1),i0)))), abs(in0)) * i1 ), ( int(2.0) * abs(res0) )) - abs(abs(in2)) ),int(3.0)) ) ):{:\\nb1 = res0 \\ge i2\\nb0 = abs(in0) == i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif mod(in1,( int(6.0) * in0 )) \\g min(min(min(( int(9.0) + ( max(min(int(5.0), res0), in2) - abs(min(divInt(i2,i1), in1)) ) ), i0), ( abs(max(int(5.0), divInt(in1,( int(8.0) + i1 )))) + i1 )), in0):{:\\nin2 -= i1\\n:}else:{:\\nb1 = i1 != in2\\ni2 = int(5.0)\\n:}\\nb0 = False\\nin0 = int(637.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 3, 8, 16, 16, 8, 4, 2, 11, 8, 3, 1, 1, 36, 4, 81, 14, 21, 9, 6]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 2, 0, 1, 0, 0], [0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 5, 1, 4, 7, 1, 4, 3, 8, 0, 8, 5, 0, 2, 9, 2, 1, 4, 4], [4, 3, 0, 2], [0, 1, 0, 1], [], [1, 0, 1, 1, 1], [0, 0, 0, 0], [1], [1], [1], [4, 1, 4, 5, 0, 1, 4, 3, 4, 3, 5, 4, 1, 1, 6, 3, 4, 1], [0], [1, 3, 3, 0, 3, 1, 2, 0, 2, 3, 2, 3, 1, 0, 2, 2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 0, 1, 3, 0, 1, 0, 2, 3, 3, 2, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 1, 3, 2, 1, 0, 3, 1, 2, 3, 2, 0, 1, 3, 3, 2, 1, 3, 2, 3, 2, 0, 1, 1, 1, 0, 1, 3, 0, 3, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0], [1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 1, 2, 2], [0, 0, 1, 1, 2, 2, 1, 0, 2], [1, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(7.0) \\le max(abs(in1), abs(int(5.0)))\\nif False:{:\\nb1 = mod(i1,( min(divInt(abs(int(5.0)),in1), ( mod(min(int(1.0), abs(divInt(( abs(int(4.0)) + min(int(7.0), in2) ),int(1.0)))),min(i0, int(4.0))) + i1 )) - ( abs(abs(( in1 - in0 ))) * in1 ) )) \\ge int(3.0)\\nb0 = in0 \\l mod(in2,( int(8.0) * int(0.0) ))\\nb1 = int(8.0) == abs(divInt(int(5.0),in1))\\n:}else:{:\\ni1 = min(int(0.0), ( max(( i1 - int(2.0) ), max(max(mod(int(9.0),max(divInt(max(( res0 + int(2.0) ), int(1.0)),int(4.0)), in0)), int(4.0)), abs(in1))) * abs(i1) ))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 20, 20, 4, 4, 0, 5, 4, 1, 1, 1, 18, 1, 75, 17, 21, 9, 8]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 2, 2, 2, 0, 1, 2, 2, 2, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 9, 7, 5, 9, 4, 4, 6, 9, 8, 0, 9, 6, 4, 8, 5, 0, 5, 7, 7, 6, 0, 0, 5, 0], [3, 0, 4, 2, 5, 1, 1, 3], [0, 2, 1, 2, 1, 2], [], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 1, 2, 2, 1, 0, 2, 1], [0, 0, 1], [1, 0, 1, 0, 1, 0], [3, 3, 6, 1, 4, 1, 3, 3, 0, 0, 4, 2, 5, 6, 2, 6, 2, 4, 1, 0, 2, 2, 5, 5, 6, 5, 5], [0, 1, 0], [2, 1, 1, 1, 2, 0, 2, 0, 0, 0, 1, 0, 2, 3, 1, 3, 1, 3, 2, 2, 0, 1, 2, 0, 0, 2, 2, 3, 0, 3, 1, 1, 1, 2, 1, 1, 2, 0, 3, 1, 3, 1, 1, 2, 2, 1, 0, 0, 1, 0, 3, 3, 1, 2, 2, 0, 0, 2, 1, 3, 2, 0, 3, 1, 1, 0, 0, 3, 0, 3, 0, 1, 2, 0, 3, 3, 3, 0, 1, 3, 0, 1, 1, 3, 3, 3, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 2, 2, 2, 2, 1, 2, 2], [1, 0, 2, 0, 1, 2, 0, 1, 2, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(int(1.0),int(3.0)) \\ge int(9.0):{:\\nloopBreak% = 0\\nwhile ( in0 - ( in0 + res0 ) ) \\l i1:{:\\nin1 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i1 \\le ( min(int(5.0), min(int(9.0), min(divInt(( in0 * int(4.0) ),mod(in0,i0)), divInt(divInt(max(i0, max(int(4.0), int(6.0))),int(9.0)),( int(8.0) + int(0.0) ))))) - ( in1 * max(int(9.0), max(int(6.0), int(4.0))) ) ):{:\\nif divInt(( int(8.0) + i2 ),in2) == int(5.0):{:\\nloopBreak% = 0\\nwhile not b0:{:\\nloopBreak% = 0\\nwhile res0 != min(max(int(0.0), mod(( i2 - res0 ),divInt(int(5.0),max(( i2 * abs(int(7.0)) ), int(7.0))))), in1):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = not not i1 \\g min(i0, max(i2, int(6.0)))\\n:}\\n:}\\n:}else:{:\\nif True:{:\\nif divInt(i2,abs(abs(abs(in2)))) \\g int(0.0):{:\\nif b2:{:\\nb1 = not False\\n:}\\n:}else:{:\\nin2 += abs(res0)\\n:}\\n:}\\n:}\\nin2 = int(0.0)\\nb2 = int(5.0) \\ge max(abs(abs(int(0.0))), in2)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 9, 7, 26, 26, 8, 6, 0, 17, 8, 9, 3, 6, 27, 3, 88, 18, 20, 10, 9]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1], [2, 1, 0, 0, 0, 1], [1], [0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 8, 4, 8, 1, 9, 3, 2, 4], [0, 0, 3, 0], [2, 1, 1], [1], [1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0], [3, 2, 2, 1], [1], [], [4, 4, 1, 2, 3, 0, 0, 3, 1, 1, 5, 3, 3, 0], [0, 1], [3, 3, 0, 0, 1, 0, 0, 1, 0, 3, 3, 3, 1, 0, 2, 1, 2, 0, 0, 1, 3, 2, 0, 2, 0, 3, 0, 1, 2, 1, 1, 0, 2, 1, 1], [0, 0, 0, 0, 0, 1], [1, 0, 2, 1, 0, 0, 1], [0, 0, 2, 2, 0, 0], [0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(min(in1, in1), int(4.0)) \\l i1:{:\\nb2 = i2 \\l int(3.0)\\nb1 = in0 \\ge abs(max(min(int(8.0), i0), ( int(4.0) + ( i0 + in0 ) )))\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= min(( in2 * ( in0 + max(in0, int(1.0)) ) ), ( int(9.0) + int(3.0) ))\\nb1 = ( not not False or i0 \\l divInt(int(2.0),int(4.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 10, 10, 4, 3, 1, 8, 4, 4, 1, 0, 14, 2, 35, 6, 7, 6, 1]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 1, 0, 1], [1], [1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 9, 9, 0, 2, 8, 4, 7, 7, 4, 2, 6, 7, 6, 2, 0, 1, 9, 7, 6, 5, 9, 1, 4, 7, 5, 3, 7, 5, 5, 1], [4, 4, 5], [0], [1], [0, 1, 1, 1], [0, 0, 0], [3], [], [], [2, 2, 3, 6, 5, 5, 0, 3, 1, 5, 4, 5, 2, 6, 1, 1, 0, 0, 2, 6, 6, 4, 5, 4, 0, 4, 4, 1, 3, 6, 5, 3, 1, 2, 4, 4, 1, 4, 1, 3, 3, 0, 5], [1, 0, 0], [2, 1, 0, 1, 3, 3, 0, 1, 3, 3, 2, 3, 2, 0, 2, 2, 2, 0, 0, 1, 0, 3, 2, 0, 2, 0, 2, 3, 3, 2, 0, 1, 1, 0, 2, 0, 1, 2, 3, 2, 3, 2, 0, 2, 1, 1, 2, 0, 3, 1, 2, 3, 1, 2, 2, 0, 0, 3, 2, 1, 2, 3, 0, 3, 3, 3, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 3, 0, 0, 3, 0, 3, 2, 0, 1, 0, 0, 2, 1, 3, 3, 0, 0, 0, 3, 3, 3, 3, 0, 2, 3, 1, 1, 2, 2, 2, 1, 3, 1, 2, 2, 3, 0, 0, 2, 2, 1, 1, 3, 0, 1, 0, 1, 0, 2, 1, 1, 3, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 0, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0], [0, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( divInt(int(7.0),i2) \\le int(3.0) or abs(abs(i2)) \\le int(9.0) ):{:\\nin0 += abs(max(divInt(abs(divInt(res0,mod(( ( in2 * in2 ) - int(9.0) ),i0))),abs(( in0 * ( i1 * mod(max(max(divInt(in2,int(0.0)), int(2.0)), in1),mod(in2,int(8.0))) ) ))), ( abs(divInt(min(divInt(i2,mod(int(4.0),int(7.0))), ( res0 * abs(int(7.0)) )),mod(min(int(4.0), mod(mod(i1,i1),max(( int(2.0) * ( min(i0, abs(abs(min(( i0 + int(6.0) ), i2)))) * int(7.0) ) ), int(6.0)))),res0))) * res0 )))\\nb0 = ( int(2.0) - min(int(0.0), abs(int(1.0))) ) != mod(min(divInt(divInt(divInt(mod(mod(mod(( divInt(int(9.0),in1) + in2 ),in1),i0),min(in1, in1)),max(i1, max(( in0 * int(7.0) ), res0))),in2),mod(int(6.0),min(min(in0, i1), i2))), abs(min(min(max(in1, divInt(abs(int(5.0)),int(9.0))), mod(( mod(int(1.0),abs(int(4.0))) * mod(( abs(in1) - i1 ),divInt(( int(7.0) * int(5.0) ),min(in1, int(3.0)))) ),i1)), int(7.0)))),in0)\\nin0 = ( int(5.0) + int(5.0) )\\ni0 = min(in2, int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 32, 32, 3, 1, 1, 4, 3, 1, 0, 0, 43, 3, 149, 43, 34, 17, 27]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 2, 1, 2, 2, 0, 0], [0, 0, 1], [1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 0, 1, 7, 4, 5, 6, 0, 9, 5, 3, 4, 5, 8, 8, 3, 6, 4, 0], [5, 3, 3], [1], [], [0, 1, 1, 1], [0, 0, 0], [1], [0], [0, 0], [1, 6, 2, 2, 3, 2, 3, 1, 1, 6, 0, 5, 3, 6, 2, 1, 2, 1, 1, 4, 1, 2, 2, 1, 2, 5, 3, 6, 0, 3], [1, 1, 0, 0, 1], [3, 2, 2, 0, 1, 0, 1, 3, 0, 0, 3, 0, 0, 1, 1, 2, 3, 3, 2, 1, 1, 2, 0, 2, 1, 3, 1, 0, 0, 2, 3, 2, 3, 1, 1, 2, 1, 0, 3, 0, 3, 1, 1, 0, 3, 1, 3, 2, 2, 0, 2, 0, 0, 2, 0, 3, 2, 3, 2, 3, 2, 2, 3, 0, 0, 1, 1, 0, 1, 2, 2, 2, 0, 3, 2, 2, 3, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [2, 1, 1, 2, 1, 2, 0, 1, 0, 1, 2, 2, 1, 0, 1, 0, 1, 2], [0, 0, 2, 1, 2, 2, 1, 0, 0, 1, 1, 2], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += abs(mod(mod(res0,int(6.0)),i2))\\ni2 += int(1.0)\\nin0 = max(i2, in0)\\nif True:{:\\ni1 = max(i1, res0)\\n:}\\nif int(0.0) != int(1.0):{:\\nloopBreak% = 0\\nwhile mod(abs(max(divInt(int(7.0),int(4.0)), divInt(i0,( int(5.0) * abs(int(6.0)) )))),in2) \\ge in0:{:\\nres0 -= ( min(divInt(max(int(0.0), int(9.0)),( int(5.0) * i2 )), min(i1, max(int(3.0), int(4.0)))) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = abs(int(5.0)) \\ge abs(( divInt(i1,mod(i1,in1)) - ( i1 + max(( min(( max(divInt(mod(min(i2, i2),int(8.0)),int(8.0)), i1) + int(3.0) ), divInt(mod(( i2 - max(divInt(( abs(in2) - int(6.0) ),in0), int(4.0)) ),res0),i0)) * int(0.0) ), in0) ) ))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 20, 20, 3, 1, 0, 4, 3, 1, 1, 2, 30, 5, 85, 22, 18, 12, 13]}, {"genotype": [[0], [1], [1], [], [1], [1], [9], [], [], [], [], [], [], [], [], [2, 5], [1], [2, 0, 1], [1], [], [0], [0]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += divInt(in2,int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 0], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1], [2, 1, 2, 0, 0, 1, 1], [0, 1], [0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 9, 2, 3, 7, 1, 0, 4, 8, 3, 0, 2, 7, 3, 3, 9, 8, 8, 6, 2, 1, 8, 1, 8, 3, 8, 4, 2], [3, 1, 2, 1], [1, 1, 0, 1], [1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0], [1, 3, 3, 2, 1, 0, 2], [0, 1], [1], [4, 5, 6, 0, 3, 5, 6, 6, 0, 5, 4, 0, 2, 0, 4, 6, 4, 4, 4, 1, 3, 6, 0, 4, 4, 6, 1, 6, 0, 5, 4, 1, 4], [0, 0], [3, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0, 3, 2, 1, 2, 1, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1, 0, 2, 0, 2, 3, 2, 0, 2, 2, 2, 1, 1, 0, 2, 1, 0, 3, 2, 3, 2, 1, 0, 1, 3, 3, 3, 2, 3, 0, 1, 0, 3, 0, 3, 3, 3, 3, 2, 1, 2, 3, 2, 1, 0, 1, 0, 3, 1, 2, 2, 0, 0, 2, 3, 0, 2, 2, 3, 3, 1, 1, 3, 2, 3, 3, 3, 3, 1, 0, 0, 3, 0, 2, 3, 0, 2, 0, 3, 3, 0, 3, 1, 3, 3, 3, 1, 0, 1, 1, 3, 0, 3, 0, 1, 2, 0, 2, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [2, 2, 2, 1, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 1, 2, 0, 0, 1, 1, 0, 2, 2, 0, 2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 0], [0, 2, 0, 2, 1, 0, 1, 2, 0, 0, 0, 1, 2, 2, 2, 0, 2, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb1 = ( ( not False or abs(mod(int(7.0),abs(( ( int(8.0) + ( int(9.0) * int(2.0) ) ) + in1 )))) \\ge abs(mod(int(3.0),( int(7.0) * in2 ))) ) or b1 )\\nloopBreak% = 0\\nwhile int(1.0) \\g int(0.0):{:\\nb0 = int(4.0) == res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not divInt(i0,( divInt(in0,( in2 - int(8.0) )) + res0 )) \\g mod(res0,( max(divInt(i0,( divInt(( int(3.0) - int(0.0) ),in2) * ( int(2.0) + in1 ) )), abs(( min(divInt(int(7.0),i0), int(3.0)) + min(abs(abs(divInt(max(i2, int(3.0)),i0))), abs(in1)) ))) + abs(abs(abs(max(mod(int(9.0),( abs(mod(int(8.0),res0)) - int(8.0) )), in1)))) ))\\n:}else:{:\\nin1 = min(int(6.0), divInt(mod(in1,i1),divInt(min(in0, ( ( max(max(int(2.0), int(1.0)), min(divInt(abs(abs(min(abs(int(8.0)), res0))),i0), abs(in1))) * ( max(in1, ( res0 * min(abs(i1), min(int(1.0), max(abs(min(int(8.0), res0)), int(3.0)))) )) * int(8.0) ) ) + abs(i0) )),min(in2, int(4.0)))))\\n:}\\nin1 = ( i1 * ( int(2.0) + in1 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 29, 29, 4, 4, 2, 11, 4, 7, 2, 1, 33, 2, 128, 33, 35, 18, 15]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 1, 2, 0, 1, 1, 2, 2, 0, 2, 0, 2, 2, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 8, 2, 9, 4, 1, 0, 5, 4, 8, 3, 0, 4, 8, 8, 2, 6, 8, 9, 2, 9, 9, 3, 7, 1, 1, 8, 4, 9, 0, 6, 2, 5, 3, 4, 2, 3, 2, 4, 7, 3, 8, 8, 1, 4, 5, 4, 0, 9, 5, 9, 0, 2, 1], [1, 2, 3, 1, 1, 1, 5, 4, 2, 2], [0, 1, 2, 0, 0, 0], [0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 3, 2, 3, 1, 0], [0], [0, 1, 1, 0, 0], [1, 3, 1, 3, 0, 2, 2, 6, 6, 2, 3, 4, 6, 1, 6, 5, 1, 1, 2, 5, 3, 1, 6, 5, 2, 5, 4, 0, 3, 3, 2, 0, 3, 4, 3, 4, 6, 5, 2, 3, 2, 6, 1, 6, 2, 3, 5, 0, 6, 3, 0, 2, 4, 1, 2, 2, 5, 5, 0, 0, 3, 6, 6, 1, 2, 0, 3, 0, 5], [0, 0, 1, 0, 0], [2, 0, 1, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 3, 3, 2, 2, 0, 1, 2, 1, 0, 3, 0, 0, 2, 2, 3, 2, 1, 2, 0, 3, 3, 0, 2, 1, 1, 2, 0, 2, 2, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 3, 0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 3, 1, 1, 0, 0, 2, 3, 2, 3, 1, 1, 1, 2, 2, 3, 0, 1, 1, 1, 2, 0, 0, 1, 1, 3, 2, 2, 0, 1, 2, 3, 1, 0, 2, 1, 1, 1, 3, 0, 2, 3, 0, 2, 0, 2, 0, 2, 0, 2, 2, 1, 3, 1, 2, 2, 0, 1, 2, 0, 0, 1, 1, 2, 2, 0, 2, 2, 3, 0, 0, 3, 2, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3, 1, 3, 1, 3, 2, 0, 1, 0, 3, 1, 3, 2, 2, 0, 1, 2, 0, 3, 3, 0, 0, 0, 1, 2, 0, 2, 2, 2, 0, 3, 2, 2, 1, 0, 2, 2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 2, 3, 0, 0, 3, 2, 3, 1, 1, 1, 1, 0, 3, 2, 0, 3, 3, 0, 0, 3, 0, 2, 0, 3, 1, 1, 2, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 0, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2], [1, 0, 2, 1, 0, 1, 1, 2, 1, 2, 0, 2, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 2, 2, 1, 1, 0, 2, 0, 1, 1, 0, 2, 2, 0, 1, 2, 2, 1, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = ( in0 - int(3.0) )\\nif i1 \\g ( divInt(( in0 + i0 ),( i2 * ( divInt(abs(abs(mod(mod(i2,int(7.0)),( int(8.0) - res0 )))),abs(res0)) + i2 ) )) - ( mod(abs(divInt(int(2.0),divInt(in0,max(abs(in1), ( int(9.0) - int(4.0) ))))),mod(res0,mod(( abs(abs(( mod(int(1.0),int(0.0)) * i1 ))) - res0 ),in2))) * i1 ) ):{:\\nloopBreak% = 0\\nwhile i1 == int(5.0):{:\\nloopBreak% = 0\\nwhile not b0:{:\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif mod(int(4.0),int(8.0)) \\ge ( ( int(3.0) + ( int(0.0) * ( int(4.0) + int(8.0) ) ) ) - max(i2, divInt(( in2 - int(8.0) ),mod(( divInt(in0,i1) + res0 ),in2))) ):{:\\nb0 = int(2.0) \\g int(6.0)\\ni2 = max(int(8.0), int(9.0))\\nin2 -= in1\\nloopBreak% = 0\\nwhile ( i0 \\g ( abs(( min(int(2.0), int(9.0)) - int(9.0) )) - ( ( abs(in0) - int(3.0) ) - int(7.0) ) ) and not int(1.0) \\g ( in0 - i2 ) ):{:\\nif int(1.0) != int(8.0):{:\\ni0 = abs(mod(( in0 + int(4.0) ),divInt(abs(int(9.0)),in1)))\\n:}else:{:\\nif ( int(0.0) - int(6.0) ) \\le int(2.0):{:\\nb0 = abs(in0) == divInt(abs(in1),( res0 + mod(in2,divInt(i2,( ( int(5.0) * max(int(3.0), ( divInt(in0,int(4.0)) * divInt(i2,res0) )) ) * int(2.0) ))) ))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( True and int(3.0) == ( ( i1 * mod(( max(res0, i2) - abs(( int(2.0) - in0 )) ),( max(( max(min(min(( max(int(4.0), min(int(7.0), abs(( in2 + int(3.0) )))) * i0 ), abs(int(8.0))), max(divInt(divInt(res0,int(8.0)),( in0 + abs(min(i0, i2)) )), in1)), int(1.0)) - ( i1 - ( ( mod(i2,min(mod(divInt(int(4.0),i2),mod(( in2 + in2 ),( ( mod(int(5.0),i0) * mod(i0,( abs(in0) * res0 )) ) + abs(( abs(int(4.0)) - int(0.0) )) ))), int(9.0))) * int(5.0) ) * res0 ) ) ), min(mod(i1,abs(min(i2, i0))), abs(in0))) - ( i0 - abs(int(9.0)) ) )) ) + int(0.0) ) ):{:\\nif b0:{:\\nin2 = ( int(2.0) - int(1.0) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 9, 8, 55, 55, 10, 6, 2, 18, 10, 8, 1, 5, 69, 5, 236, 77, 40, 47, 31]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [2, 2], [0], [3, 0, 1], [], [0], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = min(i2, int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1], [4, 2, 8, 9, 8, 8, 2], [], [], [], [], [], [], [], [], [2, 2, 6, 3, 1], [1], [3, 3, 3, 2, 0, 2, 1, 2, 2, 2, 1, 3, 0, 2, 2, 1, 1, 0, 3, 3, 1, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1], [2, 2, 2, 0, 1, 1], [2, 1, 2, 2], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= abs(abs(abs(( i2 - ( int(4.0) * divInt(divInt(mod(int(2.0),min(res0, ( divInt(int(8.0),int(9.0)) * in0 ))),max(max(int(8.0), int(8.0)), i1)),int(2.0)) ) ))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 24, 7, 6, 4, 4]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [0, 1], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(01.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [], [], [0, 0], [], [0], [], [0], [], [], [0, 5], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= in2\\nb0 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [0], [], [0], [], [1], [1], [], [1, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\ni1 = in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [1, 0], [1], [2], [], [0], [], [0, 0], [], [1, 1], [0, 0], [0], [5, 3, 3], [0], [2, 1, 2, 0, 0], [1, 0], [], [0], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin2 = divInt(int(2.0),( in0 + in0 ))\\nb0 = True\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 1, 0, 2, 0, 2, 2, 1, 3, 1, 5, 2, 0, 1, 1]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [], [], [], [], [], [0], [], [1], [0], [], [0, 2], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1], [1, 2, 1, 1, 0, 1, 1], [1], [1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 5, 9, 6, 3, 9, 6, 3, 1, 7, 7, 7, 2, 5, 4, 5], [1, 0], [0, 1, 0], [], [1, 1, 0, 0], [0, 0], [2, 0], [], [], [1, 1, 2, 5, 6, 0, 4, 3, 2, 2, 0, 2, 0, 3, 3, 6, 4, 4, 0, 1, 1, 2, 2, 4, 4], [1, 0, 0, 0], [3, 0, 3, 2, 2, 1, 0, 3, 1, 2, 2, 1, 0, 3, 1, 2, 0, 0, 3, 2, 3, 3, 1, 0, 0, 3, 2, 1, 2, 2, 2, 0, 0, 2, 3, 0, 3, 0, 3, 3, 1, 1, 3, 3, 0, 2, 0, 3, 1, 3, 1, 0, 3, 1, 2, 3, 3, 3, 2, 1, 3, 1, 0, 1, 0, 3, 0, 1, 3, 3, 3, 0, 0, 1, 0, 2, 3, 1, 0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [2, 2, 2, 1, 0, 1, 1, 2, 2, 2, 1, 2, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 1, 2, 0, 2], [2, 0, 2, 0, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= abs(i1)\\nloopBreak% = 0\\nwhile abs(divInt(( int(7.0) + i2 ),abs(int(1.0)))) \\g mod(( int(5.0) * in2 ),max(int(9.0), mod(res0,i0))):{:\\nb0 = min(divInt(max(max(int(6.0), in1), in0),abs(( int(3.0) + mod(mod(mod(i2,i2),divInt(abs(i0),abs(i2))),max(abs(int(9.0)), int(6.0))) ))), min(abs(i0), ( in0 - max(int(3.0), min(int(1.0), in0)) ))) \\l max(int(7.0), mod(min(abs(max(( int(7.0) - min(int(7.0), res0) ), int(2.0))), in1),max(in1, int(5.0))))\\nb1 = not b0\\ni0 = max(abs(min(i1, i1)), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\nin1 = mod(abs(int(5.0)),in1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 17, 17, 2, 3, 0, 4, 2, 2, 0, 0, 25, 4, 79, 15, 26, 6, 10]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 8, 2, 4, 8, 7, 9, 9, 3, 8, 6, 4, 4, 9, 4], [1], [], [], [1], [0], [], [], [], [1, 5, 2, 4, 5, 6, 5, 1, 6, 0, 0, 3], [1], [1, 3, 3, 0, 3, 1, 3, 2, 2, 0, 1, 1, 3, 3, 3, 0, 2, 1, 2, 2, 1, 1, 2, 0, 3, 2, 2, 0, 1, 3, 3, 0, 2, 2, 2, 3, 2, 3, 2, 0, 1, 1, 0, 3, 3, 2, 2, 3, 2, 1, 3, 2, 0, 1, 1, 0, 2, 1, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0], [2, 1, 0, 0, 1, 2, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2], [0, 0, 0, 2, 2, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(9.0) \\g abs(max(i1, min(int(8.0), min(mod(( in2 + int(8.0) ),int(2.0)), max(abs(abs(i2)), ( int(4.0) + mod(mod(int(8.0),int(7.0)),divInt(in1,abs(mod(divInt(in2,int(9.0)),max(abs(res0), divInt(divInt(( abs(mod(abs(( in2 + int(9.0) )),int(3.0))) * i1 ),abs(min(divInt(( abs(divInt(int(8.0),abs(mod(res0,int(6.0))))) * int(4.0) ),i0), ( int(4.0) + int(9.0) )))),int(4.0))))))) )))))):{:\\ni0 += in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 16, 16, 1, 0, 0, 1, 1, 0, 0, 0, 12, 1, 61, 18, 16, 7, 12]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [6, 0], [], [], [], [], [], [], [], [], [3], [0], [2, 1, 1], [1], [], [], [0]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = divInt(int(6.0),int(0.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 8, 4, 2, 8, 2, 8, 9, 2, 5, 1, 5, 5, 6, 4, 8, 1, 6, 4, 2, 5, 5, 1, 1, 6, 1, 7, 4, 0, 9, 5, 9, 9, 8], [2, 1, 5, 3, 1, 5, 4, 2, 2], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 3, 0, 0, 0], [0], [1, 1, 1, 1, 0], [4, 4, 4, 3, 0, 0, 6, 3, 5, 5, 2, 0, 2, 6, 1, 1, 4, 4, 6, 1, 4, 6, 0, 2, 1, 5, 6, 2, 3, 6, 2, 1, 1, 3, 1, 5, 0, 0, 5, 2, 1, 1], [1, 0], [1, 1, 0, 0, 0, 3, 2, 1, 0, 3, 2, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 2, 0, 3, 1, 1, 3, 2, 0, 0, 2, 1, 2, 0, 1, 3, 3, 1, 3, 1, 3, 2, 1, 1, 1, 0, 3, 2, 2, 1, 2, 3, 0, 0, 0, 3, 2, 1, 0, 2, 0, 1, 3, 2, 1, 3, 3, 1, 2, 0, 3, 2, 2, 1, 1, 0, 1, 0, 2, 0, 0, 1, 1, 2, 2, 2, 0, 3, 1, 1, 0, 1, 3, 0, 2, 1, 0, 1, 3, 2, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 3, 2, 0, 3, 1, 2, 0, 3, 0, 2, 3, 0, 2, 0, 2, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 2, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0, 2, 0, 0], [0, 2, 1, 2, 0, 0, 1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 2, 1, 1], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not int(7.0) == int(8.0):{:\\nif True:{:\\nb0 = in1 \\g in1\\n:}else:{:\\nif in1 != min(divInt(int(4.0),in0), max(( ( ( ( abs(mod(int(2.0),int(8.0))) + i0 ) * ( divInt(( i0 - min(int(2.0), int(8.0)) ),min(( res0 * in0 ), ( int(9.0) + ( in2 + int(2.0) ) ))) - min(max(int(5.0), abs(int(1.0))), min(mod(int(5.0),int(5.0)), int(6.0))) ) ) - in2 ) * abs(divInt(( int(4.0) + ( max(i2, i0) * i2 ) ),max(( int(8.0) + res0 ), ( i1 - int(1.0) )))) ), max(( int(6.0) * max(max(int(4.0), mod(i1,max(( mod(int(2.0),int(5.0)) + in1 ), int(5.0)))), in1) ), ( res0 + i1 )))):{:\\nif int(1.0) \\ge int(1.0):{:\\nin1 *= divInt(mod(( res0 - min(int(6.0), int(1.0)) ),i0),int(7.0))\\n:}else:{:\\nb1 = min(i2, ( int(4.0) - i1 )) \\g int(0.0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nif abs(mod(in2,res0)) != i2:{:\\nb0 = ( b0 and b0 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nloopBreak% = 0\\nwhile in0 \\le res0:{:\\ni2 = abs(min(int(9.0), i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = divInt(i1,in0) == i1\\n:}\\nb0 = b0\\nb0 = min(mod(in2,abs(int(5.0))), divInt(i0,min(i0, divInt(min(in2, mod(i2,mod(i1,int(9.0)))),i1)))) == int(98.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 7, 8, 34, 34, 9, 10, 1, 16, 9, 7, 1, 5, 42, 2, 132, 34, 25, 19, 16]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 2, 2, 2, 1, 0, 1, 2, 1, 2, 0], [1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 6, 1, 2, 4, 4, 6, 4, 2, 8, 5, 2, 8, 9, 1, 2, 5, 9, 3, 7, 2, 2, 4, 7, 6, 8, 4, 3, 6, 4, 1, 0, 0, 1, 3, 5, 1, 3, 3, 8, 7, 8, 4, 8, 3, 3, 2, 0, 8, 8, 8, 5, 2, 9, 7, 0, 2, 7, 1, 8, 8, 7, 0, 0, 3, 3, 6], [3, 2, 5, 5, 1, 0, 1, 4], [0, 0, 2], [0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 1, 2, 2, 1], [0, 0, 0], [1, 0, 0], [3, 3, 2, 5, 0, 6, 4, 5, 0, 6, 5, 4, 5, 0, 0, 3, 1, 2, 4, 2, 5, 0, 0, 0, 2, 2, 0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 4, 3, 5, 2, 6, 2, 1, 5, 0, 0, 5, 3, 2, 1, 4, 2, 4, 1, 5, 6, 5, 1, 1, 1, 1, 6, 1, 0, 6, 1, 6, 2, 4, 3, 0, 3], [1, 1], [3, 2, 0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 2, 2, 2, 2, 3, 0, 3, 3, 0, 1, 1, 0, 1, 0, 1, 2, 0, 1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 2, 0, 2, 0, 3, 0, 2, 2, 2, 1, 3, 1, 3, 0, 0, 2, 2, 2, 2, 2, 0, 3, 2, 3, 0, 2, 0, 3, 1, 1, 0, 2, 3, 0, 2, 0, 2, 1, 1, 0, 0, 2, 3, 2, 3, 3, 0, 0, 0, 2, 3, 3, 1, 1, 3, 2, 0, 3, 3, 3, 0, 1, 3, 1, 1, 3, 2, 1, 2, 1, 3, 0, 1, 3, 2, 2, 1, 3, 3, 0, 0, 3, 2, 0, 1, 0, 3, 3, 1, 0, 1, 3, 2, 3, 0, 2, 3, 0, 3, 2, 2, 2, 2, 1, 1, 3, 1, 0, 0, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 3, 1, 2, 3, 0, 2, 3, 0, 0, 2, 0, 3, 2, 0, 0, 0, 1, 1, 3, 3, 1, 0, 0, 0, 2, 3, 2, 0, 1, 0, 2, 3, 3, 2, 3, 3, 1, 1, 3, 3, 1, 3, 3, 1, 3, 2, 3, 1, 2, 2, 2, 1, 1, 1, 3, 1, 0, 3, 2, 2, 2, 1, 1, 0, 0, 1, 3, 2, 1, 1, 1, 3, 2, 0, 1, 0, 1, 2, 1, 1, 1, 3, 1, 1, 3, 0, 3, 0, 1, 0, 2, 2, 3, 0, 3, 1, 3, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [1, 0, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 1, 0, 2, 2, 1, 0, 1, 0, 2, 2, 0, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1, 2, 0], [1, 2, 1, 1, 2, 0, 2, 1, 1, 2, 2, 2, 1, 1, 0, 1, 2, 2, 0, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 2, 1, 2, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nif max(divInt(in0,in0), divInt(divInt(i2,divInt(mod(in2,i0),divInt(int(3.0),min(res0, in1)))),abs(in2))) \\ge i0:{:\\nif ( True and int(4.0) == mod(int(6.0),max(( ( ( ( max(res0, abs(abs(in2))) - int(1.0) ) * int(2.0) ) - in1 ) - int(4.0) ), in2)) ):{:\\nloopBreak% = 0\\nwhile int(4.0) != ( i0 * int(6.0) ):{:\\nloopBreak% = 0\\nwhile i0 != ( ( in0 + ( int(4.0) * ( ( int(2.0) - ( ( int(8.0) - ( i1 * mod(i2,max(in1, ( ( ( int(5.0) * max(int(2.0), abs(i2)) ) * in2 ) - mod(( divInt(( divInt(i0,max(mod(max(i0, ( i0 - max(int(8.0), int(9.0)) )),i2), ( min(i2, ( i0 + ( int(1.0) - int(2.0) ) )) * i0 ))) * i1 ),mod(min(divInt(max(abs(i1), i1),i2), divInt(max(abs(int(5.0)), int(9.0)),abs(divInt(i1,max(max(max(i0, int(3.0)), max(int(7.0), int(2.0))), abs(divInt(int(2.0),( int(4.0) + abs(i1) )))))))),int(7.0))) - max(mod(( int(6.0) * max(max(i1, in1), max(divInt(in0,int(8.0)), in2)) ),max(min(int(4.0), i2), int(3.0))), abs(( max(res0, mod(min(i2, abs(mod(( mod(mod(int(6.0),int(4.0)),abs(int(1.0))) * i1 ),in2))),i0)) - divInt(( mod(int(0.0),int(0.0)) - i0 ),int(1.0)) ))) ),in2) ))) ) ) - mod(int(3.0),int(5.0)) ) ) * max(int(1.0), divInt(min(in0, divInt(max(i2, i1),divInt(in1,min(divInt(i2,in1), i1)))),int(3.0))) ) ) ) - int(3.0) ):{:\\nb0 = abs(abs(int(8.0))) \\g in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nres0 *= in2\\n:}\\ni1 -= i1\\nloopBreak% = 0\\nwhile ( min(( i1 * int(7.0) ), i1) + ( max(max(( min(abs(int(8.0)), int(4.0)) * max(max(int(8.0), max(min(int(3.0), max(( max(int(3.0), ( ( divInt(int(2.0),int(0.0)) + int(8.0) ) * min(int(8.0), res0) )) * max(( divInt(( int(8.0) + int(5.0) ),i1) + i0 ), int(2.0)) ), max(divInt(int(9.0),int(7.0)), int(0.0)))), max(mod(res0,int(2.0)), i1))), int(7.0)) ), ( int(1.0) * int(8.0) )), int(8.0)) - min(int(7.0), int(0.0)) ) ) \\l min(res0, abs(i2)):{:\\nb0 = not not int(0.0) \\g in1\\nif ( ( max(in0, abs(int(3.0))) * min(int(3.0), i0) ) - in0 ) \\le int(6.0):{:\\nb2 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 7, 5, 68, 68, 8, 3, 1, 14, 8, 6, 3, 3, 72, 2, 275, 73, 64, 41, 34]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 1, 0, 0, 2, 2, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 0, 3, 8, 2, 7, 3, 8, 0, 3, 6, 6, 3, 2, 4, 4, 2, 0, 5, 1, 0, 2, 0, 0, 1, 2, 6, 0, 9, 6, 6, 0, 8, 8, 5, 3, 0, 8, 9, 4, 6, 0, 3, 6, 2, 1, 5, 2, 3, 5, 1, 5, 8, 7, 4, 9, 0, 6, 8, 5, 3, 0, 4, 3, 9], [1, 0, 2, 2, 4, 5, 4, 0, 5, 4, 4, 4], [2, 0, 1, 2, 2, 1], [0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 1, 3, 0, 2, 0, 2], [0, 1], [0, 0, 1, 1, 0, 0], [0, 5, 1, 3, 0, 3, 3, 6, 1, 1, 6, 0, 4, 2, 6, 1, 1, 4, 3, 4, 2, 3, 0, 3, 2, 0, 0, 0, 1, 4, 4, 6, 5, 4, 4, 1, 4, 6, 5, 6, 4, 0, 1, 6, 4, 3, 4, 6, 5, 1, 6, 5, 4, 1, 2, 6, 2, 0, 5, 4, 3, 5, 0], [1, 1, 0, 1], [0, 3, 0, 1, 3, 1, 2, 2, 3, 1, 0, 1, 3, 2, 0, 2, 2, 2, 3, 2, 2, 0, 2, 1, 2, 1, 3, 0, 3, 0, 1, 1, 1, 1, 2, 2, 3, 0, 1, 2, 0, 1, 3, 0, 2, 2, 0, 1, 1, 2, 2, 1, 0, 1, 3, 2, 0, 0, 3, 1, 1, 3, 1, 2, 1, 0, 3, 1, 2, 1, 1, 2, 2, 3, 3, 1, 0, 2, 1, 1, 1, 2, 3, 0, 2, 1, 3, 0, 0, 2, 3, 2, 2, 3, 2, 1, 2, 1, 1, 0, 1, 3, 2, 2, 3, 3, 0, 3, 2, 3, 0, 3, 0, 0, 1, 3, 0, 0, 2, 0, 1, 1, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 2, 1, 3, 2, 0, 1, 3, 2, 0, 0, 0, 2, 3, 2, 3, 0, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 2, 0, 2, 0, 1, 2, 2, 3, 3, 2, 0, 2, 2, 2, 0, 3, 1, 1, 3, 3, 0, 1, 2, 3, 1, 0, 0, 0, 1, 3, 3, 0, 0, 3, 1, 1, 1, 2, 0, 3, 1, 1, 2, 3, 2, 3, 2, 2, 0, 2, 3, 0, 1, 1, 2, 0, 3, 1, 2, 2, 0, 2, 1, 2, 0, 0, 0, 0, 0, 1, 0, 1, 2, 3, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 2, 2, 2, 1, 0, 1, 2, 2, 2, 0, 0, 2, 2, 1, 2, 2, 0, 0, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 0, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0, 1, 1, 0, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 1, 0, 0, 1, 2, 2, 1, 1, 1, 2, 2, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += in2\\nloopBreak% = 0\\nwhile min(i1, int(1.0)) \\g min(int(3.0), ( divInt(max(int(0.0), in0),int(3.0)) + min(( i0 * ( mod(( min(( ( in0 * mod(int(8.0),divInt(int(2.0),max(in0, abs(res0)))) ) + int(7.0) ), int(3.0)) * int(8.0) ),int(0.0)) * ( ( abs(i1) + int(3.0) ) - divInt(i1,int(6.0)) ) ) ), abs(res0)) )):{:\\nif divInt(mod(i0,int(6.0)),int(3.0)) \\l divInt(( int(2.0) * in1 ),int(4.0)):{:\\nif not True:{:\\nb2 = max(divInt(i2,res0), min(int(4.0), int(2.0))) == max(int(0.0), ( int(5.0) + i1 ))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif abs(int(1.0)) == ( int(0.0) - int(2.0) ):{:\\nloopBreak% = 0\\nwhile False:{:\\nif ( mod(divInt(abs(abs(int(0.0))),i1),( int(0.0) - int(1.0) )) \\le int(2.0) and b0 ):{:\\nif ( min(in1, divInt(int(6.0),min(in0, in1))) * mod(abs(mod(( abs(mod(int(0.0),( int(9.0) - int(6.0) ))) * i2 ),int(6.0))),max(( ( abs(abs(in0)) - min(( min(i0, min(in0, i2)) + int(0.0) ), abs(i0)) ) + i0 ), ( i0 - int(8.0) ))) ) != int(8.0):{:\\nloopBreak% = 0\\nwhile int(5.0) \\le ( int(3.0) - divInt(int(0.0),( i1 + int(8.0) )) ):{:\\nb1 = in1 \\l int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( int(4.0) + min(( in1 - int(6.0) ), max(( res0 * in2 ), in1)) ) != mod(abs(( max(in1, ( divInt(( int(0.0) * int(3.0) ),int(6.0)) - i1 )) + ( int(2.0) * in1 ) )),int(1.0)):{:\\nres0 -= ( in2 * ( res0 + int(5.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = divInt(( abs(min(divInt(i0,( divInt(divInt(i1,max(int(2.0), int(3.0))),min(min(res0, int(5.0)), ( abs(int(1.0)) - in1 ))) + in0 )), in1)) + int(5.0) ),max(max(res0, in2), min(int(8.0), int(7.0))))\\n:}\\ni1 -= int(4.0)\\nif ( res0 * max(int(9.0), int(0.0)) ) \\le ( min(( min(( ( in2 * ( max(in1, int(6.0)) - int(8.0) ) ) - ( i1 - abs(int(5.0)) ) ), mod(( i2 * ( int(3.0) * divInt(res0,i2) ) ),i0)) + in2 ), in1) - int(0.0) ):{:\\nloopBreak% = 0\\nwhile not in0 \\le int(4.0):{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = not ( max(in2, i0) + int(3.0) ) \\le int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 19, 19, 11, 8, 66, 66, 12, 6, 1, 20, 12, 8, 2, 6, 63, 4, 237, 67, 45, 46, 24]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 1, 1, 1], [4, 4, 2, 2, 9, 7], [5, 5], [2], [], [1, 1], [0, 0], [], [], [], [3, 1, 3, 3, 3, 1, 0, 3], [], [3, 2, 0, 3, 3, 2, 1, 2, 2, 1, 1, 0, 2, 1, 2, 3, 0, 1, 0, 0, 2, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0], [2, 0, 1, 1], [0, 0, 2], [0, 1, 1, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(divInt(in0,min(max(mod(int(4.0),mod(mod(int(4.0),int(2.0)),i1)), ( int(2.0) + ( max(in0, int(9.0)) + in0 ) )), in0))) != ( i1 * i0 ):{:\\nb2 = int(7.0) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 6, 6, 2, 1, 0, 2, 2, 0, 0, 0, 8, 0, 25, 7, 4, 3, 4]}, {"genotype": [[0], [1], [0], [], [0], [0, 1], [7, 6], [5], [0], [], [1], [0], [], [], [], [2], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(76.0) != i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1], [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 5, 4, 8, 0, 5, 2, 5, 5, 5, 1, 0, 2, 5, 7, 7, 0, 7, 9, 6, 8, 8, 6, 0, 6, 7, 7, 3, 3, 4, 0, 1, 3, 5], [2, 1, 4, 0, 3, 1, 0, 1, 5, 1], [1, 0, 2, 1, 2, 1, 2, 1], [0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 3, 2, 0, 1, 3, 0, 2, 3, 3, 2, 0], [0, 0], [1, 0, 0, 1], [2, 3, 0, 3, 1, 5, 5, 5, 6, 2, 3, 2, 5, 4, 5, 2, 5, 3, 2, 0, 5, 1, 3, 4, 3, 0, 0, 6, 5, 0, 1, 0, 3, 3, 2, 0, 6, 4], [1, 0, 0, 1], [0, 1, 1, 3, 0, 2, 3, 2, 0, 0, 0, 3, 0, 2, 1, 1, 2, 2, 3, 3, 0, 2, 2, 2, 0, 1, 0, 2, 3, 0, 3, 0, 2, 0, 0, 0, 1, 0, 2, 1, 3, 2, 0, 0, 3, 1, 1, 1, 3, 0, 3, 0, 3, 3, 0, 3, 0, 2, 0, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 3, 3, 3, 1, 0, 2, 1, 0, 3, 3, 1, 0, 0, 2, 0, 3, 1, 1, 2, 1, 1, 2, 0, 1, 2, 2, 3, 1, 1, 1, 3, 1, 3, 1, 2, 3, 1, 2, 2, 3, 2, 2, 1, 0, 3, 3, 0, 1, 1, 3, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 2, 0, 2, 2, 1, 0], [2, 0, 2, 2, 1, 1, 2, 1, 2, 1, 1, 0, 2], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb1 = not i2 == int(5.0)\\nb0 = ( not b2 and True )\\n:}else:{:\\nin0 *= int(9.0)\\nif max(i0, divInt(min(mod(in0,i1), in2),abs(in2))) \\g mod(int(5.0),int(4.0)):{:\\nin2 = mod(( abs(abs(res0)) + ( ( divInt(i2,int(8.0)) * in0 ) * divInt(min(i2, max(in2, divInt(in1,in2))),i2) ) ),int(0.0))\\n:}\\n:}\\nif in2 \\le divInt(int(5.0),max(( in0 - i2 ), min(int(2.0), int(5.0)))):{:\\ni0 = int(5.0)\\nif ( b1 and min(in2, max(i1, min(min(in0, max(in1, ( in0 - int(5.0) ))), divInt(int(1.0),int(0.0))))) \\l i0 ):{:\\ni0 *= int(2.0)\\n:}else:{:\\nb2 = ( int(5.0) - res0 ) \\ge int(7.0)\\n:}\\n:}\\nloopBreak% = 0\\nwhile not min(max(abs(int(7.0)), in2), mod(int(0.0),i0)) \\g abs(abs(int(7.0))):{:\\nloopBreak% = 0\\nwhile i1 \\l i0:{:\\nb1 = ( ( in0 * max(int(9.0), int(6.0)) ) \\g divInt(int(8.0),int(8.0)) or ( mod(in0,int(6.0)) != mod(( max(int(0.0), int(6.0)) - int(7.0) ),max(int(7.0), abs(int(3.0)))) and ( min(int(3.0), ( mod(abs(mod(( int(4.0) - i2 ),abs(max(i0, int(0.0))))),int(1.0)) + min(int(3.0), int(5.0)) )) * res0 ) \\g in1 ) )\\nb2 = not b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 6, 9, 35, 35, 10, 8, 4, 23, 10, 13, 2, 4, 38, 4, 123, 26, 28, 13, 15]}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 5, 6, 6, 9, 8, 3], [3], [], [], [0, 0, 1], [0], [2, 2], [], [0], [6, 2, 2, 0, 0, 5, 5, 1, 6, 0, 0], [0, 0], [0, 3, 1, 3, 2, 0, 2, 0, 3, 1, 0, 3, 3, 2, 3, 1, 3, 3, 0, 1, 3, 2, 2, 3, 0, 0, 1, 0, 3, 0, 3, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 2, 2, 2, 0, 2], [0, 1, 1], [1, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = i2\\nif not not min(int(8.0), max(( i2 + mod(i0,max(int(5.0), i0)) ), max(min(( min(int(5.0), max(abs(in2), int(6.0))) - abs(divInt(( abs(in2) - i1 ),int(6.0))) ), res0), min(i0, abs(int(9.0)))))) \\ge int(8.0):{:\\ni0 = int(3.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 8, 8, 1, 0, 0, 3, 1, 2, 0, 1, 11, 2, 34, 5, 12, 3, 2]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 0, 1, 1], [1, 0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 2, 0, 5, 0, 9, 9, 1, 8, 4, 9, 1, 8, 0, 3, 9, 2, 1, 5, 3, 4, 7, 9, 9, 6, 1, 6, 6, 4, 1, 8, 0, 9, 9, 4, 8, 5, 2, 3, 6, 7, 2, 7, 0, 2, 6, 7, 4, 0, 3, 3, 7, 6, 9, 8, 1, 3, 2, 9, 8, 1, 9, 3, 8, 2, 0, 3, 7, 0, 8, 4, 1, 1, 2, 8, 8, 6, 9, 6, 5, 3, 5, 2, 5, 6, 6, 8, 7, 0, 0, 2, 5, 9, 0, 9, 2, 6, 5, 8, 5, 3, 1, 2, 3, 3, 4, 7, 0, 7, 4, 1, 1, 3, 1, 7, 9, 7, 9, 5, 8, 9, 0, 8, 1, 1, 0, 7, 2, 9, 6, 3, 5, 5, 1, 9, 7, 3, 8, 2, 9, 9, 8, 5, 8, 9], [1, 0], [0, 2, 2], [0], [0, 1, 0, 0, 1], [0, 0], [3, 0, 0], [], [1], [3, 6, 0, 6, 2, 0, 5, 3, 2, 0, 4, 6, 5, 3, 4, 4, 6, 1, 2, 1, 4, 5, 3, 5, 0, 6, 5, 0, 2, 5, 2, 0, 6, 5, 2, 5, 1, 2, 4, 1, 6, 2, 3, 0, 0, 2, 3, 6, 3, 5, 6, 4, 6, 3, 5, 3, 0, 2, 1, 3, 2, 1, 0, 2, 5, 5, 0, 0, 3, 1, 1, 6, 2, 6, 3, 6, 4, 6, 0, 1, 2, 5, 3, 0, 3, 1, 3, 4, 4, 6, 0, 1, 2, 6, 6, 3, 0, 3, 5, 4, 0, 2, 0, 5, 0, 0, 0, 3, 6, 4, 3, 0, 4, 5, 2, 1, 0, 5, 0, 6, 1, 4, 5, 3, 3, 3, 4, 6, 0, 5, 6, 0, 6, 5, 6, 2, 3, 0, 4, 4, 6, 6, 6, 0, 3, 6, 4, 6, 6, 2, 6, 2, 4, 0, 2, 2, 4], [1, 0], [3, 0, 1, 1, 2, 0, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 1, 1, 3, 0, 3, 3, 0, 2, 2, 0, 2, 3, 2, 3, 2, 0, 2, 0, 0, 1, 2, 1, 3, 3, 0, 2, 3, 3, 0, 2, 3, 1, 2, 3, 1, 3, 0, 3, 0, 0, 3, 0, 1, 1, 3, 1, 3, 2, 2, 2, 2, 0, 2, 2, 3, 1, 0, 0, 0, 2, 1, 3, 0, 0, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 1, 2, 3, 1, 2, 1, 2, 0, 0, 3, 3, 2, 1, 3, 2, 0, 3, 3, 1, 0, 1, 2, 3, 1, 2, 1, 0, 1, 1, 1, 3, 1, 0, 0, 2, 3, 3, 1, 2, 1, 2, 2, 3, 2, 2, 1, 0, 1, 0, 0, 2, 0, 2, 2, 2, 3, 0, 1, 0, 3, 2, 1, 3, 3, 1, 1, 3, 1, 3, 2, 3, 0, 3, 2, 1, 2, 2, 0, 2, 2, 1, 3, 2, 1, 3, 3, 0, 3, 2, 2, 2, 3, 3, 0, 1, 2, 0, 2, 2, 3, 3, 1, 3, 1, 3, 1, 3, 2, 1, 0, 2, 3, 3, 2, 2, 2, 1, 2, 3, 2, 0, 1, 2, 0, 2, 3, 1, 3, 0, 0, 0, 2, 1, 2, 0, 1, 2, 1, 1, 3, 0, 0, 2, 2, 1, 3, 0, 2, 0, 2, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 1, 3, 1, 2, 1, 3, 2, 2, 1, 3, 1, 2, 3, 3, 1, 3, 2, 1, 3, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 2, 1, 3, 2, 0, 2, 2, 3, 1, 3, 0, 3, 1, 2, 3, 3, 3, 2, 0, 3, 1, 1, 3, 2, 0, 1, 3, 0, 2, 2, 0, 0, 3, 3, 0, 0, 2, 2, 0, 3, 0, 3, 2, 3, 2, 3, 2, 1, 3, 0, 3, 2, 2, 2, 2, 2, 3, 0, 3, 1, 3, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0, 2, 2, 1, 0, 3, 0, 3, 2, 3, 3, 0, 1, 1, 2, 2, 3, 3, 2, 1, 2, 3, 0, 1, 2, 1, 2, 3, 3, 0, 3, 0, 2, 2, 3, 0, 0, 0, 3, 3, 1, 1, 2, 2, 0, 0, 1, 1, 0, 3, 2, 1, 2, 2, 2, 0, 2, 2, 1, 0, 3, 1, 0, 2, 3, 3, 3, 3, 0, 3, 1, 1, 0, 3, 1, 2, 0, 0, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 3, 3, 1, 3, 1, 3, 3, 0, 0, 0, 1, 0, 3, 1, 3, 2, 0, 0, 1, 2, 2, 0, 2, 2, 2, 0, 2, 1, 3, 2, 0, 3, 2, 3, 1, 0, 1, 2, 0, 1, 3, 2, 0, 0, 3, 0, 3, 3, 3, 1, 0, 2, 2, 2, 1, 3, 2, 2, 3, 1, 0, 0, 3, 2, 2, 0, 2, 2, 1, 2, 1, 1, 0, 0, 3, 0, 2, 3, 1, 3, 3, 1, 2, 1, 3, 0, 3, 3, 1, 1, 3, 2, 3, 2, 0, 0, 0, 0, 2, 1, 1, 2, 2, 2, 1, 0, 2, 0, 2, 2, 2, 2, 3, 0, 2, 2, 0, 0, 0, 1, 2, 3, 0, 0, 2, 3, 0, 3, 0, 3, 0, 3, 3, 0, 0, 1, 3, 1, 3, 0, 0, 2, 3, 3, 0, 2, 0, 3, 1, 0, 2, 3, 1, 3, 0, 3, 2, 1, 2, 3, 2, 1, 2, 1, 1, 3, 3, 2, 3, 3, 1, 2, 0, 1, 1, 2, 2, 0, 1, 0, 3, 2, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0], [2, 0, 1, 1, 0, 0, 1, 2, 2, 2, 2, 0, 2, 0, 2, 1, 1, 1, 1, 0, 2, 2, 2, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 2, 1, 0, 2, 0, 2, 0, 2, 2, 0, 2, 2, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 2, 2, 0, 2, 1, 1, 1, 0, 2, 1, 2, 1, 0, 2, 2, 0, 2, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 1, 1, 2, 0, 1, 0, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 0, 1, 2, 1, 0, 2, 2, 2, 1, 1, 0, 1, 2, 0, 2, 2, 0, 0, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 2, 0, 1, 1, 0, 1, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 0, 1, 2, 1, 2, 0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 2], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 141, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( abs(in0) \\g int(7.0) and b0 ):{:\\nif b2:{:\\nres0 *= int(7.0)\\n:}else:{:\\ni0 = mod(res0,( min(int(2.0), max(( mod(i2,int(0.0)) * int(5.0) ), int(0.0))) + int(9.0) ))\\n:}\\nb2 = int(9.0) \\l max(i0, min(min(in2, mod(divInt(in0,( max(mod(abs(divInt(i2,( i0 - in1 ))),int(1.0)), divInt(int(8.0),abs(abs(res0)))) * ( abs(min(in2, divInt(abs(int(4.0)),mod(min(int(9.0), abs(in0)),max(in1, in1))))) - max(res0, int(1.0)) ) )),int(8.0))), max(int(0.0), max(divInt(mod(( ( i1 + ( ( min(int(3.0), i2) * i1 ) * in1 ) ) * ( int(9.0) - abs(in2) ) ),in0),int(2.0)), mod(int(1.0),abs(mod(abs(max(mod(max(mod(int(5.0),divInt(min(int(3.0), ( int(4.0) - divInt(in2,i0) )),max(max(( int(7.0) + max(( res0 - max(min(int(9.0), in2), int(9.0)) ), divInt(min(int(6.0), ( int(1.0) * i0 )),int(6.0))) ), int(6.0)), int(4.0)))), max(int(1.0), i2)),in2), ( abs(max(int(8.0), divInt(int(0.0),divInt(( min(mod(divInt(int(9.0),i2),int(9.0)), i0) + res0 ),divInt(in2,mod(( divInt(abs(i2),int(4.0)) * in2 ),min(( int(8.0) * abs(min(int(5.0), int(2.0))) ), abs(int(3.0))))))))) + abs(( min(i1, abs(( int(6.0) + mod(( i2 - ( mod(int(7.0),abs(( int(2.0) * max(min(in1, max(mod(divInt(divInt(abs(min(i1, int(7.0))),( res0 - ( ( max(min(int(0.0), max(int(2.0), min(int(6.0), min(( int(7.0) - i2 ), ( min(abs(divInt(( mod(int(4.0),divInt(min(mod(in0,int(0.0)), ( i0 - divInt(max(int(3.0), min(i0, i2)),in0) )),mod(int(3.0),divInt(res0,int(7.0))))) - ( int(6.0) * int(9.0) ) ),min(in0, in2))), ( ( int(8.0) - abs(res0) ) * mod(in1,divInt(res0,int(1.0))) )) * int(3.0) ))))), in0) * ( in2 + in0 ) ) * int(2.0) ) )),i0),mod(int(9.0),abs(int(8.0)))), ( int(1.0) * min(( mod(int(9.0),abs(int(3.0))) + ( max(max(int(8.0), max(mod(int(2.0),min(i2, int(0.0))), int(3.0))), ( mod(abs(int(7.0)),int(0.0)) + max(int(8.0), ( int(4.0) + abs(( i1 + mod(( max(int(1.0), min(in0, abs(int(1.0)))) + ( abs(min(abs(( i2 - abs(int(2.0)) )), int(8.0))) * max(( i1 - int(8.0) ), max(i0, ( ( i2 - in2 ) * max(abs(in2), i0) ))) ) ),( ( i0 - max(in0, max(( min(( max(( int(6.0) * max(i1, min(divInt(divInt(( mod(( abs(i1) + abs(int(9.0)) ),min(int(6.0), int(5.0))) - divInt(divInt(abs(abs(min(abs(abs(abs(int(3.0)))), int(5.0)))),res0),i2) ),res0),mod(divInt(int(2.0),in0),min(res0, min(( abs(min(in1, int(5.0))) - int(6.0) ), ( mod(max(max(( int(6.0) + divInt(max(res0, int(8.0)),( int(7.0) - divInt(min(min(i0, min(i1, mod(( max(i2, in2) + in0 ),max(min(int(0.0), int(0.0)), mod(mod(i0,in0),int(2.0)))))), int(5.0)),i1) )) ), abs(divInt(int(9.0),divInt(mod(( in0 * ( divInt(int(0.0),in1) + abs(int(9.0)) ) ),in1),divInt(min(abs(max(min(res0, min(int(2.0), int(6.0))), i0)), min(int(5.0), mod(i1,i2))),res0))))), max(res0, int(8.0))),in0) + max(i0, int(5.0)) ))))), in0)) ), in2) * in1 ), i0) * int(3.0) ), i2)) ) * divInt(i0,int(1.0)) )) )) )) )) + abs(abs(int(2.0))) ) ), max(int(3.0), max(min(in2, i0), i0))) ))), int(3.0)) ))) + i0 ) ),max(int(4.0), abs(divInt(in0,res0)))) ))) + int(7.0) )) ))),( ( in1 + ( divInt(mod(in0,divInt(int(0.0),abs(mod(i0,abs(( min(int(7.0), in1) - int(4.0) )))))),( in2 + int(1.0) )) + min(divInt(i2,i1), max(i0, min(abs(max(int(1.0), in2)), divInt(divInt(( int(3.0) * max(divInt(( min(int(1.0), i0) - res0 ),max(mod(divInt(i1,( ( int(7.0) * ( int(9.0) - int(7.0) ) ) - in1 )),in2), min(in0, ( abs(int(9.0)) - max(max(int(5.0), mod(int(8.0),abs(in0))), min(max(int(9.0), int(0.0)), min(( abs(( in0 - in1 )) - res0 ), i0))) )))), divInt(int(8.0),int(1.0))) ),( divInt(mod(int(1.0),in2),( res0 * divInt(mod(( ( abs(i0) * ( divInt(res0,in2) + res0 ) ) - int(0.0) ),( abs(i2) * in0 )),( abs(i0) - max(in1, max(in1, min(min(res0, res0), int(7.0)))) )) )) * min(int(2.0), min(res0, i0)) )),( min(max(in0, ( res0 + abs(int(9.0)) )), in1) - divInt(max(int(6.0), max(res0, min(( int(3.0) + ( min(( int(5.0) + mod(int(5.0),int(1.0)) ), max(max(divInt(min(max(int(9.0), divInt(res0,int(7.0))), int(3.0)),( mod(i2,int(8.0)) * res0 )), max(( int(2.0) - int(9.0) ), int(9.0))), ( mod(( int(8.0) + i2 ),int(5.0)) + in1 ))) * ( ( i0 - i2 ) + int(8.0) ) ) ), i2))),int(9.0)) ))))) ) ) * in1 ))))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 146, 146, 2, 3, 1, 5, 2, 3, 0, 1, 157, 2, 649, 179, 169, 92, 88]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 8, 6, 9, 9, 8, 0, 5, 3, 0, 1, 6, 6, 4, 0, 7, 9, 6, 0, 9, 4], [], [], [], [], [], [], [], [], [0, 0, 4, 0, 6, 0, 0, 1, 0, 1, 0, 5, 3, 2, 3, 0, 6, 1, 3, 6, 2], [1, 0], [2, 2, 2, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 0, 3, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 2, 2, 3, 3, 0, 0, 2, 3, 0, 2, 1, 0, 1, 1, 1, 2, 0, 3, 2, 3, 3, 3, 0, 2, 0, 3, 3, 3, 2, 1, 3, 1, 2, 3, 1, 3, 3, 1, 3, 3, 0, 2, 1, 0, 3, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 3, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 2, 1, 2, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0], [2, 0, 0, 2, 2, 1, 1, 0, 0, 2, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= ( divInt(divInt(min(i0, mod(max(( mod(int(9.0),in1) + mod(divInt(i0,min(res0, int(8.0))),int(8.0)) ), i0),mod(mod(divInt(( i0 + min(mod(mod(max(min(i1, i0), ( max(i1, ( int(6.0) * i0 )) * int(9.0) )),int(9.0)),int(8.0)), ( in2 - abs(mod(max(abs(abs(in0)), ( i2 - abs(max(min(( int(0.0) + max(int(5.0), ( max(int(3.0), min(min(int(0.0), abs(max(in0, ( int(1.0) + i0 )))), min(int(6.0), res0))) * int(6.0) )) ), int(4.0)), int(0.0))) )),i1)) )) ),int(7.0)),int(9.0)),int(6.0)))),int(0.0)),int(9.0)) - min(in0, res0) )\\ni2 = int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 21, 2, 85, 22, 22, 11, 12]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 2, 2, 1, 1, 2, 0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 8, 9, 5, 1, 6, 0, 5, 0, 7, 9, 8], [1, 4, 4, 0], [1, 1, 0, 1, 0], [1], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [0, 3, 0, 0, 2], [], [1, 1, 1], [0, 5, 6, 3, 2, 2, 4, 0, 3, 4, 5, 5, 3, 6, 5, 5, 1, 1, 4, 6, 2], [1, 0, 1, 1, 1], [2, 1, 1, 0, 1, 2, 1, 0, 2, 0, 1, 0, 0, 2, 2, 2, 3, 1, 1, 2, 3, 0, 1, 0, 0, 2, 0, 1, 1, 3, 3, 3, 0, 3, 0, 0, 1, 0, 1, 0, 3, 3, 2, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0, 2, 1], [0, 1, 1, 1, 2, 2], [1, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(int(5.0),int(1.0)) \\g i0\\nin2 += int(8.0)\\nif b1:{:\\nif ( ( int(9.0) - res0 ) \\le divInt(in0,int(5.0)) or b0 ):{:\\nloopBreak% = 0\\nwhile i2 \\le i2:{:\\nin1 = mod(mod(divInt(min(int(1.0), int(6.0)),mod(max(i0, int(0.0)),in0)),in1),mod(in2,int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = b0\\n:}\\nif not int(0.0) \\l min(min(max(in2, min(in0, res0)), int(7.0)), in2):{:\\nin2 -= int(9.0)\\n:}else:{:\\ni1 -= i1\\n:}\\n:}else:{:\\nin1 *= abs(max(( int(8.0) * res0 ), i2))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 4, 7, 13, 13, 4, 5, 1, 9, 4, 5, 0, 3, 21, 5, 46, 9, 8, 6, 7]}, {"genotype": [[0], [1], [1], [], [0], [1], [4], [0], [2], [1], [0, 0, 0, 1], [0], [3, 2, 1], [0], [], [4, 6], [], [1, 3, 0, 0], [], [0], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( not True or int(4.0) \\l min(in1, res0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 4, 1, 3, 1, 0, 2, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1], [2, 0, 1, 0, 1, 1, 0], [0], [1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 7, 9, 8, 6, 1, 5, 5, 1, 0, 7], [0, 1], [0], [], [1, 1], [0, 0], [], [], [0], [3, 6, 2, 4, 2, 0, 3, 6, 5, 1, 1, 6, 2, 1, 0], [1, 0, 0, 1, 1], [1, 0, 2, 1, 3, 2, 1, 1, 3, 1, 2, 2, 0, 2, 0, 2, 0, 1, 0, 1, 1, 2, 3, 0, 0, 3, 3, 3, 0, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0], [2, 2, 1, 0, 0, 1], [0, 1, 2, 1, 1], [1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) \\l in0:{:\\nres0 += mod(int(7.0),abs(mod(int(9.0),int(8.0))))\\n:}\\ni2 = abs(int(6.0))\\nin1 = mod(divInt(i2,( i0 - divInt(in0,int(1.0)) )),res0)\\nin2 *= int(5.0)\\ni1 -= int(51.0)\\nb0 = ( max(i1, res0) - min(min(max(i2, i1), int(0.0)), int(7.0)) ) \\g i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 11, 11, 2, 1, 0, 2, 2, 0, 0, 1, 15, 5, 33, 7, 6, 5, 5]}, {"genotype": [[0], [1], [0], [], [1], [1], [4], [], [], [], [], [], [], [], [], [0], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [2, 1, 2, 1, 0, 2, 0, 1, 1, 0], [1, 0, 1], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 6, 1, 5, 5, 1, 3, 6, 8, 8, 6, 0, 3, 6, 7, 8, 7, 8, 2, 0, 0, 4, 1, 4, 8, 9, 4, 6, 0, 0, 8, 0, 3, 1, 8, 9, 8, 5, 7, 8, 4, 8, 3], [3, 1, 4, 5, 2, 4, 4], [1, 0, 0, 1, 0, 0, 1], [1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 3, 1, 0, 2, 0], [1], [1], [0, 5, 1, 3, 6, 4, 0, 4, 3, 5, 4, 6, 4, 5, 6, 0, 3, 6, 6, 6, 1, 5, 5, 6, 5, 3, 4, 3, 5, 0, 2, 1, 6, 0, 5, 5, 3, 4, 4, 2], [1, 1], [3, 2, 2, 2, 1, 0, 2, 1, 1, 1, 2, 0, 1, 2, 0, 1, 2, 1, 1, 1, 3, 3, 2, 2, 0, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 0, 2, 0, 1, 2, 3, 0, 2, 2, 3, 3, 1, 3, 3, 2, 0, 1, 0, 1, 2, 2, 1, 2, 0, 2, 1, 3, 3, 1, 1, 1, 3, 0, 0, 1, 3, 2, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 1, 0, 1, 0, 0, 3, 1, 2, 3, 3, 2, 1, 0, 0, 2, 0, 0, 1, 2, 2, 3, 2, 3, 2, 0, 2, 1, 2, 1, 1, 2, 1, 3, 0, 0, 1, 1, 2, 2, 1, 2, 3, 0, 1, 0, 1, 2, 3, 3, 2, 0, 2, 0, 3, 0, 0, 1, 2, 0, 2, 1, 3, 1, 2, 1, 3, 2, 1, 0, 3, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 2, 0, 2, 2, 1, 2, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 2], [0, 0, 1, 0, 0, 2, 2, 1, 1, 0, 2, 2, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(divInt(( ( int(6.0) + i0 ) + ( int(1.0) - int(6.0) ) ),int(1.0)), ( in2 + int(5.0) )) \\ge ( i1 + int(5.0) ):{:\\nin0 *= divInt(int(1.0),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not int(6.0) \\g max(min(( divInt(res0,mod(int(8.0),divInt(in1,int(8.0)))) * i0 ), ( int(6.0) - int(0.0) )), mod(in1,mod(in0,int(3.0)))):{:\\nb1 = ( mod(max(in2, ( divInt(max(min(int(6.0), max(min(( in1 - int(7.0) ), res0), int(8.0))), mod(divInt(int(7.0),divInt(in1,( int(8.0) + abs(min(int(2.0), int(0.0))) ))),int(0.0))),abs(in2)) * res0 )),int(4.0)) \\le abs(divInt(max(( i0 * int(1.0) ), in0),( divInt(int(4.0),res0) * res0 ))) or not divInt(res0,int(8.0)) != i1 )\\nb0 = ( False or b0 )\\nloopBreak% = 0\\nwhile not b1:{:\\nb0 = int(9.0) == in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 -= res0\\n:}else:{:\\nb0 = abs(int(4.0)) \\le ( abs(min(divInt(int(6.0),in2), in0)) + ( in1 + in0 ) )\\nb1 = int(0.0) \\le mod(( max(divInt(min(( in2 + ( int(0.0) - mod(int(8.0),int(0.0)) ) ), ( int(3.0) + max(i0, i2) )),int(1.0)), int(8.0)) - mod(mod(int(9.0),mod(min(i1, int(8.0)),res0)),int(5.0)) ),divInt(min(min(mod(i0,divInt(in2,abs(in2))), in0), int(7.0)),divInt(in1,( int(8.0) + max(int(4.0), divInt(int(8.0),max(( int(3.0) - in1 ), abs(i2)))) ))))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 44, 44, 7, 7, 2, 15, 7, 8, 1, 1, 40, 2, 155, 47, 26, 22, 27]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 1, 2, 1, 1], [0, 0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 4, 4, 5, 3, 9, 0, 8, 3, 6, 0, 1, 8, 1, 6], [2, 2, 2], [], [1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0], [3, 3, 2, 3, 1, 1], [0, 0], [0, 1], [5, 0, 6, 4, 1, 0, 6, 6, 4, 3, 1, 0, 1, 2, 3, 3, 5, 2], [0, 1, 0], [3, 0, 2, 2, 0, 2, 2, 0, 2, 2, 3, 1, 1, 3, 0, 2, 1, 0, 0, 1, 0, 2, 2, 2, 2, 0, 0, 3, 1, 3, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 2, 1, 2, 3, 1, 0, 3, 2, 0, 0, 2, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [2, 0, 1, 1, 0, 0, 0], [1, 2, 0, 2, 0, 2, 2, 1, 2, 0, 2, 1], [1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(in2) == ( mod(i0,( ( res0 - ( ( min(int(5.0), int(8.0)) * max(in1, ( int(4.0) + i1 )) ) * i0 ) ) + int(4.0) )) * res0 ) or ( not mod(( ( mod(res0,in1) * max(int(5.0), min(int(3.0), int(9.0))) ) - int(0.0) ),int(8.0)) == in0 and ( True or int(3.0) == ( int(6.0) * int(0.0) ) ) ) ):{:\\ni1 = int(1.0)\\nif True:{:\\ni0 += ( int(8.0) * ( min(int(1.0), i1) - min(mod(i2,in0), mod(int(6.0),in0)) ) )\\n:}else:{:\\nin2 = i2\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 16, 16, 3, 0, 3, 9, 3, 6, 2, 2, 18, 3, 54, 16, 7, 12, 5]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1], [7], [], [0], [], [0], [], [0], [], [], [2, 1], [1], [3, 1, 0], [], [1], [0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\ni2 += max(int(7.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [0, 1, 1], [3, 7, 2], [5], [2], [], [1], [0], [], [], [], [2, 0], [0], [0, 1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = i0\\nb2 = int(37.0) != int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1], [4], [], [1, 0], [], [0], [], [0], [], [], [3, 4], [0], [2, 3, 1, 0], [0], [2], [2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( abs(int(4.0)) * in1 )\\nb1 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 4, 1, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [5, 1, 1], [4], [2], [], [0, 1], [0], [2], [], [], [4], [], [2, 1, 1, 3, 1, 0], [1], [0], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not mod(int(5.0),int(1.0)) \\le min(int(1.0), in1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 6, 1, 1, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 5], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 1, 0, 1, 0, 2, 2, 1, 2, 0, 0], [1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 2, 6, 1, 9, 0, 3, 4, 2, 7, 3, 1, 6, 7, 5, 6, 6, 4, 2, 0, 7, 4, 9, 1, 1, 9, 8, 3, 4, 1, 4, 3, 2, 1], [5, 2, 3, 4, 2, 0, 5], [1, 1, 2, 0, 0, 1], [1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 2, 0, 2, 3, 1], [0, 1], [0, 0], [5, 6, 4, 2, 3, 0, 6, 5, 2, 5, 4, 4, 2, 3, 3, 0, 6, 4, 2, 1, 5, 1, 0, 3, 0, 1, 1, 4, 2, 0, 4, 2, 3, 4, 3, 4, 5, 5, 4, 2, 3, 5, 6, 1, 2, 6], [1, 1, 0], [3, 0, 2, 2, 1, 3, 2, 0, 2, 0, 0, 3, 0, 3, 2, 1, 0, 3, 2, 2, 3, 1, 2, 0, 3, 1, 2, 3, 1, 2, 0, 1, 1, 0, 3, 1, 3, 1, 0, 0, 3, 0, 2, 3, 0, 2, 2, 0, 3, 3, 0, 0, 1, 1, 2, 0, 2, 2, 0, 2, 1, 3, 0, 3, 2, 0, 2, 2, 3, 0, 3, 0, 2, 3, 1, 1, 3, 3, 3, 2, 0, 3, 1, 1, 1, 3, 2, 3, 3, 0, 2, 3, 3, 1, 1, 2, 1, 3, 0, 1, 1, 2, 0, 0, 1, 3, 3, 1, 1, 0, 0, 0, 1, 1, 2, 2, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 3, 1, 0, 1, 1, 2, 1, 3, 0, 2, 2, 1, 2, 0, 2, 3, 1, 0, 0, 0, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 2, 2, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 2, 2, 1, 2, 1, 0, 0, 2, 2, 0, 0, 2, 0, 0], [2, 1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 1, 2, 0, 1, 0, 2, 1, 0, 2, 0, 2], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= min(res0, mod(mod(int(1.0),max(( in1 - ( i2 * in0 ) ), max(i0, max(mod(int(0.0),res0), max(( ( min(int(4.0), ( in2 + abs(int(2.0)) )) - mod(abs(int(6.0)),divInt(i2,int(1.0))) ) * int(9.0) ), in2))))),min(int(0.0), min(int(3.0), in1))))\\nloopBreak% = 0\\nwhile in1 != max(i2, divInt(min(in0, ( divInt(in0,max(max(i0, res0), int(4.0))) + int(2.0) )),( in1 - ( ( i2 * ( int(7.0) - min(i1, abs(mod(in2,divInt(mod(min(i1, min(i0, ( min(int(3.0), int(1.0)) + min(max(abs(divInt(in0,abs(int(6.0)))), int(7.0)), int(5.0)) ))),max(( abs(max(i0, ( min(min(int(6.0), int(6.0)), ( int(4.0) - abs(i1) )) * int(2.0) ))) + int(0.0) ), mod(i1,in1))),int(7.0))))) ) ) - abs(min(int(4.0), int(9.0))) ) ))):{:\\nb1 = True\\nb1 = i2 == i0\\nb2 = not in1 \\ge int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(1.0) \\le mod(divInt(min(int(9.0), ( i2 + ( in0 * in1 ) )),in0),in1)\\nif b0:{:\\nif not ( int(8.0) == abs(int(3.0)) or False ):{:\\nin2 -= in2\\n:}\\nloopBreak% = 0\\nwhile int(4.0) \\l int(1.0):{:\\nin1 = ( int(4.0) + min(i2, ( ( int(3.0) * divInt(in0,( min(int(2.0), in2) + res0 )) ) * i1 )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = divInt(i2,res0) != int(1.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 36, 36, 7, 6, 1, 13, 7, 6, 2, 2, 46, 3, 150, 36, 35, 22, 16]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1], [1, 9, 7], [], [], [], [], [], [], [], [], [1, 5, 0, 3, 1, 2], [0, 0], [3, 1, 0, 2, 2, 0, 1, 3, 1, 2, 0, 3, 3, 0], [1, 0, 1], [1, 0, 2, 2], [1], [0, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = max(int(1.0), in2)\\ni0 = divInt(( in0 - int(9.0) ),min(int(7.0), mod(i1,abs(abs(i2)))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 14, 3, 4, 1, 2]}, {"genotype": [[0], [1], [1], [], [0], [0, 1, 1, 1, 1], [7, 5, 8, 7, 3], [4], [0], [], [1], [0], [], [], [], [1, 4, 3], [], [1, 3, 3, 1, 2, 3, 1, 2, 3, 1, 0, 0, 3, 0], [1, 1], [2, 0, 1, 1, 2], [], [0, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(75.0) \\le abs(min(int(8.0), divInt(max(int(7.0), divInt(max(int(3.0), i1),in1)),abs(in0))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 14, 2, 5, 0, 2]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1], [5, 5, 9, 6], [], [], [], [], [], [], [], [], [1, 0, 6, 5, 0], [0], [3, 3, 3, 1, 0, 0, 2, 3, 1, 3, 1, 0, 2, 0, 1], [0, 0], [1, 0, 0, 1, 0], [1, 2], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = max(min(min(int(5.0), i0), res0), ( max(int(5.0), min(int(9.0), in2)) - ( i0 * int(6.0) ) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 15, 2, 5, 2, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [0, 1, 1, 1], [8, 6, 5, 8], [4], [1], [], [0, 0, 1], [0], [2, 2], [], [], [0], [1], [1, 1, 1], [], [], [1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= int(86.0)\\nb1 = not not int(5.0) \\le int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 3, 1, 2, 0, 0, 1, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [1, 2, 2, 0, 1], [1, 0], [1, 0, 1], [1, 1, 1], [5, 8, 6], [5], [2, 0, 2, 2], [1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0], [2, 0, 3, 2, 0, 3, 0, 1], [1], [1], [1, 4, 2, 0], [1, 0], [1, 0, 1, 3, 0, 3, 1], [], [1, 2], [2], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= int(5.0)\\nloopBreak% = 0\\nwhile not b2:{:\\nif ( not b0 or ( b2 or in1 != int(8.0) ) ):{:\\nb2 = False\\n:}else:{:\\ni2 = max(i0, abs(int(6.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 3, 3, 1, 4, 2, 9, 1, 8, 1, 1, 4, 2, 7, 0, 2, 1, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1], [0], [2], [], [], [1], [0], [], [], [], [4, 4, 1], [0], [0, 0, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 == in1:{:\\ni1 = abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 3, 1, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1], [8], [], [], [], [], [], [], [], [], [0, 0, 2, 2], [1, 0], [2, 0, 1, 0], [0], [], [2, 0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= ( i0 + int(8.0) )\\ni2 = i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 4, 1, 0, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 2, 1, 0, 0, 1, 0, 2, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0], [1, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 4, 6, 9, 2, 4, 3, 0, 0, 8, 6, 5, 9, 9, 6, 3, 6, 6, 7, 6, 3, 6, 4, 2, 8], [4, 5, 4, 4, 1, 5, 1, 5, 1, 0, 3, 2, 0], [0, 2, 2, 0, 2, 0, 1, 0], [1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 1, 2, 1, 1, 1], [0, 1, 1, 0], [1, 0], [5, 6, 1, 5, 0, 0, 0, 0, 0, 5, 2, 5, 4, 2, 5, 4, 3, 5, 6, 0, 1, 2, 0, 6, 5, 5, 5, 4], [0, 0, 1, 1], [1, 1, 0, 1, 3, 1, 3, 1, 0, 0, 3, 1, 1, 0, 3, 1, 1, 0, 3, 3, 0, 0, 1, 0, 0, 2, 0, 3, 2, 2, 0, 1, 0, 0, 3, 1, 0, 0, 3, 0, 0, 1, 3, 1, 3, 1, 2, 1, 2, 3, 2, 0, 0, 0, 0, 1, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 2, 0, 2, 1, 2, 2, 2], [2, 0, 1, 2, 2, 1, 0, 1, 1, 2], [0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(3.0)\\nloopBreak% = 0\\nwhile not int(8.0) \\le res0:{:\\nb0 = int(4.0) != max(int(6.0), max(int(9.0), i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in2 \\le max(int(2.0), int(4.0))\\ni0 = i0\\nb2 = min(int(3.0), int(0.0)) \\le i0\\nb0 = min(abs(i0), i0) \\g int(0.0)\\nloopBreak% = 0\\nwhile ( in2 != i2 or ( in2 * min(( ( in1 + int(8.0) ) - i2 ), in2) ) \\g abs(int(6.0)) ):{:\\nloopBreak% = 0\\nwhile True:{:\\nb2 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in1 != in0:{:\\nb0 = max(in2, res0) \\g int(5.0)\\nif False:{:\\ni0 *= abs(int(9.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile abs(int(9.0)) \\l ( int(6.0) * divInt(abs(( i1 - i2 )),i0) ):{:\\nloopBreak% = 0\\nwhile res0 \\ge int(3.0):{:\\nin2 += in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = True\\nif ( mod(int(6.0),in2) - int(6.0) ) == int(7.0):{:\\nb0 = ( divInt(int(6.0),int(3.0)) - mod(int(6.0),int(4.0)) ) \\l ( int(2.0) * divInt(in1,int(8.0)) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 8, 12, 26, 26, 13, 8, 1, 20, 13, 7, 4, 2, 28, 4, 75, 13, 12, 10, 5]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 1, 1, 2, 0, 0], [1, 0], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 4, 2, 2, 1, 2, 2, 6, 7, 2, 4, 1, 3, 1, 7, 8, 8, 8, 4, 3, 3, 5, 4], [3, 2, 2, 0, 3, 1], [0, 1, 1], [1], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [3, 2, 2, 2, 2], [], [1], [0, 5, 6, 4, 4, 5, 4, 6, 3, 0, 6, 0, 3, 3, 0, 5, 1, 4, 1, 2, 6, 2, 1, 3, 5, 3, 0, 4], [0], [3, 3, 0, 2, 3, 3, 3, 0, 0, 1, 0, 3, 3, 2, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 1, 3, 3, 2, 2, 2, 1, 0, 0, 0, 0, 0, 3, 2, 2, 0, 3, 3, 3, 3, 2, 1, 1, 2, 2, 3, 3, 2, 0, 0, 1, 1, 0, 0, 1, 2, 3, 3, 3, 1, 1, 3, 1, 0, 2, 2, 3, 3, 1, 1, 1, 2, 0, 3, 2, 0, 1, 3, 3, 1, 2, 0, 1, 0, 3, 1, 1, 3, 2, 0, 0, 2, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0], [2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 1, 2, 0, 0, 2, 1, 0, 2, 2, 0], [1, 0, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( abs(max(i0, divInt(max(abs(abs(in2)), res0),int(7.0)))) \\ge in1 or abs(max(divInt(divInt(( int(7.0) - int(4.0) ),int(2.0)),in1), int(2.0))) == in2 ):{:\\nin1 = res0\\nb0 = not ( int(1.0) + abs(abs(divInt(( ( int(2.0) * in0 ) * i0 ),res0))) ) == i0\\nif in0 \\l max(mod(( in0 - max(abs(max(min(( int(2.0) * int(6.0) ), mod(divInt(min(min(mod(i0,in2), int(7.0)), int(2.0)),i1),in1)), int(4.0))), ( min(max(abs(int(1.0)), int(3.0)), min(int(1.0), i1)) * ( ( min(abs(int(7.0)), int(8.0)) * int(8.0) ) + mod(i2,max(( res0 * int(8.0) ), min(abs(int(4.0)), mod(i2,int(3.0))))) ) )) ),i1), abs(int(3.0))):{:\\nb1 = not not int(5.0) \\ge min(( in0 - in2 ), ( in0 - i0 ))\\n:}else:{:\\nb1 = not int(4.0) \\g in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 24, 24, 6, 3, 1, 11, 6, 5, 0, 1, 28, 1, 100, 22, 27, 12, 10]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [1, 8], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(18.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1, 1, 1, 1], [0, 1, 0, 9, 6, 0], [], [0, 0, 2], [0, 1], [0, 0, 0, 0, 0, 0], [], [3, 2, 0, 3, 0, 0], [], [], [4, 4, 6, 2], [1], [3, 0, 3, 2, 3, 3, 0, 0, 3, 2, 2, 2, 1, 1, 1, 3, 3, 1, 1, 1], [0, 1, 0, 0], [1, 2, 1, 2, 1, 2, 0], [2, 2, 1, 1], [0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( not b0 and ( b0 or b2 ) ):{:\\nin1 *= max(in1, abs(( max(abs(res0), i2) * max(divInt(( ( int(0.0) - int(1.0) ) - int(0.0) ),abs(min(int(9.0), int(6.0)))), int(0.0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 6, 6, 0, 3, 2, 6, 0, 6, 0, 0, 4, 1, 20, 4, 7, 4, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 1, 2, 1, 1, 2, 1], [0, 0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 8, 6, 6, 0, 6, 3, 8, 5, 5, 5, 7, 8, 3, 3, 5, 9, 0, 5, 3, 1], [1, 0, 4], [2, 1, 2, 2, 2], [], [0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0], [2, 1, 1, 1, 1], [0, 0, 1, 1], [0, 0], [5, 1, 5, 2, 1, 1, 5, 5, 2, 4, 0, 0, 3, 1, 3, 0, 6, 6, 3, 5, 0, 2, 3, 6, 0, 1, 6, 1, 3, 2], [0, 1], [1, 2, 0, 3, 3, 0, 1, 1, 2, 1, 0, 2, 0, 2, 2, 0, 3, 2, 0, 3, 3, 0, 3, 3, 2, 0, 3, 2, 3, 2, 3, 3, 2, 1, 3, 3, 0, 1, 1, 3, 1, 1, 0, 2, 0, 1, 2, 3, 0, 3, 3, 0, 3, 1, 1, 0, 0, 0, 3, 1, 0, 0, 2, 2, 2, 0, 1, 2, 2, 1, 2, 2, 2, 0, 0, 1, 2, 3, 1, 1, 3, 2, 1, 1, 2, 0, 2, 0, 1, 1, 2, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 2, 2, 1, 0, 0, 1, 0, 2, 0, 1, 2, 2, 2, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 1, 1, 2, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(0.0)\\nb2 = not True\\nb1 = ( i1 + max(max(in2, int(9.0)), int(8.0)) ) \\g ( int(6.0) + i2 )\\nb2 = ( i1 + ( mod(i1,min(( in2 + min(abs(in2), abs(max(( i2 + min(( min(( max(min(divInt(int(6.0),abs(min(in1, int(0.0)))), int(6.0)), max(int(3.0), int(8.0))) + i0 ), divInt(i0,int(5.0))) + ( abs(in0) - abs(abs(i1)) ) ), min(int(5.0), int(5.0))) ), in0))) ), i0)) + res0 ) ) \\l max(int(7.0), res0)\\nif True:{:\\nin0 += in2\\nb2 = mod(divInt(mod(i0,int(8.0)),( divInt(int(3.0),divInt(( ( i2 - in0 ) * int(3.0) ),( max(int(5.0), int(9.0)) - max(( int(0.0) - int(5.0) ), ( res0 * mod(i0,int(3.0)) )) ))) + int(1.0) )),( max(i1, res0) + i1 )) \\le min(in0, i2)\\n:}\\nif False:{:\\nb2 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 2, 7, 22, 22, 3, 5, 0, 8, 3, 5, 4, 2, 30, 2, 98, 25, 23, 17, 9]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 0, 1, 2, 6, 6, 3, 6, 1, 8, 8, 2, 3], [3], [], [], [0, 1], [0], [2], [], [0], [6, 4, 0, 5, 2, 6, 0, 4, 3, 0, 5, 3, 2, 1, 5, 3, 3, 0, 6, 5, 1], [1], [0, 2, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3, 1, 2, 3, 2, 2, 3, 0, 2, 3, 0, 0, 3, 3, 3, 0, 1, 0, 1, 0, 1, 1, 3, 0, 2, 0, 0, 1, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 0, 3, 3, 0, 0, 3, 3, 1, 2, 0, 2, 0, 1, 1, 0, 3, 0, 0, 1, 3, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [2, 0, 1, 0, 2, 1, 0, 1, 0, 1, 2, 2, 0, 2, 1, 0, 1, 0, 1, 1, 2, 1, 0], [0, 0, 0, 2, 1, 0, 2, 0, 0], [0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not res0 \\ge divInt(mod(abs(mod(int(9.0),mod(( min(max(int(4.0), min(int(0.0), ( abs(( ( max(in1, ( min(i0, in2) + max(min(max(i2, int(1.0)), res0), int(2.0)) )) + i0 ) + int(6.0) )) * int(6.0) ))), abs(in1)) - mod(in0,i0) ),int(3.0)))),int(6.0)),in2):{:\\nin0 += abs(min(abs(max(min(max(divInt(( i2 * min(max(i1, in2), max(abs(int(1.0)), ( in0 + ( in0 + int(8.0) ) ))) ),int(8.0)), i0), max(res0, in2)), int(2.0))), min(int(3.0), i1)))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 14, 14, 1, 0, 0, 2, 1, 1, 0, 1, 21, 1, 71, 14, 23, 9, 6]}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 1, 2, 1, 1], [1], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 5, 4, 9, 4, 7, 1, 4, 0, 3, 7, 4, 7, 6, 1, 1, 2, 5, 1, 4, 0, 6, 5, 7, 6, 9, 5, 8, 5, 1, 5, 8, 0, 6, 0, 1, 1, 7, 0, 6, 3, 4, 6, 0, 6, 5, 7, 4, 7, 6, 2, 6], [2, 5, 5], [0, 2], [], [1, 1, 1], [0, 0, 0], [], [], [], [5, 4, 4, 1, 0, 4, 5, 2, 5, 5, 3, 3, 5, 1, 6, 4, 5, 4, 6, 4, 6, 1, 6, 3, 4, 5, 6, 4, 0, 1, 3, 0, 0, 1, 5, 6, 4, 3, 0, 6, 4, 3, 0, 5, 0, 2, 5, 6, 3, 2, 4, 2, 5, 1, 5], [1, 0], [1, 2, 1, 0, 2, 3, 3, 3, 3, 3, 3, 1, 3, 0, 3, 0, 2, 1, 2, 2, 3, 3, 3, 2, 3, 2, 0, 2, 1, 3, 3, 3, 3, 3, 0, 3, 2, 0, 3, 2, 2, 3, 1, 3, 0, 3, 2, 2, 1, 0, 2, 1, 0, 1, 2, 2, 3, 1, 2, 2, 0, 0, 1, 0, 3, 2, 3, 1, 2, 2, 2, 0, 0, 1, 1, 1, 0, 1, 0, 3, 2, 2, 3, 2, 0, 1, 0, 1, 0, 0, 3, 2, 2, 1, 2, 1, 1, 0, 3, 3, 1, 2, 1, 0, 2, 0, 3, 2, 3, 2, 2, 3, 2, 0, 1, 3, 0, 2, 3, 3, 3, 1, 3, 0, 0, 0, 0, 0, 3, 0, 2, 3, 2, 2, 1, 0, 0, 0, 3, 1, 0, 2, 3, 1, 0, 2, 0, 1, 3, 3, 1, 2, 3, 1, 3, 3, 1, 3, 3, 1, 3, 1, 1, 1, 2, 2, 1, 1, 3, 2, 1, 2, 2, 3, 1, 3, 0, 1, 2, 3, 2, 2, 0, 3, 0, 1, 1, 0, 3, 1, 3, 1, 2, 2, 1, 3, 0, 0, 0, 3, 3, 0, 0, 1, 3, 0, 3, 1, 0, 2, 2, 3, 0, 2, 2, 0, 3, 2, 0, 0, 1, 1, 1, 0, 1, 3, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 2, 2, 1, 2, 0, 2, 0, 2, 1, 0, 0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 2, 1, 1, 0, 1, 2, 2, 2, 1, 2, 0, 2, 2, 1, 2, 0, 1, 0, 1, 0, 2, 0, 0, 1, 1, 0, 2, 1, 1, 0, 1, 2, 0, 0, 0, 0, 1, 1, 2, 2], [2, 1, 1, 2, 2, 1, 2, 0, 2, 2, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 2], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(4.0) == ( int(2.0) * in2 )\\nin1 -= mod(max(abs(abs(max(abs(min(int(5.0), abs(in1))), min(i1, ( int(4.0) - divInt(divInt(abs(max(min(mod(min(mod(i0,divInt(int(9.0),max(max(abs(abs(max(in1, abs(divInt(in2,abs(divInt(( max(int(4.0), min(i2, abs(mod(divInt(int(7.0),in2),mod(int(1.0),in2))))) * int(4.0) ),divInt(( max(int(0.0), ( ( in0 * in0 ) - int(3.0) )) * in2 ),max(( max(int(7.0), divInt(mod(( i1 + res0 ),int(4.0)),int(7.0))) * int(6.0) ), in1))))))))), int(1.0)), in2))), abs(divInt(divInt(max(divInt(in1,int(1.0)), res0),int(2.0)),in1))),res0), max(mod(divInt(int(5.0),mod(int(1.0),int(4.0))),i1), min(max(int(0.0), divInt(int(6.0),res0)), mod(in0,abs(divInt(abs(( divInt(abs(divInt(in1,int(5.0))),max(in2, divInt(abs(min(abs(int(7.0)), abs(res0))),in1))) * i0 )),i1)))))), in0)),max(i0, ( abs(( ( int(6.0) - i0 ) + i1 )) - in2 ))),min(int(9.0), res0)) ))))), mod(max(int(5.0), in1),divInt(in0,int(8.0)))),min(max(int(5.0), ( min(int(1.0), abs(min(int(5.0), min(max(int(8.0), max(int(0.0), int(6.0))), int(0.0))))) - ( ( int(1.0) - int(1.0) ) + min(divInt(int(7.0),mod(( abs(int(0.0)) - max(i0, int(6.0)) ),( max(( divInt(res0,min(in1, int(3.0))) - int(4.0) ), in0) - max(int(6.0), abs(int(0.0))) ))), mod(( int(6.0) + min(i0, in2) ),i0)) ) )), min(min(i2, in2), int(5.0))))\\nloopBreak% = 0\\nwhile min(res0, max(int(7.0), in0)) != ( ( max(i2, divInt(divInt(in1,abs(( i2 * in2 ))),int(4.0))) * int(7.0) ) * int(6.0) ):{:\\ni1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(2.0) != abs(int(6.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 53, 53, 3, 2, 0, 3, 3, 0, 0, 0, 55, 2, 227, 56, 65, 23, 34]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1], [2, 2, 1, 1, 2, 2, 2, 0], [0, 0, 1, 1, 0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 5, 9, 6, 5, 6, 6, 9, 0, 5, 6, 2, 6, 3, 6, 4, 6, 7, 2, 7, 8, 6, 0, 7, 5, 0, 6, 6, 9, 8, 3, 8, 9, 7, 8, 8, 7, 4, 6, 9, 0, 6, 3, 8, 6], [2], [2, 2], [], [0, 0, 1, 0, 0], [0], [0, 0, 1, 1], [0, 0], [0, 0, 0], [3, 0, 5, 4, 2, 6, 4, 0, 6, 2, 3, 6, 2, 5, 6, 4, 2, 1, 4, 6, 3, 0, 4, 1, 0, 3, 0, 4, 3, 1, 6, 6, 0, 2, 2, 2, 6, 6, 1, 4, 4, 4, 0, 4, 3, 6, 0, 3, 1, 6, 4, 3, 4, 4, 6, 6, 6, 1], [0, 1, 0], [0, 0, 2, 1, 3, 3, 2, 2, 3, 0, 3, 3, 2, 3, 0, 2, 0, 2, 1, 3, 3, 0, 0, 0, 3, 2, 0, 0, 2, 3, 2, 3, 3, 0, 2, 0, 3, 1, 1, 2, 0, 3, 1, 2, 3, 0, 2, 2, 1, 1, 0, 3, 0, 0, 1, 2, 0, 3, 2, 3, 2, 3, 1, 2, 2, 3, 3, 3, 3, 1, 0, 0, 2, 0, 0, 3, 3, 3, 3, 3, 1, 1, 0, 3, 0, 3, 3, 3, 1, 3, 1, 1, 2, 0, 1, 3, 0, 3, 2, 2, 2, 2, 1, 3, 1, 3, 2, 1, 3, 2, 3, 0, 1, 2, 3, 2, 3, 2, 3, 3, 2, 1, 1, 1, 0, 1, 2, 0, 3, 2, 3, 3, 1, 0, 3, 0, 3, 3, 3, 3, 3, 2, 1, 2, 3, 0, 0, 0, 0, 3, 2, 2, 2, 0, 0, 1, 3, 3, 1, 3, 0, 0, 1, 0, 1, 3, 3, 0, 0, 0, 1, 3, 3, 2, 1, 2, 1, 2, 3, 2, 2, 2, 3, 1, 3, 0, 0, 0, 1, 2, 3, 1, 1, 1, 2, 0, 0, 0, 3, 0, 2, 0, 1, 3, 3, 1, 0, 1, 0, 2, 3, 2, 0, 3, 1, 3, 0, 1, 2, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [1, 1, 2, 2, 2, 2, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 2, 1, 1, 2, 1, 2, 0, 2, 0, 1, 0, 0, 2, 0, 2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 2, 1, 2, 1, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 1, 2, 1, 0, 1, 0, 1, 2, 2], [1, 2, 0, 1, 1, 1, 1, 0, 2, 2, 1, 2, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nif b2:{:\\nin0 = i0\\n:}\\n:}\\nin2 -= in1\\nloopBreak% = 0\\nwhile divInt(int(2.0),max(max(mod(( abs(i2) * abs(abs(( abs(res0) + mod(in1,( int(5.0) - min(min(i0, res0), i2) )) ))) ),abs(divInt(in0,res0))), ( abs(( max(min(i2, ( in2 - min(int(5.0), int(9.0)) )), divInt(res0,abs(int(6.0)))) - ( max(in1, ( mod(int(5.0),int(6.0)) - i2 )) + max(i1, in1) ) )) * int(6.0) )), ( res0 * abs(( max(( max(int(9.0), divInt(( abs(max(abs(min(int(0.0), in0)), i0)) - mod(in1,i1) ),abs(min(max(min(min(int(5.0), int(6.0)), i0), abs(in0)), min(abs(max(int(2.0), max(int(6.0), int(3.0)))), ( i0 * int(6.0) )))))) * max(in1, min(( divInt(mod(( int(4.0) + abs(int(6.0)) ),abs(( int(7.0) * min(( max(in0, int(2.0)) + ( max(( max(( abs(max(( int(7.0) * int(8.0) ), int(6.0))) + i1 ), int(0.0)) * ( res0 - max(( min(abs(int(7.0)), res0) + max(i0, abs(max(min(min(min(divInt(int(5.0),divInt(min(i2, i2),i2)), res0), min(divInt(divInt(divInt(res0,i1),int(0.0)),abs(min(int(6.0), abs(in1)))), in1)), int(6.0)), in1))) ), int(9.0)) ) ), abs(min(i0, in1))) * in0 ) ), int(8.0)) ))),min(abs(( int(3.0) - ( int(8.0) - ( min(divInt(( divInt(max(int(9.0), abs(res0)),i0) - in0 ),int(7.0)), divInt(max(int(8.0), int(8.0)),int(7.0))) * mod(i1,res0) ) ) )), in1)) * min(in0, mod(in1,int(4.0))) ), max(min(int(6.0), in1), int(9.0)))) ), res0) - ( max(mod(res0,abs(int(0.0))), abs(res0)) - int(6.0) ) )) ))) == ( int(3.0) + int(8.0) ):{:\\nloopBreak% = 0\\nwhile True:{:\\nif True:{:\\ni1 = int(6.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 5, 3, 46, 46, 1, 2, 0, 5, 1, 4, 2, 3, 58, 3, 222, 50, 71, 30, 21]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 2, 0, 2, 0, 1, 1], [0, 1, 1], [1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 9, 6, 7, 4, 0, 8, 9, 8, 4, 4, 6, 9, 4, 6, 7, 0, 4, 4, 0, 9, 3, 8, 7, 5, 6, 5, 7, 5, 5, 7, 7, 2, 3, 1, 4, 0, 7, 5, 5, 7, 5, 3, 1, 3, 9, 1, 0, 1, 0, 5, 0, 7, 6, 6, 2, 6, 0, 1, 7, 8, 3, 5, 6, 0, 8, 3, 7, 2, 0, 3, 9, 2, 3], [2, 0, 4], [1, 2, 2, 0, 0, 2, 1], [0], [1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0], [0, 0, 0, 3, 0], [], [1], [0, 0, 4, 3, 0, 6, 3, 2, 3, 5, 1, 3, 3, 6, 0, 4, 0, 2, 6, 4, 1, 1, 5, 0, 4, 3, 3, 6, 6, 2, 0, 0, 5, 3, 6, 3, 5, 2, 0, 2, 2, 4, 2, 2, 1, 1, 5, 5, 5, 5, 0, 2, 6, 5, 1, 5, 4, 4, 3, 1, 1, 6, 1, 1, 1, 4, 0, 6, 1, 1, 0, 2, 5], [1, 0], [2, 1, 3, 1, 2, 0, 1, 0, 1, 3, 2, 3, 0, 3, 1, 0, 2, 0, 1, 3, 2, 1, 0, 0, 3, 3, 3, 2, 2, 2, 2, 3, 0, 1, 0, 1, 1, 1, 2, 1, 3, 0, 3, 3, 2, 2, 0, 0, 3, 2, 2, 2, 0, 1, 0, 1, 1, 3, 2, 0, 3, 2, 0, 3, 1, 1, 2, 2, 2, 2, 3, 1, 2, 1, 1, 3, 2, 2, 3, 3, 3, 0, 0, 1, 0, 3, 2, 1, 3, 2, 1, 0, 3, 3, 3, 0, 1, 2, 2, 3, 1, 1, 0, 3, 1, 1, 2, 1, 2, 2, 2, 1, 3, 1, 1, 0, 3, 3, 1, 2, 2, 2, 0, 3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2, 0, 1, 1, 1, 2, 3, 0, 1, 2, 2, 2, 3, 3, 2, 2, 1, 1, 0, 0, 3, 3, 3, 1, 2, 1, 0, 3, 0, 0, 3, 2, 0, 3, 0, 2, 3, 3, 0, 1, 0, 2, 0, 0, 1, 2, 1, 2, 0, 3, 3, 3, 0, 0, 0, 1, 3, 3, 2, 1, 1, 1, 3, 1, 1, 3, 3, 1, 2, 2, 2, 0, 1, 0, 3, 3, 0, 3, 1, 2, 0, 0, 3, 3, 2, 2, 0, 2, 0, 0, 3, 1, 3, 0, 3, 1, 0, 2, 3, 1, 3, 3, 0, 0, 2, 0, 1, 3, 3, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 3, 0, 2, 2, 1, 2, 1, 0, 1, 2, 3, 0, 2, 1, 1, 0, 2, 1, 2, 0, 0, 1, 3, 1, 0, 0, 2, 2, 0, 0, 2, 0, 3, 3, 2, 1, 2, 3, 0, 2, 3, 1, 3, 1, 0, 3, 3, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0, 2, 1, 2, 1, 2, 1, 0, 0, 1, 0, 2, 2, 1, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 0, 1, 2, 0, 2, 2, 1, 1, 2, 1, 0, 2, 1, 0, 2, 2, 0, 0, 1, 0, 2, 1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 2, 0, 0, 0, 2, 1, 2], [0, 0, 0, 1, 1, 0, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 1, 0, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 0, 2, 0, 1, 2, 2, 0, 2, 2], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 82, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += mod(int(7.0),max(int(5.0), ( i0 + int(9.0) )))\\nif in1 == int(6.0):{:\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = max(( min(in0, max(int(7.0), i0)) + ( res0 - int(4.0) ) ), max(mod(int(0.0),in0), i2)) \\l max(max(min(mod(divInt(( ( abs(in0) - int(8.0) ) + in2 ),int(9.0)),int(8.0)), int(4.0)), ( int(4.0) + max(i1, min(min(mod(mod(in0,in0),max(( mod(( res0 - int(6.0) ),i0) - int(9.0) ), int(4.0))), min(mod(in1,max(( i0 * max(int(6.0), int(7.0)) ), ( mod(( ( min(int(0.0), ( int(4.0) + int(4.0) )) - abs(mod(( max(abs(max(i2, res0)), int(0.0)) - in1 ),abs(divInt(int(9.0),max(divInt(int(3.0),i1), min(min(max(i1, int(8.0)), ( mod(min(int(7.0), int(5.0)),in2) + abs(int(6.0)) )), int(5.0))))))) ) + ( int(7.0) + ( ( ( int(5.0) - abs(int(5.0)) ) + int(7.0) ) * i0 ) ) ),max(abs(int(7.0)), ( ( divInt(in1,max(mod(min(min(( int(2.0) * abs(( max(max(min(( in0 - int(3.0) ), int(1.0)), int(4.0)), divInt(min(in0, int(0.0)),mod(( mod(min(max(( divInt(int(7.0),int(5.0)) - res0 ), res0), min(min(max(int(5.0), divInt(int(7.0),i2)), abs(i0)), i0)),min(mod(in2,abs(in0)), ( abs(max(res0, int(5.0))) * in0 ))) - mod(in2,i2) ),int(3.0)))) - ( int(1.0) * divInt(i0,max(abs(max(i2, i2)), in1)) ) )) ), int(3.0)), min(abs(divInt(int(9.0),int(1.0))), int(0.0))),max(int(1.0), int(0.0))), min(abs(int(5.0)), mod(divInt(divInt(i2,int(0.0)),i2),abs(min(i1, min(int(7.0), ( i1 - in2 )))))))) - max(min(( ( in2 * ( in2 * in2 ) ) * abs(int(6.0)) ), max(i0, min(int(6.0), i2))), mod(max(int(2.0), min(max(res0, in2), ( i1 - int(6.0) ))),min(abs(mod(in2,( ( in1 + in1 ) * in0 ))), int(0.0)))) ) + ( divInt(( int(1.0) - abs(i1) ),( ( int(7.0) * divInt(int(8.0),i1) ) * int(3.0) )) + divInt(min(res0, ( int(5.0) * int(6.0) )),i1) ) ))) * divInt(int(0.0),divInt(i1,i1)) ))), int(8.0))), abs(int(3.0)))) )), in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\ni0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = b0\\nb2 = ( divInt(divInt(i1,i1),mod(i0,abs(min(divInt(int(7.0),divInt(min(i2, divInt(min(int(2.0), abs(int(0.0))),in2)),max(abs(int(3.0)), int(9.0)))), int(2.0))))) \\le int(3.0) and b1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 75, 75, 3, 7, 1, 8, 3, 5, 0, 1, 73, 2, 306, 80, 80, 41, 40]}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1], [2, 2, 2, 2, 1, 1, 0], [0, 1, 1, 0], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 3, 9, 5, 1, 5, 2, 1, 2, 4, 8, 5, 8, 4, 1, 6, 3, 1, 9, 2, 3, 9, 2, 0, 8, 6], [5, 5, 2, 4], [2, 2], [], [1, 1, 0, 1, 1], [0, 0, 0, 0], [0], [], [1, 0], [2, 6, 6, 4, 1, 6, 6, 4, 3, 6, 2, 6, 4, 6, 2, 1, 1, 4, 2, 6, 0, 6, 6, 2, 5, 0, 4, 1, 2, 0, 2, 0, 5, 6, 5, 6, 4, 3, 5, 0, 3, 3, 6, 6, 4, 6, 5, 4, 3, 1, 3], [0, 0], [2, 0, 0, 2, 2, 2, 0, 0, 1, 2, 2, 2, 3, 0, 3, 0, 3, 2, 2, 2, 2, 0, 2, 3, 2, 0, 3, 2, 0, 0, 3, 3, 3, 2, 1, 0, 2, 2, 1, 0, 0, 1, 0, 1, 3, 0, 0, 2, 1, 3, 2, 2, 2, 0, 3, 3, 3, 2, 0, 0, 2, 3, 2, 1, 0, 0, 0, 3, 0, 3, 0, 1, 0, 0, 3, 3, 1, 0, 1, 0, 0, 0, 2, 3, 1, 1, 2, 0, 3, 2, 0, 0, 1, 2, 3, 2, 0, 0, 2, 3, 1, 1, 2, 1, 2, 1, 0, 0, 3, 0, 0, 3, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 2, 3, 0, 3, 3, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 0, 3, 0, 1, 2, 2, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 2, 1, 1, 2, 2, 1, 0, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 2, 0, 1, 1, 1, 0, 1, 2, 2, 2, 0], [2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 2, 2, 1, 1, 1, 2, 0, 1, 0, 0, 2], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( i2 * res0 ) != ( divInt(( res0 + in1 ),int(4.0)) - mod(divInt(divInt(min(i1, abs(res0)),max(divInt(mod(mod(( res0 + ( max(divInt(in1,abs(( in0 + res0 ))), abs(max(min(( int(4.0) * i2 ), divInt(( int(3.0) - res0 ),in1)), int(9.0)))) * res0 ) ),int(5.0)),max(i2, i1)),( int(1.0) - max(divInt(( mod(i1,max(min(min(divInt(in1,i2), ( min(mod(int(5.0),res0), i0) + res0 )), abs(res0)), min(i2, int(2.0)))) - in2 ),i0), min(min(int(1.0), in1), int(2.0))) )), i1)),i2),i0) ):{:\\nloopBreak% = 0\\nwhile mod(abs(int(4.0)),int(8.0)) != ( i2 * max(( i0 * in2 ), int(5.0)) ):{:\\nloopBreak% = 0\\nwhile b2:{:\\nif ( min(mod(res0,in2), ( abs(int(8.0)) - int(4.0) )) - ( int(1.0) - mod(int(6.0),res0) ) ) == in1:{:\\nin0 = min(in2, i0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = max(divInt(( mod(( in0 * max(max(min(max(in0, divInt(abs(res0),abs(abs(divInt(int(3.0),int(1.0)))))), int(9.0)), int(2.0)), int(3.0)) ),divInt(int(9.0),( ( res0 + in1 ) - min(res0, int(2.0)) ))) + ( ( in2 + in1 ) * int(0.0) ) ),int(8.0)), in0) \\le i1\\nin0 = int(6.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 27, 27, 4, 2, 0, 5, 4, 1, 0, 2, 51, 2, 151, 43, 32, 22, 21]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1], [1, 5, 3, 7, 0, 1], [], [], [], [], [], [], [], [], [4, 3, 4, 5, 0, 4, 6, 0, 2, 3], [1], [3, 3, 0, 3, 2, 0, 2, 0, 1, 3, 0, 2, 2, 2, 1, 3, 3, 3, 1, 0, 3, 1, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0], [0, 0, 0, 2, 1, 0, 2, 0, 2, 0, 2, 1], [1, 0, 1, 1, 2], [1, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= min(min(in0, min(mod(in1,( in2 + int(1.0) )), abs(i0))), ( ( divInt(int(5.0),max(min(abs(int(3.0)), in1), min(int(7.0), abs(min(( abs(max(res0, int(0.0))) - int(1.0) ), i0))))) - i2 ) * in0 ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 33, 6, 12, 5, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0, 0, 0], [], [2, 2, 1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not not False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 3, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 0, 0], [1, 0, 1, 0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 9, 8, 4, 8, 1, 7, 5, 5, 8, 5], [], [0, 2], [0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [2, 3, 0, 1, 0, 2, 3, 1, 1, 1], [0, 0, 1, 1], [1, 0], [4, 1, 2, 0, 5, 0, 5, 2, 2, 6, 4, 0, 6, 0], [1, 0, 1], [2, 0, 2, 2, 2, 3, 3, 0, 1, 3, 1, 2, 2, 2, 1, 3, 1, 2, 2, 2, 0, 3, 3, 2, 1, 0, 1, 3, 0, 3, 2, 1, 2, 1, 0, 0, 0, 0, 1, 0, 3, 3, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 2, 0, 2, 1, 1, 0, 2, 0, 0], [0, 2, 2, 2, 0, 0, 2, 0, 0, 1, 1], [1, 0, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += ( i1 * mod(( ( max(abs(i2), int(0.0)) * min(int(7.0), divInt(( ( int(9.0) * abs(int(8.0)) ) + mod(( ( i0 + max(max(( int(4.0) * in2 ), int(8.0)), min(i0, abs(( int(1.0) + mod(int(7.0),in2) )))) ) + i2 ),i2) ),res0)) ) - int(5.0) ),in1) )\\nloopBreak% = 0\\nwhile not ( b0 and True ):{:\\nif b2:{:\\nloopBreak% = 0\\nwhile not ( True or False ):{:\\nif False:{:\\ni0 = min(min(int(5.0), res0), int(8.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 -= int(5.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 12, 12, 0, 2, 2, 10, 0, 10, 4, 2, 14, 3, 46, 13, 10, 11, 4]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [2, 1], [], [], [], [], [], [], [], [], [2], [1], [2, 1, 1], [0], [], [0, 1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += ( int(2.0) - int(1.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 0, 2, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 2, 0, 1, 1, 0, 2, 1, 0], [1, 1, 0], [0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 8, 6, 9, 8, 3, 8, 1, 0, 1, 7, 7, 5, 3, 9, 8, 5, 4, 0, 5, 1, 3, 4, 4, 0, 2, 2, 8, 7, 7, 3, 2, 6, 6, 9, 1, 7, 7, 6, 0, 4, 0, 1, 0, 8, 7, 0, 5, 6, 8, 1], [1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1], [], [1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0], [], [1], [0, 6, 0, 0, 4, 1, 5, 3, 3, 0, 6, 6, 6, 3, 6, 5, 6, 4, 6, 2, 3, 6, 5, 0, 0, 6, 6, 0, 5, 3, 1, 1, 1, 5, 0, 4, 1, 4, 1, 4, 2, 3, 6, 2, 2, 6, 5, 0, 2, 1, 4, 3, 1, 4, 3, 5, 3, 5, 3, 4, 0, 2, 6, 1, 3, 3, 0, 3, 6, 4], [0, 1], [0, 2, 0, 2, 1, 3, 0, 0, 1, 0, 2, 1, 0, 1, 3, 1, 3, 2, 2, 0, 3, 0, 3, 1, 1, 2, 1, 2, 3, 1, 0, 2, 2, 2, 1, 3, 1, 0, 0, 0, 2, 2, 3, 2, 0, 3, 2, 2, 0, 3, 2, 2, 0, 1, 1, 0, 1, 3, 2, 2, 2, 0, 2, 2, 3, 1, 1, 0, 3, 3, 2, 2, 0, 0, 2, 0, 1, 2, 3, 0, 0, 2, 1, 1, 3, 2, 3, 0, 2, 1, 3, 2, 2, 0, 3, 0, 0, 0, 2, 0, 2, 2, 0, 1, 0, 0, 3, 1, 0, 2, 2, 0, 0, 3, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 1, 0, 1, 1, 3, 2, 1, 3, 2, 3, 1, 2, 2, 1, 0, 0, 2, 0, 0, 3, 3, 3, 3, 2, 2, 1, 1, 2, 0, 2, 2, 2, 1, 3, 1, 0, 0, 0, 1, 3, 1, 2, 1, 2, 2, 3, 1, 2, 3, 0, 3, 2, 3, 1, 1, 3, 2, 2, 3, 0, 0, 2, 3, 3, 3, 0, 1, 2, 1, 2, 0, 0, 0, 3, 3, 0, 1, 1, 2, 2, 1, 0, 1, 0, 0, 2, 2, 0, 0, 3, 3, 1, 3, 0, 0, 2, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 3, 1, 3, 1, 0, 2, 1, 3, 1, 2, 0, 3, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 0, 2, 0, 0, 1, 2, 2, 1, 1, 1, 0, 1, 2, 2, 0, 0, 2, 1, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 2], [2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 0, 2, 1, 2, 1, 2, 2, 2, 0, 0, 2, 1, 1, 0, 2, 2, 0, 2, 0, 2, 1, 0, 2, 1, 2, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\g divInt(res0,( int(8.0) * max(i0, i0) )):{:\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = int(1.0) \\g in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( int(8.0) + in2 )\\nb1 = int(6.0) \\ge abs(int(9.0))\\nb1 = min(( mod(in0,abs(in0)) * abs(int(8.0)) ), int(3.0)) \\ge divInt(int(8.0),mod(min(int(1.0), i0),( ( ( int(0.0) - abs(int(1.0)) ) + res0 ) + res0 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\nres0 *= in0\\n:}else:{:\\nb1 = ( mod(min(( res0 - min(divInt(mod(in2,max(mod(( res0 - int(7.0) ),int(7.0)), in1)),int(5.0)), abs(( ( mod(res0,( mod(abs(int(3.0)),int(9.0)) + i2 )) + max(max(( divInt(in0,res0) * ( in2 + int(8.0) ) ), divInt(max(i0, i0),( int(5.0) * int(4.0) ))), min(( max(res0, ( int(0.0) - abs(mod(( res0 * abs(i0) ),in2)) )) - in0 ), ( i1 * ( mod(i1,int(5.0)) * i1 ) ))) ) * in2 ))) ), min(int(1.0), i0)),divInt(( in1 + i1 ),min(( in1 + abs(i1) ), ( in1 * max(abs(max(min(int(3.0), i2), int(4.0))), int(4.0)) )))) - max(( int(0.0) - max(mod(min(int(2.0), mod(divInt(int(2.0),in0),res0)),mod(i2,i2)), abs(min(min(max(divInt(( int(8.0) + int(7.0) ),divInt(res0,( mod(( int(7.0) * max(int(3.0), in2) ),i0) * i2 ))), int(2.0)), min(int(6.0), ( int(6.0) + ( mod(max(int(9.0), ( min(i1, max(( max(int(1.0), int(7.0)) * min(( ( min(in1, in0) + ( abs(abs(min(i1, int(7.0)))) * ( int(6.0) - mod(in1,in0) ) ) ) + in2 ), min(max(in0, int(0.0)), int(4.0))) ), ( mod(int(0.0),in2) * int(1.0) ))) - in0 )),in1) * ( divInt(i0,i2) - min(max(int(0.0), max(res0, i1)), ( int(8.0) + in0 )) ) ) ))), in0))) ), divInt(int(7.0),mod(int(0.0),min(i0, divInt(abs(int(5.0)),min(int(6.0), in0)))))) ) \\ge divInt(int(8.0),min(int(1.0), divInt(res0,abs(in1))))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 52, 52, 5, 6, 0, 7, 5, 2, 0, 1, 70, 2, 243, 69, 54, 39, 31]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 0, 2, 0, 1, 1], [0, 1], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 4, 6, 2, 2, 3, 7, 4, 9, 7, 2, 6], [4, 1], [1, 2], [], [1, 0, 1], [0, 0], [0], [], [0], [4, 1, 2, 2, 1, 6, 2, 0, 0, 0, 1, 5, 1, 5, 6, 1, 5, 0, 5], [0, 0, 0], [2, 3, 2, 0, 3, 3, 3, 0, 3, 0, 0, 2, 2, 3, 3, 3, 0, 1, 1, 3, 1, 1, 3, 0, 1, 0, 1, 2, 2, 1, 1, 3, 2, 3, 0, 0, 0, 1, 3, 2, 0, 0, 0, 0, 2, 1, 0, 3, 2, 1, 3, 2, 1, 2, 0, 3, 1], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0], [2, 0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2], [1, 0, 1, 0, 2, 2, 2], [1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(( in1 - min(min(abs(i1), max(i2, i2)), mod(( abs(max(max(i1, int(4.0)), int(4.0))) + min(int(4.0), int(6.0)) ),max(res0, int(2.0)))) )) - i2 ) \\le int(2.0):{:\\ni0 = divInt(divInt(int(3.0),int(7.0)),min(divInt(min(i0, i0),i1), int(4.0)))\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nin2 = max(( i1 + in2 ), res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = in2\\nb2 = ( int(9.0) * i0 ) \\g abs(mod(int(7.0),abs(( int(2.0) * ( in2 * abs(int(6.0)) ) ))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 13, 13, 2, 2, 0, 3, 2, 1, 0, 1, 19, 3, 57, 12, 16, 7, 5]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1], [1, 2], [4, 2], [], [0], [0, 1, 1], [0, 0], [3], [], [], [3, 4, 2, 1, 6, 5, 4, 4, 3], [0], [2, 3, 2, 3, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1], [0, 1, 2], [2, 0], [1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( min(( max(int(1.0), abs(mod(in0,in1))) * i2 ), i1) + res0 ) \\le in2 and in1 == in1 ):{:\\nin0 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 2, 0, 1, 3, 2, 1, 0, 0, 9, 1, 16, 3, 3, 2, 1]}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 1], [0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 9, 4, 9, 9, 7, 8, 5, 9, 3, 9, 8, 7, 9, 9, 1, 8, 2, 2, 0, 3, 0, 8, 5, 6, 4, 1, 3], [0], [], [], [1], [0], [], [], [1], [1, 6, 5, 2, 0, 0, 2, 4, 6, 6, 2, 2, 2, 4, 3, 0, 5, 4, 3, 2, 4, 4, 3, 0, 3, 4, 1, 2, 4, 0, 0, 2, 1, 0, 5, 1, 6, 3, 1], [1, 1, 0], [0, 2, 3, 2, 0, 2, 0, 2, 1, 3, 2, 3, 2, 0, 2, 3, 2, 1, 2, 3, 3, 2, 3, 1, 3, 3, 1, 2, 0, 2, 1, 1, 1, 2, 2, 2, 3, 0, 0, 2, 2, 0, 0, 2, 3, 2, 2, 2, 0, 0, 3, 2, 2, 2, 1, 3, 2, 3, 0, 0, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 2, 2, 2, 0, 2, 1, 0, 3, 0, 2, 0, 1, 0, 3, 0, 0, 1, 1, 0, 1, 3, 2, 2, 0, 3, 0, 2, 3, 3, 1, 1, 1, 1, 1, 2, 1, 2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 2, 3, 0, 0, 2, 0, 1, 0, 3, 0, 3, 2, 0, 3, 1, 2, 2, 3, 3, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 1, 2, 0, 1, 2, 1, 0, 1, 0, 2, 2, 2], [2, 2, 0, 2, 2, 2, 2, 0, 0, 1, 2, 1, 0, 1, 0, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 0, 2], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\l divInt(max(( res0 * ( in2 * mod(int(5.0),max(( abs(( i2 + ( abs(divInt(int(8.0),( abs(abs(( abs(int(9.0)) * abs(min(int(4.0), ( i0 * ( int(9.0) * int(9.0) ) ))) ))) * int(7.0) ))) + ( divInt(( min(i0, i2) + mod(( in1 - res0 ),mod(min(( ( divInt(res0,i2) * min(( divInt(( int(8.0) - min(divInt(abs(i2),i2), ( ( mod(divInt(( int(5.0) + in1 ),in0),int(9.0)) - abs(divInt(divInt(( i0 + mod(int(3.0),in2) ),max(in1, mod(in0,int(9.0)))),i2)) ) + abs(in1) )) ),in1) * int(8.0) ), int(7.0)) ) * in0 ), int(9.0)),min(( ( i0 * max(in0, mod(abs(max(int(9.0), int(1.0))),int(8.0))) ) * int(2.0) ), int(2.0)))) ),( int(0.0) - mod(in1,int(3.0)) )) + int(0.0) ) ) )) - divInt(i1,int(8.0)) ), i2)) ) ), in1),int(5.0)):{:\\ni0 += mod(min(i0, i2),divInt(i1,int(6.0)))\\ni0 *= in2\\n:}else:{:\\ni1 = max(res0, min(( in0 + abs(int(4.0)) ), ( mod(abs(abs(i1)),int(1.0)) * int(3.0) )))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 29, 29, 1, 0, 0, 1, 1, 0, 0, 1, 39, 3, 138, 46, 27, 27, 21]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 1], [1, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 5, 6, 7, 0, 6, 7, 2, 0, 7, 1, 0, 7, 3, 8, 2, 2, 4, 7, 3], [4, 0, 5], [1], [0], [1, 0, 1, 1, 0], [0, 0, 0], [3, 1], [1], [1], [1, 5, 4, 0, 1, 4, 6, 0, 4, 2, 2, 3, 3, 1, 6, 1, 0, 6, 4, 6, 5], [1], [2, 3, 3, 3, 0, 1, 2, 2, 1, 1, 0, 2, 2, 3, 3, 3, 1, 1, 0, 3, 3, 1, 1, 3, 2, 3, 1, 0, 0, 0, 2, 0, 3, 3, 3, 2, 3, 2, 3, 0, 3, 3, 1, 0, 1, 2, 0, 2, 3, 3, 2, 0, 0, 1, 3, 2, 3, 0, 1, 0, 3, 3, 3, 0, 1, 3, 1, 2, 0, 1, 0, 2, 0, 0, 3, 0, 3, 1, 3, 1, 2, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [2, 0, 1, 2, 1, 2, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 2, 0, 1, 0, 0, 1, 1], [0, 1, 2, 2, 1, 2, 2, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(abs(min(max(i1, int(8.0)), ( ( int(9.0) + int(5.0) ) - in2 ))),( ( abs(max(abs(int(6.0)), int(7.0))) * in1 ) * abs(abs(int(0.0))) )) \\le int(6.0):{:\\nif ( max(mod(max(int(7.0), i0),i1), in1) \\l ( res0 - min(abs(min(mod(max(( min(i0, abs(abs(int(2.0)))) * in1 ), int(0.0)),( i2 * divInt(max(min(( i2 + in0 ), int(7.0)), min(divInt(abs(in0),int(1.0)), i1)),abs(min(max(res0, int(0.0)), min(int(7.0), divInt(i1,int(3.0)))))) )), i0)), ( res0 + in1 )) ) and min(res0, max(int(8.0), max(int(2.0), ( int(2.0) + int(4.0) )))) != int(7.0) ):{:\\nb1 = False\\n:}else:{:\\nin2 -= int(3.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 21, 21, 3, 1, 1, 5, 3, 2, 1, 1, 21, 1, 85, 16, 28, 11, 6]}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 1], [], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 1, 5, 2, 6, 2, 4, 3, 7, 3, 7], [5, 3, 5, 2], [0, 0], [1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0], [3, 2, 3, 3, 1], [1], [], [3, 5, 4, 6, 4, 1, 5, 5, 4, 5, 6, 4, 1], [0, 1], [1, 0, 3, 2, 3, 2, 2, 3, 1, 0, 2, 2, 1, 3, 1, 3, 3, 0, 1, 3, 0, 1, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [2, 2, 2, 1, 0, 2, 0], [0, 2, 0, 0, 2, 0, 2, 2, 1], [1, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(5.0) != in0\\nin2 = abs(( abs(( ( abs(int(4.0)) + in1 ) * ( mod(int(1.0),max(int(5.0), min(abs(res0), int(2.0)))) + min(in1, int(6.0)) ) )) + ( i1 * in2 ) ))\\nin2 += ( int(2.0) * in1 )\\nb0 = ( not ( ( False or int(4.0) \\ge in2 ) and ( res0 * ( in1 - i1 ) ) != mod(int(3.0),int(7.0)) ) or int(3.0) == int(7.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 12, 12, 4, 2, 3, 9, 4, 5, 1, 0, 13, 2, 40, 10, 7, 9, 2]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 0, 2, 2, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 2, 2, 6, 7, 0, 4, 5, 3, 1, 0, 4, 2, 7, 8, 3, 0, 9, 4, 7, 5, 7, 9, 4, 7, 2, 5, 3, 9, 9, 2, 4, 5, 2, 6, 3, 5, 8, 9, 1, 5, 0, 7, 3, 8, 9, 8, 0, 0, 7, 2, 3, 1, 1, 8, 8, 0, 6, 4, 0, 1, 1, 1, 3, 7], [2, 0], [2, 2, 0, 0], [], [0, 1, 0, 1, 0], [0, 0], [0, 1, 0], [0], [1, 0], [6, 2, 6, 6, 1, 2, 0, 5, 0, 4, 3, 1, 6, 6, 1, 6, 0, 3, 4, 1, 4, 1, 3, 1, 4, 6, 3, 4, 1, 2, 2, 4, 3, 1, 2, 0, 5, 1, 6, 2, 5, 4, 2, 1, 4, 1, 3, 2, 1, 0, 5, 2, 4, 1, 0, 2, 0, 0, 2, 4, 5, 6, 3, 2, 5, 1, 3], [0], [3, 0, 3, 3, 2, 2, 1, 1, 3, 1, 3, 3, 3, 2, 1, 1, 3, 1, 3, 2, 1, 2, 3, 1, 3, 3, 3, 2, 1, 1, 2, 1, 1, 2, 0, 0, 3, 2, 2, 2, 3, 3, 1, 3, 0, 2, 3, 2, 0, 3, 2, 3, 2, 0, 1, 1, 0, 2, 3, 0, 1, 2, 2, 2, 3, 1, 0, 1, 1, 2, 3, 2, 0, 3, 3, 0, 2, 3, 3, 0, 2, 1, 1, 3, 3, 3, 2, 1, 2, 0, 0, 1, 3, 2, 2, 3, 1, 0, 1, 0, 3, 1, 3, 1, 3, 2, 0, 0, 2, 3, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 1, 1, 1, 0, 0, 2, 2, 2, 1, 2, 1, 3, 1, 2, 0, 2, 3, 1, 1, 1, 1, 3, 3, 1, 0, 3, 3, 3, 3, 2, 3, 0, 3, 3, 0, 1, 3, 3, 1, 0, 2, 1, 3, 2, 0, 3, 3, 1, 3, 3, 0, 0, 1, 0, 3, 3, 2, 1, 3, 1, 0, 1, 2, 3, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 3, 2, 3, 2, 1, 3, 1, 0, 2, 1, 0, 3, 0, 0, 0, 3, 2, 3, 1, 0, 0, 2, 0, 0, 3, 1, 3, 2, 1, 1, 3, 2, 1, 1, 2, 2, 3, 3, 3, 1, 1, 2, 2, 0, 1, 1, 0, 2, 2, 3, 0, 3, 2, 3, 3, 2, 3, 0, 0, 1, 0, 3, 2, 1, 0, 3, 0, 0, 2, 3, 3, 0, 1, 2, 1, 0, 2, 0, 2, 2, 0, 0, 0, 3, 0, 0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 0, 2, 1, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 1, 0, 0, 2, 0, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 0, 1, 2, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 2, 2, 1, 1, 1, 0, 1, 1, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 1, 0, 1, 2, 1, 1, 2, 2, 0], [0, 2, 2, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 2, 0, 2, 2, 1, 1, 1, 2, 2, 0, 0, 0, 2], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 88, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = min(res0, min(abs(divInt(divInt(int(8.0),int(6.0)),max(int(2.0), min(abs(min(divInt(int(2.0),int(6.0)), abs(int(7.0)))), max(divInt(int(0.0),( min(int(4.0), min(abs(abs(mod(int(5.0),int(3.0)))), ( int(1.0) + int(0.0) ))) * ( i2 * res0 ) )), max(( ( ( max(abs(int(4.0)), max(res0, mod(min(( i1 - max(( abs(mod(i2,int(2.0))) + int(7.0) ), i0) ), ( abs(in2) * int(8.0) )),( divInt(divInt(max(int(3.0), i0),int(0.0)),int(9.0)) + mod(min(mod(in1,min(abs(in0), ( min(max(i1, ( int(4.0) - int(7.0) )), abs(min(max(mod(int(5.0),( res0 + res0 )), int(7.0)), min(( divInt(min(int(9.0), i1),int(4.0)) + res0 ), max(int(7.0), min(int(2.0), abs(( i0 * in0 )))))))) + ( min(int(5.0), in1) + mod(min(( i1 * mod(min(min(min(int(3.0), int(9.0)), int(9.0)), in1),i1) ), ( divInt(( int(2.0) + divInt(int(4.0),abs(int(5.0))) ),( in0 - ( max(int(2.0), int(6.0)) - int(3.0) ) )) - int(5.0) )),min(max(int(8.0), i1), abs(min(max(min(divInt(max(in1, max(min(res0, int(9.0)), max(min(int(1.0), in0), ( int(5.0) + min(( in1 * max(min(int(0.0), abs(abs(i1))), i2) ), int(7.0)) )))),i2), max(max(divInt(int(3.0),max(int(8.0), in1)), int(9.0)), divInt(min(in0, int(8.0)),i1))), divInt(i2,i0)), in2)))) ) ))), i1),( res0 + i2 )) )))) * int(0.0) ) * max(divInt(max(( int(0.0) - abs(int(7.0)) ), in2),( int(2.0) - in1 )), min(i2, i1)) ) - in1 ), min(divInt(abs(int(3.0)),i1), in0))))))), divInt(i2,i1))) == min(int(1.0), abs(( int(1.0) * int(8.0) )))\\nif True:{:\\nif abs(( int(8.0) * int(0.0) )) \\l ( divInt(min(abs(min(int(6.0), int(4.0))), divInt(divInt(i0,int(0.0)),int(1.0))),in2) + mod(divInt(min(i2, max(( min(max(mod(abs(in1),i1), int(1.0)), i0) + max(mod(int(1.0),i2), max(i0, i0)) ), ( abs(abs(i2)) + int(3.0) ))),( int(7.0) * in1 )),divInt(in2,divInt(mod(res0,in0),i2))) ):{:\\nb0 = b0\\n:}\\n:}else:{:\\nin2 = min(i1, in0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 66, 66, 2, 4, 0, 5, 2, 3, 1, 2, 67, 1, 282, 66, 84, 32, 34]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 8, 3, 1, 9, 1, 2, 7, 2, 5, 3, 2, 3, 6, 8, 7, 9, 2], [5, 1], [1, 0], [0], [1, 0, 1, 0], [0, 0], [3, 0], [], [1], [5, 4, 3, 1, 4, 6, 6, 2, 5, 3, 1, 3, 3, 2, 5, 6, 6, 3, 4], [1], [0, 0, 2, 1, 2, 1, 3, 2, 0, 3, 3, 2, 3, 3, 3, 2, 2, 0, 2, 2, 3, 2, 0, 1, 0, 1, 2, 2, 1, 3, 1, 3, 3, 2, 2, 2, 0, 3, 2, 2, 3, 3, 1, 1, 1, 3, 1, 0, 2, 1, 0, 3, 0, 2, 0, 3, 2, 1, 3, 2, 1, 2, 3, 1, 0, 0, 0, 3, 0, 1, 3, 0, 2, 0, 2, 3, 1, 0, 1, 1, 3, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 1, 0, 2, 2, 1, 2, 1, 2, 2, 2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2], [1, 2, 2, 2, 0, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 != in1:{:\\nb1 = ( mod(int(7.0),( int(1.0) - abs(( in0 * max(min(divInt(abs(abs(max(( ( i1 * divInt(( abs(mod(in1,int(8.0))) * res0 ),int(3.0)) ) + divInt(divInt(int(1.0),max(int(9.0), abs(abs(( ( ( res0 - abs(divInt(mod(min(abs(int(1.0)), int(2.0)),int(7.0)),max(int(2.0), i2))) ) + ( int(5.0) * in2 ) ) + abs(in0) ))))),mod(i1,abs(( int(3.0) + min(( int(2.0) + ( max(int(3.0), in0) * in0 ) ), i2) )))) ), abs(in2)))),int(6.0)), abs(res0)), mod(res0,( min(int(8.0), in0) * int(7.0) ))) )) )) \\g int(9.0) and b0 )\\n:}else:{:\\nin1 -= abs(int(2.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 19, 19, 2, 2, 1, 4, 2, 2, 0, 1, 19, 1, 82, 23, 22, 14, 10]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1], [0, 2, 0, 1], [0], [0, 0, 0], [1, 1, 1], [2, 8, 6], [1, 4], [2, 0, 1], [1], [1, 0, 0, 0, 1, 0], [0, 0], [3, 1, 1, 1], [1, 1, 0], [1], [3, 1, 2], [], [0, 0, 1, 2, 2, 0, 1, 1], [1, 1], [], [], [0, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in0 \\g i1\\nif ( False or False ):{:\\nb0 = int(2.0) \\le divInt(divInt(i2,int(8.0)),int(6.0))\\n:}else:{:\\nb1 = True\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 3, 3, 2, 3, 1, 6, 2, 4, 3, 1, 3, 0, 8, 2, 0, 0, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 0, 0, 2, 2, 1, 1, 2, 1, 1, 0, 0], [0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 0, 5, 9, 4, 8, 1, 9, 2, 3, 7, 0, 7, 9, 5, 4, 5, 4, 2, 8, 0, 2, 8, 1, 2, 7, 2, 8, 3, 7, 5, 0, 5, 1, 5, 3, 1, 7, 4, 1, 8, 9, 3, 9, 3, 4, 5, 7, 8, 2, 4, 2], [2, 0, 0, 2, 1, 5], [1, 0, 0, 2, 1], [], [0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [1, 1, 1], [0, 1, 1], [0, 0], [5, 2, 1, 2, 1, 6, 4, 6, 3, 0, 5, 6, 1, 6, 3, 4, 6, 5, 4, 2, 5, 1, 5, 3, 0, 6, 2, 2, 1, 2, 6, 4, 5, 4, 0, 0, 5, 4, 6, 5, 2, 4, 2, 2, 5, 3, 2, 1, 5, 3, 0, 3, 5, 5], [0, 0, 1], [3, 2, 0, 2, 2, 1, 0, 3, 1, 2, 2, 3, 0, 2, 2, 1, 3, 3, 0, 2, 3, 2, 1, 3, 3, 0, 3, 3, 3, 0, 1, 3, 3, 0, 2, 1, 0, 0, 0, 2, 1, 2, 2, 1, 1, 3, 3, 1, 2, 2, 1, 2, 0, 0, 2, 0, 1, 1, 0, 3, 0, 3, 1, 3, 1, 1, 1, 2, 1, 3, 2, 2, 2, 0, 3, 3, 1, 3, 2, 1, 1, 1, 3, 1, 0, 0, 0, 3, 1, 1, 0, 2, 2, 1, 1, 2, 0, 2, 3, 3, 0, 2, 2, 0, 0, 3, 2, 3, 2, 0, 3, 0, 0, 2, 0, 2, 0, 3, 1, 0, 0, 2, 0, 3, 0, 2, 1, 3, 0, 3, 0, 0, 0, 3, 1, 2, 2, 1, 2, 1, 3, 2, 0, 1, 2, 1, 1, 1, 1, 3, 1, 1, 3, 3, 0, 0, 1, 3, 3, 2, 2, 3, 3, 3, 1, 2, 1, 3, 0, 2, 0, 1, 3, 2, 1, 1, 2, 3, 0, 2, 2, 2, 0, 3, 3, 0, 3, 1, 1, 0, 2, 1, 2, 1, 0, 3, 2, 0, 1, 3, 0, 0, 3, 1, 3, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 2, 0, 0, 0, 2, 2, 0, 0, 2, 0, 2, 1, 2, 0, 0, 2, 2, 1, 1, 0, 0, 1, 1, 0, 1, 2, 2, 0, 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1], [2, 1, 2, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin2 = min(( i2 * ( divInt(int(0.0),i1) - max(int(5.0), ( mod(max(i2, ( ( int(0.0) * max(abs(i1), mod(min(mod(int(5.0),min(min(res0, abs(abs(min(in1, int(9.0))))), min(abs(res0), divInt(int(4.0),in0)))), i0),in2)) ) + divInt(int(8.0),mod(( int(1.0) + int(9.0) ),min(abs(int(2.0)), ( mod(int(3.0),divInt(res0,i1)) - ( res0 + int(7.0) ) )))) )),int(0.0)) + in0 )) ) ), max(in1, abs(int(7.0))))\\n:}\\nb1 = min(int(9.0), int(5.0)) == int(4.0)\\nloopBreak% = 0\\nwhile False:{:\\nif False:{:\\nres0 = mod(int(5.0),min(mod(( divInt(in2,abs(abs(int(4.0)))) + max(( int(2.0) * int(8.0) ), int(0.0)) ),max(int(2.0), in1)), i2))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = in2 \\l min(int(8.0), int(1.0))\\nloopBreak% = 0\\nwhile i1 \\l divInt(( int(2.0) + int(7.0) ),( in2 - ( min(max(in0, ( mod(i0,res0) + max(mod(min(divInt(i2,max(i2, i1)), ( i2 - divInt(res0,abs(int(2.0))) )),in1), in2) )), mod(in1,abs(i0))) - ( int(8.0) + min(i0, max(in2, in1)) ) ) )):{:\\nres0 -= in2\\nb0 = max(int(3.0), ( ( int(7.0) + mod(int(5.0),max(( i2 + int(0.0) ), divInt(int(5.0),int(1.0)))) ) - int(5.0) )) == int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = max(int(1.0), int(7.0)) \\g abs(min(in1, i2))\\nb1 = int(4.0) != abs(abs(mod(( min(max(max(int(1.0), mod(int(8.0),max(i2, divInt(in2,int(9.0))))), max(divInt(int(3.0),int(9.0)), ( max(in0, ( ( divInt(i2,max(min(i1, max(int(3.0), int(4.0))), in2)) - divInt(int(5.0),( int(7.0) * in0 )) ) * max(( i0 - int(8.0) ), abs(in0)) )) - in2 ))), abs(int(2.0))) + max(int(4.0), in2) ),int(2.0))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 53, 53, 6, 5, 0, 9, 6, 3, 3, 2, 54, 3, 208, 51, 53, 26, 26]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [3, 0], [4], [1], [], [0, 1], [0], [2], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not int(3.0) \\le int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 0, 2, 1], [1, 1, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 2, 9, 2, 2, 1, 3, 7, 7, 9, 2, 0, 1, 9, 0, 5, 0, 5, 7, 6, 7, 7, 3, 2, 0, 3, 0, 8, 3, 9, 1, 8, 4, 5, 8, 6, 7, 6, 4, 6, 7, 9, 8, 7, 1, 1, 6, 8, 5, 0, 4, 1, 7, 3, 8, 5, 8, 8, 9, 1, 0, 7, 2, 6], [2, 1, 1], [2, 0], [], [0, 1, 0, 0, 1, 1], [0, 0, 0], [2, 2, 0], [], [], [6, 6, 3, 3, 2, 5, 0, 1, 0, 0, 2, 4, 1, 6, 0, 3, 2, 2, 4, 2, 4, 6, 4, 1, 1, 0, 2, 6, 0, 5, 1, 6, 6, 5, 0, 1, 5, 0, 0, 5, 6, 5, 2, 3, 5, 1, 4, 6, 5, 1, 3, 4, 2, 1, 5, 2, 0, 2, 5, 1, 3, 5, 5, 5, 6, 0, 3, 4, 1, 1, 5, 6, 5, 1, 4, 2], [1], [3, 2, 3, 1, 1, 3, 1, 0, 0, 2, 1, 2, 3, 3, 1, 2, 3, 3, 2, 0, 1, 2, 3, 0, 0, 2, 0, 0, 0, 3, 3, 3, 2, 1, 3, 1, 3, 3, 3, 0, 2, 3, 2, 1, 3, 3, 0, 0, 0, 1, 3, 3, 3, 0, 2, 3, 1, 1, 2, 0, 3, 1, 3, 1, 0, 2, 2, 3, 2, 2, 3, 3, 3, 1, 0, 3, 2, 1, 2, 0, 3, 3, 1, 1, 2, 3, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 3, 2, 3, 3, 0, 1, 1, 2, 1, 3, 3, 2, 3, 1, 1, 0, 0, 2, 1, 2, 3, 3, 2, 2, 3, 1, 1, 2, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 3, 2, 2, 1, 0, 3, 0, 2, 1, 2, 3, 2, 0, 0, 1, 0, 0, 1, 2, 3, 0, 2, 2, 1, 1, 3, 1, 3, 1, 2, 0, 0, 2, 0, 1, 3, 3, 2, 0, 3, 1, 0, 2, 0, 3, 2, 3, 0, 1, 0, 0, 3, 0, 3, 1, 3, 3, 3, 3, 2, 1, 3, 3, 0, 3, 2, 1, 0, 2, 3, 2, 1, 0, 1, 0, 3, 2, 2, 3, 0, 1, 2, 0, 0, 2, 0, 0, 3, 2, 0, 0, 1, 3, 0, 3, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 0, 0, 0, 1, 1, 2, 1, 1, 3, 2, 1, 3, 0, 0, 2, 0, 1, 0, 3, 2, 0, 2, 2, 3, 3, 1, 2, 0, 1, 3, 2, 0, 2, 1, 1, 0, 2, 2, 3, 1, 2, 1, 0, 1, 3, 1, 2, 0, 3, 0, 2, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [2, 1, 0, 1, 1, 0, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 2, 0, 0, 0, 2, 1, 0, 1, 1, 2, 0, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 0, 2, 2, 1, 0, 0, 1, 2, 0, 0, 2, 0, 0, 2, 0, 0, 1, 2, 2, 1, 1, 2, 2, 2], [0, 0, 1, 0, 0, 1, 2, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 1, 1, 2, 2, 2, 0, 2, 1, 0, 0, 2, 0, 1, 1, 2, 0, 2], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not abs(( max(int(6.0), int(0.0)) + min(int(2.0), res0) )) == res0:{:\\nloopBreak% = 0\\nwhile not b2:{:\\nb0 = ( int(9.0) + mod(max(max(int(2.0), mod(min(abs(mod(in0,int(2.0))), ( abs(in0) - i2 )),( in2 + i0 ))), i1),min(abs(abs(mod(int(1.0),abs(int(3.0))))), max(max(min(i0, ( max(mod(int(7.0),min(abs(i0), i2)), in1) + int(7.0) )), min(abs(min(i1, ( min(int(9.0), int(2.0)) - ( res0 * min(int(0.0), min(int(1.0), i0)) ) ))), divInt(( abs(mod(divInt(max(max(max(int(9.0), in0), max(( int(0.0) + ( i2 + max(min(int(5.0), int(0.0)), mod(min(int(5.0), i2),in1)) ) ), i2)), int(7.0)),( in1 - res0 )),in1)) - i1 ),mod(max(divInt(max(max(i1, int(6.0)), int(7.0)),( int(7.0) - abs(max(mod(abs(int(3.0)),int(2.0)), i0)) )), i2),mod(int(0.0),( min(min(( divInt(min(int(3.0), int(0.0)),( ( int(8.0) + ( res0 + ( int(3.0) - divInt(divInt(divInt(( abs(max(min(mod(divInt(divInt(max(divInt(divInt(int(9.0),i0),max(in2, divInt(int(1.0),divInt(abs(divInt(i1,res0)),int(8.0))))), res0),in2),int(4.0)),mod(min(i0, mod(( int(5.0) + int(8.0) ),abs(int(6.0)))),max(int(7.0), ( i1 - in2 )))), ( i0 * int(6.0) )), abs(max(( i0 - max(int(4.0), in2) ), mod(res0,abs(( abs(in2) - int(6.0) ))))))) * i2 ),in0),max(in2, abs(int(7.0)))),abs(min(abs(abs(divInt(int(9.0),max(min(i1, min(mod(int(8.0),in1), mod(max(( int(7.0) * res0 ), int(1.0)),in2))), abs(mod(mod(min(i1, int(1.0)),divInt(in0,in1)),( i2 * i1 ))))))), min(mod(in2,i2), int(6.0))))) ) ) ) + abs(i0) )) * min(min(divInt(mod(mod(int(8.0),abs(min(( ( int(5.0) - i2 ) + in2 ), i1))),int(0.0)),int(4.0)), divInt(int(1.0),int(7.0))), min(divInt(int(3.0),max(in0, in2)), mod(in2,int(8.0)))) ), in2), abs(( res0 + mod(( abs(max(int(5.0), mod(i0,int(8.0)))) * max(( in0 + ( int(8.0) - int(9.0) ) ), in1) ),mod(( abs(int(1.0)) - divInt(int(0.0),i1) ),int(7.0))) ))) * abs(int(2.0)) )))))), ( i1 + abs(in2) )))) ) \\g divInt(res0,int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in2 \\g i1:{:\\nin1 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 65, 65, 3, 2, 0, 6, 3, 3, 0, 0, 76, 1, 302, 80, 82, 35, 46]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 0, 1, 2, 2, 2, 0], [1, 1, 0, 1], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 8, 5, 7, 0, 4, 2, 1, 5, 5, 1, 6, 2, 8, 7, 1, 7, 9, 7, 5, 0, 5, 9, 5, 1, 8, 1, 2, 0, 5, 4, 9, 1, 1, 6, 7, 5, 7, 0, 2, 6, 3, 6, 3, 1, 5, 7, 0, 0, 1, 7, 0, 6, 4, 2, 7, 2, 2], [5, 2, 2, 1, 0], [0, 2, 2, 1], [1], [1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 3, 2, 0], [], [0], [5, 1, 0, 1, 0, 6, 2, 4, 3, 5, 2, 1, 1, 0, 1, 3, 6, 1, 0, 2, 5, 3, 6, 4, 5, 0, 3, 3, 0, 1, 2, 6, 0, 1, 5, 2, 3, 4, 0, 3, 5, 5, 3, 1, 1, 2, 6, 2, 3, 4, 2, 2, 3, 6], [1, 0], [3, 0, 3, 1, 3, 0, 2, 3, 3, 3, 0, 3, 0, 0, 2, 1, 0, 3, 3, 0, 2, 2, 2, 0, 1, 2, 2, 2, 3, 1, 0, 1, 2, 0, 2, 3, 2, 2, 1, 1, 3, 2, 0, 0, 2, 0, 1, 2, 3, 1, 1, 1, 0, 0, 2, 3, 3, 1, 1, 2, 3, 1, 2, 1, 3, 1, 0, 0, 3, 2, 2, 1, 1, 3, 1, 2, 0, 1, 0, 3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 2, 3, 2, 0, 3, 1, 2, 0, 0, 0, 3, 1, 3, 2, 3, 2, 1, 2, 2, 2, 2, 2, 3, 3, 1, 0, 2, 0, 1, 3, 0, 1, 0, 0, 1, 1, 2, 3, 1, 2, 1, 2, 2, 3, 0, 1, 0, 2, 2, 1, 1, 0, 1, 3, 2, 3, 0, 3, 3, 2, 2, 2, 0, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 3, 2, 0, 2, 0, 1, 2, 0, 1, 1, 3, 2, 0, 2, 1, 1, 3, 1, 0, 3, 1, 3, 1, 0, 2, 1, 3, 1, 0, 1, 2, 1, 2, 3, 3, 1, 2, 1, 2, 1, 0, 2, 0, 1, 0, 1, 0, 0, 3, 2, 0, 0, 1, 2, 1, 1, 2, 1, 3, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 1, 1, 0, 0, 2, 2, 1, 0, 0, 1, 2, 0, 1, 1, 2, 2, 2, 1, 0, 2, 0, 1, 2, 1, 2, 1, 0, 0, 1, 0, 2, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 1, 0, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 2, 2, 1, 1, 2, 2, 0, 1, 1, 0, 2, 2, 2, 1, 1, 0, 2, 2], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(in2) != max(int(5.0), max(i1, mod(min(min(abs(i0), abs(i1)), i0),mod(int(2.0),res0)))):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= max(min(in1, mod(mod(divInt(in0,int(8.0)),( divInt(( min(int(5.0), in2) - int(7.0) ),( i2 + ( max(( divInt(int(0.0),int(4.0)) + abs(mod(i1,i1)) ), ( i0 * int(2.0) )) - ( min(int(1.0), int(5.0)) - int(5.0) ) ) )) + i1 )),in0)), divInt(max(max(int(1.0), int(6.0)), mod(abs(int(2.0)),mod(int(8.0),abs(int(7.0))))),res0))\\nb2 = i1 == abs(mod(( int(1.0) * int(7.0) ),max(int(9.0), divInt(i0,int(7.0)))))\\nloopBreak% = 0\\nwhile i2 == min(abs(mod(min(max(abs(int(5.0)), ( in2 + int(0.0) )), in0),divInt(max(( res0 - abs(int(5.0)) ), ( in1 + in2 )),i0))), max(int(9.0), min(divInt(min(mod(int(5.0),mod(( ( divInt(( max(min(int(1.0), in0), mod(in0,int(8.0))) - abs(i0) ),int(1.0)) * i1 ) * i2 ),int(2.0))), int(0.0)),divInt(max(int(5.0), ( int(4.0) - ( mod(max(res0, int(9.0)),i0) - divInt(( int(1.0) * int(1.0) ),i1) ) )),int(6.0))), max(( max(in2, abs(abs(divInt(divInt(( i2 * ( int(7.0) + ( in0 - mod(( ( int(5.0) - divInt(( abs(( in1 + ( i0 * int(7.0) ) )) * divInt(in0,int(0.0)) ),int(2.0)) ) * min(( in2 - mod(int(6.0),int(3.0)) ), min(int(6.0), in2)) ),min(int(3.0), max(int(1.0), in0))) ) ) ),( int(5.0) - max(int(7.0), i1) )),int(0.0))))) + ( int(0.0) * divInt(min(max(int(1.0), mod(int(7.0),mod(int(0.0),i1))), mod(i2,int(6.0))),res0) ) ), int(4.0))))):{:\\nif ( not i2 \\g in0 or min(mod(in1,i2), int(2.0)) \\l ( int(7.0) * int(2.0) ) ):{:\\nloopBreak% = 0\\nwhile b1:{:\\ni2 = mod(int(2.0),max(in0, res0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 59, 59, 5, 4, 1, 9, 5, 4, 0, 1, 54, 2, 224, 65, 48, 31, 35]}, {"genotype": [[0], [1], [0], [], [1], [1], [5], [], [], [], [], [], [], [], [], [4, 3], [0], [3, 1, 0], [], [0], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(int(5.0), in0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 1, 0, 0, 2, 0, 1, 2, 2, 2, 0, 1, 1, 1], [0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 0, 5, 9, 6, 7, 7, 5, 4, 8, 2, 0, 1, 3, 1, 6, 1, 7, 0, 3, 5, 9, 1, 6, 3, 7, 6, 5, 3, 2, 3, 0, 3, 1, 0, 5, 8, 2, 7, 2, 7, 6, 3, 5, 8, 7, 5, 8, 9, 7, 7, 9, 7, 2, 8, 4, 9, 3, 7, 5, 7, 4, 8, 0, 2, 8, 7, 2, 2, 2, 3, 8, 5, 3, 9, 6, 6, 0, 7, 8, 2, 6, 7, 8, 6, 8, 8, 3], [3, 1, 3, 0, 4, 1, 5, 5, 5, 4, 4], [1, 0, 1, 2, 0, 1], [0, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 3, 0, 3], [], [0, 1, 0], [4, 2, 3, 4, 3, 5, 1, 3, 5, 3, 2, 1, 5, 3, 5, 4, 2, 4, 1, 2, 3, 3, 6, 4, 2, 4, 5, 0, 6, 6, 4, 1, 4, 4, 4, 3, 4, 3, 2, 6, 0, 1, 1, 1, 6, 5, 1, 4, 4, 5, 2, 4, 5, 1, 0, 6, 3, 3, 0, 6, 1, 1, 1, 2, 0, 0, 2, 4, 1, 5, 6, 5, 0, 6, 1, 5, 5, 2, 5, 4, 5, 1, 5, 5, 0, 4, 2, 0, 4, 0, 2, 2, 3, 1, 3, 0, 1, 2, 4], [0, 1, 1, 1, 1], [3, 2, 0, 2, 0, 1, 1, 1, 0, 3, 0, 3, 0, 3, 0, 0, 3, 1, 3, 2, 2, 2, 0, 0, 3, 1, 0, 1, 2, 3, 0, 1, 1, 3, 0, 3, 2, 2, 2, 3, 2, 0, 0, 1, 0, 1, 2, 3, 0, 3, 3, 2, 1, 2, 3, 3, 1, 3, 3, 0, 2, 2, 3, 2, 0, 1, 3, 1, 3, 2, 1, 2, 3, 3, 0, 0, 2, 2, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 1, 2, 0, 2, 0, 2, 0, 3, 1, 3, 3, 3, 2, 2, 1, 1, 1, 3, 2, 3, 1, 1, 2, 2, 1, 1, 2, 0, 1, 0, 3, 2, 1, 0, 0, 1, 2, 2, 1, 3, 3, 0, 3, 3, 3, 0, 0, 1, 1, 2, 1, 3, 0, 2, 3, 3, 3, 0, 1, 3, 0, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 3, 2, 2, 1, 3, 1, 2, 2, 0, 1, 3, 0, 2, 2, 3, 3, 3, 2, 3, 0, 0, 1, 0, 1, 3, 3, 0, 0, 2, 2, 0, 3, 1, 1, 2, 1, 3, 0, 1, 0, 1, 1, 3, 0, 3, 0, 2, 2, 0, 0, 3, 0, 1, 1, 1, 3, 3, 0, 3, 3, 1, 2, 0, 0, 2, 3, 1, 1, 0, 3, 1, 3, 2, 0, 3, 2, 3, 1, 2, 3, 1, 0, 3, 2, 2, 2, 1, 3, 1, 3, 2, 3, 0, 0, 0, 2, 1, 2, 0, 3, 2, 2, 1, 0, 3, 0, 3, 0, 0, 1, 1, 0, 2, 1, 0, 2, 1, 2, 3, 0, 1, 2, 0, 0, 2, 2, 0, 0, 3, 3, 2, 3, 1, 0, 1, 3, 0, 0, 0, 0, 3, 3, 2, 3, 1, 0, 1, 3, 0, 2, 3, 0, 3, 2, 1, 2, 3, 2, 0, 0, 1, 3, 0, 2, 2, 0, 1, 2, 0, 0, 1, 3, 2, 2, 1, 2, 1, 2, 2, 3, 2, 0, 2, 0, 1, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 3, 0, 1, 1, 3, 2, 1, 3, 0, 1, 0, 2, 1, 1, 1, 3, 0], [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 2, 1, 0, 1, 2, 0, 1, 2, 0, 2, 0, 2, 2, 0, 0, 2, 0, 2, 0, 1, 1, 2, 0, 2, 1, 1, 2, 2, 1, 0, 1, 2, 0, 0, 2, 2, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0, 2, 0, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 0, 2, 0, 2, 2, 1, 1, 1, 2, 0, 0, 1, 1, 0, 0, 0, 2, 2, 1, 2, 0, 1, 2, 1, 2], [1, 1, 0, 1, 0, 1, 2, 1, 0, 2, 0, 1, 0, 2, 1, 1, 1, 2, 1, 0, 1, 1, 2, 2, 1, 0, 0, 1, 0, 2, 2, 1, 2, 2, 2, 2, 1, 1, 0, 1, 2, 1, 1, 2], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(mod(in1,mod(i2,int(2.0))), int(0.0)) \\ge int(0.0):{:\\nb1 = in0 \\g min(in1, max(in0, min(in2, i1)))\\n:}\\nb0 = min(int(5.0), abs(divInt(divInt(( in0 - in2 ),max(int(9.0), in0)),int(6.0)))) \\ge divInt(min(i2, int(7.0)),int(7.0))\\nb1 = ( max(i1, min(( mod(divInt(min(( in2 - in0 ), int(5.0)),in2),int(4.0)) + divInt(abs(in1),max(min(mod(int(8.0),( max(abs(int(2.0)), min(max(i2, mod(mod(abs(( in1 - int(0.0) )),min(int(1.0), abs(( int(3.0) + divInt(min(abs(i1), i2),( ( abs(int(1.0)) - int(6.0) ) * min(min(abs(min(int(1.0), int(7.0))), abs(int(0.0))), ( in0 - ( in0 + ( res0 * min(int(3.0), max(max(abs(( mod(int(5.0),int(9.0)) + int(1.0) )), min(( abs(int(6.0)) - int(3.0) ), mod(( int(7.0) + int(6.0) ),( in1 * int(5.0) )))), i2)) ) ) )) )) )))),max(( int(3.0) - in1 ), in2))), int(2.0))) - ( mod(int(3.0),max(abs(i0), abs(max(min(res0, res0), int(0.0))))) - int(3.0) ) )), divInt(int(1.0),max(in1, divInt(abs(min(min(i1, int(0.0)), abs(in1))),int(5.0))))), in1)) ), abs(( mod(in1,min(int(8.0), in0)) * int(2.0) )))) \\l max(( divInt(int(7.0),min(int(2.0), divInt(( in1 - int(7.0) ),max(in0, divInt(divInt(max(max(max(divInt(min(i2, res0),int(6.0)), i0), int(3.0)), min(min(i1, i1), mod(divInt(i1,min(int(5.0), int(8.0))),divInt(int(7.0),abs(res0))))),int(5.0)),in2))))) + int(8.0) ), int(9.0)) and b2 )\\nif max(i1, max(in1, divInt(( in1 - in2 ),min(i2, int(7.0))))) \\le int(7.0):{:\\nin1 = int(9.0)\\n:}else:{:\\nb0 = abs(min(in2, abs(abs(int(7.0))))) \\g ( i1 - i0 )\\n:}\\nif divInt(abs(int(2.0)),int(8.0)) != res0:{:\\nloopBreak% = 0\\nwhile abs(int(4.0)) != abs(divInt(in0,max(mod(max(int(9.0), ( max(int(3.0), in0) * min(divInt(divInt(( int(7.0) * abs(int(5.0)) ),min(divInt(abs(i0),res0), i1)),divInt(int(7.0),divInt(i1,min(mod(divInt(int(4.0),i1),abs(i2)), abs(i0))))), i0) )),int(8.0)), int(0.0)))):{:\\nloopBreak% = 0\\nwhile ( i2 != ( int(2.0) - in1 ) or ( b1 and ( ( int(8.0) + ( max(i1, int(7.0)) + mod(in2,res0) ) ) \\le ( divInt(in2,i0) - max(max(( abs(int(2.0)) + res0 ), int(2.0)), min(i1, in2)) ) and in2 \\le i2 ) ) ):{:\\nin2 *= min(max(divInt(max(int(2.0), in1),int(3.0)), min(in2, divInt(min(i1, min(divInt(int(8.0),mod(abs(( in2 * in2 )),int(5.0))), abs(i0))),( ( in1 - int(3.0) ) * divInt(i2,i0) )))), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 *= max(divInt(mod(int(6.0),( int(6.0) * divInt(( abs(mod(i0,divInt(i2,int(0.0)))) * ( ( ( min(mod(( i2 - int(7.0) ),int(8.0)), int(2.0)) - in0 ) + max(i1, int(6.0)) ) - int(7.0) ) ),abs(( int(8.0) * max(in0, int(6.0)) ))) )),i0), ( int(8.0) - int(8.0) ))\\n:}\\ni1 -= int(3.0)\\ni2 *= abs(in1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 5, 9, 89, 89, 11, 6, 4, 17, 11, 6, 0, 3, 99, 5, 372, 90, 99, 44, 50]}, {"genotype": [[0], [1, 0, 1, 0, 1, 1], [2, 0, 2, 2, 0, 1], [1, 1, 1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 4, 0, 2, 2, 3, 0, 1, 7, 4, 6, 0, 1, 8, 8, 3, 4, 0, 1, 9, 3, 3, 2, 6, 1], [1, 5, 0, 3], [0, 1, 1, 1], [1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0], [2, 1, 2, 0, 3, 2, 2, 3, 1, 3, 0], [0, 0], [], [4, 4, 6, 4, 1, 5, 3, 6, 5, 2, 6, 3, 4, 1, 6, 6, 1, 5, 1, 5, 3, 6, 3, 4, 0, 1, 1, 2, 0, 4, 5, 6, 0, 5, 0, 2, 6, 4], [1], [1, 3, 0, 3, 3, 3, 1, 0, 3, 0, 3, 1, 0, 2, 2, 0, 3, 2, 3, 3, 0, 1, 1, 2, 1, 2, 2, 2, 1, 3, 2, 3, 2, 0, 2, 3, 2, 2, 3, 0, 1, 1, 0, 0, 0, 1, 3, 3, 2, 3, 3, 0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 0, 3, 2, 0, 2, 3, 3, 3, 0, 2, 2, 1, 0, 2, 3, 0, 1, 3, 2, 1, 1, 2, 3, 2, 0, 3, 0, 3, 0, 1, 3, 2, 3, 1, 2, 0, 3, 0, 0, 1, 0, 2, 1, 1, 0, 1, 1, 0, 2, 0, 0, 3, 1, 0, 3, 1, 1, 3, 2, 1, 0, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [2, 2, 1, 1, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 1, 2, 2, 0, 0, 1, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 2, 0, 2, 2], [0, 0, 2, 2, 0, 1, 2, 1, 2, 1, 1, 2, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not True:{:\\nb0 = not b1\\nloopBreak% = 0\\nwhile ( int(6.0) \\g abs(in1) or not not abs(max(max(int(6.0), in1), min(res0, min(int(4.0), in1)))) != divInt(( i1 + max(( abs(abs(in2)) + int(0.0) ), int(2.0)) ),mod(int(2.0),( mod(( int(3.0) * max(( min(( in0 * ( min(( mod(min(res0, int(0.0)),int(1.0)) + in2 ), i2) - res0 ) ), int(7.0)) * min(abs(( max(max(in0, max(abs(abs(min(min(max(divInt(abs(abs(( in1 - abs(divInt(i1,( abs(min(abs(res0), divInt(mod(int(4.0),res0),( max(i1, int(6.0)) * abs(( int(0.0) - int(1.0) )) )))) - mod(min(mod(in2,min(i1, max(in2, int(8.0)))), max(( max(int(8.0), ( in0 * max(res0, in0) )) - int(3.0) ), in1)),divInt(int(4.0),int(0.0))) ))) ))),i0), int(1.0)), int(9.0)), i1))), ( i1 - i2 ))), max(int(3.0), i0)) + abs(int(3.0)) )), int(2.0)) ), min(divInt(int(6.0),in1), in2)) ),int(1.0)) - res0 ))) ):{:\\nloopBreak% = 0\\nwhile ( True or ( i0 \\l in2 or abs(i0) \\ge i2 ) ):{:\\nres0 -= abs(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 26, 26, 4, 4, 3, 15, 4, 11, 2, 0, 38, 1, 133, 28, 42, 17, 12]}, {"genotype": [[0], [1], [1], [], [1], [1], [5], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(5.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [8, 7, 6], [], [], [], [], [], [], [], [], [1], [1], [3, 1, 2, 1, 1], [0], [0], [1, 1], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= min(int(8.0), ( int(7.0) - int(6.0) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 1, 2, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [0, 1, 0, 1], [2, 2, 6, 5], [], [], [], [], [], [], [], [], [2, 3], [1, 1], [1, 1], [], [], [2, 0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= int(22.0)\\nin0 += int(65.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 9, 4, 7, 8, 9, 6, 9, 4, 6, 9, 8, 7, 0], [2], [2], [], [1], [0], [], [], [], [4, 6, 0, 4, 4, 2], [1], [2, 0, 3, 3, 2, 0, 3, 1, 1, 3, 3, 2, 3, 2, 3, 1, 2, 1, 2, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1, 3, 0, 0, 1, 1, 0, 1, 2, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 2, 1, 1, 0, 2, 1, 0, 2], [0, 0, 0, 1, 2, 2, 1, 2, 0], [1, 0, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += mod(res0,max(abs(divInt(i0,max(int(2.0), int(1.0)))), max(min(( abs(( max(int(9.0), ( int(4.0) + ( int(7.0) + int(8.0) ) )) - int(9.0) )) * ( divInt(min(( int(6.0) * ( int(9.0) - abs(in1) ) ), in1),int(4.0)) * int(6.0) ) ), i2), int(9.0))))\\nb2 = ( int(8.0) + int(7.0) ) == int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 15, 15, 1, 1, 0, 1, 1, 0, 0, 0, 6, 1, 40, 11, 9, 9, 3]}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 1], [0, 1], [0, 1], [1, 1], [7, 8], [0], [1, 2, 1, 2, 0], [1, 0], [0, 0, 0, 0, 0, 1, 0], [0], [3, 3, 0, 0, 0, 0], [], [0], [2, 0, 5], [1], [0, 2, 1, 1, 0], [1], [], [2], [1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( b1 or b2 ) and b1 ):{:\\nb2 = i2 \\l mod(int(7.0),int(8.0))\\nloopBreak% = 0\\nwhile b0:{:\\ni0 *= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 2, 2, 1, 5, 2, 7, 1, 6, 0, 1, 3, 1, 5, 1, 0, 1, 1]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [7, 3, 2], [], [], [], [], [], [], [], [], [6, 4, 6, 4], [0], [2, 1, 2, 2, 2, 1, 0, 0, 3, 0, 1], [0, 1, 0, 0], [0], [2, 2, 2], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = ( int(7.0) * divInt(( ( int(3.0) * in1 ) * res0 ),min(in1, int(2.0))) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 11, 4, 1, 3, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1], [3, 3, 5], [], [], [], [0], [], [1], [1], [], [1, 4], [0], [3, 1, 2, 0, 2, 1, 1], [0, 1], [1], [0], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\ni1 = max(int(3.0), ( in1 + divInt(int(3.0),int(5.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 0, 0, 0, 1, 0, 1, 1, 0, 2, 1, 7, 2, 1, 1, 1]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [1, 0, 0], [1, 1, 1, 1], [1, 0, 1, 6], [1, 0, 5], [0, 0], [0], [0, 1, 1, 1], [0, 0, 0], [3], [], [], [4, 5, 5, 5, 0, 1, 0, 0], [1], [0, 1, 3, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0], [1], [0, 2, 0, 0], [2], [1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= in2\\nb0 = ( int(1.0) \\g min(mod(int(0.0),abs(in2)), int(1.0)) and in2 \\l i0 )\\nb0 = min(i1, int(6.0)) != min(i0, i0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 4, 4, 3, 2, 1, 4, 3, 1, 0, 0, 8, 1, 16, 1, 4, 1, 1]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [], [], [], [1], [], [0], [], [1], [1], [], [0, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\ni0 = i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 1], [1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 2, 1, 1, 7, 0, 5, 7, 6, 1, 7], [5, 4, 5], [0, 2, 1, 1], [], [1, 0, 0, 1, 0, 1], [0, 0, 0], [0, 0, 1], [1], [1], [6, 1, 4, 4, 0, 5, 3, 3, 6, 3, 5, 6], [0, 1, 1, 0, 0, 1], [0, 0, 3, 1, 0, 3, 1, 3, 1, 2, 0, 1, 1, 1, 0, 1, 3, 3, 1, 1, 1, 1, 3, 1, 0], [0], [1, 0, 2, 1, 1, 0], [0, 0, 1, 1], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = i1\\nin1 += in1\\nb0 = max(int(7.0), i0) != min(int(8.0), abs(int(2.0)))\\nloopBreak% = 0\\nwhile b2:{:\\nif b1:{:\\nin2 += ( in0 - int(1.0) )\\n:}else:{:\\nin0 = int(1.0)\\n:}\\nloopBreak% = 0\\nwhile int(7.0) \\le res0:{:\\nin0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nb1 = max(max(int(5.0), int(7.0)), int(6.0)) != int(1.0)\\nin2 -= min(int(7.0), res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 12, 12, 3, 4, 0, 6, 3, 3, 1, 1, 12, 6, 25, 1, 6, 4, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 2, 1, 1], [1, 1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 5, 4, 2, 2, 5, 2, 4, 5, 1, 7, 9, 8, 9, 2, 0, 9, 5, 0], [4], [1, 1], [], [0, 0, 1, 0], [0], [0, 2, 1], [0], [], [3, 6, 5, 1, 5, 5, 1, 6, 0, 1, 1, 4, 6, 6, 3, 1, 5, 1, 5], [0, 1], [1, 3, 2, 0, 3, 0, 0, 2, 3, 0, 3, 3, 3, 1, 2, 2, 2, 2, 0, 1, 2, 0, 3, 1, 3, 0, 1, 0, 0, 2, 2, 2, 1, 3, 3, 1, 0, 3, 2, 0, 2, 2, 1, 2, 2, 0, 2, 3, 0, 3, 1, 1, 1, 3, 2, 2, 0, 1, 1, 1, 1, 1, 0, 3, 1, 2, 3, 0, 0, 3, 2, 3, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 1, 2, 0, 2, 2, 1], [2, 0, 0, 2, 0, 0, 2, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nin0 = int(3.0)\\nloopBreak% = 0\\nwhile not max(mod(res0,max(in2, i1)), mod(min(in2, min(max(abs(int(6.0)), ( mod(( divInt(in2,int(5.0)) * divInt(i1,min(int(4.0), max(res0, int(2.0)))) ),i0) + i1 )), mod(( mod(int(2.0),abs(max(int(5.0), i1))) + min(( in1 * mod(( int(2.0) + ( mod(res0,( min(res0, max(int(4.0), int(5.0))) + int(1.0) )) * abs(( divInt(in0,int(7.0)) - int(9.0) )) ) ),int(8.0)) ), int(9.0)) ),int(2.0)))),i1)) \\le min(int(0.0), ( abs(in2) + i1 )):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 -= abs(( max(int(9.0), int(5.0)) + int(0.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 20, 20, 1, 2, 0, 4, 1, 3, 1, 0, 19, 2, 75, 20, 18, 11, 10]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 2, 2, 8, 3, 1, 2, 3, 6, 3, 6, 7, 3, 8, 8, 9, 8, 1, 2, 5, 6, 9, 1, 3, 5, 9, 4, 1, 7, 8], [1, 1, 5, 0, 1, 3, 2], [0, 1, 0], [], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1], [1, 0, 1], [0, 1, 1, 1, 1], [3, 4, 6, 2, 1, 5, 6, 5, 1, 4, 2, 5, 4, 5, 2, 1, 2, 4, 0, 0, 1, 4, 3, 6, 6, 2, 0, 6, 1, 5, 1, 3, 6, 5, 4, 3, 3, 3, 2, 5, 5, 6, 3, 1, 0, 6, 1, 3, 0], [0, 0, 0, 1, 0], [2, 3, 2, 1, 3, 3, 2, 0, 1, 2, 2, 2, 0, 1, 1, 1, 2, 0, 3, 1, 1, 0, 0, 3, 1, 2, 1, 0, 3, 2, 0, 2, 3, 1, 1, 2, 0, 0, 0, 1, 2, 0, 2, 3, 1, 3, 2, 1, 0, 2, 3, 1, 2, 0, 3, 2, 0, 0, 3, 0, 2, 3, 2, 1, 3, 2, 3, 2, 0, 0, 3, 1, 0, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 0, 2, 0, 3, 2, 3, 3, 1, 0, 3, 1, 3, 1, 0, 0, 0, 3, 2, 0, 3, 1, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 1, 2, 0, 1, 0, 1, 3, 0, 0, 0, 2, 3, 3, 1, 0, 0, 3, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [2, 0, 2, 2, 0, 2, 0, 2, 1, 1, 1, 2, 1, 2, 0, 1, 2, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2, 2, 1], [2, 1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(mod(int(0.0),min(abs(( in0 * int(4.0) )), ( divInt(( in1 - int(2.0) ),int(2.0)) + int(8.0) )))) + divInt(res0,abs(int(3.0))) ) \\g int(1.0):{:\\nb0 = i2 \\g i1\\nin2 = min(int(2.0), mod(int(3.0),res0))\\nloopBreak% = 0\\nwhile abs(mod(in2,divInt(min(int(6.0), int(3.0)),( i1 - in1 )))) != i2:{:\\nloopBreak% = 0\\nwhile False:{:\\nif int(6.0) \\l divInt(in2,( abs(int(7.0)) - max(divInt(int(3.0),in1), ( max(int(8.0), divInt(in2,max(divInt(i2,i1), abs(i2)))) * ( max(divInt(int(8.0),abs(mod(min(divInt(in1,i0), max(int(9.0), i0)),i1))), int(8.0)) * ( int(1.0) * abs(int(2.0)) ) ) )) )):{:\\nloopBreak% = 0\\nwhile True:{:\\nif max(in1, ( divInt(int(5.0),in0) * mod(divInt(min(int(6.0), ( max(res0, mod(res0,min(mod(max(max(int(9.0), i2), max(int(1.0), min(int(3.0), i0))),res0), i1))) * abs(( in2 - min(int(5.0), i1) )) )),in0),max(max(( divInt(res0,in2) - in1 ), in0), int(9.0))) )) \\g ( in0 - int(4.0) ):{:\\nin0 = i2\\n:}else:{:\\nif int(1.0) \\ge abs(in2):{:\\nin2 = res0\\n:}else:{:\\nin0 *= i1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nif False:{:\\nb0 = ( abs(abs(int(7.0))) + i0 ) == res0\\n:}else:{:\\ni1 = max(( in0 + i0 ), int(8.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 9, 7, 31, 31, 7, 3, 0, 11, 7, 4, 3, 5, 49, 5, 143, 35, 33, 17, 19]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 1, 1], [1, 1, 1, 1], [1, 2, 8, 0], [], [], [], [], [], [], [], [], [4, 3, 4, 3, 5, 3, 2, 1], [1, 1, 1], [2, 2, 2, 1, 0, 3, 0, 2, 0, 0, 2, 3, 1, 0, 1, 1], [1, 0, 0, 1, 1], [0, 2], [1, 1, 0, 1, 0], [1, 0, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= mod(( ( int(1.0) - in0 ) + min(in1, divInt(in0,in2)) ),divInt(abs(int(2.0)),in0))\\ni2 -= int(8.0)\\ni1 += int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 16, 5, 2, 5, 3]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [2, 1, 0, 0, 2, 2, 0, 0, 0, 1, 0], [1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 6, 6, 1, 8, 5, 3, 9, 6, 4, 1, 0, 7, 7, 6, 8, 3, 8, 0, 7, 2, 3, 1, 6, 9, 5, 0, 8, 6, 8, 9, 9, 1, 9, 8, 3, 3, 6, 2, 0, 4, 2, 2, 9, 1, 2, 9, 0], [0, 4, 2, 4, 5, 4], [2, 1, 1], [1], [1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 1], [1], [1], [0, 1, 5, 3, 1, 1, 3, 6, 3, 2, 4, 2, 6, 1, 4, 6, 0, 2, 3, 0, 2, 0, 4, 2, 6, 1, 0, 2, 6, 5, 6, 6, 4, 0, 6, 5, 5, 3, 3, 2, 4, 4, 4, 5, 4, 3, 2, 0, 4, 6, 3, 6, 2, 5, 1, 1, 6, 3], [1, 0, 1, 1, 1], [1, 2, 0, 3, 1, 0, 0, 2, 0, 3, 3, 0, 3, 0, 1, 2, 0, 2, 3, 3, 0, 0, 2, 2, 2, 1, 1, 2, 0, 3, 3, 0, 2, 2, 2, 2, 0, 3, 2, 1, 0, 2, 1, 2, 1, 2, 0, 1, 1, 1, 2, 1, 3, 3, 0, 1, 3, 0, 2, 0, 3, 0, 2, 3, 2, 0, 1, 2, 2, 1, 1, 2, 3, 0, 3, 2, 1, 3, 3, 3, 2, 3, 1, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0, 1, 3, 0, 1, 1, 2, 0, 3, 2, 0, 3, 0, 3, 2, 1, 0, 2, 0, 0, 1, 1, 2, 1, 3, 3, 2, 1, 2, 3, 0, 0, 0, 0, 3, 1, 1, 2, 1, 0, 0, 1, 2, 3, 2, 0, 2, 2, 1, 2, 3, 0, 0, 2, 3, 0, 2, 1, 0, 3, 2, 3, 2, 1, 0, 1, 1, 3, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 2, 0, 0, 1, 2, 1, 1, 3, 2, 2, 3, 3, 3, 1, 2, 3, 1, 0, 0, 1, 0, 3, 3, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 2, 0, 2, 0, 0, 1, 0, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 0, 0, 2, 2, 1, 2, 0, 1, 1, 2, 2, 0, 1, 2, 1, 1, 2, 0, 2, 0, 1, 1], [2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1, 1, 2, 1, 2, 0, 2, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(7.0) \\l divInt(i0,min(int(0.0), i1)):{:\\nb2 = in2 \\le ( in0 * max(abs(i1), min(i1, int(6.0))) )\\nb1 = ( in0 + divInt(abs(min(res0, in0)),divInt(( divInt(int(6.0),int(1.0)) - ( i2 - min(max(in1, ( divInt(( ( i2 + min(( int(8.0) - res0 ), mod(int(5.0),divInt(int(3.0),mod(i1,int(9.0))))) ) + int(6.0) ),int(4.0)) * divInt(int(1.0),max(min(in1, int(0.0)), abs(res0))) )), ( i0 * max(i2, divInt(max(mod(in0,int(7.0)), divInt(( int(7.0) + int(6.0) ),( abs(i0) - max(divInt(int(8.0),abs(max(abs(divInt(min(int(3.0), i2),( int(8.0) + divInt(i0,int(0.0)) ))), int(7.0)))), int(2.0)) ))),( in1 * int(3.0) ))) )) ) ),min(i2, int(1.0)))) ) == int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 *= mod(i1,abs(( i0 * abs(i2) )))\\nif ( max(divInt(int(9.0),res0), divInt(in2,res0)) \\le int(5.0) or False ):{:\\nloopBreak% = 0\\nwhile int(0.0) != mod(int(8.0),abs(min(( int(6.0) * ( max(res0, in1) + i0 ) ), res0))):{:\\nin2 = max(int(8.0), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 *= ( int(9.0) * in0 )\\n:}else:{:\\nin0 *= i2\\nb1 = int(1.0) \\le divInt(abs(divInt(in1,divInt(( int(9.0) * ( abs(in1) + in1 ) ),( min(in2, mod(int(8.0),in1)) - max(divInt(abs(( int(3.0) - in0 )),int(3.0)), int(6.0)) )))),max(mod(divInt(i2,i0),( ( in1 * ( res0 - divInt(divInt(int(2.0),divInt(int(0.0),int(4.0))),( in0 * res0 )) ) ) + int(2.0) )), ( int(2.0) * int(9.0) )))\\n:}\\ni2 -= max(mod(divInt(abs(min(abs(int(1.0)), ( min(int(2.0), in2) + i1 ))),int(9.0)),i1), max(max(res0, int(0.0)), in0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 3, 8, 49, 49, 6, 3, 1, 8, 6, 2, 1, 1, 58, 5, 201, 58, 41, 31, 31]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 7, 1, 1, 7, 8, 9, 3, 4, 9, 3, 8, 4, 7, 6, 8, 8, 6, 6, 4, 0, 0, 3, 8, 1, 8, 5, 0, 0, 8, 6, 4, 5, 6, 9], [4], [], [], [1], [0], [], [], [0], [1, 4, 6, 5, 6, 5, 0, 5, 2, 2, 0, 3, 2, 1, 6, 1, 2, 3, 5, 0, 6, 2, 3, 0, 1, 0, 4, 1, 0, 1, 3, 5, 3, 0, 4, 2, 4, 5, 5, 0, 2], [1], [3, 2, 2, 2, 1, 2, 2, 0, 0, 2, 2, 0, 0, 3, 2, 1, 1, 3, 2, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 3, 0, 3, 2, 1, 0, 3, 3, 3, 3, 2, 1, 3, 0, 0, 2, 3, 0, 0, 1, 1, 3, 2, 2, 1, 3, 0, 2, 1, 3, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 3, 2, 2, 3, 2, 1, 1, 0, 2, 2, 3, 2, 2, 2, 0, 3, 3, 0, 0, 2, 1, 2, 2, 3, 3, 3, 0, 1, 0, 3, 0, 0, 2, 2, 3, 0, 3, 1, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 0, 1, 3, 3, 1, 3, 2, 3, 1, 2, 0, 2, 0, 1, 1, 0, 3, 1, 2, 3, 3, 1, 2, 0, 0, 0, 0, 1, 3, 0, 1, 2, 1, 3, 3, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 1, 2, 2, 0, 2, 1, 0, 0, 1], [1, 1, 1, 2, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 2, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(( divInt(( int(6.0) - divInt(divInt(i1,in1),( ( res0 - in2 ) - max(mod(int(1.0),int(7.0)), max(( res0 * ( in2 * i0 ) ), max(int(1.0), in2))) )) ),min(divInt(mod(min(i2, min(( int(1.0) - i2 ), max(max(abs(max(mod(int(7.0),max(i0, in0)), ( min(i2, i1) * int(8.0) ))), int(9.0)), abs(mod(mod(int(3.0),abs(res0)),mod(int(4.0),abs(int(9.0)))))))),int(3.0)),( mod(int(8.0),( int(4.0) + int(7.0) )) * ( int(6.0) + max(divInt(( abs(( int(8.0) * int(8.0) )) - i1 ),divInt(( abs(( ( ( i2 - max(max(in0, in2), ( int(6.0) * ( ( abs(min(min(i0, int(6.0)), res0)) * max(i2, in0) ) - ( ( max(i0, abs(int(4.0))) + min(int(0.0), i1) ) + abs(i0) ) ) )) ) + in1 ) + int(0.0) )) - ( int(3.0) * max(abs(abs(i1)), min(( i0 * ( i1 * int(8.0) ) ), min(max(int(1.0), abs(divInt(abs(int(8.0)),( in0 + ( in2 * int(5.0) ) )))), int(0.0)))) ) ),in0)), min(int(0.0), ( abs(max(int(8.0), divInt(i0,in1))) - i2 ))) ) )), in1)) - int(6.0) ), min(in2, int(4.0))) \\le ( int(5.0) - min(max(in2, i0), int(6.0)) ):{:\\ni2 -= int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 36, 36, 1, 0, 0, 1, 1, 0, 0, 1, 41, 1, 163, 44, 43, 30, 15]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [4, 4], [4], [1], [1], [0, 1, 0], [0], [3, 1], [0], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( int(4.0) \\le int(4.0) or True )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 1, 3, 1, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1], [0], [1], [0, 0], [], [0, 0, 1], [0], [0, 2], [], [0], [4, 1, 4], [], [2, 1, 0, 2, 0, 0], [0, 1], [], [2], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nb0 = not ( int(0.0) * in1 ) \\g divInt(i1,in1)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 2, 0, 3, 1, 2, 0, 1, 3, 0, 6, 2, 0, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1], [9, 9, 9, 8, 2], [], [], [], [], [], [], [], [], [0, 1, 0, 2, 1, 4, 5, 0, 6], [1], [3, 3, 1, 2, 2, 3, 3, 2, 1, 2, 3, 0, 0, 0, 3, 0, 0, 2, 2, 3, 2, 0, 0, 0, 3, 3, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0], [2, 1, 2, 1, 0, 2, 0, 2, 1], [1, 0, 1, 1, 1, 2], [1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= abs(max(int(9.0), mod(( abs(max(divInt(int(9.0),( min(i1, i0) + i2 )), abs(i1))) - in1 ),( ( min(( in2 - i0 ), res0) - abs(max(int(9.0), int(8.0))) ) * int(2.0) ))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 29, 7, 9, 6, 2]}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 0, 2, 1, 1, 0], [0, 0], [0, 1, 1, 0], [1, 1], [9, 9], [3], [2, 0, 0, 1], [], [0, 0, 0, 0, 1], [0], [0, 2, 1, 0], [1], [1, 1], [4, 6, 0, 3], [1, 0], [1, 0, 0, 1], [], [], [2], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nb0 = not False\\n:}else:{:\\nif b0:{:\\nin1 *= int(9.0)\\n:}else:{:\\nres0 = i0\\n:}\\nb1 = in0 \\ge int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 2, 2, 1, 4, 0, 5, 1, 4, 1, 2, 4, 2, 4, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 8, 2, 1, 4, 6, 7, 6, 1, 7, 6], [5], [1, 1], [1, 1], [1, 0, 0, 0, 0, 0], [0], [3, 3, 0, 1, 1], [0, 1], [], [6, 6, 5, 5, 5, 0, 5, 0, 0, 2, 5, 6, 1], [1], [3, 1, 2, 2, 2, 3, 1, 1, 1, 1, 2, 3, 0, 0, 2, 3, 3, 2, 3, 1, 0, 3, 2, 1, 1, 3, 3, 2, 2, 3, 0, 0, 0, 3, 2, 0, 3, 1, 0, 2, 2, 1, 0, 0, 3, 3, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 2, 1, 0, 2, 2, 1, 2, 1, 0, 1, 2, 0], [2, 0, 2, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(9.0), divInt(divInt(mod(min(int(2.0), int(8.0)),int(2.0)),int(1.0)),divInt(abs(res0),res0))) != ( max(min(mod(abs(int(4.0)),in2), abs(( int(6.0) * int(7.0) ))), max(abs(divInt(divInt(max(in2, in2),i0),min(mod(in2,max(int(6.0), i0)), divInt(( int(1.0) + i0 ),i2)))), abs(min(int(7.0), int(6.0))))) * in2 ):{:\\nres0 += i1\\nb1 = ( ( b1 or True ) or False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 12, 12, 1, 2, 2, 6, 1, 5, 2, 0, 13, 1, 50, 12, 14, 4, 9]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1], [7, 8, 3, 1, 7], [2], [2], [], [1], [0], [], [], [], [3, 3, 3, 3, 1], [], [3, 3, 2, 2, 2, 1, 3, 3, 3, 0, 1, 1, 0, 0, 3, 2, 0, 0, 1, 1], [0, 1, 1, 1], [2, 1, 0, 1, 2, 1], [2], [0, 1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = abs(max(( divInt(mod(int(7.0),min(max(abs(in0), int(8.0)), int(3.0))),in0) * in0 ), max(divInt(in0,i1), int(1.0)))) == int(7.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 20, 4, 6, 1, 3]}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 2, 2, 1, 1, 2, 2, 2, 0, 2, 2, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 7, 7, 1, 4, 9, 5, 9, 1, 7, 4, 4, 9, 3, 2, 2, 0, 2, 3, 6, 6, 7, 3, 6, 6, 8, 7, 9, 8, 0, 8, 8, 5, 5, 4, 4, 4, 4, 5, 0, 0, 9, 1, 4, 6, 8, 9, 7, 3, 4, 8, 4, 3, 4, 6, 8, 2, 6, 2, 3, 1, 9, 6, 1, 5, 7, 2, 3, 3, 1, 1, 8, 7, 0, 8, 2, 3, 1, 5, 9, 8, 0, 3, 4, 2, 8, 5], [1, 1, 0, 1, 5, 2, 2, 0, 1, 4, 3, 3, 4], [0, 2, 1, 1, 2, 2, 1, 0], [1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 2, 3, 2, 0, 2, 0, 2, 1], [1, 1], [1, 1, 1, 0, 1, 0], [2, 5, 2, 1, 1, 2, 6, 4, 6, 1, 6, 4, 2, 5, 6, 4, 6, 1, 0, 6, 0, 4, 1, 1, 5, 3, 3, 6, 5, 4, 2, 6, 4, 1, 4, 2, 2, 3, 2, 4, 0, 6, 6, 5, 4, 2, 3, 2, 5, 3, 4, 0, 2, 3, 0, 1, 6, 5, 3, 6, 1, 3, 4, 0, 4, 0, 1, 5, 4, 2, 1, 5, 4, 5, 4, 4, 5, 3, 5], [0], [3, 1, 0, 2, 2, 0, 0, 1, 1, 2, 1, 3, 3, 1, 0, 3, 2, 0, 0, 2, 1, 1, 2, 2, 1, 2, 2, 3, 3, 0, 1, 2, 3, 0, 3, 1, 0, 0, 3, 2, 3, 1, 0, 2, 3, 0, 1, 3, 3, 1, 3, 2, 1, 2, 1, 1, 3, 3, 2, 1, 1, 0, 2, 1, 1, 2, 1, 0, 0, 1, 2, 0, 1, 2, 0, 1, 1, 1, 1, 2, 0, 3, 3, 0, 1, 3, 2, 3, 2, 3, 1, 1, 2, 3, 3, 2, 0, 1, 3, 1, 1, 2, 3, 2, 0, 1, 1, 0, 1, 3, 3, 2, 2, 3, 0, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 1, 2, 3, 1, 2, 3, 1, 0, 2, 1, 2, 3, 2, 0, 3, 1, 1, 2, 1, 1, 2, 0, 0, 2, 1, 3, 0, 0, 2, 1, 3, 1, 3, 3, 2, 3, 0, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 1, 1, 2, 3, 0, 1, 3, 2, 2, 3, 2, 1, 0, 0, 3, 3, 1, 3, 1, 3, 2, 2, 1, 3, 2, 3, 1, 1, 3, 2, 1, 1, 2, 0, 3, 2, 2, 3, 1, 0, 2, 1, 1, 0, 3, 0, 3, 3, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0, 2, 1, 3, 3, 1, 1, 1, 1, 0, 0, 0, 1, 3, 1, 0, 0, 3, 1, 2, 0, 2, 3, 1, 0, 3, 2, 3, 1, 1, 3, 3, 0, 1, 3, 0, 1, 2, 3, 3, 0, 0, 3, 1, 3, 2, 0, 3, 3, 3, 3, 0, 0, 1, 3, 2, 0, 0, 3, 2, 3, 1, 0, 1, 0, 0, 0, 1, 3, 0, 2, 0, 2, 0, 3, 0, 2, 0, 1, 3, 2, 2, 1, 0, 0, 3, 0, 2, 0, 2, 3, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [2, 1, 1, 1, 1, 0, 0, 2, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 1, 2, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 1, 1, 2, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 1, 2, 0, 0, 2, 0, 0, 2, 0, 2, 1, 0, 1, 2, 1, 1, 1, 1, 2, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 2, 2, 2], [2, 1, 0, 0, 0, 2, 1, 2, 2, 2, 0, 0, 1, 2, 0, 0, 1, 1, 0, 2, 0, 1, 0, 0, 1, 0, 2, 2, 1, 0, 1, 1, 2, 0, 0, 0, 1, 2, 2, 0, 2, 2, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(int(6.0))\\nif in2 \\g ( ( i2 * i1 ) - int(3.0) ):{:\\nb0 = int(7.0) \\g ( int(7.0) + max(max(int(1.0), i1), max(( i2 + res0 ), ( int(4.0) + int(9.0) ))) )\\n:}else:{:\\nloopBreak% = 0\\nwhile ( ( mod(int(5.0),( ( max(min(in1, int(9.0)), ( min(res0, abs(int(1.0))) * i1 )) - res0 ) * max(mod(max(int(7.0), in1),mod(max(i2, int(4.0)),min(max(int(4.0), min(mod(int(9.0),mod(int(3.0),int(2.0))), min(min(( int(2.0) * int(0.0) ), in2), divInt(int(2.0),int(3.0))))), mod(int(6.0),res0)))), in1) )) * int(6.0) ) \\l mod(res0,int(7.0)) or not ( i1 + int(3.0) ) \\g int(6.0) ):{:\\nloopBreak% = 0\\nwhile False:{:\\nif not int(6.0) != int(8.0):{:\\nb2 = ( ( i0 + max(max(res0, int(7.0)), abs(( min(mod(max(int(9.0), int(8.0)),divInt(abs(min(( i0 - int(0.0) ), max(int(8.0), int(8.0)))),mod(max(mod(in1,int(5.0)), int(5.0)),i1))), int(4.0)) * abs(max(( ( max(i1, ( min(min(abs(min(min(mod(max(max(abs(( max(int(4.0), divInt(min(int(4.0), ( abs(int(4.0)) + in2 )),divInt(int(5.0),( min(( in0 + min(int(0.0), int(0.0)) ), mod(int(9.0),int(1.0))) - divInt(in0,res0) )))) - ( int(4.0) + abs(in2) ) )), in1), mod(int(6.0),min(int(8.0), abs(max(mod(max(i2, ( ( res0 * in1 ) + i1 )),int(9.0)), int(7.0)))))),int(3.0)), ( mod(int(4.0),int(8.0)) - mod(abs(in1),int(4.0)) )), max(( divInt(max(( int(3.0) + i2 ), i2),abs(max(int(4.0), abs(int(6.0))))) + min(mod(( int(8.0) - min(mod(abs(int(2.0)),int(6.0)), min(( int(2.0) + int(3.0) ), ( in0 * min(divInt(( abs(int(1.0)) * i2 ),( int(9.0) - int(6.0) )), in1) ))) ),min(i0, abs(max(min(res0, res0), in2)))), in1) ), int(1.0)))), i2), max(in0, i2)) + int(5.0) )) - in2 ) - ( int(7.0) * abs(max(int(2.0), int(3.0))) ) ), int(3.0))) ))) ) == int(1.0) and in0 == in1 )\\n:}else:{:\\nb1 = not i0 \\l int(1.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\nloopBreak% = 0\\nwhile max(int(8.0), i2) \\g in0:{:\\nif not max(int(7.0), ( i0 + ( max(int(0.0), i1) + abs(divInt(max(int(8.0), int(2.0)),min(min(res0, int(3.0)), max(in2, int(1.0))))) ) )) \\le ( max(min(in0, res0), max(int(5.0), min(( i1 + min(min(min(max(in0, in1), int(9.0)), min(( i0 - in1 ), abs(( min(int(8.0), i0) * int(0.0) )))), i1) ), in2))) * in1 ):{:\\nb2 = b2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif int(3.0) \\ge min(i2, divInt(i1,( in2 + max(in1, ( in2 * int(4.0) )) ))):{:\\nif abs(( ( int(2.0) * in1 ) - in1 )) \\ge abs(in2):{:\\nb1 = ( in0 - divInt(abs(in2),int(8.0)) ) \\le int(5.0)\\n:}\\n:}else:{:\\nb0 = not False\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 9, 7, 88, 88, 13, 8, 2, 24, 13, 11, 2, 6, 79, 1, 327, 72, 89, 44, 28]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 2, 1, 2, 0], [0, 1, 0, 0, 1], [1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 8, 9, 9, 0, 3, 1, 3, 7, 0, 6, 3, 1, 5], [0, 2, 3], [2, 0, 0], [], [1, 0, 1, 0, 1, 0], [0, 0, 0], [0, 0, 1], [1], [1, 0, 1], [6, 5, 3, 6, 6, 0, 4, 4, 1, 0, 0, 2, 1, 2, 6, 2], [1, 1, 1], [1, 1, 1, 0, 2, 3, 2, 3, 0, 0, 2, 3, 1, 1, 2, 2, 1, 3, 1, 3, 2, 1, 2, 0, 1, 2, 0, 3, 3, 3, 3, 0, 2, 0, 3, 1, 3, 0, 0, 0, 2, 0, 1, 1, 3, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 1], [2, 0, 2, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= int(57.0)\\nif int(8.0) \\l int(9.0):{:\\nb2 = b0\\n:}else:{:\\nloopBreak% = 0\\nwhile in2 == divInt(max(( abs(in0) + res0 ), ( max(int(9.0), int(0.0)) * divInt(( int(3.0) + abs(int(1.0)) ),max(( int(3.0) - mod(res0,int(7.0)) ), ( i0 + min(max(max(abs(in1), ( in1 + max(int(0.0), abs(i1)) )), i0), i0) ))) )),mod(i2,int(6.0))):{:\\nif b0:{:\\nif int(3.0) \\ge max(i1, i2):{:\\nres0 += int(1.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\ni2 -= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 15, 15, 3, 3, 0, 6, 3, 3, 1, 3, 16, 3, 49, 10, 12, 9, 4]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 5, 3, 6, 0, 7, 4, 9, 7, 9, 9, 6, 0], [2, 0, 1], [2, 2], [0], [0, 1, 1, 1], [0, 0, 0], [3], [], [], [3, 4, 1, 4, 1, 4, 3, 4, 5, 3, 5], [], [2, 1, 2, 3, 3, 1, 1, 0, 2, 0, 0, 0, 3, 3, 1, 3, 3, 3, 0, 1, 3, 2, 1, 3, 3, 0, 2, 1, 2, 3, 0, 1, 0, 0, 0, 3, 2, 0, 3, 1, 3, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 2, 1, 1, 2, 1, 2, 1, 0, 2, 0], [2, 2, 0], [1, 1, 1, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( mod(int(3.0),mod(max(min(int(5.0), int(3.0)), in0),( in1 * i1 ))) == in1 and min(max(int(6.0), abs(max(max(i1, int(0.0)), abs(mod(int(7.0),max(abs(in1), ( int(4.0) * mod(max(in0, int(9.0)),in1) ))))))), in2) \\l in0 )\\nb2 = min(( in2 + abs(int(7.0)) ), min(int(9.0), int(9.0))) \\g int(60.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 3, 2, 1, 4, 3, 1, 0, 0, 11, 0, 44, 7, 14, 3, 4]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 2, 1], [0, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 5, 1, 4, 1, 4, 0, 0, 8, 7, 6, 5, 1, 1], [4, 3], [1], [], [1, 0, 0, 1, 0], [0, 0], [2, 2, 1], [1], [0], [4, 4, 2, 6, 3, 3, 5, 5, 0, 6, 6, 6, 3, 1], [1], [2, 0, 3, 2, 3, 0, 0, 0, 2, 2, 1, 0, 1, 2, 0, 2, 2, 1, 1, 3, 3, 3, 2, 1, 2, 1, 3, 3, 0, 1, 3, 2, 3, 3, 2, 2, 1, 3, 1, 1, 1, 2, 3, 3, 1, 0, 3, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0], [2, 2, 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 1, 2, 1, 1], [0, 2, 1, 2, 2, 0], [0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(in1,abs(( abs(in1) + i2 ))) \\le res0\\nif not not divInt(divInt(int(1.0),in0),int(2.0)) \\ge ( in0 * ( divInt(int(1.0),int(5.0)) - min(max(min(mod(int(1.0),mod(int(4.0),abs(abs(in2)))), int(1.0)), min(divInt(min(min(divInt(( int(4.0) * min(int(0.0), int(0.0)) ),int(8.0)), ( min(max(int(7.0), in2), abs(max(max(int(6.0), int(5.0)), int(1.0)))) * i0 )), res0),int(1.0)), res0)), res0) ) ):{:\\nloopBreak% = 0\\nwhile False:{:\\nin0 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 16, 16, 2, 1, 0, 5, 2, 3, 1, 1, 14, 1, 58, 13, 16, 6, 8]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [0, 1], [5, 5], [], [], [], [], [], [], [], [], [4, 3, 5], [0, 1], [1, 0], [], [], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(55.0)\\nin0 += in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 1, 2, 2, 2, 2, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 3, 0, 4, 9, 1, 3, 9, 8, 6, 5, 2, 9, 6, 4, 9, 7, 2, 1], [2, 5, 0, 0, 0], [1, 2, 0, 0, 0, 0, 1], [1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [3, 0, 2, 0, 0, 2, 0], [], [1, 1, 1, 0, 1], [2, 1, 3, 4, 6, 0, 2, 6, 6, 6, 4, 1, 6, 3, 5, 0, 0, 5, 5], [0, 1, 0, 1], [3, 0, 1, 2, 0, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 3, 0, 0, 1, 2, 3, 3, 3, 3, 1, 0, 3, 3, 3, 1, 3, 3, 3, 1, 2, 2, 3, 0, 2, 2, 2, 0, 0, 1, 3, 1, 0, 0, 0, 1, 3, 1, 3, 1, 0, 0, 1, 1, 3, 2, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0], [0, 2, 1, 1, 0, 2, 1, 1, 2, 2, 0, 0, 0, 2, 0, 0, 1, 1, 2], [1, 1, 1, 2, 2], [1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = min(i1, int(2.0))\\nif ( b1 or not ( in0 - int(7.0) ) == int(3.0) ):{:\\nb2 = int(0.0) != int(4.0)\\n:}else:{:\\nif int(9.0) \\l abs(int(1.0)):{:\\nif b0:{:\\nif b0:{:\\nif int(3.0) \\l int(9.0):{:\\nb0 = not max(max(in1, res0), int(8.0)) \\l mod(min(abs(max(max(int(6.0), i0), abs(abs(min(int(5.0), min(min(abs(int(2.0)), mod(divInt(min(i2, mod(divInt(( res0 - res0 ),int(9.0)),min(int(6.0), res0))),in1),i1)), int(4.0))))))), max(int(9.0), max(int(7.0), res0))),in0)\\n:}else:{:\\nin2 -= int(2.0)\\n:}\\n:}\\n:}else:{:\\ni0 = int(1.0)\\n:}\\n:}else:{:\\ni0 *= abs(( in2 * in2 ))\\n:}\\n:}\\nb0 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 20, 20, 5, 7, 1, 12, 5, 7, 0, 5, 19, 4, 62, 8, 19, 5, 5]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 7], [3], [1], [], [1], [0], [], [], [], [0, 6], [], [2, 0, 1, 2, 1, 0], [0, 1], [], [2], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( i0 * int(8.0) ) \\ge mod(int(7.0),res0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 6, 2, 0, 1, 1]}, {"genotype": [[0], [1], [0], [], [0], [1], [8], [3], [2], [], [0, 1], [0], [2], [], [], [5, 5], [], [0, 2, 1, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not in2 \\ge mod(int(8.0),in2)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 2, 2, 0, 1], [0, 1, 0, 1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 0, 0, 9, 2, 4], [0, 2, 5], [0, 2, 0], [0], [0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0], [2, 1, 3, 0, 0, 1], [0, 0], [1, 0], [3, 1, 5, 2, 1, 2, 1, 6, 3, 1, 3, 5], [1, 1], [0, 3, 3, 2, 3, 2, 2, 1, 0, 0, 3, 2, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0], [2, 1, 0, 0], [0, 0, 2, 2], [0, 0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not in0 \\l abs(max(( min(divInt(divInt(int(1.0),i1),in2), min(divInt(i2,i1), i2)) + int(0.0) ), int(0.0))):{:\\nloopBreak% = 0\\nwhile True:{:\\nif ( b0 and b2 ):{:\\ni1 += ( res0 * in0 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile i1 == in0:{:\\nin2 *= int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = int(2.0) != int(4.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 5, 3, 6, 6, 3, 3, 1, 9, 3, 6, 2, 2, 12, 2, 25, 5, 4, 4, 3]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 2, 2, 2, 1, 0, 2, 1, 0, 2, 2, 0, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 1, 1, 2, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 0, 2, 6, 8, 9, 9, 5, 5, 5, 8, 8, 4, 3, 6, 6, 9, 0, 3, 7, 2, 1, 7, 7, 6, 9, 6, 7, 3, 4, 8, 7, 8, 2, 1, 2, 8, 7, 1, 6, 5, 7, 4, 0, 8, 1, 0, 8, 5, 5, 4, 4, 4, 3, 3, 0, 2, 1, 6, 1, 8, 8, 4, 1, 3, 0, 2, 4, 2, 8, 7, 8, 7, 0, 3, 6, 7, 3, 5, 7, 6, 6, 9, 3, 5], [0, 2, 1, 5, 0, 1, 3, 1, 2, 5, 0, 5, 2, 0, 3], [1, 2, 2, 1, 1, 1, 1], [0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 2, 1, 3, 3, 1, 0, 1, 3, 2, 0], [1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1], [4, 2, 6, 5, 1, 6, 3, 4, 4, 5, 5, 6, 3, 2, 6, 3, 3, 1, 6, 2, 5, 4, 2, 4, 2, 1, 3, 3, 0, 4, 1, 0, 0, 5, 0, 5, 4, 0, 4, 1, 4, 3, 3, 5, 4, 4, 5, 1, 2, 1, 5, 5, 0, 4, 1, 1, 5, 5, 0, 6, 6, 6, 4, 1, 1, 5, 1, 4, 5, 5, 5, 1, 1, 0, 2, 1, 4, 1, 4, 6, 2, 1, 5, 4, 3, 5, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 3, 1, 0, 2, 0, 0, 1, 2, 1, 1, 3, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2, 3, 2, 1, 1, 2, 0, 0, 0, 3, 1, 1, 3, 3, 1, 1, 3, 1, 0, 2, 3, 1, 2, 3, 1, 2, 3, 2, 0, 2, 2, 2, 0, 3, 1, 2, 1, 3, 1, 1, 2, 3, 1, 2, 0, 1, 1, 0, 2, 2, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 3, 0, 0, 3, 3, 3, 3, 1, 0, 1, 3, 0, 2, 0, 0, 1, 0, 1, 3, 3, 0, 0, 3, 0, 1, 0, 3, 2, 3, 1, 0, 3, 0, 0, 2, 0, 0, 0, 2, 3, 1, 3, 0, 0, 0, 1, 2, 1, 3, 0, 0, 1, 2, 2, 3, 1, 2, 1, 3, 2, 3, 3, 0, 3, 0, 1, 3, 0, 0, 0, 2, 1, 2, 3, 2, 1, 1, 1, 3, 1, 2, 3, 3, 2, 3, 2, 1, 1, 0, 0, 1, 3, 1, 3, 3, 3, 3, 2, 3, 1, 0, 1, 2, 3, 3, 0, 0, 1, 0, 0, 2, 1, 1, 1, 2, 3, 0, 0, 3, 2, 3, 2, 3, 2, 0, 2, 3, 3, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 3, 0, 3, 1, 0, 1, 3, 1, 1, 2, 3, 3, 2, 0, 2, 2, 1, 0, 0, 3, 1, 0, 1, 0, 1, 2, 0, 3, 3, 3, 1, 2, 2, 0, 1, 3, 1, 0, 3, 2, 3, 0, 3, 3, 3, 3, 0, 1, 3, 3, 1, 1, 2, 2, 1, 2, 1, 0, 1, 3, 1, 3, 2, 3, 0, 2, 0, 0, 3, 3, 2, 3, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1, 3, 1, 2, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0], [0, 2, 0, 0, 2, 1, 0, 1, 2, 2, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 2, 0, 1, 1, 2, 0, 0, 1, 2, 1, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 1, 2, 0, 2, 0, 2, 0, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 1, 2, 2, 2, 2, 1, 2, 2, 0, 0, 2, 1, 2, 2, 1, 2], [2, 2, 2, 0, 1, 1, 2, 1, 0, 0, 2, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0, 2, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 2], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nloopBreak% = 0\\nwhile not False:{:\\nin1 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(2.0) \\l min(int(3.0), res0):{:\\nif ( in2 * i1 ) == int(0.0):{:\\nloopBreak% = 0\\nwhile not False:{:\\nres0 *= ( int(2.0) + int(6.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = ( abs(int(8.0)) \\g min(min(abs(max(in0, int(9.0))), ( in1 - ( int(9.0) - mod(min(( int(5.0) * int(5.0) ), mod(in1,in2)),in2) ) )), max(int(5.0), int(8.0))) and ( abs(abs(int(8.0))) != int(4.0) or min(int(3.0), res0) \\l ( abs(int(6.0)) - ( abs(int(6.0)) + ( min(( in0 + mod(( ( i2 * min(int(9.0), ( int(0.0) * max(int(3.0), int(7.0)) )) ) + divInt(min(int(2.0), ( res0 - int(1.0) )),int(7.0)) ),in0) ), divInt(mod(( in0 - ( divInt(i1,mod(res0,divInt(i2,mod(min(in2, in1),min(min(max(max(int(7.0), i2), int(6.0)), max(in1, divInt(i2,i1))), int(9.0)))))) - in0 ) ),int(6.0)),min(min(in0, i0), min(in1, int(7.0))))) + i1 ) ) ) ) )\\n:}\\nif max(( max(int(3.0), i0) - abs(i0) ), in2) \\g mod(i0,in2):{:\\nin1 *= i0\\n:}else:{:\\nin1 = mod(min(int(4.0), max(i1, in1)),in0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nif int(8.0) \\ge ( int(7.0) - max(in0, in2) ):{:\\nb2 = int(8.0) \\g mod(divInt(abs(int(2.0)),( int(1.0) - min(mod(min(max(in1, abs(in1)), int(2.0)),max(in2, i1)), i2) )),( int(8.0) + ( min(divInt(int(7.0),int(1.0)), int(6.0)) * abs(int(5.0)) ) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = divInt(min(max(( min(divInt(int(7.0),int(4.0)), in2) * in2 ), int(0.0)), max(int(8.0), abs(max(min(max(mod(max(int(1.0), i0),int(0.0)), ( abs(min(in1, i1)) + int(8.0) )), i1), in2)))),mod(int(5.0),int(5.0)))\\n:}\\nif int(4.0) == divInt(abs(in2),i0):{:\\nres0 = min(( abs(mod(min(divInt(res0,divInt(max(abs(( ( int(4.0) * int(4.0) ) - int(3.0) )), int(3.0)),divInt(int(0.0),int(2.0)))), ( max(res0, max(int(1.0), in1)) - int(6.0) )),abs(int(1.0)))) - int(8.0) ), mod(max(abs(divInt(i1,mod(( int(8.0) - i1 ),in2))), max(int(4.0), i1)),int(1.0)))\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 != int(3.0):{:\\nin2 = ( in2 + max(abs(min(int(0.0), ( ( in2 - int(2.0) ) - max(int(4.0), i1) ))), abs(mod(abs(i1),abs(abs(max(abs(i0), int(2.0))))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif abs(min(int(8.0), int(7.0))) \\l divInt(mod(int(8.0),mod(int(7.0),i2)),int(0.0)):{:\\nif b1:{:\\nloopBreak% = 0\\nwhile min(int(3.0), abs(mod(max(i1, divInt(in1,i1)),abs(abs(( max(int(6.0), int(7.0)) + ( int(3.0) - in1 ) )))))) != int(5.0):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nif ( not res0 == int(7.0) and int(6.0) \\l i2 ):{:\\ni1 = int(6.0)\\n:}else:{:\\nin2 = in1\\n:}\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nin0 += divInt(in2,int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = abs(int(3.0)) \\ge ( i0 * int(5.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 29, 29, 14, 15, 86, 86, 15, 7, 3, 28, 15, 13, 5, 8, 87, 10, 314, 69, 82, 37, 36]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1], [2, 2, 1, 1, 0, 2, 1], [0, 0, 1], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 6, 3, 1, 9, 7, 4, 7, 7, 7, 2, 4, 3, 6, 5, 5, 4, 1, 5, 5, 2, 6, 9, 7, 4, 7, 2, 8, 7, 8, 2, 1, 4, 4, 8, 1, 8, 7, 0, 4, 9, 7, 4, 5, 5, 3, 8, 5, 6], [2, 0, 5, 4, 2, 0, 2, 0], [0, 2, 2, 2], [0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1], [1], [1, 0], [6, 1, 0, 5, 2, 6, 3, 6, 1, 2, 0, 0, 2, 2, 2, 4, 0, 3, 4, 5, 1, 0, 4, 0, 4, 1, 5, 2, 5, 5, 1, 1, 0, 4, 2, 2, 6, 0, 0, 3, 1, 1, 3, 6, 1, 2], [], [3, 3, 2, 0, 2, 0, 0, 1, 1, 3, 0, 0, 0, 2, 2, 2, 0, 3, 3, 2, 3, 0, 2, 3, 0, 2, 2, 0, 2, 3, 2, 3, 0, 3, 3, 3, 0, 1, 3, 1, 3, 0, 1, 2, 1, 2, 1, 0, 0, 3, 1, 2, 2, 0, 1, 0, 3, 3, 1, 3, 2, 3, 3, 1, 0, 1, 1, 0, 2, 2, 1, 1, 2, 2, 0, 0, 3, 0, 3, 3, 1, 1, 2, 3, 2, 1, 3, 2, 0, 2, 1, 2, 0, 3, 2, 2, 2, 1, 2, 0, 1, 2, 3, 1, 2, 1, 3, 3, 2, 3, 0, 3, 1, 1, 2, 3, 0, 0, 0, 3, 3, 3, 2, 1, 1, 3, 2, 0, 0, 1, 2, 2, 1, 3, 1, 1, 2, 1, 2, 3, 0, 3, 0, 1, 0, 2, 1, 1, 3, 1, 3, 0, 1, 0, 2, 3, 2, 3, 1, 1, 2, 0, 1, 0, 3, 3, 1, 3, 2, 1, 2, 0, 2, 3, 1, 1, 0, 1, 1, 0, 0, 2, 2, 1, 3, 1, 1, 0, 2, 2, 2, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 2, 0, 2, 2, 1, 0, 1, 0, 1, 2, 2, 2, 0, 2, 1, 2, 1, 0, 1, 2, 2, 1, 1, 1, 1, 2, 0, 1, 0, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 1, 2, 0], [1, 2, 0, 1, 2, 1, 1, 2, 0, 2, 0, 2, 2, 1, 0, 2, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(abs(( res0 - ( i1 * i0 ) ))) == int(5.0):{:\\nif int(7.0) \\l min(in2, i2):{:\\nb0 = ( res0 != ( ( divInt(in0,abs(abs(divInt(max(res0, divInt(min(i1, divInt(divInt(i2,divInt(max(( min(i0, max(abs(abs(i0)), int(6.0))) + abs(int(3.0)) ), min(i2, int(1.0))),( int(9.0) - mod(int(7.0),i2) ))),i2)),abs(int(4.0)))),divInt(( in1 * int(7.0) ),i0))))) - max(abs(int(7.0)), max(mod(min(max(int(7.0), in0), int(2.0)),int(4.0)), in1)) ) - ( ( int(3.0) * int(6.0) ) + divInt(mod(in2,i1),abs(i0)) ) ) and abs(max(int(5.0), int(5.0))) \\le divInt(max(( int(4.0) * max(mod(in1,( int(1.0) + ( i0 * max(mod(( mod(int(5.0),divInt(in1,int(5.0))) * mod(abs(int(2.0)),( int(6.0) - min(max(( min(i1, abs(int(9.0))) + int(7.0) ), ( abs(in2) * i2 )), in2) )) ),abs(abs(abs(divInt(int(4.0),int(7.0)))))), max(mod(in2,i1), int(2.0))) ) )), divInt(mod(int(8.0),min(int(7.0), int(8.0))),( int(2.0) + ( min(i1, min(i0, int(1.0))) - in1 ) ))) ), divInt(int(4.0),int(4.0))),max(int(8.0), min(i2, int(1.0)))) )\\n:}\\nb2 = i2 == ( min(mod(abs(int(8.0)),int(7.0)), ( res0 - int(0.0) )) + i0 )\\n:}else:{:\\nb2 = ( min(max(int(4.0), max(divInt(int(9.0),( i0 + mod(abs(int(7.0)),int(4.0)) )), in0)), int(5.0)) \\l int(5.0) or i1 == i1 )\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nb2 = ( ( int(3.0) - min(int(8.0), int(5.0)) ) - in0 ) \\l ( ( mod(res0,int(6.0)) + i1 ) - i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 50, 50, 8, 4, 2, 11, 8, 3, 1, 2, 46, 0, 195, 51, 48, 25, 26]}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 0, 1], [1], [1, 1, 1], [1, 1, 1], [8, 8, 8], [], [2], [0], [0, 0, 0], [], [3, 1, 0], [1], [], [1, 1, 2, 1, 0, 3, 0], [1, 0, 0], [2, 1, 2, 0, 1, 3, 0, 0, 2, 1, 0], [1, 0, 1], [1], [1, 1], [1, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( False and b2 ):{:\\ni1 -= mod(int(8.0),( i1 - int(8.0) ))\\ni2 = max(i1, i0)\\nin0 = mod(int(8.0),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 3, 3, 0, 1, 1, 3, 0, 3, 1, 0, 7, 3, 11, 3, 1, 2, 2]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [3, 9, 5], [3], [1], [], [1], [0], [], [], [], [4], [], [0, 2, 3, 1, 1, 3, 1], [1], [1, 2], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in1 \\ge mod(max(int(3.0), int(9.0)),abs(int(5.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 7, 1, 2, 0, 1]}, {"genotype": [[0], [1, 1, 1], [2, 1, 1], [0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 7, 0, 6, 8, 5, 9, 9, 4, 1, 8, 3, 6, 9, 2, 3, 5, 7, 7, 7, 6, 0, 8, 3, 9, 9, 5, 0, 9, 8, 2, 8, 6, 2, 0, 0, 3, 6, 1, 0], [3, 1, 2, 4], [2, 0], [0], [1, 1, 0, 1, 1], [0, 0, 0, 0], [3], [], [1], [5, 0, 1, 2, 5, 1, 4, 6, 5, 2, 0, 4, 2, 3, 6, 1, 2, 2, 5, 0, 3, 6, 6, 6, 0, 5, 1, 5, 4, 6, 6, 5, 6, 5, 4, 5, 5, 4, 6, 3], [], [2, 3, 1, 3, 0, 1, 1, 2, 0, 0, 2, 1, 2, 1, 3, 1, 2, 2, 0, 0, 2, 2, 2, 3, 3, 3, 2, 1, 2, 3, 1, 2, 1, 3, 0, 2, 1, 0, 3, 3, 2, 1, 0, 0, 0, 2, 2, 2, 0, 1, 2, 3, 2, 3, 3, 1, 2, 3, 1, 2, 3, 2, 2, 2, 2, 2, 1, 0, 3, 0, 1, 0, 1, 0, 1, 3, 2, 0, 0, 3, 3, 0, 0, 0, 3, 2, 0, 1, 3, 1, 2, 2, 3, 0, 3, 2, 1, 3, 3, 2, 3, 1, 3, 1, 3, 1, 0, 0, 3, 1, 2, 0, 3, 3, 1, 3, 3, 0, 1, 0, 0, 3, 2, 1, 0, 3, 3, 1, 0, 2, 3, 0, 1, 1, 2, 2, 3, 2, 1, 1, 3, 1, 0, 0, 3, 2, 3, 2, 0, 2, 0, 0, 3, 2, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 2, 3, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2, 1, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 2, 2, 2, 0, 0, 2, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 1], [2, 1, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 0, 0, 0, 2, 2, 1, 0, 0, 0, 1, 0, 2, 2, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(max(int(5.0), abs(in2)),int(0.0)) \\ge int(7.0):{:\\nb2 = ( i0 * i1 ) \\g ( int(0.0) - ( int(6.0) - max(int(8.0), ( ( i2 * in2 ) - mod(mod(( max(abs(abs(( int(5.0) * mod(min(int(9.0), ( int(9.0) + min(i1, ( int(4.0) * in1 )) )),max(abs(( int(1.0) - res0 )), in2)) ))), i2) * ( mod(divInt(i0,int(8.0)),( abs(( max(min(int(3.0), divInt(max(int(6.0), ( abs(( mod(divInt(divInt(( int(9.0) - in1 ),abs(i2)),int(2.0)),in0) * int(3.0) )) + res0 )),int(5.0))), abs(mod(i1,i2))) + min(min(i2, in2), i0) )) + abs(( in0 * int(7.0) )) )) * min(int(7.0), mod(( max(res0, max(( int(7.0) - abs(max(divInt(max(int(6.0), min(int(0.0), abs(int(8.0)))),res0), res0)) ), min(int(3.0), ( i0 + max(abs(int(9.0)), min(abs(in2), int(9.0))) )))) + i1 ),in2)) ) ),max(( int(5.0) + in1 ), min(abs(int(0.0)), res0))),divInt(max(res0, int(9.0)),int(8.0))) )) ) )\\n:}else:{:\\nb0 = ( divInt(( abs(( int(2.0) - int(8.0) )) + min(int(6.0), in2) ),res0) == min(divInt(abs(( in2 * divInt(in1,in2) )),min(( in2 * int(2.0) ), in1)), ( res0 - int(0.0) )) and ( ( int(0.0) + int(3.0) ) + ( max(int(6.0), int(1.0)) + in0 ) ) \\le int(0.0) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 41, 41, 4, 2, 1, 5, 4, 1, 0, 1, 40, 0, 170, 46, 43, 29, 17]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 2, 2, 0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 1], [1, 1, 1, 1, 1, 1], [9, 6, 4, 6, 7, 6], [3, 4, 3, 2], [0, 0], [], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0], [1, 2, 2, 1], [1, 0], [0, 0, 0, 0], [1, 3, 0, 6, 0, 4, 6, 2], [1], [3, 3, 1, 2, 0, 3, 0, 3, 1, 3, 0, 0, 1, 0, 1, 1, 1, 2, 0, 0], [0, 1], [0, 2, 0, 2, 2], [0, 1], [1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nif min(abs(int(9.0)), ( i1 + min(in0, abs(int(6.0))) )) \\ge abs(i0):{:\\nif res0 \\le int(4.0):{:\\nb0 = not not True\\n:}\\n:}\\nif i0 \\ge int(6.0):{:\\nb0 = int(7.0) == int(6.0)\\n:}\\nin1 -= mod(res0,i2)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 6, 6, 4, 2, 0, 8, 4, 4, 2, 4, 8, 1, 20, 2, 5, 2, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 4, 7, 0, 9, 5, 6, 7, 8, 0, 8, 9, 9], [], [], [], [], [], [], [], [], [4, 4, 1, 4, 0, 1, 1, 0, 1, 6, 4, 4, 1], [0, 1], [3, 2, 2, 1, 3, 0, 2, 1, 2, 1, 3, 0, 3, 0, 3, 2, 2, 0, 2, 3, 3, 0, 2, 0, 3, 0, 1, 1, 1, 3, 0, 2, 1, 2, 2, 1, 0, 3, 1, 3, 2, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 2], [2, 1, 1, 0, 2, 2], [1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(mod(( int(1.0) * max(in1, ( int(4.0) - mod(int(7.0),min(i1, abs(in1))) )) ),min(mod(mod(i0,mod(abs(max(i1, divInt(i1,max(i0, int(0.0))))),int(9.0))),int(5.0)), min(i1, ( int(6.0) - mod(( int(7.0) + res0 ),min(int(8.0), abs(( in1 * int(0.0) )))) )))), in1)\\ni1 *= int(899.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 13, 2, 45, 12, 11, 6, 7]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 1, 2, 2, 2, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 2, 0, 1, 2, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 9, 8, 2, 8, 6, 9, 7, 1, 9, 2, 6, 7, 2, 2, 6, 0, 2, 7, 4, 9, 0, 3, 3, 0, 0, 9, 8, 6, 6, 9, 9, 5, 8, 5, 6, 0, 6, 2, 7, 9, 8, 8, 0, 0, 0, 4, 2, 4, 9, 8, 9, 2, 7, 6, 3, 0, 1, 6, 5, 0, 4, 0, 0, 3, 9, 5, 7, 2, 0, 9, 5, 2, 1, 5, 3, 6, 4, 1, 2, 3, 7, 1, 3, 8, 6, 4, 0, 8, 0, 2, 6, 6, 3, 0, 3, 9, 9, 8, 8, 5, 4, 9, 8, 0, 6, 4, 1, 2, 6, 4, 1, 8, 0, 3, 7, 7, 4, 4, 4, 2, 3, 3, 6, 2, 9, 6, 2, 2, 0, 9, 8, 3, 9, 9, 7, 5, 7, 5, 1, 4, 4, 2, 9, 6, 4, 3, 4, 2, 7, 0, 9, 5, 9, 1, 9, 1, 7, 0, 9, 5, 8, 1, 6, 6, 6, 1, 6, 9, 5, 9, 7, 4, 4, 7, 5, 0, 1, 3, 9, 7, 3, 0, 5, 8, 9, 1, 5, 7, 8, 8, 0, 4, 2, 7, 0, 3, 7, 1, 5, 8, 9, 3, 6, 8, 5, 6, 7, 2, 3, 4, 9, 6, 4, 8, 1, 7, 8, 8, 5, 5, 4, 6, 0], [5, 3, 4, 2, 2, 2, 4, 1, 4, 5, 0, 3, 5, 4, 4, 2, 4, 5, 1, 2, 5], [0, 0, 0, 2, 1, 0, 2, 0, 0, 2, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 1, 2, 2, 3, 1, 0, 3, 0, 2, 3, 0, 2, 2, 1], [0, 0, 1], [1, 0, 0, 1, 1], [5, 0, 5, 5, 1, 6, 1, 4, 1, 2, 6, 2, 5, 4, 6, 2, 4, 1, 0, 5, 4, 0, 6, 4, 3, 1, 0, 1, 6, 1, 1, 4, 3, 6, 0, 4, 1, 3, 2, 0, 2, 1, 2, 0, 0, 3, 2, 4, 1, 5, 2, 4, 5, 2, 4, 2, 1, 1, 6, 0, 6, 5, 5, 4, 6, 5, 1, 5, 5, 0, 1, 2, 3, 6, 2, 0, 6, 1, 6, 3, 1, 3, 0, 3, 1, 5, 3, 2, 4, 4, 1, 5, 1, 2, 4, 6, 0, 0, 1, 3, 4, 2, 3, 3, 6, 5, 2, 1, 3, 5, 6, 2, 6, 1, 1, 6, 5, 2, 6, 6, 0, 3, 1, 2, 2, 4, 1, 1, 1, 4, 0, 0, 5, 3, 0, 4, 6, 4, 2, 1, 5, 6, 6, 4, 3, 0, 0, 1, 4, 4, 0, 5, 5, 5, 2, 3, 0, 6, 2, 1, 5, 6, 4, 4, 0, 6, 4, 5, 5, 1, 2, 5, 5, 6, 6, 4, 6, 6, 5, 5, 2, 6, 4, 2, 3, 2, 6, 4, 1, 3, 2, 0, 0, 6, 5, 5, 5, 6, 6, 0, 4, 3, 4, 0, 3, 2, 4, 1, 0, 1, 3, 6, 0, 1, 4, 0, 5, 4, 3, 6, 3, 6, 5, 4, 4, 6, 4, 2, 3, 1, 4, 6, 0, 2, 5, 6, 4, 4, 1, 1, 0, 6, 2, 1, 0], [1, 0], [2, 3, 3, 2, 0, 0, 2, 3, 2, 1, 1, 3, 0, 3, 1, 3, 3, 0, 3, 3, 3, 1, 0, 0, 1, 3, 2, 3, 1, 0, 2, 2, 3, 0, 2, 0, 0, 3, 1, 0, 2, 2, 0, 3, 3, 1, 3, 0, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 0, 3, 0, 2, 1, 0, 2, 2, 3, 0, 1, 0, 0, 1, 3, 0, 3, 3, 3, 0, 3, 1, 1, 2, 2, 2, 1, 1, 1, 1, 0, 3, 0, 0, 1, 2, 3, 3, 1, 0, 3, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0, 1, 3, 2, 2, 3, 2, 2, 2, 1, 1, 1, 0, 3, 2, 3, 1, 1, 0, 3, 2, 2, 3, 1, 3, 0, 0, 1, 2, 3, 1, 2, 3, 1, 2, 2, 1, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 0, 1, 1, 2, 0, 0, 1, 1, 3, 1, 1, 3, 1, 3, 2, 0, 3, 2, 0, 0, 0, 2, 0, 2, 2, 3, 2, 3, 2, 3, 0, 2, 3, 3, 1, 2, 3, 1, 2, 3, 3, 3, 1, 0, 2, 0, 3, 1, 2, 1, 0, 0, 3, 3, 1, 3, 0, 0, 3, 3, 1, 2, 1, 3, 2, 1, 2, 3, 0, 0, 3, 1, 1, 3, 2, 2, 0, 2, 3, 3, 2, 2, 1, 3, 0, 0, 1, 1, 0, 1, 3, 2, 3, 0, 2, 0, 0, 0, 2, 3, 0, 2, 0, 0, 1, 3, 3, 2, 2, 0, 3, 2, 2, 1, 2, 3, 0, 0, 2, 3, 0, 1, 1, 1, 0, 0, 3, 2, 0, 0, 3, 3, 2, 2, 2, 3, 0, 3, 1, 3, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 2, 0, 2, 1, 0, 1, 1, 2, 2, 2, 0, 2, 2, 0, 1, 3, 1, 3, 2, 3, 0, 0, 1, 2, 0, 1, 3, 3, 3, 0, 2, 1, 3, 2, 0, 0, 3, 2, 3, 2, 2, 2, 0, 3, 2, 1, 3, 0, 2, 0, 1, 0, 1, 3, 1, 2, 3, 2, 3, 1, 2, 0, 2, 2, 2, 0, 2, 0, 3, 0, 1, 0, 3, 2, 0, 2, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 1, 0, 1, 3, 1, 1, 1, 2, 0, 0, 3, 2, 3, 3, 3, 2, 0, 2, 0, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 3, 2, 2, 2, 3, 0, 3, 0, 0, 2, 2, 1, 0, 0, 3, 0, 2, 0, 3, 3, 3, 1, 1, 1, 2, 3, 3, 1, 2, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 2, 0, 3, 2, 1, 3, 2, 1, 2, 0, 2, 2, 3, 2, 0, 1, 2, 3, 0, 0, 3, 1, 2, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 1, 3, 0, 3, 1, 1, 2, 1, 0, 0, 2, 0, 3, 1, 1, 1, 1, 3, 0, 3, 2, 0, 0, 1, 0, 0, 2, 0, 1, 2, 3, 1, 2, 2, 3, 1, 2, 1, 0, 2, 3, 0, 2, 3, 2, 1, 2, 0, 0, 0, 0, 1, 2, 2, 0, 0, 1, 2, 2, 3, 3, 0, 3, 1, 3, 1, 0, 2, 0, 3, 2, 1, 1, 3, 2, 2, 0, 3, 0, 1, 2, 2, 3, 3, 0, 2, 0, 1, 1, 1, 2, 2, 0, 2, 3, 0, 2, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 1, 2, 1, 3, 0, 2, 0, 2, 3, 3, 2, 1, 1, 0, 1, 3, 0, 0, 1, 2, 2, 2, 1, 2, 1, 1, 3, 1, 2, 0, 2, 1, 1, 0, 0, 1, 2, 2, 1, 1, 0, 3, 3, 0, 3, 1, 1, 2, 2, 3, 1, 1, 2, 3, 0, 3, 0, 3, 0, 2, 3, 1, 3, 1, 3, 2, 3, 3, 1, 1, 1, 2, 1, 3, 2, 1, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 1, 2, 2, 0, 2, 0, 0, 2, 0, 2, 3, 2, 1, 2, 0, 3, 2, 3, 0, 2, 3, 3, 3, 1, 2, 2, 2, 3, 0, 2, 1, 3, 2, 2, 0, 3, 1, 0, 0, 1, 0, 1, 2, 0, 3, 2, 2, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1, 2, 2, 2, 1, 2, 0, 1, 0, 0, 0, 3, 3, 2, 3, 1, 2, 3, 2, 0, 3, 2, 2, 0, 2, 1, 0, 0, 2, 1, 0, 3, 0, 1, 2, 3, 1, 0, 1, 1, 0, 2, 3, 0, 0, 2, 2, 0, 1, 1, 3, 2, 0, 3, 2, 3, 3, 2, 2, 1, 3, 2, 3, 3, 0, 2, 3, 2, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 3, 2, 0, 0, 2, 2, 1, 2, 2, 0, 3, 0, 1, 0, 0, 3, 1, 3, 0, 2, 0, 1, 2, 1, 2, 3, 2, 3, 2, 3, 3, 1, 3, 0, 0, 2, 2, 2, 1, 2, 0, 3, 2, 2, 1, 2, 2, 3, 2, 2, 3, 1, 0, 2, 2, 0, 0, 1, 3, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 3, 2, 0, 1, 3, 0, 3, 0, 1, 2, 0, 0, 0, 3, 2, 3, 2, 2, 3, 3, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 0, 2, 2, 0, 1, 1, 2, 1, 1, 3, 3, 0, 2, 2, 0, 0, 0, 1, 3, 2, 2, 1, 1, 0, 2, 1, 1, 3, 2, 2, 1, 1, 1, 3, 0, 0, 3, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0], [1, 1, 2, 0, 1, 2, 2, 2, 0, 2, 2, 0, 1, 1, 2, 1, 2, 0, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 2, 2, 1, 0, 2, 1, 1, 1, 0, 2, 1, 0, 2, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 2, 1, 1, 0, 1, 1, 1, 2, 0, 2, 1, 2, 0, 1, 1, 2, 2, 0, 0, 1, 2, 1, 1, 0, 0, 1, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 0, 1, 0, 0, 0, 2, 2, 1, 1, 2, 1, 0, 0, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 2, 1, 2, 2, 0, 2, 2, 0, 1, 2, 2, 0, 0, 1, 1, 1, 0, 0, 2, 2, 0, 2, 0, 1, 0, 1, 0, 2, 2, 1, 2, 1, 0, 1, 2, 1, 1, 0, 1, 1, 2, 2, 2, 2, 1, 0, 1, 0, 1, 1, 2, 2, 0, 2], [0, 0, 1, 0, 1, 0, 1, 1, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 0, 2, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 1, 2, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2, 2, 1, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 105, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( max(max(( in2 + i0 ), ( abs(( int(6.0) + int(2.0) )) - min(in2, max(int(9.0), abs(abs(in2)))) )), abs(min(abs(int(8.0)), i1))) + res0 ) != int(2.0)\\nloopBreak% = 0\\nwhile ( ( ( True or abs(mod(min(int(8.0), i1),mod(mod(max(in1, mod(i1,i2)),max(int(6.0), res0)),divInt(mod(i2,abs(max(int(9.0), abs(in2)))),min(mod(int(7.0),max(min(( int(1.0) - in1 ), mod(max(res0, abs(i2)),divInt(int(9.0),in1))), divInt(( max(i1, int(2.0)) + i0 ),in2))), int(6.0)))))) \\ge max(in1, max(abs(abs(i0)), abs(int(7.0)))) ) and not int(2.0) \\le ( mod(divInt(int(2.0),int(6.0)),int(0.0)) - int(2.0) ) ) and not ( res0 == min(in1, in0) and True ) ):{:\\ni1 -= int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( min(min(int(4.0), i0), min(int(9.0), int(0.0))) * ( int(3.0) + int(3.0) ) ) == int(0.0)\\nif ( int(0.0) * int(9.0) ) == i1:{:\\nloopBreak% = 0\\nwhile b0:{:\\nif int(8.0) \\le abs(( ( abs(mod(( mod(int(6.0),int(6.0)) * int(9.0) ),res0)) * max(( min(int(9.0), int(5.0)) + i1 ), abs(( divInt(max(int(8.0), max(i1, in1)),int(5.0)) * ( max(int(6.0), ( min(int(0.0), ( mod(int(6.0),divInt(int(2.0),int(7.0))) * in0 )) * int(9.0) )) + int(8.0) ) ))) ) - res0 )):{:\\nb2 = i0 \\g in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = ( ( i1 - in0 ) \\le int(8.0) and b0 )\\n:}\\nloopBreak% = 0\\nwhile not ( b2 and int(0.0) != divInt(i2,i0) ):{:\\nloopBreak% = 0\\nwhile int(0.0) \\l int(0.0):{:\\ni2 = abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(2.0) \\ge max(int(4.0), min(( i1 * abs(mod(i2,i0)) ), i0))\\nif divInt(in0,( divInt(min(( min(divInt(max(i2, mod(min(min(int(9.0), mod(min(int(8.0), divInt(max(abs(min(int(9.0), in1)), mod(i1,min(int(2.0), mod(int(7.0),in2)))),i2)),abs(abs(int(6.0))))), min(in1, in2)),min(abs(int(3.0)), ( int(0.0) - abs(divInt(int(1.0),divInt(max(i2, in1),min(int(6.0), int(5.0))))) )))),min(( ( i2 - mod(min(min(( divInt(int(0.0),max(i1, i1)) - int(4.0) ), int(0.0)), res0),int(0.0)) ) * min(( max(i0, ( res0 - in2 )) - in2 ), mod(min(in1, mod(res0,in2)),int(3.0))) ), min(min(mod(divInt(i1,min(( divInt(int(9.0),mod(max(in2, in2),divInt(min(i0, int(5.0)),int(7.0)))) - int(2.0) ), i1)),i2), min(( in0 * res0 ), max(min(mod(mod(( abs(i2) - max(int(0.0), min(abs(i0), res0)) ),i1),res0), int(9.0)), in0))), abs(i1)))), in0) - divInt(( i0 - mod(int(5.0),in0) ),int(2.0)) ), int(1.0)),( mod(divInt(i1,( divInt(in2,int(5.0)) - abs(int(3.0)) )),abs(( abs(in0) * i2 ))) * int(6.0) )) - ( in1 * int(4.0) ) )) != max(abs(abs(in1)), ( int(1.0) - max(divInt(i1,in2), min(( abs(( ( mod(i1,max(divInt(int(2.0),max(i2, divInt(in1,int(3.0)))), res0)) + int(7.0) ) * min(int(1.0), divInt(max(( max(int(3.0), ( i0 + ( divInt(( i0 + divInt(i1,max(in0, int(8.0))) ),in1) * abs(divInt(i2,divInt(in0,mod(min(in0, res0),in2)))) ) )) * i2 ), i1),in0)) )) + int(6.0) ), int(4.0))) )):{:\\nb0 = divInt(in2,divInt(int(0.0),res0)) \\le int(8.0)\\nb2 = abs(int(0.0)) \\le int(2.0)\\nif int(6.0) == divInt(i2,res0):{:\\nif not max(divInt(abs(min(max(mod(i1,mod(i1,mod(int(6.0),max(abs(( int(3.0) - res0 )), divInt(abs(int(0.0)),min(divInt(( ( min(in2, max(i2, res0)) - ( ( int(3.0) + res0 ) - i0 ) ) - abs(in0) ),( i1 - max(max(min(int(9.0), int(9.0)), int(8.0)), ( min(max(int(8.0), divInt(int(5.0),mod(divInt(abs(abs(min(min(max(max(max(int(4.0), i2), max(( i2 * min(divInt(int(9.0),min(( int(8.0) - mod(in1,divInt(( min(mod(i1,int(0.0)), ( max(i1, i1) + min(int(6.0), mod(abs(abs(int(4.0))),max(in1, min(int(1.0), abs(int(2.0)))))) )) * divInt(int(6.0),min(i0, max(int(4.0), int(1.0)))) ),( int(8.0) + i0 ))) ), in2)), divInt(in0,min(int(0.0), int(3.0)))) ), int(7.0))), int(7.0)), max(i0, abs(( in1 + res0 )))), int(4.0)))),in1),i2))), divInt(i1,int(4.0))) + divInt(abs(int(4.0)),( mod(min(int(2.0), divInt(int(3.0),in2)),divInt(min(res0, ( max(mod(int(3.0),mod(res0,in1)), in0) * i0 )),int(6.0))) * divInt(( i0 * i1 ),int(2.0)) )) )) )), ( divInt(abs(abs(in1)),max(int(9.0), abs(int(6.0)))) + in1 ))))))), mod(i0,max(divInt(int(2.0),int(2.0)), abs(( divInt(in2,min(in2, int(0.0))) * ( ( max(min(in2, ( i2 - int(9.0) )), int(8.0)) * int(3.0) ) - ( ( in0 + ( min(i0, mod(int(9.0),( mod(int(9.0),res0) * mod(min(( i2 * ( divInt(mod(divInt(int(7.0),( int(5.0) - abs(i1) )),( in2 - ( abs(max(divInt(int(7.0),int(5.0)), res0)) - int(1.0) ) )),max(in1, in1)) - int(4.0) ) ), divInt(divInt(divInt(int(4.0),divInt(int(2.0),int(9.0))),abs(int(6.0))),( i0 + ( int(4.0) + int(3.0) ) ))),res0) ))) + in1 ) ) * int(4.0) ) ) ))))), ( mod(int(2.0),int(7.0)) - in2 ))),max(min(in2, min(int(0.0), int(9.0))), divInt(mod(min(int(5.0), int(9.0)),mod(max(i1, abs(i2)),abs(in2))),( min(int(1.0), min(int(9.0), max(divInt(abs(min(int(1.0), int(7.0))),int(0.0)), ( int(9.0) - max(divInt(int(5.0),min(in2, ( max(int(8.0), res0) + int(1.0) ))), int(6.0)) )))) - abs(res0) )))), int(6.0)) \\le divInt(( in1 + ( res0 + res0 ) ),( in2 + ( min(( int(6.0) * ( in2 + abs(mod(min(i2, ( abs(max(abs(int(1.0)), mod(( ( abs(res0) + ( int(6.0) + min(mod(( in1 + abs(int(9.0)) ),i2), in0) ) ) - int(5.0) ),i2))) * int(9.0) )),( res0 * abs(( mod(in1,min(divInt(int(7.0),int(4.0)), i1)) * ( in0 * i2 ) )) ))) ) ), int(4.0)) - divInt(divInt(mod(int(7.0),( i0 * int(5.0) )),i0),res0) ) )):{:\\nb1 = in2 != max(abs(( abs(int(0.0)) * mod(min(( in2 + min(( ( in2 - ( int(1.0) - res0 ) ) * res0 ), divInt(int(3.0),i0)) ), max(in1, int(9.0))),( max(int(7.0), in0) - int(3.0) )) )), int(0.0))\\n:}else:{:\\nb0 = not False\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 \\g mod(max(i0, in0),( ( i2 * int(5.0) ) - int(8.0) )):{:\\nb1 = min(divInt(in1,min(mod(abs(abs(( mod(int(9.0),min(mod(abs(min(i1, ( max(mod(int(1.0),min(max(int(5.0), int(7.0)), int(8.0))), int(8.0)) * int(0.0) ))),int(4.0)), int(2.0))) - min(mod(i0,i1), ( ( int(7.0) - divInt(( in0 * abs(res0) ),int(0.0)) ) - i0 )) ))),i1), abs(int(3.0)))), max(in1, mod(i0,int(7.0)))) == ( int(1.0) + ( abs(( max(( min(max(int(5.0), abs(in2)), in1) * ( mod(mod(int(8.0),( in0 - max(divInt(( int(9.0) - mod(mod(max(( divInt(min(int(3.0), res0),divInt(divInt(in0,res0),int(6.0))) - max(divInt(int(8.0),int(5.0)), in2) ), int(6.0)),in1),in1) ),int(7.0)), res0) )),in1) + mod(max(divInt(i2,int(2.0)), abs(in0)),abs(i1)) ) ), int(3.0)) - divInt(in1,res0) )) - i0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nb1 = abs(( abs(( ( max(min(i2, int(4.0)), ( ( ( in2 - res0 ) - max(( min(in1, ( divInt(in1,int(9.0)) - int(6.0) )) - divInt(int(4.0),int(8.0)) ), max(max(i1, divInt(( i1 * i0 ),res0)), int(1.0))) ) + abs(( mod(int(7.0),int(8.0)) * i2 )) )) + ( int(8.0) + int(5.0) ) ) * abs(mod(( int(5.0) - int(4.0) ),int(6.0))) )) - min(i1, i0) )) != abs(int(0.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 23, 23, 10, 13, 225, 225, 21, 14, 6, 38, 21, 17, 3, 5, 245, 2, 969, 268, 233, 129, 140]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 2, 0, 1], [0, 1, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 1, 0, 1, 4, 3, 4, 1, 7, 8, 1], [1, 5], [], [], [0, 1, 1], [0, 0], [1], [0], [0], [0, 0, 3, 3, 0, 0, 4, 2, 3, 1, 4], [0, 0], [0, 3, 0, 1, 3, 2, 1, 1, 3, 3, 1, 2, 0, 2, 2, 0, 3, 1, 2, 3, 3, 2, 1, 1, 1, 2, 3, 2, 1, 0, 1, 0, 3, 3, 1, 2, 0, 0, 3, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1], [2, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1], [1, 0, 2, 2, 0, 2, 1], [0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nloopBreak% = 0\\nwhile i0 \\g abs(i0):{:\\nloopBreak% = 0\\nwhile int(4.0) != abs(( int(8.0) - int(1.0) )):{:\\nin0 = min(min(int(0.0), ( in0 + ( ( i0 * min(int(1.0), ( abs(abs(( int(4.0) * int(3.0) ))) + int(4.0) )) ) * divInt(min(( int(1.0) - i0 ), int(7.0)),in1) ) )), max(abs(int(8.0)), divInt(i2,in0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = max(int(1.0), in1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 12, 12, 2, 0, 0, 3, 2, 1, 1, 1, 11, 2, 41, 9, 11, 7, 2]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 0, 2, 1], [1, 0, 1], [0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 3, 4, 4, 7, 8, 7], [5, 1], [2, 1, 1, 1], [1], [1, 0, 1, 0, 0, 0, 0, 0], [0, 0], [3, 0, 0, 1, 2, 1], [1, 1], [1], [5, 4, 5, 0], [], [3, 2, 1, 1, 1, 3, 1, 3, 0, 0, 3, 2, 0, 3, 1, 1, 0, 1], [1, 0], [0, 0, 1, 0, 0], [1], [1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(mod(int(1.0),int(3.0)), int(4.0)) != min(int(4.0), max(in2, in1)):{:\\nif ( min(( in2 - min(int(7.0), int(8.0)) ), i0) \\g int(7.0) or b2 ):{:\\nb1 = b1\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nb1 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 7, 7, 2, 4, 1, 8, 2, 6, 2, 1, 4, 0, 18, 2, 5, 1, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [4], [], [], [], [], [], [], [], [], [0], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 1, 1], [1, 1], [1, 0], [1, 1, 1], [5, 5, 9], [0, 1], [2, 1], [], [0, 1, 1, 0], [0, 0], [2, 0], [], [], [1, 5, 4, 0], [1], [3, 1, 1, 3, 3, 1, 2, 0, 0, 0], [0], [2, 2, 2], [1, 0], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not abs(int(5.0)) \\l int(5.0):{:\\nloopBreak% = 0\\nwhile abs(abs(int(9.0))) \\g ( i1 - in2 ):{:\\nin1 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 3, 3, 2, 2, 0, 4, 2, 2, 0, 0, 4, 1, 10, 1, 3, 2, 0]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 2, 1], [1, 0, 1], [1, 0], [1, 1, 1, 1], [9, 6, 7, 7], [1, 1], [2, 2], [], [0, 1, 0, 1], [0, 0], [0, 1], [0], [1], [2, 0, 2, 1], [1], [3, 3, 0, 1, 3, 0, 1, 1, 3, 1, 0], [], [2, 2, 0, 1], [2], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nif abs(abs(i2)) \\g int(9.0):{:\\ni0 *= min(i2, int(6.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nb2 = int(7.0) \\g max(int(7.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 4, 4, 2, 2, 0, 4, 2, 2, 1, 1, 4, 1, 11, 0, 4, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1, 1, 1, 1, 1, 1, 1], [8, 1, 9, 5, 9, 9, 9], [1, 0], [0], [], [1, 1], [0, 0], [], [], [0], [1, 1, 3, 0, 3, 6], [], [1, 0, 2, 2, 2, 3, 2, 1, 3, 0, 3, 1, 0, 1, 3, 0, 0, 3, 2, 0, 2, 2, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0], [2, 1, 1, 2, 2], [2, 1, 1], [0, 1, 0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(8.0) \\g i1:{:\\nb0 = divInt(( mod(abs(divInt(int(1.0),max(i1, max(int(9.0), in0)))),int(5.0)) * abs(i0) ),in0) \\l abs(divInt(res0,( ( int(9.0) - int(9.0) ) - int(9.0) )))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 7, 7, 2, 1, 0, 2, 2, 0, 0, 1, 6, 0, 25, 7, 5, 3, 4]}, {"genotype": [[0], [1], [1], [], [1], [1], [1], [], [], [], [], [], [], [], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(1.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 2, 5, 5, 0, 4, 1, 7, 2, 4, 4, 7, 6, 8, 7, 1, 6, 6, 1, 7, 1, 7, 1, 2, 2, 6, 0, 8, 5, 9, 3, 3, 5, 2, 8, 3], [0], [], [], [1], [0], [], [], [0], [1, 5, 6, 4, 0, 6, 5, 4, 3, 3, 4, 0, 6, 5, 1, 0, 4, 0, 6, 0, 4, 6, 5, 2, 0, 2, 5, 6, 0, 3, 4, 4, 3, 0, 5, 1, 2, 6, 1, 4, 2, 2, 5, 3, 0, 2, 1], [1], [2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 1, 3, 1, 3, 3, 3, 2, 3, 0, 0, 1, 2, 1, 1, 1, 0, 1, 2, 2, 2, 3, 0, 2, 3, 3, 1, 3, 3, 0, 3, 0, 0, 2, 2, 0, 3, 2, 0, 2, 1, 3, 3, 0, 0, 1, 1, 2, 3, 3, 3, 1, 0, 0, 0, 1, 3, 1, 3, 2, 1, 0, 0, 0, 2, 2, 1, 3, 2, 1, 3, 0, 2, 1, 1, 0, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 0, 3, 0, 2, 3, 2, 0, 3, 0, 2, 2, 1, 3, 3, 3, 3, 3, 2, 1, 2, 3, 0, 3, 3, 1, 0, 2, 3, 2, 1, 2, 0, 3, 3, 0, 2, 0, 1, 1, 0, 0, 0, 0, 1, 1, 3, 0, 1, 1, 1, 3, 2, 2, 0, 1, 1, 0, 1, 3, 2, 0, 2, 3, 0, 3, 0, 0, 3, 2, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 2, 1, 1, 0, 1, 1, 0, 0, 2], [0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 0, 2, 0, 0, 2, 1, 1, 1, 2], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(7.0) + int(3.0) ) \\l ( ( ( ( i1 + ( mod(int(2.0),max(int(5.0), max(max(max(( abs(in2) - res0 ), int(5.0)), ( int(0.0) * int(4.0) )), int(1.0)))) * in1 ) ) * int(7.0) ) + ( divInt(( max(i0, mod(max(max(int(2.0), max(min(res0, max(in2, in1)), divInt(( in0 + min(( in0 + ( int(4.0) + min(min(in1, i0), int(4.0)) ) ), int(7.0)) ),mod(min(max(abs(int(6.0)), res0), in2),i1)))), int(8.0)),max(int(7.0), max(( int(1.0) * i0 ), in1)))) - i0 ),divInt(divInt(int(6.0),min(( int(6.0) * min(res0, divInt(int(1.0),int(7.0))) ), i0)),( min(min(in1, abs(max(res0, abs(( min(in2, max(i2, ( max(( i0 - max(i2, ( divInt(int(1.0),max(min(max(min(abs(mod(int(7.0),mod(abs(in2),max(max(int(1.0), res0), divInt(abs(divInt(int(2.0),divInt(i0,max(max(in0, ( in1 * int(2.0) )), int(6.0))))),in1))))), in0), i0), in2), int(0.0))) - int(8.0) )) ), min(i1, int(5.0))) + int(9.0) ))) * int(3.0) ))))), max(( ( i2 + int(3.0) ) + int(5.0) ), res0)) * int(2.0) ))) - max(divInt(i1,mod(min(in1, min(i2, i2)),abs(( int(8.0) - int(3.0) )))), mod(in2,in0)) ) ) - i0 ):{:\\ni2 *= i1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 37, 37, 1, 0, 0, 1, 1, 0, 0, 1, 47, 1, 171, 41, 47, 25, 17]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [6, 0, 2], [1], [2, 2, 0, 0, 1], [1, 1], [], [2], [1, 1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= mod(mod(i0,i2),int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 2, 0, 1, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 3, 6, 7, 7, 5, 4, 5, 3, 3, 3], [], [], [], [], [], [], [], [], [4, 4, 0, 6, 2, 2, 6, 3, 0, 1, 3, 5, 6, 3, 6, 0, 1, 1], [0, 1], [3, 3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 3, 1, 1, 3, 2, 0, 0, 3, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 0, 3, 2, 2, 0, 2, 1, 3, 2, 2, 2, 0, 1, 0, 0, 3, 0, 0, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [1, 2, 1, 1, 0, 0, 1, 0, 2, 0, 2, 2, 1], [2, 1, 2, 2, 2, 0, 0, 1, 2, 1, 0], [1, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = max(abs(( ( max(mod(max(( ( int(9.0) * int(2.0) ) - in1 ), mod(i0,int(3.0))),res0), ( min(int(6.0), int(7.0)) * min(( i2 * i2 ), max(min(abs(int(7.0)), ( res0 * divInt(( int(5.0) + int(4.0) ),in0) )), i0)) )) + min(mod(mod(i1,( int(5.0) - abs(mod(mod(( in0 * int(3.0) ),in2),res0)) )),abs(in0)), res0) ) - max(int(3.0), i0) )), i1)\\ni1 += int(3.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 18, 2, 58, 17, 13, 11, 7]}, {"genotype": [[0], [1], [0], [], [1], [1], [5], [], [], [], [], [], [], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(5.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [0, 0, 0], [1, 1, 1, 1, 1, 1], [1, 9, 7, 5, 1, 5], [2, 4, 1], [0, 2, 2], [1], [1, 0, 1, 0, 0, 0, 1], [0, 0, 0], [2, 2, 3, 1], [0], [], [6, 0, 5], [], [1, 0, 1, 2, 2, 0, 2, 1, 0, 1, 1, 1], [0, 0, 1], [], [2, 1], [0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(1.0) == res0\\nb2 = not int(9.0) \\le ( ( i0 * divInt(int(7.0),in2) ) - int(5.0) )\\nb2 = not ( True or int(1.0) \\g int(5.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 6, 6, 3, 3, 1, 7, 3, 4, 1, 0, 3, 0, 12, 3, 0, 2, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1], [2, 0, 8, 6, 1], [2, 4], [2], [0, 1], [0, 0, 1, 1, 0], [0, 0], [3, 3, 1], [0], [], [1, 1, 0, 0, 5, 3, 1, 2], [], [2, 3, 1, 2, 1, 2, 0, 0, 0, 1, 3, 3, 2, 2, 1, 0, 2, 0, 3, 2, 0, 0, 2, 1, 0], [1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 2, 0], [1, 0], [0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( divInt(abs(int(2.0)),( int(0.0) - divInt(i1,i1) )) == i0 and int(8.0) \\le abs(abs(divInt(mod(int(6.0),i0),mod(in2,min(( in0 + i1 ), mod(int(1.0),i2)))))) ) or True )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 2, 1, 2, 5, 2, 3, 1, 0, 8, 0, 25, 8, 4, 2, 6]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [9, 1], [5], [0], [0], [0, 1, 0], [0], [3, 1], [1], [], [], [], [3, 1, 1], [], [2], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( abs(int(9.0)) != int(1.0) and False )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 1, 3, 1, 2, 1, 0, 0, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 2, 2, 1, 1, 2, 0, 1, 1], [0, 1, 1], [0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 6, 6, 2, 1, 9, 4, 6, 2, 1, 4, 8, 2, 6, 0, 9, 9, 1, 0, 9, 8, 0, 7, 3, 3, 9, 5, 8, 1, 6, 3, 4, 4, 7, 5, 4, 9, 4, 9, 2, 2, 7, 7, 4, 5, 0, 5, 8, 0, 2, 1, 5, 9, 4, 0, 1, 5, 4, 1, 4, 7, 0, 2, 7, 8, 0, 3, 2, 0, 4, 6, 5, 1, 4, 5, 0, 6, 1, 9, 9, 6, 0, 4, 7, 0, 4, 0, 2, 5, 8, 7, 8, 7, 2, 5, 2, 9, 5], [4, 2, 2, 5, 3], [1, 1, 0, 1, 2, 2, 0], [1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [2, 2, 0, 3, 2, 0, 3, 1, 3, 1, 0], [1, 0], [0], [2, 5, 1, 0, 6, 0, 6, 0, 2, 4, 2, 2, 4, 2, 4, 5, 3, 2, 6, 2, 3, 5, 4, 1, 0, 1, 1, 2, 5, 2, 2, 0, 4, 6, 2, 2, 2, 1, 3, 4, 5, 0, 2, 4, 1, 0, 4, 2, 0, 1, 3, 3, 4, 1, 2, 1, 6, 0, 4, 6, 5, 3, 3, 4, 6, 0, 2, 6, 3, 1, 4, 2, 4, 4, 3, 0, 0, 4, 6, 6, 1, 2, 1, 4, 5, 4, 6, 0, 4, 4, 1, 3, 6, 2, 5, 4, 5, 3, 1, 5, 1, 1], [1, 1, 1], [0, 1, 0, 0, 3, 1, 2, 1, 3, 2, 1, 2, 2, 3, 0, 0, 1, 3, 2, 3, 3, 2, 3, 1, 3, 1, 1, 3, 1, 0, 2, 1, 1, 0, 3, 2, 3, 3, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 3, 1, 0, 2, 0, 2, 1, 0, 2, 0, 1, 3, 1, 1, 3, 2, 1, 3, 0, 2, 0, 2, 0, 1, 3, 3, 0, 1, 1, 2, 0, 3, 2, 0, 2, 2, 2, 3, 3, 2, 0, 2, 2, 1, 3, 2, 2, 3, 0, 0, 3, 2, 1, 0, 1, 2, 0, 0, 3, 2, 2, 3, 0, 1, 2, 2, 0, 3, 3, 2, 1, 2, 3, 0, 2, 1, 2, 1, 3, 2, 3, 2, 3, 1, 3, 2, 3, 1, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 2, 2, 3, 1, 1, 0, 3, 1, 0, 1, 1, 1, 0, 0, 2, 1, 3, 1, 2, 1, 1, 3, 0, 2, 0, 3, 2, 0, 2, 2, 3, 3, 2, 3, 3, 1, 1, 1, 0, 3, 2, 0, 1, 0, 0, 2, 0, 0, 3, 0, 1, 0, 3, 1, 0, 0, 1, 3, 0, 2, 3, 3, 0, 2, 1, 2, 3, 1, 2, 0, 1, 2, 3, 3, 3, 0, 1, 0, 2, 3, 3, 3, 0, 3, 1, 0, 0, 3, 3, 1, 3, 3, 3, 2, 3, 1, 3, 3, 1, 0, 2, 3, 1, 3, 3, 0, 2, 0, 2, 0, 3, 2, 3, 1, 3, 0, 2, 3, 1, 3, 2, 1, 3, 3, 1, 1, 1, 0, 0, 2, 2, 2, 3, 3, 2, 0, 0, 0, 3, 2, 2, 0, 1, 0, 0, 2, 0, 3, 3, 1, 2, 1, 3, 1, 2, 2, 3, 1, 2, 2, 0, 2, 3, 0, 2, 2, 3, 3, 0, 1, 1, 1, 1, 3, 3, 0, 3, 0, 2, 2, 0, 2, 0, 0, 1, 1, 3, 1, 2, 0, 3, 2, 0, 3, 3, 3, 0, 1, 1, 3, 0, 0, 3, 0, 3, 0, 3, 3, 0, 0, 2, 3, 1, 3, 1, 0, 2, 2, 2, 1, 3, 2, 2, 1, 0, 2, 0, 2, 1, 0, 2, 2, 2, 1, 2, 2, 0, 0, 3, 1, 3, 1, 0, 3, 2, 2, 0, 1, 0, 3, 1, 1, 1, 1, 2, 1, 0, 3, 3, 3, 0, 1, 0, 2, 0, 3, 1, 1, 2, 3, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 2, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2, 1, 1, 1, 0, 2, 2, 0, 0, 2, 0, 2, 2, 1, 2, 1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 2, 0, 2, 1, 0, 2, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 1, 1, 1, 2], [2, 2, 0, 1, 2, 0, 2, 2, 2, 2, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1, 2, 0, 1, 1, 0, 2, 1, 2, 0, 2, 1, 0, 2, 1, 0, 1, 2, 2, 1, 2, 2, 0, 1, 1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 1, 2, 2], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 78, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not not b1\\ni2 *= in2\\nif ( not int(5.0) \\le i1 or b0 ):{:\\nloopBreak% = 0\\nwhile ( False and i0 == abs(int(3.0)) ):{:\\nb1 = ( divInt(int(6.0),abs(divInt(int(6.0),( divInt(abs(res0),i0) * int(2.0) )))) == max(( max(min(mod(abs(int(1.0)),max(int(9.0), int(4.0))), min(int(6.0), res0)), divInt(int(2.0),int(1.0))) + i0 ), min(( abs(max(max(( i2 - int(4.0) ), ( int(8.0) * max(in1, max(( min(int(2.0), i2) + ( i2 * ( int(6.0) * in1 ) ) ), ( i2 * int(0.0) ))) )), min(int(9.0), int(9.0)))) * min(mod(int(1.0),abs(in1)), ( in2 * ( in0 * int(0.0) ) )) ), abs(max(i2, int(9.0))))) or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = int(8.0) != divInt(res0,min(( i2 + ( ( mod(max(abs(( in0 - ( mod(int(0.0),min(divInt(( max(in2, in1) - min(( int(7.0) * i1 ), int(3.0)) ),divInt(i0,i1)), min(( ( abs(i1) + int(3.0) ) * ( ( i2 + abs(max(mod(int(9.0),( min(in2, divInt(int(5.0),( int(8.0) - max(( min(mod(min(int(1.0), min(( abs(int(6.0)) * abs(i2) ), int(3.0))),min(divInt(int(4.0),int(4.0)), divInt(int(7.0),abs(mod(mod(min(int(5.0), int(4.0)),i2),min(int(9.0), i0)))))), int(4.0)) + int(9.0) ), int(2.0)) ))) - in1 )), res0)) ) - mod(int(2.0),min(int(7.0), mod(int(7.0),int(4.0)))) ) ), max(i2, ( i2 + abs(mod(i2,( ( max(min(mod(abs(min(int(5.0), int(0.0))),int(5.0)), i1), min(mod(in0,int(8.0)), in1)) * in2 ) - ( i0 * i2 ) ))) ))))) + abs(in1) ) )), int(0.0)),i1) * abs(int(2.0)) ) - i0 ) ), in1))\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = int(1.0) \\ge abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += ( min(max(i1, ( int(5.0) * ( abs(int(9.0)) - mod(in0,int(4.0)) ) )), divInt(abs(min(min(in0, int(0.0)), in1)),divInt(abs(max(max(i1, max(int(1.0), i2)), i1)),min(abs(int(5.0)), abs(min(min(divInt(abs(int(4.0)),min(abs(int(1.0)), res0)), divInt(abs(int(4.0)),max(abs(i0), ( in1 + ( res0 - max(( min(int(7.0), max(in2, divInt(max(int(0.0), min(( int(2.0) * abs(max(int(7.0), int(8.0))) ), int(0.0))),in0))) * in0 ), ( divInt(divInt(max(abs(( in1 - res0 )), i0),min(mod(( i2 * int(3.0) ),res0), in0)),divInt(i1,min(max(int(2.0), ( int(0.0) * max(int(4.0), mod(mod(min(int(6.0), divInt(mod(in1,( min(i2, ( ( min(max(in1, int(5.0)), int(1.0)) + int(4.0) ) - int(5.0) )) - min(min(in1, max(in0, mod(mod(i0,( i0 + in1 )),int(0.0)))), int(6.0)) )),abs(int(1.0)))),( res0 - min(( res0 * abs(max(min(i1, int(9.0)), int(9.0))) ), abs(i2)) )),i1)) )), max(in1, abs(in2))))) - min(min(in1, res0), mod(min(int(6.0), min(int(0.0), i0)),divInt(( mod(int(4.0),max(mod(( int(7.0) + in1 ),divInt(in1,( int(0.0) + i1 ))), mod(( divInt(int(4.0),mod(mod(in0,res0),max(int(0.0), abs(int(2.0))))) + i2 ),max(( ( in2 + int(5.0) ) + in1 ), max(int(8.0), int(7.0)))))) - int(8.0) ),int(7.0)))) )) ) )))), mod(int(2.0),in2))))))) * min(max(max(in0, int(5.0)), i1), mod(in2,max(int(2.0), int(9.0)))) )\\ni1 *= divInt(abs(i1),int(5.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 99, 99, 5, 7, 3, 16, 5, 11, 2, 1, 102, 3, 418, 104, 116, 56, 51]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 1], [2, 1, 1, 1, 2, 0, 2, 1, 1], [1, 1, 0], [0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 4, 8, 6, 0, 2, 1, 3, 3, 8, 8, 4, 1, 8, 5, 4, 8, 8, 8, 4, 8, 3, 7], [3, 3, 3, 3], [0, 2, 2, 2, 1], [1], [0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [0, 2, 3, 1, 0], [0], [0], [4, 5, 0, 4, 6, 1, 3, 1, 1, 6, 5, 3, 4, 5, 6, 3, 1, 4, 3, 4, 4, 1, 3, 6, 3, 1, 0, 2, 6, 3, 1, 5, 2, 2, 4], [1, 0, 0], [2, 1, 1, 3, 3, 1, 2, 1, 1, 0, 3, 0, 0, 3, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 1, 0, 0, 0, 3, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 1, 3, 0, 3, 0, 1, 3, 0, 0, 0, 0, 3, 2, 1, 0, 0, 1, 3, 3, 3, 2, 1, 0, 1, 2, 1, 3, 1, 2, 3, 1, 2, 2, 3, 0, 0, 0, 3, 1, 3, 0, 3, 0, 0, 1, 2, 0, 3, 1, 2, 0, 2, 3, 3, 1, 0, 1, 3, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 1, 2, 0, 0, 1, 0, 2, 2, 2, 0, 0, 1, 1, 2, 0, 1, 2, 1, 0, 1, 0, 0, 1], [0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 2], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = not mod(int(8.0),int(7.0)) \\ge max(max(int(4.0), ( int(8.0) + int(6.0) )), in1)\\nb2 = abs(in2) \\ge i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 += min(( ( int(0.0) + int(2.0) ) * int(1.0) ), mod(divInt(mod(divInt(( min(int(3.0), res0) * i1 ),in0),max(i1, i1)),res0),min(( divInt(in2,divInt(divInt(( ( in0 * ( divInt(divInt(int(3.0),abs(in1)),abs(in2)) + int(8.0) ) ) * abs(res0) ),in0),i1)) + in1 ), min(mod(int(8.0),in0), in1))))\\nloopBreak% = 0\\nwhile ( int(4.0) \\ge min(max(max(( int(1.0) + in1 ), int(8.0)), mod(int(5.0),abs(int(4.0)))), mod(min(int(8.0), mod(mod(max(i1, in0),res0),abs(int(8.0)))),max(in0, min(i1, i0)))) or True ):{:\\ni2 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b2:{:\\nres0 = divInt(in0,max(int(4.0), mod(i1,( min(min(int(8.0), in2), int(3.0)) * max(i2, int(7.0)) ))))\\nb1 = i2 \\ge in1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 24, 24, 4, 5, 1, 9, 4, 5, 1, 1, 35, 3, 107, 27, 24, 11, 17]}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [0, 1], [1], [1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 6, 1, 3, 6, 6, 0], [3, 5], [], [], [1, 1], [0, 0], [], [], [0], [4, 1, 0, 0, 4, 1, 1], [0], [2, 0, 3, 1, 1, 2, 1, 2, 3, 3, 0, 0, 2, 0, 1, 2, 1, 0, 1, 3, 3, 3, 1, 0, 1], [0, 1, 0, 1, 0], [1, 1, 2, 2, 1, 1], [1, 2, 0], [0, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in1 - max(int(0.0), int(4.0)) ) \\ge divInt(int(6.0),( max(abs(i1), i0) * divInt(i0,int(1.0)) )):{:\\nloopBreak% = 0\\nwhile ( int(3.0) + in1 ) != int(6.0):{:\\ni1 = abs(max(max(int(6.0), i1), int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 8, 8, 2, 0, 0, 2, 2, 0, 0, 1, 7, 1, 25, 5, 6, 3, 2]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [3, 3, 4], [3], [1], [], [0, 1], [0], [2], [], [], [], [], [1, 2, 1, 1], [1], [], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not int(3.0) \\ge mod(int(3.0),int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [1, 1], [5, 7], [2, 1], [0, 2], [1], [0, 0, 0, 1, 1], [0, 0], [2, 3, 0], [], [0], [5, 5, 5, 6], [], [2, 0, 1, 3, 3, 1, 3, 0, 0, 0], [0], [2, 0, 2], [0], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( b0 or ( in2 + int(5.0) ) == abs(min(int(7.0), abs(in2))) ):{:\\nb2 = in2 \\g res0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 5, 2, 3, 0, 1, 4, 0, 10, 1, 3, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [2, 1, 2, 0, 1, 1], [1, 1], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 2, 2, 0, 6, 8, 2, 7, 3, 9, 2, 3, 8, 1, 6, 4, 3, 5, 3, 9, 7, 7, 9, 7, 2, 0, 2, 6, 7, 5, 5, 8, 5, 9, 9, 8], [1, 4, 1, 1], [0, 0, 2], [1], [1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0], [1, 3, 1, 2], [1, 0], [], [6, 6, 0, 0, 4, 0, 0, 1, 5, 0, 5, 0, 0, 2, 0, 0, 6, 3, 0, 0, 5, 2, 3, 1, 0], [1], [3, 3, 0, 2, 1, 0, 2, 0, 3, 2, 1, 3, 3, 3, 2, 2, 3, 2, 3, 3, 1, 3, 1, 0, 2, 2, 3, 0, 0, 3, 3, 1, 3, 2, 1, 0, 3, 3, 1, 2, 2, 0, 3, 1, 3, 0, 1, 1, 1, 1, 3, 0, 0, 3, 3, 3, 0, 2, 2, 3, 2, 2, 1, 0, 3, 3, 3, 1, 0, 3, 2, 2, 0, 1, 3, 0, 1, 0, 1, 3, 2, 0, 1, 0, 0, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 0, 3, 0, 1, 1, 0, 2, 3, 1, 1, 2, 3, 0, 1, 3, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 2, 2, 0, 1, 0, 0, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 0], [1, 0, 2, 2, 0, 0, 1, 2, 1, 2, 2], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(min(res0, mod(int(6.0),res0)), mod(i0,abs(mod(int(9.0),abs(min(max(divInt(( min(( min(max(int(2.0), min(int(2.0), i0)), ( mod(max(in1, i0),abs(min(int(0.0), abs(mod(int(6.0),i0))))) - max(abs(int(8.0)), divInt(( i1 + abs(int(2.0)) ),min(in2, int(7.0)))) )) * int(3.0) ), int(9.0)) * int(2.0) ),abs(i0)), in2), abs(max(min(i0, divInt(mod(min(( ( int(3.0) + i0 ) + max(min(min(int(8.0), i2), min(( ( i0 - int(1.0) ) * min(i0, int(6.0)) ), res0)), int(4.0)) ), max(( in0 - int(3.0) ), i0)),i0),int(5.0))), mod(int(3.0),divInt(mod(divInt(int(9.0),int(7.0)),( int(7.0) * int(9.0) )),divInt(mod(int(7.0),int(2.0)),mod(int(0.0),int(2.0))))))))))))) \\g in2:{:\\ni2 *= max(in0, int(6.0))\\nloopBreak% = 0\\nwhile int(7.0) \\le i1:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( True or not mod(abs(int(5.0)),int(5.0)) \\g mod(min(i0, int(8.0)),min(int(5.0), int(9.0))) )\\nb2 = int(9.0) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 37, 37, 4, 3, 1, 8, 4, 4, 2, 0, 25, 1, 122, 28, 33, 11, 18]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [1, 2, 0, 0, 0, 0], [0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 8, 5, 2, 3, 7, 9, 4], [2], [], [], [0, 1], [0], [2], [], [0], [5, 6, 2, 4, 4, 0, 5, 2, 2, 5], [1, 1, 1, 1, 0], [2, 0, 1, 0, 1, 3, 2, 1, 1, 0, 3, 1, 3, 1, 3, 3, 1, 1, 2, 0, 1, 0], [1, 0, 0], [2, 0, 0, 1, 0], [0, 1, 1, 1, 2, 2], [0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += divInt(res0,int(0.0))\\nif not i2 == int(5.0):{:\\nin1 -= abs(( int(8.0) - int(5.0) ))\\n:}\\nin1 -= i0\\nin2 *= min(int(2.0), min(int(3.0), max(min(int(7.0), int(9.0)), ( i2 * int(4.0) ))))\\ni2 = in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 9, 9, 1, 0, 0, 2, 1, 1, 0, 1, 10, 5, 22, 3, 5, 6, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [2], [], [], [], [], [], [], [], [], [1, 6, 4], [1], [2, 3, 3, 0, 0, 1], [0], [0, 2], [2, 1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= ( min(abs(res0), in1) - int(2.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 6, 1, 2, 2, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 1], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1], [0, 2, 1, 0, 0], [0], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 7, 1, 8, 4, 1, 1, 0, 6, 3, 3, 2, 0, 4, 6, 6, 7, 7, 9, 5, 6, 0, 3, 0, 9, 2, 0, 2, 6, 2, 9, 3, 5], [4, 5, 5, 0, 4, 3], [2, 1, 2, 0], [0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [2, 3, 2, 2, 2], [], [0], [1, 5, 1, 3, 6, 2, 1, 0, 2, 4, 5, 3, 6, 5, 6], [], [2, 3, 3, 2, 1, 3, 0, 0, 2, 3, 1, 1, 2, 3, 1, 3, 1, 2, 2, 3, 0, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 3, 0, 3, 0, 2, 0, 1, 2, 1, 2, 3, 1, 3, 2, 1, 0, 0, 0, 3, 1, 2, 3, 1, 0, 0, 1, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 2, 1, 1, 1, 2, 3, 1, 3, 0, 3, 1, 3, 1, 2, 1, 3, 1, 1, 3, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 1, 2, 1, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 2, 1], [2, 1, 1, 1, 1, 1, 0, 2, 0, 2, 2], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( min(min(mod(int(3.0),abs(i1)), in2), mod(abs(int(4.0)),int(7.0))) * ( abs(int(1.0)) - min(int(8.0), ( divInt(min(i1, int(4.0)),mod(( int(1.0) - ( min(int(1.0), abs(( divInt(in0,int(0.0)) - int(6.0) ))) - int(3.0) ) ),res0)) - ( divInt(min(i2, max(i1, ( i0 + int(3.0) ))),( int(2.0) * mod(abs(int(0.0)),max(divInt(int(4.0),i2), in1)) )) + in2 ) )) ) ) \\le max(int(6.0), ( abs(int(6.0)) * in0 ))\\nif not res0 != int(7.0):{:\\nb1 = ( in2 != int(7.0) and max(int(9.0), abs(max(min(int(5.0), int(6.0)), int(0.0)))) \\l ( int(3.0) * int(0.0) ) )\\nb2 = not not int(9.0) \\le divInt(max(int(2.0), min(res0, max(int(0.0), abs(int(2.0))))),mod(int(6.0),abs(int(2.0))))\\nb0 = not int(9.0) \\ge max(int(3.0), int(5.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 34, 34, 6, 4, 1, 11, 6, 5, 0, 1, 15, 0, 95, 21, 25, 11, 10]}, {"genotype": [[0], [1], [0], [], [1], [1], [2], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [], [], [0], [], [0, 0], [], [2, 1], [1], [], [1, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = i1\\nb0 = not False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 6, 4, 8, 6, 6, 4, 7, 5, 7, 7, 6, 7, 6], [4], [1], [], [1], [0], [], [], [], [5, 6, 0, 6, 3, 5, 4, 0, 0, 1, 2, 2, 3, 5, 1, 1, 0, 5, 2, 0, 3, 1, 1], [], [3, 0, 3, 3, 0, 2, 0, 2, 3, 3, 3, 2, 3, 3, 2, 0, 0, 3, 2, 1, 3, 3, 2, 2, 1, 0, 3, 2, 1, 1, 0, 0, 0, 1, 2, 1, 3, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 3, 0, 3, 2, 2, 1, 3, 0, 0, 3, 3, 2, 0, 2, 1, 3, 0, 2, 0, 3, 0, 1, 0, 1, 0, 2, 3, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 2, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0], [2, 1, 0, 0, 2, 1, 0, 2, 2], [1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(in2, abs(min(res0, ( i0 * mod(min(min(max(( min(max(( res0 - in0 ), max(divInt(int(9.0),min(max(mod(mod(int(8.0),in2),max(( int(6.0) + int(4.0) ), in1)), i0), i0)), int(8.0))), ( int(6.0) + min(i1, int(6.0)) )) * int(4.0) ), int(7.0)), abs(i2)), min(i2, divInt(int(5.0),min(in0, max(divInt(mod(int(7.0),min(in2, i1)),abs(min(( i1 - ( int(7.0) + max(i0, ( in2 * max(i2, int(6.0)) )) ) ), i0))), int(7.0)))))),in0) )))) \\le ( min(i1, i1) * int(6.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 15, 15, 1, 1, 0, 1, 1, 0, 0, 0, 23, 0, 77, 16, 23, 9, 7]}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 9, 2, 1, 0, 7, 5, 8, 4, 6, 5], [0, 2], [1], [], [1, 0, 0, 1], [0, 0], [2, 2], [], [], [4, 3, 6, 0, 1, 3, 2, 0, 0, 1, 6, 2, 6, 6, 1], [0], [1, 3, 0, 2, 2, 3, 2, 0, 3, 2, 1, 3, 2, 0, 3, 0, 2, 1, 3, 1, 3, 0, 3, 3, 3, 3, 2, 0, 1, 2, 0, 3, 1, 3, 1, 2, 1, 3, 0, 1, 0, 0, 0, 1, 0, 2, 1, 3, 0, 2, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 2, 1, 2, 1, 1, 0, 2, 0, 1, 0, 2, 2, 1], [2, 2, 2], [0, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(9.0) \\l max(in1, ( divInt(max(( in0 * abs(mod(int(2.0),max(mod(res0,abs(i0)), divInt(int(9.0),max(int(2.0), max(i1, min(abs(min(max(mod(in0,int(1.0)), divInt(i2,min(int(0.0), abs(int(7.0))))), mod(int(5.0),abs(i0)))), int(8.0)))))))) ), i0),i1) * res0 )):{:\\ni2 = int(4.0)\\nb1 = not not res0 == ( int(6.0) * max(res0, divInt(int(5.0),i1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 12, 12, 2, 1, 0, 4, 2, 2, 0, 0, 15, 1, 52, 11, 15, 3, 8]}, {"genotype": [[0], [0, 0, 1, 0, 1], [0, 2, 0, 1, 0], [1], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 7, 0, 3, 3, 3, 3, 0, 3, 8, 2, 3, 2, 1, 9], [5, 5, 2, 5], [2, 1, 0, 1], [0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0], [2, 1, 2, 3, 1, 3, 1], [0, 0, 1], [], [0, 2, 3, 1, 1, 5, 4, 1, 3, 4, 3], [], [3, 2, 0, 2, 0, 3, 1, 1, 1, 3, 3, 3, 2, 2, 1, 1, 2, 2, 0, 1, 1, 0, 0, 1, 1, 0, 2, 0, 2, 2, 3, 3, 1, 1, 3, 2, 3, 0, 1, 2, 2, 1, 3, 1, 3, 0, 2, 0, 0, 1, 3, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2], [0, 0, 1, 0, 0, 0, 2, 0, 2], [0, 1, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not True\\nloopBreak% = 0\\nwhile min(( i0 + divInt(i2,max(int(7.0), int(2.0))) ), int(7.0)) != abs(abs(abs(( ( int(0.0) + int(3.0) ) - ( ( in0 + int(3.0) ) + int(3.0) ) )))):{:\\nb1 = not ( True and i1 != i1 )\\nb0 = ( int(3.0) == int(0.0) and in2 != ( in1 + mod(mod(min(max(int(3.0), int(8.0)), abs(( abs(i1) * int(2.0) ))),mod(( int(3.0) + min(int(2.0), min(in0, ( in1 * in0 ))) ),int(1.0))),abs(int(9.0))) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 16, 16, 4, 4, 2, 11, 4, 7, 3, 0, 11, 0, 52, 13, 12, 9, 4]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 5], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 0], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [7, 7], [], [], [], [], [], [], [], [], [1, 3, 0, 1, 6, 5], [0], [2, 0, 2, 3, 3, 0, 2, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1], [1, 1], [2, 0], [1, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = ( in0 * ( max(max(i0, mod(i1,int(7.0))), res0) + divInt(in2,int(7.0)) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 13, 4, 2, 2, 2]}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [0, 1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 8, 3, 5, 1, 0, 1, 0, 6, 2, 1, 4, 8, 8, 5, 5, 5], [3], [2], [], [1, 0], [0], [0], [], [0], [4, 2, 3, 3, 2, 6, 6, 5, 3, 0, 4], [1], [0, 3, 3, 3, 1, 3, 3, 0, 1, 2, 0, 1, 2, 2, 3, 0, 2, 3, 1, 1, 3, 1, 0, 3, 2, 2, 3, 1, 2, 0, 2, 2, 2, 0, 1, 0, 3, 3, 1, 1, 1, 2, 1, 3, 3, 1, 2, 3, 1, 2, 3, 0, 3, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 0, 2, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 1, 2, 2, 0], [2, 2, 1, 0, 2, 2], [0, 0, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in1 \\ge abs(min(abs(int(4.0)), min(min(i2, int(0.0)), ( in0 * int(8.0) )))):{:\\nloopBreak% = 0\\nwhile b2:{:\\nin0 *= divInt(divInt(abs(i2),( max(int(3.0), int(5.0)) - min(int(1.0), res0) )),min(( ( max(int(0.0), ( res0 + mod(mod(divInt(in2,int(1.0)),in0),max(max(int(0.0), int(6.0)), int(2.0))) )) * divInt(int(1.0),min(max(int(4.0), mod(abs(int(8.0)),divInt(abs(i0),min(int(8.0), in1)))), int(5.0))) ) * int(5.0) ), int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 18, 18, 1, 1, 0, 2, 1, 1, 0, 1, 11, 1, 58, 13, 17, 6, 8]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 0, 2, 2, 1, 0, 2, 0, 2, 2, 1, 2, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 4, 1, 1, 1, 1, 4, 1, 8, 9, 5, 3, 9, 9, 6, 9, 9, 0, 9, 4, 7, 8, 0, 6, 4, 8, 0, 7, 8, 4, 7, 5, 0, 9, 0, 2, 0, 3, 8, 6, 7, 2, 4, 8, 5, 3, 7, 5, 1, 7, 8, 5, 6, 8, 1, 6, 8, 5, 5, 8, 8, 8, 8, 2, 6, 7, 8, 8, 9, 2, 7, 3, 0, 4, 2, 8, 7, 3, 9, 5, 3, 5, 5, 8], [5, 0, 3, 4, 5, 5, 5, 0, 3, 5, 2, 3], [1, 2, 1, 2, 2, 1, 2, 1, 2], [0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 1, 1, 0, 0], [1, 0], [1, 1, 1, 0, 1], [4, 3, 3, 3, 6, 2, 1, 1, 0, 4, 0, 5, 2, 1, 1, 0, 6, 4, 0, 3, 4, 2, 4, 4, 3, 4, 2, 5, 4, 4, 3, 6, 4, 2, 4, 5, 1, 1, 4, 6, 1, 5, 5, 5, 2, 3, 2, 2, 2, 3, 1, 1, 5, 3, 0, 5, 2, 4, 2, 6, 2, 3, 4, 3, 0, 0, 6, 4, 5, 4, 6, 0, 2, 4], [0, 1, 0], [1, 3, 0, 3, 2, 2, 3, 0, 1, 3, 3, 1, 2, 1, 0, 0, 1, 1, 2, 3, 2, 0, 2, 2, 0, 0, 2, 0, 1, 1, 2, 2, 2, 0, 3, 1, 2, 0, 3, 2, 2, 1, 3, 1, 1, 2, 0, 3, 0, 3, 0, 2, 2, 1, 3, 0, 2, 0, 1, 0, 3, 3, 2, 1, 1, 0, 2, 0, 1, 1, 3, 2, 3, 3, 3, 0, 2, 0, 2, 3, 0, 3, 3, 2, 2, 2, 0, 2, 2, 1, 2, 2, 0, 2, 2, 1, 2, 0, 1, 3, 2, 2, 2, 3, 2, 3, 0, 3, 1, 0, 3, 1, 1, 2, 3, 3, 0, 0, 3, 0, 1, 3, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 2, 2, 1, 2, 1, 0, 1, 0, 3, 0, 1, 3, 1, 1, 3, 2, 0, 2, 2, 0, 0, 3, 0, 1, 0, 1, 0, 2, 0, 0, 2, 1, 0, 0, 1, 3, 0, 3, 1, 3, 3, 2, 2, 2, 0, 3, 0, 1, 1, 3, 1, 2, 2, 3, 1, 3, 2, 3, 0, 1, 1, 2, 1, 1, 2, 2, 3, 2, 1, 0, 3, 0, 0, 0, 3, 1, 0, 2, 2, 1, 0, 2, 3, 0, 1, 3, 3, 2, 3, 3, 2, 0, 1, 2, 2, 1, 2, 1, 0, 0, 2, 0, 1, 3, 0, 1, 0, 1, 2, 3, 2, 0, 1, 0, 0, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 1, 1, 0, 3, 2, 3, 2, 1, 3, 0, 3, 3, 3, 1, 1, 1, 1, 2, 2, 0, 0, 2, 3, 0, 0, 3, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 2, 2, 0, 0, 1, 2, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 1, 1, 2, 0, 2, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 1, 2, 2, 1, 2, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 2, 1, 1, 1, 2, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 1, 2, 2, 2, 1, 0, 2, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nin1 = int(4.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile min(in0, max(( divInt(max(in0, int(0.0)),abs(max(int(4.0), ( int(1.0) + in0 )))) - res0 ), int(1.0))) != int(1.0):{:\\nb2 = ( ( max(( i2 + ( mod(i1,i1) - ( i0 - int(1.0) ) ) ), int(4.0)) + mod(divInt(( in1 - min(int(1.0), ( i0 + max(divInt(mod(int(8.0),max(int(9.0), int(5.0))),divInt(in2,abs(i2))), max(i1, ( divInt(int(3.0),max(i1, ( i0 + int(9.0) ))) * res0 ))) )) ),abs(abs(mod(int(9.0),int(6.0))))),in1) ) \\l ( i0 - int(9.0) ) and int(9.0) \\ge min(divInt(max(max(abs(in0), ( in1 - ( abs(i2) - min(min(divInt(( mod(in1,mod(( int(0.0) * ( mod(in1,divInt(( int(9.0) * divInt(in0,int(4.0)) ),max(mod(mod(mod(abs(divInt(max(in1, min(int(7.0), i2)),min(int(8.0), int(0.0)))),divInt(abs(min(in2, in1)),min(in1, int(6.0)))),min(in0, int(4.0))),int(8.0)), int(0.0)))) + int(7.0) ) ),int(8.0))) * int(4.0) ),mod(res0,in1)), ( divInt(divInt(int(7.0),mod(int(5.0),i2)),int(0.0)) - in1 )), min(in2, int(9.0))) ) )), max(int(0.0), int(2.0))),min(( i1 * ( ( i1 * in1 ) + max(res0, int(0.0)) ) ), i1)), int(3.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif in2 \\le divInt(in2,in2):{:\\nloopBreak% = 0\\nwhile ( mod(int(8.0),i2) != in0 and int(6.0) != max(i2, abs(int(7.0))) ):{:\\ni2 *= min(abs(divInt(( divInt(i2,abs(in0)) + int(2.0) ),int(4.0))), abs(int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = ( False or True )\\nif ( ( abs(int(5.0)) + max(divInt(max(i1, int(3.0)),int(7.0)), ( int(5.0) - int(1.0) )) ) * mod(mod(abs(( int(7.0) - i1 )),max(in2, in0)),i0) ) != min(int(8.0), in2):{:\\nb2 = b2\\n:}else:{:\\nif ( mod(int(5.0),i2) * ( abs(in1) + int(6.0) ) ) \\l min(min(( max(max(( i2 - int(8.0) ), ( ( int(1.0) + divInt(int(6.0),res0) ) - i2 )), mod(in0,int(8.0))) * max(in1, int(5.0)) ), in0), int(5.0)):{:\\nif b1:{:\\nb2 = mod(max(mod(i0,int(8.0)), i0),res0) \\ge int(8.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile int(8.0) != int(8.0):{:\\nb1 = ( divInt(mod(int(2.0),mod(int(6.0),divInt(abs(abs(int(7.0))),int(8.0)))),min(min(int(8.0), int(9.0)), int(2.0))) * int(7.0) ) == int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}\\n:}\\nin1 = int(04.0)\\nb2 = min(( ( divInt(int(2.0),int(8.0)) * in2 ) - max(( abs(mod(int(7.0),abs(in1))) + max(abs(max(int(3.0), int(9.0))), int(5.0)) ), int(3.0)) ), mod(( res0 * i0 ),( max(i2, in1) - max(int(5.0), int(5.0)) ))) \\ge int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 8, 9, 85, 85, 12, 9, 3, 20, 12, 8, 2, 5, 74, 3, 303, 82, 66, 39, 44]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 1, 1], [1, 1], [2, 3], [4], [1, 1], [0], [0, 0, 1], [0], [3, 0], [], [], [0, 1, 1, 5, 4], [1, 1], [0, 0, 1, 3, 0, 1], [], [0], [2, 0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b1 and i0 \\le i1 )\\ni1 *= int(2.0)\\nin2 += min(in1, int(3.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 1, 2, 1, 3, 1, 2, 0, 0, 5, 2, 6, 0, 1, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 6], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [], [], [], [0, 0], [], [0], [], [0], [], [], [4, 3, 5], [0], [2, 0, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = mod(in0,in2)\\nb0 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 3, 1, 3, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 9, 4, 5, 8, 6, 5, 8, 3, 3, 6, 0, 1, 8, 6, 8, 7, 1, 0, 0, 7, 0, 4, 0, 9, 0, 8, 8, 4], [0], [2, 0, 2], [], [0, 1], [0], [0], [], [], [4, 4, 1, 5, 6, 0, 3, 5, 6, 3, 3, 1, 1, 5, 2, 5, 1, 6, 4, 5, 4, 6, 5, 6, 1, 5, 3, 4, 1, 2, 6, 6, 0, 4, 2, 5, 1, 1, 5, 5, 5, 2, 2, 4, 0, 2, 3, 4], [1], [3, 1, 1, 1, 2, 0, 3, 2, 3, 2, 1, 0, 0, 3, 3, 2, 1, 0, 3, 2, 0, 3, 3, 3, 3, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 3, 3, 2, 2, 0, 0, 3, 3, 1, 2, 3, 2, 0, 0, 1, 0, 0, 1, 3, 2, 0, 1, 1, 0, 0, 2, 2, 3, 0, 0, 2, 1, 3, 2, 2, 0, 3, 2, 3, 2, 2, 0, 3, 2, 2, 1, 3, 1, 3, 3, 1, 0, 2, 1, 1, 3, 2, 0, 0, 3, 1, 2, 0, 3, 0, 2, 0, 3, 2, 0, 2, 1, 0, 3, 3, 2, 0, 3, 0, 2, 2, 3, 0, 0, 0, 3, 3, 0, 0, 0, 2, 3, 2, 2, 1, 1, 0, 1, 3, 1, 2, 3, 2, 1, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 3, 2, 0, 1, 1, 2, 0, 0, 2, 3, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 2, 0, 0, 2, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 2, 2, 2, 2, 0, 1, 2, 2, 1, 1, 0, 2, 1, 2], [2, 0, 2, 1, 2, 2, 2, 2, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\nb2 = max(int(7.0), int(9.0)) \\l int(9.0)\\nin1 *= mod(in1,abs(mod(min(mod(int(4.0),i1), in2),min(abs(( int(5.0) + res0 )), min(mod(i0,min(max(max(min(in0, divInt(in2,( ( res0 * ( in0 - ( in0 * min(min(mod(divInt(i1,i1),min(max(int(8.0), divInt(max(mod(in2,i2), int(6.0)),in2)), i1)), int(5.0)), abs(( res0 * int(8.0) ))) ) ) ) * int(3.0) ))), in1), in2), ( mod(max(in1, res0),divInt(int(3.0),max(divInt(( in2 * max(mod(max(( ( res0 + max(mod(divInt(int(6.0),max(int(0.0), min(min(int(1.0), i1), ( int(8.0) * int(6.0) )))),abs(( in2 + in0 ))), max(int(8.0), ( in1 - max(i1, divInt(i2,abs(( res0 + mod(int(7.0),res0) )))) ))) ) - abs(abs(divInt(i0,abs(in1)))) ), divInt(mod(min(i2, in2),i1),max(abs(i1), in2))),in2), ( abs(mod(divInt(int(1.0),int(0.0)),in2)) - int(0.0) )) ),max(int(7.0), ( max(mod(int(0.0),i2), i2) + int(4.0) ))), min(int(0.0), abs(in1))))) + mod(divInt(mod(i0,int(9.0)),max(divInt(i2,int(0.0)), int(8.0))),mod(in0,in1)) ))), ( abs(int(8.0)) * int(4.0) ))))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 30, 30, 1, 3, 0, 2, 1, 1, 0, 0, 48, 1, 163, 45, 41, 18, 28]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [], [], [0, 2], [], [0, 0], [], [0, 1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 2, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 1, 0, 0, 0, 1, 0, 1], [0, 1], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 5, 0, 3, 9, 9, 4, 3, 5, 8, 3, 3, 5, 2, 1, 9, 8, 4, 2, 8, 6, 1, 8, 9, 1, 2, 1, 3, 5, 3, 7, 5, 1, 0], [3, 2, 3, 5, 0, 0, 0, 3, 4, 4, 4, 4], [2, 2, 2, 0, 1, 1, 2], [1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 3, 2, 2, 1, 3, 3, 3, 3, 3, 0], [1, 0], [0], [6, 3, 0, 3, 3, 6, 5, 6, 3, 5, 6, 3, 4, 4, 3, 5, 6, 0, 1, 6, 4, 0, 6, 4, 3, 0, 6, 3, 2, 6, 1, 0, 1, 5, 5, 1, 6, 2], [0], [3, 3, 1, 3, 3, 1, 2, 1, 0, 3, 2, 3, 0, 0, 1, 3, 3, 0, 1, 3, 3, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 1, 0, 2, 0, 1, 0, 3, 1, 3, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 3, 1, 2, 1, 0, 0, 2, 0, 3, 0, 0, 0, 3, 1, 3, 0, 0, 2, 1, 2, 0, 2, 3, 3, 0, 1, 3, 2, 3, 2, 2, 2, 2, 0, 0, 3, 3, 1, 2, 0, 1, 3, 0, 3, 2, 0, 2, 2, 1, 0, 2, 1, 2, 0, 2, 3, 1, 3, 1, 2, 1, 0, 2, 3, 0, 1, 1, 2, 0, 1, 3, 2, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 1, 0, 2, 0, 1, 2, 2, 1, 2, 1, 2], [2, 2, 0, 0, 1, 0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( False or ( not min(max(int(6.0), max(max(int(1.0), mod(int(5.0),res0)), min(mod(max(in0, i0),int(0.0)), max(abs(in0), int(3.0))))), min(min(int(9.0), divInt(int(9.0),( mod(in0,int(4.0)) * res0 ))), int(3.0))) \\ge mod(int(5.0),in2) or not ( res0 * int(8.0) ) == in0 ) ):{:\\nloopBreak% = 0\\nwhile min(int(3.0), min(in2, int(3.0))) \\ge int(5.0):{:\\nb2 = int(2.0) != res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = int(1.0) \\l int(9.0)\\nb2 = True\\nb0 = ( ( in0 \\l int(8.0) and ( ( int(4.0) \\l in1 and ( b1 and in1 \\ge max(int(2.0), ( int(8.0) + in0 )) ) ) or in2 \\le ( res0 + abs(i0) ) ) ) or i1 \\le res0 )\\nin1 = abs(int(6.0))\\nb1 = abs(i0) \\le res0\\nb2 = ( int(1.0) - ( in1 + ( min(max(in0, int(8.0)), min(( abs(divInt(( divInt(( i0 + res0 ),min(max(int(9.0), mod(in0,int(1.0))), abs(i2))) * abs(( res0 - divInt(( int(2.0) + i1 ),( int(1.0) * ( i0 * ( max(int(3.0), abs(int(5.0))) - divInt(int(3.0),i1) ) ) )) )) ),( max(in2, int(7.0)) * int(5.0) ))) + ( in2 * int(1.0) ) ), abs(( i1 - int(0.0) )))) + res0 ) ) ) \\le i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 2, 7, 35, 35, 12, 7, 7, 24, 12, 12, 2, 1, 38, 1, 128, 28, 28, 18, 10]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 2, 1], [0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 5, 0, 4, 6, 5, 2, 1, 3, 3, 7, 3, 2, 1], [2, 0], [1, 2], [], [1, 0, 0, 1], [0, 0], [0, 2], [], [0], [0, 6, 2, 5, 0, 1, 0, 3, 4, 3, 4, 5, 1, 3, 1], [1], [1, 2, 2, 0, 0, 1, 3, 3, 1, 3, 1, 3, 0, 3, 0, 1, 0, 3, 3, 3, 0, 2, 3, 0, 1, 3, 0, 2, 2, 1, 1, 3, 2, 1, 0, 2, 0, 3, 1, 3, 0, 1, 2, 3, 1, 1, 2, 0, 2, 1, 0, 3, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0], [1, 0, 1, 0, 2, 1, 2, 2, 2], [0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= int(5.0)\\nif ( divInt(res0,i2) + int(7.0) ) == min(max(int(5.0), max(int(0.0), min(in2, min(i0, int(4.0))))), i1):{:\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = not min(max(min(i0, ( max(in0, int(6.0)) - min(in1, ( ( int(5.0) + int(2.0) ) * min(( int(1.0) - in0 ), ( in1 * abs(int(3.0)) )) )) )), max(in2, int(3.0))), ( min(int(7.0), int(3.0)) * ( i1 * divInt(int(2.0),in0) ) )) \\l min(int(1.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 15, 15, 2, 2, 0, 4, 2, 2, 0, 1, 15, 1, 54, 10, 15, 9, 2]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1], [0, 2, 0, 1, 0, 1], [1], [1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 7, 7, 1, 5, 0, 0, 8, 0, 3, 6, 4, 2, 7, 4, 2, 7, 1, 6, 9, 7, 0, 2, 9, 5, 9, 7, 4], [2, 0, 3, 2, 3], [0, 1], [1, 0], [0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [3, 3], [], [], [5, 4, 1, 1, 1, 1, 6, 6, 0, 2, 5, 2, 6, 0, 3, 2, 2, 6, 1, 2, 5, 1, 1, 1, 5, 0, 4, 4, 1, 5, 2, 2, 2, 3, 6, 5, 0, 1, 3, 3, 6, 1, 6, 1, 6], [0, 1, 1], [1, 0, 0, 0, 3, 1, 1, 3, 0, 0, 3, 1, 0, 0, 3, 2, 0, 3, 0, 0, 3, 3, 1, 1, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 1, 1, 2, 1, 3, 2, 3, 1, 0, 2, 3, 2, 2, 0, 0, 3, 2, 2, 2, 3, 1, 2, 0, 2, 0, 3, 0, 0, 2, 2, 3, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 1, 3, 3, 2, 2, 2, 0, 2, 3, 0, 0, 1, 0, 1, 2, 2, 3, 1, 0, 3, 2, 3, 0, 3, 0, 0, 1, 2, 2, 3, 1, 1, 0, 0, 3, 0, 1, 0, 1, 3, 0, 1, 0, 0, 0, 3, 1, 3, 1, 3, 0, 1, 2, 3, 1, 2, 0, 2, 3, 3, 0, 2, 1, 0, 3, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2], [1, 0, 2, 0, 2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 2], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(0.0)\\nloopBreak% = 0\\nwhile ( in1 == i1 or ( i1 \\l max(int(0.0), int(1.0)) and min(i1, i1) \\ge min(int(0.0), res0) ) ):{:\\nb0 = res0 == min(( i0 - min(i2, in2) ), min(max(int(1.0), int(7.0)), mod(max(int(7.0), abs(max(mod(mod(int(1.0),int(5.0)),mod(int(0.0),int(0.0))), ( int(8.0) + max(divInt(max(int(0.0), i2),divInt(max(divInt(( res0 * i0 ),abs(divInt(( divInt(abs(int(3.0)),( in0 + divInt(i2,min(i2, res0)) )) * ( ( min(i1, ( i2 - int(6.0) )) - ( ( in2 * ( ( ( int(4.0) * max(min(mod(( ( i1 + ( min(i1, i1) + int(2.0) ) ) + in2 ),int(7.0)), ( ( min(int(4.0), i0) + min(( max(in1, min(in1, i1)) + int(2.0) ), divInt(mod(abs(int(7.0)),int(1.0)),in2)) ) * i2 )), abs(i2)) ) * int(6.0) ) * i2 ) ) - int(9.0) ) ) - abs(in0) ) ),int(7.0)))), res0),in2)), i0) )))),min(int(0.0), abs(int(2.0))))))\\ni1 -= abs(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 += int(95.0)\\nb1 = mod(abs(int(9.0)),mod(res0,( min(max(i1, ( int(7.0) + res0 )), abs(i1)) * res0 ))) \\ge int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 32, 32, 5, 2, 2, 7, 5, 2, 0, 0, 45, 3, 143, 36, 34, 23, 15]}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 0], [0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 5, 5, 5, 1, 6, 0], [2], [], [], [1], [0], [], [], [0], [6, 5, 3, 4, 1], [0, 0, 1], [1, 1, 1, 1, 2, 2, 0, 2, 3, 2, 1, 2, 1, 0, 3, 1, 1], [1, 0, 0, 1, 0], [2, 2], [0, 0, 2, 1], [0, 1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(1.0)\\nif int(9.0) == int(5.0):{:\\nin2 = int(5.0)\\n:}\\nin0 += divInt(( in1 + ( abs(mod(int(5.0),( int(1.0) * i1 ))) - abs(int(6.0)) ) ),int(0.0))\\n", "other_info": {}, "test_fitness": 995, "mapping_values": [1, 4, 4, 1, 3, 8, 8, 1, 0, 0, 1, 1, 0, 0, 1, 5, 3, 17, 5, 2, 4, 2]}, {"genotype": [[0], [1], [0], [], [0], [1], [8], [5], [1, 0], [0], [0, 0, 1], [0], [3, 0], [], [], [5], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b0 and int(8.0) != in2 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 3, 1, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1], [7, 1, 2, 4], [], [], [], [], [], [], [], [], [0, 3, 5, 0, 2], [0], [3, 3, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0], [2, 1, 0], [0, 1, 0], [1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = abs(max(( int(7.0) + in0 ), mod(divInt(( in2 - ( min(int(1.0), i0) + int(2.0) ) ),i2),int(4.0))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 16, 5, 3, 3, 2]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 0, 1], [0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 1, 4, 4, 4, 1, 7, 5, 3, 5, 7, 9, 4, 5, 6, 4, 1, 7, 8, 2, 2, 9, 3, 1, 0, 8, 0, 5, 9, 2, 7], [2, 0], [0, 0], [], [1, 0, 0, 1], [0, 0], [1, 2], [1], [1], [3, 4, 5, 4, 2, 4, 6, 5, 0, 0, 4, 1, 4, 5, 6, 0, 1], [0], [3, 3, 2, 2, 2, 1, 1, 0, 3, 2, 2, 0, 3, 0, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 0, 3, 3, 1, 3, 0, 3, 1, 1, 2, 1, 0, 3, 2, 1, 1, 3, 3, 3, 0, 0, 1, 3, 3, 1, 1, 3, 3, 1, 3, 2, 2, 2, 1, 0, 0, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 3, 2, 1, 1, 2, 3, 3, 1, 0, 1, 3, 2, 0, 1, 3, 2, 2, 1, 0, 2, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 1, 2, 0, 2, 2], [2, 0, 2, 1, 2, 2, 0, 2, 0, 1, 1, 0, 2], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(min(mod(divInt(( int(3.0) * int(3.0) ),in0),min(( mod(in1,abs(in2)) + min(min(int(1.0), int(4.0)), int(4.0)) ), int(4.0))), abs(mod(int(1.0),in1))), max(i2, in1)) == max(min(int(7.0), max(res0, max(int(5.0), int(3.0)))), mod(int(5.0),in2))\\nif False:{:\\nb0 = not min(divInt(int(7.0),int(9.0)), abs(max(abs(i0), i0))) \\l int(4.0)\\n:}else:{:\\nin1 = min(max(int(5.0), int(6.0)), min(max(int(4.0), min(mod(( ( int(1.0) * i1 ) - in1 ),int(7.0)), divInt(abs(( divInt(int(8.0),( divInt(( int(2.0) * int(2.0) ),int(9.0)) * ( int(3.0) + int(1.0) ) )) * max(( int(0.0) + int(8.0) ), ( abs(min(int(0.0), in2)) - int(5.0) )) )),abs(( res0 - int(9.0) ))))), abs(( ( int(2.0) + i0 ) * mod(i1,int(7.0)) ))))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 32, 32, 2, 2, 0, 4, 2, 2, 1, 1, 17, 1, 99, 24, 27, 13, 11]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 2, 0, 7, 6, 2, 2, 3, 3, 5, 7, 7, 4, 7, 8, 8, 1, 8, 1, 5, 4], [], [], [], [], [], [], [], [], [5, 6, 5, 2, 0, 0, 5, 6, 1, 0, 4, 4, 0, 2], [0, 1, 0], [3, 2, 0, 1, 2, 2, 0, 1, 2, 3, 3, 1, 1, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 2, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 0, 3, 1, 2, 3, 2, 1, 0, 1, 1, 2, 1, 3, 2, 1, 1, 3, 3, 0, 2, 3, 1, 1, 0, 0, 2, 1, 1, 2, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [1, 0, 2, 1, 1, 1, 0, 2, 0, 2, 2, 1], [2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = max(mod(res0,int(1.0)), ( ( in2 * int(0.0) ) * mod(min(abs(int(2.0)), int(0.0)),( ( max(max(max(mod(( mod(int(7.0),int(6.0)) * i2 ),i0), mod(int(2.0),( ( mod(int(2.0),mod(int(3.0),i0)) * in2 ) + mod(res0,min(int(3.0), ( abs(mod(int(5.0),i1)) - int(7.0) ))) ))), int(7.0)), ( int(4.0) - min(( int(7.0) - int(8.0) ), abs(abs(i0))) )) - ( max(int(8.0), int(1.0)) * in1 ) ) + in1 )) ))\\ni0 -= divInt(int(8.0),int(1.0))\\ni2 = ( int(5.0) - int(4.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 14, 3, 67, 22, 12, 13, 10]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1], [2, 1, 2, 8], [4], [1], [], [0, 1], [0], [2], [], [], [4, 3], [0], [0, 1, 2, 1, 2, 1, 1], [0, 0], [], [0, 1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = in0\\nb1 = not int(2.0) \\le ( int(1.0) + ( int(2.0) - int(8.0) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 2, 1, 1, 0, 0, 2, 1, 7, 2, 0, 2, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 1, 0, 2, 1], [1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 2, 3, 8, 3, 6, 5, 0, 5, 9], [1, 2], [0], [], [1, 1, 0], [0, 0], [1], [0], [], [6, 6, 0, 0, 5, 5, 3, 4, 5], [0, 1], [1, 0, 0, 1, 2, 2, 3, 2, 0, 3, 3, 1, 3, 1, 1, 1, 2, 0, 1, 2, 0, 3, 2, 2, 1, 2, 1, 3, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0, 0], [1, 0, 2, 2, 1, 1], [2, 1, 2, 2], [1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(1.0) \\g res0:{:\\nres0 = i0\\ni0 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile mod(divInt(max(divInt(in2,min(abs(int(2.0)), abs(int(3.0)))), int(8.0)),int(3.0)),mod(in2,int(6.0))) == divInt(in0,max(( ( int(5.0) - ( int(0.0) * max(int(5.0), in1) ) ) * int(9.0) ), in2)):{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 11, 11, 2, 1, 0, 3, 2, 1, 1, 0, 9, 2, 32, 8, 6, 4, 5]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 2], [1], [0, 0, 0, 0], [], [2, 3, 1, 0], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not ( False or b2 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 1, 4, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [2, 1, 1, 0, 0, 0], [0], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 7, 6, 9, 0, 5, 5, 6, 7, 6, 6, 6, 9, 2, 3, 8, 5, 4, 1, 0, 7], [0, 2], [2], [], [1, 1], [0, 0], [], [], [1], [6, 1, 0, 4, 4, 3, 2, 4, 0, 6, 6, 2, 3, 0, 4, 3, 4, 0, 2], [1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 3, 2, 1, 3, 2, 1, 3, 3, 3, 2, 3, 3, 0, 1, 2, 0, 3, 3, 1, 3, 3, 2, 1, 0, 1, 3, 2, 2, 2, 1, 2, 3, 0, 1, 2, 2, 3, 2, 1, 3, 2, 0, 2, 0, 0, 0, 1, 3, 1, 2, 1, 0, 3, 1, 2, 3, 0, 1, 2, 1, 3, 3, 1, 0, 3, 2, 2, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [2, 0, 2, 2, 2, 1, 2, 2, 1, 2, 1, 0, 1, 0, 2, 0, 2, 2, 2, 1, 0], [2, 0, 2, 0, 2, 1, 2, 0, 1, 1, 2], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(8.0) \\l res0:{:\\ni1 *= i0\\nin1 += in1\\nb2 = int(1.0) == int(7.0)\\nin0 = abs(( int(6.0) * min(divInt(int(9.0),abs(abs(abs(( max(abs(i2), int(0.0)) + ( in1 * abs(max(int(5.0), abs(max(divInt(int(5.0),i0), int(6.0))))) ) ))))), min(( ( mod(int(7.0),( max(res0, int(6.0)) - divInt(mod(min(( int(6.0) * abs(divInt(res0,( i2 + in0 ))) ), i0),int(6.0)),min(int(9.0), mod(int(2.0),in1))) )) - abs(int(3.0)) ) - mod(abs(in0),int(8.0)) ), mod(int(5.0),abs(max(int(4.0), in1))))) ))\\n:}else:{:\\ni0 = min(( mod(int(1.0),i2) * int(0.0) ), int(7.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 22, 22, 2, 1, 0, 2, 2, 0, 0, 1, 19, 4, 77, 19, 21, 11, 10]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [8, 2], [4], [1], [], [1], [0], [], [], [], [3, 3, 1, 3, 0, 2], [], [0, 2, 2, 3, 3, 0, 0, 0, 2, 2, 0, 1, 2, 0, 1], [1, 1, 0, 0, 1], [2, 1], [2, 1], [0, 1, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in0 \\le divInt(mod(abs(max(in0, i1)),in0),( ( i0 * int(8.0) ) - mod(i2,int(2.0)) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 6, 0, 15, 5, 2, 2, 3]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1], [2, 0, 0, 0, 1, 1, 1], [1], [0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 1, 2, 0, 5, 2, 0, 2, 9, 8, 6, 2, 8], [0, 3, 5], [0, 1, 0, 1, 2, 0, 0, 0, 1], [0], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0], [0, 3, 0, 0, 2, 0], [], [], [6, 1, 0, 6, 0, 0, 4, 3, 1, 3], [0], [0, 1, 1, 3, 2, 1, 1, 0, 0, 2, 2, 3, 1, 1, 2, 2, 0, 2, 2, 3, 3, 3, 3, 1, 1, 1, 3, 0, 0, 0, 1, 1, 3, 2, 2, 1, 3, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 2, 2], [0, 0, 1], [0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nb1 = ( b0 and res0 \\l int(4.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(7.0) \\ge min(divInt(int(1.0),int(2.0)), i1)\\ni0 = res0\\nb2 = b0\\nb0 = not ( ( max(int(0.0), int(5.0)) + divInt(divInt(i0,( divInt(max(max(max(min(int(2.0), int(0.0)), int(2.0)), max(i0, in1)), in0),int(9.0)) + int(8.0) )),abs(mod(mod(int(6.0),abs(int(2.0))),i1))) ) - int(8.0) ) != in0\\nb0 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 14, 14, 3, 9, 1, 9, 3, 6, 0, 0, 10, 1, 41, 9, 9, 3, 6]}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 1, 1], [0], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 7, 1, 3, 0, 4, 2, 3, 0], [2, 5], [1, 2, 0], [], [0, 1, 1], [0, 0], [0], [], [0], [1, 2, 5, 4, 3, 4, 5, 2, 0, 4, 3, 4, 6, 1, 5, 2, 0, 6, 5, 1], [0, 0], [2, 0, 2, 1, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 1, 2, 2, 3, 2, 0, 0, 2, 1, 0, 1, 0, 1, 3, 0, 2, 2, 0, 0, 2, 0, 3, 2, 3, 1, 3, 1, 3, 1, 0, 3, 3, 3, 0, 3, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 2, 0, 0, 0, 2, 2, 1, 0, 1, 1, 0], [1, 0, 0, 0, 2], [0, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nb2 = ( i1 - ( int(5.0) + min(max(abs(divInt(i2,in2)), in1), in0) ) ) == mod(in1,int(0.0))\\nb0 = ( mod(min(divInt(in2,i2), ( int(7.0) + i0 )),int(1.0)) + in1 ) != int(3.0)\\n:}\\nin0 = min(in1, mod(mod(res0,i1),( in2 * min(divInt(abs(int(0.0)),abs(int(4.0))), max(int(2.0), i2)) )))\\ni0 = min(max(max(res0, min(in2, int(3.0))), int(0.0)), i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 10, 10, 2, 3, 0, 3, 2, 1, 0, 1, 20, 2, 53, 12, 13, 5, 7]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 1, 1, 0, 1, 0], [0], [0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 4, 9, 9, 7, 4, 7, 4, 3, 7, 4, 0, 0, 3, 3, 3, 2, 2, 2, 0, 0, 0, 6, 0, 4, 4, 5, 4, 6, 3, 1, 5, 5, 4, 0, 3, 0, 9, 6, 4, 7, 7, 8, 5, 9, 3, 9, 4, 5, 9, 7, 7, 7, 1, 6, 5, 0, 6, 4, 9], [1, 3, 1], [1, 2], [], [1, 1, 1], [0, 0, 0], [], [], [1], [1, 4, 3, 6, 4, 1, 6, 1, 2, 0, 1, 0, 6, 1, 3, 6, 4, 0, 5, 5, 5, 4, 3, 2, 4, 4, 5, 4, 6, 0, 3, 6, 2, 2, 2, 4, 5, 2, 2, 4, 2, 0, 0, 0, 5, 2, 1, 0, 3, 1, 2, 0, 6, 5, 4, 2, 0, 1, 0, 3, 3, 0, 1, 4, 0, 5, 6, 3, 1, 4, 6, 3, 3, 3, 5, 1, 1, 4], [1, 0, 0], [0, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 2, 2, 2, 0, 3, 1, 1, 3, 0, 0, 2, 1, 3, 1, 1, 2, 2, 3, 3, 3, 3, 2, 3, 2, 3, 3, 0, 2, 0, 0, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 3, 2, 2, 3, 3, 2, 1, 2, 0, 1, 0, 3, 3, 2, 1, 3, 3, 0, 3, 3, 3, 0, 2, 0, 2, 0, 2, 3, 1, 0, 2, 3, 2, 2, 3, 0, 2, 1, 2, 2, 2, 0, 0, 3, 1, 3, 1, 0, 0, 3, 1, 2, 0, 0, 0, 3, 3, 1, 3, 2, 1, 3, 0, 3, 0, 1, 2, 3, 0, 1, 0, 2, 3, 0, 2, 3, 1, 1, 2, 0, 1, 1, 1, 3, 1, 3, 2, 2, 3, 2, 0, 1, 3, 1, 3, 2, 0, 1, 1, 0, 0, 3, 1, 3, 0, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 2, 1, 1, 3, 2, 0, 2, 0, 3, 0, 0, 3, 0, 3, 1, 1, 2, 2, 2, 0, 3, 0, 3, 0, 2, 3, 1, 3, 3, 2, 0, 3, 0, 3, 3, 3, 2, 1, 3, 2, 3, 0, 3, 0, 2, 3, 1, 2, 3, 3, 2, 1, 1, 0, 2, 0, 1, 2, 3, 1, 2, 2, 1, 2, 2, 2, 0, 0, 0, 3, 2, 3, 1, 0, 1, 3, 0, 1, 2, 2, 1, 1, 3, 1, 2, 0, 3, 3, 0, 0, 0, 3, 3, 2, 3, 1, 0, 2, 3, 1, 1, 0, 2, 3, 3, 1, 0, 1, 1, 2, 2, 0, 1, 0, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0], [1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 2, 0, 0, 1, 2, 0, 2, 1, 1, 0, 0, 1, 2, 1, 0, 2, 1, 0, 0, 2, 1, 2, 0, 0, 1, 2, 2, 2, 2, 0, 2, 2, 0, 1, 1, 0, 2, 0, 0, 2, 1, 1, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 1, 0, 2, 2, 1], [0, 2, 1, 1, 0, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 1, 0, 1, 1, 1, 1, 2, 2, 0, 2, 0, 1, 1, 0, 1, 2, 2], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\g in1:{:\\nb1 = ( mod(divInt(in0,res0),divInt(int(9.0),divInt(in1,( ( mod(i1,max(int(8.0), int(4.0))) + abs(res0) ) * i1 )))) - ( int(9.0) - abs(int(9.0)) ) ) \\ge int(7.0)\\n:}else:{:\\ni2 += divInt(divInt(max(abs(abs(abs(( max(( max(max(i0, ( i1 - i0 )), max(( ( max(max(res0, i1), in0) * res0 ) * in1 ), i0)) - min(mod(divInt(abs(max(divInt(int(4.0),( in2 * int(7.0) )), in2)),abs(min(( int(4.0) * min(max(in2, abs(min(abs(in1), divInt(in0,divInt(i2,mod(max(int(3.0), in1),mod(max(divInt(( min(in1, divInt(int(7.0),( ( ( in2 - in1 ) + min(int(4.0), max(int(0.0), res0)) ) * i0 ))) * abs(int(0.0)) ),mod(in0,res0)), i2),max(min(int(3.0), abs(divInt(int(3.0),max(i2, min(i2, int(3.0)))))), ( min(in1, int(2.0)) * in2 ))))))))), ( abs(i2) + divInt(max(int(2.0), int(2.0)),( i2 + int(0.0) )) )) ), int(0.0)))),int(0.0)), abs(int(6.0))) ), min(( ( min(mod(in1,int(0.0)), max(int(4.0), abs(divInt(i2,int(4.0))))) + int(5.0) ) + i0 ), i0)) * abs(int(4.0)) )))), abs(i0)),in2),int(6.0))\\nb2 = int(3.0) \\g mod(i2,int(1.0))\\ni1 = ( i0 * divInt(int(5.0),abs(in0)) )\\n:}\\ni1 = divInt(( mod(mod(mod(int(5.0),min(( int(4.0) - int(0.0) ), abs(divInt(i2,( i0 + abs(res0) ))))),in2),min(in1, max(int(3.0), int(0.0)))) - mod(mod(divInt(i2,max(i0, min(i1, ( abs(int(9.0)) - min(min(( i0 - abs(in0) ), max(max(min(( int(6.0) - abs(( abs(in0) * max(i0, ( max(int(4.0), ( abs(max(divInt(int(7.0),int(7.0)), i1)) * ( in1 + int(8.0) ) )) * ( min(int(5.0), ( divInt(int(9.0),mod(( ( i0 + in2 ) - res0 ),max(( abs(int(3.0)) - in0 ), int(9.0)))) + min(i1, int(4.0)) )) - mod(( int(5.0) * int(9.0) ),abs(int(7.0))) ) )) )) ), mod(in1,max(min(res0, in0), in0))), abs(max(divInt(min(int(7.0), in0),mod(abs(int(7.0)),int(1.0))), in2))), divInt(abs(max(int(6.0), i1)),int(5.0)))), int(0.0)) )))),mod(( i1 * int(6.0) ),in1)),int(4.0)) ),int(9.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 61, 61, 3, 2, 0, 3, 3, 0, 0, 1, 78, 3, 292, 78, 78, 39, 40]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 8, 9, 4, 3, 8, 4, 3, 1, 6, 5, 5, 6], [], [], [], [], [], [], [], [], [0, 0, 1, 3, 5, 5, 0, 6, 5], [1], [2, 3, 2, 2, 2, 2, 3, 1, 0, 3, 1, 3, 3, 3, 1, 1, 2, 3, 2, 1, 1, 2, 3, 1, 3, 0, 0, 2, 2, 3, 2, 0, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 2, 2, 3, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 1, 2, 0, 0, 2, 2, 2, 2, 2], [0, 0, 2, 1, 2, 1, 0, 0, 2, 0, 2], [1, 0, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += mod(abs(divInt(mod(( ( max(int(0.0), i0) + min(int(8.0), min(max(abs(int(9.0)), int(4.0)), divInt(min(( int(3.0) * int(8.0) ), ( min(int(4.0), abs(i1)) - in0 )),( ( abs(( in2 * in2 )) - int(3.0) ) + int(1.0) )))) ) + i0 ),res0),( int(6.0) * abs(int(5.0)) ))),abs(( ( abs(int(5.0)) + in2 ) * int(6.0) )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 48, 14, 13, 11, 4]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1, 1, 1], [0, 0, 6, 1, 4], [5], [1], [], [1], [0], [], [], [], [], [], [1, 2, 2, 1, 1, 1], [0, 0], [], [1, 0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(00.0) != ( ( int(6.0) - int(1.0) ) + int(4.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 6, 2, 0, 2, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= int(3.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 2], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 0, 2, 0, 1, 2, 2, 0, 2, 1], [0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 9, 5, 4, 1, 7, 9, 3, 1, 1, 3, 8, 0, 2, 3, 2, 3, 8, 8, 7, 1, 2, 0, 5, 6, 0, 4, 2, 7, 5, 2, 6, 8, 6, 5, 9, 0, 2, 3, 0, 8, 2, 5, 7, 9, 4, 5, 3, 3, 4, 0, 8, 9, 3, 8, 0, 3, 3, 2, 8, 5, 0, 4, 4, 3, 0, 9, 1, 3, 3, 6, 9, 3, 1, 1, 9, 1, 5, 4, 9, 1, 5, 6, 4, 4, 0, 0, 1, 8, 8, 4, 3, 4, 5, 5, 4, 9, 9, 6, 2, 2, 4, 4, 1, 7, 7, 1, 8, 7, 7, 7, 4, 1, 9, 2, 4, 0, 6, 4, 7, 4, 3, 5, 9, 9, 8, 6, 4, 0, 3, 3, 6, 3, 2, 7, 9, 6, 2, 6, 6, 1, 4, 6, 8, 7, 4, 2, 4, 8, 4, 7, 8, 2, 4, 2, 3, 7, 2, 3], [0, 5, 0, 4, 1, 1, 1, 5], [1, 0, 1, 2, 0, 1, 2], [1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2], [1, 0, 0], [1, 1], [2, 2, 3, 6, 5, 4, 0, 4, 6, 3, 1, 4, 6, 3, 0, 0, 5, 5, 1, 0, 5, 4, 6, 5, 1, 2, 0, 5, 1, 1, 2, 3, 5, 6, 3, 4, 6, 4, 3, 5, 2, 4, 0, 5, 6, 4, 2, 5, 5, 2, 1, 5, 3, 1, 1, 1, 2, 4, 3, 1, 3, 0, 5, 3, 1, 6, 5, 4, 1, 0, 3, 0, 6, 5, 6, 4, 0, 4, 3, 3, 5, 1, 3, 6, 6, 6, 3, 3, 1, 2, 1, 3, 6, 5, 0, 6, 5, 6, 0, 0, 5, 1, 4, 5, 4, 0, 2, 0, 3, 5, 1, 0, 5, 0, 6, 4, 1, 5, 3, 4, 0, 1, 5, 0, 1, 5, 1, 3, 0, 6, 5, 0, 3, 4, 0, 5, 5, 1, 3, 2, 2, 2, 6, 6, 1, 2, 3, 4, 3, 0, 4, 6, 2, 5, 6, 5, 6, 5, 4, 0, 4, 0, 2], [1, 1], [1, 3, 3, 1, 3, 2, 2, 3, 2, 1, 1, 2, 2, 3, 0, 3, 1, 0, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 1, 1, 2, 0, 3, 1, 1, 2, 3, 1, 1, 3, 3, 0, 3, 1, 0, 3, 0, 2, 0, 3, 2, 0, 1, 1, 1, 3, 2, 2, 3, 3, 3, 2, 3, 1, 1, 3, 3, 3, 1, 2, 0, 0, 2, 2, 0, 3, 0, 3, 0, 3, 2, 3, 2, 0, 1, 2, 2, 1, 3, 3, 0, 0, 2, 0, 1, 1, 2, 3, 3, 2, 3, 2, 1, 3, 1, 2, 2, 0, 1, 1, 3, 3, 0, 1, 1, 3, 0, 3, 0, 0, 2, 1, 0, 1, 3, 3, 1, 3, 1, 3, 0, 2, 1, 0, 1, 2, 3, 0, 3, 2, 0, 0, 3, 0, 0, 0, 2, 1, 3, 0, 2, 1, 2, 0, 0, 1, 2, 3, 3, 3, 1, 2, 0, 2, 1, 3, 2, 0, 0, 2, 2, 3, 3, 2, 3, 0, 0, 0, 1, 2, 3, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 2, 1, 3, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 0, 3, 1, 0, 2, 0, 3, 0, 3, 1, 1, 1, 0, 2, 2, 0, 2, 0, 0, 2, 2, 3, 1, 3, 3, 2, 2, 3, 0, 0, 3, 2, 1, 3, 3, 1, 2, 1, 0, 1, 1, 2, 2, 2, 2, 1, 3, 2, 1, 2, 0, 0, 1, 0, 2, 3, 1, 1, 3, 1, 3, 0, 1, 3, 0, 3, 3, 1, 0, 0, 3, 1, 0, 2, 2, 3, 2, 2, 1, 1, 0, 3, 1, 0, 3, 0, 0, 2, 3, 1, 0, 1, 3, 2, 3, 2, 3, 1, 0, 0, 3, 1, 0, 2, 1, 0, 3, 3, 3, 0, 3, 2, 1, 3, 2, 0, 2, 2, 1, 1, 2, 3, 1, 3, 0, 2, 2, 0, 3, 0, 0, 1, 2, 3, 2, 1, 2, 3, 1, 3, 1, 0, 2, 2, 3, 2, 1, 1, 1, 0, 3, 2, 2, 2, 3, 2, 1, 1, 3, 1, 2, 2, 0, 1, 3, 2, 2, 1, 1, 3, 2, 2, 3, 1, 2, 2, 0, 2, 0, 3, 0, 1, 1, 2, 1, 2, 0, 1, 3, 0, 2, 2, 2, 3, 0, 3, 3, 2, 1, 3, 0, 3, 3, 2, 2, 1, 0, 1, 2, 2, 2, 2, 2, 0, 3, 3, 3, 1, 3, 0, 0, 2, 2, 3, 2, 1, 0, 2, 0, 0, 0, 2, 2, 2, 3, 1, 0, 0, 3, 0, 1, 3, 2, 2, 0, 3, 1, 1, 2, 3, 0, 3, 3, 3, 1, 3, 1, 3, 1, 1, 1, 0, 3, 1, 3, 2, 1, 0, 0, 0, 2, 3, 1, 0, 1, 3, 2, 1, 2, 3, 3, 2, 2, 3, 3, 3, 2, 0, 1, 0, 1, 3, 2, 1, 3, 2, 3, 0, 2, 3, 3, 2, 1, 0, 0, 2, 3, 1, 0, 0, 2, 3, 0, 0, 2, 0, 1, 1, 0, 2, 1, 1, 1, 1, 1, 2, 3, 3, 1, 2, 3, 1, 3, 0, 2, 1, 3, 1, 1, 2, 2, 0, 3, 3, 1, 0, 3, 2, 3, 0, 2, 2, 3, 2, 0, 2, 3, 2, 3, 2, 3, 3, 2, 3, 0, 2, 0, 0, 3, 0, 0, 0, 3, 2, 3, 3, 2, 1, 1, 3, 3, 0, 2, 2, 0, 0, 2, 2, 3, 3, 1, 2, 1, 1, 2, 1, 0, 3, 0, 0, 3, 2, 1, 3, 1, 1, 0, 2, 3, 1, 0, 0, 1, 0, 2, 1, 1, 2, 3, 1, 1, 2, 2, 1, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 2, 3, 3, 1, 3, 2, 1, 3, 3, 2, 2, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 0, 1, 2, 0, 3, 1, 1, 0, 2, 3, 0, 2, 1, 3, 1, 3, 2, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 2, 2, 1, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 2, 2, 2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 0, 0, 2, 1, 2, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 1, 2, 0, 0, 0, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 2, 1, 2, 0, 1, 1, 0, 2, 2, 0, 1, 0, 0, 1, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 2, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 0, 0, 2, 2, 1, 2, 0, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2], [2, 2, 1, 0, 1, 2, 0, 1, 2, 2, 0, 0, 0, 1, 0, 1, 1, 2, 2, 2, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 0, 2, 0, 0, 2, 2, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 2, 2, 2, 0, 0, 2, 1, 0, 0, 2, 2, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 1, 1, 0, 2, 0, 2, 2, 1, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 113, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( b1 or int(6.0) \\l min(min(int(3.0), abs(mod(divInt(min(( int(9.0) * int(5.0) ), ( ( min(i2, abs(int(4.0))) * i2 ) - in0 )),res0),min(abs(in2), in1)))), divInt(( i0 + in1 ),int(1.0))) ):{:\\nloopBreak% = 0\\nwhile not ( ( int(7.0) != ( res0 - abs(int(9.0)) ) and int(3.0) \\l ( min(int(1.0), int(1.0)) * min(abs(in0), abs(int(3.0))) ) ) or not b0 ):{:\\nb1 = i1 \\le max(in1, ( res0 + abs(divInt(in0,int(8.0))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\nloopBreak% = 0\\nwhile True:{:\\ni0 -= int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= int(2.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile max(divInt(divInt(abs(max(min(mod(max(int(3.0), int(2.0)),min(max(max(int(3.0), mod(in2,in2)), ( mod(i1,min(i0, max(in2, max(mod(max(( in1 * int(8.0) ), divInt(divInt(int(8.0),max(min(res0, in2), mod(i1,int(7.0)))),int(1.0))),( max(min(( min(mod(int(2.0),abs(int(0.0))), mod(mod(i2,int(5.0)),int(6.0))) + abs(max(i0, int(0.0))) ), int(4.0)), abs(in2)) + abs(i1) )), i1)))) + ( int(2.0) - i2 ) )), int(7.0))), max(abs(int(5.0)), min(int(2.0), abs(in0)))), mod(int(6.0),in2))),int(8.0)),( abs(res0) + abs(( in0 - in1 )) )), max(res0, in1)) \\g in0:{:\\nif True:{:\\nb0 = ( b1 and ( int(6.0) - max(in2, ( int(5.0) * ( i2 * in1 ) )) ) \\g int(9.0) )\\n:}else:{:\\nloopBreak% = 0\\nwhile not not ( abs(abs(abs(int(0.0)))) * mod(i0,mod(int(2.0),min(( in2 + res0 ), mod(divInt(abs(abs(divInt(min(in1, i2),in2))),int(3.0)),divInt(min(( ( in2 + i2 ) - i1 ), in2),abs(max(abs(max(( int(0.0) * min(min(divInt(abs(max(int(8.0), divInt(abs(( int(2.0) - max(in0, abs(int(5.0))) )),i1))),divInt(i1,max(i1, min(int(7.0), int(9.0))))), int(4.0)), i2) ), divInt(( in1 - ( in0 + i1 ) ),mod(divInt(abs(int(5.0)),min(min(( ( abs(in0) + i0 ) - min(( int(3.0) - min(min(int(3.0), ( int(4.0) + in2 )), int(0.0)) ), int(8.0)) ), ( divInt(( ( int(9.0) * min(( int(3.0) + ( in0 + i1 ) ), int(8.0)) ) * res0 ),mod(min(int(0.0), int(3.0)),max(int(3.0), max(in2, int(2.0))))) * min(in1, min(min(int(8.0), i1), i0)) )), max(int(5.0), in0))),divInt(( min(divInt(( int(0.0) + int(4.0) ),i0), min(int(4.0), res0)) * min(in2, res0) ),( abs(int(3.0)) + in1 )))))), int(0.0)))))))) ) \\g abs(( abs(( min(int(9.0), i0) - in1 )) - max(int(1.0), in0) )):{:\\nb2 = mod(int(3.0),in0) != max(min(max(in2, abs(( int(3.0) * abs(( i1 + mod(( int(6.0) - int(9.0) ),( abs(int(3.0)) * min(in0, ( ( res0 + abs(res0) ) * res0 )) )) )) ))), int(1.0)), ( min(divInt(int(1.0),( max(int(9.0), abs(int(1.0))) - in0 )), divInt(( max(( int(5.0) * int(4.0) ), int(9.0)) * in0 ),abs(( mod(divInt(min(divInt(int(1.0),int(5.0)), max(int(6.0), divInt(( i1 * int(4.0) ),max(( mod(int(4.0),int(0.0)) + abs(divInt(( min(int(0.0), ( divInt(i2,( i1 + min(in0, int(1.0)) )) * int(8.0) )) - ( int(8.0) + divInt(res0,int(4.0)) ) ),min(in2, ( divInt(divInt(max(i0, max(min(( int(3.0) + max(res0, abs(min(( ( int(4.0) * in2 ) * int(5.0) ), divInt(divInt(( mod(( res0 - max(min(max(int(5.0), min(i0, i0)), ( ( abs(( int(4.0) + in2 )) + ( i1 + in1 ) ) * in2 )), mod(( mod(max(int(9.0), in1),i0) + min(i2, int(9.0)) ),max(divInt(( i0 * min(int(6.0), int(2.0)) ),( abs(in0) + min(abs(max(int(2.0), abs(int(4.0)))), min(int(4.0), int(1.0))) )), int(7.0)))) ),in2) * max(int(7.0), max(mod(int(1.0),i1), i0)) ),in2),divInt(min(int(8.0), i0),int(7.0)))))) ), abs(( int(7.0) + ( abs(min(divInt(( max(min(min(mod(res0,int(7.0)), in1), int(4.0)), max(( int(1.0) + abs(mod(min(i1, ( abs(min(divInt(int(9.0),in2), in0)) - mod(min(int(2.0), in1),i0) )),divInt(max(i1, in2),( i0 + int(4.0) )))) ), int(0.0))) * i1 ),( int(6.0) + int(4.0) )), int(7.0))) + int(4.0) ) ))), int(3.0))),( min(min(int(5.0), divInt(min(int(9.0), min(in2, ( int(9.0) + abs(int(8.0)) ))),int(6.0))), mod(mod(i1,min(abs(int(4.0)), in0)),max(( max(i0, ( divInt(max(mod(res0,mod(max(mod(min(mod(min(abs(( abs(in2) - ( i0 + in0 ) )), max(in1, i0)),in2), min(divInt(abs(min(mod(int(0.0),int(3.0)), abs(min(in2, mod(( i1 - in0 ),( ( min(min(int(3.0), ( int(6.0) - int(3.0) )), ( int(2.0) + i2 )) * abs(i2) ) + i2 )))))),abs(divInt(int(7.0),max(int(9.0), int(6.0))))), res0)),mod(abs(int(2.0)),res0)), i1),int(6.0))), i2),( int(6.0) * int(1.0) )) * ( min(int(4.0), int(6.0)) - divInt(( int(8.0) - in0 ),in1) ) )) - in0 ), mod(int(7.0),mod(int(4.0),i0))))) + int(2.0) )),in1) - divInt(min(min(int(4.0), abs(mod(int(8.0),abs(min(( ( int(4.0) - ( res0 + i2 ) ) * in2 ), ( res0 + in2 )))))), res0),in2) )))) ), divInt(max(in1, int(7.0)),divInt(i0,min(int(8.0), int(2.0)))))))),in1),divInt(max(i0, ( int(4.0) - max(int(2.0), abs(mod(i2,int(3.0)))) )),int(7.0))) * int(2.0) )))) + int(3.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 160, 160, 8, 7, 4, 22, 8, 14, 3, 2, 163, 2, 683, 178, 184, 97, 83]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 1, 0, 2, 1, 2, 1], [0, 1, 0], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 6, 7, 6, 5, 0, 7, 6, 1, 1, 3, 2, 2, 3, 5, 8, 4, 5, 6, 0, 9, 2, 8, 3, 6, 1, 0, 0, 1, 1, 9, 5, 7, 4, 3, 1, 5, 6, 6, 1, 2, 6, 4, 3, 1, 6, 2, 7, 0, 4, 2, 7, 4, 1, 7, 5, 5, 1], [0, 0, 2, 1, 2], [1], [0], [1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [3], [], [1, 0], [2, 1, 6, 1, 6, 4, 6, 2, 4, 6, 2, 0, 3, 3, 3, 6, 0, 0, 5, 5, 0, 4, 5, 4, 1, 5, 5, 3, 4, 1, 1, 1, 3, 5, 0, 0, 4, 5, 0, 1, 4], [1, 1, 0], [1, 3, 3, 2, 0, 0, 2, 2, 2, 0, 0, 0, 1, 2, 2, 3, 0, 1, 1, 2, 3, 1, 1, 2, 3, 2, 3, 0, 1, 3, 1, 0, 0, 1, 3, 1, 2, 1, 2, 2, 1, 1, 2, 0, 3, 1, 0, 2, 2, 0, 2, 3, 3, 0, 1, 0, 1, 3, 2, 2, 2, 3, 2, 2, 1, 0, 2, 2, 2, 1, 2, 2, 1, 3, 3, 1, 2, 3, 3, 0, 2, 0, 0, 3, 2, 1, 1, 1, 1, 2, 0, 0, 0, 2, 3, 3, 1, 2, 0, 2, 1, 2, 3, 3, 3, 0, 1, 2, 3, 2, 1, 3, 0, 0, 1, 1, 1, 3, 2, 0, 2, 2, 0, 1, 0, 1, 2, 1, 1, 0, 0, 3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 1, 1, 3, 1, 2, 2, 1, 1, 1, 2, 3, 1, 2, 0, 3, 3, 3, 2, 2, 3, 0, 3, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 1, 3, 2, 1, 1, 3, 1, 2, 1, 3, 1, 3, 2, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 2, 2, 1, 2, 1, 1, 2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 2, 0, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 0], [1, 0, 2, 0, 0, 0, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(4.0) \\l min(max(( i2 - i1 ), mod(( ( res0 + i1 ) * res0 ),int(1.0))), ( ( abs(in1) + int(6.0) ) + int(7.0) )):{:\\nres0 += divInt(abs(int(6.0)),int(5.0))\\ni2 *= ( max(mod(abs(in1),int(0.0)), max(int(7.0), res0)) + i2 )\\nloopBreak% = 0\\nwhile int(6.0) \\l max(int(1.0), divInt(int(1.0),( ( int(3.0) + int(2.0) ) * ( i0 - abs(int(2.0)) ) ))):{:\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif ( divInt(in0,divInt(min(max(res0, int(3.0)), i0),int(5.0))) * max(mod(divInt(mod(min(( mod(int(8.0),i0) - ( divInt(mod(int(4.0),( divInt(int(5.0),max(max(int(6.0), ( min(max(in2, divInt(in2,i0)), min(divInt(int(0.0),int(9.0)), int(2.0))) * int(8.0) )), ( in1 * in2 ))) - in1 )),divInt(abs(min(int(3.0), ( i1 * mod(int(6.0),mod(abs(abs(max(in2, int(1.0)))),mod(abs(divInt(int(0.0),abs(in2))),in0))) ))),int(0.0))) * int(1.0) ) ), int(1.0)),abs(( in1 - mod(divInt(i1,int(9.0)),i1) ))),int(5.0)),( int(7.0) - int(4.0) )), i1) ) == in0:{:\\nb1 = ( abs(( ( abs(( abs(divInt(( in2 - int(3.0) ),max(int(1.0), int(5.0)))) - int(6.0) )) - max(int(6.0), divInt(divInt(int(1.0),int(2.0)),int(6.0))) ) * divInt(max(int(4.0), mod(i0,abs(min(abs(( divInt(abs(i0),min(( divInt(divInt(( int(3.0) * int(1.0) ),int(6.0)),in1) - int(2.0) ), in2)) - mod(i0,int(7.0)) )), i1)))),int(0.0)) )) \\g int(4.0) and max(( int(2.0) * int(7.0) ), max(int(4.0), ( int(1.0) * min(int(7.0), min(( int(5.0) - int(5.0) ), int(1.0))) ))) == in1 )\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 59, 59, 5, 1, 1, 6, 5, 1, 0, 2, 41, 3, 197, 59, 41, 30, 31]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [5, 6, 4], [2], [0], [], [1], [0], [], [], [], [1, 0], [], [2, 2, 1, 3, 1, 1, 0, 0], [1, 0], [1], [0], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = mod(( int(5.0) + max(int(6.0), int(4.0)) ),i1) == i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 8, 2, 1, 1, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 9, 6, 7, 9, 4, 7, 0, 7, 8, 1, 3, 0, 3, 3, 0, 6], [2], [2], [], [1], [0], [], [], [], [0, 3, 1, 3, 0, 4, 4, 2, 4, 2, 2, 6, 5, 1, 3, 2, 6, 5, 4, 5, 5, 6, 6, 6, 6, 3, 3], [], [2, 3, 3, 3, 0, 0, 2, 3, 0, 2, 3, 3, 0, 0, 2, 2, 1, 3, 0, 2, 0, 1, 3, 3, 1, 0, 2, 0, 2, 0, 3, 2, 1, 2, 3, 0, 0, 0, 3, 1, 0, 2, 0, 3, 2, 0, 0, 2, 1, 3, 0, 3, 3, 3, 3, 3, 2, 3, 1, 2, 1, 3, 3, 1, 2, 1, 2, 2, 1, 0, 3, 1, 0, 0, 1, 2, 0, 0, 2, 2, 3, 0, 1, 0, 1, 0, 2, 2, 1, 2, 1, 1, 3, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 2, 0, 2, 2], [1, 2, 0, 0, 2, 2, 0, 1, 1, 2, 2, 0, 0, 2], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( max(max(min(i0, in0), ( min(i1, ( min(abs(in0), i0) - divInt(( int(9.0) * max(in1, ( in1 + int(2.0) )) ),max(min(int(9.0), i2), divInt(in1,divInt(i2,abs(divInt(int(6.0),( min(i2, res0) + in2 ))))))) )) * max(int(7.0), i1) )), ( in0 * min(( i2 + res0 ), ( int(9.0) - min(in2, min(min(min(max(min(divInt(max(int(4.0), ( int(7.0) - abs(abs(int(0.0))) )),mod(int(7.0),divInt(( int(8.0) * in1 ),min(int(1.0), in2)))), in2), int(3.0)), ( res0 * res0 )), mod(mod(abs(res0),int(0.0)),res0)), int(3.0))) )) )) + in0 ) == ( mod(int(3.0),( int(0.0) + int(6.0) )) * abs(in0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 18, 18, 1, 1, 0, 1, 1, 0, 0, 0, 27, 0, 94, 24, 25, 14, 10]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 2, 0, 0, 2, 2, 0, 2, 0], [0, 1, 0, 1], [1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1], [3, 1, 8, 8, 8, 4], [5, 5, 3], [2, 0, 1, 2], [0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0], [1, 2, 2, 1, 3, 0, 1, 1, 2], [1, 0, 1, 0], [1, 1], [0, 3, 4, 2, 3, 2, 5], [1, 0, 0], [0, 3, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1], [], [2, 1], [0], []], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += in0\\nb2 = False\\nif not abs(in1) != i2:{:\\nin0 = i2\\n:}else:{:\\nin2 = int(3.0)\\nloopBreak% = 0\\nwhile not True:{:\\nif ( int(1.0) != int(8.0) and b0 ):{:\\nb1 = False\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nb2 = not int(8.0) \\ge max(int(8.0), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 6, 6, 3, 4, 1, 12, 3, 9, 4, 2, 7, 3, 12, 0, 2, 1, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 0, 2, 0, 1], [1, 0], [0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 3, 6, 7, 2, 2, 6, 7, 4, 4, 8, 1, 2, 6, 0, 9, 5, 1, 5, 4, 6, 5, 9, 1, 4, 0, 6, 5, 5, 7, 7, 1, 1, 0, 9, 3, 2, 5, 3, 1, 5, 7, 6, 6, 7, 2, 5, 9, 9, 9, 5, 7, 8, 2, 5, 9, 3, 9, 3, 7], [4, 2, 2], [2], [], [1, 1, 1], [0, 0, 0], [], [], [1], [3, 0, 3, 1, 1, 1, 0, 0, 2, 4, 1, 4, 1, 4, 6, 1, 0, 3, 2, 3, 1, 6, 1, 4, 0, 1, 0, 4, 0, 2, 6, 0, 6, 3, 2, 0, 0, 3, 2, 6, 6, 1, 4, 2, 0, 2, 4, 2, 6, 3, 6, 4, 6, 6, 5, 2, 6, 1, 5, 5, 2, 4, 1, 4, 5, 6, 3, 1, 6, 1, 0, 4, 0, 1], [1, 1], [1, 3, 1, 3, 0, 2, 2, 2, 3, 1, 3, 3, 3, 1, 0, 2, 2, 3, 1, 0, 2, 1, 3, 0, 2, 0, 1, 1, 3, 3, 3, 3, 3, 0, 2, 1, 3, 2, 1, 2, 1, 3, 1, 1, 3, 3, 2, 1, 0, 3, 2, 1, 2, 2, 0, 0, 0, 2, 3, 2, 2, 2, 3, 2, 3, 1, 2, 1, 0, 3, 2, 1, 1, 2, 0, 3, 2, 2, 0, 3, 3, 0, 1, 0, 0, 2, 3, 2, 0, 2, 0, 0, 3, 3, 2, 2, 3, 1, 2, 1, 2, 3, 1, 0, 2, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 2, 3, 3, 2, 1, 2, 1, 3, 1, 1, 3, 3, 1, 0, 1, 3, 0, 3, 3, 2, 2, 2, 0, 3, 0, 2, 0, 2, 1, 1, 0, 3, 2, 2, 3, 2, 2, 0, 1, 2, 0, 2, 2, 1, 0, 0, 1, 3, 1, 1, 0, 1, 3, 1, 3, 0, 2, 1, 0, 2, 2, 1, 2, 3, 3, 0, 3, 3, 2, 2, 0, 3, 2, 1, 0, 3, 3, 3, 0, 1, 2, 1, 3, 2, 0, 2, 3, 3, 1, 2, 0, 2, 3, 3, 0, 1, 3, 3, 3, 1, 2, 1, 0, 0, 2, 3, 0, 1, 2, 2, 3, 1, 0, 3, 0, 3, 1, 0, 2, 2, 0, 3, 2, 0, 0, 1, 0, 0, 3, 0, 0, 1, 0, 0, 0, 1, 1, 3, 2, 3, 2, 2, 3, 0, 2, 2, 0, 3, 1, 3, 2, 0, 1, 3, 3, 2, 0, 0, 0, 1, 0, 2, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0], [0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 2, 2, 0, 2, 1, 2, 0, 2, 2, 0, 2, 1, 1, 1, 2, 2, 2, 2, 0, 0, 1, 2, 2, 1, 2, 0, 2, 1, 0, 2, 1, 0, 1, 0, 0, 1, 2, 2, 0, 1, 2, 2, 2, 1, 0, 2, 1, 1, 2], [2, 1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 1, 0, 2, 2, 1, 2, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 0, 2, 0, 0, 2, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(23.0) \\le min(int(3.0), abs(in0)):{:\\nb2 = ( ( ( max(int(6.0), max(min(max(int(7.0), i0), ( mod(min(int(2.0), in0),mod(int(2.0),max(i1, ( i1 * int(6.0) )))) - int(7.0) )), min(min(max(max(min(i1, mod(int(4.0),min(( int(4.0) - ( int(8.0) * max(int(1.0), int(2.0)) ) ), min(min(( int(6.0) * i0 ), min(divInt(int(0.0),mod(mod(i0,i2),in1)), mod(min(( mod(mod(max(( max(int(9.0), ( int(5.0) + i1 )) - min(divInt(int(1.0),int(5.0)), mod(in1,abs(( ( i1 * min(abs(in1), int(4.0)) ) - res0 )))) ), i1),mod(abs(divInt(i0,mod(in0,i2))),abs(min(( ( abs(int(6.0)) + mod(int(5.0),( max(int(9.0), in0) * ( abs(i1) * int(1.0) ) )) ) - ( res0 + i1 ) ), ( in1 * i0 ))))),i1) * ( min(abs(( int(4.0) - divInt(int(0.0),abs(int(6.0))) )), int(5.0)) * min(abs(int(5.0)), i0) ) ), int(7.0)),max(in1, max(max(( ( mod(i0,abs(i2)) - mod(res0,mod(int(7.0),int(1.0))) ) - i0 ), abs(mod(( abs(divInt(( res0 - int(1.0) ),( in0 + divInt(mod(int(0.0),i2),i0) ))) + int(9.0) ),abs(int(3.0))))), int(2.0)))))), i0)))), int(5.0)), min(int(3.0), min(in0, mod(int(1.0),i2)))), ( mod(int(5.0),( max(abs(res0), abs(max(divInt(divInt(res0,abs(divInt(int(7.0),i1))),min(abs(max(in1, int(6.0))), ( int(6.0) - min(mod(i2,divInt(abs(max(int(7.0), divInt(i0,( min(max(i2, int(2.0)), min(min(max(int(5.0), mod(int(9.0),in1)), i2), ( abs(res0) - int(9.0) ))) - ( ( abs(int(9.0)) * in0 ) - min(res0, max(int(5.0), in1)) ) )))),mod(mod(res0,abs(divInt(res0,in2))),int(7.0)))), i2) ))), res0))) + abs(i1) )) - in2 )), int(8.0)))) * in2 ) + i2 ) - in1 ) == int(2.0)\\nif int(5.0) == abs(( max(mod(mod(min(i1, ( ( in1 * abs(int(9.0)) ) + max(divInt(in2,int(3.0)), max(abs(( res0 * in0 )), i1)) )),int(9.0)),res0), ( int(3.0) + i1 )) + i0 )):{:\\nin1 *= i0\\n:}else:{:\\ni1 -= int(7.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 61, 61, 3, 1, 0, 3, 3, 0, 0, 1, 74, 2, 282, 76, 74, 40, 38]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 1, 2, 1, 0, 0], [1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 8, 4, 5, 8, 1, 3, 7, 5, 6, 6, 1, 8, 1, 3, 4, 8, 3, 8, 5, 8, 9, 9, 5, 4, 8, 8, 7, 2, 7, 7, 4, 7, 3, 4, 0], [2, 5, 4, 4], [1, 0, 0], [0, 1], [0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0], [3, 3, 0], [], [], [1, 4, 3, 3, 0, 5, 5, 3, 4, 2, 1, 0, 6, 0, 2, 3, 3, 0, 4, 0, 1, 5, 3, 4, 2, 1, 2, 3, 3, 4, 5, 3, 2, 0, 4, 6, 3, 1, 5], [1, 0, 0], [3, 3, 0, 0, 0, 2, 0, 0, 1, 3, 3, 0, 2, 2, 0, 1, 1, 3, 0, 1, 1, 2, 2, 0, 3, 0, 1, 2, 0, 1, 3, 1, 1, 1, 3, 2, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 2, 0, 2, 1, 2, 1, 1, 1, 3, 1, 0, 2, 2, 1, 2, 1, 2, 3, 3, 0, 2, 2, 0, 3, 2, 0, 2, 0, 0, 3, 3, 1, 3, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 3, 2, 1, 2, 2, 3, 3, 3, 1, 2, 0, 2, 1, 2, 3, 0, 0, 0, 0, 0, 3, 1, 0, 1, 3, 2, 3, 1, 3, 3, 0, 0, 2, 1, 0, 2, 2, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [2, 1, 0, 1, 2, 1, 1, 0, 0, 1, 1, 2, 0, 0, 2, 2, 2, 0, 1, 1, 2, 2, 1, 1, 2, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0, 2, 1, 2, 1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 2, 2, 1, 1, 2, 1, 0, 2, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( abs(max(i1, in1)) == in0 and ( b0 or ( in0 - i0 ) != int(9.0) ) )\\nin2 -= min(max(in2, ( ( in0 + int(2.0) ) + int(8.0) )), abs(in1))\\nloopBreak% = 0\\nwhile int(4.0) \\le int(5.0):{:\\ni2 = divInt(( i1 - max(i0, int(8.0)) ),mod(res0,int(1.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = max(int(3.0), int(7.0))\\nb0 = int(56.0) \\le min(divInt(( min(( i2 + ( in0 * divInt(int(6.0),int(1.0)) ) ), ( max(( in0 - divInt(int(8.0),( int(1.0) * int(3.0) )) ), int(4.0)) - max(int(8.0), i0) )) - ( ( int(3.0) * ( int(8.0) + ( abs(min(in1, ( ( i0 * min(( i1 + divInt(in2,in0) ), abs(abs(int(5.0)))) ) - abs(( mod(int(8.0),divInt(( int(9.0) * in1 ),( ( i2 + int(9.0) ) + int(5.0) ))) * ( min(i1, max(i2, int(4.0))) * ( in0 - int(8.0) ) ) )) ))) - max(mod(int(8.0),divInt(( abs(abs(max(int(7.0), ( in0 * divInt(int(2.0),( max(in1, in2) - in0 )) )))) + i2 ),i0)), abs(int(7.0))) ) ) ) * in1 ) ),int(7.0)), max(( min(int(4.0), min(max(res0, in0), ( int(7.0) + i1 ))) - ( mod(int(3.0),int(4.0)) * in2 ) ), int(0.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 37, 37, 4, 3, 2, 7, 4, 3, 0, 0, 39, 3, 142, 41, 29, 30, 12]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 8, 8, 4, 7, 5, 7], [2, 3], [1, 0], [], [1, 0, 1], [0, 0], [2], [], [], [], [], [1, 3, 1, 2, 1, 1, 1, 3, 1, 1], [1], [1, 1], [], [1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(1.0) == max(int(8.0), mod(int(8.0),int(4.0)))\\nb0 = not int(7.0) \\ge max(int(5.0), int(7.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 2, 2, 0, 3, 2, 1, 0, 0, 0, 0, 10, 1, 2, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [1], [], [], [], [], [], [], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(1.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 2, 1, 1, 1, 2, 1], [1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 2, 4, 7, 3, 9, 7, 6, 7, 8, 7, 4, 8, 3, 0, 4, 8, 9, 0, 7, 1, 0, 9, 1, 0, 5, 2, 5, 7, 7, 1, 2, 0, 5, 6, 4, 7, 9, 5, 6, 4, 4, 6, 3, 1, 3, 6, 3, 2, 7, 0, 4, 0, 8, 4, 0, 4, 8, 8, 9, 3, 8, 5, 9], [0, 4, 2, 4], [0], [], [1, 1, 1, 0, 0, 1], [0, 0, 0, 0], [2, 2], [], [], [1, 3, 5, 3, 0, 4, 6, 5, 6, 0, 1, 5, 0, 2, 2, 5, 3, 2, 5, 3, 4, 1, 3, 2, 2, 6, 2, 6, 0, 3, 5, 3, 2, 6, 3, 4, 1, 0, 6, 1, 1, 6, 5, 4, 6, 5, 6, 1, 6, 2, 4, 4, 0, 5, 5, 5, 5], [0, 1, 1, 0], [3, 3, 1, 2, 3, 1, 1, 2, 3, 3, 1, 1, 0, 3, 3, 2, 3, 0, 3, 1, 0, 3, 1, 3, 3, 1, 1, 1, 0, 2, 3, 2, 3, 2, 2, 1, 0, 2, 1, 0, 3, 3, 1, 1, 0, 3, 3, 3, 3, 3, 2, 1, 3, 1, 1, 3, 2, 2, 2, 1, 0, 1, 1, 2, 0, 1, 0, 3, 3, 3, 0, 2, 3, 2, 3, 1, 3, 0, 0, 1, 3, 2, 2, 3, 3, 0, 3, 2, 3, 1, 1, 3, 2, 0, 0, 3, 0, 2, 3, 1, 2, 2, 2, 3, 0, 2, 3, 3, 0, 1, 3, 1, 1, 3, 1, 2, 0, 2, 2, 3, 1, 2, 0, 0, 0, 2, 2, 0, 1, 0, 1, 3, 2, 2, 1, 3, 0, 3, 3, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 1, 3, 1, 3, 2, 0, 0, 0, 3, 2, 2, 0, 1, 1, 2, 2, 1, 3, 2, 2, 3, 3, 1, 0, 3, 3, 0, 0, 2, 3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 1, 2, 2, 0, 1, 3, 0, 3, 2, 2, 1, 0, 3, 1, 0, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 2, 0, 0, 3, 3, 2, 1, 3, 2, 1, 0, 1, 3, 1, 2, 0, 0, 1, 2, 1, 2, 3, 1, 1, 2, 2, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 2, 1, 1, 1, 1, 2, 0, 0, 2, 0, 0, 1, 1, 1, 2, 0, 1], [0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 1, 1, 0, 1, 1, 2, 2, 1, 2, 1, 0, 1, 0, 0, 2, 2, 1, 2, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(max(int(7.0), mod(max(int(1.0), int(2.0)),divInt(abs(max(int(4.0), int(7.0))),i1))), abs(min(( max(in0, min(int(3.0), in2)) + max(int(9.0), max(abs(int(7.0)), int(6.0))) ), int(7.0)))) \\l in0\\nloopBreak% = 0\\nwhile mod(min(( min(mod(( int(8.0) + i0 ),mod(int(7.0),in1)), min(abs(int(4.0)), int(8.0))) + res0 ), max(abs(min(min(abs(divInt(int(3.0),abs(int(0.0)))), int(4.0)), min(mod(( ( int(8.0) * in2 ) * int(9.0) ),int(0.0)), ( res0 * int(7.0) )))), i0)),min(abs(min(i1, divInt(min(( min(int(1.0), min(in2, i0)) * int(0.0) ), abs(( ( max(abs(i2), min(mod(max(int(9.0), int(1.0)),min(( i2 + in2 ), abs(in0))), ( abs(int(0.0)) * mod(divInt(mod(min(i2, mod(min(max(in2, int(5.0)), max(int(2.0), int(5.0))),abs(int(7.0)))),( in0 * mod(mod(abs(int(7.0)),divInt(in1,i1)),in0) )),mod(( i2 + int(1.0) ),i2)),int(2.0)) ))) + min(( ( int(0.0) * abs(res0) ) - max(min(mod(int(5.0),int(6.0)), mod(int(4.0),i2)), int(7.0)) ), int(9.0)) ) - mod(abs(int(5.0)),max(int(6.0), abs(( res0 + i0 )))) ))),in0))), abs(divInt(( in2 - int(4.0) ),int(4.0))))) \\le ( ( int(6.0) - max(divInt(divInt(max(max(int(3.0), in0), max(abs(i2), res0)),( min(( ( min(( abs(int(1.0)) * int(3.0) ), in0) * int(6.0) ) - in1 ), int(3.0)) * mod(( i1 - int(2.0) ),min(i0, min(( ( int(7.0) + res0 ) - max(int(0.0), i1) ), int(4.0)))) )),i1), int(0.0)) ) + int(8.0) ):{:\\nloopBreak% = 0\\nwhile res0 == divInt(int(4.0),in2):{:\\nin1 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += ( res0 * divInt(i1,res0) )\\ni2 *= max(max(( int(0.0) - abs(( int(4.0) * in1 )) ), int(8.0)), min(int(8.0), ( in1 + i0 )))\\nloopBreak% = 0\\nwhile not not int(9.0) \\le ( int(3.0) + mod(max(int(8.0), int(5.0)),( mod(in2,in2) - in2 )) ):{:\\nin2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 65, 65, 4, 1, 0, 6, 4, 2, 0, 0, 57, 4, 245, 60, 67, 34, 28]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 1, 0], [1, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 7, 5, 1, 9, 0, 4], [2, 0, 1], [2], [], [1, 1, 1], [0, 0, 0], [], [], [], [5, 3, 4, 4, 4, 3], [0], [2, 3, 2, 0, 2, 1, 1, 0, 1, 0, 1, 3, 1, 2, 1, 0, 1, 0, 1], [0, 0, 1, 1], [0, 0], [0, 2], [0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( min(( in2 + divInt(int(6.0),int(0.0)) ), in0) * int(7.0) ) == in1:{:\\nloopBreak% = 0\\nwhile int(5.0) \\l min(int(1.0), mod(int(9.0),in1)):{:\\nb2 = int(0.0) \\g in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 8, 8, 3, 1, 0, 3, 3, 0, 0, 0, 6, 1, 19, 4, 2, 2, 2]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1], [2, 0, 2, 1, 2, 1, 1, 0], [0, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 8, 5, 2, 5, 4], [2], [0, 1], [], [0, 0, 1, 0, 0], [0], [1, 2, 1, 0], [0, 0], [0], [3, 1, 1, 1, 4, 1, 5], [0, 0, 1, 0], [1, 1, 0, 3, 2, 1, 0, 2, 1, 3, 1, 1, 2, 3, 0, 1, 3, 2, 1, 1], [1, 0, 0, 0], [1, 2, 0, 2], [0, 0, 2, 0], [1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin0 = int(2.0)\\n:}\\nloopBreak% = 0\\nwhile not int(2.0) == i1:{:\\ni1 = max(mod(int(7.0),i1), ( int(7.0) + abs(int(8.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nb0 = b1\\nin1 += int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( min(in2, int(2.0)) * abs(( int(5.0) + int(4.0) )) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 9, 9, 1, 2, 0, 5, 1, 4, 2, 1, 7, 4, 20, 4, 4, 4, 1]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 0, 2, 1, 1], [1, 0, 0, 0], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 2, 1, 8, 7, 5, 2, 4, 3, 5, 7, 6, 0, 9, 3, 5, 5, 8, 5, 4, 7, 0, 7, 7, 5, 6, 4, 6, 9, 5, 5, 4, 1, 1], [5, 0, 0, 3], [2, 0], [], [1, 1, 1, 0, 1, 0], [0, 0, 0, 0], [2, 0], [], [0, 1, 1], [1, 5, 5, 0, 6, 4, 1, 5, 4, 4, 6, 0, 0, 6, 1, 6, 0, 1, 6, 0, 2, 2, 5, 1, 5, 1, 1, 0, 3, 1, 2, 4, 0, 0, 1, 2, 6], [1, 1, 1], [3, 2, 1, 0, 2, 2, 3, 2, 3, 3, 3, 3, 0, 3, 0, 0, 3, 1, 1, 3, 2, 1, 0, 1, 3, 0, 1, 3, 1, 2, 0, 0, 3, 0, 0, 2, 0, 1, 0, 1, 1, 2, 3, 3, 2, 0, 3, 3, 0, 2, 3, 1, 0, 3, 3, 1, 0, 2, 3, 1, 1, 2, 1, 1, 2, 3, 2, 1, 3, 3, 3, 2, 3, 0, 3, 2, 2, 0, 2, 0, 0, 1, 2, 1, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 3, 2, 1, 3, 0, 3, 3, 3, 1, 2, 3, 3, 1, 1, 1, 2, 0, 2, 0, 1, 2, 0, 3, 2, 3, 1, 1, 0, 2, 1, 0, 0, 3, 0, 1, 2, 2, 3, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 2, 1, 2, 0, 1, 0, 2, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0], [2, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= min(( int(9.0) - in2 ), ( mod(abs(( max(abs(min(max(in2, min(i0, res0)), abs(int(0.0)))), int(2.0)) - max(( int(1.0) * in1 ), int(8.0)) )),min(i1, int(7.0))) + abs(int(5.0)) ))\\nloopBreak% = 0\\nwhile mod(in2,in1) != abs(in1):{:\\nif res0 \\l mod(i0,int(2.0)):{:\\nif i0 \\l int(4.0):{:\\nres0 *= int(3.0)\\n:}else:{:\\nif not divInt(max(max(( i1 + min(max(res0, mod(max(int(5.0), i0),min(abs(int(7.0)), i1))), ( max(int(6.0), int(0.0)) * ( int(9.0) * int(3.0) ) )) ), divInt(min(divInt(int(5.0),abs(abs(min(( min(res0, abs(( mod(i0,divInt(i2,i2)) - int(5.0) ))) * divInt(int(8.0),divInt(int(5.0),( in2 - int(4.0) ))) ), int(7.0))))), i1),in2)), i1),i1) \\ge min(divInt(int(0.0),min(i0, max(max(max(int(7.0), mod(max(min(int(7.0), int(5.0)), int(6.0)),( in0 - ( i1 + int(4.0) ) ))), ( i2 - min(( max(int(6.0), int(9.0)) * in1 ), divInt(int(5.0),i0)) )), i0))), max(i1, int(5.0))):{:\\ni2 += mod(( min(res0, int(4.0)) + int(1.0) ),int(1.0))\\n:}else:{:\\nb2 = b0\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 35, 35, 4, 2, 0, 6, 4, 2, 0, 3, 37, 3, 136, 30, 37, 18, 15]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 0], [1], [0, 1, 1], [0, 1], [6, 0], [1], [2, 0], [0], [0, 1, 0, 0, 0], [0], [3, 0, 2, 1], [1], [], [3, 1, 2, 5, 0], [1, 1], [0, 0, 0, 1], [], [], [1, 0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( in0 \\g i1 and b2 ):{:\\nb0 = not False\\ni2 -= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(60.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 2, 2, 1, 2, 1, 5, 1, 4, 1, 0, 5, 2, 4, 0, 0, 2, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 2, 1, 1], [0, 0, 0], [0, 1], [1, 1, 1], [2, 9, 0], [2, 5, 3, 1], [1], [], [1, 1, 1, 1], [0, 0, 0, 0], [], [], [0, 0, 0], [6, 2, 3, 1, 3, 1, 5, 2, 5], [0], [0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 3, 0, 0], [0], [1], [0], []], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif res0 == int(2.0):{:\\nif int(9.0) != i2:{:\\nif ( in0 + i1 ) \\ge in0:{:\\nb1 = int(0.0) \\g i1\\n:}\\n:}\\n:}\\nin2 = max(i2, in2)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 3, 3, 4, 1, 0, 4, 4, 0, 0, 3, 9, 1, 13, 1, 1, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 2, 1, 0, 0, 0, 0], [0, 0], [0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 0, 7, 9, 5, 6, 1, 1, 2, 7, 1, 5, 2, 7, 5, 7, 4, 6, 9, 4, 7, 0, 6, 3, 3, 0, 9, 4, 7, 7, 8, 7, 1, 9, 8, 3, 8, 1, 7, 9, 8, 2, 4, 9, 3, 8, 2, 2, 2, 1, 5, 7, 2, 6, 0, 5, 6, 1, 3, 5, 8, 7, 5, 6, 4, 7, 2, 9, 7, 0, 4, 5, 8, 3, 9, 8, 9, 4, 5], [5, 2, 0, 5, 1, 3], [2, 2, 1, 0], [0], [1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [3, 2, 1], [1], [0, 1], [5, 4, 0, 6, 4, 6, 4, 3, 0, 5, 5, 2, 1, 6, 5, 3, 5, 5, 2, 5, 0, 5, 3, 4, 4, 5, 3, 4, 4, 6, 6, 3, 5, 2, 4, 2, 1, 4, 0, 1, 1, 5, 4, 2, 0, 3, 6, 6, 1, 3, 4, 5, 4, 5, 3, 1, 4, 6, 4, 6, 4, 6, 2, 5, 5, 4, 5, 3, 5, 6, 1, 2, 5, 3, 6, 1, 5, 3, 6, 6, 6, 0, 3, 4, 4, 1, 5, 5, 5], [0, 0], [0, 1, 2, 3, 3, 2, 2, 3, 1, 2, 1, 1, 2, 3, 2, 3, 0, 2, 1, 0, 2, 3, 1, 3, 3, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 3, 3, 1, 2, 2, 0, 2, 3, 1, 0, 1, 0, 3, 2, 1, 2, 0, 3, 0, 3, 2, 2, 3, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 3, 1, 3, 1, 0, 0, 1, 0, 0, 2, 3, 2, 2, 3, 3, 2, 2, 1, 0, 0, 1, 3, 3, 0, 2, 1, 2, 0, 0, 3, 1, 2, 2, 1, 2, 0, 3, 2, 2, 2, 2, 0, 0, 0, 3, 0, 1, 0, 2, 2, 3, 2, 2, 1, 1, 3, 1, 0, 0, 2, 0, 0, 1, 2, 2, 2, 0, 2, 1, 1, 0, 1, 0, 2, 0, 2, 2, 1, 3, 3, 0, 0, 3, 3, 1, 0, 0, 0, 0, 3, 2, 2, 3, 3, 0, 0, 2, 3, 0, 3, 2, 0, 0, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 3, 3, 3, 3, 0, 1, 1, 0, 3, 2, 1, 1, 2, 1, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 1, 1, 2, 0, 2, 1, 2, 2, 0, 2, 3, 1, 1, 1, 0, 1, 3, 2, 3, 2, 1, 3, 0, 0, 3, 3, 0, 2, 3, 0, 2, 0, 2, 0, 0, 2, 3, 1, 3, 3, 3, 3, 2, 3, 1, 3, 3, 3, 3, 0, 2, 2, 0, 1, 3, 3, 2, 3, 3, 0, 1, 3, 1, 2, 3, 1, 0, 3, 2, 3, 1, 1, 3, 0, 1, 0, 1, 0, 2, 3, 0, 1, 0, 3, 3, 2, 2, 3, 2, 1, 0, 1, 2, 3, 1, 3, 3, 2, 0, 3, 1, 0, 0, 3, 0, 2, 0, 3, 2, 1, 3, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 1, 2, 1, 0, 1, 2, 2, 1, 0, 2, 3, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 2, 0, 0, 0, 1, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1, 0, 0, 2, 0, 1, 1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 1, 2, 0, 2, 1, 2], [2, 1, 0, 1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 2, 1, 1, 0, 2, 0, 2, 1, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in2 != int(4.0)\\nif mod(min(max(( divInt(max(int(0.0), mod(int(7.0),int(9.0))),mod(abs(mod(abs(in1),divInt(int(5.0),i0))),( abs(int(6.0)) * min(min(res0, in1), res0) ))) - mod(in1,divInt(in0,i0)) ), in2), ( divInt(mod(min(abs(int(1.0)), ( ( in2 + divInt(abs(int(1.0)),i2) ) - int(2.0) )),i1),abs(( int(7.0) - ( res0 * max(in2, min(divInt(mod(abs(int(1.0)),mod(int(5.0),mod(int(2.0),mod(mod(divInt(divInt(( ( min(int(7.0), max(int(5.0), in0)) + in2 ) * int(7.0) ),in2),i2),divInt(min(mod(mod(max(abs(mod(( int(4.0) * in2 ),i0)), int(6.0)),abs(min(in2, ( int(9.0) * mod(in0,in1) )))),min(int(4.0), mod(divInt(int(7.0),divInt(in1,min(( mod(mod(divInt(in2,in0),in1),max(in1, int(0.0))) - res0 ), mod(( abs(mod(divInt(int(6.0),int(3.0)),abs(int(3.0)))) * res0 ),in0)))),( in2 * i2 )))), int(0.0)),( mod(( in1 + mod(int(9.0),int(4.0)) ),i2) - int(7.0) ))),i1)))),divInt(in1,mod(divInt(int(7.0),max(max(i0, i1), abs(min(int(8.0), i1)))),in2))), in1)) ) ))) * i2 )),abs(( ( max(max(i0, in0), mod(max(res0, min(mod(res0,i1), int(7.0))),int(1.0))) * mod(int(9.0),( int(8.0) - int(3.0) )) ) - mod(int(8.0),int(1.0)) ))) == ( min(abs(min(max(in0, int(7.0)), int(9.0))), in1) + max(mod(int(8.0),int(2.0)), mod(int(4.0),in2)) ):{:\\nif ( in1 \\l in2 and ( ( ( ( ( in0 * abs(abs(min(i1, int(9.0)))) ) + int(3.0) ) * mod(in1,mod(int(8.0),divInt(divInt(res0,( max(int(2.0), int(2.0)) - int(2.0) )),in1))) ) * int(1.0) ) + abs(divInt(abs(( int(5.0) * min(res0, in1) )),abs(abs(res0)))) ) != divInt(abs(i2),( in2 * ( in2 * in1 ) )) ):{:\\nb2 = divInt(abs(int(7.0)),abs(min(min(abs(( abs(int(2.0)) * max(min(abs(min(in2, ( divInt(in0,int(6.0)) * abs(max(mod(max(min(in2, int(0.0)), max(int(5.0), mod(min(int(6.0), res0),max(divInt(abs(int(1.0)),int(3.0)), abs(i1))))),int(5.0)), i2)) ))), int(8.0)), in2) )), ( abs(in0) * int(7.0) )), res0))) \\g abs(max(mod(divInt(max(( int(5.0) - i1 ), int(6.0)),( min(int(4.0), min(max(( in2 * abs(int(7.0)) ), in0), res0)) * min(res0, ( res0 * abs(( int(2.0) * max(mod(divInt(i0,in0),int(9.0)), in1) )) )) )),( int(7.0) * mod(int(0.0),int(4.0)) )), divInt(int(5.0),in1)))\\n:}else:{:\\nb1 = not False\\n:}\\ni1 = int(8.0)\\nb0 = ( mod(int(3.0),in2) - mod(abs(in2),int(9.0)) ) \\ge int(8.0)\\n:}\\nin2 = int(945.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 79, 79, 6, 4, 1, 9, 6, 3, 1, 2, 89, 2, 348, 102, 82, 39, 63]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [1, 0, 0], [1, 1], [0, 7], [4, 2], [2, 0], [], [1, 1], [0, 0], [], [], [], [1, 5, 2, 6], [0], [1, 0, 1, 0, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(0.0)\\nb2 = in2 \\le int(7.0)\\nb0 = i2 == res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 4, 1, 5, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [6], [0], [3, 3, 1], [], [2, 2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = abs(abs(int(8.0)))\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 2, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 9, 5, 8, 3, 1, 6, 5, 7, 4, 0, 3, 0, 7, 5, 2, 6, 5, 7, 1, 1, 4, 0, 1, 8, 6, 4, 8, 6, 8, 0, 8, 6, 8], [4, 2, 2], [2, 0], [], [1, 1, 0, 1], [0, 0, 0], [2], [], [1], [4, 6, 6, 1, 1, 2, 6, 6, 5, 1, 1, 3, 6, 3, 4, 6, 3, 4, 2, 6, 2, 3, 2, 0, 4, 3, 4, 1, 5, 4], [], [3, 0, 3, 3, 2, 1, 3, 0, 2, 0, 2, 1, 2, 2, 0, 1, 0, 0, 1, 3, 1, 2, 2, 1, 0, 0, 1, 0, 3, 2, 1, 2, 2, 3, 3, 1, 1, 1, 2, 0, 2, 2, 3, 2, 2, 3, 2, 3, 3, 0, 0, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 0, 2, 3, 0, 0, 2, 2, 0, 2, 3, 3, 0, 3, 3, 1, 2, 1, 2, 1, 3, 2, 3, 2, 1, 1, 3, 1, 3, 1, 0, 0, 3, 2, 0, 2, 1, 3, 2, 1, 0, 0, 2, 3, 2, 1, 2, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 1, 0], [0, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(in1, min(min(( int(0.0) + min(res0, mod(res0,divInt(int(2.0),divInt(( i1 * int(9.0) ),i1)))) ), i2), int(5.0))) \\le max(int(8.0), divInt(( int(3.0) - res0 ),res0)):{:\\nb2 = int(1.0) == in2\\n:}else:{:\\nb0 = not max(divInt(int(6.0),( ( min(max(int(5.0), int(7.0)), int(4.0)) * ( i1 - mod(divInt(min(divInt(( min(mod(abs(abs(i1)),in0), mod(abs(abs(res0)),int(0.0))) * min(( int(3.0) - in0 ), ( abs(divInt(max(int(0.0), int(7.0)),int(5.0))) - mod(int(2.0),int(6.0)) )) ),int(5.0)), int(7.0)),( int(1.0) * ( in1 - ( min(res0, in0) * divInt(( in1 + ( min(max(i2, abs(abs(int(1.0)))), ( int(4.0) - ( int(0.0) + max(( abs(( int(1.0) - int(8.0) )) + abs(int(6.0)) ), min(int(4.0), res0)) ) )) + i2 ) ),min(divInt(in0,mod(int(8.0),max(mod(int(6.0),i2), i0))), mod(abs(( int(8.0) + mod(in1,in0) )),int(0.0)))) ) ) )),max(min(in1, divInt(int(8.0),i1)), int(6.0))) ) ) + in2 )), in1) == int(8.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 35, 35, 3, 2, 0, 4, 3, 1, 0, 1, 30, 0, 134, 38, 31, 19, 19]}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 1, 1], [1], [1, 1, 1], [1, 0, 1, 1], [0, 6, 1, 4], [1], [], [], [1], [0], [], [], [], [3, 2, 5, 3, 3], [1, 1, 0], [3, 1, 1, 0, 1, 0], [], [2], [0, 2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(int(0.0)) \\g int(61.0):{:\\nin0 += i2\\nin2 *= int(4.0)\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 4, 4, 1, 0, 0, 1, 1, 0, 0, 0, 5, 3, 6, 0, 1, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [0, 1], [4, 6], [4], [0], [], [1], [0], [], [], [], [6], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = res0 \\le int(46.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 1, 1], [1], [1, 0, 1], [1, 1, 1, 1, 1, 1], [3, 4, 3, 7, 2, 8], [1], [2, 0], [], [0, 1], [0], [0], [], [], [2, 6, 1, 6], [0, 0], [0, 1, 1, 2, 2, 3, 1, 2, 0, 1, 2, 1, 1], [1, 0, 0, 0], [2], [2, 2, 2], [1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\ni2 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(3.0) \\g int(4.0)\\ni1 = mod(( abs(int(3.0)) * ( res0 * int(7.0) ) ),( int(2.0) * int(8.0) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 6, 6, 1, 2, 0, 2, 1, 1, 0, 0, 4, 2, 13, 4, 1, 3, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 0, 1], [8, 5, 0], [5], [0], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(8.0) != int(50.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 0, 0], [1, 0, 0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 5, 6, 1, 3, 7, 7], [5, 1, 0], [0, 1, 0, 1], [], [1, 0, 1, 1, 0], [0, 0, 0], [0, 0], [], [0, 1], [0, 3, 2, 5, 1, 3, 2, 0, 2], [], [1, 2, 0, 0, 2, 1, 3, 0, 3, 0, 0, 2, 3, 2, 3, 0, 2, 1, 0, 0, 1, 2, 3, 0, 2, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1], [0, 0, 2, 0, 1], [1, 1, 1, 0], [1, 1, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(0.0) != mod(i0,in0):{:\\nif b0:{:\\nif ( int(9.0) - min(i2, min(in2, i1)) ) \\g ( abs(( min(in0, mod(int(5.0),i2)) - i0 )) - int(6.0) ):{:\\nb1 = ( max(i2, divInt(int(1.0),int(3.0))) + int(7.0) ) \\l int(7.0)\\n:}else:{:\\nb0 = b1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 8, 8, 3, 4, 0, 5, 3, 2, 0, 2, 9, 0, 29, 7, 5, 4, 3]}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 2, 0], [0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 5, 1, 7, 3, 9, 1, 9, 7, 3, 1, 6, 8, 9, 6, 6, 6, 9, 6, 7, 1], [4, 3], [2], [], [1, 0, 1], [0, 0], [1], [0], [1], [1, 1, 2, 4, 2, 1, 4, 6, 6, 0, 2, 6, 3, 0, 4, 3, 5, 6, 4, 3, 4, 5, 2], [1], [0, 3, 3, 0, 1, 0, 3, 3, 0, 1, 2, 2, 2, 1, 2, 3, 3, 0, 2, 1, 3, 3, 1, 1, 0, 0, 0, 3, 1, 3, 2, 2, 1, 3, 2, 3, 0, 0, 2, 0, 1, 2, 2, 1, 3, 3, 2, 3, 0, 0, 3, 2, 0, 2, 2, 0, 2, 2, 1, 1, 1, 1, 2, 2, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 1, 0, 1, 3, 2, 1, 3, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 0, 1, 1, 2], [1, 0, 1, 0, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\le max(min(i1, int(3.0)), i2):{:\\nin1 -= max(max(i2, int(4.0)), ( mod(divInt(int(5.0),divInt(max(max(i1, ( int(1.0) + max(abs(int(7.0)), int(3.0)) )), in1),res0)),res0) - abs(int(9.0)) ))\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nb2 = max(mod(divInt(int(1.0),abs(( max(i0, i2) + divInt(res0,int(9.0)) ))),divInt(( int(7.0) * abs(max(( max(in0, i0) - abs(( in1 - ( mod(in0,( ( int(3.0) - int(1.0) ) * int(6.0) )) * int(8.0) ) )) ), mod(( int(9.0) * in2 ),( ( int(6.0) - res0 ) * mod(abs(( in1 + in0 )),min(( max(in1, int(6.0)) + in2 ), int(6.0))) )))) ),max(mod(int(9.0),abs(int(6.0))), int(7.0)))), int(1.0)) \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 22, 22, 2, 1, 0, 3, 2, 1, 1, 1, 23, 1, 90, 25, 21, 15, 11]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 2, 0, 0, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 1], [0, 1, 1, 0, 0, 1], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 6, 1, 6, 3, 0, 9, 7, 1, 1, 1, 0, 5, 7, 0, 8, 1, 1, 7, 7, 8, 9, 2, 0, 3, 7, 7, 3, 8, 5, 7, 7, 7, 9, 5, 6, 1, 2, 5, 0, 9, 4, 0, 8, 6, 6, 0, 1, 0, 8, 4, 5, 6, 1, 0, 3, 4, 1, 4, 2, 0, 1, 2, 6, 6, 0, 8, 4, 7, 9, 6, 1, 2, 2, 4, 1, 5, 7, 4, 5, 6, 2, 6, 6, 7, 6, 0, 2, 9, 8, 4, 4, 6, 3, 6, 6, 4, 5, 3, 7, 6, 5, 5, 4, 3, 4, 6, 7, 6, 8, 2, 2, 6, 5, 0, 0, 1, 5, 7, 9, 2, 0, 2, 9, 6], [5, 3, 0, 1, 2, 5], [2, 0, 2, 1, 0, 1, 0], [1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 3, 2, 0], [0, 1], [1, 1, 0], [4, 6, 2, 1, 5, 5, 2, 6, 6, 0, 2, 5, 1, 5, 3, 6, 6, 6, 6, 6, 4, 3, 0, 1, 2, 5, 1, 3, 4, 2, 3, 5, 5, 0, 4, 6, 1, 6, 4, 5, 1, 2, 4, 2, 6, 0, 1, 6, 3, 2, 6, 3, 5, 6, 5, 6, 3, 1, 4, 3, 6, 4, 5, 5, 5, 1, 1, 1, 0, 1, 6, 4, 5, 2, 3, 0, 4, 5, 6, 1, 1, 5, 5, 0, 3, 1, 6, 3, 2, 5, 5, 2, 1, 3, 6, 3, 5, 2, 1, 3, 3, 3, 2, 4, 1, 1, 1, 4, 6, 6, 2, 3, 1, 2, 3, 4, 2, 3, 0, 2, 1, 4], [0, 0, 0, 0, 1, 0], [0, 1, 1, 3, 2, 3, 1, 3, 3, 2, 3, 2, 3, 1, 3, 3, 0, 1, 0, 2, 1, 1, 1, 3, 0, 2, 2, 1, 0, 0, 3, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 2, 0, 2, 1, 0, 1, 0, 3, 2, 3, 2, 3, 1, 2, 2, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 2, 2, 2, 3, 3, 1, 1, 2, 0, 0, 3, 1, 2, 0, 2, 3, 1, 2, 2, 1, 2, 0, 3, 0, 2, 2, 2, 1, 2, 1, 2, 3, 0, 2, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 2, 1, 1, 0, 1, 0, 0, 2, 1, 3, 0, 3, 2, 3, 1, 2, 1, 3, 1, 2, 3, 3, 3, 2, 3, 1, 1, 3, 1, 2, 0, 1, 1, 2, 0, 2, 0, 1, 2, 2, 2, 0, 3, 1, 1, 0, 2, 2, 3, 1, 1, 2, 2, 3, 3, 0, 2, 3, 0, 2, 3, 2, 1, 0, 1, 3, 1, 0, 0, 0, 1, 3, 2, 1, 3, 0, 2, 3, 1, 2, 0, 1, 2, 0, 3, 2, 1, 2, 2, 3, 0, 3, 2, 3, 1, 2, 0, 1, 3, 0, 1, 1, 1, 2, 3, 1, 3, 3, 3, 2, 2, 0, 2, 3, 3, 0, 1, 0, 1, 1, 1, 0, 1, 3, 0, 1, 0, 1, 0, 0, 3, 3, 3, 2, 3, 3, 0, 2, 1, 0, 2, 0, 1, 1, 3, 3, 0, 3, 1, 3, 0, 2, 2, 3, 3, 2, 1, 1, 3, 3, 3, 2, 1, 2, 0, 2, 1, 2, 3, 3, 2, 2, 1, 0, 0, 1, 3, 1, 0, 2, 0, 2, 2, 3, 1, 3, 0, 3, 2, 0, 3, 2, 3, 2, 2, 2, 2, 0, 2, 2, 3, 2, 3, 2, 1, 0, 1, 3, 0, 2, 1, 3, 3, 0, 1, 3, 0, 2, 3, 1, 0, 1, 1, 1, 1, 1, 2, 2, 0, 2, 3, 2, 2, 1, 3, 2, 3, 1, 3, 1, 2, 0, 0, 1, 0, 3, 3, 3, 0, 3, 1, 3, 2, 3, 3, 1, 3, 1, 0, 3, 2, 1, 2, 3, 1, 3, 1, 0, 0, 2, 1, 1, 1, 0, 2, 0, 1, 2, 3, 2, 2, 2, 2, 3, 2, 0, 1, 0, 1, 2, 1, 1, 3, 3, 0, 1, 0, 0, 1, 1, 3, 0, 1, 0, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 0, 0, 0, 1, 0, 0, 3, 1, 1, 1, 3, 3, 3, 3, 2, 3, 3, 0, 1, 1, 0, 3, 1, 2, 3, 0, 0, 2, 1, 3, 0, 0, 2, 0, 0, 0, 0, 3, 0, 2, 0, 3, 2, 3, 1, 3, 3, 0, 3, 2, 1, 3, 1, 1, 2, 2, 3, 0, 0, 1, 2, 0, 1, 2, 2, 1, 0, 0, 0, 3, 2, 3, 3, 3, 2, 1, 3, 3, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 2, 2, 2, 2, 1, 0, 0, 2, 2, 0, 0, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 0, 0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1, 1, 2, 2, 0, 1, 2, 1, 0, 1, 0, 2, 1, 2, 1, 0, 0, 1, 0, 1, 1, 2, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 0, 2, 0, 2, 1, 2, 1, 2, 0, 0, 1, 2, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 2, 2, 1, 1, 2, 1, 0, 2, 1, 0, 0, 0, 2, 2, 0, 2, 1, 2], [2, 2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 1, 2, 0, 2, 0, 1, 0, 1, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1, 2, 2, 0, 2, 0, 1, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 1, 2, 1, 1, 0, 1, 2], [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 92, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in1 != int(4.0)\\nif b0:{:\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = max(mod(min(int(6.0), min(max(mod(min(mod(max(int(1.0), abs(abs(i1))),int(6.0)), in2),( int(3.0) * int(0.0) )), int(9.0)), abs(in2))),( mod(int(7.0),i2) * res0 )), abs(res0))\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nb1 = False\\ni0 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = i2 \\ge ( max(in2, divInt(min(i1, in2),min(mod(in0,mod(int(1.0),res0)), int(1.0)))) + res0 )\\nif ( abs(divInt(abs(divInt(min(int(0.0), ( ( min(max(res0, res0), abs(abs(res0))) + in1 ) * max(abs(abs(( mod(divInt(max(max(int(5.0), int(7.0)), divInt(in0,i0)),abs(int(0.0))),( i1 * ( max(int(8.0), mod(mod(int(1.0),mod(i2,min(in2, mod(divInt(divInt(int(1.0),( int(7.0) * ( min(i1, ( in0 - divInt(mod(mod(mod(in1,abs(min(min(abs(( int(7.0) + int(8.0) )), i2), int(9.0)))),in0),in2),divInt(int(2.0),abs(in2))) )) * abs(( min(int(0.0), ( int(3.0) + max(int(7.0), divInt(min(max(max(divInt(min(int(7.0), int(3.0)),max(int(8.0), divInt(i0,int(5.0)))), int(7.0)), ( in1 + ( res0 + int(7.0) ) )), mod(( mod(i1,abs(int(7.0))) - int(9.0) ),res0)),divInt(divInt(max(int(5.0), int(6.0)),divInt(divInt(min(max(in1, divInt(max(in2, ( abs(( int(1.0) - i1 )) * int(2.0) )),abs(int(5.0)))), i2),in1),i2)),int(0.0)))) )) + min(( int(9.0) * max(res0, mod(abs(int(4.0)),mod(i0,int(0.0)))) ), mod(i1,max(divInt(int(8.0),( divInt(min(res0, max(mod(min(int(6.0), mod(in0,int(6.0))),abs(i2)), int(0.0))),int(1.0)) + int(0.0) )), divInt(max(int(8.0), abs(max(min(divInt(( res0 - mod(min(max(in0, int(4.0)), in2),int(5.0)) ),int(6.0)), int(1.0)), res0))),int(0.0))))) )) ) )),min(in2, int(3.0))),res0)))),int(4.0))) + in0 ) )) - i1 ))), max(max(abs(( min(min(in1, ( int(1.0) * in0 )), ( res0 - int(4.0) )) + int(2.0) )), min(min(in1, max(int(0.0), min(in2, divInt(( max(max(( int(1.0) * int(2.0) ), min(max(abs(( int(6.0) - divInt(in2,divInt(int(6.0),( abs(abs(( ( int(0.0) - in2 ) + i1 ))) + int(8.0) ))) )), max(int(4.0), i1)), ( i1 + mod(mod(abs(int(7.0)),abs(i0)),max(mod(i1,abs(( max(divInt(divInt(( ( res0 - divInt(( abs(mod(abs(( int(9.0) * in1 )),int(6.0))) * max(in2, ( int(1.0) + max(min(i2, int(2.0)), abs(in0)) )) ),( max(int(2.0), i0) * int(4.0) )) ) + int(1.0) ),int(5.0)),int(7.0)), int(4.0)) - mod(( in1 * divInt(min(mod(( int(5.0) * abs(( min(int(6.0), abs(int(2.0))) * mod(in2,res0) )) ),int(6.0)), i1),max(abs(max(i1, abs(int(6.0)))), min(( min(max(int(7.0), abs(int(6.0))), in2) * max(( int(0.0) + ( max(int(2.0), max(int(9.0), in2)) * i0 ) ), divInt(int(8.0),int(4.0))) ), int(4.0)))) ),in0) ))), divInt(i1,int(6.0)))) ))), ( min(( divInt(divInt(divInt(min(( res0 * int(3.0) ), in0),int(6.0)),( int(6.0) * int(4.0) )),max(min(i2, int(5.0)), in2)) + in2 ), int(3.0)) + int(7.0) )) - max(i2, int(6.0)) ),i1)))), max(min(min(max(min(min(int(5.0), int(5.0)), min(int(4.0), int(3.0))), min(int(4.0), int(6.0))), in0), res0), in0))), int(7.0))) )),in2)),i2)) \\l abs(int(6.0)) or int(8.0) \\g int(2.0) ):{:\\nif not b1:{:\\nb0 = abs(max(max(max(divInt(min(abs(i1), int(2.0)),int(6.0)), in0), abs(int(5.0))), ( max(in0, in0) * ( int(0.0) - max(i2, in1) ) ))) == mod(i1,i1)\\n:}\\ni1 = in1\\nloopBreak% = 0\\nwhile res0 != abs(res0):{:\\ni2 -= mod(in0,max(mod(min(int(0.0), abs(max(i1, min(( int(1.0) + min(int(5.0), int(7.0)) ), mod(divInt(min(i2, in0),int(9.0)),mod(in1,int(2.0))))))),( mod(int(0.0),i2) - in0 )), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = abs(mod(abs(min(abs(( int(2.0) * max(abs(int(9.0)), int(6.0)) )), i1)),in1))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 6, 10, 126, 126, 6, 7, 1, 13, 6, 7, 2, 3, 122, 6, 512, 125, 145, 55, 71]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 0, 8, 2, 6, 3, 9, 7, 4, 9], [], [], [], [], [], [], [], [], [4, 1, 6, 5, 2, 2, 1, 3, 6, 6, 6, 2, 6, 2, 0, 1, 0], [0, 0, 0], [2, 2, 0, 1, 2, 1, 3, 3, 0, 0, 3, 3, 3, 0, 3, 3, 2, 2, 0, 1, 3, 3, 1, 3, 0, 3, 2, 1, 3, 1, 0, 3, 1, 0, 0, 1, 3, 3, 1, 1, 3, 0, 1, 2, 3, 0, 3, 1, 2, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 1, 0, 2, 1, 0, 0, 2], [0, 1, 2, 1, 2], [0, 1, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( ( i1 + int(2.0) ) - ( int(6.0) * max(min(res0, in2), min(abs(max(i2, min(max(divInt(( i2 - int(9.0) ),max(max(int(0.0), min(i1, min(mod(int(8.0),max(int(2.0), in0)), min(int(6.0), res0)))), res0)), int(3.0)), abs(max(int(9.0), int(7.0)))))), min(res0, int(4.0)))) ) )\\ni2 = ( min(res0, abs(int(9.0))) * mod(i2,i0) )\\ni1 = i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 52, 8, 18, 5, 3]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 2, 8, 5, 3, 3, 8, 0, 6, 0, 1, 4, 3, 8, 5, 3, 0, 4, 5, 6, 1, 7, 1, 5, 1, 9, 7, 9, 3, 0, 9, 0, 5, 1, 4, 5, 1, 4, 2, 7, 3, 6, 7, 5, 6, 7, 4, 0, 1, 5, 3, 6, 8, 1, 3, 2, 1, 4, 3, 7], [3], [2], [], [1], [0], [], [], [], [2, 5, 2, 0, 6, 0, 4, 3, 5, 5, 0, 3, 4, 2, 1, 5, 0, 6, 6, 6, 2, 2, 1, 0, 6, 4, 4, 0, 0, 1, 4, 2, 4, 6, 4, 1, 3, 0, 3, 3, 5, 4, 6, 1, 1, 6, 6, 0, 0, 5, 1, 6, 3, 1, 6, 0, 3, 4, 0, 0, 0, 1, 6, 0, 4, 4, 5, 2], [1], [2, 2, 1, 2, 2, 3, 0, 2, 1, 1, 2, 2, 0, 2, 1, 2, 1, 0, 3, 2, 1, 2, 2, 2, 2, 0, 3, 3, 0, 2, 3, 0, 0, 1, 2, 0, 0, 1, 3, 3, 3, 0, 0, 1, 0, 2, 2, 3, 3, 2, 0, 1, 3, 2, 1, 2, 0, 3, 3, 0, 2, 2, 2, 2, 2, 1, 0, 1, 0, 3, 0, 1, 0, 3, 0, 0, 0, 1, 2, 0, 2, 2, 0, 1, 3, 3, 0, 3, 3, 2, 2, 0, 0, 3, 2, 2, 3, 3, 0, 2, 2, 3, 1, 1, 0, 0, 2, 3, 3, 2, 3, 0, 1, 3, 0, 2, 2, 3, 2, 3, 2, 3, 3, 2, 2, 1, 1, 0, 3, 3, 3, 0, 2, 1, 3, 3, 2, 0, 2, 2, 2, 3, 1, 2, 3, 0, 1, 2, 3, 3, 1, 0, 1, 0, 2, 1, 3, 2, 1, 2, 1, 2, 3, 0, 2, 1, 1, 2, 2, 1, 1, 2, 0, 1, 0, 2, 0, 2, 1, 0, 1, 3, 0, 3, 1, 3, 1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 0, 2, 1, 3, 3, 0, 0, 3, 1, 1, 0, 2, 1, 1, 3, 1, 2, 0, 2, 0, 2, 2, 0, 0, 3, 0, 1, 0, 3, 1, 1, 0, 2, 3, 2, 3, 0, 0, 0, 2, 3, 2, 3, 2, 1, 2, 1, 1, 0, 3, 2, 1, 3, 2, 0, 1, 3, 2, 3, 1, 3, 2, 2, 1, 1, 0, 1, 3, 1, 0, 2, 3, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [2, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 2, 0, 1, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 1, 2, 2, 2, 0, 1, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 0, 2, 0, 2, 1, 1, 0, 2, 0, 1, 0, 2, 1], [1, 0, 2, 1, 0, 0, 1, 0, 2, 2, 1, 1, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 1, 0, 0, 2, 0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 0, 0, 1, 0, 2, 1, 2], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 84, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(mod(int(3.0),divInt(( abs(i2) - ( int(1.0) + int(2.0) ) ),( ( in2 * ( int(8.0) - mod(int(5.0),i2) ) ) + min(( int(3.0) + ( ( ( ( i0 - max(max(res0, mod(max(i0, in1),int(3.0))), ( in0 + in2 )) ) * int(8.0) ) * min(max(min(in2, i0), int(0.0)), in0) ) - ( ( min(min(divInt(in1,int(6.0)), min(divInt(int(0.0),mod(i2,abs(abs(i1)))), mod(divInt(mod(divInt(( int(1.0) - in2 ),int(4.0)),i0),min(res0, int(3.0))),res0))), abs(res0)) + i2 ) * i2 ) ) ), int(8.0)) ))),mod(i1,( divInt(i0,int(5.0)) + min(max(res0, abs(min(mod(( in1 - in1 ),max(( ( max(abs(i0), ( divInt(max(int(3.0), int(0.0)),i0) * i1 )) * divInt(min(min(( min(in1, int(4.0)) + abs(i2) ), ( mod(max(mod(min(mod(min(abs(( mod(int(5.0),int(6.0)) * in1 )), min(min(max(res0, ( int(1.0) * abs(abs(( in1 * ( ( ( abs(int(7.0)) - ( min(i1, int(1.0)) + divInt(max(max(int(5.0), in0), int(1.0)),i0) ) ) + ( int(9.0) * abs(mod(int(7.0),mod(int(9.0),mod(min(in0, ( int(3.0) + int(0.0) )),( ( int(9.0) + int(0.0) ) + divInt(in0,int(5.0)) ))))) ) ) * in2 ) ))) )), divInt(in1,( int(1.0) * res0 ))), int(4.0))),abs(i1)), max(int(5.0), abs(int(1.0)))),abs(max(int(4.0), mod(i1,mod(res0,res0))))), int(2.0)),divInt(i0,( int(7.0) * min(abs(i0), in2) ))) - max(int(3.0), int(6.0)) )), i1),( int(7.0) * int(5.0) )) ) - min(int(6.0), ( res0 - mod(in0,( ( i1 + res0 ) + min(i0, int(7.0)) )) )) ), in0)), abs(int(4.0))))), int(0.0)) ))) \\ge in1\\ni0 -= mod(min(( abs(i0) + i0 ), i1),mod(max(( max(divInt(int(1.0),divInt(int(5.0),int(3.0))), res0) * min(divInt(int(6.0),abs(divInt(i0,int(8.0)))), min(mod(max(int(1.0), min(( mod(int(3.0),int(2.0)) - in1 ), int(1.0))),abs(int(4.0))), in1)) ), ( max(in2, int(3.0)) * int(7.0) )),i2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 61, 61, 1, 1, 0, 1, 1, 0, 0, 0, 68, 1, 273, 81, 64, 43, 39]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [1, 0], [1, 1], [7, 5], [2], [0, 1, 0, 2], [0, 0], [1, 0, 0, 0, 0, 0, 0], [0], [2, 3, 0, 3, 0, 0], [], [], [4, 3, 5, 1, 5, 3, 4, 1, 1, 5, 1, 0], [1], [0, 3, 0, 2, 2, 3, 2, 3, 3, 1, 3, 0, 1, 0, 2, 2, 0, 0, 3, 2, 0, 0, 0, 3, 0, 0], [0, 0, 1, 1, 0, 0], [1, 0, 2, 2, 1, 0, 2], [1, 2, 1, 2, 2], [0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 == max(in0, ( ( min(divInt(abs(abs(int(7.0))),max(in2, int(5.0))), i1) - divInt(( in2 * in0 ),min(( in1 - i1 ), i1)) ) * abs(in2) )):{:\\ni1 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not ( b1 and ( b0 and b2 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 1, 4, 2, 7, 1, 6, 0, 0, 12, 1, 26, 6, 7, 5, 2]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 7], [4], [1], [], [1], [0], [], [], [], [4, 6, 3, 1, 0], [], [2, 3, 0, 1, 0, 2, 3, 2, 0, 0, 0, 1], [1, 1, 1], [1, 1], [], [0, 1, 1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(max(in1, int(8.0)),res0) \\le mod(max(mod(in0,i1), i0),int(7.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 12, 3, 2, 0, 3]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 2, 2, 2, 2, 1, 1, 2, 0], [1, 0, 1, 0, 0], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 0, 3, 5, 1, 2, 8, 4, 5, 8, 2, 3, 3, 0, 3, 8, 3, 2, 3, 3, 6, 9, 8, 4, 2, 3, 4, 3, 6, 8, 4, 5, 4, 9, 2, 7, 3, 0, 5, 7, 7], [0, 1, 0, 1, 3, 0, 1], [0], [0, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 1, 2, 2, 2], [0], [0, 1, 0], [0, 2, 1, 1, 4, 0, 1, 0, 4, 3, 5, 5, 0, 3, 5, 1, 3, 5, 3, 4, 6, 6, 2, 1, 5, 3, 0, 1, 4, 2, 2, 5, 2, 2, 6, 5, 2, 1, 2, 6, 2, 4, 6, 6, 4, 2, 2, 0, 0, 6, 3, 5, 1, 4, 0, 0, 6, 5], [0, 0, 0, 1], [1, 1, 2, 3, 3, 3, 2, 0, 1, 1, 1, 2, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 1, 3, 2, 1, 3, 0, 3, 1, 2, 1, 0, 3, 2, 1, 2, 2, 3, 0, 3, 0, 1, 2, 0, 2, 1, 0, 3, 0, 2, 3, 3, 3, 3, 3, 1, 2, 2, 0, 3, 3, 2, 1, 2, 0, 3, 0, 3, 1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 1, 3, 0, 2, 1, 2, 2, 2, 3, 0, 0, 1, 2, 0, 2, 0, 1, 0, 1, 1, 0, 2, 3, 0, 0, 1, 0, 3, 3, 0, 1, 2, 0, 0, 3, 2, 3, 0, 0, 3, 2, 2, 0, 0, 2, 3, 2, 1, 2, 3, 0, 1, 3, 0, 0, 2, 3, 2, 0, 2, 3, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 1, 0, 0, 3, 3, 2, 2, 1, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 3, 2, 0, 1, 2, 2, 3, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [2, 2, 1, 2, 1, 1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 0, 0, 2, 2, 2, 2], [1, 0, 2, 2, 1, 2, 1, 1, 2, 0, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(1.0) \\l int(6.0)\\ni0 = mod(abs(abs(max(mod(i2,int(0.0)), int(3.0)))),int(5.0))\\nloopBreak% = 0\\nwhile ( divInt(i1,i1) \\g in1 and abs(i0) \\l i1 ):{:\\nif max(int(1.0), i0) \\g in1:{:\\nloopBreak% = 0\\nwhile ( not True or not not in0 \\ge int(2.0) ):{:\\nif not max(( int(8.0) - abs(in2) ), max(int(4.0), ( int(5.0) + in2 ))) \\l abs(divInt(int(8.0),mod(mod(min(i0, max(in0, int(2.0))),divInt(in2,divInt(int(3.0),i1))),max(in0, mod(max(max(max(min(min(int(3.0), mod(( in2 * max(min(( int(0.0) * mod(in0,min(in1, abs(int(3.0)))) ), res0), divInt(( res0 - ( int(8.0) * mod(mod(int(3.0),int(2.0)),abs(i2)) ) ),divInt(int(3.0),( ( divInt(max(i1, in2),int(3.0)) - divInt(in0,( i0 - int(6.0) )) ) * i1 )))) ),int(9.0))), int(8.0)), in1), mod(abs(i2),i2)), int(4.0)),in2))))):{:\\ni2 = abs(max(i2, int(2.0)))\\n:}else:{:\\nres0 = divInt(in2,i2)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif min(mod(max(i1, i2),min(( ( res0 + i2 ) * mod(max(( int(3.0) * ( min(in1, int(4.0)) - max(res0, res0) ) ), mod(max(divInt(in1,divInt(max(( i2 + int(3.0) ), i2),mod(mod(int(6.0),( i0 - int(8.0) )),int(4.0)))), i0),res0)),min(max(( ( int(5.0) + in0 ) + int(4.0) ), abs(int(9.0))), min(int(2.0), ( ( in2 + min(int(7.0), ( i1 + abs(int(3.0)) )) ) + in1 )))) ), abs(abs(( i0 - int(0.0) ))))), mod(( abs(i0) - res0 ),int(5.0))) \\g int(7.0):{:\\nin2 -= int(7.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 42, 42, 7, 1, 2, 14, 7, 7, 1, 3, 58, 4, 188, 49, 43, 23, 27]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 1], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 9, 0, 8, 8, 4, 2, 7, 1, 6, 5, 6, 5, 7, 6, 5, 3, 1, 4, 5, 1, 2, 5, 3, 8, 3, 7, 3, 2, 8, 2, 0, 3, 8], [5, 0, 5, 5, 3, 3], [2, 0, 2, 1, 2, 1, 1], [0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [1, 0, 2, 2, 2, 1, 3, 3, 0], [0, 0], [1, 1], [5, 3, 1, 4, 2, 0, 3, 2, 6, 4, 4, 2, 0, 6, 6, 4, 1, 0, 0, 3, 0, 4, 3, 1, 1, 3], [0], [2, 3, 2, 2, 2, 1, 1, 2, 1, 1, 0, 2, 2, 1, 0, 1, 0, 3, 1, 1, 1, 2, 3, 0, 1, 1, 3, 0, 1, 2, 2, 1, 2, 1, 2, 2, 2, 0, 1, 1, 2, 3, 0, 0, 3, 1, 2, 2, 1, 3, 2, 3, 3, 2, 2, 0, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 1, 2, 0, 0, 1, 1, 3, 1, 0, 3, 3, 2, 3, 2, 3, 0, 0, 3, 0, 1, 0, 0, 3, 1, 2, 0, 0, 2, 0, 2, 2, 2, 1, 0, 1, 2, 2, 3, 2, 0, 0, 2, 1, 3, 2, 1, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 1, 2, 0, 1, 2], [0, 0, 2, 1, 1, 2, 0, 1, 0, 2, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nif b0:{:\\nif divInt(abs(divInt(( divInt(int(7.0),int(1.0)) + ( int(9.0) + int(0.0) ) ),in2)),( ( int(8.0) * in0 ) - int(8.0) )) != i1:{:\\nb2 = abs(int(4.0)) \\l int(2.0)\\n:}else:{:\\nb1 = not not not int(7.0) != ( abs(in1) - int(1.0) )\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nb2 = ( int(6.0) != abs(i2) and int(5.0) \\ge ( divInt(int(6.0),mod(int(5.0),( mod(mod(i0,int(7.0)),int(6.0)) * ( abs(in0) + i2 ) ))) - min(int(5.0), ( mod(int(3.0),min(mod(min(min(( divInt(res0,max(mod(int(1.0),int(4.0)), int(5.0))) + int(1.0) ), abs(( int(2.0) * in1 ))), int(5.0)),mod(in1,i2)), int(3.0))) - int(8.0) )) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( max(int(3.0), i0) \\ge max(min(( min(divInt(max(res0, res0),abs(in1)), int(7.0)) - i1 ), i0), min(int(3.0), divInt(i0,in0))) or b1 )\\n:}else:{:\\ni0 = divInt(in1,divInt(mod(divInt(int(2.0),in0),int(8.0)),( mod(max(mod(i1,i1), ( int(2.0) + abs(divInt(int(0.0),int(3.0))) )),in0) - int(8.0) )))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 35, 35, 6, 7, 2, 15, 6, 9, 2, 2, 26, 1, 115, 35, 20, 14, 21]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 2, 1, 0, 2, 2, 1, 2, 1, 1], [1, 0, 1, 0], [1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 4, 7, 4, 2, 3, 2, 6, 1, 6, 2, 1], [5, 3], [0, 2, 0, 1, 2, 0, 0], [], [0, 0, 1, 1, 0, 0, 0], [0, 0], [0, 1, 0, 0, 0], [0], [0, 0], [0, 6, 2, 0, 0, 3, 1, 3, 5, 4, 4, 2, 5, 1, 1, 2, 3, 2, 3, 4, 6, 5, 4], [0, 1, 0], [1, 3, 0, 0, 2, 3, 1, 1, 3, 1, 0, 1, 2, 3, 3, 3, 3, 0, 2, 3, 1, 0, 2, 2, 3, 1, 0, 0, 2, 1, 2, 2, 3, 0, 0, 0, 0, 0, 2, 0, 2, 2, 3, 0, 0, 3, 0, 3, 3, 1, 3, 3, 2, 3, 0, 3, 3, 1, 3, 3, 0, 0, 3, 2, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [2, 2, 0, 0, 1, 0, 1, 0, 2, 1, 2, 0, 2, 2, 0, 1, 0, 2, 1, 2, 2, 0], [2, 1, 2, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(2.0)\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = True\\nb0 = abs(res0) != i2\\nif mod(abs(int(5.0)),int(4.0)) \\ge min(int(7.0), i0):{:\\nloopBreak% = 0\\nwhile b1:{:\\ni0 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif b2:{:\\nin0 = mod(min(max(min(max(i1, ( min(int(2.0), in0) - ( mod(abs(int(3.0)),in2) * in1 ) )), divInt(int(2.0),divInt(( max(in1, i2) + in2 ),i1))), i1), divInt(i2,( divInt(abs(in0),i2) - min(in0, abs(abs(int(6.0)))) ))),min(max(( min(in1, abs(max(int(1.0), abs(abs(res0))))) - in2 ), min(mod(int(6.0),in1), int(2.0))), int(1.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 13, 13, 2, 7, 0, 7, 2, 5, 1, 2, 23, 3, 68, 13, 22, 6, 8]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [0, 1, 0], [], [], [], [2, 0, 1], [], [0, 0], [], [0, 1], [0], [], [2, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\ni2 = res0\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 3, 0, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 3, 2, 6, 6, 9, 1, 8, 1, 4, 5, 3], [1], [1, 0, 1], [], [0, 1], [0], [0], [], [], [3, 0, 3, 2, 3, 5, 0, 5, 6, 3, 4, 3, 0, 6, 6, 0, 3, 3, 6, 2], [0], [2, 2, 0, 0, 2, 2, 2, 1, 0, 3, 0, 2, 0, 0, 2, 1, 3, 3, 0, 2, 2, 2, 3, 0, 3, 0, 3, 2, 1, 2, 3, 1, 3, 0, 1, 0, 2, 1, 2, 0, 3, 3, 1, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 0, 3, 2, 1, 0, 3, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 2, 2, 2, 2, 1, 1, 0, 1, 2], [1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1, 2], [1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\nb1 = ( mod(in0,i0) - mod(( ( int(6.0) - in0 ) + max(i2, ( in0 - in2 )) ),divInt(int(5.0),min(max(i0, ( ( ( abs(in2) + abs(res0) ) + abs(( int(3.0) - ( abs(int(2.0)) + max(in0, int(6.0)) ) )) ) + in1 )), mod(int(6.0),( in0 * max(min(int(9.0), i0), ( ( divInt(( int(1.0) - int(8.0) ),res0) - ( ( ( res0 - int(1.0) ) - i0 ) - max(( int(4.0) - in0 ), abs(int(5.0))) ) ) * in0 )) ))))) ) \\g int(3.0)\\nres0 = i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 13, 13, 1, 3, 0, 2, 1, 1, 0, 0, 20, 1, 66, 22, 12, 17, 5]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 1, 2, 1, 2, 1], [1, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 5, 5, 7, 5, 1, 1, 2, 9, 2, 2, 7, 3, 1, 3, 7, 4, 4, 3, 5, 1, 3, 1, 2, 0, 6, 2, 6, 7, 6, 9, 7, 4, 8, 8, 5, 9, 9, 2, 8, 5], [2, 1, 0, 5, 4], [0, 2, 1], [1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [3, 3, 0, 3, 0, 2, 1, 2, 2], [1], [], [0, 5, 3, 0, 3, 3, 3, 2, 1, 2, 2, 6, 0, 4, 1, 3, 6, 5, 6, 5, 4, 5, 5, 4, 4, 0, 5, 5, 0, 4, 4, 4, 4, 4, 4, 5, 2, 0, 1, 4, 3, 2, 2, 0, 4], [1, 0, 0], [1, 1, 3, 2, 2, 3, 3, 3, 3, 2, 0, 0, 2, 1, 0, 0, 2, 1, 1, 3, 1, 3, 3, 2, 3, 2, 1, 3, 2, 0, 3, 2, 0, 2, 2, 2, 1, 3, 2, 0, 3, 1, 1, 3, 1, 3, 0, 3, 3, 1, 0, 2, 0, 0, 2, 1, 2, 1, 1, 0, 1, 1, 3, 2, 0, 3, 3, 2, 2, 2, 2, 2, 0, 3, 0, 0, 2, 1, 2, 3, 1, 2, 0, 1, 2, 2, 2, 1, 3, 1, 0, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0, 3, 3, 2, 1, 2, 2, 3, 0, 3, 1, 0, 3, 2, 3, 1, 3, 0, 1, 3, 3, 3, 2, 0, 0, 1, 1, 3, 0, 2, 0, 1, 0, 3, 0, 3, 0, 0, 3, 0, 2, 1, 2, 1, 1, 3, 2, 2, 3, 1, 3, 0, 2, 3, 2, 3, 0, 2, 1, 2, 0, 1, 1, 0, 1, 3, 0, 0, 3, 3, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 2, 0, 2, 0, 0, 1, 0, 0, 1, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 0, 0, 1, 2, 0, 2, 0], [2, 1, 2, 2, 2, 0, 1, 2, 2, 1, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 2, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( b0 or ( b2 or not False ) ) and not int(7.0) == int(2.0) ):{:\\ni0 *= min(mod(divInt(abs(min(abs(min(divInt(in2,in0), ( int(5.0) - i0 ))), in0)),( int(5.0) * int(7.0) )),min(int(5.0), max(min(divInt(min(( int(1.0) * max(( in0 * abs(divInt(in0,divInt(divInt(( int(1.0) + min(divInt(i2,abs(int(2.0))), int(9.0)) ),min(int(2.0), min(i1, abs(abs(int(2.0)))))),i2))) ), divInt(i2,res0)) ), ( int(7.0) - ( int(3.0) * int(1.0) ) )),i0), int(3.0)), int(7.0)))), abs(( in1 * abs(abs(( ( mod(divInt(divInt(i1,abs(in0)),res0),( int(4.0) - ( min(int(4.0), ( in2 - int(3.0) )) * ( ( mod(int(5.0),abs(int(1.0))) + res0 ) * mod(( divInt(in2,in1) + int(3.0) ),int(1.0)) ) ) )) + int(2.0) ) + in2 ))) )))\\nloopBreak% = 0\\nwhile in2 \\g min(min(divInt(int(0.0),mod(divInt(max(in1, abs(int(6.0))),in1),min(divInt(abs(int(2.0)),abs(i0)), int(6.0)))), abs(min(min(( in2 - in2 ), int(7.0)), int(6.0)))), abs(i0)):{:\\nb1 = ( in1 * int(9.0) ) \\l in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(in1, abs(in1)) != in1:{:\\nin1 = max(in2, divInt(int(7.0),mod(int(4.0),int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not max(divInt(( min(int(8.0), min(i2, ( max(divInt(abs(i0),( int(5.0) - mod(i1,int(9.0)) )), int(9.0)) * in1 ))) + int(2.0) ),min(in0, i2)), abs(min(i2, int(8.0)))) \\le i0:{:\\nin1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 42, 42, 5, 3, 3, 14, 5, 9, 1, 0, 45, 3, 174, 45, 45, 22, 24]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1, 1, 0, 0, 1], [8, 4, 3, 4, 4, 3], [], [], [], [], [], [], [], [], [5, 2, 6, 2, 6, 3, 0], [0, 1], [3, 1, 2, 3, 0, 2, 3, 0, 0, 2, 2, 0, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1], [1, 1, 2], [2, 0, 2, 1], [0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = max(int(8.0), ( max(i2, divInt(abs(res0),i2)) * ( ( res0 + int(4.0) ) * mod(int(3.0),in0) ) ))\\ni0 -= int(443.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 17, 5, 3, 4, 2]}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1], [2, 2, 1, 0, 0, 0, 0], [1, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 8, 1, 0, 3, 1, 6, 0, 7, 5, 6, 5, 7, 6, 1, 5, 6, 8, 1, 7, 3, 9, 0, 7, 2, 4, 8, 5, 8, 9, 9, 0, 9, 4, 6, 4, 7, 1, 0, 3], [2, 3, 4, 2], [0, 0], [], [1, 0, 1, 1, 1], [0, 0, 0, 0], [2], [], [], [3, 1, 3, 4, 6, 5, 0, 2, 4, 2, 6, 1, 0, 1, 6, 5, 2, 6, 4, 2, 6, 3, 5, 3, 2, 3, 5, 0, 4, 5, 2, 6, 5, 4, 2, 4, 0, 1, 6, 5, 6, 5, 6, 4, 5, 3, 4, 4, 0, 2], [1, 0, 0], [2, 2, 0, 1, 0, 2, 1, 3, 0, 3, 3, 1, 2, 2, 2, 3, 2, 3, 0, 0, 0, 2, 1, 1, 3, 1, 3, 2, 2, 2, 3, 3, 2, 0, 1, 0, 2, 2, 2, 1, 2, 0, 3, 0, 1, 3, 1, 3, 1, 3, 2, 0, 0, 1, 2, 3, 3, 3, 2, 3, 0, 2, 3, 3, 2, 2, 1, 1, 0, 1, 2, 0, 3, 3, 0, 2, 2, 0, 1, 0, 0, 1, 1, 1, 3, 3, 0, 1, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 2, 2, 2, 1, 3, 0, 2, 3, 3, 2, 2, 2, 0, 3, 1, 0, 3, 2, 0, 2, 2, 1, 1, 0, 1, 3, 0, 3, 2, 0, 1, 0, 0, 0, 3, 2, 3, 0, 3, 0, 2, 1, 0, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 0, 0, 2, 3, 2, 1, 3, 0, 2, 0, 0, 1, 2, 1, 1, 1, 3, 2, 3, 1, 0, 2, 0, 2, 1, 3, 3, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 0, 2, 2, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 1, 1, 0, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 0, 2, 1], [2, 0, 0, 0, 2, 2, 0, 1, 0, 1, 2, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(mod(in0,int(6.0)),i1) == ( int(8.0) * min(in0, abs(abs(int(1.0)))) ):{:\\nloopBreak% = 0\\nwhile not mod(( mod(max(divInt(min(in1, res0),in2), divInt(int(0.0),int(3.0))),abs(int(1.0))) + min(( ( ( max(max(( i0 + int(6.0) ), i2), ( divInt(( int(0.0) + ( in1 * abs(i2) ) ),int(7.0)) * min(int(5.0), min(int(6.0), abs(( res0 + i1 )))) )) - int(5.0) ) + ( abs(min(abs(divInt(max(i0, divInt(abs(min(( ( int(7.0) - int(6.0) ) * i1 ), int(1.0))),mod(res0,abs(abs(in2))))),divInt(divInt(i2,int(5.0)),res0))), in1)) + int(6.0) ) ) - int(8.0) ), int(1.0)) ),min(min(i2, int(7.0)), min(abs(min(res0, mod(in0,in2))), in0))) \\ge min(max(divInt(( divInt(int(3.0),max(i2, divInt(min(abs(( ( divInt(in0,min(int(9.0), in2)) - max(( i0 - ( divInt(int(0.0),int(7.0)) * in1 ) ), int(2.0)) ) - max(in2, max(( i2 - int(4.0) ), res0)) )), in2),in1))) - abs(( abs(i2) - abs(in1) )) ),( int(8.0) - i0 )), abs(int(5.0))), int(8.0)):{:\\ni1 += res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = int(9.0)\\nb0 = max(mod(mod(max(int(9.0), res0),in2),( abs(( int(0.0) + abs(res0) )) - divInt(in1,in2) )), int(9.0)) \\le divInt(int(4.0),int(6.0))\\nb0 = int(4.0) == max(mod(min(int(7.0), in0),divInt(in1,( int(1.0) - abs(max(in1, i0)) ))), int(0.0))\\ni2 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 40, 40, 4, 2, 0, 5, 4, 1, 0, 0, 50, 3, 182, 48, 47, 25, 24]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [6, 8, 3], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(683.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 9, 6, 1, 0, 0, 1, 9, 3, 4, 1, 7, 3, 5, 1, 0, 8, 0, 2, 2, 1, 5, 7, 3, 0, 1, 7, 3, 5, 6, 7, 5, 1, 0, 1, 0, 0, 9, 6, 1, 6, 9, 2, 1, 3, 0, 5, 0, 2, 3, 2, 7, 0, 6, 6, 6, 7, 5, 9, 6, 8], [3, 1], [0, 1], [1], [0, 1, 0, 1, 0], [0, 0], [3, 2, 1], [0], [], [3, 3, 0, 5, 1, 0, 3, 5, 5, 3, 6, 3, 4, 4, 4, 6, 1, 5, 2, 1, 3, 3, 5, 3, 4, 1, 3, 1, 0, 0, 3, 4, 0, 5, 1, 5, 4, 0, 1, 3, 5, 0, 6, 3, 2, 0, 5, 2, 2, 0, 6, 2, 0, 2, 2, 2, 5, 5, 1, 4, 5, 3, 2, 2, 3, 4, 1, 0, 1], [], [0, 2, 1, 1, 0, 3, 2, 0, 2, 3, 2, 2, 0, 0, 2, 3, 3, 0, 3, 3, 2, 0, 2, 2, 2, 0, 3, 0, 1, 0, 3, 1, 0, 3, 2, 2, 1, 3, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 1, 0, 2, 3, 3, 2, 0, 0, 3, 3, 3, 0, 2, 2, 0, 2, 2, 1, 1, 3, 3, 2, 3, 2, 3, 2, 3, 1, 1, 0, 3, 1, 3, 1, 0, 2, 0, 3, 1, 3, 1, 3, 2, 1, 2, 0, 1, 0, 1, 3, 2, 2, 1, 0, 1, 3, 0, 0, 0, 2, 3, 1, 2, 3, 3, 3, 3, 2, 3, 3, 0, 3, 0, 1, 0, 0, 3, 2, 3, 0, 3, 2, 3, 1, 3, 3, 2, 2, 3, 0, 3, 0, 2, 0, 0, 3, 3, 2, 1, 0, 1, 2, 1, 2, 1, 0, 1, 1, 0, 1, 3, 3, 3, 2, 1, 0, 3, 2, 3, 2, 1, 0, 3, 1, 2, 1, 3, 3, 1, 2, 3, 0, 1, 1, 2, 1, 2, 0, 3, 3, 3, 1, 3, 0, 1, 2, 0, 2, 1, 1, 2, 0, 1, 1, 3, 1, 3, 0, 0, 3, 2, 0, 3, 2, 3, 1, 0, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 2, 3, 0, 3, 3, 2, 0, 1, 2, 2, 3, 2, 3, 3, 2, 0, 2, 3, 2, 0, 1, 2, 2, 3, 3, 1, 2, 0, 1, 3, 1, 0, 1, 3, 3, 1, 0, 1, 1, 0, 0, 2, 3, 1, 1, 2, 0, 3, 0, 0, 3, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 0, 1, 0, 1, 2, 0, 1, 1, 0, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 2, 2, 0, 2, 0, 2, 1, 2, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( in0 \\ge ( int(6.0) + int(4.0) ) or not in0 \\g max(( i0 - ( min(( ( in2 - i1 ) + ( max(max(i0, min(max(( in0 - mod(( ( in2 + abs(in2) ) + int(9.0) ),in0) ), min(int(6.0), res0)), min(divInt(mod(int(1.0),min(( ( ( int(0.0) - in0 ) * in1 ) * in1 ), in1)),res0), i1))), in2) * abs(mod(( i2 * int(0.0) ),i1)) ) ), mod(max(abs(divInt(in0,in0)), min(abs(min(in2, ( ( in0 + divInt(( int(1.0) - int(9.0) ),abs(min(mod(min(divInt(min(( abs(int(3.0)) + int(4.0) ), in1),abs(int(1.0))), min(int(7.0), i1)),mod(in0,max(int(3.0), min(int(5.0), max(divInt(int(1.0),( i1 * int(0.0) )), i0))))), int(8.0)))) ) * abs(( divInt(int(0.0),i0) - int(2.0) )) ))), min(in0, in1))),i0)) + ( max(int(2.0), divInt(max(min(max(abs(( abs(min(in2, max(i1, int(1.0)))) - in2 )), in1), abs(mod(abs(i0),min(mod(abs(int(5.0)),min(max(divInt(( min(i1, min(in0, divInt(in2,i0))) - abs(abs(mod(int(7.0),res0))) ),int(3.0)), ( int(0.0) * ( int(1.0) - in0 ) )), int(7.0))), int(3.0))))), i2),int(5.0))) - min(min(min(mod(int(6.0),i0), min(mod(abs(divInt(int(7.0),in2)),abs(int(5.0))), divInt(int(1.0),max(min(int(0.0), ( max(i2, int(1.0)) - int(0.0) )), ( int(0.0) - ( i2 + min(max(min(int(9.0), max(i0, int(6.0))), ( res0 - ( int(1.0) - int(6.0) ) )), mod(i2,int(9.0))) ) ))))), int(2.0)), min(int(1.0), max(i0, i2))) ) ) ), min(( i2 * max(( min(int(3.0), i2) - abs(int(0.0)) ), max(divInt(max(int(5.0), abs(int(0.0))),min(int(2.0), divInt(abs(in2),abs(min(( in2 * int(3.0) ), ( ( abs(divInt(min(abs(divInt(i1,mod(max(( in1 * int(2.0) ), mod(divInt(abs(min(int(7.0), ( in2 * int(0.0) ))),min(int(6.0), in0)),int(6.0))),max(min(int(6.0), i2), int(7.0))))), int(5.0)),i2)) * in0 ) - mod(min(int(9.0), int(6.0)),( in1 * abs(i1) )) )))))), i0)) ), max(int(8.0), i1))) )\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 62, 62, 2, 2, 1, 5, 2, 3, 1, 0, 69, 0, 283, 68, 84, 37, 31]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 2, 1, 1, 0, 2, 0, 0, 2, 2, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 2, 7, 8, 2, 3, 6, 4, 8, 7, 2, 1, 8, 4, 7, 1, 2, 9, 3, 4, 3, 7, 5, 9, 8, 3], [2, 4, 5, 4, 5, 5], [2, 0, 1, 0, 0, 1, 0, 0, 0, 2], [1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3, 0, 0, 1, 0, 1, 0], [1, 0], [0, 1, 0], [3, 0, 5, 3, 6, 2, 1, 5, 4, 6, 6, 3, 4, 4, 3, 3, 3, 4, 5, 4, 2, 3, 1, 2], [0], [3, 2, 3, 3, 0, 2, 0, 0, 2, 2, 2, 0, 0, 3, 3, 2, 0, 1, 0, 3, 0, 1, 0, 3, 3, 0, 2, 3, 2, 0, 2, 2, 1, 0, 1, 3, 1, 0, 1, 0, 1, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 1, 1, 2, 2, 1, 1, 0, 1, 2, 1, 1, 3, 1, 1, 1, 1, 0, 0, 0, 3, 1, 2, 1, 2, 3, 1, 1, 3, 0, 1, 0, 1, 2, 3, 0, 3, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1, 1, 2, 2, 1], [1, 1, 2, 1, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( b2 or b0 ):{:\\nloopBreak% = 0\\nwhile min(( max(max(in0, divInt(i0,in2)), ( divInt(mod(in0,res0),max(max(divInt(i2,int(5.0)), i1), abs(in2))) - int(7.0) )) - in1 ), max(min(res0, divInt(max(( res0 * ( ( int(2.0) - in0 ) + int(7.0) ) ), abs(int(8.0))),in1)), int(2.0))) == in1:{:\\nb1 = int(3.0) \\le abs(( divInt(divInt(( ( ( divInt(min(mod(min(int(6.0), int(4.0)),( ( int(8.0) + int(7.0) ) + in0 )), int(2.0)),divInt(int(1.0),int(8.0))) + abs(int(4.0)) ) - int(7.0) ) - int(1.0) ),int(2.0)),in0) + in0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = in1 != max(int(9.0), ( int(3.0) * ( max(int(4.0), int(3.0)) - abs(in2) ) ))\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(7.0) \\le in1:{:\\nb1 = b0\\nb0 = int(5.0) != ( abs(i2) + max(int(9.0), int(8.0)) )\\nif True:{:\\nif int(3.0) != in0:{:\\nb0 = b2\\n:}\\n:}else:{:\\ni1 = i2\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 27, 27, 6, 10, 1, 13, 6, 7, 2, 3, 24, 1, 93, 24, 19, 14, 10]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [5, 5, 6], [], [], [], [], [], [], [], [], [0], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(556.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1], [4, 5, 1, 6, 6], [], [], [], [], [], [], [], [], [3, 0, 6, 4, 1, 0, 0, 3, 1, 3, 5, 5], [1], [3, 2, 2, 3, 2, 3, 3, 0, 1, 3, 0, 2, 3, 0, 2, 3, 3, 3, 0, 3, 3, 2, 1, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 3, 1, 3, 3, 3, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1], [2, 1, 0, 1, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2], [0, 0, 0, 0, 1, 2], [0, 1, 0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += abs(( divInt(max(( min(max(i0, int(4.0)), abs(res0)) + ( abs(in1) + ( max(abs(max(i1, min(abs(mod(int(5.0),( i0 + i0 ))), int(1.0)))), divInt(in0,i1)) - in0 ) ) ), in2),mod(abs(int(6.0)),abs(abs(abs(int(6.0)))))) * in2 ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 40, 9, 15, 6, 4]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [0, 0], [], [], [4], [2, 0, 1, 2], [1], [0, 1, 0, 0, 0], [0], [3, 0, 1, 0], [1], [], [5, 2], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( in2 \\le i2 or b2 ):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 1, 4, 1, 5, 1, 4, 1, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 2, 0], [0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 7, 7, 4, 6, 4, 5, 6, 7, 1, 8, 0, 9, 5, 2], [1, 1, 2, 3, 4, 1, 1], [1, 0, 0, 1, 2], [0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 1], [1, 1, 0], [0, 1, 0], [5, 0, 4, 0, 4, 6, 6, 2, 2, 2, 1, 3, 3, 0, 1, 2, 5], [0, 0], [3, 3, 0, 2, 1, 0, 2, 1, 2, 0, 3, 0, 2, 1, 3, 2, 3, 1, 3, 1, 0, 1, 3, 0, 0, 3, 3, 3, 0, 0, 3, 0, 3, 3, 1, 1, 0, 3, 0, 3, 0, 1, 3, 2, 1, 0, 1, 1, 0, 1, 1, 3, 2, 3, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1], [2, 1, 0, 2, 0, 1, 2, 2, 1, 2, 0, 1, 2, 2, 0, 1, 2, 2], [2, 1], [1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(max(in2, mod(int(3.0),i0))) \\g mod(int(6.0),( in1 * min(i0, mod(int(3.0),abs(( min(int(7.0), max(int(7.0), in1)) - int(4.0) )))) )):{:\\nloopBreak% = 0\\nwhile ( abs(res0) \\g res0 and False ):{:\\nloopBreak% = 0\\nwhile abs(max(abs(i2), i2)) == min(i2, max(abs(int(6.0)), int(4.0))):{:\\nb1 = i1 \\ge abs(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = min(in0, int(5.0)) \\le max(divInt(int(6.0),i0), int(7.0))\\nif False:{:\\nb0 = b1\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\ni1 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 = in2\\nif int(8.0) \\g int(0.0):{:\\nb2 = abs(divInt(abs(int(9.0)),int(5.0))) \\g int(2.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 17, 17, 7, 5, 1, 12, 7, 5, 3, 3, 17, 2, 57, 7, 18, 2, 5]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1], [7, 9, 1, 1, 8], [], [], [], [], [], [], [], [], [6], [1], [2, 1, 3, 1, 3, 1, 3, 1, 1], [1], [0, 0, 0], [2], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= divInt(int(7.0),min(int(9.0), min(int(1.0), min(int(1.0), int(8.0)))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 9, 1, 3, 1, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 0, 2, 0, 0, 1, 1, 1, 0], [1, 1, 0], [0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 1, 1, 3, 2, 5, 2, 9, 5, 4, 0, 6, 6, 7, 7, 4, 9, 3, 6, 3, 3, 0, 7, 4, 4, 0, 7, 4, 5, 7, 3, 6, 0, 7, 9, 7, 0, 6, 4, 8, 7, 5, 0, 0, 8, 2, 5, 9, 0, 4, 0, 4, 9, 4, 3, 1, 5, 0, 8, 5, 6, 3, 1, 1, 9, 7, 1, 7, 5, 9, 6, 3, 8, 9, 8, 7, 4, 4, 8, 6, 8, 0, 4, 2, 8, 4, 2, 0, 3, 2, 6, 4, 2, 9, 3, 8, 0, 6, 6, 8, 1, 3, 5, 2, 7, 6, 7, 9, 8, 2, 8, 8, 4, 7, 7, 6, 6], [4, 1, 0, 0, 5], [2, 1, 1, 2, 2], [1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [3, 1, 1, 0, 2, 2], [1, 1], [1], [1, 5, 5, 2, 0, 3, 6, 1, 2, 4, 6, 4, 0, 3, 4, 5, 2, 0, 2, 2, 5, 4, 1, 3, 3, 4, 1, 4, 0, 0, 4, 1, 0, 1, 3, 2, 2, 2, 4, 2, 2, 4, 3, 3, 6, 1, 3, 5, 3, 6, 6, 6, 3, 6, 3, 2, 1, 2, 5, 5, 6, 4, 0, 6, 4, 1, 0, 5, 4, 2, 1, 3, 4, 6, 4, 6, 4, 3, 5, 2, 0, 1, 3, 0, 0, 2, 2, 2, 6, 2, 6, 3, 5, 3, 0, 2, 3, 5, 6, 4, 0, 1, 3, 0, 3, 2, 0, 5, 4, 2, 4, 6, 1, 0, 0, 6, 0, 6, 1, 3, 0, 1, 1, 6, 0, 5, 5, 3, 0], [1, 0, 0], [3, 1, 3, 1, 1, 3, 3, 2, 3, 1, 3, 3, 0, 1, 3, 1, 0, 1, 1, 0, 2, 1, 1, 2, 1, 0, 3, 0, 3, 2, 1, 0, 0, 1, 3, 0, 3, 2, 2, 0, 2, 3, 3, 3, 3, 3, 0, 3, 0, 2, 2, 0, 3, 3, 0, 3, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 3, 3, 1, 3, 0, 3, 1, 2, 2, 2, 1, 2, 2, 2, 0, 2, 1, 3, 0, 2, 3, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1, 2, 1, 3, 0, 1, 3, 3, 2, 3, 3, 2, 2, 0, 3, 2, 2, 1, 0, 3, 0, 1, 2, 0, 1, 2, 2, 3, 1, 2, 0, 2, 2, 3, 0, 3, 3, 3, 1, 2, 2, 2, 0, 0, 2, 1, 2, 0, 2, 0, 0, 1, 1, 0, 0, 3, 1, 2, 2, 2, 0, 0, 0, 3, 3, 0, 1, 0, 2, 2, 0, 1, 1, 3, 1, 3, 1, 0, 2, 0, 2, 0, 2, 0, 3, 2, 1, 3, 1, 0, 0, 2, 2, 3, 0, 2, 3, 3, 0, 3, 2, 0, 3, 2, 0, 0, 1, 1, 1, 2, 1, 2, 2, 1, 0, 1, 0, 2, 3, 1, 1, 2, 2, 1, 2, 2, 1, 1, 3, 0, 1, 1, 0, 3, 3, 0, 2, 0, 1, 2, 1, 3, 2, 1, 2, 1, 3, 3, 0, 2, 1, 0, 1, 0, 1, 3, 1, 0, 3, 0, 0, 2, 0, 2, 2, 1, 0, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 2, 2, 2, 1, 2, 3, 3, 2, 3, 0, 1, 0, 1, 1, 0, 0, 2, 0, 1, 2, 2, 3, 3, 2, 3, 0, 2, 0, 2, 2, 3, 1, 1, 1, 3, 3, 3, 3, 0, 0, 1, 0, 0, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 2, 1, 1, 0, 3, 2, 3, 3, 2, 0, 3, 3, 0, 0, 1, 1, 0, 2, 0, 3, 1, 3, 1, 2, 2, 2, 1, 2, 3, 1, 0, 0, 2, 3, 2, 3, 2, 0, 2, 2, 2, 1, 0, 3, 0, 0, 3, 1, 3, 2, 2, 1, 2, 3, 1, 0, 0, 1, 2, 2, 2, 0, 1, 2, 0, 3, 1, 0, 1, 3, 3, 3, 1, 2, 2, 3, 2, 0, 1, 0, 0, 3, 2, 2, 1, 2, 2, 0, 1, 0, 3, 0, 1, 3, 0, 3, 3, 2, 1, 3, 0, 0, 1, 1, 2, 2, 2, 3, 0, 0, 3, 3, 3, 2, 2, 1, 2, 2, 1, 1, 0, 3, 2, 2, 2, 1, 1, 1, 0, 2, 3, 3, 2, 1, 0, 1, 0, 1, 1, 0, 3, 3, 3, 0, 2, 0, 3, 0, 3, 1, 2, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 2, 0, 1, 3, 2, 1, 1, 3, 2, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 2, 0, 0, 0, 0, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 1, 0, 2, 1, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 1, 2, 0, 1, 2, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 2, 1, 0, 0, 0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 1, 1, 0, 1, 2, 1, 0, 2, 0, 2, 0, 2, 2], [1, 1, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1, 2, 1, 0, 1, 0, 2, 2, 1, 1, 0, 2, 2, 0, 2, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 2, 2, 2, 2, 0, 1, 2, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 132, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( False or min(int(9.0), abs(int(9.0))) \\le int(1.0) ):{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(min(divInt(min(int(1.0), min(abs(i1), int(3.0))),max(int(2.0), in2)), int(5.0)), int(2.0)) \\g in2:{:\\nb1 = not ( int(9.0) - int(5.0) ) \\l ( int(4.0) - i2 )\\n:}else:{:\\ni0 += min(in0, max(( int(0.0) * res0 ), i1))\\n:}\\ni2 = int(6.0)\\nb2 = not max(in1, max(mod(( res0 - mod(min(abs(max(min(max(in1, min(i0, mod(( in0 - abs(min(in1, abs(( in2 * mod(( i2 - ( mod(divInt(( i0 - i2 ),( divInt(i2,min(abs(int(6.0)), min(in2, max(int(7.0), divInt(divInt(( int(7.0) - ( ( divInt(in1,( int(4.0) + min(i1, mod(abs(mod(int(9.0),int(3.0))),( max(min(abs(divInt(( int(6.0) + divInt(int(3.0),min(in0, int(3.0))) ),abs(abs(( min(abs(divInt(divInt(in0,min(mod(mod(int(0.0),in1),abs(i1)), int(7.0))),divInt(in1,int(4.0)))), divInt(mod(min(int(4.0), ( i0 - mod(divInt(max(i0, abs(min(max(int(0.0), ( mod(( in1 * i1 ),( int(7.0) - divInt(i0,mod(i1,in0)) )) + int(4.0) )), int(5.0)))),i2),i2) )),abs(int(7.0))),divInt(divInt(( i2 - in1 ),i2),max(max(i2, int(3.0)), in1)))) + ( mod(in0,int(6.0)) * int(0.0) ) ))))), min(int(7.0), min(int(9.0), in0))), ( res0 * ( i1 - divInt(in0,min(divInt(int(7.0),max(int(0.0), in2)), in0)) ) )) - ( mod(max(res0, ( min(min(res0, abs(mod(res0,min(divInt(in0,res0), int(6.0))))), int(4.0)) + int(8.0) )),mod(int(7.0),( ( int(5.0) * in0 ) * int(0.0) ))) + i2 ) ))) )) * mod(min(int(0.0), int(8.0)),( ( int(2.0) + divInt(divInt(int(5.0),int(9.0)),abs(i1)) ) - int(0.0) )) ) + int(4.0) ) ),i2),min(min(in2, ( in2 - int(0.0) )), mod(int(4.0),min(mod(int(9.0),divInt(int(4.0),min(max(res0, divInt(int(3.0),in1)), int(1.0)))), i0)))))))) * int(5.0) )),min(int(0.0), res0)) - min(in1, i1) ) ),mod(i0,( ( int(8.0) * in2 ) - int(5.0) ))) )))) ),int(6.0)))), ( int(3.0) * ( int(1.0) - ( int(1.0) * divInt(int(9.0),in1) ) ) )), i2)), ( ( divInt(int(7.0),mod(abs(abs(( max(i1, int(1.0)) * in0 ))),int(7.0))) + int(5.0) ) + in1 )),res0) ),( in1 + int(9.0) )), ( ( min(abs(( max(res0, mod(in1,( ( max(int(6.0), int(3.0)) + int(8.0) ) + max(max(max(max(in0, in2), int(9.0)), i2), i0) ))) - mod(i1,divInt(abs(min(min(in0, ( min(int(8.0), ( int(7.0) * int(4.0) )) - i0 )), min(divInt(abs(max(( i0 - min(min(i2, i2), int(4.0)) ), int(8.0))),i2), ( res0 + abs(int(6.0)) )))),min(int(8.0), divInt(( mod(int(0.0),( min(int(4.0), i2) + res0 )) - ( min(divInt(max(mod(in0,mod(( ( int(2.0) + in2 ) + min(in0, i0) ),abs(int(8.0)))), abs(( divInt(int(4.0),( max(int(2.0), i2) * in0 )) - int(0.0) ))),divInt(( ( in2 - int(3.0) ) + mod(res0,min(int(2.0), in1)) ),int(6.0))), min(min(max(int(4.0), divInt(( max(( i0 + int(2.0) ), i1) - in0 ),min(divInt(( int(9.0) + ( ( i0 + int(3.0) ) * in0 ) ),abs(i2)), int(8.0)))), max(i0, abs(min(( int(0.0) - min(in2, in1) ), int(6.0))))), int(6.0))) - ( divInt(divInt(abs(i2),in1),max(max(max(divInt(( int(8.0) + ( mod(int(1.0),int(3.0)) * res0 ) ),min(mod(mod(divInt(int(5.0),int(2.0)),int(7.0)),i1), divInt(max(abs(( int(6.0) * i0 )), int(7.0)),i0))), int(9.0)), int(8.0)), res0)) * max(min(abs(i0), ( res0 * min(i1, abs(int(2.0))) )), ( in0 + i0 )) ) ) ),i1)))) )), int(8.0)) - ( mod(i1,res0) * i0 ) ) + in2 ))) \\l ( in2 - int(8.0) )\\nin0 = min(( int(4.0) - int(7.0) ), abs(mod(int(7.0),abs(int(6.0)))))\\nb2 = int(6.0) != i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 118, 118, 5, 5, 1, 11, 5, 6, 2, 1, 129, 3, 507, 145, 118, 75, 71]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1], [7], [2], [0], [], [1], [0], [], [], [], [0, 3, 5], [0], [1, 0, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(7.0) == i0\\nin0 = in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 0, 0, 1], [1, 1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 2, 4, 2, 8, 5, 0, 5, 5, 7, 3, 3, 2, 9, 6, 5, 3, 1, 1, 3, 6, 3, 9, 0, 5, 5, 8, 2, 3, 0, 6, 1, 3, 7, 7, 8, 2, 1, 1, 0, 4, 4, 1], [5, 4, 1], [1, 1, 0], [0], [0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0], [2, 3, 1, 2, 0], [0], [], [4, 0, 6, 2, 3, 6, 2, 6, 0, 3, 5, 1, 4, 6, 5, 1, 3, 0, 6, 2, 3, 2, 2, 1, 2, 2, 2, 5, 1, 3, 4, 4, 6, 5, 2, 0, 0, 1, 2, 5, 5, 1, 5, 2, 2, 0], [1], [0, 3, 3, 2, 0, 1, 2, 3, 2, 3, 3, 3, 3, 2, 1, 3, 2, 0, 2, 2, 0, 0, 2, 3, 1, 2, 2, 1, 3, 3, 1, 0, 1, 0, 1, 0, 1, 1, 0, 3, 3, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 2, 3, 0, 1, 2, 0, 2, 1, 0, 3, 0, 3, 3, 1, 1, 3, 2, 2, 0, 0, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2, 1, 0, 0, 3, 1, 1, 0, 3, 1, 1, 0, 3, 3, 0, 2, 2, 3, 0, 3, 3, 2, 3, 3, 1, 3, 3, 1, 2, 3, 3, 1, 3, 2, 0, 3, 2, 0, 0, 2, 0, 2, 1, 3, 2, 3, 1, 1, 0, 3, 0, 2, 3, 1, 3, 3, 2, 0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 0, 3, 0, 0, 3, 2, 2, 1, 0, 0, 0, 2, 3, 3, 0, 1, 0, 1, 3, 2, 3, 3, 0, 2, 1, 3, 1, 1, 2, 2, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 2, 1, 1, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 0, 1, 0, 2, 1, 1, 1, 2, 1, 0, 0, 2, 0, 0, 1, 2, 2, 2, 1, 1, 2, 0, 1, 1, 0, 2, 0, 0, 1], [0, 1, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not in1 != min(abs(( i0 + int(7.0) )), ( max(mod(max(max(max(min(( int(2.0) - min(( res0 * ( ( i2 * in0 ) * ( abs(int(2.0)) + ( divInt(int(4.0),max(min(int(2.0), res0), int(8.0))) * i2 ) ) ) ), int(5.0)) ), res0), int(0.0)), int(5.0)), i0),max(min(in0, int(5.0)), divInt(( abs(min(mod(mod(divInt(mod(int(7.0),int(3.0)),divInt(min(in2, int(3.0)),mod(i1,divInt(int(2.0),in1)))),max(res0, abs(max(int(9.0), int(6.0))))),min(mod(( in2 + i1 ),int(5.0)), int(3.0))), ( mod(( abs(abs(int(1.0))) * int(1.0) ),( int(3.0) + in0 )) * i0 ))) + min(int(6.0), int(3.0)) ),res0))), max(int(9.0), int(0.0))) + i2 )):{:\\nloopBreak% = 0\\nwhile min(abs(in0), divInt(( max(i2, max(max(( abs(max(int(5.0), min(min(int(5.0), ( abs(min(int(8.0), min(( i2 - max(( i1 - i2 ), divInt(i2,( int(2.0) - abs(mod(abs(int(3.0)),int(0.0))) ))) ), i2))) - abs(in2) )), ( max(int(6.0), max(abs(mod(i1,in0)), in1)) + in1 )))) * ( res0 + int(1.0) ) ), in2), mod(int(3.0),int(7.0)))) + i2 ),min(i0, i0))) \\le max(divInt(divInt(int(7.0),i1),i2), in2):{:\\nb1 = ( True and divInt(max(min(in2, int(8.0)), i1),int(2.0)) \\g abs(mod(min(min(in2, mod(int(1.0),max(int(1.0), int(0.0)))), ( ( i2 * int(4.0) ) - int(4.0) )),int(1.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i0\\nb1 = not b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 44, 44, 3, 3, 1, 8, 3, 5, 1, 0, 46, 1, 185, 45, 51, 24, 22]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1], [0, 6, 3, 4, 6, 9, 7], [], [], [], [], [], [], [], [], [0, 1, 3, 6, 5, 3, 6, 5], [0], [3, 1, 2, 1, 2, 2, 3, 0, 1, 1, 3, 3, 3, 2, 1, 0, 0, 2, 0, 3, 2, 2, 0, 0, 3, 2, 2, 0, 1, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 2, 2, 2], [1, 2, 0, 2, 1], [1, 1, 0, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = max(int(0.0), mod(int(6.0),( ( min(i1, int(3.0)) - int(4.0) ) * max(max(abs(mod(int(6.0),in0)), res0), divInt(in2,abs(( ( in0 + res0 ) * abs(( mod(in2,int(9.0)) - int(7.0) )) )))) )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 30, 9, 7, 5, 4]}, {"genotype": [[0], [0, 1, 0, 1, 1], [0, 2, 2, 1, 1], [1, 1], [0, 1, 1], [1, 1, 1, 1, 1, 1], [5, 6, 3, 8, 5, 3], [3, 5, 2], [1], [], [1, 1, 1], [0, 0, 0], [], [], [], [3, 0, 1, 5, 1, 2], [0, 0], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 0, 1, 0, 1], [], [1, 1, 2, 2], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(5.0) \\ge in0\\nloopBreak% = 0\\nwhile max(int(6.0), max(abs(int(3.0)), abs(int(8.0)))) != i0:{:\\nloopBreak% = 0\\nwhile i1 == int(5.0):{:\\nin2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 6, 6, 3, 1, 0, 3, 3, 0, 0, 0, 6, 2, 14, 0, 4, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [1, 0, 1], [1, 1, 1, 1], [4, 8, 7, 8], [2, 1], [1], [1], [0, 1, 1], [0, 0], [3], [], [], [3, 1, 5, 2, 4, 1], [0, 0], [1, 1, 3, 0, 3, 0, 1, 3, 1, 3, 2, 0, 0], [0], [2, 2, 0, 2], [0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(4.0)\\nb1 = ( int(8.0) == abs(i1) or abs(in2) \\g int(7.0) )\\ni2 = min(int(8.0), abs(( in1 + i1 )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 4, 4, 2, 1, 1, 3, 2, 1, 0, 0, 6, 2, 13, 1, 4, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [2, 2, 2, 1, 2, 2, 0, 1, 0, 1], [0, 1, 1, 0, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 1, 3, 3, 1, 3, 4, 5, 0, 2, 9, 3, 3, 7, 1, 2, 0, 3, 5, 3], [0, 4, 0, 2, 0, 3], [1, 0, 0], [0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3, 0, 2, 1], [1], [0, 0], [6, 1, 2, 4, 6, 2, 3, 0, 4, 0, 1, 2, 3, 4, 4, 1], [0, 1, 0], [1, 3, 2, 2, 1, 1, 2, 3, 3, 2, 2, 2, 2, 0, 0, 1, 0, 3, 1, 1, 1, 3, 0, 1, 0, 1, 1, 1, 1, 2, 0, 1, 1, 2, 2, 1, 0, 0, 1, 3, 1, 1, 2, 0, 0, 3, 2, 2, 0, 2, 0, 1, 1, 3, 0, 1], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 1, 2, 0, 2, 2, 1, 0], [1, 0, 0, 2, 1, 2, 0, 1], [0, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(4.0) \\l max(divInt(divInt(int(4.0),int(1.0)),mod(max(abs(mod(divInt(( mod(res0,i1) - int(3.0) ),i2),min(int(3.0), int(1.0)))), int(3.0)),abs(in1))), int(4.0)) and res0 \\le int(5.0) ):{:\\nloopBreak% = 0\\nwhile int(0.0) \\l int(2.0):{:\\nloopBreak% = 0\\nwhile b1:{:\\ni2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif ( in0 + int(3.0) ) == int(3.0):{:\\nloopBreak% = 0\\nwhile ( ( int(7.0) + i0 ) * in1 ) \\l int(1.0):{:\\nb0 = not abs(int(2.0)) \\ge int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= divInt(i1,i2)\\nb0 = False\\nin0 = max(( ( in1 * ( in1 + int(3.0) ) ) - int(5.0) ), min(i1, int(3.0)))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 21, 21, 6, 3, 1, 10, 6, 4, 1, 2, 16, 3, 56, 14, 8, 8, 7]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [2, 1, 2, 2, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0], [0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 7, 3, 5, 5, 1, 7, 0, 9, 1, 4, 0, 2, 4, 2, 8, 4, 9, 1, 3, 7, 2, 0, 5, 7], [4, 5, 1, 2, 4, 2, 1, 3, 3], [0, 1, 1, 0, 1, 0], [0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 3, 1, 3, 2, 2, 2, 0], [1, 1], [1, 0], [5, 1, 5, 3, 0, 4, 3, 5, 6, 2, 6, 2, 5, 5, 0, 0, 4, 5, 1, 5, 3, 6, 6, 0, 5, 2, 6, 5, 3, 1, 1, 4, 2, 5, 2, 5, 2, 6, 4, 0, 1, 1, 0, 1, 0, 4, 6, 3, 1, 1, 3], [0, 1, 0, 1], [0, 1, 3, 3, 0, 0, 1, 3, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 1, 2, 3, 0, 0, 1, 3, 0, 1, 2, 1, 1, 2, 3, 0, 1, 0, 3, 3, 0, 3, 2, 1, 0, 0, 0, 1, 0, 3, 2, 3, 1, 0, 1, 0, 3, 0, 2, 0, 0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 2, 0, 3, 0, 3, 1, 3, 3, 0, 3, 3, 2, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 0, 3, 2, 1, 0, 0, 2, 3, 0, 1, 0, 1, 2, 3, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 3, 1, 2, 1, 2, 3, 0, 3, 2, 0, 0, 0, 2, 3, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [2, 1, 2, 1, 1, 1, 0, 0, 2, 1, 2, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 1, 0], [2, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 2, 2], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 \\le int(8.0):{:\\ni1 = abs(max(in2, in0))\\nif not not int(9.0) != abs(i0):{:\\nloopBreak% = 0\\nwhile max(max(int(7.0), in1), ( max(mod(divInt(min(in0, int(3.0)),int(5.0)),int(5.0)), ( min(in2, res0) * int(1.0) )) * abs(i2) )) \\g int(7.0):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nres0 -= mod(int(0.0),int(9.0))\\ni2 = mod(max(in2, int(1.0)),in2)\\n:}\\nloopBreak% = 0\\nwhile abs(max(i0, abs(( int(4.0) + i0 )))) == in1:{:\\nb1 = ( in2 \\le int(0.0) and False )\\nloopBreak% = 0\\nwhile i1 == max(( max(int(2.0), in2) - int(4.0) ), in0):{:\\nb1 = max(res0, ( res0 * i0 )) \\g ( in2 - ( min(i2, max(( mod(res0,( in2 + min(in0, abs(int(2.0))) )) * min(max(i1, max(min(( i1 + abs(in1) ), i2), ( max(abs(min(in2, min(i2, min(divInt(int(8.0),in2), i2)))), divInt(min(res0, int(4.0)),in1)) - int(9.0) ))), ( max(i0, i1) - int(1.0) )) ), mod(i1,int(3.0)))) - int(7.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( int(2.0) \\ge i0 and not not i1 \\ge abs(int(0.0)) )\\nb1 = not b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= mod(int(5.0),divInt(min(in1, max(( res0 * in0 ), i1)),( min(int(7.0), i1) * in0 )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 5, 9, 26, 26, 9, 6, 2, 19, 9, 10, 2, 2, 51, 4, 133, 24, 36, 16, 10]}, {"genotype": [[0], [1], [0], [], [1], [1], [4], [], [], [], [], [], [], [], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 0, 0, 1], [5, 6, 4, 2, 6], [1], [2], [], [0, 1], [0], [2], [], [], [4], [1], [1, 1, 1], [], [], [2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not int(5.0) \\g int(6.0)\\nin1 *= int(426.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 1, 0, 2, 1, 1, 0, 0, 1, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 3, 9, 5, 3, 3, 3, 1, 0, 2, 4, 1, 4, 5, 9, 5, 6, 4, 4, 2, 6, 4, 6, 6, 2, 9, 1, 8, 0, 2, 4, 6, 2, 8, 9, 4, 3, 3, 5, 7, 6, 2, 5, 5, 1, 4, 5, 8, 4, 0, 6, 8, 0, 3, 7, 7, 1, 1, 2, 0, 0, 1, 4, 9, 6, 6, 9, 5, 2, 8, 3, 5, 2, 2, 0, 4, 5, 8, 9, 5, 8, 1, 4, 2, 2, 7, 8, 7, 7, 6, 6, 3, 0, 9, 2, 6, 6, 5, 0, 9, 2, 2, 6, 5, 6, 0, 6, 7, 3, 6, 7, 7, 6, 3, 5, 9, 3, 9, 9, 3, 9, 4, 5, 5, 7, 5, 0, 6, 4, 4, 1, 2, 3, 3, 1, 4, 2, 0, 1, 0, 6, 8, 8, 5, 9, 4, 7, 9, 0, 1, 5, 6, 3, 4, 8, 5, 2, 3, 8, 8, 4, 1, 1, 7, 1, 0, 9, 0, 0, 5, 3, 1], [5, 4, 1, 1, 2, 0, 2, 2], [2, 1, 2, 1, 1], [0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 2, 3, 1, 1, 3, 1, 2, 1], [1, 0, 0, 1, 0], [], [1, 3, 5, 5, 3, 6, 2, 0, 4, 5, 5, 6, 5, 6, 6, 0, 1, 5, 6, 1, 6, 0, 6, 4, 0, 1, 6, 6, 2, 5, 0, 2, 1, 1, 2, 0, 5, 6, 5, 4, 3, 5, 1, 3, 2, 1, 1, 1, 5, 6, 0, 1, 1, 4, 1, 5, 2, 1, 0, 5, 4, 1, 2, 5, 2, 4, 6, 3, 3, 2, 1, 1, 3, 1, 4, 1, 1, 4, 6, 4, 4, 2, 6, 1, 2, 6, 1, 2, 1, 5, 5, 2, 2, 1, 1, 5, 1, 0, 0, 0, 4, 4, 0, 6, 5, 3, 1, 5, 1, 6, 6, 6, 5, 6, 6, 4, 6, 6, 5, 0, 3, 4, 0, 1, 0, 6, 4, 2, 4, 3, 5, 5, 6, 1, 5, 0, 0, 5, 0, 0, 0, 6, 4, 4, 2, 6, 5, 2, 5, 3, 0, 4, 0, 6, 3, 5, 5, 6, 5, 6, 5, 4, 5, 3, 0, 0, 1, 0, 4, 0, 6, 4, 5], [1, 0, 0], [1, 1, 2, 3, 2, 1, 1, 2, 0, 0, 0, 2, 2, 3, 1, 1, 0, 0, 3, 2, 0, 1, 3, 3, 2, 1, 2, 2, 2, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 0, 0, 3, 2, 1, 1, 1, 0, 1, 1, 3, 0, 3, 1, 1, 2, 3, 3, 2, 0, 1, 1, 2, 2, 1, 3, 2, 2, 1, 0, 0, 1, 0, 0, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 3, 0, 2, 0, 0, 0, 1, 1, 2, 0, 2, 0, 2, 1, 2, 0, 3, 2, 1, 3, 2, 0, 1, 3, 3, 2, 0, 2, 0, 3, 1, 2, 3, 1, 0, 2, 1, 2, 2, 0, 3, 1, 3, 0, 1, 2, 2, 3, 1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 3, 0, 1, 1, 0, 3, 2, 2, 0, 2, 2, 3, 0, 1, 3, 2, 0, 0, 0, 0, 1, 3, 0, 0, 3, 0, 1, 2, 2, 0, 3, 2, 3, 1, 1, 0, 1, 2, 1, 1, 2, 0, 1, 0, 2, 3, 2, 3, 1, 2, 3, 2, 0, 3, 1, 0, 2, 2, 1, 2, 2, 3, 3, 2, 0, 3, 3, 1, 0, 1, 1, 2, 2, 3, 0, 2, 2, 2, 2, 0, 1, 2, 2, 3, 0, 0, 0, 3, 1, 0, 0, 0, 3, 3, 2, 1, 0, 1, 2, 0, 3, 3, 2, 0, 2, 0, 0, 2, 0, 3, 1, 3, 2, 3, 2, 1, 2, 2, 1, 0, 2, 0, 2, 1, 3, 2, 2, 0, 3, 1, 3, 1, 0, 3, 3, 1, 3, 1, 2, 0, 0, 2, 1, 3, 3, 1, 3, 3, 1, 1, 3, 3, 3, 3, 0, 2, 1, 0, 2, 0, 3, 3, 1, 0, 1, 1, 3, 0, 0, 1, 0, 2, 3, 2, 1, 0, 1, 0, 2, 0, 3, 2, 3, 2, 1, 1, 2, 2, 3, 1, 3, 2, 3, 1, 1, 2, 0, 3, 2, 2, 3, 0, 3, 3, 0, 2, 2, 1, 1, 1, 2, 2, 1, 0, 3, 2, 0, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 3, 1, 1, 2, 0, 1, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 3, 1, 1, 0, 3, 2, 1, 2, 3, 0, 2, 0, 2, 1, 3, 3, 3, 2, 0, 3, 0, 0, 0, 3, 2, 2, 3, 0, 0, 0, 3, 1, 1, 3, 0, 1, 2, 2, 0, 2, 2, 1, 0, 3, 3, 2, 2, 3, 3, 0, 1, 2, 2, 1, 2, 3, 1, 3, 2, 0, 0, 2, 3, 2, 1, 2, 3, 3, 2, 3, 1, 1, 3, 2, 3, 3, 3, 2, 1, 3, 1, 0, 2, 2, 1, 3, 1, 1, 3, 1, 2, 1, 0, 2, 1, 3, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 0, 3, 3, 3, 2, 2, 3, 1, 0, 2, 0, 1, 3, 1, 1, 0, 1, 1, 2, 1, 2, 2, 1, 0, 3, 2, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 3, 0, 2, 0, 0, 1, 1, 2, 1, 1, 2, 2, 3, 2, 1, 2, 0, 3, 3, 3, 1, 3, 3, 3, 0, 2, 3, 3, 0, 1, 2, 1, 1, 3, 1, 3, 1, 0, 2, 2, 0, 1, 3, 0, 3, 3, 3, 2, 2, 0, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 1, 3, 1, 2, 2, 3, 0, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 0, 0, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 3, 1, 3, 0, 3, 3, 1, 2, 2, 2, 1, 2, 1, 1, 1, 3, 1, 3, 2, 1, 0, 3, 3, 2, 2, 3, 3, 1, 1, 2, 0, 2, 0, 0, 3, 0, 2, 3, 0, 1, 3, 0, 3, 1, 0, 3, 2, 2, 2, 2, 3, 2, 0, 2, 0, 1, 0, 2, 2, 2, 3, 0, 3, 3, 1, 2, 2, 1, 1, 1, 2, 0, 0, 1, 3, 0, 0, 2, 0, 1, 0, 3, 3, 1, 3, 1, 1, 1, 0, 1, 3, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 0, 2, 2, 2, 0, 0, 1, 2, 1, 0, 1, 1, 0, 2, 0, 0, 2, 1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 2, 1, 0, 1, 0, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 1, 2, 0, 2, 2, 0, 1, 2, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 0, 2, 2, 0, 2, 0, 1, 1, 1, 0, 2, 0, 1, 1, 2, 0, 2, 0, 1, 1, 0, 0, 2, 0, 2, 1, 2, 1, 1, 1, 0, 1, 2, 2, 2, 0, 2, 1, 1, 0, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 2, 2, 1, 0, 0, 1], [1, 1, 0, 0, 0, 2, 2, 0, 0, 2, 1, 2, 2, 2, 2, 2, 0, 1, 1, 0, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 2, 1, 0, 1, 1, 2, 0, 2, 0, 0, 0, 0, 2, 1, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0, 2, 2, 0, 2, 0, 2, 1, 2], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 74, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb2 = int(0.0) != int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( ( mod(min(( int(3.0) - int(9.0) ), ( i1 - in0 )),in2) \\le mod(( abs(int(5.0)) + int(3.0) ),in2) and not in0 \\g min(mod(res0,int(3.0)), abs(abs(mod(int(3.0),divInt(( ( mod(abs(( i2 + min(min(divInt(max(i0, ( in1 + in2 )),abs(( int(1.0) * int(0.0) ))), int(2.0)), in2) )),int(4.0)) * int(1.0) ) + max(res0, min(int(4.0), int(5.0))) ),( max(max(( in2 + int(9.0) ), int(5.0)), divInt(( int(6.0) * min(( ( int(4.0) - res0 ) * res0 ), int(4.0)) ),i0)) * i1 )))))) ) or ( abs(min(( ( mod(( min(abs(max(max(int(2.0), ( int(6.0) * divInt(max(in2, mod(res0,i1)),res0) )), int(4.0))), int(6.0)) * mod(i0,( res0 * divInt(int(6.0),mod(in1,min(( int(2.0) + max(mod(i0,int(9.0)), abs(abs(( i1 - mod(res0,min(int(1.0), divInt(min(int(8.0), res0),mod(int(0.0),divInt(divInt(i2,min(int(2.0), max(in2, int(4.0)))),( mod(abs(int(6.0)),( mod(i0,( int(2.0) - i2 )) + ( int(8.0) * ( max(i1, int(9.0)) * int(4.0) ) ) )) - i1 )))))) )))) ), max(mod(( i2 - divInt(( abs(i0) * int(3.0) ),max(( in2 + res0 ), in2)) ),in1), int(3.0))))) )) ),max(in0, in2)) + max(i1, int(5.0)) ) * mod(( in0 + min(( min(int(7.0), int(6.0)) + i2 ), int(2.0)) ),( int(5.0) - int(5.0) )) ), mod(i1,int(1.0)))) \\g i1 or True ) ):{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile ( False or not ( max(mod(abs(int(4.0)),( abs(( i1 + abs(int(5.0)) )) + in2 )), ( divInt(int(8.0),mod(divInt(abs(abs(divInt(res0,max(max(int(4.0), i0), int(0.0))))),int(6.0)),( divInt(max(i1, ( ( ( ( i1 * int(8.0) ) - divInt(( min(in1, i1) + in2 ),abs(int(0.0))) ) - i2 ) - i1 )),i0) * abs(max(( int(3.0) + in2 ), int(7.0))) ))) * ( in1 + min(max(( i1 + mod(i2,in2) ), divInt(i2,min(int(7.0), min(( max(divInt(int(1.0),( ( int(1.0) + in1 ) + ( res0 * ( int(2.0) - max(mod(( in0 + min(int(0.0), abs(int(0.0))) ),in0), abs(max(int(1.0), min(int(4.0), mod(i2,i1))))) ) ) )), ( int(9.0) + max(min(int(6.0), max(abs(int(6.0)), int(9.0))), min(abs(abs(min(i1, ( int(5.0) * in0 )))), divInt(i1,max(abs(int(2.0)), in1)))) )) - int(8.0) ), int(3.0))))), min(i1, i1)) ) )) + int(5.0) ) == in1 ):{:\\nb1 = divInt(min(( int(2.0) - res0 ), int(2.0)),in1) \\l ( in1 - max(divInt(max(divInt(int(0.0),int(4.0)), mod(( min(int(5.0), min(( max(int(8.0), int(9.0)) - mod(i2,min(divInt(divInt(min(res0, max(min(i1, mod(mod(int(5.0),int(8.0)),int(1.0))), ( divInt(int(4.0),i2) + min(( res0 + max(divInt(abs(i1),( int(2.0) + i2 )), i1) ), ( in2 + min(int(2.0), int(7.0)) )) ))),( in2 - int(8.0) )),i2), int(7.0))) ), i2)) * i1 ),i1)),abs(in2)), i1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = i0 == ( abs(int(7.0)) - int(6.0) )\\ni0 += i0\\nb1 = True\\nin1 = min(mod(int(6.0),divInt(min(in1, ( i0 + divInt(int(3.0),abs(abs(min(divInt(res0,abs(in2)), in0)))) )),i1)), max(( ( max(in2, i1) - res0 ) - abs(int(0.0)) ), int(9.0)))\\nb1 = max(res0, int(2.0)) == divInt(( res0 - ( ( int(6.0) * in2 ) * abs(max(divInt(( abs(min(res0, int(6.0))) * ( mod(int(5.0),divInt(max(int(0.0), max(( res0 + in1 ), ( max(divInt(int(9.0),divInt(max(max(( max(int(2.0), int(2.0)) + max(divInt(abs(min(max(( int(6.0) - max(int(5.0), res0) ), mod(( int(6.0) + max(int(0.0), int(6.0)) ),min(int(7.0), divInt(int(3.0),res0)))), ( int(6.0) + abs(int(7.0)) ))),( mod(divInt(int(7.0),divInt(divInt(( ( int(6.0) + int(3.0) ) - in2 ),abs(min(abs(mod(( min(int(5.0), i0) + ( in0 * int(9.0) ) ),max(int(3.0), int(9.0)))), in1))),int(9.0))),int(3.0)) + ( int(9.0) - ( ( int(4.0) * i0 ) + max(( ( ( int(5.0) - max(i1, i0) ) + res0 ) + in1 ), i2) ) ) )), in1) ), min(in0, int(5.0))), in2),in2)), abs(res0)) * divInt(i1,in2) ))),int(7.0))) - int(5.0) ) ),( int(0.0) + int(6.0) )), ( mod(min(mod(int(4.0),mod(i0,max(max(abs(int(4.0)), min(abs(min(i0, mod(max(max(in2, int(1.0)), ( int(2.0) + int(3.0) )),min(int(3.0), min(int(1.0), i0))))), ( ( i0 + int(4.0) ) - abs(i0) ))), min(abs(max(divInt(divInt(res0,abs(max(max(int(2.0), max(divInt(in1,divInt(min(int(0.0), int(1.0)),max(int(0.0), mod(( abs(in1) - mod(divInt(abs(( ( abs(( i2 * int(6.0) )) - int(8.0) ) * res0 )),in2),i2) ),int(8.0))))), mod(divInt(int(5.0),int(9.0)),in2))), int(4.0)))),int(7.0)), in0)), i0)))), min(int(9.0), abs(in1))),max(max(int(0.0), divInt(( mod(int(1.0),( int(5.0) - int(6.0) )) - int(3.0) ),min(int(4.0), abs(( int(8.0) * i0 ))))), max(max(( ( max(min(int(5.0), int(2.0)), mod(res0,divInt(in0,in2))) + max(in2, ( min(res0, int(3.0)) + abs(in2) )) ) + abs(int(8.0)) ), res0), max(mod(( ( ( max(( in2 + ( in1 * int(8.0) ) ), in2) * divInt(( ( min(in0, max(abs(int(4.0)), mod(( int(1.0) + int(1.0) ),int(7.0)))) * divInt(i0,i0) ) + int(1.0) ),abs(i1)) ) * i0 ) - mod(in1,int(0.0)) ),i0), max(min(int(9.0), min(int(0.0), int(0.0))), int(5.0)))))) * res0 ))) ) ),int(3.0))\\nin1 = max(in2, int(1.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 173, 173, 8, 5, 4, 19, 8, 11, 5, 0, 173, 3, 719, 201, 175, 111, 91]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [0, 0], [1, 1], [6, 0], [5], [0, 1, 1], [], [1, 0, 0], [0], [0, 1], [1], [0], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) != int(0.0):{:\\nb0 = b1\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 1, 3, 0, 3, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 9, 4, 0, 6, 8, 4, 4, 3, 5, 5, 7, 6, 5, 0, 2, 3, 3, 3, 8, 9, 1, 5, 6, 1, 0, 1, 2, 6, 7, 5, 1, 9, 0, 0, 0, 0, 8, 7, 7, 3, 2, 5, 2, 3, 7, 4, 5, 9, 3, 6, 6, 2, 2, 0, 0, 0, 0, 7, 4, 3, 1, 1, 3, 6, 0, 6, 1, 1, 6, 7, 1, 6, 0, 3, 5, 1, 5, 1, 7, 5, 1, 7, 1, 3, 8, 8, 7, 5, 9, 8, 5, 0, 7, 8, 1, 8, 4, 0, 0, 5, 5, 8, 1, 0, 6, 4, 3, 4, 0, 7, 6, 9, 1, 7, 7, 6, 5, 0, 1, 1, 9, 9, 8, 3, 9, 5, 1, 8, 8, 3, 3, 3, 0, 7, 7, 5, 9, 7, 4, 2, 1, 9, 9, 8, 1, 3, 1, 2, 7, 8, 9, 7, 4, 1, 5, 8, 1, 1, 9, 4, 0, 3, 2, 5, 3, 3, 3, 1, 0, 2, 3, 5, 0, 1, 6, 1, 2, 6, 7, 6, 2, 9, 4, 5, 9, 4, 8, 6, 8, 2, 7, 8, 6, 1, 4, 3, 5, 9, 6, 2, 5, 5, 7, 1, 1, 0, 5, 3, 8, 6, 6, 0, 7, 7, 1, 6, 1, 4, 8, 1, 9, 7, 2, 2, 5, 5, 7, 4, 5, 9, 9, 0, 5, 8, 3, 7, 8, 5, 9, 4, 8, 0, 7, 0, 6, 3, 7], [5, 0, 1, 1, 4, 0, 2, 0, 1, 1, 2, 3, 4, 1, 4], [2, 0, 2, 2, 2, 0, 2, 1, 2, 1, 2], [1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 2, 0, 2, 3, 1, 0, 1, 2, 3, 1, 3, 2, 1, 2, 2], [1, 0, 1, 0, 1], [1, 1, 1, 1], [1, 3, 2, 6, 1, 6, 2, 4, 4, 3, 2, 3, 2, 3, 5, 4, 2, 6, 6, 6, 1, 2, 6, 3, 4, 5, 0, 3, 2, 4, 6, 5, 1, 1, 5, 1, 1, 4, 4, 5, 2, 2, 3, 4, 0, 5, 1, 5, 6, 2, 6, 3, 1, 1, 4, 3, 0, 5, 3, 6, 6, 0, 3, 4, 3, 1, 5, 0, 2, 1, 3, 0, 6, 4, 1, 2, 2, 1, 2, 0, 2, 3, 0, 1, 1, 4, 2, 2, 2, 1, 6, 1, 3, 5, 5, 1, 5, 0, 0, 5, 6, 3, 4, 0, 0, 3, 5, 0, 2, 4, 1, 6, 5, 4, 5, 1, 4, 6, 5, 0, 3, 3, 2, 1, 4, 0, 6, 1, 4, 0, 1, 3, 5, 0, 2, 5, 6, 4, 0, 5, 3, 0, 5, 3, 4, 1, 0, 2, 0, 4, 2, 0, 4, 6, 2, 2, 6, 2, 4, 5, 0, 1, 1, 1, 0, 1, 6, 3, 2, 1, 0, 5, 2, 4, 4, 2, 0, 3, 1, 1, 0, 2, 1, 6, 1, 2, 4, 5, 1, 5, 6, 6, 6, 6, 6, 4, 0, 0, 2, 5, 5, 2, 3, 2, 3, 5, 4, 4, 1, 0, 1, 3, 2, 2, 2, 1, 5, 0, 5, 5, 3, 0, 4, 2, 5, 4, 0, 6, 1, 6, 5, 0, 2, 2, 1, 6], [1, 0, 1, 0, 1], [2, 2, 2, 1, 3, 2, 3, 1, 2, 2, 2, 0, 0, 1, 0, 2, 2, 2, 2, 0, 2, 3, 3, 0, 3, 1, 0, 0, 2, 3, 0, 2, 1, 3, 3, 1, 2, 2, 3, 3, 2, 2, 1, 2, 2, 3, 2, 2, 3, 0, 3, 0, 2, 2, 0, 3, 2, 0, 0, 2, 1, 1, 1, 3, 3, 0, 2, 2, 0, 3, 1, 2, 1, 1, 2, 0, 1, 1, 3, 3, 0, 1, 0, 0, 3, 0, 1, 3, 2, 1, 1, 0, 1, 1, 3, 2, 2, 3, 3, 3, 0, 3, 1, 2, 2, 0, 3, 3, 1, 1, 0, 1, 2, 1, 3, 2, 1, 2, 1, 0, 1, 1, 3, 2, 2, 0, 2, 3, 2, 1, 3, 1, 2, 3, 0, 3, 0, 1, 2, 3, 0, 0, 3, 1, 1, 1, 1, 2, 2, 2, 0, 3, 2, 2, 2, 1, 2, 0, 3, 0, 1, 3, 2, 2, 3, 3, 2, 3, 0, 3, 2, 3, 1, 1, 1, 3, 1, 2, 0, 0, 1, 3, 3, 0, 1, 2, 0, 2, 1, 0, 0, 0, 0, 2, 1, 2, 2, 2, 3, 0, 3, 1, 0, 1, 3, 1, 1, 1, 2, 3, 1, 2, 1, 1, 2, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 2, 3, 2, 1, 0, 1, 0, 0, 2, 1, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 0, 3, 0, 3, 1, 3, 1, 3, 2, 1, 2, 0, 1, 2, 1, 1, 0, 1, 2, 2, 3, 0, 1, 3, 2, 3, 2, 1, 0, 0, 0, 3, 2, 2, 0, 3, 2, 3, 2, 2, 1, 1, 1, 3, 1, 1, 3, 2, 1, 2, 3, 0, 1, 2, 2, 0, 0, 3, 2, 3, 1, 2, 0, 2, 2, 3, 0, 1, 0, 3, 1, 0, 1, 3, 2, 0, 3, 0, 3, 0, 2, 1, 1, 2, 2, 2, 3, 2, 3, 0, 0, 2, 2, 2, 0, 1, 0, 3, 1, 3, 2, 1, 0, 1, 2, 0, 3, 1, 2, 0, 2, 0, 1, 1, 2, 0, 3, 2, 0, 3, 3, 2, 0, 1, 0, 0, 1, 3, 0, 3, 2, 2, 3, 1, 3, 2, 2, 1, 0, 3, 0, 1, 3, 2, 0, 0, 3, 1, 2, 0, 0, 1, 3, 1, 0, 2, 3, 1, 2, 0, 1, 1, 1, 3, 0, 3, 0, 0, 1, 3, 3, 1, 2, 1, 0, 1, 2, 3, 2, 1, 1, 2, 0, 3, 2, 1, 0, 1, 1, 2, 3, 0, 1, 3, 1, 3, 1, 1, 2, 2, 3, 0, 0, 2, 0, 1, 3, 2, 0, 1, 0, 2, 1, 2, 3, 2, 0, 1, 3, 0, 0, 1, 0, 1, 1, 0, 3, 2, 0, 0, 1, 3, 1, 1, 3, 0, 0, 1, 2, 2, 1, 2, 2, 0, 1, 3, 2, 2, 1, 1, 0, 3, 3, 0, 2, 1, 3, 2, 1, 3, 3, 2, 1, 2, 3, 0, 3, 3, 3, 2, 2, 1, 1, 3, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 3, 2, 2, 3, 0, 2, 1, 3, 3, 2, 3, 0, 3, 1, 3, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 1, 0, 1, 0, 3, 3, 3, 3, 2, 2, 1, 3, 0, 3, 3, 3, 1, 3, 0, 3, 0, 3, 3, 0, 3, 0, 1, 1, 3, 1, 3, 2, 3, 2, 3, 1, 2, 1, 1, 1, 3, 1, 2, 0, 3, 0, 0, 2, 2, 1, 1, 3, 0, 0, 3, 2, 3, 3, 1, 2, 2, 3, 3, 3, 2, 3, 3, 3, 2, 0, 2, 0, 0, 2, 3, 0, 0, 1, 0, 3, 3, 1, 2, 3, 3, 3, 1, 3, 1, 2, 2, 0, 0, 3, 2, 1, 3, 3, 1, 0, 0, 3, 2, 2, 1, 3, 0, 3, 0, 3, 3, 3, 2, 0, 0, 1, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 2, 0, 3, 3, 3, 1, 2, 2, 0, 3, 1, 1, 2, 0, 3, 1, 1, 2, 1, 3, 0, 3, 0, 3, 1, 1, 3, 0, 3, 3, 3, 2, 2, 3, 0, 0, 1, 0, 1, 0, 2, 2, 2, 2, 0, 1, 1, 3, 2, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 2, 3, 0, 2, 2, 0, 2, 2, 3, 2, 3, 1, 3, 1, 2, 0, 1, 0, 0, 2, 3, 0, 2, 1, 2, 2, 2, 3, 0, 3, 3, 0, 3, 1, 3, 2, 0, 0, 1, 2, 3, 2, 0, 3, 1, 2, 2, 1, 3, 1, 2, 3, 3, 2, 0, 1, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 0, 0, 2, 0, 0, 2, 3, 0, 0, 0, 0, 2, 0, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 2, 1, 0, 2, 0, 3, 1, 2, 0, 3, 3, 1, 0, 2, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 1, 2, 0, 3, 2, 2, 3, 3, 1, 2, 2, 3, 3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 3, 3, 3, 3, 2, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 2, 3, 1, 1, 3, 3, 3, 0, 1, 0, 0, 2, 1, 2, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3, 3, 0, 3, 2, 1, 2, 0, 0, 3, 1, 0, 3, 1, 0, 3, 1, 3, 1, 1, 3, 1, 1, 2, 2, 3, 1, 3, 1, 1, 2, 1, 3, 2, 0, 1, 0, 1, 3, 3, 2, 0, 2, 1, 0, 2, 3, 3, 0, 0, 2, 2, 3, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 1, 1, 3, 3, 1, 1, 3, 2, 1, 0, 1, 2, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0], [2, 1, 1, 0, 0, 2, 1, 2, 2, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 1, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 0, 0, 2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 2, 2, 1, 2, 1, 1, 1, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0, 1, 1, 0, 0, 0, 1, 2, 2, 0, 1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 2, 0, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 2, 0, 1, 1, 1, 0, 0, 2, 0, 1, 1, 1, 0, 2, 2, 1, 1, 0, 0, 1, 0, 2, 2, 0, 0, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 2, 0, 1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 2, 0, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 1, 0, 2, 0, 1, 1, 2], [0, 0, 2, 2, 2, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 2, 1, 2, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 2, 1, 2, 0, 0, 1, 0, 2, 0, 0, 1, 2, 2, 1, 1, 0, 0, 1, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 1, 2, 2, 1, 2, 1, 1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 1, 2, 2, 1, 1, 0, 2, 0, 2, 2, 1, 0, 0, 2, 1, 0, 0, 2], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 107, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\nloopBreak% = 0\\nwhile ( ( ( ( int(9.0) + abs(( max(int(2.0), mod(divInt(divInt(i1,in0),int(9.0)),i2)) + divInt(mod(divInt(( res0 * divInt(max(min(i1, min(int(4.0), res0)), i2),( abs(in1) * ( int(0.0) * max(abs(int(6.0)), mod(mod(abs(min(mod(( int(8.0) - mod(mod(max(divInt(( max(in1, min(in0, mod(mod(i2,max(mod(in0,i2), mod(int(4.0),int(4.0)))),int(3.0)))) - min(min(in0, ( divInt(in2,max(int(5.0), divInt(int(5.0),int(7.0)))) - ( in1 + int(6.0) ) )), int(5.0)) ),min(min(i2, int(0.0)), res0)), res0),max(res0, int(2.0))),min(( int(3.0) - int(3.0) ), i1)) ),int(3.0)), int(8.0))),abs(( divInt(min(min(abs(i2), min(int(9.0), divInt(( res0 - min(min(int(1.0), int(5.0)), in0) ),int(6.0)))), ( int(1.0) + abs(( int(0.0) + ( int(1.0) - in1 ) )) )),int(2.0)) + int(6.0) ))),min(divInt(mod(in2,( max(( int(7.0) * max(int(5.0), ( abs(i0) - max(in0, int(1.0)) )) ), mod(max(i2, in1),max(int(9.0), int(0.0)))) * int(0.0) )),int(0.0)), divInt(( divInt(res0,max(( ( mod(int(0.0),divInt(in2,min(i1, int(8.0)))) - max(( ( abs(max(( max(i1, max(divInt(min(int(7.0), int(7.0)),int(3.0)), min(int(2.0), ( in2 * i1 )))) * int(5.0) ), abs(abs(i1)))) * int(2.0) ) + divInt(in1,( int(3.0) + in1 )) ), in2) ) + i2 ), i2)) + mod(int(7.0),( divInt(divInt(abs(in0),max(int(4.0), in1)),int(5.0)) - abs(int(9.0)) )) ),int(3.0))))) ) )) ),int(6.0)),( max(int(6.0), ( int(2.0) - int(2.0) )) * ( ( i0 * int(0.0) ) + int(0.0) ) )),int(0.0)) )) ) + max(in2, int(0.0)) ) * int(7.0) ) != mod(mod(min(divInt(int(4.0),i1), int(3.0)),in2),res0) or not ( int(1.0) - max(min(min(max(i2, res0), in0), i1), divInt(divInt(i1,max(in1, max(int(1.0), min(int(3.0), max(( int(6.0) * ( in0 + int(0.0) ) ), ( int(6.0) + int(1.0) )))))),i0)) ) \\l int(1.0) ):{:\\nin2 -= divInt(divInt(max(in0, int(6.0)),abs(mod(min(divInt(int(7.0),res0), res0),i0))),max(divInt(( in0 + max(divInt(min(( mod(int(1.0),int(6.0)) * int(0.0) ), abs(int(3.0))),int(5.0)), max(( int(1.0) + ( min(in1, int(5.0)) + ( mod(in0,i1) - abs(mod(max(int(1.0), ( in2 * mod(mod(min(i0, int(7.0)),i2),abs(int(5.0))) )),i1)) ) ) ), int(1.0))) ),abs(( in0 * max(i0, abs(res0)) ))), divInt(int(7.0),int(1.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b2\\nin1 = divInt(( ( max(divInt(max(i1, i2),mod(( ( i2 - int(3.0) ) - i1 ),max(int(8.0), max(mod(int(8.0),i2), int(7.0))))), mod(i0,min(int(5.0), ( i2 + ( in0 + int(9.0) ) )))) - int(8.0) ) + divInt(i0,max(mod(i1,min(min(( i1 - int(5.0) ), in1), i2)), int(0.0))) ),max(i2, abs(( divInt(abs(int(7.0)),max(( ( int(8.0) - i2 ) * min(i1, int(1.0)) ), max(( res0 * i1 ), max(int(8.0), ( in0 + in2 ))))) + int(4.0) ))))\\nif not ( min(int(0.0), in2) \\g ( min(int(0.0), mod(i1,int(5.0))) + int(5.0) ) or int(8.0) \\g min(in2, max(i0, i0)) ):{:\\nloopBreak% = 0\\nwhile int(1.0) \\le abs(abs(int(0.0))):{:\\nif True:{:\\nloopBreak% = 0\\nwhile b2:{:\\nif ( int(6.0) - in2 ) \\l int(4.0):{:\\nif False:{:\\nres0 *= divInt(min(( int(3.0) - int(4.0) ), ( in0 * max(( int(0.0) * in1 ), int(7.0)) )),int(6.0))\\n:}else:{:\\ni0 = ( max(i0, int(9.0)) - abs(int(1.0)) )\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile abs(int(7.0)) == int(7.0):{:\\nb2 = ( mod(abs(in0),in2) * mod(i0,int(6.0)) ) \\l max(( i2 * int(5.0) ), in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 -= ( int(0.0) + divInt(max(divInt(res0,int(1.0)), min(in2, in1)),int(1.0)) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not in2 \\g int(9.0)\\nloopBreak% = 0\\nwhile int(9.0) \\g i1:{:\\nb2 = ( abs(( in1 * res0 )) == int(8.0) and min(int(3.0), int(9.0)) \\ge min(in2, i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = True\\nb2 = ( int(5.0) \\le divInt(mod(int(1.0),mod(( in0 * int(8.0) ),min(mod(divInt(int(8.0),int(3.0)),in0), max(min(i2, divInt(int(3.0),min(( int(3.0) - min(min(( int(0.0) - ( max(i1, max(max(abs(mod(( int(7.0) * int(7.0) ),max(in1, int(5.0)))), int(9.0)), i0)) - ( res0 - int(7.0) ) ) ), int(4.0)), i1) ), ( in1 - abs(( mod(min(i0, divInt(int(2.0),abs(abs(divInt(min(i1, min(int(1.0), abs(int(9.0)))),int(9.0)))))),divInt(in0,( in2 - i0 ))) * ( i2 - in2 ) )) )))), int(8.0))))),res0) and not False )\\nb1 = not int(1.0) \\g in1\\n:}\\nb2 = not min(abs(max(max(( divInt(int(3.0),max(i0, max(max(min(int(1.0), abs(in2)), max(in0, max(abs(i0), max(in2, int(2.0))))), int(7.0)))) + abs(int(8.0)) ), max(divInt(abs(( abs(int(9.0)) + ( int(7.0) + int(4.0) ) )),int(1.0)), abs(int(5.0)))), divInt(in0,min(in1, i1)))), mod(divInt(int(8.0),int(1.0)),min(i0, i2))) \\le min(mod(max(abs(int(1.0)), divInt(mod(min(min(min(( min(max(abs(( i0 * divInt(in1,i2) )), divInt(max(i0, in1),int(9.0))), res0) * min(max(int(4.0), mod(abs(max(abs(int(0.0)), max(int(3.0), ( ( i2 - i2 ) * min(mod(int(2.0),min(abs(int(5.0)), res0)), i2) )))),min(( mod(int(3.0),max(in1, max(in2, max(min(min(( i0 * i1 ), int(3.0)), ( int(3.0) - int(1.0) )), abs(mod(int(0.0),mod(int(2.0),min(int(3.0), ( i1 * max(max(max(int(5.0), ( ( i1 + min(int(0.0), int(1.0)) ) + ( i0 + abs(int(6.0)) ) )), int(1.0)), divInt(int(2.0),abs(i1))) ))))))))) - max(res0, max(int(6.0), int(7.0))) ), min(in0, min(max(min(mod(( abs(i2) * i1 ),int(6.0)), i0), int(2.0)), in2))))), divInt(divInt(( ( i2 * int(9.0) ) - int(4.0) ),abs(mod(in1,in1))),( mod(divInt(i2,i0),in0) * min(min(divInt(abs(i1),mod(mod(i1,divInt(mod(abs(( abs(int(5.0)) - max(int(9.0), divInt(i0,int(4.0))) )),i2),i1)),( max(res0, ( int(8.0) - mod(( ( abs(i1) * abs(max(i2, max(int(6.0), max(( in1 * in2 ), int(8.0))))) ) + divInt(max(mod(i1,min(int(2.0), ( ( int(7.0) - abs(int(8.0)) ) * divInt(min(max(divInt(in2,int(6.0)), abs(abs(max(res0, ( res0 * res0 ))))), res0),( max(res0, in1) + ( i0 * i0 ) )) ))), ( min(i2, in2) * in2 )),i2) ),divInt(in0,i2)) )) * ( max(int(1.0), mod(in0,mod(divInt(( divInt(( int(4.0) + in2 ),( in1 + min(int(3.0), ( in1 - min(abs(int(5.0)), i1) )) )) * mod(abs(int(9.0)),min(int(6.0), max(int(2.0), min(int(5.0), divInt(mod(int(5.0),( i0 * max(divInt(mod(max(abs(int(7.0)), ( mod(max(abs(int(1.0)), mod(int(1.0),int(0.0))),int(5.0)) - divInt(int(3.0),max(int(8.0), max(min(min(min(divInt(( int(6.0) - i1 ),int(6.0)), mod(( int(0.0) + int(7.0) ),divInt(( divInt(min(int(7.0), int(1.0)),abs(max(max(in0, int(6.0)), i2))) * i2 ),( int(1.0) + ( int(4.0) * abs(min(int(8.0), int(1.0))) ) )))), int(9.0)), int(7.0)), ( int(2.0) * min(abs(i2), min(( int(2.0) - mod(i1,in2) ), min(int(5.0), i0))) )))) )),abs(int(5.0))),in2), max(int(7.0), min(int(4.0), int(5.0)))) )),abs(int(9.0))))))) ),int(9.0)),( ( max(int(0.0), min(int(5.0), int(8.0))) + ( int(3.0) + min(divInt(in2,int(7.0)), in0) ) ) * int(8.0) )))) - abs(max(divInt(i0,( int(5.0) + in1 )), mod(max(min(i2, in2), divInt(( abs(mod(min(in1, i0),res0)) + i1 ),res0)),mod(in2,i0)))) ) ))), int(9.0)), i2) ))) ), int(4.0)), int(8.0)), max(max(int(0.0), int(7.0)), abs(mod(int(0.0),i2)))),int(6.0)),( i1 * int(3.0) ))),int(7.0)), res0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 23, 23, 9, 14, 249, 249, 15, 11, 4, 32, 15, 17, 5, 4, 236, 5, 994, 259, 255, 129, 133]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 1, 2, 1, 2, 2, 0, 2, 2, 0, 2, 0, 2, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 4, 7, 4, 8, 9, 2, 9, 4, 5, 1, 3, 8, 0, 3, 2, 1, 9, 2, 1, 2, 1, 4, 6, 7, 0, 0, 7, 9, 6, 9, 4, 1, 4, 3, 5, 5, 4, 1, 7, 0, 7], [0, 1, 4, 0, 1, 3, 1, 3, 5, 1, 5], [1, 0, 2, 0, 1], [0, 0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 1, 0, 2, 1, 3, 1], [1, 0, 0, 1], [1, 1, 0, 1, 0], [1, 1, 2, 5, 2, 5, 1, 5, 5, 2, 1, 6, 6, 3, 2, 5, 5, 1, 0, 4, 4, 2, 2, 0, 6, 3, 0, 4, 5, 3, 4, 5, 0, 2, 2, 4, 3, 0, 1, 6, 0, 2, 2], [0, 1, 1, 1], [3, 1, 0, 0, 2, 2, 2, 3, 3, 1, 1, 3, 1, 2, 0, 2, 1, 3, 1, 2, 1, 1, 1, 0, 3, 1, 2, 0, 1, 3, 2, 0, 1, 2, 1, 1, 3, 3, 2, 2, 3, 3, 3, 3, 0, 3, 0, 0, 1, 3, 3, 3, 0, 1, 0, 3, 0, 1, 2, 2, 1, 3, 3, 2, 3, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 3, 3, 1, 0, 2, 2, 0, 2, 1, 2, 1, 2, 3, 2, 2, 3, 2, 0, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 0, 3, 2, 3, 1, 0, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 0, 2, 1, 1, 0, 1, 3, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 2, 2, 0, 2, 2, 1, 1, 1, 1, 2, 1, 1, 0, 1, 2, 2, 0, 1, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 1, 2, 2], [1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 2, 1, 2, 0, 1, 2, 2, 2, 2, 0, 2], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(2.0), i1) \\l i1:{:\\nif ( ( ( max(min(int(6.0), int(4.0)), min(int(7.0), divInt(i2,mod(int(4.0),max(int(8.0), ( int(9.0) - int(2.0) )))))) + int(9.0) ) * in2 ) - abs(int(4.0)) ) \\g mod(i2,int(5.0)):{:\\nif ( abs(( in2 + int(1.0) )) \\le ( int(3.0) * int(8.0) ) and min(abs(mod(( abs(max(max(max(i1, max(in2, in2)), int(0.0)), abs(max(max(i2, int(3.0)), i1)))) - min(res0, int(2.0)) ),( mod(int(1.0),max(abs(mod(abs(int(9.0)),res0)), ( mod(int(2.0),int(1.0)) - int(2.0) ))) - int(1.0) ))), in0) \\l i2 ):{:\\nin2 = in2\\n:}else:{:\\ni1 -= int(4.0)\\n:}\\n:}else:{:\\nif i0 \\g in1:{:\\nin1 *= i2\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( i2 - min(max(int(6.0), i0), ( divInt(res0,mod(int(7.0),( int(0.0) * mod(min(( divInt(abs(divInt(in0,int(0.0))),( ( int(7.0) + int(9.0) ) - ( int(6.0) * int(9.0) ) )) * mod(int(4.0),i0) ), in1),in2) ))) * in0 )) ) \\ge int(1.0):{:\\nloopBreak% = 0\\nwhile in1 \\g in2:{:\\nb1 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i0 \\ge i2:{:\\nif True:{:\\nb0 = i2 != max(max(abs(max(int(4.0), in1)), min(mod(abs(int(3.0)),in0), int(5.0))), i0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( False and int(5.0) \\g min(int(4.0), min(( max(abs(i1), res0) * ( int(1.0) + int(7.0) ) ), i0)) ):{:\\nb1 = int(0.0) != abs(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 10, 8, 43, 43, 11, 5, 2, 20, 11, 9, 4, 5, 43, 4, 150, 32, 36, 21, 14]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1], [], [0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 2, 2, 3, 0, 5, 7, 2, 1, 4, 3, 5, 0, 9, 2, 5, 2, 4, 6, 1], [1, 0, 3, 1, 4, 3, 4], [0, 1, 0, 0, 2], [1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 1], [1], [], [5, 3, 4, 3, 2, 1, 6, 2, 1, 1, 6, 5, 6, 2, 0, 1, 3, 6, 6, 4, 2, 3, 2, 2, 4, 1, 2, 6], [0], [0, 1, 2, 3, 1, 0, 0, 0, 0, 3, 2, 2, 3, 0, 1, 1, 3, 2, 0, 2, 0, 3, 1, 1, 3, 0, 0, 2, 1, 3, 0, 0, 1, 2, 0, 3, 2, 0, 0, 2, 3, 3, 1, 0, 1, 0, 3, 1, 3, 0, 0, 3, 3, 2, 2, 3, 1, 1, 3, 2, 0, 0, 1, 3, 0, 3, 2, 1, 2, 1, 2, 1, 2, 0, 1, 1, 2, 2, 3, 2, 0, 0, 2, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 2, 2, 1, 2, 1, 1, 1, 2, 2, 0, 1, 1, 0, 0, 1, 2, 0], [0, 2, 1, 1, 2, 2, 2], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( in2 \\g int(5.0) or divInt(min(int(6.0), in0),in1) \\l in0 )\\nb1 = ( ( i2 \\ge min(mod(( abs(i1) + int(2.0) ),int(2.0)), abs(( res0 * divInt(i2,max(int(3.0), int(0.0))) ))) and abs(i1) \\g i1 ) or divInt(int(5.0),max(res0, in2)) \\le int(7.0) )\\nb0 = ( res0 - max(divInt(i2,i0), ( max(abs(int(2.0)), i1) - int(1.0) )) ) \\ge in0\\nres0 = abs(int(4.0))\\nb0 = min(res0, in1) \\le max(max(mod(mod(min(int(3.0), int(5.0)),min(mod(i2,in0), int(0.0))),max(i2, abs(divInt(int(9.0),( int(2.0) * divInt(int(5.0),divInt(i2,int(2.0))) ))))), int(4.0)), divInt(divInt(min(( in1 * i1 ), ( i2 * res0 )),int(6.0)),int(1.0)))\\nb2 = False\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 6, 6, 0, 6, 21, 21, 7, 5, 3, 11, 7, 4, 1, 0, 28, 1, 87, 20, 19, 7, 13]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 6, 6, 0, 6, 9, 9, 3, 8, 6, 5, 8, 2, 2, 6, 7, 9, 5, 4, 9, 3, 3, 8, 1, 6, 1, 6, 2, 4, 1, 9, 8, 8, 2, 9, 4, 2, 7, 0, 3, 6, 5, 3, 7, 1, 8, 5, 9, 7, 2, 0, 3, 3, 9, 7, 4, 4, 1, 7, 3, 9, 5, 0, 4, 9, 9, 1, 4, 9, 0, 4, 2, 0, 4, 3, 5, 7, 4, 4, 3, 5, 0, 1, 9, 3, 0, 8, 5, 6, 2, 0, 5, 7, 3, 5, 1, 7, 0, 4, 6, 1, 2, 9, 5, 9, 1, 9, 6, 4, 2, 2, 8, 1, 2, 8, 9, 8, 1, 6, 0, 5, 2, 7, 3, 9, 8, 1, 7, 6, 3, 3, 8, 6, 7, 8, 8, 5, 2, 6, 2, 8, 6, 5, 2, 5, 8, 5, 4, 9, 4, 3, 9, 1, 2, 1, 6, 0, 8, 9, 1, 3, 3, 7, 7, 2, 9, 8, 5, 0, 9, 2, 9, 3, 4, 5, 6, 6, 9, 1], [4, 4, 0, 3, 4, 3, 3, 2, 5, 1, 0, 4, 2, 3, 3, 2, 2, 4, 1], [2, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 2, 3, 2, 2, 1, 3, 2, 3, 3, 0, 3, 1, 1, 2, 2], [0, 0, 0], [1, 0, 1, 1, 1, 1, 0], [0, 4, 1, 3, 3, 3, 0, 4, 4, 5, 6, 2, 4, 0, 0, 5, 0, 4, 1, 4, 3, 4, 6, 5, 0, 0, 0, 2, 5, 1, 3, 3, 6, 2, 0, 3, 3, 2, 1, 2, 0, 1, 0, 5, 5, 6, 3, 4, 3, 0, 3, 4, 5, 6, 6, 2, 3, 4, 6, 4, 3, 5, 6, 0, 6, 3, 1, 5, 2, 6, 0, 3, 4, 2, 2, 5, 4, 5, 0, 1, 0, 5, 4, 4, 5, 3, 2, 1, 2, 4, 4, 5, 5, 5, 0, 4, 5, 6, 2, 3, 5, 5, 4, 4, 3, 4, 3, 5, 3, 3, 6, 1, 1, 2, 4, 2, 1, 4, 6, 6, 3, 4, 6, 6, 1, 4, 6, 4, 0, 4, 4, 3, 4, 0, 5, 3, 0, 0, 4, 5, 1, 6, 1, 4, 3, 5, 0, 6, 5, 1, 1, 0, 3, 4, 0, 6, 2, 2, 1, 3, 1, 4, 6, 4, 5, 6, 3, 5, 5, 5, 2, 6, 6, 0, 2, 6, 0, 0, 5, 6, 5, 1], [1, 0], [2, 3, 3, 1, 1, 2, 2, 2, 1, 0, 2, 1, 2, 3, 3, 0, 3, 0, 2, 3, 3, 3, 1, 3, 0, 2, 1, 0, 3, 1, 1, 3, 3, 1, 2, 3, 3, 3, 0, 3, 1, 2, 3, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 2, 1, 1, 3, 2, 2, 3, 0, 3, 2, 3, 1, 0, 1, 0, 1, 0, 0, 3, 2, 1, 0, 0, 3, 0, 2, 1, 2, 0, 3, 0, 1, 1, 3, 0, 2, 2, 1, 2, 0, 3, 2, 3, 2, 3, 2, 2, 0, 2, 1, 3, 3, 1, 1, 0, 3, 2, 0, 3, 0, 0, 1, 2, 0, 2, 2, 3, 1, 2, 1, 0, 1, 0, 0, 1, 0, 3, 3, 1, 0, 0, 3, 0, 2, 1, 3, 1, 3, 0, 1, 2, 3, 2, 2, 2, 3, 1, 0, 0, 3, 2, 2, 3, 1, 3, 0, 3, 2, 0, 0, 2, 0, 3, 3, 3, 1, 3, 1, 3, 1, 2, 1, 2, 0, 3, 3, 1, 0, 3, 1, 0, 1, 3, 1, 3, 0, 0, 3, 1, 0, 3, 3, 2, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 1, 3, 3, 3, 1, 0, 2, 2, 2, 2, 2, 3, 0, 0, 3, 0, 2, 3, 3, 3, 1, 0, 1, 2, 2, 2, 3, 2, 3, 3, 2, 2, 2, 0, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 3, 1, 1, 0, 3, 2, 3, 3, 0, 3, 0, 2, 3, 1, 2, 2, 1, 1, 1, 1, 3, 3, 0, 0, 0, 2, 0, 0, 1, 2, 3, 3, 3, 1, 1, 2, 2, 3, 2, 2, 3, 1, 2, 2, 1, 3, 2, 1, 2, 3, 2, 3, 3, 2, 2, 0, 0, 2, 1, 1, 0, 2, 1, 3, 0, 2, 2, 2, 3, 1, 3, 1, 3, 3, 0, 0, 2, 1, 1, 2, 2, 1, 3, 3, 3, 1, 2, 0, 3, 1, 1, 3, 3, 1, 3, 2, 2, 2, 3, 3, 1, 0, 0, 2, 1, 3, 1, 0, 2, 2, 1, 2, 2, 3, 1, 1, 2, 0, 2, 1, 2, 0, 1, 1, 0, 1, 3, 3, 1, 0, 0, 1, 3, 1, 0, 3, 1, 2, 0, 1, 3, 0, 2, 0, 3, 3, 2, 2, 2, 1, 2, 2, 3, 2, 0, 0, 0, 1, 1, 3, 0, 3, 2, 3, 3, 0, 1, 3, 3, 2, 3, 3, 2, 0, 0, 3, 3, 2, 1, 1, 2, 1, 1, 0, 2, 0, 2, 2, 3, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 3, 3, 0, 0, 3, 3, 3, 0, 1, 1, 1, 3, 1, 2, 3, 2, 0, 2, 3, 0, 2, 0, 1, 1, 3, 3, 2, 0, 3, 3, 2, 1, 0, 0, 2, 2, 0, 3, 0, 2, 2, 2, 0, 3, 2, 2, 1, 2, 0, 1, 0, 1, 0, 1, 2, 3, 0, 0, 3, 1, 1, 3, 2, 2, 0, 2, 2, 0, 2, 1, 1, 0, 3, 1, 1, 3, 3, 0, 3, 3, 2, 1, 2, 2, 1, 1, 1, 0, 2, 0, 1, 3, 2, 2, 3, 3, 3, 2, 1, 1, 0, 1, 3, 3, 0, 1, 0, 0, 1, 2, 1, 2, 2, 1, 3, 3, 2, 1, 3, 0, 1, 2, 1, 2, 2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 0, 1, 2, 0, 2, 0, 2, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 1, 3, 1, 3, 2, 0, 3, 3, 1, 1, 1, 2, 1, 2, 1, 2, 1, 0, 0, 3, 3, 0, 3, 0, 0, 2, 0, 0, 3, 0, 1, 1, 1, 2, 2, 2, 1, 1, 0, 0, 3, 2, 3, 1, 2, 0, 3, 0, 2, 3, 1, 2, 2, 1, 1, 0, 3, 2, 2, 1, 0, 1, 2, 2, 0, 1, 1, 2, 0, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 2, 1, 1, 1, 2, 0, 1, 2, 0, 0, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 2, 2, 0, 1, 0, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 1, 2, 0, 2, 0, 2, 2, 1, 0, 0, 1, 1, 0, 0, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2, 2, 0, 2, 1, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 0, 2, 1, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1, 2, 1, 2, 0, 2, 2, 0, 0, 1, 0, 2, 2, 2, 1, 1, 1, 2, 2, 1, 0, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 1, 2, 2, 0, 1, 2, 2, 2, 2, 2, 1, 2, 0, 1, 1, 2, 2, 0, 0, 0, 2, 1, 0, 2, 0, 2, 0, 2, 2, 0, 1, 1, 0, 0, 2, 2, 1, 2, 2, 0, 2, 2, 1, 0, 2, 0, 0, 1, 0, 2, 2, 1, 2, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 1, 1, 0, 1, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 1, 2, 1, 2, 2, 0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 102, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( min(min(int(1.0), int(9.0)), mod(( divInt(int(6.0),i0) - mod(int(6.0),( abs(max(in1, max(i1, mod(max(abs(min(int(0.0), max(in0, ( int(6.0) + in0 )))), abs(int(9.0))),int(9.0))))) - min(min(int(3.0), mod(max(max(min(in0, max(int(8.0), ( min(i0, int(6.0)) - in1 ))), divInt(in1,in2)), int(5.0)),int(8.0))), res0) )) ),i2)) + int(2.0) ) \\le in1 and abs(i0) \\le min(i0, in2) ):{:\\nloopBreak% = 0\\nwhile i0 \\l in1:{:\\nif i1 \\ge int(2.0):{:\\nin1 *= int(6.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif ( b2 and not int(7.0) \\le int(9.0) ):{:\\nin0 = int(5.0)\\n:}else:{:\\nb1 = ( not not in1 \\ge int(4.0) or int(9.0) \\ge divInt(res0,mod(int(3.0),int(3.0))) )\\n:}\\n:}\\nb1 = True\\nif max(( mod(min(in2, max(( min(int(8.0), i0) + int(1.0) ), i0)),int(6.0)) - i0 ), i2) == max(( int(1.0) * in2 ), i1):{:\\nif min(in0, ( int(6.0) - ( in0 - min(res0, int(2.0)) ) )) != int(4.0):{:\\nb0 = ( min(i2, mod(mod(int(1.0),mod(i0,min(divInt(min(mod(abs(mod(mod(in0,mod(int(9.0),min(abs(int(8.0)), int(8.0)))),in0)),min(divInt(i2,max(i1, i2)), int(2.0))), ( i0 * ( ( abs(int(9.0)) * ( int(4.0) + i1 ) ) - int(2.0) ) )),i0), in2))),int(7.0))) \\g in2 or abs(min(int(0.0), res0)) \\l in0 )\\n:}else:{:\\nb2 = max(in1, ( int(3.0) * min(int(6.0), max(in0, int(5.0))) )) \\le divInt(max(( mod(( abs(int(3.0)) * i0 ),in0) * max(( mod(max(int(7.0), max(in1, min(mod(in2,res0), ( res0 * min(min(max(int(1.0), max(int(8.0), abs(int(5.0)))), mod(int(9.0),mod(i2,min(abs(int(7.0)), in0)))), min(int(2.0), in1)) )))),int(0.0)) * abs(int(3.0)) ), abs(res0)) ), in1),max(int(3.0), in0))\\n:}\\n:}else:{:\\nif min(min(( ( in2 - int(9.0) ) * res0 ), int(7.0)), i0) == res0:{:\\nif in0 \\ge i1:{:\\nb0 = not ( ( in2 \\ge i2 or b0 ) or ( True and res0 == ( max(mod(int(4.0),max(min(min(int(4.0), i0), mod(( divInt(divInt(( abs(in0) + in1 ),max(i2, ( min(max(abs(int(1.0)), i2), int(7.0)) - ( mod(( abs(( min(abs(( divInt(mod(in2,int(3.0)),int(9.0)) - mod(in1,in2) )), i0) * int(5.0) )) * i1 ),int(0.0)) + divInt(max(int(4.0), int(9.0)),i0) ) ))),abs(divInt(abs(min(in2, abs(in1))),( max(int(9.0), ( divInt(int(1.0),int(4.0)) + int(9.0) )) + int(0.0) )))) * min(abs(in1), in2) ),in0)), ( i2 - i1 ))), int(4.0)) + divInt(min(min(max(int(2.0), int(0.0)), divInt(divInt(min(mod(( max(int(4.0), ( mod(int(3.0),min(( int(5.0) * ( max(( min(abs(( ( i2 + in1 ) * divInt(int(7.0),int(4.0)) )), in1) + ( int(4.0) * max(in2, mod(divInt(( max(int(3.0), min(int(5.0), min(min(in2, in2), ( int(0.0) * int(1.0) )))) + mod(( int(9.0) - abs(max(max(int(3.0), ( i0 - max(int(0.0), int(8.0)) )), abs(min(int(5.0), abs(mod(divInt(mod(min(min(int(6.0), in1), in2),( int(2.0) + abs(int(0.0)) )),res0),divInt(( int(5.0) + ( divInt(abs(int(7.0)),int(3.0)) * ( i2 * divInt(int(5.0),( in0 - int(1.0) )) ) ) ),int(7.0)))))))) ),in2) ),int(0.0)),abs(abs(int(4.0))))) ) ), in2) * in1 ) ), int(6.0))) * max(int(1.0), in1) )) + max(int(2.0), divInt(in0,int(9.0))) ),max(in1, mod(in0,abs(max(mod(( ( int(5.0) * divInt(( min(( in2 * in0 ), in0) - int(9.0) ),int(1.0)) ) + abs(res0) ),abs(mod(abs(min(i1, int(9.0))),max(max(divInt(max(abs(divInt(i1,i2)), min(abs(mod(int(6.0),int(4.0))), mod(int(2.0),int(2.0)))),in1), mod(i2,( ( max(int(8.0), int(1.0)) * int(2.0) ) + ( i1 + mod(in1,res0) ) ))), ( divInt(res0,mod(( ( divInt(in0,abs(max(in1, res0))) - max(min(min(res0, int(8.0)), int(9.0)), int(8.0)) ) + min(int(1.0), mod(abs(( i1 * ( abs(in1) * divInt(res0,int(6.0)) ) )),int(0.0))) ),max(max(divInt(in1,max(abs(divInt(int(5.0),i0)), in1)), divInt(( in1 - max(in0, ( divInt(( in1 * min(( ( int(2.0) - mod(i0,int(7.0)) ) - in2 ), int(3.0)) ),in0) - int(9.0) )) ),divInt(max(i0, i0),min(int(8.0), int(1.0))))), max(( divInt(in1,divInt(mod(in2,mod(int(7.0),int(6.0))),i1)) - abs(int(3.0)) ), int(3.0))))) + max(abs(res0), min(abs(( int(8.0) + ( ( int(6.0) * int(7.0) ) * int(8.0) ) )), i1)) ))))), mod(in1,int(8.0))))))), abs(( mod(min(min(max(mod(int(5.0),int(2.0)), in0), int(6.0)), min(abs(in2), int(2.0))),i0) * res0 ))),int(8.0)),divInt(int(6.0),( ( int(5.0) + abs(abs(divInt(int(2.0),max(in2, int(5.0))))) ) + ( int(8.0) - mod(mod(max(i1, i1),max(divInt(i0,int(5.0)), in0)),int(4.0)) ) )))), abs(in1)),int(9.0)) ) ) )\\n:}\\n:}else:{:\\nb1 = True\\n:}\\n:}\\nb1 = not not divInt(i0,mod(res0,mod(divInt(divInt(int(4.0),i2),int(3.0)),abs(mod(( ( ( ( i2 + divInt(int(9.0),divInt(int(1.0),int(2.0))) ) - max(int(1.0), min(( i1 - abs(max(int(6.0), int(0.0))) ), int(8.0))) ) + ( int(9.0) - ( int(1.0) * ( int(3.0) + in0 ) ) ) ) - i1 ),max(min(in1, min(res0, in1)), ( in2 - res0 ))))))) == max(in0, int(3.0))\\nb1 = int(7.0) \\le int(7.0)\\nb0 = divInt(( divInt(int(2.0),int(9.0)) + in2 ),in2) \\g max(( min(int(8.0), ( in2 + min(i2, ( max(int(5.0), ( ( int(0.0) * int(9.0) ) + res0 )) - max(mod(( int(2.0) * res0 ),int(9.0)), divInt(( i0 - int(3.0) ),int(4.0))) )) )) * ( i2 - min(int(5.0), min(res0, ( divInt(mod(max(i0, ( max(i0, int(6.0)) * int(6.0) )),int(9.0)),( mod(in2,res0) * in2 )) + i1 ))) ) ), int(1.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 19, 19, 8, 11, 180, 180, 19, 11, 7, 37, 19, 18, 3, 7, 182, 2, 729, 194, 175, 96, 99]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [1, 2, 1, 1, 2, 1, 1], [0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 3, 6, 6, 3, 0, 4, 6, 4, 6, 2, 1, 0, 0, 4, 4, 6, 6, 5, 7, 7, 1, 5, 3, 8, 5, 9, 6, 4, 7, 6, 3, 9, 1, 5, 8, 9, 5, 3, 2, 2, 9, 9, 7, 0, 7, 1, 1], [2, 1, 0, 2], [0, 0, 1, 2, 0], [], [1, 1, 1, 0, 1, 0], [0, 0, 0, 0], [0, 1], [1], [0, 0], [5, 2, 3, 6, 4, 2, 0, 4, 0, 3, 0, 4, 0, 1, 3, 3, 3, 4, 4, 2, 1, 5, 6, 5, 5, 0, 1, 6, 2, 6, 5, 0, 1, 3, 4, 5, 4, 3, 4, 1, 5, 2, 5, 1, 0, 0, 2, 4, 6, 0, 3, 6, 4, 0, 3, 6, 1, 2, 4, 5, 1, 6, 2, 4, 1, 2, 4, 2, 5], [1], [2, 3, 3, 3, 0, 3, 2, 2, 3, 3, 1, 2, 0, 0, 1, 0, 2, 2, 0, 2, 1, 3, 2, 2, 0, 2, 3, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 2, 0, 3, 3, 3, 1, 3, 2, 3, 0, 3, 3, 1, 2, 2, 1, 3, 3, 3, 0, 0, 2, 2, 2, 3, 2, 3, 1, 0, 3, 2, 3, 1, 0, 2, 1, 0, 2, 3, 1, 3, 2, 2, 2, 0, 1, 0, 2, 3, 0, 3, 3, 0, 3, 1, 2, 2, 3, 2, 2, 0, 1, 1, 1, 3, 1, 3, 3, 2, 3, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 2, 3, 0, 2, 3, 1, 2, 1, 1, 2, 1, 1, 1, 0, 3, 1, 0, 0, 2, 3, 2, 0, 3, 0, 2, 3, 2, 3, 0, 0, 3, 2, 1, 0, 3, 2, 0, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 0, 3, 2, 3, 0, 3, 1, 3, 1, 0, 2, 3, 0, 0, 3, 0, 0, 2, 0, 0, 3, 3, 2, 3, 3, 1, 2, 0, 3, 1, 3, 2, 3, 2, 2, 0, 2, 2, 0, 1, 0, 0, 1, 1, 1, 3, 0, 0, 1, 2, 1, 3, 3, 3, 1, 2, 3, 1, 0, 0, 2, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [2, 2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 0, 1, 0, 0, 1, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 2, 0, 0, 2, 1, 1, 0, 0, 1, 2, 1, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 1, 2, 2, 0, 1, 2, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 2, 2, 2, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 2, 2, 1, 0, 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, 2, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 74, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = mod(abs(abs(min(in2, abs(mod(divInt(abs(abs(int(6.0))),mod(i2,in0)),int(6.0)))))),res0) == mod(divInt(in1,( int(3.0) + min(divInt(( i2 - mod(abs(i0),in1) ),( int(6.0) + int(6.0) )), int(3.0)) )),( i0 * in0 ))\\nif i0 \\g in1:{:\\nb0 = divInt(i0,max(min(max(int(0.0), abs(mod(abs(i1),min(max(int(4.0), ( ( int(6.0) * min(min(max(in0, in0), ( ( mod(min(divInt(max(int(4.0), in0),max(mod(abs(int(6.0)),in1), mod(int(2.0),in1))), ( abs(int(1.0)) * max(mod(( mod(i2,int(0.0)) - i1 ),mod(max(in2, max(max(res0, min(int(0.0), divInt(( max(( divInt(in2,int(4.0)) + int(4.0) ), int(6.0)) - abs(int(6.0)) ),min(min(mod(abs(int(5.0)),in2), i0), divInt(i1,res0))))), i2)),( res0 + in2 ))), i0) )),i1) + int(7.0) ) * int(7.0) )), divInt(max(max(int(1.0), min(int(5.0), ( in0 - ( min(in1, ( max(int(3.0), ( int(8.0) - int(5.0) )) + divInt(int(9.0),int(6.0)) )) + int(4.0) ) ))), in2),abs(int(7.0)))) ) * in1 )), in0)))), mod(max(( in1 * max(i1, ( max(( abs(in2) - i2 ), max(( int(6.0) + in2 ), abs(( i1 - ( i0 * int(3.0) ) )))) * ( ( i0 + i2 ) + int(9.0) ) )) ), mod(mod(int(1.0),in1),res0)),min(mod(max(i0, max(int(5.0), abs(int(8.0)))),in0), ( max(res0, in1) - max(i0, in0) )))), divInt(res0,i1))) \\l abs(abs(mod(min(max(int(9.0), mod(i2,abs(int(5.0)))), max(( max(( divInt(in1,( mod(in2,int(3.0)) - i1 )) - res0 ), int(2.0)) * int(2.0) ), int(9.0))),min(i2, in1))))\\ni1 -= int(9.0)\\n:}\\nif b1:{:\\nb2 = ( int(7.0) * max(max(max(int(0.0), ( max(int(7.0), i2) + in1 )), ( int(1.0) + i2 )), int(1.0)) ) == in2\\n:}\\nb0 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 49, 49, 4, 5, 0, 6, 4, 2, 1, 2, 69, 1, 244, 64, 63, 33, 32]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 0], [0], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 7, 0, 9, 8, 3, 5, 5, 4, 4, 8, 0, 2], [0, 3], [1, 0, 2], [], [1, 0, 0, 1], [0, 0], [0, 2], [], [0], [5, 0, 3, 1, 5, 3, 5, 5, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 1, 3, 0, 3, 1, 3, 2, 3, 1, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 0, 1, 0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 0, 3, 1, 2, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1], [2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 1, 1, 0, 0, 2, 2], [2, 2, 1], [1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(max(( abs(min(min(int(8.0), int(6.0)), abs(in2))) * min(int(7.0), abs(( abs(int(0.0)) * int(9.0) ))) ), min(mod(max(int(8.0), max(int(3.0), max(int(5.0), min(int(5.0), i0)))),int(4.0)), in0))) \\l i1:{:\\nin2 = in0\\nb1 = b0\\n:}\\nb2 = not int(4.0) \\ge mod(mod(divInt(( min(abs(in2), abs(int(8.0))) - mod(int(0.0),int(2.0)) ),in2),i2),i0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 14, 14, 2, 3, 0, 4, 2, 2, 0, 1, 10, 1, 48, 8, 17, 3, 5]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [2, 0, 2, 0, 2, 1, 2, 0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 9, 6, 5, 3, 9, 5, 6, 0, 4, 2, 9, 4, 2, 8], [0, 4, 1, 1, 1], [2, 1, 1, 1, 2], [1], [1, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0], [3, 1, 0, 0], [0], [1, 0, 1], [4, 4, 5, 1, 6, 1, 5, 2, 1, 6, 6, 5, 2, 3, 3, 4, 3, 2, 3, 2, 6, 2, 4, 0, 1, 4], [0, 0, 0, 1], [2, 0, 0, 2, 0, 3, 2, 1, 1, 3, 1, 2, 0, 1, 0, 1, 0, 1, 3, 2, 0, 3, 1, 1, 3, 0, 1, 0, 3, 1, 3, 0, 2, 0, 0, 3, 2, 2, 0, 1, 1, 3, 3, 2, 2, 3, 0, 0, 3, 3, 2, 2, 1, 0, 3, 2, 1, 0, 0, 2, 0, 0, 2, 3, 3, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 2, 1, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1], [1, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in1 - in1 ) \\l ( in2 + min(mod(int(7.0),int(8.0)), abs(int(9.0))) ):{:\\nb2 = divInt(i1,int(6.0)) \\le res0\\nif int(5.0) \\g i1:{:\\nb1 = ( int(3.0) \\g max(( in2 + abs(int(9.0)) ), int(5.0)) or min(i2, int(6.0)) \\g i1 )\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nres0 = max(int(0.0), abs(res0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\nb1 = b2\\n:}else:{:\\nin2 = ( i2 - in0 )\\n:}\\n:}\\nin0 = abs(( divInt(in1,int(4.0)) - int(2.0) ))\\nin0 += abs(min(( ( min(i2, in0) - abs(min(mod(( int(9.0) + i2 ),abs(divInt(int(4.0),res0))), i2)) ) * ( in1 * i0 ) ), ( max(max(int(2.0), i1), in1) + int(8.0) )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 4, 7, 16, 16, 5, 5, 1, 9, 5, 4, 1, 3, 26, 4, 69, 15, 16, 11, 5]}, {"genotype": [[0], [1], [1], [], [1], [1], [8], [], [], [], [], [], [], [], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [7, 0], [1, 2], [2], [0], [0, 0, 0, 0, 1, 1], [0, 0], [2, 2, 2, 3], [], [], [0, 3], [], [0, 1, 0, 1], [], [], [], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not not not ( i0 \\g int(7.0) and in0 == int(0.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 2, 1, 1, 6, 2, 4, 0, 0, 2, 0, 4, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [0, 1], [0], [1], [], [1], [0], [], [], [], [4, 3], [], [2, 0, 1, 2, 1, 0], [0, 1], [], [2], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( in1 * int(0.0) ) \\l mod(int(1.0),in0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 6, 2, 0, 1, 1]}, {"genotype": [[0], [1], [0], [], [0], [1], [8], [1], [1], [], [1], [0], [], [], [], [3], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in0 \\g int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 1], [1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 4, 0, 4, 1, 3, 2, 4, 2, 7, 6, 1, 2, 3, 4, 8, 1, 8, 4, 3, 5, 4, 3, 0, 2, 7, 5, 1, 4, 3, 2, 3, 5, 5, 4, 6, 8, 5, 4, 4, 4, 2, 9, 2, 2], [0, 2], [0], [], [1, 1], [0, 0], [], [], [], [0, 3, 0, 1, 2, 0, 6, 4, 1, 5, 2, 6, 4, 5, 2, 2, 5, 6, 3, 3, 4, 6, 1, 2, 0, 1, 5, 4, 5, 5, 4, 4, 0, 3, 2, 0, 5, 5, 3, 2, 6, 5, 5, 0, 2, 3, 5, 6, 6, 2, 4, 2, 2, 5, 2, 5, 0, 4], [1, 0], [3, 3, 1, 0, 0, 3, 1, 0, 0, 2, 3, 3, 2, 0, 3, 3, 3, 3, 2, 1, 2, 0, 1, 2, 0, 0, 2, 2, 3, 3, 0, 1, 2, 2, 3, 2, 0, 3, 0, 3, 3, 1, 2, 1, 0, 1, 0, 1, 0, 1, 2, 0, 3, 0, 0, 2, 3, 1, 0, 3, 2, 1, 1, 1, 3, 0, 3, 2, 1, 2, 3, 3, 2, 3, 1, 0, 3, 2, 2, 0, 3, 0, 3, 0, 2, 1, 3, 2, 2, 1, 3, 1, 3, 0, 2, 3, 3, 1, 3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 2, 0, 0, 0, 0, 2, 0, 3, 2, 0, 0, 3, 3, 2, 0, 1, 2, 3, 0, 2, 1, 2, 1, 3, 1, 0, 1, 3, 2, 0, 3, 3, 1, 3, 2, 2, 2, 2, 2, 1, 3, 0, 3, 2, 0, 3, 0, 2, 2, 0, 1, 1, 3, 3, 3, 2, 2, 2, 0, 3, 2, 3, 1, 2, 2, 0, 0, 1, 0, 0, 1, 0, 0, 3, 3, 1, 2, 0, 0, 1, 3, 0, 2, 0, 3, 1, 2, 3, 3, 1, 3, 2, 0, 1, 1, 0, 0, 2, 3, 3, 0, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 2, 1, 2, 2, 0, 2, 0, 1, 2, 0, 0, 2, 0, 0, 1, 2, 0, 0, 1, 1, 1, 1, 2, 0, 2, 1, 0, 0, 2, 2, 2, 0, 0, 1, 1, 0, 2, 2, 1, 0, 1, 2, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 2, 2, 1, 1, 2, 2, 2, 1, 0, 1, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= max(min(int(1.0), in0), i0)\\nloopBreak% = 0\\nwhile min(int(0.0), i1) \\l i2:{:\\ni0 = ( max(min(divInt(res0,min(min(max(max(divInt(int(4.0),( in1 - int(4.0) )), ( i1 + in2 )), ( ( max(abs(i2), int(0.0)) - ( mod(max(( res0 + abs(in1) ), abs(min(int(4.0), ( int(1.0) * in2 )))),int(3.0)) * i2 ) ) - int(2.0) )), i2), int(4.0))), ( in2 - abs(res0) )), in0) * ( min(int(2.0), in0) * max(divInt(int(7.0),int(6.0)), int(1.0)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = abs(in1) == min(( int(2.0) * ( min(abs(( min(int(3.0), res0) - min(divInt(( i1 + max(i2, abs(i0)) ),divInt(int(4.0),min(( mod(int(8.0),min(int(1.0), max(i1, mod(max(max(int(8.0), max(int(4.0), mod(int(3.0),int(5.0)))), int(4.0)),divInt(int(3.0),abs(int(0.0))))))) - ( in2 + in1 ) ), in2))), in2) )), ( in1 + min(mod(in1,i0), abs(max(divInt(in0,int(2.0)), mod(min(i2, mod(int(7.0),divInt(int(5.0),min(int(1.0), i0)))),int(4.0))))) )) * abs(divInt(in2,abs(abs(int(3.0))))) ) ), min(divInt(mod(divInt(( ( int(2.0) * min(in2, max(divInt(in0,max(i2, ( divInt(res0,int(3.0)) * int(5.0) ))), min(abs(abs(( ( mod(in2,max(( min(int(5.0), ( mod(in2,i0) * int(4.0) )) - i2 ), in0)) - int(6.0) ) + in2 ))), res0))) ) * max(abs(int(8.0)), mod(res0,i2)) ),int(5.0)),min(in1, mod(i2,min(int(4.0), ( max(max(int(4.0), min(( i2 * int(4.0) ), int(2.0))), in2) + i2 ))))),( min(max(in2, int(9.0)), int(2.0)) - divInt(i0,in1) )), int(2.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 47, 47, 2, 1, 0, 2, 2, 0, 0, 0, 58, 2, 215, 53, 59, 28, 26]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 2, 1, 0, 1, 2, 2, 1, 0], [1, 1, 0], [1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 5, 9, 8, 2, 5, 2, 8, 6, 3, 4, 4, 1, 5, 4, 0, 7, 4, 9, 3, 0, 6, 8, 9, 1, 3, 7, 7, 8, 3, 1, 9, 1, 6, 2, 7, 8, 2, 8, 0, 4, 6, 0, 6, 9, 0], [0, 1, 4, 5, 0, 3, 1], [2, 2, 1, 1, 0, 1], [1, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 0, 2, 3, 0], [], [1], [1, 4, 6, 3, 1, 1, 6, 1, 6, 1, 6, 6, 5, 0, 1, 1, 5, 2, 2, 2, 1, 4, 6, 0, 6, 6, 6, 1, 6, 3, 6, 0, 5, 0, 2, 4, 3, 3, 6, 1, 6, 0, 2, 1, 0, 0, 1, 0, 1], [1, 0, 0], [1, 0, 3, 2, 2, 2, 2, 1, 0, 2, 1, 1, 2, 2, 3, 1, 2, 0, 3, 2, 1, 3, 0, 2, 2, 3, 2, 1, 3, 2, 2, 3, 0, 0, 2, 1, 1, 2, 2, 3, 2, 0, 3, 0, 2, 0, 3, 3, 0, 1, 2, 1, 2, 0, 3, 0, 3, 3, 0, 3, 0, 0, 3, 3, 0, 2, 3, 1, 0, 1, 2, 2, 0, 1, 1, 1, 3, 3, 2, 1, 2, 2, 0, 1, 3, 2, 0, 1, 1, 1, 2, 3, 0, 1, 0, 3, 2, 1, 0, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 0, 2, 3, 1, 2, 1, 3, 1, 1, 0, 1, 0, 0, 1, 2, 0, 0, 3, 1, 0, 1, 0, 0, 2, 3, 2, 2, 2, 3, 1, 0, 3, 1, 0, 3, 1, 3, 2, 0, 3, 1, 0, 1, 0, 3, 3, 0, 3, 2, 3, 1, 0, 1, 3, 0, 1, 0, 2, 3, 3, 2, 0, 3, 2, 2, 0, 0, 1, 0, 3, 3, 2, 1, 2, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 2, 0, 2, 2, 1, 0, 0, 1, 2, 1, 0, 1, 0, 2, 2, 2, 1, 2, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 0, 0, 1, 2, 0, 2, 0, 2, 2, 1, 2, 2, 2], [2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 2, 0, 2, 2, 1, 2, 2, 0, 2, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= int(6.0)\\nb2 = ( in1 \\l max(divInt(( divInt(mod(int(6.0),res0),( int(5.0) + int(9.0) )) - ( mod(abs(int(8.0)),mod(in0,min(( int(2.0) - abs(i1) ), divInt(( abs(( int(5.0) + max(divInt(( min(i1, res0) - divInt(int(2.0),int(8.0)) ),( mod(min(( i1 + max(res0, divInt(i1,abs(max(res0, int(6.0))))) ), ( int(3.0) - mod(res0,min(in2, max(min(i0, abs(i1)), i1))) )),abs(abs(in2))) + mod(max(int(4.0), i2),int(4.0)) )), ( mod(i2,int(1.0)) - int(5.0) )) )) + int(4.0) ),abs(min(divInt(int(0.0),( mod(i2,int(7.0)) * min(mod(i1,int(4.0)), int(9.0)) )), int(3.0))))))) - ( max(in1, int(0.0)) * res0 ) ) ),max(mod(int(6.0),i0), int(8.0))), min(int(9.0), max(int(1.0), max(int(3.0), min(int(7.0), max(res0, ( max(int(7.0), ( int(8.0) + max(int(3.0), int(1.0)) )) * res0 ))))))) or int(9.0) \\g res0 )\\nloopBreak% = 0\\nwhile b2:{:\\ni1 = res0\\nb1 = not ( int(1.0) \\le mod(in0,res0) and max(int(6.0), i0) != int(2.0) )\\nb1 = in2 \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b0:{:\\nif ( max(divInt(( ( min(int(7.0), i2) * abs(int(8.0)) ) - in1 ),min(int(2.0), min(( in0 * max(int(8.0), in0) ), int(0.0)))), res0) * abs(min(i1, abs(( min(int(4.0), res0) + int(6.0) )))) ) \\ge abs(i0):{:\\nb1 = int(0.0) \\g i2\\n:}else:{:\\ni1 = ( abs(max(( i0 * abs(divInt(( i0 + i1 ),int(6.0))) ), i0)) - abs(abs(( int(9.0) - mod(i1,int(0.0)) ))) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 47, 47, 7, 6, 2, 12, 7, 5, 0, 1, 49, 3, 185, 45, 47, 25, 21]}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 1, 2, 1, 0, 0, 2, 0, 2, 2, 0, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 7, 3, 7, 2, 6, 0, 5, 6, 3, 3, 9, 6, 0, 1, 2, 4, 1, 2, 3, 0, 6, 6, 1, 1, 1], [3, 3, 4, 5, 0, 0, 1, 5, 5, 3], [2, 2, 0, 0, 0, 0, 1], [1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 3, 2, 0], [], [0, 1], [1, 0, 6, 3, 6, 5, 4, 0, 0, 4, 0, 1, 2, 6, 0, 6, 2, 4, 4, 6, 6, 0, 4, 2, 5, 5, 2, 0, 6, 6, 6, 4, 3, 3, 5, 0, 1, 1, 6, 3, 1, 3, 5, 0, 4, 3, 6, 0, 1, 5, 0], [1, 0, 1, 0], [0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 3, 0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 1, 2, 3, 3, 1, 1, 1, 2, 0, 2, 2, 0, 2, 0, 2, 1, 3, 0, 2, 3, 2, 1, 3, 1, 2, 0, 3, 2, 2, 3, 1, 1, 0, 1, 1, 1, 2, 1, 2, 3, 3, 2, 0, 0, 2, 3, 0, 0, 0, 2, 3, 2, 1, 3, 2, 0, 1, 0, 1, 0, 3, 1, 3, 2, 3, 1, 0, 2, 3, 0, 3, 0, 0, 0, 0, 1, 0, 2, 1, 1, 3, 3, 0, 0, 3, 2, 1, 0, 0, 3, 3, 2, 0, 1, 2, 2, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [1, 1, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 2, 1, 2, 1, 0, 0, 0, 1, 2, 1, 1], [1, 2, 1, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 1, 2, 2, 2, 2], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\ge ( int(2.0) - i0 ):{:\\nres0 *= divInt(divInt(in0,res0),in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in1 \\ge int(4.0):{:\\ni0 = i0\\nin1 -= ( max(i0, i1) + max(( min(i2, ( mod(divInt(res0,mod(i0,res0)),i2) - ( in1 + int(7.0) ) )) + in1 ), res0) )\\nb2 = int(3.0) \\le ( abs(abs(int(7.0))) * int(2.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(6.0) != ( res0 + mod(( i0 + divInt(in1,( int(0.0) * abs(i2) )) ),divInt(abs(mod(int(5.0),min(int(6.0), mod(in2,abs(( ( min(int(3.0), int(3.0)) + in2 ) + int(9.0) )))))),int(6.0))) ):{:\\nb2 = not int(0.0) \\l ( int(1.0) + ( abs(abs(( i2 * i0 ))) * ( max(res0, res0) - res0 ) ) )\\nloopBreak% = 0\\nwhile not divInt(max(divInt(int(2.0),abs(divInt(in1,int(4.0)))), in0),int(1.0)) \\l in0:{:\\nif b0:{:\\nb0 = ( max(int(2.0), abs(( max(int(3.0), in2) * ( min(i0, min(i1, i1)) * res0 ) ))) \\g in0 or not b0 )\\n:}else:{:\\ni1 = int(0.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in0 != ( int(6.0) * int(6.0) ):{:\\nb0 = min(max(in2, i0), abs(divInt(int(1.0),in1))) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = max(max(mod(res0,int(1.0)), mod(( int(1.0) * i0 ),i1)), in2) \\ge i0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 6, 9, 27, 27, 10, 7, 1, 16, 10, 6, 0, 2, 51, 4, 134, 35, 25, 21, 16]}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1], [2, 1, 2, 1, 2, 1, 1], [1, 1, 1], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 1, 0, 4, 9, 7, 4], [5, 3, 5], [0, 1, 2, 0], [1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0], [1, 3, 3, 1, 0, 0], [1, 1], [], [0, 3, 0, 6, 2, 2, 4, 1, 0, 4], [1, 1], [2, 0, 3, 1, 2, 0, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 3, 3, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0], [0, 1, 2], [0, 0, 0, 0, 2, 0], [0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\ni0 += divInt(in0,min(int(9.0), mod(i0,( int(7.0) + int(1.0) ))))\\nloopBreak% = 0\\nwhile ( ( False or b0 ) or res0 != i2 ):{:\\nb1 = ( ( i2 + in1 ) + i1 ) \\ge ( i0 * int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nin1 += max(abs(int(4.0)), int(9.0))\\nb0 = int(7.0) != int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 8, 8, 3, 4, 2, 9, 3, 6, 2, 0, 10, 2, 25, 6, 3, 6, 2]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 3, 6, 7, 9, 9, 4, 8, 2, 7], [1], [2], [], [1], [0], [], [], [], [5, 6, 5, 6, 2, 0, 4, 2, 6, 5, 1, 3], [], [3, 2, 0, 3, 1, 2, 1, 2, 2, 3, 1, 2, 3, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 1, 0, 0, 0, 2, 1, 3, 1, 2, 3, 1, 2, 0, 3, 1, 1, 1, 0, 3, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 2, 0, 1, 1], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [1, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(( in2 + max(int(6.0), ( int(3.0) * ( ( max(int(3.0), ( max(mod(res0,( in2 + res0 )), mod(( ( ( i2 + int(6.0) ) + i0 ) + in1 ),i2)) * ( int(7.0) + abs(int(9.0)) ) )) + ( min(int(9.0), divInt(res0,max(int(4.0), int(8.0)))) + int(2.0) ) ) + in2 ) )) ), max(int(7.0), i1)) \\g in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 11, 11, 1, 1, 0, 1, 1, 0, 0, 0, 12, 0, 45, 14, 8, 11, 3]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1], [5, 3], [5], [1], [], [1], [0], [], [], [], [5, 1, 0], [1], [1, 2, 1, 0, 0], [1], [], [0], [1]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(5.0) != mod(int(3.0),in2)\\ni1 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 5, 1, 0, 1, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 6, 4, 8, 7, 0, 8, 5, 7, 0, 3, 7, 5, 4, 3, 6, 8, 3, 4, 7, 6, 5, 5, 2, 0, 8, 0, 2, 4, 7, 0], [4], [1], [], [1], [0], [], [], [], [5, 0, 6, 5, 3, 4, 2, 3, 3, 3, 0, 1, 0, 3, 4, 5, 1, 6, 0, 1, 0, 1, 2, 2, 4, 6, 6, 5, 1, 0], [1], [3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 3, 1, 1, 2, 3, 0, 1, 2, 2, 1, 2, 1, 1, 3, 2, 1, 2, 1, 1, 2, 3, 1, 0, 1, 0, 2, 2, 2, 1, 3, 3, 0, 0, 1, 2, 1, 1, 1, 3, 1, 2, 1, 3, 0, 2, 1, 3, 0, 3, 2, 3, 1, 3, 3, 2, 3, 3, 0, 2, 2, 0, 2, 3, 2, 1, 0, 0, 1, 2, 1, 0, 3, 1, 2, 0, 0, 2, 3, 2, 0, 3, 0, 2, 2, 3, 0, 3, 3, 0, 0, 2, 0, 0, 3, 3, 0, 1, 3, 2, 0, 1, 3, 1, 0, 1, 1, 0, 2, 0, 3, 3, 2, 2, 2, 0, 3, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 1, 0, 1, 2, 0, 0, 0, 2, 2, 2], [2, 0, 1, 2, 2, 1, 1, 0, 2, 2, 0, 1, 2, 2, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= min(divInt(int(1.0),max(( min(abs(min(divInt(min(max(int(4.0), int(6.0)), ( max(i0, int(4.0)) + divInt(( int(8.0) - ( int(7.0) * int(0.0) ) ),max(mod(int(8.0),divInt(int(5.0),int(7.0))), mod(min(int(0.0), res0),int(3.0)))) )),in2), divInt(( divInt(int(7.0),min(min(in0, in1), int(5.0))) * divInt(int(4.0),int(3.0)) ),int(6.0)))), abs(int(8.0))) - divInt(int(3.0),max(i2, ( int(4.0) - max(in0, min(mod(min(int(7.0), min(abs(( abs(abs(in0)) + mod(( in0 * ( max(divInt(int(6.0),i0), i1) * int(5.0) ) ),mod(int(5.0),i0)) )), abs(int(2.0)))),mod(in0,in1)), mod(abs(( in2 + min(i1, ( mod(max(res0, min(max(i0, i1), divInt(i0,i1))),abs(min(i2, int(0.0)))) - min(( i2 * int(8.0) ), min(int(0.0), in1)) )) )),int(2.0)))) ))) ), int(4.0))), res0)\\nb1 = ( res0 * abs(abs(divInt(( divInt(in2,abs(int(7.0))) + i1 ),int(0.0)))) ) \\le i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 32, 32, 1, 1, 0, 1, 1, 0, 0, 0, 30, 1, 130, 34, 35, 15, 20]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 4, 6, 5, 2, 9, 5, 5, 1, 4, 3, 6, 3, 7, 1, 7, 3, 9, 2, 4, 1, 9, 7, 4, 8, 8, 3, 3, 1, 3, 7, 8, 7, 8, 1, 3, 0, 9, 4, 4, 1, 2, 4, 4, 0, 4, 5, 4, 0, 1, 0, 0, 0, 3, 5, 6, 7, 0, 6, 4, 2, 3, 9, 1, 5, 2, 8, 5, 1, 9, 6, 6, 5, 7, 6, 9, 2, 6, 9, 2], [3, 3, 5, 1, 0, 4], [2, 1, 2, 1, 2, 0], [1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 3, 2, 0, 1, 3, 1, 1], [0, 0, 1, 1], [0, 1], [2, 3, 4, 0, 3, 6, 5, 1, 6, 6, 5, 4, 3, 2, 6, 4, 4, 5, 2, 3, 2, 6, 5, 0, 4, 3, 3, 6, 0, 4, 4, 2, 2, 1, 2, 1, 4, 1, 2, 0, 3, 2, 4, 3, 3, 4, 0, 1, 6, 6, 6, 3, 0, 6, 4, 5, 1, 5, 6, 4, 5, 5, 2, 6, 3, 2, 1, 0, 4, 5, 0, 5, 3, 3, 4, 1, 0, 1, 2, 4, 1, 6, 2, 5, 1, 4, 5, 0, 5, 4, 3, 3, 4, 5, 3, 0, 0, 1, 0, 1, 4, 6, 1, 0, 1, 4, 5, 2, 2, 3, 3, 3, 5, 1], [0, 1, 1], [0, 2, 0, 2, 1, 2, 1, 3, 2, 3, 1, 3, 2, 1, 0, 3, 2, 0, 1, 3, 3, 2, 2, 2, 1, 1, 3, 3, 2, 0, 2, 3, 0, 2, 1, 0, 0, 0, 1, 2, 3, 1, 3, 2, 0, 0, 2, 0, 1, 3, 1, 3, 2, 0, 2, 2, 0, 2, 3, 2, 3, 3, 2, 3, 0, 0, 3, 2, 2, 2, 3, 1, 2, 1, 3, 0, 3, 0, 1, 2, 1, 2, 3, 1, 1, 0, 1, 0, 2, 3, 2, 0, 0, 0, 2, 0, 3, 1, 3, 0, 0, 2, 1, 2, 0, 2, 3, 2, 2, 0, 1, 3, 2, 2, 1, 0, 0, 3, 1, 2, 3, 1, 0, 0, 2, 3, 0, 0, 3, 3, 2, 0, 0, 3, 3, 0, 2, 1, 1, 1, 3, 0, 1, 0, 3, 1, 2, 1, 3, 3, 1, 3, 3, 1, 2, 3, 3, 2, 0, 2, 3, 0, 3, 2, 0, 3, 2, 0, 3, 0, 1, 2, 2, 0, 0, 3, 3, 3, 2, 3, 3, 0, 3, 3, 3, 0, 0, 2, 3, 1, 2, 1, 0, 2, 0, 3, 0, 2, 3, 0, 3, 2, 0, 1, 2, 1, 2, 1, 2, 3, 2, 2, 3, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 1, 0, 1, 0, 2, 3, 3, 2, 0, 0, 0, 3, 2, 3, 0, 2, 0, 1, 2, 0, 0, 2, 3, 0, 3, 0, 3, 1, 3, 3, 1, 0, 1, 3, 2, 1, 2, 1, 3, 0, 2, 1, 3, 2, 3, 0, 3, 1, 3, 2, 3, 1, 2, 0, 0, 1, 2, 0, 2, 0, 0, 2, 1, 0, 3, 0, 3, 2, 1, 1, 2, 0, 2, 1, 0, 2, 3, 1, 3, 2, 1, 3, 2, 1, 1, 0, 2, 2, 0, 3, 1, 3, 2, 3, 0, 2, 2, 2, 0, 3, 3, 3, 0, 1, 2, 0, 1, 2, 1, 3, 3, 3, 2, 3, 2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 3, 3, 0, 3, 2, 0, 2, 1, 0, 3, 1, 1, 0, 3, 0, 1, 2, 2, 2, 3, 1, 0, 1, 0, 3, 3, 2, 1, 0, 0, 1, 1, 2, 2, 2, 0, 1, 0, 0, 1, 1, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 1, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 2, 2, 0, 2, 0, 0, 0, 1, 2, 0, 1, 0, 1, 1, 0, 1, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 1, 0, 1, 1, 2, 0, 1, 1, 2, 2, 1, 0, 1, 2, 2, 2, 0, 1, 0, 0, 2, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 1, 0, 2, 0, 0], [0, 1, 2, 2, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1, 0, 1, 1, 1, 0, 2, 2, 2, 0, 2, 1, 2, 0, 2, 0, 2, 0, 2, 1, 0, 1, 0, 1, 2, 2, 0, 0, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\ni2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nb1 = ( in1 + divInt(int(2.0),( int(5.0) - min(divInt(min(int(4.0), max(( int(6.0) * i0 ), abs(mod(in0,int(5.0))))),abs(abs(( mod(divInt(int(2.0),int(9.0)),abs(abs(( res0 * divInt(max(in2, ( int(5.0) + i1 )),res0) )))) * res0 )))), int(5.0)) )) ) \\ge divInt(min(int(1.0), max(( in2 * in1 ), ( in0 + int(4.0) ))),min(int(3.0), min(mod(i2,mod(mod(res0,( min(divInt(max(max(( abs(in1) + in1 ), max(( mod(mod(abs(int(6.0)),divInt(int(3.0),min(in2, max(i2, int(7.0))))),( int(1.0) - ( abs(int(7.0)) + int(3.0) ) )) + in0 ), int(9.0))), i2),mod(abs(divInt(res0,in2)),i0)), ( in1 + min(int(2.0), abs(in0)) )) + in0 )),mod(int(4.0),mod(res0,( min(( divInt(i0,int(1.0)) * min(( mod(int(9.0),in1) * in1 ), min(int(7.0), ( max(int(4.0), i2) + i2 ))) ), mod(abs(i1),i2)) - min(max(( i1 + in1 ), min(max(i1, ( int(8.0) - int(8.0) )), int(3.0))), max(i2, int(3.0))) ))))), i0)))\\n:}\\nloopBreak% = 0\\nwhile not min(int(1.0), ( int(3.0) - max(abs(int(7.0)), abs(max(int(8.0), ( abs(abs(( in0 - divInt(abs(i2),min(divInt(in1,abs(( in0 + abs(in0) ))), int(7.0))) ))) * mod(( in1 * i0 ),min(min(min(( min(min(i1, abs(max(min(res0, res0), mod(max(int(8.0), ( int(1.0) * res0 )),mod(in0,min(i0, ( min(res0, max(( in1 + int(3.0) ), ( int(0.0) * divInt(int(9.0),divInt(min(mod(mod(max(mod(in2,mod(( i1 - in2 ),res0)), int(4.0)),divInt(divInt(int(4.0),in1),int(1.0))),in2), ( max(abs(divInt(in2,i2)), res0) * min(( max(in0, ( i2 + int(2.0) )) * mod(i1,i0) ), divInt(max(in1, abs(in2)),abs(int(4.0)))) )),max(min(int(4.0), i0), int(0.0)))) ))) + max(( int(4.0) * ( int(5.0) + abs(in2) ) ), ( int(4.0) * abs(divInt(abs(in0),min(int(0.0), max(( min(int(1.0), divInt(in0,in1)) - int(0.0) ), mod(i1,( i0 + i1 )))))) )) ))))))), divInt(int(0.0),i2)) - min(in1, abs(divInt(int(0.0),int(3.0)))) ), ( i1 + mod(int(5.0),res0) )), ( min(int(6.0), abs(( int(7.0) - max(( int(0.0) * int(6.0) ), i2) ))) * ( ( in2 + min(int(4.0), min(mod(abs(i1),( ( ( in1 + min(min(min(in2, int(2.0)), ( i0 - int(3.0) )), ( int(9.0) * max(min(abs(( abs(( in2 - int(1.0) )) - int(5.0) )), ( in1 * int(2.0) )), in0) )) ) - in0 ) - int(8.0) )), min(max(in1, abs(( in2 * mod(int(5.0),in0) ))), abs(int(1.0))))) ) * int(9.0) ) )), i0)) )))) )) \\ge max(i0, int(6.0)):{:\\nb2 = ( mod(mod(min(int(6.0), i1),int(5.0)),i0) * abs(min(divInt(int(7.0),i1), in1)) ) != int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( ( int(9.0) \\g ( ( ( res0 + int(2.0) ) + i1 ) - i0 ) or not b1 ) and int(6.0) \\l int(9.0) ):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += in1\\nif ( in2 \\le ( ( min(( divInt(i2,i2) - in0 ), in0) - in0 ) - int(2.0) ) or False ):{:\\nin2 -= i1\\n:}else:{:\\nb0 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 81, 81, 6, 6, 3, 17, 6, 11, 4, 2, 114, 3, 402, 110, 100, 63, 49]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 4], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 1, 0], [], [1, 1, 0, 1], [1, 1, 1, 1, 1], [8, 6, 8, 6, 1], [], [1, 2], [], [0], [], [0], [], [], [2, 0, 0, 1, 3, 0, 3, 0, 1, 6, 6, 0], [1, 1, 0], [2, 3, 1, 1, 1, 3, 3, 0, 3, 2, 0, 0, 2, 3, 0, 2, 1, 2, 3, 0, 3, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1], [0, 1, 1, 2, 1, 0, 1], [2, 0, 2], [1, 0, 0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= mod(min(int(8.0), int(6.0)),int(8.0))\\ni0 += max(max(i0, abs(( i1 * in0 ))), divInt(max(i0, divInt(int(6.0),divInt(min(in0, max(i0, i1)),int(1.0)))),res0))\\nb1 = b2\\nres0 = i0\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 4, 4, 0, 4, 5, 5, 0, 2, 0, 1, 0, 1, 0, 0, 12, 3, 26, 5, 7, 3, 4]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 0, 2, 2, 1, 0, 2, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 5, 6, 2, 0, 6, 1, 6, 3, 5, 8, 0, 5, 5, 7, 1], [1, 4, 1, 3], [0, 1, 0, 1], [0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0], [3, 3, 2, 1, 1, 2, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1], [0, 4, 2, 4, 5, 0, 1, 6, 2, 4, 2, 0, 1, 3, 0], [0, 1, 0, 1, 1], [1, 1, 2, 1, 0, 3, 0, 2, 3, 2, 3, 1, 0, 0, 2, 1, 0, 3, 1, 0, 3, 1, 1, 3, 1, 0, 3, 3, 2, 0, 3, 1, 3, 1, 3, 1, 0, 1, 1, 2, 3, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1], [0, 1, 2, 2, 1, 2, 0, 1, 0, 2, 1, 0], [0, 2, 2, 2, 2], [0, 1, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( not int(9.0) \\g int(3.0) and False ) and False ):{:\\nb0 = not False\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nif b1:{:\\nif ( int(5.0) + i0 ) \\le min(in1, divInt(max(mod(abs(int(6.0)),i2), in1),mod(int(2.0),in2))):{:\\nb0 = abs(int(0.0)) \\g i0\\n:}else:{:\\nloopBreak% = 0\\nwhile max(int(6.0), int(1.0)) \\ge abs(int(6.0)):{:\\nif b1:{:\\ni1 = res0\\n:}else:{:\\ni2 *= min(max(( in1 * min(int(3.0), abs(int(5.0))) ), max(int(8.0), i2)), int(0.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\ni0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 *= mod(min(int(5.0), int(7.0)),int(1.0))\\nin0 *= i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 7, 7, 17, 17, 4, 4, 2, 15, 4, 11, 5, 4, 15, 5, 45, 6, 12, 5, 4]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1], [1, 2, 2, 0, 2, 1, 0, 1], [1, 0, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 8, 9, 7, 8, 2, 4, 5, 2, 0, 2, 0, 0, 1, 5, 3, 0, 9, 6, 5, 0, 3, 0, 2, 2, 2, 1, 8, 9], [0, 0, 1], [0, 1], [], [1, 1, 0, 1], [0, 0, 0], [0], [], [0], [6, 0, 4, 0, 6, 4, 0, 1, 3, 5, 4, 0, 0, 3, 5, 2, 5, 4, 6, 5, 2, 5, 5, 4, 2, 5, 6, 6, 0, 4, 2, 2, 2, 1, 2, 6, 1, 4, 3, 3], [1, 1, 0, 0], [0, 2, 2, 0, 3, 2, 1, 3, 0, 2, 1, 0, 2, 0, 2, 1, 0, 0, 2, 0, 1, 1, 0, 3, 3, 2, 2, 3, 1, 1, 2, 2, 2, 2, 1, 3, 2, 0, 2, 1, 0, 2, 2, 2, 3, 2, 1, 3, 2, 2, 1, 0, 1, 0, 2, 0, 2, 3, 2, 1, 3, 0, 2, 0, 0, 0, 3, 0, 2, 1, 3, 3, 0, 0, 1, 3, 1, 1, 2, 3, 3, 2, 0, 1, 2, 2, 0, 3, 2, 1, 0, 2, 0, 2, 3, 1, 0, 3, 1, 3, 0, 0, 0, 2, 1, 0, 2, 3, 1, 0, 2, 1, 1, 0, 2, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 0, 2, 1, 1, 0, 2, 1, 0, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 1, 0], [1, 1, 0, 1, 2, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= i0\\nloopBreak% = 0\\nwhile ( ( in1 - abs(( int(6.0) + min(i0, ( int(8.0) - res0 )) )) ) * divInt(in1,mod(int(9.0),i0)) ) \\l i1:{:\\nif ( in0 - int(7.0) ) \\l int(8.0):{:\\nin2 -= in1\\n:}\\nloopBreak% = 0\\nwhile b0:{:\\nb1 = abs(max(mod(( max(int(2.0), int(4.0)) - mod(divInt(( mod(int(5.0),min(( i0 + ( int(2.0) * i0 ) ), mod(( divInt(abs(( int(0.0) * max(( divInt(int(2.0),in0) * int(0.0) ), in2) )),( i2 * ( min(( int(0.0) * abs(in2) ), divInt(in1,res0)) * in2 ) )) - min(i2, divInt(int(1.0),max(max(in2, in2), int(5.0)))) ),min(int(3.0), int(0.0))))) * ( abs(max(( in1 - int(9.0) ), mod(divInt(i2,min(mod(int(6.0),in2), mod(res0,mod(abs(int(5.0)),res0)))),max(int(0.0), max(i0, in1))))) - i2 ) ),mod(int(3.0),i2)),( min(int(0.0), i2) - ( int(2.0) + int(2.0) ) )) ),i1), ( i2 * res0 ))) \\g ( ( int(2.0) * i1 ) + in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = ( int(1.0) - int(8.0) )\\nin0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 29, 29, 3, 2, 0, 4, 3, 1, 0, 1, 40, 4, 126, 40, 21, 25, 17]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 0, 2, 1, 1, 0], [0, 0, 0, 1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 5, 9, 5, 6, 4, 4, 0], [4, 2, 5, 1, 0, 2], [1, 1], [0], [0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [1, 3, 2], [0], [1, 0, 1], [1, 3, 5, 1, 1, 4, 4, 5, 2, 6, 3, 6, 0, 3, 2, 2, 5, 6, 5, 1, 0, 0, 2], [0, 1, 1], [2, 2, 0, 1, 2, 0, 2, 0, 0, 2, 2, 0, 1, 0, 0, 1, 3, 2, 0, 0, 2, 3, 0, 0, 3, 1, 1, 0, 0, 0, 1, 2, 2, 3, 3, 1, 0, 0, 0, 0, 2, 0, 2, 1, 1, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [2, 1, 2, 0, 2], [1, 2, 2, 1, 2, 0, 2, 2], [0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nif divInt(mod(i1,int(1.0)),( in0 - ( in2 * i1 ) )) \\le divInt(mod(i1,int(4.0)),in1):{:\\nif ( in1 == int(5.0) and abs(( in2 * i2 )) != mod(max(res0, in0),abs(int(9.0))) ):{:\\nif int(5.0) \\g res0:{:\\ni0 = in0\\n:}else:{:\\nloopBreak% = 0\\nwhile not i2 \\l int(6.0):{:\\ni2 -= ( ( min(abs(int(4.0)), in2) * res0 ) + in2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}else:{:\\ni1 *= i0\\n:}\\nb1 = divInt(i0,( int(4.0) * int(0.0) )) == i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 9, 9, 6, 2, 1, 9, 6, 3, 1, 3, 23, 3, 46, 12, 5, 8, 6]}, {"genotype": [[0], [1], [0], [], [0], [], [], [4], [1], [], [1], [0], [], [], [], [3, 6, 5, 5], [], [0, 3, 0, 2, 0, 0], [1], [1], [], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in0 \\le max(res0, divInt(in2,in2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 6, 1, 1, 0, 1]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 1, 2, 0], [1, 0, 0], [1, 1], [1, 1, 1, 1, 1, 1, 1], [2, 4, 6, 1, 0, 0, 6], [5], [0, 0], [], [0, 0, 1], [0], [0, 0], [], [0, 0], [5, 0, 0, 1, 2, 6, 0, 5, 4, 2, 5], [1, 0], [1, 0, 3, 3, 2, 0, 0, 2, 1, 2, 1, 2, 2, 2, 0, 0, 2, 0, 0, 0, 3, 3, 0, 1, 3, 2, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1], [2, 1, 0, 1, 1], [1, 2, 1, 1], [1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nif b0:{:\\nin2 -= int(2.0)\\n:}\\nif i0 != abs(max(( i0 * i1 ), mod(int(4.0),( int(6.0) - ( divInt(divInt(i2,res0),mod(i0,in2)) - in1 ) )))):{:\\ni2 = min(max(in2, int(1.0)), max(divInt(int(0.0),int(0.0)), int(6.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 7, 7, 1, 2, 0, 3, 1, 2, 0, 2, 11, 2, 29, 8, 5, 4, 5]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [0, 1, 1], [1, 1, 1, 1, 0, 0, 1], [4, 7, 1, 6, 3, 0, 4], [2], [0], [], [1], [0], [], [], [], [4, 1, 2], [0, 1], [3, 3, 1, 1, 1, 2, 0, 1, 1], [0], [2, 0], [2, 0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(min(int(4.0), int(7.0))) == int(1.0)\\nin1 = ( i1 * int(6.0) )\\ni2 += int(304.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 3, 2, 9, 1, 2, 2, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [7, 3, 4], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(734.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 6, 2, 5], [1], [2, 2, 0, 0, 0], [0, 1], [], [0, 2], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += ( mod(res0,i2) * in2 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 2, 0, 2, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 2, 2, 0, 0, 2, 0, 1, 2, 2, 1, 1], [1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 0, 1, 9, 7, 3, 2, 1, 6, 7, 1, 2, 8, 7, 3, 4, 5, 2, 7, 0, 8, 4, 3, 8, 0, 6, 1, 2, 9, 1, 8, 9, 4, 1, 4, 9, 2, 8, 0, 0, 3, 9, 9, 8, 9, 3, 0, 7, 4, 5, 2, 5, 9, 8, 3, 9, 5, 9, 8, 1, 9, 2], [1, 0, 1, 3, 0], [1, 0, 2, 2, 1], [], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 2, 2, 1], [1], [1, 0], [0, 4, 1, 1, 4, 3, 1, 2, 0, 6, 5, 4, 5, 3, 5, 5, 0, 4, 3, 3, 3, 1, 0, 4, 5, 1, 1, 1, 6, 5, 6, 4, 0, 6, 6, 3, 2, 0, 2, 1, 3, 2, 1, 0, 0, 2, 3, 5, 0, 2, 2, 4, 6, 6, 5, 3, 4, 5, 4, 1, 3, 2, 0, 6, 1, 5, 5, 6, 0, 5, 3, 4, 6, 5, 4, 6, 2, 3, 5, 4, 0, 3, 2, 6], [1, 0, 1, 1, 0, 1], [2, 1, 3, 1, 2, 2, 2, 2, 1, 3, 3, 3, 0, 1, 3, 2, 1, 0, 3, 2, 3, 3, 0, 2, 0, 0, 0, 2, 3, 1, 3, 2, 2, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 3, 2, 2, 3, 0, 1, 0, 0, 3, 2, 3, 2, 0, 0, 2, 0, 2, 2, 0, 2, 3, 2, 0, 3, 3, 2, 2, 3, 0, 0, 1, 3, 1, 0, 1, 0, 1, 1, 1, 2, 1, 0, 3, 2, 2, 3, 3, 1, 0, 1, 3, 1, 0, 2, 0, 2, 3, 2, 1, 2, 2, 3, 1, 0, 3, 3, 0, 0, 0, 3, 1, 0, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 1, 0, 0, 1, 3, 1, 2, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 0, 0, 1, 0, 0, 0, 2, 1, 3, 3, 0, 1, 1, 3, 1, 3, 3, 0, 3, 0, 3, 3, 0, 2, 3, 1, 3, 2, 0, 1, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 1, 1, 2, 3, 0, 2, 3, 3, 0, 2, 3, 1, 1, 0, 2, 2, 3, 1, 3, 1, 2, 0, 2, 1, 1, 3, 0, 0, 3, 0, 2, 1, 0, 2, 2, 1, 3, 2, 2, 3, 1, 1, 3, 3, 3, 1, 2, 1, 0, 2, 1, 0, 0, 0, 1, 1, 0, 3, 2, 0, 3, 0, 1, 3, 0, 2, 2, 1, 2, 0, 0, 0, 3, 3, 1, 0, 2, 1, 2, 2, 2, 0, 2, 0, 2, 1, 1, 1, 0, 2, 0, 3, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 2, 2, 0, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 2, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1, 0, 1, 0, 2, 1, 2, 2, 0, 1, 0, 0, 2, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 1, 0, 2, 1, 1, 1, 2, 2, 0, 2, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1, 2, 0, 2, 1, 2, 1, 1, 0, 2, 2], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\nb2 = b2\\ni0 += ( int(1.0) - min(int(9.0), divInt(( ( ( int(0.0) - abs(abs(min(in1, int(1.0)))) ) + max(( int(9.0) + i1 ), abs(mod(min(min(i1, ( in1 - in0 )), i1),mod(max(int(7.0), min(mod(( int(3.0) - mod(( ( ( mod(min(i2, ( divInt(min(( mod(max(i0, int(2.0)),res0) - in2 ), abs(divInt(abs(mod(in1,in2)),divInt(in0,mod(divInt(in2,mod(min(divInt(in2,abs(min(divInt(mod(max(i0, in1),int(1.0)),max(int(6.0), in0)), int(7.0)))), in0),int(1.0))),int(2.0)))))),int(8.0)) + divInt(int(7.0),in0) )),min(mod(( max(max(int(3.0), i1), int(4.0)) * max(int(5.0), i0) ),( in1 - ( min(mod(int(2.0),( divInt(max(int(7.0), in2),abs(max(i1, i1))) - i1 )), max(int(0.0), res0)) + mod(in2,res0) ) )), mod(in1,( divInt(i0,int(8.0)) * res0 )))) - divInt(int(4.0),res0) ) - in0 ) - int(3.0) ),min(int(8.0), divInt(int(0.0),i2))) ),i0), mod(i2,mod(i1,min(divInt(( in0 * i2 ),int(6.0)), i1))))),i0)))) ) * i0 ),mod(int(1.0),abs(max(i2, int(2.0)))))) )\\nloopBreak% = 0\\nwhile int(9.0) \\g max(int(1.0), max(max(in0, min(in2, min(max(i0, mod(max(int(8.0), abs(( i2 + int(9.0) ))),( mod(int(4.0),i2) * mod(in1,int(1.0)) ))), int(4.0)))), ( res0 + int(9.0) ))):{:\\nif not not False:{:\\nb1 = divInt(res0,int(2.0)) \\l int(8.0)\\n:}else:{:\\nin2 = ( min(in0, ( abs(max(in1, divInt(max(int(0.0), int(0.0)),in2))) - ( mod(min(int(3.0), max(int(9.0), mod(in1,( int(9.0) + int(8.0) )))),min(i1, in0)) * abs(i2) ) )) + ( int(9.0) + i0 ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile mod(( int(3.0) - max(( ( abs(int(0.0)) - int(7.0) ) + abs(min(max(int(4.0), mod(int(5.0),res0)), ( int(2.0) - i1 ))) ), in2) ),in2) \\g int(5.0):{:\\nres0 *= int(9.0)\\ni0 += in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(mod(in0,min(in1, int(8.0))), abs(res0)) \\ge divInt(( int(3.0) * mod(in2,in1) ),res0):{:\\nif abs(min(int(9.0), i2)) \\l ( int(5.0) - ( ( ( in0 * ( in2 - mod(int(9.0),int(8.0)) ) ) - int(1.0) ) + in1 ) ):{:\\ni0 = ( in0 * max(int(9.0), int(2.0)) )\\n:}\\ni2 *= res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 5, 9, 63, 63, 5, 5, 0, 10, 5, 5, 1, 2, 84, 6, 281, 80, 60, 41, 43]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 7, 6, 5, 2, 8, 0, 9, 1, 1, 2, 9, 1, 9, 7], [4, 0], [2], [], [1, 1], [0, 0], [], [], [], [5, 6, 3, 1, 0, 2, 2, 0, 6, 0, 6, 5], [1], [3, 2, 3, 3, 0, 1, 1, 1, 2, 1, 1, 1, 0, 2, 2, 3, 3, 3, 2, 1, 3, 1, 0, 0, 1, 0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 0, 3, 2, 1, 1, 3, 1, 2, 2, 3, 0, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [2, 0, 1, 1, 1, 0, 1, 2, 0, 1], [2, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(mod(min(max(in2, int(3.0)), int(0.0)),int(7.0))) \\le mod(int(6.0),int(5.0)):{:\\nres0 *= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in0 \\l ( divInt(max(max(min(( int(8.0) + max(int(0.0), i1) ), i0), int(9.0)), i2),( ( ( i2 + int(1.0) ) + divInt(int(1.0),i0) ) - ( res0 - abs(( int(2.0) + int(9.0) )) ) )) - min(int(1.0), divInt(divInt(max(i0, ( int(9.0) - res0 )),int(7.0)),in2)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 16, 16, 2, 1, 0, 2, 2, 0, 0, 0, 12, 1, 51, 14, 10, 9, 6]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 1, 9, 5, 6, 1, 2, 0], [0, 1], [0, 1], [], [1, 1], [0, 0], [], [], [], [1, 2, 0, 6, 6, 2, 3, 4], [1], [0, 3, 0, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1, 0, 3, 2, 1, 0, 2, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0], [2, 1, 0, 1, 1, 2], [0, 1, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= i2\\nb0 = min(i0, divInt(max(int(0.0), int(5.0)),int(1.0))) \\l res0\\nb1 = ( mod(divInt(int(9.0),( ( int(5.0) - res0 ) + int(6.0) )),int(1.0)) - i2 ) \\g min(( int(2.0) - in0 ), ( int(0.0) * in1 ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 9, 9, 2, 2, 0, 2, 2, 0, 0, 0, 8, 1, 27, 8, 3, 6, 3]}, {"genotype": [[0], [1], [1], [], [1], [1], [0], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [0, 2, 2, 1, 1, 2, 1], [0, 0, 0], [1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 5, 4, 7, 3, 6, 0, 5, 4, 3, 2, 7, 7, 5, 5, 3, 7, 8, 4, 1, 7, 1, 6, 6, 9, 6, 5, 5, 8, 8], [4, 0, 0, 1, 5, 4], [0, 0, 1], [0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [3, 3, 0], [], [1, 1, 0], [5, 0, 6, 0, 3, 1, 4, 3, 1, 0, 0, 6, 1, 5, 1, 4, 4, 6, 0, 5, 5, 5, 1, 0, 5, 2, 4, 4, 3, 1, 5, 3, 6, 5, 1, 3, 4, 0, 5, 5, 5, 0, 2], [0, 0], [3, 0, 0, 0, 0, 2, 3, 3, 3, 2, 2, 0, 0, 0, 2, 0, 0, 1, 1, 2, 0, 2, 2, 1, 1, 0, 0, 2, 3, 3, 2, 0, 0, 3, 3, 2, 0, 1, 2, 3, 3, 1, 3, 3, 3, 0, 2, 3, 0, 3, 3, 2, 1, 3, 0, 3, 2, 2, 2, 3, 1, 3, 2, 3, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 2, 3, 0, 0, 1, 1, 0, 3, 1, 0, 2, 2, 1, 1, 1, 3, 0, 0, 2, 0, 1, 0, 3, 0, 2, 0, 1, 2, 2, 3, 3, 0, 1, 1, 2, 2, 2, 3, 0, 0, 2, 2, 3, 0, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3, 1, 3, 2, 1, 1, 1, 3, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 2, 1, 1, 2, 0, 1, 2, 1, 1, 1, 1, 1, 0, 2, 1, 2, 0, 2, 0, 1, 1, 2, 2, 2, 1, 2, 1, 0], [0, 1, 0, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = min(i0, res0)\\nif ( i0 \\le in0 and ( b0 or ( min(max(min(mod(divInt(i1,in1),in0), divInt(i1,i0)), int(7.0)), int(0.0)) + divInt(i0,( ( int(5.0) - int(4.0) ) + res0 )) ) \\l i1 ) ):{:\\nif ( max(abs(divInt(in2,i1)), max(max(( in1 * int(7.0) ), ( abs(min(int(3.0), max(abs(max(in1, mod(max(res0, max(max(( int(6.0) - max(i0, min(( divInt(divInt(abs(int(0.0)),max(divInt(abs(in2),int(5.0)), in2)),( in2 + i1 )) - i0 ), min(in2, i2))) ), in1), divInt(mod(abs(in1),in0),int(4.0)))),int(3.0)))), i1))) * min(int(2.0), in2) )), mod(divInt(int(7.0),int(7.0)),int(5.0)))) * max(in0, res0) ) \\l ( in2 + int(5.0) ):{:\\nb0 = i1 \\g max(in0, divInt(in1,int(3.0)))\\n:}else:{:\\nb1 = divInt(( abs(abs(i0)) * int(7.0) ),int(8.0)) != divInt(( divInt(abs(in2),in2) - mod(( max(in2, ( int(4.0) * int(1.0) )) - int(7.0) ),int(1.0)) ),int(6.0))\\n:}\\n:}else:{:\\nif int(6.0) \\le divInt(( int(9.0) - abs(int(6.0)) ),max(( int(5.0) - int(5.0) ), int(8.0))):{:\\ni0 = min(i2, int(8.0))\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 31, 31, 6, 3, 2, 9, 6, 3, 0, 3, 43, 2, 140, 35, 33, 16, 19]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 2, 0, 0, 2, 0, 1, 2, 1, 1, 1, 1, 1, 0], [1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 0, 7, 2, 3, 8, 1, 1, 7, 6, 4, 3, 2, 5, 2, 4, 4, 4, 0, 6, 2, 6, 6, 7, 9, 1, 4, 0, 7, 9, 3, 9, 0, 4, 3, 3, 6, 9, 6, 2], [2, 5, 0, 5, 0, 3], [2, 1, 2, 0, 0, 1, 2, 0, 2], [], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0], [], [1, 1], [3, 3, 3, 5, 6, 4, 4, 3, 2, 2, 0, 2, 6, 6, 4, 1, 2, 1, 5, 0, 6, 5, 6, 4, 3, 6, 4, 1, 2, 3, 5, 3, 1, 6, 4, 5, 2, 0], [0, 0, 1, 1, 0, 0], [2, 2, 0, 1, 0, 2, 0, 1, 3, 2, 3, 0, 1, 2, 1, 1, 2, 2, 0, 0, 1, 0, 1, 2, 1, 1, 0, 0, 0, 2, 2, 1, 3, 1, 0, 2, 1, 1, 3, 1, 3, 1, 0, 2, 0, 3, 0, 1, 2, 0, 3, 2, 1, 2, 1, 0, 3, 2, 3, 0, 2, 2, 3, 0, 1, 3, 2, 3, 3, 2, 3, 1, 0, 2, 1, 3, 3, 3, 2, 3, 3, 0, 1, 1, 1, 0, 1, 2, 2, 0, 2, 2, 0, 3, 2, 2, 0, 3, 0, 1, 2, 1, 1, 2, 3, 1, 1, 2, 3, 0, 0, 1, 1, 0, 1, 1, 1, 3, 2, 2, 0, 3, 2, 3, 0, 1, 3, 1, 1, 1, 2, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2], [2, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 2, 1, 1, 2, 2, 0, 2], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\nin0 = ( mod(in0,int(8.0)) * in0 )\\nloopBreak% = 0\\nwhile not not ( in2 + int(0.0) ) == max(( min(res0, int(7.0)) - ( int(2.0) + int(3.0) ) ), divInt(( in1 - in1 ),int(8.0))):{:\\nb2 = in0 != int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b0\\nif ( int(1.0) + int(7.0) ) \\l i2:{:\\ni2 = i0\\n:}else:{:\\ni2 -= res0\\n:}\\nif divInt(( int(6.0) + min(int(4.0), res0) ),mod(int(3.0),int(2.0))) != max(int(5.0), max(int(2.0), in1)):{:\\ni1 += mod(i2,max(i1, int(4.0)))\\nin2 = ( i0 - abs(divInt(int(4.0),( int(4.0) - res0 ))) )\\n:}else:{:\\nb1 = max(( max(in2, mod(( max(res0, int(0.0)) + min(( max(abs(divInt(abs(int(6.0)),in1)), ( int(2.0) * min(abs(min(mod(min(min(in0, int(6.0)), int(6.0)),int(7.0)), res0)), int(9.0)) )) - mod(( in1 - divInt(divInt(i1,min(mod(( i2 * max(in0, int(1.0)) ),( int(4.0) * int(0.0) )), mod(abs(int(7.0)),int(9.0)))),divInt(abs(in2),in0)) ),int(3.0)) ), int(9.0)) ),i1)) + int(0.0) ), int(4.0)) \\l int(3.0)\\nres0 = min(mod(divInt(in1,abs(( abs(in2) * int(3.0) ))),abs(int(6.0))), int(9.0))\\n:}\\nb2 = b0\\nb2 = int(62.0) \\ge mod(i2,i0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 3, 12, 40, 40, 6, 9, 0, 11, 6, 5, 0, 2, 38, 6, 133, 35, 27, 19, 18]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 1, 1], [1, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 3, 0, 7, 0, 0, 6, 3, 9, 0, 2, 2, 2, 2, 3, 1, 9, 0, 4, 0, 1, 6, 3, 1, 7, 1, 1, 9, 5, 6, 8, 7, 4, 1, 6, 2, 2, 5, 2, 8, 8, 3, 2, 0, 3, 6, 5, 9, 9, 9, 8, 1, 5, 4, 7, 1, 7, 5, 5, 3, 5, 2, 0, 7, 7, 9, 9, 9], [4], [2, 0], [], [0, 0, 1], [0], [0, 1], [0], [0], [3, 5, 4, 5, 1, 0, 0, 4, 0, 6, 0, 6, 3, 1, 4, 3, 5, 2, 4, 3, 6, 2, 6, 3, 3, 3, 6, 2, 2, 6, 6, 5, 0, 2, 0, 1, 0, 2, 0, 4, 1, 1, 4, 6, 3, 0, 2, 4, 2, 0, 1, 6, 2, 1, 6, 5, 4, 5, 6, 3, 6, 5, 5, 1], [1], [1, 2, 0, 3, 3, 1, 3, 2, 1, 2, 1, 2, 3, 1, 1, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 3, 2, 3, 1, 0, 3, 3, 3, 2, 3, 3, 0, 2, 1, 2, 1, 2, 3, 0, 3, 3, 1, 3, 2, 0, 3, 1, 3, 3, 2, 3, 3, 0, 0, 3, 0, 2, 3, 3, 1, 2, 3, 0, 2, 0, 1, 3, 0, 1, 3, 0, 3, 3, 0, 0, 1, 2, 0, 1, 3, 1, 2, 3, 3, 1, 2, 2, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 3, 1, 2, 0, 0, 0, 3, 2, 3, 2, 3, 1, 1, 0, 0, 2, 2, 3, 3, 2, 3, 1, 3, 1, 3, 0, 3, 2, 0, 1, 3, 2, 2, 0, 0, 3, 0, 2, 3, 0, 2, 3, 1, 3, 3, 2, 2, 1, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1, 2, 2, 3, 0, 3, 1, 1, 1, 1, 0, 3, 3, 1, 3, 0, 0, 1, 2, 2, 0, 3, 0, 2, 3, 0, 3, 2, 2, 2, 1, 3, 1, 2, 3, 2, 3, 1, 2, 3, 3, 0, 1, 3, 0, 2, 3, 3, 2, 3, 3, 0, 3, 2, 3, 0, 1, 3, 0, 3, 1, 3, 1, 3, 0, 1, 0, 0, 3, 1, 0, 0, 3, 2, 2, 2, 1, 3, 2, 1, 1, 2, 1, 0, 3, 3, 1, 3, 0, 3, 2, 3, 3, 3, 3, 3, 0, 0, 0, 1, 0, 1, 2, 1, 1, 3, 2, 2, 0, 3, 0, 3, 1, 0, 2, 1, 2, 1, 3, 1, 1, 0, 1, 1, 3, 3, 3, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 2, 1, 2, 1, 0, 1, 1, 1, 0, 1, 2, 1, 2, 1, 2, 1, 0, 0, 2, 1, 2, 0, 0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 2, 0, 1, 1, 1, 2, 0, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 1, 1, 2, 2, 0, 1, 0, 0, 1, 1, 1, 2, 0, 1, 2, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 0, 0, 1, 0, 2, 1, 2], [2, 1, 2, 2, 0, 2, 0, 2, 2, 2, 1, 1, 2, 2, 0, 0, 1, 1, 1, 0, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nif True:{:\\nin0 *= int(5.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = divInt(in2,max(max(int(2.0), min(divInt(int(3.0),divInt(int(0.0),( max(int(7.0), int(0.0)) - mod(mod(( int(0.0) * ( mod(int(6.0),in1) * int(3.0) ) ),int(9.0)),in2) ))), i1)), min(( min(int(0.0), i0) + max(abs(max(mod(abs(max(i0, ( int(2.0) * mod(int(2.0),( min(in1, max(max(int(2.0), max(( i0 + min(int(2.0), max(abs(( max(abs(res0), i0) * max(res0, divInt(abs(max(int(3.0), divInt(min(in0, ( i1 * int(1.0) )),min(in1, int(9.0))))),abs(in0))) )), max(abs(in2), i2))) ), int(0.0))), ( in1 * int(4.0) ))) - min(int(0.0), ( min(abs(int(1.0)), ( ( int(6.0) - in0 ) * res0 )) * i2 )) )) ))),int(3.0)), res0)), mod(divInt(divInt(in0,abs(int(1.0))),mod(in0,in0)),res0)) ), max(( max(mod(abs(int(7.0)),int(1.0)), i2) + i2 ), ( ( max(abs(( min(int(1.0), min(int(9.0), max(res0, abs(( res0 + int(5.0) ))))) - min(divInt(( in2 - i0 ),max(i2, divInt(max(i0, ( max(int(6.0), abs(min(( ( int(8.0) - divInt(int(7.0),int(4.0)) ) + ( int(1.0) + int(6.0) ) ), max(min(abs(int(2.0)), divInt(( abs(i1) * abs(int(2.0)) ),int(5.0))), int(2.0))))) - int(8.0) )),i0))), abs(abs(int(8.0)))) )), abs(i2)) * i0 ) - int(3.0) ))))) \\le divInt(mod(in1,min(i1, ( min(i1, abs(( ( ( int(2.0) * max(int(0.0), divInt(max(( abs(int(3.0)) * ( abs(min(in1, int(6.0))) - max(res0, ( min(min(( max(max(in0, max(mod(abs(i0),int(5.0)), min(i2, max(int(9.0), abs(int(9.0)))))), max(in1, int(9.0))) - i2 ), i0), min(int(8.0), i1)) * res0 )) ) ), min(( mod(mod(int(1.0),abs(mod(int(5.0),int(4.0)))),mod(int(7.0),i2)) + min(max(int(1.0), min(i1, max(divInt(min(abs(abs(min(abs(res0), in2))), in1),int(7.0)), in2))), int(5.0)) ), ( int(5.0) - int(3.0) ))),min(divInt(mod(res0,min(in0, max(int(5.0), res0))),divInt(int(2.0),mod(int(0.0),min(int(7.0), int(7.0))))), in2))) ) - int(9.0) ) + int(9.0) ))) + abs(max(abs(int(9.0)), in2)) ))),i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 69, 69, 1, 2, 0, 3, 1, 2, 1, 1, 64, 1, 291, 66, 93, 35, 32]}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 9, 2, 2, 2, 2, 2, 6, 8, 2, 0, 4, 1, 2, 9, 9, 5, 2, 5, 3, 4, 6, 5, 2, 4, 9, 1, 6, 6, 8, 0], [4, 0], [2, 2, 0], [0], [0, 0, 0, 0, 1, 0, 1], [0, 0], [0, 3, 2, 2, 2], [], [], [5, 6, 5, 5, 2, 2, 3, 3, 2, 1, 6, 4, 1, 3, 6, 4, 2, 2, 4, 4, 3, 0, 4, 5, 0, 3, 1, 1, 1, 0, 6, 2, 6, 1], [0], [2, 3, 3, 1, 0, 3, 2, 2, 2, 3, 2, 2, 3, 2, 1, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 1, 2, 3, 3, 1, 2, 0, 3, 0, 0, 0, 2, 3, 1, 3, 0, 1, 1, 0, 2, 1, 2, 2, 2, 1, 2, 0, 3, 1, 0, 3, 0, 1, 1, 0, 3, 1, 2, 2, 1, 3, 2, 1, 3, 2, 3, 2, 2, 1, 1, 3, 0, 0, 3, 1, 0, 1, 0, 3, 3, 3, 0, 3, 2, 0, 0, 1, 1, 2, 3, 1, 0, 1, 2, 2, 1, 2, 3, 2, 0, 2, 1, 0, 3, 0, 2, 3, 0, 1, 0, 1, 0, 1, 3, 1, 2, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 3, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 2, 2, 2, 0, 1, 2, 0, 0, 1, 0, 1, 2, 1, 0, 1, 2, 0, 1, 0, 0, 0, 1, 2, 1, 2, 2, 0, 0], [0, 0, 0, 1, 0, 2, 1, 2, 0, 2, 1, 2, 2, 0, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 2], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\nb0 = ( not not ( max(abs(int(0.0)), in2) + abs(( mod(( abs(( divInt(min(( int(5.0) + mod(res0,in2) ), ( ( ( ( ( divInt(mod(int(9.0),divInt(max(abs(int(2.0)), ( in2 + min(i2, i2) )),in0)),( min(int(2.0), max(in0, int(2.0))) - int(2.0) )) + i2 ) * ( int(2.0) - ( ( divInt(int(6.0),mod(i1,min(int(8.0), res0))) * max(in1, int(2.0)) ) + int(0.0) ) ) ) * i1 ) - abs(int(4.0)) ) * ( mod(int(1.0),max(( int(2.0) * min(( max(divInt(( int(9.0) + int(9.0) ),abs(in0)), res0) * min(int(5.0), in1) ), int(2.0)) ), i2)) - max(min(min(i2, min(( in1 - in1 ), int(5.0))), int(3.0)), mod(max(int(4.0), in0),int(6.0))) ) )),( ( int(5.0) + divInt(abs(( i0 + ( int(2.0) * in1 ) )),max(in2, mod(abs(i0),int(4.0)))) ) * in0 )) + int(9.0) )) + i1 ),int(1.0)) + abs(int(6.0)) )) ) \\le ( i1 * int(6.0) ) and not i1 \\l divInt(i0,int(8.0)) )\\nres0 = mod(int(0.0),min(i2, min(res0, i1)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 32, 32, 2, 3, 1, 7, 2, 5, 0, 0, 34, 1, 134, 40, 29, 25, 15]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 7, 5, 7, 0, 7, 5, 9, 3, 2, 8, 3, 0, 2, 3, 7, 6, 0, 2, 2, 2, 7, 3, 4, 2, 8], [4, 5], [], [0], [0, 1, 1], [0, 0], [3], [], [], [5, 4, 5, 6, 1, 1, 5, 0, 1, 0, 1, 0, 4, 0, 0, 0, 1, 3, 5, 3, 4, 6, 0, 0, 0, 3, 0], [1], [2, 3, 0, 2, 3, 0, 2, 3, 1, 1, 0, 3, 0, 3, 2, 0, 0, 1, 2, 1, 2, 3, 1, 1, 2, 1, 3, 3, 1, 3, 0, 3, 0, 3, 2, 2, 3, 2, 2, 3, 3, 2, 1, 1, 2, 0, 1, 2, 2, 1, 1, 2, 1, 2, 3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 0, 2, 0, 0, 1, 0, 1, 2, 2, 3, 2, 2, 1, 0, 1, 1, 0, 3, 2, 0, 1, 2, 2, 1, 1, 3, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 3, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 1, 2], [2, 1, 0, 1, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( max(in2, mod(min(in1, ( max(int(0.0), int(9.0)) * in2 )),abs(res0))) - max(( i1 + i1 ), int(7.0)) ) \\le mod(int(5.0),( max(int(7.0), int(0.0)) - divInt(int(7.0),min(min(int(5.0), min(in2, min(i0, min(( ( max(divInt(mod(max(max(( int(9.0) * int(3.0) ), ( i1 - int(2.0) )), ( ( int(8.0) - int(3.0) ) * ( int(0.0) * ( abs(( ( mod(divInt(int(2.0),int(3.0)),int(7.0)) - int(6.0) ) * ( i0 + ( i1 * i0 ) ) )) - int(0.0) ) ) )),in1),int(2.0)), ( mod(abs(( divInt(int(2.0),i0) - int(2.0) )),int(7.0)) + i0 )) + min(mod(i0,int(3.0)), ( mod(int(4.0),int(2.0)) - max(i1, int(8.0)) )) ) + in0 ), ( in2 - mod(in0,in1) ))))), mod(res0,i0))) )) and i0 != abs(i0) ):{:\\nin0 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 27, 27, 2, 0, 1, 3, 2, 1, 0, 0, 27, 1, 105, 33, 19, 21, 13]}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [1], [0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 9, 6, 2, 2, 7, 8, 4, 9, 8, 9, 0, 3, 1, 6, 0], [4, 4], [1, 1, 2], [], [1, 0, 0, 1], [0, 0], [2, 0], [], [], [2, 3, 1, 0, 0, 4, 6, 4, 4, 3], [], [2, 3, 3, 1, 0, 1, 2, 3, 0, 2, 3, 3, 0, 1, 2, 2, 2, 2, 3, 2, 1, 0, 2, 1, 2, 2, 2, 1, 1, 3, 1, 1, 2, 0, 1, 2, 1, 1, 3, 2, 2, 3, 0, 3, 0, 0, 3, 1, 1, 3, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [2, 2, 2, 1, 0, 1, 0, 1, 2, 0, 2, 2], [2, 1, 0, 2, 0, 2, 0, 0, 1, 2], [1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(abs(abs(int(8.0))),i2) \\le int(19.0):{:\\nb1 = not b1\\nb2 = ( abs(in0) * ( max(min(i1, int(6.0)), divInt(( ( ( max(( int(2.0) - i0 ), mod(int(2.0),( ( divInt(int(7.0),int(8.0)) + min(int(4.0), int(9.0)) ) * mod(i0,int(8.0)) ))) + mod(int(9.0),int(0.0)) ) * max(( ( abs(in1) + min(res0, in1) ) + abs(int(3.0)) ), int(1.0)) ) - abs(in1) ),int(6.0))) * in0 ) ) \\le int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 17, 17, 2, 3, 0, 4, 2, 2, 0, 0, 10, 0, 54, 16, 12, 10, 6]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 2, 0], [0], [1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 6, 9, 6, 8, 0, 2, 2, 6, 7, 6], [3, 0], [1, 0], [], [1, 1, 0], [0, 0], [1], [1], [0], [2, 3, 1, 0, 0, 1, 3, 1, 2, 4, 6, 2, 2, 1, 0, 4, 0, 1, 3, 6, 4, 5, 3, 1], [1, 0, 0], [0, 3, 3, 0, 0, 0, 1, 0, 3, 3, 0, 1, 3, 0, 3, 0, 2, 2, 3, 1, 0, 0, 1, 2, 1, 3, 2, 2, 2, 2, 2, 0, 2, 1, 3, 1, 3, 3, 3, 1, 1, 0, 0, 3, 2, 3, 3, 2, 0, 0, 0, 1, 0, 1, 3, 1, 3, 0, 0, 3, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0], [2, 0, 2, 2], [0, 1, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= in0\\ni1 = min(max(i0, i0), i1)\\nb1 = int(9.0) \\ge in0\\ni1 = max(max(i2, int(8.0)), max(in1, min(res0, divInt(( min(int(6.0), i2) + i2 ),int(9.0)))))\\nif mod(int(6.0),max(mod(( mod(( divInt(i1,divInt(int(8.0),min(int(0.0), abs(min(max(int(2.0), int(2.0)), i0))))) * in1 ),abs(divInt(max(abs(mod(i0,i1)), in0),int(6.0)))) * res0 ),int(7.0)), min(int(6.0), max(in1, in2)))) \\l min(in0, i1):{:\\nb0 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 12, 12, 2, 2, 0, 3, 2, 1, 1, 1, 24, 3, 62, 11, 18, 4, 8]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [1, 5], [4], [1], [], [1], [0], [], [], [], [2, 1], [], [0, 2, 0, 2, 1, 1], [0, 0], [], [2, 0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i2 \\le ( i1 * ( int(1.0) + int(5.0) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 6, 2, 0, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 7, 2, 5, 7, 4, 7, 1, 3, 2, 2, 2, 9, 1, 2, 7, 6, 5, 6, 7, 9, 3], [2, 4, 0], [2], [0, 0], [0, 1, 0, 0, 1, 1], [0, 0, 0], [3, 3, 2], [], [], [4, 2, 1, 2, 5, 3, 4, 4, 0, 1, 5, 6, 3, 1, 3, 5, 5, 0, 3, 6, 4, 3, 2, 2, 0, 1, 5, 3, 0, 0, 1, 0], [], [3, 2, 2, 2, 0, 0, 2, 3, 0, 0, 1, 2, 3, 0, 3, 2, 3, 2, 2, 2, 0, 0, 3, 2, 2, 0, 1, 0, 3, 1, 2, 0, 1, 2, 3, 3, 3, 0, 2, 1, 1, 3, 2, 1, 1, 2, 2, 0, 0, 2, 3, 2, 3, 2, 1, 3, 0, 2, 0, 3, 0, 1, 1, 2, 2, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 1, 3, 2, 3, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 3, 3, 0, 3, 3, 0, 1, 2, 1, 0, 2, 2, 1, 0, 2, 3, 1, 1, 3, 3, 3, 1, 1, 3, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 1, 1, 2, 0, 1, 2, 0, 0, 2, 2, 0, 2, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 0, 0, 2], [0, 1, 1, 2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1, 1, 2, 0, 2], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( abs(divInt(( mod(in1,i2) + ( min(i1, i2) - int(8.0) ) ),( abs(in2) - abs(( abs(mod(( ( in0 * in1 ) * max(mod(mod(in1,int(2.0)),i0), max(int(7.0), ( i1 - int(2.0) ))) ),( abs(min(max(in2, ( int(5.0) + int(7.0) )), abs(( int(4.0) - int(7.0) )))) * mod(( res0 - in0 ),( min(( min(divInt(int(1.0),abs(i1)), ( in0 * abs(in2) )) + int(3.0) ), int(2.0)) + ( ( divInt(int(2.0),divInt(min(abs(abs(int(2.0))), ( int(9.0) * ( int(1.0) - max(( abs(in2) - i0 ), in0) ) )),res0)) * in1 ) + max(in0, i2) ) )) ))) * divInt(i2,max(abs(i0), min(min(i1, int(2.0)), divInt(int(7.0),in2)))) )) ))) == divInt(divInt(int(6.0),in0),divInt(abs(int(5.0)),int(6.0))) and ( not max(min(min(int(7.0), int(9.0)), abs(i0)), int(3.0)) \\le i0 and i1 \\l i0 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 23, 23, 3, 1, 2, 6, 3, 3, 0, 0, 32, 0, 118, 33, 30, 19, 14]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 6], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1], [8], [5], [1], [], [0, 1], [0], [2], [], [], [6, 4], [], [2, 1, 0, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not mod(int(8.0),res0) != in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [], [], [2, 0], [], [0], [], [0], [], [], [0, 5], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = in2\\nb2 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 3, 1, 6, 2, 4, 5, 3, 2, 3, 1, 3, 8], [2], [2], [], [1], [0], [], [], [], [6, 5, 1, 1, 4, 2, 4, 2, 0, 2, 0], [], [3, 2, 2, 3, 2, 1, 2, 0, 0, 2, 0, 3, 1, 1, 3, 1, 2, 2, 1, 2, 0, 2, 2, 3, 1, 0, 0, 0, 2, 1, 3, 1, 1, 3, 2, 1, 2, 0, 1, 3, 3, 3, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 2, 0, 1, 0, 1, 0, 0, 2, 1], [0, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(mod(( abs(( int(3.0) + ( res0 * in2 ) )) * mod(i1,min(int(3.0), int(1.0))) ),max(int(6.0), ( ( int(2.0) - mod(i1,mod(mod(min(int(4.0), in1),i2),in1)) ) - ( int(5.0) - max(int(3.0), int(2.0)) ) ))), min(divInt(int(3.0),divInt(i2,int(1.0))), min(abs(max(i0, i2)), i0))) == int(38.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 13, 13, 1, 1, 0, 1, 1, 0, 0, 0, 11, 0, 46, 13, 10, 6, 7]}, {"genotype": [[0], [1], [1], [], [0], [0, 1, 1], [3, 0, 2], [1], [2], [], [1], [0], [], [], [], [1], [], [1, 3, 1, 0], [], [0], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(30.0) \\g min(int(2.0), i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [3], [2], [], [1], [0], [], [], [], [3, 3], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in0 \\ge in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [5], [], [], [], [], [], [], [], [], [1, 4], [0], [3, 0, 3, 1], [], [1, 2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = max(in1, abs(int(5.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 2, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 0, 1], [1, 2, 1], [], [], [], [], [], [], [], [], [5, 0], [1, 1], [1, 1], [], [], [1, 0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= int(1.0)\\ni0 += int(21.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [1], [9], [2], [2], [], [1], [0], [], [], [], [6], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(9.0) == res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 2, 0, 1, 1], [0], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1], [4, 0, 6, 8, 9, 4], [1, 4, 0], [1, 0], [], [1, 0, 0, 1, 1], [0, 0, 0], [2, 2], [], [0], [5, 4, 5, 4, 1, 1, 2, 5, 3, 6], [0, 1], [1, 2, 0, 1, 3, 1, 3, 2, 0, 3, 0, 2, 3, 2, 1, 0, 1, 3, 3, 1, 0, 0, 3, 3, 0, 0], [1, 0, 1, 1], [2, 2, 0, 2, 2, 2, 0, 2], [1, 0], [0, 1, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(4.0) \\g divInt(in2,int(0.0))\\nif not not abs(int(6.0)) \\le abs(( in1 - min(in2, mod(abs(mod(int(8.0),in1)),int(9.0))) )):{:\\ni1 = abs(abs(int(4.0)))\\n:}\\ni1 += i2\\nb0 = in2 \\l min(abs(in0), res0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 6, 6, 3, 2, 0, 5, 3, 2, 0, 1, 10, 2, 26, 4, 8, 2, 3]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [4, 0], [], [], [], [], [], [], [], [], [2], [1], [3, 1, 1], [], [1], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += max(int(4.0), int(0.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1], [0, 4], [], [], [], [], [], [], [], [], [4, 6], [0, 1], [1, 1], [], [], [2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(0.0)\\nres0 *= int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [8, 0, 0], [3, 3, 2], [1], [1, 1], [0, 1, 0, 1, 0, 1], [0, 0, 0], [3, 3, 2], [], [], [0, 1, 1, 1, 5, 4], [], [2, 0, 0, 0, 3, 1, 2, 0, 3, 0, 1, 1, 0], [1, 1], [1, 2], [], [0, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( divInt(i0,i1) \\ge i1 or ( max(int(8.0), divInt(i1,abs(in2))) \\ge int(0.0) or not int(0.0) == in1 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 3, 1, 2, 6, 3, 3, 0, 0, 6, 0, 13, 2, 2, 0, 2]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 0, 2, 1], [1, 1, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 9, 4, 6, 3, 9, 4, 1, 9, 7, 0, 2, 2, 8, 1, 3, 4, 3, 7, 2, 8, 1, 0, 3, 1, 9, 8, 0, 4, 9, 3, 6, 3, 2, 9, 9, 2, 8, 7, 4, 1, 5, 9, 4, 4, 0, 3, 4, 6, 7, 4, 2, 8, 3, 4, 2, 4, 7, 4, 6, 3, 9, 9, 7, 6, 9, 8, 6, 6, 3, 7, 8, 2, 5, 3, 4, 4, 4, 9, 2, 2, 6, 5, 7, 2, 1, 0, 9, 1, 7, 0, 7, 9, 5], [0, 3], [0, 0], [], [1, 0, 0, 0, 1], [0, 0], [1, 2, 0], [1], [0], [1, 6, 3, 4, 5, 0, 0, 1, 2, 3, 3, 0, 6, 0, 3, 3, 0, 4, 1, 2, 0, 6, 1, 2, 1, 2, 2, 6, 4, 0, 0, 5, 0, 2, 4, 5, 6, 2, 2, 2, 3, 4, 1, 1, 2, 4, 2, 2, 2, 6, 5, 4, 4, 2, 1, 1, 0, 3, 2, 3, 1, 6, 6, 0, 3, 0, 0, 5, 5, 0, 3, 5, 6, 2, 2, 5, 3, 2, 6, 0, 5, 6, 1, 5, 5, 5, 6], [0], [2, 2, 1, 2, 2, 0, 3, 2, 2, 2, 3, 0, 2, 0, 1, 3, 1, 2, 3, 0, 1, 2, 3, 0, 3, 2, 1, 3, 3, 2, 1, 2, 0, 2, 0, 1, 1, 3, 0, 3, 3, 2, 2, 0, 2, 1, 3, 1, 1, 2, 3, 2, 1, 3, 3, 2, 1, 2, 0, 1, 0, 0, 1, 3, 0, 1, 2, 0, 2, 0, 3, 1, 2, 0, 2, 2, 2, 0, 1, 3, 3, 3, 2, 0, 3, 0, 2, 2, 3, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 3, 3, 1, 2, 3, 2, 3, 0, 2, 2, 2, 0, 1, 2, 3, 3, 0, 2, 2, 3, 0, 3, 0, 3, 1, 2, 1, 0, 3, 0, 0, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2, 3, 1, 0, 0, 1, 3, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 3, 0, 1, 3, 3, 3, 0, 3, 1, 2, 2, 0, 1, 2, 2, 2, 3, 2, 2, 0, 2, 2, 3, 1, 2, 2, 2, 1, 2, 3, 3, 3, 3, 1, 2, 1, 0, 0, 3, 1, 1, 1, 2, 0, 0, 3, 1, 1, 0, 3, 2, 1, 3, 2, 1, 3, 0, 2, 3, 1, 0, 1, 3, 3, 2, 1, 0, 1, 3, 3, 2, 3, 3, 2, 0, 2, 3, 1, 1, 3, 3, 3, 0, 0, 2, 0, 3, 2, 3, 1, 0, 3, 0, 3, 2, 2, 0, 3, 0, 3, 1, 2, 3, 0, 2, 2, 2, 1, 0, 1, 1, 3, 3, 1, 3, 0, 1, 1, 3, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 1, 3, 2, 2, 2, 1, 0, 2, 3, 0, 3, 2, 2, 0, 1, 3, 3, 1, 0, 0, 2, 0, 3, 1, 3, 3, 3, 2, 3, 0, 1, 3, 0, 1, 3, 3, 3, 2, 3, 1, 1, 3, 1, 3, 1, 1, 0, 3, 0, 1, 1, 2, 2, 2, 2, 0, 1, 2, 3, 2, 3, 0, 3, 0, 0, 1, 3, 2, 2, 0, 3, 0, 2, 0, 1, 0, 2, 3, 2, 1, 0, 1, 2, 0, 0, 3, 2, 0, 1, 1, 3, 3, 0, 0, 3, 2, 2, 0, 2, 0, 2, 1, 1, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [2, 0, 1, 1, 2, 1, 0, 2, 2, 1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 1, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 2, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 0, 1, 0, 2, 0, 2, 1, 1, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 1, 0, 0, 2, 0, 1, 1, 2, 0, 0, 0, 0, 0, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 1, 2, 1, 2, 2], [2, 1, 1, 1, 1, 0, 0, 2, 1, 2, 2, 0, 2, 1, 0, 0, 2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 1, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 0, 2, 2, 2, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 96, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( divInt(int(2.0),mod(( i1 * abs(mod(( divInt(min(res0, ( in0 - int(2.0) )),max(int(2.0), ( max(in1, int(9.0)) - ( abs(in2) - max(( int(4.0) - min(abs(mod(int(6.0),divInt(i0,( i0 + int(3.0) )))), int(9.0)) ), abs(i1)) ) ))) + max(min(mod(mod(i2,divInt(int(4.0),max(int(1.0), int(9.0)))),( min(mod(int(7.0),max(min(divInt(int(0.0),( in0 * int(2.0) )), in0), i0)), int(2.0)) - abs(res0) )), int(8.0)), divInt(i0,divInt(in0,abs(int(1.0))))) ),( in0 * mod(divInt(mod(i0,int(3.0)),min(abs(min(( in1 * abs(i1) ), ( ( min(( ( mod(divInt(int(4.0),( mod(divInt(int(3.0),min(min(abs(int(7.0)), ( max(( abs(i2) + ( divInt(( i0 * int(2.0) ),( min(abs(res0), ( ( abs(i1) - max(i2, abs(int(8.0))) ) + mod(int(1.0),i1) )) + min(i2, i2) )) * int(0.0) ) ), int(3.0)) * int(1.0) )), res0)),mod(in1,int(9.0))) + int(8.0) )),( ( min(int(0.0), i0) + i0 ) - int(4.0) )) * min(mod(int(9.0),divInt(divInt(int(3.0),int(6.0)),int(3.0))), divInt(int(2.0),( max(in2, int(9.0)) - abs(min(max(i0, max(int(9.0), ( mod(i2,int(2.0)) * ( mod(mod(max(( divInt(in1,( ( abs(int(8.0)) + mod(( divInt(int(7.0),mod(abs(abs(abs(abs(int(4.0))))),divInt(int(1.0),in2))) + res0 ),abs(int(5.0))) ) - int(9.0) )) + int(4.0) ), ( i2 - i2 )),abs(int(4.0))),int(0.0)) * i2 ) ))), min(mod(int(3.0),max(( int(4.0) * max(in0, ( max(int(6.0), in1) + int(7.0) )) ), max(min(divInt(int(4.0),i1), int(2.0)), max(min(( abs(min(divInt(i1,mod(abs(int(8.0)),int(3.0))), max(max(abs(i2), in1), divInt(i2,min(( min(int(4.0), i2) + min(i2, min(divInt(( res0 - abs(in2) ),min(int(2.0), divInt(abs(in1),( ( ( int(4.0) * in1 ) + int(7.0) ) - int(4.0) )))), min(abs(int(6.0)), max(i2, int(3.0))))) ), int(9.0)))))) * min(int(9.0), mod(int(7.0),int(6.0))) ), int(9.0)), int(8.0))))), mod(int(6.0),int(6.0))))) ))) ) * int(3.0) ), i1) * i1 ) - i0 ))), in0)),int(7.0)) ))) ),min(mod(divInt(divInt(int(8.0),i2),( abs(in0) * min(( divInt(i1,int(2.0)) - max(max(int(5.0), res0), res0) ), ( i0 * abs(int(3.0)) )) )),min(min(min(( min(in0, int(4.0)) * min(i0, int(4.0)) ), abs(max(abs(( abs(int(4.0)) - int(9.0) )), min(int(2.0), min(int(2.0), int(6.0)))))), i0), min(in2, int(5.0)))), int(7.0)))) + ( divInt(divInt(( in2 * int(2.0) ),( min(divInt(min(i0, abs(in0)),in2), int(1.0)) * max(mod(divInt(res0,min(i2, mod(i2,int(0.0)))),in2), divInt(max(( int(9.0) * in0 ), int(1.0)),( i2 * res0 ))) )),abs(divInt(i0,int(7.0)))) + int(0.0) ) ) \\l max(abs(in2), res0):{:\\nloopBreak% = 0\\nwhile False:{:\\ni1 = abs(mod(divInt(in2,( in2 + ( int(7.0) - int(9.0) ) )),in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not b0:{:\\nb0 = res0 \\ge int(5.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 96, 96, 2, 2, 0, 5, 2, 3, 1, 1, 87, 1, 395, 112, 101, 54, 58]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 1, 2, 1, 2, 2, 2, 2, 2, 0, 2, 0, 1, 2, 1, 2, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [5, 2, 9, 7, 8, 3, 6, 2, 6, 7, 0, 2, 6, 0, 6, 8, 1, 2, 9, 5, 6, 2, 5, 4, 0, 1, 7, 0, 3, 9, 8, 0, 3, 5, 5, 6, 2, 9, 2, 7, 0, 4, 5, 2, 0, 0, 7, 4, 7, 4, 7, 3, 7, 6, 6, 7, 0, 3, 7, 5, 6, 0, 5, 8, 7, 3, 0, 2, 2, 0, 5, 4, 9, 9, 7, 6, 5, 5, 0, 4, 8, 2, 9, 4, 2, 7, 2, 0, 4, 7, 2, 4, 1, 6, 2, 0, 0, 3, 6, 4, 2, 0, 2], [2, 0, 0, 5, 1, 3, 1, 3, 3, 4, 0], [2, 1, 2, 2, 0, 0, 0, 0, 0], [1], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 3, 0, 1, 2], [1, 1, 1], [0, 1, 1, 1, 0, 0], [3, 6, 6, 2, 4, 1, 5, 0, 2, 6, 0, 4, 0, 2, 5, 6, 4, 0, 5, 4, 2, 5, 6, 1, 0, 6, 1, 5, 1, 1, 4, 0, 4, 5, 5, 6, 5, 2, 0, 6, 5, 2, 3, 0, 1, 0, 2, 3, 3, 0, 1, 3, 6, 1, 4, 0, 5, 2, 1, 3, 5, 5, 1, 3, 6, 4, 2, 5, 1, 6, 1, 1, 2, 0, 0, 6, 6, 4, 2, 6, 6, 3, 3, 1, 3, 6, 2, 3], [1, 1, 1], [1, 3, 0, 2, 0, 2, 0, 1, 3, 0, 2, 1, 2, 1, 1, 3, 2, 3, 3, 1, 0, 1, 0, 1, 3, 1, 0, 1, 1, 3, 0, 3, 0, 0, 1, 2, 1, 3, 2, 2, 1, 2, 3, 3, 0, 2, 2, 0, 0, 3, 3, 2, 3, 1, 2, 2, 0, 2, 1, 2, 0, 0, 3, 3, 0, 0, 3, 1, 2, 3, 0, 1, 3, 2, 1, 2, 3, 0, 1, 1, 1, 2, 2, 0, 3, 3, 1, 3, 2, 2, 0, 0, 1, 1, 2, 0, 0, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 3, 2, 1, 2, 0, 3, 3, 3, 0, 0, 2, 1, 3, 2, 1, 3, 2, 0, 0, 3, 1, 1, 2, 0, 3, 3, 2, 3, 2, 3, 3, 2, 1, 0, 1, 0, 3, 3, 1, 2, 1, 0, 1, 3, 1, 3, 2, 3, 2, 1, 2, 1, 3, 1, 0, 1, 3, 3, 2, 3, 2, 0, 0, 3, 1, 3, 0, 0, 0, 0, 1, 3, 2, 3, 0, 2, 2, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 1, 2, 0, 0, 3, 0, 0, 3, 2, 3, 1, 2, 0, 3, 3, 1, 2, 1, 0, 1, 3, 1, 0, 0, 2, 2, 3, 2, 2, 0, 0, 3, 1, 3, 1, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1, 2, 0, 1, 1, 0, 3, 3, 3, 0, 1, 2, 3, 1, 1, 3, 1, 3, 2, 1, 0, 0, 3, 3, 2, 3, 1, 2, 1, 3, 1, 3, 2, 2, 1, 3, 1, 0, 1, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 3, 1, 2, 2, 3, 0, 0, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 2, 3, 0, 2, 0, 0, 2, 1, 2, 3, 3, 3, 3, 0, 3, 0, 2, 3, 2, 1, 1, 3, 2, 1, 3, 1, 1, 0, 3, 2, 2, 3, 1, 0, 1, 3, 1, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 2, 1, 2, 2, 0, 3, 1, 1, 0, 3, 2, 0, 0, 3, 0, 0, 1, 1, 2, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [2, 1, 1, 0, 0, 2, 2, 2, 2, 1, 0, 0, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 2, 1, 2, 1, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1, 0, 0, 0, 2, 0, 1, 2, 1, 2, 2, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 0, 2, 2, 0, 0, 2, 1, 1, 0, 0, 1, 1, 2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(5.0) == abs(in0):{:\\nb2 = False\\n:}\\nb1 = b2\\nif ( res0 + mod(res0,int(2.0)) ) \\l max(i2, ( int(9.0) + mod(int(7.0),int(8.0)) )):{:\\nb2 = False\\n:}else:{:\\nif b0:{:\\nloopBreak% = 0\\nwhile max(mod(min(min(int(3.0), in1), int(6.0)),i1), int(2.0)) \\l abs(int(6.0)):{:\\nloopBreak% = 0\\nwhile in2 != int(7.0):{:\\nloopBreak% = 0\\nwhile int(0.0) \\g abs(i0):{:\\nif abs(i2) \\ge res0:{:\\ni0 -= int(2.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile divInt(int(6.0),abs(divInt(( int(0.0) - ( max(min(in1, divInt(divInt(i0,i2),min(max(( abs(int(6.0)) - mod(( in2 - mod(int(8.0),divInt(res0,in1)) ),abs(max(i0, in2))) ), abs(int(1.0))), ( max(in1, int(2.0)) * max(divInt(int(9.0),mod(max(i2, int(5.0)),int(6.0))), int(2.0)) )))), mod(mod(in2,max(abs(int(5.0)), max(( ( res0 * i1 ) * int(4.0) ), int(0.0)))),( i0 + res0 ))) - min(divInt(divInt(( int(1.0) + int(7.0) ),divInt(int(0.0),i1)),int(3.0)), in2) ) ),divInt(divInt(min(mod(int(9.0),( i1 + max(abs(min(i1, in1)), mod(int(8.0),min(divInt(int(0.0),max(( i0 + in1 ), min(int(3.0), int(5.0)))), ( in2 + min(min(( min(( min(max(divInt(int(5.0),in2), int(6.0)), res0) - min(abs(int(2.0)), ( int(9.0) + in2 )) ), int(2.0)) - min(int(7.0), min(( abs(( int(0.0) * ( int(4.0) + min(int(5.0), i2) ) )) * int(2.0) ), min(abs(mod(max(divInt(i0,res0), abs(int(0.0))),max(in2, i2))), in0))) ), i0), int(0.0)) )))) )), abs(divInt(abs(i1),divInt(( min(( i0 + int(7.0) ), ( ( max(i2, int(4.0)) - ( int(7.0) * mod(in0,in0) ) ) + max(i0, i1) )) * max(divInt(min(int(4.0), ( in0 * max(max(int(7.0), ( int(3.0) + res0 )), int(7.0)) )),min(int(6.0), i1)), in1) ),( mod(min(( ( i0 + in2 ) * min(int(6.0), min(int(7.0), int(0.0))) ), int(3.0)),int(7.0)) - int(5.0) ))))),i2),int(6.0))))) \\g i1:{:\\nin0 -= max(int(0.0), ( int(5.0) + mod(in2,int(8.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = ( int(7.0) \\ge in2 or b0 )\\n:}\\nif False:{:\\nb0 = not abs(abs(max(i1, int(3.0)))) \\ge ( min(int(0.0), int(2.0)) + abs(int(2.0)) )\\n:}\\nif min(mod(int(0.0),in0), res0) \\le min(max(mod(abs(int(5.0)),divInt(int(4.0),max(int(9.0), min(mod(( int(9.0) - abs(int(7.0)) ),in1), int(6.0))))), int(5.0)), mod(( ( ( i2 - abs(divInt(int(5.0),int(0.0))) ) * max(int(4.0), mod(mod(abs(in2),i1),int(8.0))) ) + ( min(divInt(res0,( int(2.0) + int(9.0) )), ( ( ( min(i1, mod(i1,i2)) - ( int(4.0) + divInt(max(min(min(min(i0, abs(i0)), mod(min(( int(2.0) + int(7.0) ), max(( int(2.0) * abs(int(0.0)) ), int(4.0))),res0)), max(divInt(divInt(abs(int(7.0)),res0),int(2.0)), abs(int(4.0)))), min(in1, int(1.0))),i2) ) ) + mod(res0,int(6.0)) ) * int(2.0) )) + int(0.0) ) ),min(mod(int(0.0),( ( res0 + min(int(3.0), int(6.0)) ) - in0 )), min(( in0 - i1 ), max(in0, res0))))):{:\\ni2 -= int(4.0)\\n:}\\n:}\\nb0 = int(20.0) \\l ( int(2.0) + in0 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 19, 19, 10, 9, 103, 103, 11, 9, 1, 19, 11, 8, 3, 6, 88, 3, 376, 95, 94, 51, 47]}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 1, 0], [], [0, 0, 0, 1], [1, 1, 1], [0, 0, 3], [3], [1, 1, 2, 2, 2], [], [0, 1, 0], [0], [0, 0], [], [], [2, 2, 0], [1], [2, 1, 0, 3, 0, 1, 1], [0], [1], [0, 0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\nb2 = ( int(0.0) + i2 ) \\ge max(i2, int(0.0))\\nb2 = b2\\ni0 += int(3.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 3, 3, 1, 5, 0, 3, 1, 2, 0, 0, 3, 1, 7, 1, 1, 2, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1], [3], [], [2], [], [0], [], [1], [0], [], [0, 0], [1], [3, 0, 1], [], [1], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\ni0 -= max(i0, int(3.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 2, 1, 2, 2, 1, 2, 1, 0], [1, 0, 1, 0], [0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 8, 7, 5, 9, 3, 9, 9, 9, 2, 1, 6, 3, 9, 0, 9, 5, 2, 5, 4, 1, 7, 5, 4, 9, 0, 5, 2, 8, 0, 9, 2, 0, 3, 7, 6, 5, 6, 1, 8, 3, 7, 4, 3, 9, 0, 7, 8, 8, 9, 4, 7, 8, 5, 6, 2, 7, 8, 2, 5, 4, 2, 4, 3, 6, 3, 9, 2, 9, 2, 3, 8, 6, 5, 0, 5, 0, 4, 6, 3, 1, 0, 7, 3, 2, 2, 6, 1, 9, 6, 8, 6, 6, 6, 2, 8, 9, 4, 2, 7, 9, 3, 3, 0, 2, 1, 7, 2, 8, 2, 0, 7, 5, 6, 7, 3], [5, 0, 0, 5, 1], [1, 0, 2, 2], [1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0], [1, 3, 2, 0, 1], [1, 1], [0, 1], [5, 2, 4, 0, 6, 1, 3, 0, 3, 3, 6, 5, 5, 3, 4, 1, 5, 5, 5, 6, 5, 2, 0, 3, 3, 1, 5, 1, 2, 1, 0, 4, 3, 5, 2, 4, 5, 2, 6, 3, 0, 0, 6, 4, 0, 3, 3, 5, 4, 1, 3, 1, 4, 1, 6, 0, 0, 0, 2, 3, 6, 2, 1, 1, 1, 3, 3, 2, 1, 1, 4, 5, 1, 6, 4, 1, 2, 6, 5, 6, 0, 2, 1, 3, 6, 3, 3, 3, 6, 0, 2, 4, 2, 6, 6, 2, 2, 2, 5, 5, 3, 6, 0, 3, 4, 6, 3, 4, 6, 5, 6, 5, 3, 2, 3, 4, 6, 0, 3, 4, 1, 3, 1, 3, 2, 2, 5, 5, 6], [1, 0, 0], [2, 0, 3, 2, 1, 3, 3, 1, 2, 0, 3, 2, 1, 2, 3, 3, 1, 2, 3, 3, 1, 3, 1, 2, 2, 2, 0, 1, 1, 2, 3, 3, 0, 3, 0, 1, 2, 3, 1, 3, 1, 2, 2, 0, 2, 3, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0, 0, 0, 1, 0, 0, 2, 1, 3, 0, 3, 1, 3, 2, 0, 0, 2, 0, 0, 2, 0, 3, 3, 3, 3, 1, 3, 1, 2, 0, 3, 2, 3, 1, 0, 0, 1, 3, 3, 3, 2, 1, 3, 3, 0, 2, 2, 2, 3, 3, 3, 1, 2, 2, 0, 3, 0, 0, 1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 0, 2, 3, 1, 1, 2, 0, 2, 0, 3, 2, 1, 2, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 0, 3, 1, 0, 0, 2, 3, 3, 2, 1, 1, 0, 0, 3, 3, 1, 3, 3, 2, 0, 3, 1, 2, 0, 0, 2, 0, 3, 3, 2, 2, 2, 1, 0, 2, 1, 3, 2, 2, 0, 1, 3, 1, 2, 2, 1, 2, 1, 0, 2, 1, 3, 3, 3, 2, 3, 3, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 3, 0, 2, 0, 2, 0, 2, 3, 0, 1, 0, 0, 0, 0, 3, 3, 1, 1, 3, 0, 2, 3, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 1, 3, 1, 3, 3, 1, 2, 2, 1, 3, 1, 1, 2, 0, 2, 0, 2, 1, 3, 3, 2, 2, 3, 1, 0, 1, 2, 3, 2, 3, 3, 2, 3, 2, 3, 0, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 2, 3, 0, 1, 2, 1, 0, 2, 2, 3, 3, 2, 2, 0, 1, 2, 0, 2, 3, 0, 0, 0, 3, 1, 0, 3, 1, 1, 3, 1, 3, 3, 0, 1, 2, 2, 3, 2, 0, 3, 2, 0, 2, 1, 3, 0, 1, 1, 3, 2, 2, 1, 3, 2, 0, 0, 2, 2, 2, 3, 1, 3, 1, 0, 3, 1, 0, 2, 1, 3, 1, 1, 3, 3, 0, 1, 2, 1, 1, 2, 3, 3, 1, 2, 1, 3, 0, 1, 2, 1, 0, 3, 2, 1, 0, 2, 3, 2, 3, 3, 1, 2, 2, 3, 3, 1, 3, 1, 1, 3, 2, 1, 3, 0, 2, 1, 1, 0, 3, 1, 1, 0, 3, 0, 1, 2, 1, 3, 0, 2, 2, 1, 2, 3, 3, 2, 3, 2, 2, 2, 2, 3, 1, 1, 0, 1, 2, 1, 2, 0, 2, 0, 1, 3, 1, 3, 0, 3, 1, 1, 3, 2, 1, 0, 2, 0, 0, 2, 3, 2, 0, 2, 1, 0, 0, 2, 3, 0, 2, 2, 3, 2, 0, 0, 0, 1, 3, 1, 0, 2, 1, 0, 2, 2, 3, 1, 0, 0, 1, 0, 2, 3, 3, 1, 1, 2, 2, 0, 2, 1, 0, 3, 3, 0, 3, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 1, 2, 0, 0, 1, 1, 0, 1, 2, 0, 1, 2, 2, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 0, 1, 1, 2, 0, 1, 0, 0, 2, 0, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 2, 2, 2, 2, 0, 1, 2, 2, 2, 0, 1, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 2, 0, 1, 1, 1], [0, 2, 2, 0, 2, 0, 2, 2, 1, 1, 1, 0, 0, 2, 2, 0, 1, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 2, 1, 2, 0, 1, 0, 2, 2, 2, 0, 0, 1, 0, 2, 2, 1, 0, 0, 1, 1, 2, 2, 1, 1, 1, 0, 1, 2, 2, 0, 0, 1, 2, 1, 2, 1, 1, 0, 0, 0, 1, 1, 2, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( in2 + min(mod(int(3.0),max(abs(int(3.0)), ( i2 * min(( int(8.0) * mod(max(min(int(7.0), ( min(min(int(5.0), abs(int(9.0))), mod(( divInt(in1,int(3.0)) + int(9.0) ),( min(max(i0, abs(res0)), int(9.0)) * ( min(int(9.0), min(int(2.0), ( ( i1 + mod(max(int(1.0), in0),max(i0, in0)) ) * mod(in0,mod(int(6.0),res0)) ))) * in2 ) ))) - in2 )), int(3.0)),in0) ), in1) ))), ( int(9.0) - min(i1, max(int(0.0), abs(divInt(in2,in2)))) )) ) != divInt(in2,res0)\\nb0 = False\\nloopBreak% = 0\\nwhile ( in2 - min(max(abs(abs(int(9.0))), abs(int(5.0))), divInt(i2,abs(mod(min(int(2.0), i0),in0)))) ) \\l int(5.0):{:\\nin0 += abs(min(max(divInt(int(4.0),min(min(i1, divInt(( ( max(max(min(int(1.0), mod(( in2 + max(i1, i2) ),int(7.0))), max(( int(5.0) * max(divInt(i1,i0), ( divInt(in1,( abs(int(4.0)) * int(9.0) )) + ( in0 - ( in2 * max(mod(int(0.0),( i2 * in1 )), in2) ) ) )) ), int(5.0))), int(2.0)) + ( i2 - mod(res0,in0) ) ) + i0 ),max(int(8.0), i0))), res0)), mod(min(abs(( int(0.0) - int(9.0) )), in1),i0)), abs(min(int(2.0), min(max(( in0 - abs(int(0.0)) ), ( in0 * in2 )), divInt(in1,abs(max(mod(mod(( int(3.0) - i1 ),( int(7.0) + abs(divInt(mod(in0,int(6.0)),min(int(5.0), ( divInt(int(6.0),( int(1.0) * i1 )) - ( int(8.0) * min(abs(abs(divInt(min(max(in1, abs(( ( divInt(i1,res0) + ( divInt(i0,min(i0, divInt(i0,mod(i2,( abs(in0) - int(3.0) ))))) + res0 ) ) * i2 ))), i1),i1))), max(min(int(7.0), int(4.0)), abs(i1))) ) )))) )),( min(in0, in0) * i2 )), mod(divInt(mod(mod(i1,i1),mod(int(3.0),max(int(9.0), min(max(int(0.0), divInt(mod(int(7.0),max(int(8.0), int(8.0))),( in1 * ( in2 + ( int(9.0) + abs(min(mod(divInt(max(int(4.0), i1),int(7.0)),mod(min(( min(abs(( min(mod(max(res0, in1),i1), int(8.0)) - int(5.0) )), max(int(6.0), int(2.0))) + int(7.0) ), i2),res0)), int(8.0))) ) ) ))), divInt(min(in2, int(2.0)),( int(5.0) * res0 )))))),( mod(abs(min(divInt(( i0 * int(4.0) ),divInt(i2,mod(min(i1, in0),res0))), min(int(2.0), in0))),min(int(4.0), int(3.0))) - abs(int(6.0)) )),min(max(in0, int(3.0)), mod(( max(( in0 + min(( res0 + divInt(int(9.0),abs(i0)) ), int(2.0)) ), int(9.0)) - abs(( ( int(2.0) - abs(mod(i2,in1)) ) * divInt(mod(( abs(int(3.0)) * min(int(8.0), i2) ),max(int(6.0), res0)),mod(int(5.0),abs(int(0.0)))) )) ),int(5.0))))))))))))\\nif ( not b2 or abs(abs(res0)) \\l int(0.0) ):{:\\nloopBreak% = 0\\nwhile ( int(4.0) - int(6.0) ) != mod(min(max(int(3.0), ( int(1.0) - min(i2, int(0.0)) )), ( int(7.0) - i2 )),min(divInt(int(3.0),i2), ( max(divInt(abs(min(int(2.0), ( ( min(min(int(2.0), abs(int(6.0))), int(1.0)) + min(mod(int(9.0),min(in2, ( int(6.0) - int(8.0) ))), in2) ) * abs(int(6.0)) ))),int(6.0)), in0) * min(res0, int(6.0)) ))):{:\\ni0 = mod(int(2.0),min(in0, ( ( int(8.0) + ( min(max(( min(( ( mod(mod(min(int(9.0), int(4.0)),in1),int(2.0)) + divInt(int(7.0),( res0 - ( in0 * int(9.0) ) )) ) - max(int(3.0), abs(in1)) ), min(int(3.0), int(0.0))) * abs(( int(2.0) - res0 )) ), divInt(in2,res0)), divInt(min(( in2 - ( int(1.0) + in0 ) ), i2),divInt(max(in0, ( divInt(max(( in1 + res0 ), i0),int(7.0)) + abs(int(2.0)) )),in0))) - ( int(8.0) - in1 ) ) ) * ( mod(min(int(2.0), i1),in0) + int(0.0) ) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\ni1 = in0\\n:}else:{:\\nb2 = divInt(abs(min(int(7.0), int(5.0))),( divInt(i2,mod(int(6.0),i2)) + max(max(in2, max(int(7.0), int(3.0))), in2) )) \\g res0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 117, 117, 5, 4, 1, 10, 5, 5, 2, 2, 129, 3, 511, 139, 129, 72, 68]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 4, 9, 0, 1, 4, 6, 1], [5, 2], [0, 1], [0], [0, 0, 1, 1], [0, 0], [1, 3], [1], [], [0, 3, 2, 5, 1], [], [1, 1, 2, 0, 2, 1, 3, 3, 0, 3, 1, 2, 3, 0, 2, 0, 3, 2, 1, 1, 3, 2, 3, 1, 0, 1, 3, 1], [0, 0, 1, 0, 1, 0], [1, 1, 1, 2, 1, 2, 2, 2], [0, 1, 0, 0], [0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\nb1 = ( int(7.0) != int(6.0) and ( i0 + ( int(4.0) - max(max(in0, max(int(9.0), divInt(abs(i2),( in2 + max(divInt(int(0.0),int(1.0)), abs(( abs(int(4.0)) + i1 ))) )))), int(6.0)) ) ) == abs(int(1.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 9, 9, 2, 2, 1, 4, 2, 2, 1, 0, 5, 0, 28, 6, 8, 4, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1], [2, 0, 2, 0, 0, 2, 1, 1, 1], [1, 0, 0], [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 1, 5, 2, 6, 8, 1, 9, 9, 5, 3, 0, 4, 9, 9, 6, 4, 6, 7, 5, 0, 4, 6, 2, 2, 7, 5, 8, 7, 1, 7, 1, 6, 1, 4, 5, 3, 0, 2, 6, 2], [0, 2, 5, 2, 5, 3, 0], [1, 2, 2], [0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 2, 1, 3, 0, 3, 3, 2, 2], [0], [0, 0], [3, 2, 0, 5, 0, 0, 6, 3, 1, 6, 3, 2, 1, 1, 2, 0, 5, 4, 6, 6, 1, 2, 0, 5, 4, 3, 4, 3, 4, 6, 5, 5, 3, 2, 1, 4, 4, 5, 0, 4, 2, 1, 1], [1, 1, 0, 0], [1, 2, 0, 1, 3, 0, 0, 3, 3, 3, 2, 1, 1, 0, 0, 3, 0, 2, 3, 3, 1, 1, 1, 1, 1, 3, 2, 3, 2, 1, 1, 0, 0, 2, 2, 1, 0, 3, 3, 0, 1, 3, 2, 1, 0, 2, 1, 2, 0, 3, 2, 2, 2, 3, 0, 1, 3, 2, 1, 2, 0, 1, 3, 1, 1, 0, 3, 3, 3, 2, 1, 1, 1, 3, 1, 1, 1, 2, 0, 3, 3, 2, 3, 3, 0, 1, 0, 0, 0, 1, 1, 1, 3, 1, 2, 3, 2, 0, 0, 1, 0, 3, 2, 2, 0, 2, 3, 3, 3, 3, 1, 3, 2, 3, 2, 0, 0, 0, 2, 2, 0, 0, 1, 0, 1, 3, 3, 2, 1, 1, 0, 2, 2, 0, 0, 0, 3, 0, 2, 3, 3, 0, 3, 0, 2, 2, 0, 1, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 2, 1, 1, 0, 2, 2, 2, 2, 0, 1, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0], [2, 0, 0, 1, 1, 1, 1, 2, 2, 0, 1, 2, 2, 0, 2, 2], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not ( not int(1.0) \\l mod(in0,int(7.0)) and min(i2, i0) == max(abs(max(divInt(int(1.0),int(5.0)), in2)), i0) ):{:\\ni0 *= max(res0, mod(min(abs(int(2.0)), int(6.0)),int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nin0 += int(1.0)\\n:}\\nb1 = ( b2 or int(9.0) != abs(mod(abs(mod(int(9.0),int(5.0))),i1)) )\\nif ( res0 == ( ( int(3.0) + in0 ) - abs(min(i2, int(0.0))) ) or max(divInt(int(4.0),i1), ( int(9.0) - divInt(i1,max(mod(mod(( min(i2, int(9.0)) - max(( int(6.0) - mod(i0,int(4.0)) ), abs(int(6.0))) ),int(7.0)),in2), max(abs(max(divInt(int(5.0),int(0.0)), int(4.0))), max(int(6.0), int(2.0))))) )) != int(2.0) ):{:\\nb2 = ( not divInt(in1,min(max(divInt(abs(min(res0, int(7.0))),res0), i1), i2)) \\ge int(5.0) or not int(8.0) \\l int(7.0) )\\ni0 = max(int(1.0), divInt(min(mod(in2,in1), int(7.0)),in0))\\n:}\\nin1 = max(( ( in0 * mod(max(abs(abs(min(int(1.0), min(( min(( in1 * res0 ), in2) + ( ( in2 - in0 ) * int(6.0) ) ), i2)))), int(1.0)),min(max(( int(4.0) * int(5.0) ), i1), ( mod(in1,in1) + in2 ))) ) * min(i0, divInt(max(min(in1, min(i2, mod(( i1 * int(3.0) ),int(0.0)))), int(2.0)),mod(int(6.0),i1))) ), int(2.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 42, 42, 7, 3, 4, 18, 7, 11, 1, 2, 43, 4, 154, 34, 39, 16, 20]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1], [2, 3, 9, 3], [5], [0], [], [1], [0], [], [], [], [2, 4, 5, 6, 5, 2], [], [2, 3, 3, 3, 0, 1, 0, 3, 0, 0, 2, 3, 1, 1, 2, 2, 1, 0, 0], [1, 0, 0, 0], [2, 0, 0, 1, 0], [2, 1, 2], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = divInt(abs(min(min(i2, int(2.0)), in1)),max(in2, res0)) != ( min(int(3.0), int(9.0)) * ( ( int(3.0) - in2 ) * i2 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 6, 0, 19, 4, 5, 3, 1]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [], [], [], [1], [], [0, 0], [], [2, 0], [], [], [4, 5], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not b1:{:\\nin1 *= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1], [3, 4], [3], [2, 1], [], [1, 0], [0], [1], [0], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(3.0) \\ge int(4.0)\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [0, 7], [], [], [], [], [], [], [], [], [6, 0, 3, 2], [0], [3, 0, 3, 2, 1, 2, 0, 1, 0], [0, 0], [1, 0], [1, 0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = max(i0, min(( int(0.0) - ( in0 + int(7.0) ) ), i2))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 9, 2, 2, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1], [2, 4, 3, 5], [], [], [], [], [], [], [], [], [3, 3, 4], [1], [3, 2, 2, 1, 1, 2, 3, 1, 0, 0, 1], [1, 0, 1], [1, 0], [0, 1], [0, 0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += max(divInt(( int(2.0) - int(4.0) ),divInt(min(int(3.0), in0),in1)), int(5.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 11, 3, 2, 2, 2]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 0, 2, 0], [1, 1, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 8, 1, 1, 6, 6, 8, 7, 1, 6, 0, 2, 1, 1, 5, 9, 1, 2, 9, 6, 0, 7, 0, 9], [4, 5, 2, 2], [], [1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0], [3, 3, 1, 3, 1], [0, 1], [], [1, 0, 5, 1, 1, 0, 6, 0, 6, 5, 4, 0, 2, 3], [1, 1], [3, 1, 0, 2, 3, 3, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 1, 0, 2, 3, 3, 3, 2, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 1, 2, 2, 0, 2, 2, 2, 3, 0, 1, 0, 2, 0, 1, 2, 1, 1, 2, 1, 3, 1, 3, 2, 0, 3, 1, 0, 0, 1, 3, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 0, 0, 2, 0, 0, 1, 2, 1, 0, 0], [1, 0, 1, 1, 1, 2, 1, 0, 0, 2], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( True or max(int(6.0), i1) \\le ( abs(min(( int(1.0) - int(8.0) ), int(1.0))) + min(int(1.0), int(6.0)) ) ) and ( int(6.0) != int(8.0) and divInt(mod(int(7.0),i0),( abs(min(min(mod(in2,int(1.0)), int(6.0)), int(0.0))) - int(2.0) )) == divInt(int(1.0),mod(i1,i1)) ) ):{:\\nloopBreak% = 0\\nwhile ( int(1.0) - ( ( i0 - divInt(divInt(( max(res0, int(5.0)) * i0 ),mod(res0,int(9.0))),( int(1.0) - int(2.0) )) ) + mod(int(9.0),abs(int(6.0))) ) ) == max(divInt(in2,min(int(0.0), in1)), i0):{:\\ni2 += int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nin0 *= min(int(0.0), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 25, 25, 4, 0, 3, 9, 4, 5, 2, 0, 14, 2, 67, 18, 12, 10, 10]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 8, 7, 3, 1, 8, 5, 5], [5], [2, 1], [1], [0, 1, 0], [0], [3, 0], [], [], [4, 3, 4, 3], [], [2, 2, 1, 3, 3, 1, 1, 2, 1, 3, 3, 1, 0, 1, 3, 3, 3, 2, 3, 1, 2, 1, 0, 3, 2, 0, 1, 0], [0, 1, 0, 0, 0, 0], [1, 2, 0, 1, 1, 2, 2, 2, 1], [0, 2, 0, 2, 0], [1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( mod(int(6.0),max(abs(int(0.0)), int(8.0))) + ( int(7.0) * min(max(int(3.0), in1), int(1.0)) ) ) != max(abs(abs(( abs(int(8.0)) + ( int(5.0) * in0 ) ))), max(( in1 + int(5.0) ), in0)) or b1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 9, 9, 1, 2, 1, 3, 1, 2, 0, 0, 4, 0, 28, 6, 9, 5, 1]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 0, 0, 0, 2, 2, 0, 1, 0, 1], [0, 0, 0], [0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 0, 6, 3, 1, 7, 5, 1, 8, 1, 2, 5, 1], [1, 0, 1, 4, 1], [1, 1, 2, 2, 1], [0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 3, 3, 0, 1], [0], [1, 1, 1], [6, 1, 3, 5, 1, 5, 1, 3, 1, 3, 4, 3, 1, 3, 0, 0], [0, 1, 1, 1], [1, 0, 1, 2, 0, 3, 2, 2, 0, 0, 2, 3, 1, 2, 3, 1, 1, 0, 3, 1, 3, 0, 1, 2, 1, 3, 0, 3, 1, 1, 3, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [1, 2, 2, 1, 0, 1, 1, 2], [0, 2, 2, 1, 1, 1, 1, 2, 1], [1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(3.0) \\g res0:{:\\nb1 = b1\\ni1 = int(5.0)\\nb2 = ( in0 + max(( ( in2 * i1 ) * ( abs(int(0.0)) - mod(abs(int(6.0)),int(3.0)) ) ), in2) ) \\l max(int(1.0), min(i1, int(7.0)))\\nif ( ( int(5.0) - max(in0, max(int(1.0), int(8.0))) ) \\g abs(int(1.0)) and ( b2 and True ) ):{:\\nif i1 \\le int(2.0):{:\\nin0 -= int(5.0)\\n:}else:{:\\nb1 = int(1.0) \\g in1\\n:}\\n:}else:{:\\nin0 -= ( i1 * in0 )\\n:}\\n:}else:{:\\ni0 -= i0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 14, 14, 5, 5, 2, 10, 5, 5, 1, 3, 16, 4, 41, 7, 8, 9, 1]}, {"genotype": [[0], [0, 1, 1, 1, 1], [1, 2, 2, 2, 1], [1, 0, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 9, 9, 5, 8, 6, 5, 5, 2, 2, 1, 6, 4, 1, 6], [5, 0], [0], [], [1, 0, 0, 1, 0], [0, 0], [2, 2, 0], [], [0], [6, 3, 0, 1, 6, 0, 4, 4, 3, 6, 3, 1, 1, 3, 6], [1, 1], [0, 0, 2, 2, 2, 3, 2, 3, 1, 0, 0, 1, 0, 3, 3, 2, 0, 3, 2, 1, 2, 3, 0, 1, 3, 1, 3, 3, 2, 1, 1, 3, 2, 1, 3, 2, 0, 3, 2, 1, 1, 3, 0, 3, 2, 2, 1, 1, 1, 1, 0, 2, 2, 0, 0, 3, 1, 2, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 0, 0], [1, 2, 1, 2, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= in0\\nloopBreak% = 0\\nwhile i0 != ( mod(( min(divInt(abs(int(6.0)),i1), res0) * int(4.0) ),i0) - abs(abs(divInt(in1,max(mod(int(9.0),divInt(max(in1, int(9.0)),abs(int(5.0)))), abs(abs(mod(int(8.0),int(6.0)))))))) ):{:\\nif not not min(( int(5.0) * min(mod(in0,abs(divInt(int(5.0),int(2.0)))), abs(res0)) ), min(divInt(( int(2.0) + int(1.0) ),int(6.0)), int(4.0))) \\l in0:{:\\nloopBreak% = 0\\nwhile b0:{:\\ni1 -= divInt(( i1 - in0 ),min(int(1.0), ( int(6.0) + res0 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 5, 5, 3, 2, 16, 16, 2, 1, 0, 5, 2, 3, 0, 1, 15, 2, 60, 16, 15, 8, 10]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 1, 2, 1, 0, 2, 0, 1, 0, 0], [0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 7, 0, 8, 4, 6, 5, 5, 8, 3, 0, 3, 8, 5, 2, 3, 7, 6, 5, 7, 4, 9, 7, 6, 3, 6, 0, 1, 1, 6, 6, 8, 1, 0, 4, 6, 2, 2, 9, 1, 3, 7, 6, 8, 1, 8, 8, 7, 5, 6, 7, 4, 0, 6, 6, 8, 7, 6, 3, 7, 6, 2, 2, 5, 0, 9, 7, 0, 0, 7, 5, 9, 8, 3], [0, 1, 5, 0, 0, 4, 1], [2, 2, 0, 2, 2, 2, 2, 0], [0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 0, 2, 3, 3, 0, 3, 2, 0], [1], [1, 1, 1], [5, 0, 0, 5, 6, 4, 3, 5, 5, 6, 1, 4, 2, 1, 1, 5, 1, 5, 5, 6, 5, 6, 1, 3, 6, 5, 5, 2, 2, 5, 6, 3, 0, 0, 0, 2, 2, 4, 1, 3, 2, 4, 0, 0, 2, 5, 2, 2, 0, 4, 3, 6, 2, 6, 1, 2, 6, 0, 0, 6, 1, 1, 6, 0, 0, 0, 3, 5, 6], [0, 0, 0], [0, 1, 0, 1, 1, 0, 2, 2, 1, 2, 0, 3, 2, 0, 0, 3, 1, 0, 0, 3, 1, 3, 3, 0, 2, 1, 2, 1, 1, 3, 3, 0, 3, 3, 0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 0, 3, 1, 0, 3, 0, 2, 0, 0, 1, 3, 3, 1, 3, 0, 2, 2, 1, 2, 1, 0, 1, 2, 1, 2, 3, 2, 2, 3, 3, 0, 2, 1, 1, 1, 1, 1, 2, 1, 0, 3, 2, 1, 1, 3, 1, 3, 0, 2, 1, 2, 0, 3, 2, 0, 0, 1, 2, 1, 2, 2, 1, 3, 2, 0, 2, 2, 3, 3, 1, 1, 0, 2, 2, 2, 3, 2, 3, 1, 1, 2, 0, 2, 3, 0, 3, 1, 0, 1, 3, 3, 0, 3, 2, 1, 3, 1, 1, 2, 2, 2, 0, 1, 1, 2, 3, 3, 1, 1, 3, 1, 3, 3, 3, 0, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 1, 1, 2, 1, 1, 0, 3, 2, 0, 3, 2, 0, 2, 1, 0, 3, 0, 0, 0, 0, 2, 1, 3, 2, 1, 0, 2, 1, 0, 2, 2, 0, 1, 0, 3, 0, 1, 2, 3, 3, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 1, 0, 3, 1, 1, 2, 3, 3, 3, 2, 1, 0, 0, 1, 0, 1, 2, 1, 3, 3, 2, 3, 0, 2, 1, 0, 1, 0, 1, 3, 0, 0, 2, 2, 0, 2, 0, 1, 3, 2, 2, 2, 3, 1, 1, 3, 1, 1, 0, 1, 3, 2, 3, 0, 3, 0, 0, 2, 0, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 1, 1, 1, 2, 1, 0, 0, 2, 1, 1, 1, 1, 0, 2, 0, 0, 0, 2, 1, 0, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 0, 0, 1, 1, 2, 1, 0, 2, 1, 2], [2, 2, 2, 1, 2, 0, 2, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i0\\nif False:{:\\ni0 = int(8.0)\\n:}else:{:\\nif in2 \\l int(4.0):{:\\nb2 = b2\\n:}else:{:\\nb0 = not ( ( int(7.0) \\g res0 and ( ( int(0.0) * ( in1 * max(divInt(in0,in2), max(int(8.0), in2)) ) ) * res0 ) != min(int(4.0), max(max(i1, divInt(int(6.0),divInt(int(5.0),int(5.0)))), abs(max(in1, max(min(i2, int(8.0)), mod(int(3.0),( i1 - divInt(mod(int(0.0),i1),( in2 * min(int(3.0), i1) )) ))))))) ) or b2 )\\n:}\\nif ( not min(in2, divInt(in2,res0)) \\l int(8.0) or b2 ):{:\\nb2 = max(min(int(5.0), max(in2, divInt(( int(2.0) + ( int(3.0) * res0 ) ),int(7.0)))), mod(int(6.0),( min(( ( max(max(i1, ( int(5.0) * int(7.0) )), int(4.0)) + int(9.0) ) + int(7.0) ), mod(int(6.0),in0)) * abs(mod(int(3.0),int(6.0))) ))) \\l min(int(0.0), max(res0, mod(int(1.0),( in2 - min(( in2 + i2 ), int(1.0)) ))))\\n:}else:{:\\nb2 = ( int(6.0) + divInt(mod(int(6.0),min(mod(i2,mod(( abs(min(int(8.0), int(1.0))) - in2 ),( ( divInt(min(( max(int(0.0), int(4.0)) - ( res0 + ( min(in0, abs(int(6.0))) + i0 ) ) ), int(2.0)),max(max(i0, max(mod(int(2.0),abs(int(9.0))), int(1.0))), mod(( ( i0 + int(3.0) ) * int(7.0) ),divInt(max(min(int(6.0), int(8.0)), min(int(1.0), abs(max(max(i2, max(max(min(abs(divInt(min(min(divInt(min(abs(int(8.0)), int(8.0)),( int(7.0) * int(5.0) )), i2), max(( in1 - min(( i1 - ( int(6.0) - in0 ) ), max(i2, in1)) ), i0)),i0)), ( int(7.0) * abs(( int(4.0) + i2 )) )), ( int(0.0) * in2 )), ( ( i2 - int(6.0) ) * i2 ))), max(i0, int(6.0)))))),divInt(abs(max(int(8.0), ( max(mod(in1,max(abs(( int(7.0) - in0 )), int(6.0))), res0) - max(int(3.0), int(7.0)) ))),divInt(abs(abs(max(( int(6.0) * i2 ), res0))),int(2.0))))))) - i1 ) - int(2.0) ))), divInt(int(5.0),min(min(( max(i2, ( int(0.0) + res0 )) - int(9.0) ), i0), int(7.0))))),max(i0, res0)) ) \\le ( mod(i1,( i1 + int(0.0) )) * abs(mod(( mod(max(int(0.0), int(7.0)),min(int(5.0), int(9.0))) * res0 ),int(8.0))) )\\n:}\\ni0 = abs(divInt(max(i0, abs(i0)),in0))\\nb0 = divInt(in2,int(3.0)) \\g res0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 3, 8, 75, 75, 7, 8, 3, 16, 7, 9, 1, 3, 69, 3, 281, 70, 70, 39, 31]}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [1], [0, 0], [1, 1, 1], [7, 2, 3], [4, 3], [2, 1], [], [0, 1, 1], [0, 0], [1], [1], [], [1, 2, 5, 6], [], [3, 1, 3, 3, 0, 2, 1, 1, 2, 0, 0, 0], [0, 1], [2, 0, 2], [2], [0]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\nloopBreak% = 0\\nwhile abs(int(7.0)) \\le min(abs(i1), ( int(2.0) * int(3.0) )):{:\\nb1 = divInt(i2,in2) \\ge res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 2, 2, 0, 3, 2, 1, 1, 0, 4, 0, 12, 2, 3, 1, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1], [2, 1, 1, 2], [2, 5], [0, 2], [], [1, 1], [0, 0], [], [], [], [3, 2, 3], [], [1, 2, 1, 0, 3, 3, 1, 0, 1, 0], [0], [1, 1], [1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(2.0) == ( int(1.0) - in0 )\\nb2 = max(max(int(1.0), i2), int(2.0)) != in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 2, 2, 0, 2, 2, 0, 0, 0, 3, 0, 10, 1, 2, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1], [2, 1, 0, 0, 1, 1, 0], [1], [0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 4, 5, 2, 4, 0, 8, 9, 7, 4, 1, 6, 3, 3, 2, 2, 6, 5, 5, 7, 9, 6], [2, 2, 3, 5, 1, 5], [0, 2, 2, 2, 2, 0, 2], [0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [2, 0, 2, 3, 3, 2, 0], [], [], [6, 6, 6, 1, 3, 1, 3, 0, 1, 2, 1, 5, 2, 3, 1, 6, 5, 5, 5, 5], [0], [2, 1, 2, 1, 0, 1, 1, 1, 0, 2, 1, 1, 0, 1, 1, 1, 2, 3, 3, 2, 0, 1, 3, 3, 1, 3, 3, 3, 1, 3, 2, 3, 2, 2, 3, 3, 1, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 0, 2, 0, 0, 2, 3, 1, 3, 3, 2, 2, 3, 3, 3, 0, 3, 1, 0, 2, 3, 1, 3, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 1, 0, 2, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 2, 2, 2, 1, 2], [0, 0, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not divInt(int(5.0),mod(int(4.0),res0)) == int(4.0):{:\\nb0 = int(5.0) == int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b2\\nb2 = not res0 \\ge divInt(int(4.0),int(0.0))\\nb2 = ( ( not res0 != int(8.0) and int(9.0) \\g int(7.0) ) or divInt(min(abs(( i1 + int(4.0) )), max(min(int(1.0), abs(max(max(int(6.0), min(( max(( ( min(abs(int(3.0)), int(3.0)) + int(2.0) ) * in0 ), i1) + in0 ), i0)), int(2.0)))), min(mod(int(6.0),i1), divInt(i2,i1)))),mod(max(int(5.0), max(min(( divInt(abs(abs(abs(in2))),abs(int(5.0))) + i2 ), ( max(int(7.0), abs(in0)) - i1 )), res0)),in2)) != mod(divInt(in2,in2),int(9.0)) )\\nin2 = int(6.0)\\nb0 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 23, 23, 6, 7, 2, 13, 6, 7, 0, 0, 20, 1, 79, 16, 21, 6, 10]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0], [1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 5, 0, 4, 8, 7, 2, 5, 0, 3, 2, 7, 4], [0, 1, 2], [1, 1], [], [1, 1, 1], [0, 0, 0], [], [], [], [2, 6, 6, 5, 6, 1, 1, 4, 0, 5, 5, 0], [1], [1, 3, 3, 0, 3, 1, 0, 0, 2, 3, 2, 3, 0, 3, 0, 2, 3, 0, 3, 1, 2, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 2, 0, 3, 2, 2, 3, 1, 2, 3, 1, 1, 1, 1, 0, 0, 3, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 0, 2, 2, 1, 2, 0, 2, 0, 0, 2], [1, 1, 2, 0, 2], [1, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(8.0) \\l max(min(i2, min(int(1.0), res0)), res0):{:\\nb1 = mod(abs(mod(abs(in2),max(res0, mod(abs(i1),min(int(5.0), mod(( mod(divInt(i1,int(0.0)),int(4.0)) - int(8.0) ),in1)))))),int(7.0)) \\g int(2.0)\\ni0 -= ( in2 * abs(divInt(( min(int(5.0), ( min(int(0.0), int(3.0)) + int(2.0) )) * int(7.0) ),in2)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i0 == abs(int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 14, 14, 3, 2, 0, 3, 3, 0, 0, 0, 12, 1, 48, 11, 12, 5, 7]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 0], [], [0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 2, 1, 9, 5, 5, 2, 2, 3, 0, 6], [4], [2, 1, 1, 1, 0], [], [1, 0, 0], [0], [0, 0], [], [], [3, 2, 3, 0, 5, 1, 0, 0], [1], [2, 1, 1, 2, 2, 3, 3, 2, 2, 1, 2, 0, 2, 1, 1, 0, 1, 1, 1, 2, 0, 3, 2, 3, 0, 2, 0, 1, 1, 3, 1, 2, 3, 1, 0, 3, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 2], [0, 1, 2, 0, 1, 0, 2, 2, 1], [1, 1, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( int(8.0) + int(6.0) ) \\le ( ( abs(min(( ( int(2.0) - mod(in0,mod(int(1.0),int(9.0))) ) * i2 ), int(5.0))) + int(5.0) ) - int(2.0) )\\nb1 = b1\\nin0 += ( i0 * min(( min(in2, ( i1 * int(2.0) )) - int(3.0) ), min(int(0.0), mod(min(int(6.0), i0),abs(i0)))) )\\nb1 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 12, 12, 1, 5, 0, 3, 1, 2, 0, 0, 8, 1, 37, 11, 7, 9, 3]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 5, 5, 9, 6, 3, 0, 0, 3, 7, 2, 4, 7, 9, 2, 2, 0, 8, 3, 0, 5, 1, 3, 4, 9, 0, 5, 8, 1, 2, 9, 1, 6, 3, 1], [0, 0, 2, 0, 4, 5, 3, 2, 0], [2, 0, 0, 0, 2, 2], [1], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0], [0, 0], [1, 1], [2, 3, 0, 4, 6, 4, 1, 1, 0, 4, 2, 4, 5, 4, 0, 4, 3, 1, 3, 1, 2, 6, 6, 4, 1, 1, 0, 0, 6, 0, 1, 4, 4, 2, 1, 2, 5, 2, 5, 0, 6], [0, 1], [1, 2, 1, 2, 0, 3, 2, 0, 1, 1, 3, 1, 2, 1, 1, 3, 0, 2, 3, 3, 2, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 1, 3, 2, 3, 0, 2, 0, 3, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 1, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 3, 2, 2, 0, 3, 2, 0, 0, 0, 2, 2, 1, 3, 1, 3, 0, 3, 1, 3, 0, 0, 2, 1, 1, 2, 0, 1, 3, 2, 2, 0, 0, 2, 1, 3, 3, 3, 3, 0, 0, 0, 1, 3, 2, 0, 2, 3, 3, 3, 1, 3, 2, 2, 0, 3, 1, 2, 1, 1, 0, 0, 2, 3, 3, 0, 2, 3, 1, 1, 1, 0, 2, 2, 3, 1, 0, 3, 0, 0, 3, 0, 2, 3, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [2, 0, 2, 1, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 1, 2, 2, 1, 1, 0, 0], [0, 2, 1, 0, 1, 1, 0, 0, 1, 1, 2, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(9.0) \\l mod(int(4.0),divInt(i2,abs(mod(in0,int(5.0))))) or int(5.0) \\l min(int(9.0), divInt(int(6.0),int(3.0))) ):{:\\nloopBreak% = 0\\nwhile abs(i0) == mod(max(max(( in1 + int(0.0) ), mod(abs(res0),in1)), i1),i1):{:\\ni0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i2 \\l in1:{:\\nb2 = int(0.0) \\le abs(( min(in2, divInt(in1,min(int(3.0), int(7.0)))) * int(2.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile divInt(divInt(mod(divInt(( max(min(int(4.0), ( int(7.0) - abs(( int(9.0) + min(int(2.0), divInt(i0,divInt(int(2.0),int(0.0)))) )) )), abs(divInt(divInt(in1,abs(divInt(in0,i1))),in0))) - ( ( int(8.0) - abs(int(3.0)) ) + abs(i1) ) ),abs(int(0.0))),abs(i2)),res0),( int(5.0) + int(1.0) )) != divInt(res0,int(3.0)):{:\\nif True:{:\\nb0 = True\\n:}else:{:\\nb0 = b0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile abs(( ( in1 - i1 ) - mod(int(4.0),abs(abs(min(abs(i1), i0)))) )) \\ge i0:{:\\nres0 *= int(9.0)\\nb2 = min(mod(i0,mod(min(min(abs(int(0.0)), abs(divInt(( i1 + abs(int(5.0)) ),( int(8.0) + int(1.0) )))), in1),in1)), divInt(max(abs(i2), ( abs(int(2.0)) + int(9.0) )),int(1.0))) == i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = mod(( max(int(6.0), i2) - max(in2, i2) ),min(in2, divInt(min(int(3.0), i0),res0))) \\l int(1.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 36, 36, 9, 6, 1, 13, 9, 4, 2, 2, 41, 2, 150, 38, 37, 15, 24]}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 2, 2, 0, 0, 1, 1], [1, 1, 0, 0, 0], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 2, 6, 6, 3, 0, 7, 6, 0, 0, 0, 1, 8, 6, 8, 6, 2, 0, 0, 0, 9, 6, 7, 3, 5, 0, 8, 9, 6, 1, 2, 5, 9, 7, 3, 8, 1, 2, 3, 1, 3, 9, 7, 3, 6, 4, 4, 0, 4, 5, 3, 8], [4, 2, 5, 5, 0], [0], [], [1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2, 1], [0], [1, 0, 1], [0, 2, 6, 2, 6, 6, 5, 0, 0, 0, 3, 6, 2, 5, 0, 0, 4, 3, 1, 2, 1, 2, 4, 1, 1, 5, 1, 1, 0, 6, 4, 2, 2, 1, 3, 4, 6, 4, 2, 6, 0, 0, 4, 2, 4, 1, 6, 3, 0, 3, 3, 6, 5, 3, 4, 6, 0, 3], [1, 1, 0, 1], [0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 0, 0, 3, 1, 2, 2, 0, 2, 0, 1, 2, 3, 2, 1, 3, 1, 1, 3, 1, 0, 3, 0, 2, 2, 0, 1, 1, 1, 3, 0, 2, 0, 1, 3, 3, 2, 2, 0, 2, 3, 3, 3, 2, 2, 2, 1, 1, 3, 2, 0, 1, 2, 1, 0, 0, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 3, 3, 2, 0, 3, 1, 1, 1, 1, 2, 2, 3, 1, 0, 2, 3, 2, 2, 3, 3, 2, 3, 0, 1, 3, 3, 3, 1, 1, 2, 0, 3, 2, 0, 1, 1, 3, 1, 1, 2, 3, 3, 1, 1, 2, 3, 0, 2, 2, 3, 2, 0, 0, 0, 3, 1, 0, 0, 3, 3, 1, 3, 1, 2, 2, 3, 0, 2, 2, 0, 0, 2, 0, 3, 2, 2, 3, 1, 2, 2, 2, 0, 0, 3, 0, 0, 0, 3, 0, 3, 0, 0, 0, 2, 2, 3, 1, 0, 2, 2, 3, 3, 1, 2, 3, 0, 2, 3, 0, 1, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 3, 1, 1, 1, 2, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 2, 0, 1, 2, 1, 0, 0, 1, 1, 0, 0, 2, 1, 2, 0, 1, 2, 0, 0, 2, 1, 2, 1, 0, 2, 0, 1, 1, 0, 1, 1, 0, 2, 1, 2, 0, 0, 0, 2, 1, 1, 1, 1], [0, 0, 2, 1, 1, 2, 0, 2, 1, 2, 0, 0, 1, 0, 1, 1, 0, 1, 2, 1, 0, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 2, 1], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\le ( divInt(mod(( mod(( int(0.0) + int(4.0) ),( i2 + res0 )) * max(int(2.0), divInt(( i2 - ( res0 - int(6.0) ) ),( min(divInt(int(6.0),abs(int(3.0))), int(0.0)) * min(int(7.0), res0) ))) ),max(in2, mod(mod(i0,int(6.0)),int(0.0)))),int(0.0)) + abs(i0) ):{:\\ni0 *= mod(in0,int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not True:{:\\nif max(min(mod(divInt(res0,divInt(min(max(max(( ( divInt(int(1.0),int(8.0)) - min(divInt(i2,int(6.0)), mod(int(8.0),in2)) ) * i0 ), int(6.0)), i0), divInt(in1,in0)),i1)),( int(2.0) + int(0.0) )), int(0.0)), i2) == min(abs(( i1 + max(int(0.0), int(9.0)) )), int(6.0)):{:\\nif int(7.0) != ( ( abs(int(3.0)) - i2 ) + ( min(divInt(mod(max(abs(( min(in1, int(5.0)) - min(abs(max(int(0.0), int(8.0))), divInt(i1,abs(( i1 - int(9.0) )))) )), int(6.0)),max(int(1.0), int(2.0))),( min(abs(int(5.0)), int(9.0)) + mod(min(in2, divInt(mod(max(( i1 - i1 ), i0),max(int(7.0), res0)),in1)),min(max(int(3.0), max(int(8.0), ( divInt(min(i2, ( divInt(i2,i1) * ( in0 - abs(( divInt(max(int(1.0), ( ( ( in1 + res0 ) * abs(in1) ) + i2 )),res0) * min(i0, min(i0, in1)) )) ) )),i2) - divInt(( min(int(2.0), in1) * divInt(mod(abs(max(int(3.0), ( max(i1, ( max(res0, int(1.0)) - int(3.0) )) * ( int(9.0) * in0 ) ))),int(7.0)),int(3.0)) ),( int(6.0) + int(4.0) )) ))), int(4.0))) )), int(0.0)) + i0 ) ):{:\\nif mod(int(4.0),in0) != in0:{:\\nres0 += in2\\n:}else:{:\\nin0 = in1\\n:}\\n:}\\n:}else:{:\\nb0 = max(int(5.0), int(3.0)) \\l int(8.0)\\n:}\\nres0 *= ( i0 - in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 53, 53, 5, 1, 0, 7, 5, 2, 1, 3, 58, 4, 211, 59, 45, 34, 28]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 2, 1, 2, 0, 0, 0, 0, 1], [1, 1], [0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 9, 3, 6, 7, 6, 1, 4, 2, 0, 4, 3, 8, 1, 9, 7, 2, 3, 7, 1, 4, 0, 7, 6, 5, 8, 1, 9, 6, 1, 0, 5, 9, 4, 6, 6, 5, 6], [5, 5, 1, 5, 3, 0], [0, 2, 2, 1, 2, 1], [1], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [2, 1, 3, 0], [0], [], [2, 1, 3, 2, 2, 1, 6, 2, 5, 2, 1, 2, 6, 1, 2, 1, 4, 4, 2, 5, 4, 0, 6, 2, 0, 5, 2, 1, 3, 5, 4, 0, 4, 5, 0, 1, 3, 2, 2, 1, 6, 1, 2, 1, 4], [1, 0, 0], [3, 3, 0, 0, 3, 0, 0, 0, 3, 3, 0, 1, 2, 1, 1, 3, 0, 1, 3, 0, 3, 0, 2, 3, 3, 1, 3, 2, 3, 0, 2, 3, 1, 3, 0, 1, 3, 1, 0, 2, 1, 1, 0, 3, 0, 3, 1, 0, 2, 3, 3, 3, 2, 2, 0, 3, 0, 3, 3, 1, 3, 0, 2, 0, 1, 3, 3, 2, 2, 0, 1, 2, 2, 1, 1, 2, 3, 2, 1, 0, 2, 2, 1, 0, 0, 0, 3, 0, 2, 1, 1, 0, 0, 2, 1, 2, 3, 2, 0, 1, 0, 1, 3, 3, 1, 1, 0, 3, 1, 2, 2, 2, 2, 3, 0, 1, 0, 0, 2, 0, 1, 3, 3, 1, 0, 2, 2, 0, 2, 3, 1, 2, 1, 0, 1, 0, 2, 2, 2, 2, 1, 0, 0, 1, 2, 0, 3, 3, 2, 0, 3, 3, 2, 3, 2, 3, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 0, 1, 0, 1, 1, 0, 1, 2, 2, 0, 2, 0, 1, 1, 1, 2, 0, 1, 2, 1, 2, 0, 1, 0, 2, 2, 2, 2, 0, 2, 0, 2], [2, 1, 0, 2, 0, 2, 2, 0, 0, 1, 0, 2, 2, 1, 0, 2, 1, 2, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(min(i2, i1), min(in0, i2)) != i2\\nb2 = max(max(i1, int(3.0)), ( int(8.0) * int(9.0) )) != max(res0, int(3.0))\\nloopBreak% = 0\\nwhile not min(i2, min(in2, ( abs(abs(int(6.0))) - min(( max(i2, ( min(int(7.0), max(i1, int(6.0))) + max(int(1.0), i2) )) * mod(int(4.0),int(2.0)) ), res0) ))) \\g min(i1, max(int(0.0), i2)):{:\\ni1 += ( abs(abs(min(mod(mod(in1,abs(in1)),min(max(int(4.0), max(i2, ( in2 * int(3.0) ))), max(abs(mod(mod(in1,int(8.0)),divInt(( int(1.0) * int(9.0) ),mod(min(mod(int(7.0),i0), ( divInt(int(2.0),res0) + i2 )),i0)))), max(in2, ( int(3.0) + int(7.0) ))))), i2))) - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(int(1.0),( abs(( in0 + int(4.0) )) * in2 )) != int(0.0):{:\\nin1 = max(abs(int(7.0)), int(6.0))\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = in1\\nb1 = min(int(5.0), mod(( ( ( max(in2, int(8.0)) * i0 ) - i1 ) + ( in0 * int(1.0) ) ),min(abs(int(9.0)), i2))) \\ge divInt(mod(i2,mod(abs(int(6.0)),( int(1.0) - i1 ))),int(0.0))\\nb2 = ( res0 \\l ( divInt(( ( int(5.0) * i1 ) - i2 ),int(9.0)) - divInt(i1,abs(abs(divInt(in1,min(abs(mod(min(mod(abs(int(4.0)),int(6.0)), int(6.0)),int(5.0))), int(6.0)))))) ) or b1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 2, 8, 39, 39, 6, 6, 1, 10, 6, 4, 1, 0, 45, 3, 161, 38, 42, 20, 19]}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [1], [1, 0], [1], [9], [], [1, 0, 2], [], [0, 0], [], [0, 0], [], [], [1, 5], [1], [2, 0, 1], [0], [], [2, 1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= ( in2 - int(9.0) )\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 3, 0, 2, 0, 2, 0, 0, 2, 1, 3, 1, 0, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [2, 2], [3], [2], [], [1], [0], [], [], [], [1, 3, 6], [], [2, 1, 2, 3, 0, 0, 1, 0], [1, 0], [0], [0], [0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = divInt(int(2.0),( min(i1, in0) + int(2.0) )) \\ge res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 8, 2, 1, 1, 1]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [2, 1, 0, 2, 2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 7, 5, 4, 0, 6, 8, 4, 7, 0, 2, 5, 5, 6, 5, 5, 4, 5, 8, 6, 3, 7, 4, 4, 8, 2, 3, 2, 1, 5, 8, 7, 4, 1, 4, 8, 7, 5, 2], [4, 5, 4], [], [], [0, 1, 1, 1], [0, 0, 0], [2], [], [], [0, 1, 1, 0, 3, 3, 2, 3, 3, 0, 5, 6, 0, 3, 0, 6, 4, 6, 0, 4, 4, 1, 6, 1, 2, 0, 2, 1, 3, 1, 0, 3, 5, 0, 6], [1, 0, 0], [1, 2, 3, 3, 3, 2, 2, 3, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 3, 3, 3, 2, 2, 2, 2, 1, 1, 3, 3, 3, 2, 1, 3, 1, 3, 0, 0, 2, 2, 3, 0, 0, 1, 1, 2, 1, 0, 1, 1, 0, 1, 1, 3, 3, 2, 0, 3, 2, 3, 0, 1, 0, 0, 3, 3, 3, 0, 3, 2, 2, 1, 0, 0, 0, 3, 2, 2, 0, 2, 0, 1, 1, 3, 1, 3, 2, 3, 2, 1, 3, 1, 3, 3, 3, 2, 0, 3, 3, 3, 2, 0, 0, 1, 2, 1, 3, 2, 3, 0, 1, 1, 3, 0, 0, 1, 2, 1, 1, 3, 0, 1, 3, 2, 3, 1, 2, 1, 1, 3, 3, 2, 1, 0, 1, 2, 0, 2, 0, 3, 2, 0, 3, 1, 2, 3, 1, 0, 2, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 1, 0, 2, 2, 1, 0, 2, 1, 2, 1, 2, 0, 2, 2, 1, 1, 1, 2, 1, 1, 2, 0, 1, 2, 1, 0, 1, 0, 1, 2, 2, 0, 2], [1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 0, 2, 2, 0, 1, 0, 2, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not int(5.0) \\le mod(min(min(min(( divInt(min(int(6.0), mod(i0,int(7.0))),( int(5.0) - divInt(i1,i1) )) * int(4.0) ), int(0.0)), abs(min(abs(( mod(divInt(( int(6.0) * int(8.0) ),abs(min(min(divInt(int(4.0),max(int(7.0), min(i0, in0))), mod(( abs(in0) - i2 ),int(0.0))), int(2.0)))),divInt(int(5.0),in0)) * int(5.0) )), int(6.0)))), in0),int(5.0)):{:\\ni0 *= int(5.0)\\nin2 = abs(max(divInt(res0,min(( abs(i0) - int(4.0) ), in0)), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile max(abs(max(res0, abs(( ( int(5.0) - in1 ) * res0 )))), i0) != min(( divInt(in1,( in1 - int(8.0) )) + int(6.0) ), abs(int(3.0))):{:\\nloopBreak% = 0\\nwhile abs(mod(max(( int(7.0) * max(int(4.0), max(abs(max(( i1 * max(abs(min(( res0 + i1 ), int(4.0))), ( int(8.0) - max(( abs(i2) + int(2.0) ), int(3.0)) )) ), max(i0, i2))), int(2.0))) ), divInt(int(1.0),int(5.0))),min(i1, int(8.0)))) \\le max(mod(min(int(7.0), divInt(int(4.0),int(1.0))),max(abs(( int(4.0) * in0 )), int(8.0))), ( i1 + mod(i0,abs(( in0 + min(int(7.0), ( abs(int(5.0)) + in2 )) ))) )):{:\\ni0 = mod(int(2.0),res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 40, 40, 3, 0, 0, 4, 3, 1, 0, 0, 35, 3, 151, 36, 43, 20, 17]}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [1, 1, 1], [0, 1], [1, 0, 1, 1, 1, 1, 1], [4, 4, 8, 0, 2, 7, 9], [1, 2], [2, 0], [], [1, 0, 0, 1], [0, 0], [1, 0], [0], [], [6, 6], [0], [1, 1, 2, 0, 1, 3, 2, 1, 1, 1], [0, 1], [2], [1], [0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(4.0) \\g int(48.0):{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = ( res0 - int(0.0) ) == abs(divInt(int(2.0),int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 7, 7, 2, 2, 0, 4, 2, 2, 1, 0, 2, 1, 10, 2, 1, 1, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [4], [0], [], [1], [0], [], [], [], [5, 1], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = in2 \\le i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 0, 0, 1], [8, 9, 6, 4], [], [], [], [], [], [], [], [], [4, 0, 4], [0, 0], [3, 1, 0, 1], [], [1], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = max(int(8.0), i0)\\nin1 = int(964.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 2, 0, 0], [1, 1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 3, 3, 4, 0, 1, 4, 5, 3, 7, 4, 9, 0, 0, 8], [3, 3, 4, 2, 5, 3], [2, 1, 0], [0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 2, 2, 3, 3, 0, 3, 3, 2, 2, 0], [], [], [6, 5, 0, 1, 0, 2, 5, 1, 4, 6, 5, 4, 5, 2, 3], [0, 1], [3, 1, 2, 0, 2, 1, 0, 1, 0, 3, 0, 3, 2, 1, 1, 0, 2, 3, 1, 1, 0, 3, 3, 0, 3, 1, 0, 1, 3, 3, 0, 3, 0, 1, 0, 2, 2, 1, 0, 3, 1, 1, 1, 3, 0, 1, 3, 1], [1, 1, 1, 0, 0, 1], [0, 0, 2, 0, 2, 1, 1, 0, 0, 2, 1, 1, 2], [2, 2, 1], [0, 0, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(int(1.0), divInt(res0,divInt(int(7.0),in2))) \\ge int(3.0)\\nloopBreak% = 0\\nwhile ( not not ( i0 \\ge min(i1, abs(divInt(int(3.0),int(4.0)))) and i0 \\le ( min(int(0.0), int(1.0)) * i2 ) ) and ( b1 and ( ( abs(max(in2, max(int(4.0), i1))) == int(5.0) or min(min(in1, abs(res0)), int(3.0)) != in2 ) or ( mod(int(7.0),in1) * max(int(4.0), int(9.0)) ) \\ge int(0.0) ) ) ):{:\\nloopBreak% = 0\\nwhile not not b0:{:\\nin2 = max(i2, int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 -= abs(int(8.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 16, 16, 6, 3, 5, 17, 6, 11, 0, 0, 15, 2, 48, 6, 13, 3, 4]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [9, 4], [], [], [], [], [], [], [], [], [1], [1], [3, 1, 1], [], [1], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += max(int(9.0), int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [4, 6], [5], [2], [], [1], [0], [], [], [], [5, 6, 1, 4, 2, 5], [], [3, 2, 1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1], [0, 0, 1, 1, 1], [1], [1, 1], [1, 0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(( int(4.0) - ( mod(in2,divInt(res0,i1)) - in1 ) ), i2) != mod(in2,int(6.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 6, 0, 14, 5, 1, 2, 3]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 1, 1, 1], [1, 0], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 4, 8, 8, 4, 4, 1, 7, 7], [2, 1, 0, 1, 1, 2, 1], [1, 2, 2, 0, 1], [1, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 3, 3, 0], [], [1], [0, 5, 4, 3, 0, 2, 3, 4, 1, 3, 2, 4, 6, 4], [], [0, 3, 3, 0, 3, 1, 3, 1, 0, 0, 3, 3, 3, 1, 0, 0, 1, 0, 0, 1, 1, 2, 0, 1, 1, 1, 2, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 0, 1], [1, 1, 1, 1, 0, 1], [0, 0, 0, 2, 1, 0, 1], [0], [1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 == min(min(in2, min(int(2.0), abs(int(2.0)))), in1):{:\\nif ( in0 \\g max(min(max(int(2.0), i0), i2), int(1.0)) or in0 \\l in1 ):{:\\nb1 = ( b2 and int(4.0) \\g int(8.0) )\\n:}else:{:\\nb2 = ( ( mod(i1,int(8.0)) \\g int(4.0) and int(4.0) == divInt(divInt(int(1.0),int(7.0)),in0) ) and b0 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = divInt(i2,in1) \\g ( res0 + divInt(in1,int(7.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 12, 12, 7, 5, 4, 13, 7, 6, 0, 1, 14, 0, 39, 6, 7, 1, 5]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 0, 1], [1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 8, 0, 0, 0, 8, 6, 1, 1, 8, 1, 9, 8, 7, 8], [2, 3, 0], [1, 0], [], [1, 1, 0, 1], [0, 0, 0], [2], [], [], [2, 5, 3, 5, 2, 2, 0, 3, 2, 3, 6, 5, 0, 6, 6, 6, 1, 0, 0, 5, 4, 1, 1, 1, 1, 4, 6, 4, 0], [1], [0, 2, 0, 2, 3, 1, 1, 3, 3, 0, 3, 3, 1, 2, 1, 1, 3, 1, 3, 2, 3, 0, 1, 2, 3, 2, 0, 3, 2, 1, 3, 2, 0, 1, 0, 2, 2, 0, 0, 1, 2, 2, 0, 2, 1, 1, 0, 0, 3, 1, 0, 3, 0, 0, 3, 1, 2, 0, 3, 2, 0, 2, 0, 0, 3, 2, 0, 3, 3, 0, 3, 3, 0, 2, 0, 3, 1, 2, 3, 0, 3, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 0, 1, 1, 0, 1, 2, 0, 1, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1, 1, 2, 0], [0, 0, 0, 0, 1, 1, 0, 2, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i2 == ( in2 + mod(max(int(6.0), int(2.0)),abs(min(in0, max(max(int(8.0), ( int(0.0) + int(0.0) )), min(int(0.0), max(divInt(abs(in2),int(8.0)), ( min(( i2 + max(mod(int(6.0),max(mod(i2,int(1.0)), i0)), mod(mod(in0,i2),int(1.0))) ), ( ( in0 + ( int(8.0) - int(1.0) ) ) - res0 )) + in2 ))))))) )\\nloopBreak% = 0\\nwhile min(int(9.0), i0) \\ge max(res0, res0):{:\\nres0 *= abs(int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not mod(i1,max(mod(i0,( i0 - in2 )), max(divInt(in1,max(abs(i1), min(max(i1, mod(i1,max(int(7.0), mod(abs(i1),min(in1, int(8.0)))))), res0))), in1))) \\l i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 16, 16, 3, 2, 0, 4, 3, 1, 0, 0, 29, 1, 86, 19, 23, 9, 11]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1], [2, 1, 0, 2, 0, 1, 1, 0], [0, 0], [0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 8, 0, 6, 1, 1, 1, 2, 7, 1, 9, 2, 3, 3, 1, 8, 4, 2, 9, 5, 9, 9, 8], [1, 1, 2, 5], [0, 0], [1], [0, 0, 1, 1, 1, 1], [0, 0, 0, 0], [3, 1], [0], [1, 0], [1, 4, 3, 1, 2, 3, 2, 3, 2, 3, 3, 3, 6, 2, 0, 0, 3, 3, 3, 0, 2, 0, 3, 1, 1], [0, 1, 0, 0], [2, 0, 3, 0, 0, 2, 0, 3, 1, 0, 2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 3, 0, 1, 0, 3, 1, 1, 1, 1, 2, 3, 2, 3, 0, 3, 3, 0, 1, 0, 0, 3, 1, 1, 3, 3, 3, 3, 2, 1, 3, 2, 2, 2, 0, 2, 1, 3, 1, 3, 2, 2, 3, 0, 1, 3, 3, 1, 0, 0, 1, 2, 3, 0, 1, 1, 2, 1, 0, 3, 3, 0, 3, 3, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [2, 0, 2, 0, 1, 0, 1, 2, 2, 2, 1, 2, 0, 2, 1, 2, 2, 1, 1, 2, 1, 2, 0, 2, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( True or ( i1 + abs(in1) ) \\g in0 ):{:\\nb0 = ( i1 - min(int(7.0), i2) ) \\g divInt(in0,int(8.0))\\nb0 = mod(abs(( i2 + int(0.0) )),mod(( min(in0, int(6.0)) - i2 ),max(int(1.0), int(1.0)))) == int(1.0)\\nif int(2.0) != mod(min(mod(max(in0, abs(abs(in0))),int(7.0)), in0),res0):{:\\ni2 = abs(int(1.0))\\n:}\\n:}else:{:\\ni0 -= int(9.0)\\ni0 = max(abs(min(abs(mod(int(2.0),max(divInt(mod(( in0 + mod(int(3.0),abs(int(3.0))) ),abs(( ( max(in0, int(1.0)) - max(abs(int(8.0)), in0) ) + i0 ))),int(4.0)), mod(max(i2, int(2.0)),int(9.0))))), mod(int(5.0),i0))), abs(min(in0, abs(min(int(9.0), i1)))))\\n:}\\ni1 = int(98.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 23, 23, 4, 2, 1, 6, 4, 2, 1, 2, 25, 4, 86, 18, 25, 8, 11]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 7, 8, 3, 5, 6, 9, 9], [1, 0], [1], [], [1, 1], [0, 0], [], [], [0], [0, 5, 6, 2, 5, 4], [0], [3, 1, 0, 3, 0, 1, 3, 3, 1, 3, 3, 1, 3, 1, 0, 2, 0, 2, 1, 0, 1, 1, 1], [0, 1], [1, 0, 0, 1, 1, 0, 1], [2], [1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(int(4.0), i0) \\g min(in2, int(5.0)):{:\\nb1 = min(max(int(7.0), max(min(int(8.0), max(int(3.0), res0)), ( i2 * mod(int(5.0),in2) ))), int(6.0)) \\l int(9.0)\\nin1 = int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 9, 9, 2, 1, 0, 2, 2, 0, 0, 1, 6, 1, 23, 2, 7, 1, 1]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1, 1], [8, 3, 6, 4], [3], [0], [], [1], [0], [], [], [], [5, 0, 4, 6, 0], [1], [3, 3, 2, 3, 1, 1, 0, 2, 3, 1, 2, 3, 3, 0, 0, 0, 1], [0, 0, 1], [2, 0, 2, 0, 2, 2], [0, 1, 0], [0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += abs(min(( abs(int(8.0)) - int(3.0) ), i0))\\nb0 = ( min(int(6.0), divInt(abs(abs(in1)),res0)) + i0 ) \\ge int(4.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 5, 1, 17, 3, 6, 3, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [0, 1], [3, 7], [], [2, 1], [], [0], [], [0], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(37.0)\\nb2 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1], [1, 1, 2, 0, 1], [0], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 4, 8, 6, 4, 9, 1, 3, 0, 7, 0], [], [], [], [0, 0], [], [2, 1], [0], [0], [6, 2, 6, 2, 4, 0, 0, 6, 3, 6, 5, 1, 5, 6], [0, 0, 0, 0], [1, 0, 0, 2, 1, 2, 2, 1, 3, 2, 0, 2, 1, 0, 3, 2, 1, 3, 1, 2, 3, 1, 0, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 3, 1, 3, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [1, 1, 1, 2, 1, 1, 1, 0, 2], [2, 1, 2, 0], [1, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(8.0)\\ni2 = res0\\nif not True:{:\\ni2 = in1\\ni0 = mod(int(7.0),divInt(mod(int(4.0),max(( i0 * ( int(8.0) - res0 ) ), max(( int(6.0) * max(int(4.0), divInt(abs(int(9.0)),in0)) ), max(max(res0, mod(divInt(int(1.0),in2),( max(mod(i1,int(3.0)), int(0.0)) + in2 ))), min(int(7.0), abs(res0)))))),int(0.0)))\\n:}\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 5, 5, 1, 4, 12, 12, 0, 0, 0, 2, 0, 2, 1, 1, 14, 4, 42, 11, 9, 4, 7]}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [1], [1, 0], [1, 1, 1], [3, 7, 4], [3], [1], [], [1, 0], [0], [1], [1], [], [0, 6, 5, 6], [0], [0, 2, 0, 0, 2, 1, 3, 1, 1], [1, 1], [0], [], [0, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\ge divInt(res0,in2):{:\\nres0 = mod(int(3.0),min(int(7.0), int(4.0)))\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 990, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 1, 1, 0, 2, 1, 1, 1, 0, 4, 1, 9, 2, 1, 0, 2]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 5, 9, 9, 7, 2, 8, 2, 8, 0, 2, 3, 6], [5, 0], [0, 1], [], [1, 1], [0, 0], [], [], [], [3, 1, 4, 0, 4, 2, 6, 0], [], [2, 2, 0, 2, 0, 3, 2, 1, 1, 1, 2, 2, 3, 1, 2, 1, 0, 3, 0, 2, 0, 2, 0, 3, 1, 3, 1, 1, 3, 2, 3, 0, 1, 2, 3, 1, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [2, 0, 0, 2, 1, 1, 1, 2], [0, 1, 2, 2, 2, 0, 1], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( divInt(in0,( i1 + abs(divInt(int(1.0),int(5.0))) )) - int(9.0) ) != ( ( min(int(9.0), mod(int(7.0),in1)) * min(i0, ( in1 * ( i2 * abs(int(2.0)) ) )) ) + max(int(8.0), int(2.0)) )\\nb1 = max(divInt(max(res0, int(8.0)),( abs(int(0.0)) - i0 )), int(2.0)) \\l int(36.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 2, 2, 0, 2, 2, 0, 0, 0, 8, 0, 39, 11, 8, 7, 4]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 0, 0, 2, 8, 6, 8, 3, 4, 4, 5], [], [], [], [], [], [], [], [], [1, 2, 5, 2, 0, 0, 5, 4, 2, 0, 0, 0, 2, 4, 2, 1, 3, 1, 2], [0], [3, 2, 2, 0, 3, 3, 3, 2, 3, 3, 0, 3, 1, 3, 2, 0, 3, 2, 3, 3, 1, 1, 3, 1, 2, 2, 2, 0, 1, 0, 2, 1, 1, 2, 3, 0, 0, 2, 0, 0, 0, 0, 2, 3, 2, 3, 2, 1, 1, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 1, 2, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 1, 2, 0, 2, 1, 0, 0, 2, 2, 0, 0, 2, 1, 2, 1, 0], [0, 2, 1, 2, 0, 2, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = min(( mod(i2,max(abs(min(( abs(max(in2, min(int(9.0), min(( i2 + abs(mod(abs(min(int(0.0), int(0.0))),min(int(0.0), ( mod(( i0 * int(2.0) ),i0) - ( int(8.0) * int(6.0) ) )))) ), ( abs(in2) + in1 ))))) * divInt(i2,i0) ), i0)), i0)) * ( max(mod(abs(( int(8.0) + int(3.0) )),i2), in1) + ( divInt(i2,i1) - max(in0, divInt(i1,int(4.0))) ) ) ), divInt(min(int(4.0), i2),int(5.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 65, 18, 17, 10, 8]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [9, 7], [2], [0], [], [0, 0, 1], [0], [2, 2], [], [], [6], [], [0, 2, 3, 1, 1], [0], [2], [0], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not not res0 == ( abs(int(9.0)) + int(7.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 3, 1, 2, 0, 0, 1, 0, 5, 1, 1, 1, 0]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 1], [0], [1, 1, 1, 1, 1], [1, 2, 6, 6, 8], [3, 0, 3], [0], [], [1, 1, 1], [0, 0, 0], [], [], [], [2, 6, 6, 0, 3], [], [3, 1, 2, 0, 1, 1, 2, 2, 1, 0, 0, 0, 1, 3, 0], [1, 0, 0], [0, 2], [0, 2], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(1.0), divInt(i2,int(2.0))) \\ge int(6.0):{:\\nloopBreak% = 0\\nwhile ( ( int(6.0) + res0 ) * res0 ) \\l i0:{:\\nb0 = int(8.0) \\ge abs(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 5, 5, 3, 1, 0, 3, 3, 0, 0, 0, 5, 0, 15, 3, 2, 2, 1]}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 1], [1], [1, 0, 0], [1, 1, 1], [8, 3, 4], [2], [2, 0, 1], [], [1, 0, 0], [0], [0, 1], [1], [], [5], [1], [1, 1, 1], [], [], [2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(8.0) == int(3.0):{:\\nin2 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b0\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 3, 3, 1, 3, 0, 3, 1, 2, 1, 0, 1, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1], [2, 1, 2, 1, 0, 2, 1, 0], [0, 1, 0], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 6, 7, 7, 7, 3, 1, 1, 5, 2, 5, 5, 9, 6, 2, 2, 4, 8, 3, 6, 7, 4, 0, 9, 6, 4, 6, 0, 0, 8], [0, 0], [2, 2, 1], [], [1, 1, 0, 0, 0, 0], [0, 0], [0, 2, 2, 0], [], [0, 1], [5, 4, 0, 0, 4, 2, 1, 0, 6, 6, 1, 4, 5, 2, 2, 5, 6, 4, 6, 0, 5, 6, 2, 1, 6, 5, 0, 1, 6, 0], [1, 1, 0, 1], [2, 1, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 1, 0, 2, 3, 3, 2, 0, 1, 2, 2, 3, 3, 1, 1, 1, 2, 1, 1, 3, 1, 2, 3, 1, 0, 3, 0, 3, 0, 2, 0, 1, 0, 3, 0, 3, 1, 0, 2, 0, 3, 3, 2, 1, 3, 3, 0, 2, 0, 2, 1, 3, 3, 3, 3, 1, 3, 0, 1, 2, 2, 1, 1, 1, 3, 1, 3, 0, 0, 2, 3, 3, 0, 2, 3, 1, 2, 3, 2, 2, 0, 1, 3, 3, 0, 1, 0, 1, 0, 0, 0, 1, 3, 3, 3, 1, 2, 2, 0, 0, 1, 1, 2, 2, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 2, 1, 2, 2, 0, 1, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 1, 2, 0, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 0, 2], [0, 1, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(0.0) + min(( abs(int(0.0)) - max(mod(int(6.0),( abs(divInt(int(7.0),in2)) - ( abs(min(divInt(in1,int(7.0)), mod(mod(max(min(int(7.0), int(3.0)), int(1.0)),( int(1.0) * int(5.0) )),abs(int(2.0))))) - mod(abs(int(5.0)),i0) ) )), abs(i0)) ), min(in1, divInt(i2,int(5.0)))) ) \\l i1:{:\\nb2 = min(i0, min(int(9.0), res0)) \\l divInt(res0,min(max(divInt(int(6.0),min(max(i1, ( in1 - ( int(2.0) * abs(min(abs(max(int(2.0), max(in2, int(4.0)))), divInt(( int(8.0) * int(3.0) ),int(6.0)))) ) )), abs(int(7.0)))), max(i2, i2)), ( abs(max(in2, ( max(int(4.0), ( abs(( ( res0 + int(0.0) ) * max(max(in1, int(9.0)), res0) )) - int(6.0) )) - i0 ))) * in2 )))\\nloopBreak% = 0\\nwhile b2:{:\\nres0 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 += int(4.0)\\nif not not b1:{:\\nres0 = max(min(abs(int(6.0)), mod(mod(in2,i0),int(0.0))), int(0.0))\\n:}else:{:\\ni1 *= divInt(( int(8.0) + res0 ),i0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 31, 31, 2, 3, 0, 6, 2, 4, 0, 2, 30, 4, 118, 27, 34, 17, 13]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 1, 1], [1], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 9, 1, 3, 4, 7, 3, 9, 7, 7, 2, 8, 8, 1, 0, 7, 6, 4], [0, 5, 3, 5], [1, 2, 2], [], [1, 1, 1, 1], [0, 0, 0, 0], [], [], [], [3, 2, 2, 5, 0, 5, 1, 6, 6], [], [3, 3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 1, 2, 1, 2, 0, 0, 1, 1, 1, 2, 3, 1, 3, 0, 2, 1, 1, 3, 1, 0, 1, 1, 2, 3, 2, 2, 1, 0, 0, 2, 0, 3, 1, 1, 3, 3, 2, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 2, 1, 1, 0, 0, 2, 1, 0, 2], [1, 0, 2], [0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(max(max(min(int(5.0), int(1.0)), int(9.0)), abs(max(in0, divInt(int(1.0),mod(int(3.0),divInt(i2,i2)))))), int(4.0)) \\l int(7.0):{:\\nb1 = int(3.0) != ( max(int(9.0), min(in2, ( int(7.0) - int(7.0) ))) + min(int(2.0), i0) )\\nb2 = int(8.0) \\ge int(8.0)\\nb2 = divInt(abs(( mod(int(1.0),in2) * i1 )),mod(res0,max(int(0.0), int(7.0)))) != min(abs(divInt(int(6.0),res0)), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 19, 19, 4, 3, 0, 4, 4, 0, 0, 0, 9, 0, 51, 10, 13, 3, 7]}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 1, 1, 2, 1, 0, 1], [0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 8, 8, 6, 8, 2, 0, 4, 2, 0, 6, 2, 7, 7, 8, 3, 7, 0], [1, 4, 5], [2, 1], [], [0, 1, 0, 1, 1], [0, 0, 0], [2, 1], [0], [1], [6, 5, 3, 1, 2, 5, 6, 6, 0, 5, 6, 1, 2, 3, 3], [1, 1, 1, 0], [0, 2, 1, 1, 2, 1, 1, 2, 3, 2, 2, 2, 1, 2, 0, 0, 2, 0, 1, 3, 2, 2, 2, 1, 0, 2, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1, 0, 3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 2, 2, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 2, 1, 0, 2, 1, 1], [2, 0, 0, 1, 0, 2, 1, 1, 1, 0, 1, 2], [1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not res0 \\g mod(int(6.0),int(1.0)):{:\\nb2 = True\\nin2 *= ( int(8.0) + int(8.0) )\\nin0 += ( max(( mod(( int(6.0) - divInt(i1,i2) ),mod(in2,int(8.0))) + abs(( ( ( int(2.0) * res0 ) - ( res0 - max(int(0.0), int(4.0)) ) ) - int(2.0) )) ), int(0.0)) + i0 )\\n:}else:{:\\nloopBreak% = 0\\nwhile min(int(6.0), int(2.0)) \\le in2:{:\\nres0 -= abs(max(int(7.0), i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = max(i2, int(7.0)) != int(8.0)\\n:}\\nin0 = divInt(int(3.0),( divInt(in0,int(7.0)) * int(0.0) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 19, 19, 3, 2, 0, 5, 3, 2, 1, 1, 15, 4, 52, 15, 7, 12, 6]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1], [2, 9, 0, 1, 8], [], [], [], [], [], [], [], [], [0, 4, 6, 4, 6], [0], [3, 2, 0, 2, 2, 2, 2, 1, 1, 0, 2, 1, 0, 2, 3, 3, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 2, 2], [1, 1, 1, 1, 1], [1, 1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = max(mod(in1,( ( ( ( int(2.0) - int(9.0) ) - res0 ) - ( int(0.0) - in1 ) ) - mod(abs(abs(res0)),int(1.0)) )), int(8.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 19, 7, 3, 5, 2]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 5, 4], [0], [2, 0, 0], [1], [], [], [0]], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = divInt(in2,in1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1]}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 0], [0, 0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 0, 3, 8, 0, 0, 8, 0, 4, 5, 3, 9, 8, 8, 5, 4, 7, 0, 3, 5, 6, 6, 6, 0, 5, 5, 4, 6, 7, 6, 3, 8, 4, 5, 6, 6, 2, 9, 3, 4, 6, 8, 0, 8, 3, 8, 1, 7, 3, 0, 4, 3, 4, 1, 7, 4, 6, 5, 0, 2, 8, 1, 2, 8, 0, 4, 3, 4, 9, 9, 8, 1, 8, 1, 7, 5, 7, 0, 9, 8, 5, 7, 8, 4], [1, 3, 3, 0], [1, 2], [], [1, 1, 1, 0, 1], [0, 0, 0, 0], [2], [], [0, 0], [0, 2, 4, 6, 3, 0, 6, 3, 0, 5, 6, 5, 4, 6, 3, 2, 6, 5, 5, 2, 1, 0, 4, 5, 5, 0, 1, 5, 0, 0, 3, 3, 6, 4, 5, 5, 4, 5, 2, 5, 0, 4, 4, 6, 6, 1, 6, 0, 3, 1, 1, 4, 2, 4, 5, 1, 0, 2, 3, 3, 3, 3, 1, 3, 4, 4, 2, 5, 2, 5, 1, 3, 1, 6, 2, 4, 3, 4, 4, 2, 0], [], [0, 2, 2, 3, 3, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 3, 2, 1, 3, 1, 3, 2, 3, 1, 1, 3, 3, 2, 1, 0, 1, 3, 0, 1, 2, 2, 3, 3, 1, 2, 3, 0, 3, 3, 2, 1, 1, 0, 3, 3, 3, 0, 1, 3, 3, 1, 2, 3, 1, 3, 1, 1, 0, 1, 2, 3, 2, 2, 0, 2, 2, 1, 3, 3, 3, 3, 1, 1, 3, 0, 3, 1, 2, 1, 2, 0, 1, 2, 1, 3, 3, 1, 2, 2, 0, 1, 3, 0, 1, 1, 3, 0, 2, 3, 3, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 2, 0, 1, 3, 1, 1, 2, 2, 3, 2, 2, 1, 3, 0, 0, 1, 3, 2, 1, 1, 3, 2, 0, 0, 0, 0, 1, 2, 0, 2, 3, 0, 3, 1, 0, 2, 0, 2, 3, 2, 2, 1, 1, 2, 1, 2, 2, 1, 0, 3, 0, 1, 2, 0, 1, 0, 3, 3, 2, 1, 1, 0, 3, 0, 1, 3, 1, 0, 1, 3, 2, 1, 2, 3, 1, 1, 0, 3, 2, 0, 0, 1, 3, 0, 3, 0, 1, 2, 0, 0, 0, 3, 2, 0, 2, 0, 1, 0, 2, 3, 0, 3, 0, 2, 0, 3, 3, 3, 0, 3, 2, 2, 3, 2, 0, 2, 2, 1, 3, 2, 2, 2, 1, 3, 2, 2, 3, 2, 1, 3, 1, 3, 3, 2, 1, 0, 3, 2, 0, 3, 3, 0, 0, 2, 3, 2, 3, 1, 3, 1, 2, 0, 2, 0, 3, 1, 3, 3, 0, 1, 0, 0, 3, 1, 1, 1, 1, 0, 0, 3, 1, 0, 2, 2, 1, 3, 0, 2, 0, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 0, 3, 3, 0, 3, 0, 0, 2, 3, 1, 2, 1, 2, 1, 3, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 0, 1, 3, 3, 0, 3, 2, 0, 2, 0, 1, 3, 2, 3, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1, 2, 0, 1, 2, 0, 2, 2, 0, 0, 1, 2, 0, 2, 2, 1, 1, 0, 0, 1, 1, 0, 1, 2, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 1, 2, 0, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 2, 0, 1, 2, 1, 0, 2, 1, 1, 2, 2, 0, 1, 2, 1, 2, 1, 0, 0, 0, 2, 1, 0, 1, 2, 1, 1, 2, 2], [1, 0, 2, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1, 0, 2, 1, 2, 2, 0, 0, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i0 \\g divInt(mod(abs(max(i2, in1)),res0),( ( in0 - ( i0 + ( res0 * ( ( abs(( int(3.0) - min(int(3.0), max(( abs(int(0.0)) + int(3.0) ), min(abs(divInt(int(8.0),in0)), int(0.0)))) )) - abs(i0) ) - int(0.0) ) ) ) ) - mod(mod(min(min(int(8.0), divInt(max(in2, abs(min(mod(int(0.0),int(4.0)), res0))),abs(abs(max(in2, int(5.0)))))), max(min(int(3.0), ( min(int(9.0), max(int(8.0), int(8.0))) - in1 )), int(5.0))),( max(( divInt(res0,divInt(divInt(int(4.0),min(max(abs(min(int(7.0), int(0.0))), abs(in0)), min(int(3.0), ( int(5.0) * ( i2 - int(6.0) ) )))),divInt(int(6.0),min(max(int(6.0), ( mod(res0,int(0.0)) * max(in2, int(5.0)) )), int(5.0))))) * min(in2, mod(abs(max(divInt(( ( i2 - min(max(min(max(abs(min(divInt(i1,int(4.0)), max(int(6.0), int(7.0)))), divInt(divInt(min(divInt(divInt(int(6.0),max(i0, in1)),int(3.0)), min(( int(8.0) - int(4.0) ), max(( in2 - in2 ), i0))),i1),int(5.0))), ( in2 + divInt(abs(i0),min(int(6.0), i0)) )), mod(in0,( abs(divInt(( int(6.0) - int(2.0) ),( int(9.0) - ( mod(int(3.0),in0) + max(res0, int(4.0)) ) ))) * ( in1 - int(6.0) ) ))), in2) ) - abs(abs(( int(8.0) - int(0.0) ))) ),in2), max(in1, int(8.0)))),min(int(3.0), in2))) ), int(8.0)) + abs(divInt(int(1.0),mod(min(int(7.0), int(3.0)),i2))) )),max(divInt(in2,i0), int(0.0))) )):{:\\nb1 = max(in1, max(in1, int(4.0))) \\ge mod(res0,res0)\\n:}\\nif i1 \\ge max(( res0 * mod(i0,int(3.0)) ), in0):{:\\nb2 = not mod(abs(i1),max(i1, ( in1 - min(max(min(i2, max(mod(mod(abs(( in1 * mod(mod(int(4.0),abs(( divInt(( int(1.0) * abs(mod(( max(divInt(int(7.0),max(int(4.0), max(abs(divInt(int(6.0),in2)), min(mod(i1,max(abs(i0), i2)), ( max(( min(int(5.0), abs(int(0.0))) + ( in0 + mod(in0,max(int(2.0), max(abs(in0), int(8.0)))) ) ), in0) * i1 ))))), abs(int(1.0))) - int(2.0) ),int(8.0))) ),int(0.0)) - in0 ))),in1) )),min(int(4.0), in1)),mod(( int(3.0) + max(i2, ( in2 - divInt(abs(divInt(int(4.0),max(abs(( divInt(( max(int(9.0), i2) + min(min(in2, min(i1, in0)), ( abs(int(9.0)) + ( int(8.0) - mod(int(1.0),max(int(8.0), int(1.0))) ) )) ),i1) - int(7.0) )), int(5.0)))),( res0 + int(7.0) )) )) ),int(0.0))), int(9.0))), ( int(8.0) - i2 )), int(5.0)) ))) \\l min(in1, ( max(in0, int(7.0)) + abs(max(in1, max(mod(in1,divInt(i2,int(8.0))), abs(divInt(abs(int(4.0)),i0))))) ))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 85, 85, 4, 2, 0, 5, 4, 1, 0, 2, 81, 0, 356, 90, 100, 43, 47]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 2, 1, 2, 0, 1, 2, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 4, 8, 3, 6, 2, 6, 4, 8, 4, 6, 4, 2, 1, 1, 1, 2, 2, 1, 9, 1, 5, 9, 2, 4, 7, 6, 3, 4, 1, 6, 3, 8, 1, 4, 9, 2, 7], [4, 0, 1, 3, 1, 3], [1, 0, 1], [1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 1, 3, 2, 3, 2, 1, 0, 2], [0, 0, 0], [1, 1, 0, 0], [5, 0, 2, 0, 0, 6, 2, 5, 5, 5, 0, 0, 5, 2, 3, 4, 3, 0, 0, 6, 6, 1, 3, 4, 2, 5, 0, 5, 1, 0, 4, 1, 3, 2, 3, 0, 6, 3, 6, 4, 5, 4, 1, 2, 1, 1, 3, 3], [1, 0, 1, 1], [1, 3, 3, 0, 0, 0, 3, 1, 3, 3, 0, 0, 2, 2, 2, 0, 1, 1, 2, 3, 2, 0, 1, 0, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 2, 0, 0, 2, 3, 1, 0, 3, 3, 2, 2, 0, 3, 2, 0, 2, 1, 0, 1, 0, 2, 1, 2, 2, 0, 1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 1, 0, 1, 0, 0, 2, 2, 0, 0, 2, 1, 1, 0, 3, 1, 2, 3, 2, 0, 1, 0, 0, 0, 3, 3, 0, 0, 2, 3, 0, 3, 3, 2, 2, 2, 1, 2, 3, 3, 1, 3, 3, 1, 1, 0, 3, 3, 3, 1, 3, 1, 3, 0, 3, 1, 3, 1, 1, 0, 2, 3, 0, 1, 3, 1, 3, 3, 3, 2, 3, 1, 0, 0, 3, 1, 0, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 1, 2, 2, 1, 0, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 2, 2, 0, 0, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0, 1, 1, 2, 0, 1, 0, 1, 0, 1, 0], [1, 2, 0, 2, 1, 1, 0, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 2, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(9.0) \\le abs(max(in2, i0)):{:\\ni2 -= i0\\n:}else:{:\\nif True:{:\\nif True:{:\\nif ( abs(int(2.0)) \\l abs(max(i0, res0)) or not ( divInt(( ( i2 * int(4.0) ) + int(8.0) ),mod(min(mod(in2,int(3.0)), in2),mod(( max(abs(divInt(in2,min(mod(i0,max(( i0 * in2 ), ( abs(int(6.0)) - i2 ))), min(min(( ( in0 - max(mod(in1,mod(int(2.0),in0)), int(6.0)) ) + i0 ), divInt(int(4.0),mod(divInt(i0,int(8.0)),mod(abs(int(4.0)),( int(6.0) * ( min(mod(int(4.0),int(2.0)), res0) + int(1.0) ) ))))), res0)))), i1) + mod(( in0 - in1 ),( int(1.0) - int(1.0) )) ),i2))) \\g abs(int(2.0)) or not mod(abs(( in2 * int(2.0) )),i0) \\ge in2 ) ):{:\\ni1 = i0\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = min(min(in1, i1), divInt(abs(in0),abs(min(( divInt(( int(1.0) + mod(max(max(int(9.0), abs(max(int(1.0), int(5.0)))), i2),abs(max(min(int(9.0), min(int(2.0), max(in0, max(int(4.0), abs(int(7.0)))))), int(6.0)))) ),i0) + divInt(min(res0, int(3.0)),max(int(4.0), min(max(min(( max(int(1.0), in0) * res0 ), min(int(6.0), in1)), in2), int(3.0)))) ), mod(int(8.0),in1))))) \\g i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = b1\\nloopBreak% = 0\\nwhile not ( divInt(divInt(int(1.0),mod(int(4.0),int(9.0))),i2) - int(2.0) ) \\ge i1:{:\\ni1 *= in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin0 -= int(7.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 39, 39, 6, 3, 2, 15, 6, 9, 3, 4, 48, 4, 163, 39, 41, 19, 23]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 2, 2, 1, 0, 1, 2, 2, 2, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 8, 3, 6, 6, 5, 5, 7, 4, 3, 3, 6, 9, 1, 9, 6, 5, 4, 8, 8, 7, 1, 1, 1, 2, 1, 9, 0, 7, 1, 4, 9, 4, 2, 7, 3, 2, 5, 3, 5, 4, 4, 5, 3, 3, 7, 0, 5, 6, 9, 3, 4, 6, 0, 7, 7, 6, 9, 3, 0, 7, 3, 2, 8, 6, 6, 6, 7, 6, 9, 0, 7, 4, 6, 7, 5, 0, 2, 3, 7, 3, 7, 5, 7, 4, 4, 9, 4, 3, 6, 0, 1, 3, 5, 4, 5, 7, 1, 6, 5, 2, 4, 5, 8, 2, 4, 0, 7, 1, 7, 5, 5, 4, 1, 1, 5, 7, 7, 7, 6, 2, 4, 9, 2, 0, 1, 4, 8, 4, 4, 9, 8, 0, 6, 0, 9, 3, 4, 4, 7, 3, 8, 2, 6, 9, 2, 1, 8, 2, 5, 6, 3, 8, 3, 8, 3, 3, 7, 1, 0, 4, 6, 8, 9, 3, 5, 6, 5, 9, 5, 4, 5, 9, 8, 7, 4, 4, 1, 1, 5, 5, 5, 3, 4], [5, 1, 0, 2, 0, 0, 4, 1, 5, 3, 0, 4, 2], [0, 1, 1, 2, 2, 2], [0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 3, 3, 0], [], [1, 0, 1, 1, 0, 1], [4, 0, 4, 6, 2, 4, 1, 5, 2, 3, 0, 0, 5, 1, 0, 4, 6, 4, 4, 5, 6, 2, 4, 4, 6, 2, 2, 1, 5, 0, 5, 2, 2, 3, 4, 0, 1, 1, 1, 6, 5, 5, 4, 3, 0, 0, 2, 4, 4, 4, 4, 6, 0, 0, 2, 2, 2, 6, 1, 6, 2, 5, 1, 6, 4, 5, 2, 1, 2, 1, 0, 0, 0, 3, 2, 2, 5, 5, 5, 6, 2, 2, 4, 3, 5, 2, 0, 0, 5, 2, 2, 4, 1, 1, 2, 5, 6, 6, 0, 5, 6, 3, 5, 1, 3, 5, 5, 3, 1, 2, 0, 0, 4, 6, 6, 0, 3, 0, 1, 1, 5, 1, 0, 3, 2, 5, 3, 6, 6, 3, 6, 0, 0, 2, 3, 2, 6, 3, 6, 0, 2, 4, 6, 1, 5, 3, 0, 6, 6, 5, 2, 0, 5, 3, 4, 1, 6, 1, 4, 4, 3, 4, 2, 3, 0, 5, 4, 0, 5, 5, 2, 1, 3, 5, 4, 0, 5, 5, 5, 2, 5, 0, 1, 1, 4, 2, 4, 0, 5, 1, 3, 6, 4, 4, 1, 4, 6, 0, 1, 4, 1], [1, 1, 1, 0, 0, 1], [2, 1, 3, 3, 0, 2, 1, 3, 1, 2, 3, 0, 0, 0, 3, 3, 3, 0, 2, 1, 2, 3, 3, 1, 2, 2, 2, 1, 3, 2, 3, 3, 3, 1, 2, 2, 0, 3, 1, 3, 0, 0, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 2, 3, 1, 2, 3, 2, 3, 2, 2, 1, 1, 0, 2, 0, 3, 1, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 0, 3, 3, 2, 1, 3, 2, 0, 1, 1, 2, 1, 2, 1, 3, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 3, 3, 2, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1, 3, 3, 0, 2, 0, 2, 0, 1, 0, 1, 3, 0, 0, 2, 0, 3, 2, 3, 0, 0, 1, 3, 0, 3, 1, 0, 3, 1, 1, 2, 3, 1, 1, 0, 0, 3, 3, 0, 0, 2, 3, 3, 2, 0, 2, 1, 1, 2, 2, 0, 0, 2, 3, 0, 1, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 0, 3, 1, 2, 0, 0, 2, 0, 2, 3, 2, 3, 2, 3, 0, 1, 2, 2, 3, 3, 2, 1, 3, 3, 0, 2, 1, 3, 2, 3, 2, 3, 2, 1, 3, 3, 2, 0, 2, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 1, 3, 3, 0, 1, 2, 0, 0, 3, 3, 3, 0, 0, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 3, 1, 1, 2, 2, 1, 1, 0, 3, 2, 2, 0, 1, 0, 0, 2, 2, 1, 2, 2, 1, 1, 0, 3, 3, 3, 2, 2, 1, 0, 3, 1, 1, 3, 0, 0, 1, 3, 2, 3, 3, 2, 2, 2, 0, 2, 2, 3, 1, 0, 2, 1, 3, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 2, 1, 0, 3, 2, 1, 2, 1, 3, 2, 2, 1, 0, 2, 2, 2, 3, 3, 2, 2, 3, 0, 1, 1, 2, 3, 3, 2, 2, 3, 3, 2, 2, 1, 1, 0, 2, 1, 1, 2, 3, 2, 2, 1, 3, 1, 0, 0, 1, 2, 0, 0, 1, 1, 3, 0, 3, 3, 0, 1, 3, 0, 0, 2, 2, 1, 2, 0, 1, 2, 2, 1, 1, 1, 2, 2, 3, 2, 3, 0, 2, 2, 2, 0, 1, 0, 1, 0, 0, 3, 1, 1, 3, 3, 2, 2, 2, 3, 1, 3, 3, 0, 2, 2, 0, 3, 0, 3, 0, 3, 0, 1, 3, 1, 2, 3, 0, 2, 2, 3, 1, 3, 2, 1, 1, 3, 2, 0, 3, 2, 3, 0, 2, 0, 2, 2, 0, 1, 3, 1, 0, 3, 3, 1, 1, 0, 3, 2, 0, 3, 3, 2, 1, 0, 1, 3, 0, 0, 2, 2, 3, 2, 2, 3, 0, 0, 2, 1, 2, 3, 1, 1, 1, 3, 0, 3, 1, 2, 3, 0, 3, 3, 0, 0, 2, 3, 0, 0, 0, 2, 0, 2, 0, 1, 3, 1, 3, 0, 1, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 0, 2, 1, 0, 3, 2, 2, 3, 2, 1, 3, 3, 0, 0, 0, 2, 2, 2, 3, 3, 0, 1, 2, 0, 3, 3, 2, 3, 0, 1, 0, 3, 3, 3, 0, 0, 0, 1, 3, 1, 3, 3, 0, 2, 1, 0, 3, 3, 1, 3, 1, 0, 1, 3, 2, 1, 3, 3, 0, 3, 1, 0, 2, 2, 3, 1, 2, 2, 2, 2, 3, 3, 1, 0, 3, 1, 0, 3, 3, 2, 3, 2, 1, 1, 2, 0, 1, 3, 3, 0, 2, 2, 0, 3, 2, 1, 2, 2, 2, 1, 0, 2, 2, 3, 0, 3, 0, 0, 3, 1, 2, 1, 2, 3, 3, 0, 2, 3, 0, 2, 2, 3, 3, 2, 1, 1, 2, 1, 1, 3, 1, 3, 1, 2, 2, 2, 0, 0, 3, 1, 3, 1, 2, 1, 3, 2, 3, 2, 3, 1, 0, 2, 0, 0, 0, 3, 0, 3, 0, 0, 1, 1, 0, 1, 0, 3, 2, 2, 1, 0, 0, 2, 1, 3, 3, 2, 1, 1, 0, 0, 3, 1, 1, 0, 0, 2, 1, 0, 2, 0, 0, 0, 2, 1, 3, 0, 0, 0, 0, 2, 1, 0, 3, 0, 2, 1, 0, 1, 3, 2, 1, 0, 2, 2, 2, 1, 3, 0, 3, 0, 2, 2, 3, 1, 1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 0, 0, 2, 3, 1, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 3, 1, 3, 0, 3, 1, 1, 2, 3, 0, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2, 0, 2, 1, 2, 0, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 1, 0, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 0, 2, 1, 1, 2, 1, 1, 1, 0, 1, 2, 0, 0, 0, 0, 2, 0, 1, 1, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 0, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 1, 0, 2, 1, 1, 0, 2, 2, 0, 1, 2, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 2, 2, 2, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 2, 0, 2, 0, 2, 2, 1, 1, 2, 2, 2, 0, 0, 1, 0, 0, 1, 1, 1, 2, 2, 0, 2, 0, 0, 2, 2, 1, 0, 1, 2, 0, 2, 2, 1, 1, 0, 2], [2, 0, 1, 0, 1, 1, 0, 2, 0, 2, 1, 2, 1, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 1, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 1, 0, 1, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 1, 1, 1, 0, 0, 2, 2, 0, 1, 0, 1, 2, 2, 1, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 1, 2, 0, 2, 0, 0, 0, 1, 0, 1, 1, 2, 1, 0, 0, 0, 2], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 113, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= ( int(7.0) + min(max(i0, divInt(int(2.0),min(int(8.0), divInt(abs(in1),res0)))), i2) )\\nin1 -= min(abs(min(i1, mod(int(3.0),( abs(min(int(6.0), ( divInt(divInt(int(6.0),abs(( max(min(abs(int(5.0)), mod(divInt(in2,min(int(5.0), max(i2, in0))),max(min(min(min(( i0 + i0 ), in2), i1), i0), ( abs(int(7.0)) - ( abs(( max(divInt(( int(4.0) - int(3.0) ),in1), divInt(res0,max(int(3.0), in1))) + in1 )) * int(6.0) ) )))), int(9.0)) + int(1.0) ))),in2) * divInt(( ( mod(res0,abs(i2)) - min(abs(divInt(int(9.0),min(( in1 * int(6.0) ), int(5.0)))), ( int(4.0) - divInt(int(8.0),max(int(8.0), ( int(7.0) * in1 ))) )) ) * divInt(res0,int(1.0)) ),int(1.0)) ))) + ( i2 - int(1.0) ) )))), ( min(min(mod(i2,i1), in2), ( int(2.0) - int(1.0) )) + int(9.0) ))\\nloopBreak% = 0\\nwhile int(0.0) != i0:{:\\nb0 = not int(7.0) \\g max(min(in2, ( i2 * ( i2 - int(1.0) ) )), in0)\\nin1 += int(4.0)\\nif not max(i0, i1) \\l ( i1 - max(divInt(abs(i1),res0), int(9.0)) ):{:\\nb1 = max(in2, max(int(4.0), in2)) == max(int(2.0), int(7.0))\\n:}else:{:\\nif mod(max(int(3.0), int(2.0)),in1) \\l in0:{:\\nif max(max(i0, i0), mod(min(min(divInt(i2,mod(int(5.0),int(3.0))), mod(( in1 - in1 ),mod(max(in1, int(5.0)),divInt(abs(in1),int(4.0))))), int(4.0)),int(5.0))) \\l ( divInt(min(abs(res0), max(int(3.0), ( i0 - i0 ))),( i2 + mod(abs(divInt(min(divInt(min(i2, int(3.0)),( ( max(max(( int(7.0) * abs(max(i2, mod(int(0.0),abs(( abs(( min(( int(5.0) + max(min(( res0 * divInt(max(min(i1, res0), int(6.0)),int(9.0)) ), int(3.0)), int(4.0)) ), i2) + in2 )) + abs(abs(max(max(min(min(int(6.0), min(min(i1, int(0.0)), divInt(res0,in1))), max(max(max(in2, i2), mod(i1,divInt(i2,int(7.0)))), i1)), i0), mod(int(7.0),( max(int(6.0), int(9.0)) * ( mod(int(3.0),int(0.0)) + i0 ) ))))) ))))) ), abs(mod(( i0 * int(7.0) ),in0))), i2) + ( ( int(3.0) * ( ( int(2.0) + int(8.0) ) + i2 ) ) + max(abs(abs(mod(( int(6.0) * in2 ),abs(int(6.0))))), int(6.0)) ) ) * abs(in2) )), in2),int(7.0))),max(( min(abs(( ( ( res0 - divInt(divInt(max(int(6.0), i2),( int(9.0) + max(abs(divInt(int(0.0),mod(( int(7.0) - i2 ),in1))), in0) )),in2) ) + mod(mod(int(4.0),i2),max(divInt(int(6.0),divInt(int(7.0),max(( ( int(5.0) - i0 ) * mod(( divInt(max(min(divInt(( max(i0, int(0.0)) - int(2.0) ),( abs(min(( ( min(min(( ( int(3.0) * int(7.0) ) + in2 ), mod(int(3.0),int(7.0))), mod(min(mod(divInt(int(5.0),abs(int(7.0))),i2), i2),int(4.0))) - ( in1 * i1 ) ) - int(4.0) ), int(9.0))) * min(i1, max(max(i2, int(4.0)), abs(in2))) )), res0), mod(mod(int(3.0),( res0 + int(6.0) )),( ( int(0.0) - int(1.0) ) * int(3.0) ))),divInt(( min(mod(min(i0, mod(mod(divInt(in2,int(5.0)),res0),int(4.0))),in0), in2) + max(int(5.0), int(7.0)) ),max(abs(divInt(mod(( abs(int(1.0)) - min(min(i1, ( ( in0 - max(in2, min(in2, abs(in0))) ) - int(6.0) )), abs(int(5.0))) ),mod(max(i1, divInt(( abs(int(2.0)) - abs(mod(int(4.0),int(5.0))) ),abs(mod(i2,abs(divInt(abs(i0),( i0 + ( ( in1 + int(8.0) ) * max(int(2.0), res0) ) ))))))),abs(min(int(4.0), int(0.0))))),res0)), min(mod(i0,max(abs(mod(int(7.0),in0)), int(1.0))), abs(i0))))) * i1 ),mod(mod(abs(( ( abs(i1) + in2 ) - divInt(int(7.0),divInt(abs(int(5.0)),int(5.0))) )),int(4.0)),abs(i1))) ), max(int(1.0), ( min(i0, max(min(in0, i2), mod(abs(in2),in0))) + res0 ))))), ( res0 - divInt(in0,int(1.0)) ))) ) * max(int(5.0), max(res0, int(7.0))) )), int(7.0)) * min(int(7.0), mod(mod(int(6.0),divInt(abs(int(2.0)),divInt(i0,( int(4.0) - i0 )))),abs(mod(mod(min(( int(9.0) - max(abs(i2), in0) ), i2),divInt(( ( min(min(res0, int(2.0)), divInt(in0,max(abs(( max(res0, int(0.0)) * i0 )), max(max(max(i2, in1), res0), int(1.0))))) - min(int(4.0), min(abs(i1), ( int(8.0) - in2 ))) ) + abs(abs(int(4.0))) ),max(int(4.0), in0))),int(9.0))))) ), max(divInt(int(8.0),min(min(i0, max(int(0.0), res0)), ( ( abs(int(6.0)) + mod(( ( mod(min(max(int(0.0), res0), max(int(9.0), in2)),max(abs(( min(( int(3.0) - int(4.0) ), ( i2 - int(4.0) )) - abs(min(i0, ( ( in2 - abs(divInt(int(7.0),( ( ( int(3.0) - in0 ) * mod(mod(abs(in1),max(i1, res0)),max(int(8.0), ( int(2.0) + ( abs(abs(i1)) * mod(abs(in1),( ( min(min(divInt(int(6.0),int(9.0)), ( int(2.0) * int(1.0) )), max(int(8.0), min(int(2.0), mod(divInt(( in1 - in0 ),min(int(5.0), max(int(6.0), mod(int(3.0),max(mod(max(divInt(abs(int(8.0)),in1), ( i2 - in0 )),i0), abs(in2)))))),min(in1, i0))))) - int(3.0) ) * int(8.0) )) ) ))) ) + in2 ))) ) * int(3.0) ))) )), in2)) + abs(( divInt(int(3.0),i2) + i1 )) ) + ( int(7.0) - min(min(( int(1.0) + int(0.0) ), in0), in2) ) ),abs(int(4.0))) ) - int(6.0) ))), in1))) )) - i0 ):{:\\nin2 = divInt(int(8.0),in2)\\n:}else:{:\\nb1 = not divInt(in2,i2) \\le in2\\n:}\\n:}\\n:}\\nb2 = divInt(int(9.0),abs(i0)) \\g i1\\nif i1 != in1:{:\\nif ( int(3.0) * i2 ) \\ge max(in1, divInt(int(5.0),i0)):{:\\nif ( int(6.0) \\l min(divInt(int(5.0),in2), divInt(mod(divInt(int(9.0),max(i1, abs(in0))),mod(( min(int(5.0), int(4.0)) - divInt(int(5.0),int(9.0)) ),int(8.0))),res0)) and ( b2 or divInt(abs(mod(( in1 + in1 ),mod(abs(int(7.0)),int(4.0)))),mod(i1,int(4.0))) \\le in1 ) ):{:\\nres0 = i0\\n:}else:{:\\nb2 = ( int(1.0) + ( int(1.0) + max(int(5.0), max(i1, min(int(5.0), int(5.0)))) ) ) == mod(abs(in1),int(3.0))\\n:}\\n:}\\n:}else:{:\\ni1 *= int(4.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 7, 11, 185, 185, 13, 6, 2, 19, 13, 6, 0, 6, 201, 6, 797, 213, 204, 107, 110]}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [9, 8, 6, 7, 3, 9, 8, 7, 8, 9, 3, 8, 9, 5, 4, 5, 2, 8, 7], [4], [0], [], [0, 1], [0], [1], [1], [], [2, 1, 4, 5, 4, 6, 1, 3, 2, 6, 1, 1, 6, 6, 4, 0, 3, 4, 5, 6], [1], [3, 3, 2, 3, 0, 3, 3, 1, 1, 2, 3, 2, 1, 2, 2, 1, 0, 1, 2, 1, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 2, 0, 1, 2, 2, 2, 3, 3, 0, 3, 0, 0, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 1, 0, 3, 1, 3, 3, 2, 1, 3, 0, 2, 3, 1, 2, 3, 2, 1, 3, 0, 0, 2, 0, 1, 3, 2, 1, 3, 0, 3, 3, 0, 3, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [2, 0, 2, 2, 2, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 1, 2, 0, 0, 2, 2, 2, 1, 0, 1, 2, 2, 0, 2], [0, 1, 1, 0, 0, 2, 2, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\ni2 += abs(min(divInt(abs(i1),abs(abs(int(9.0)))), int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( min(mod(int(6.0),divInt(divInt(int(7.0),in1),int(3.0))), divInt(int(9.0),min(max(in2, divInt(in1,res0)), max(int(8.0), min(abs(mod(i1,int(7.0))), ( ( ( min(abs(in0), min(i2, res0)) - min(abs(min(abs(max(int(8.0), i1)), abs(i1))), res0) ) - int(9.0) ) + res0 )))))) + min(int(3.0), min(abs(mod(int(8.0),abs(in1))), divInt(abs(int(9.0)),divInt(max(( int(5.0) * min(i0, in0) ), ( in1 * int(4.0) )),max(( int(5.0) - abs(in2) ), abs(min(res0, abs(int(2.0))))))))) ) \\le int(87.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 19, 19, 1, 1, 0, 2, 1, 1, 1, 0, 20, 1, 86, 17, 32, 8, 10]}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 1, 1], [0], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 8, 4, 5, 6, 9, 7, 5, 6, 1, 1, 5, 6, 8, 2, 2, 9, 7, 0, 3, 9, 4, 6, 3, 3, 0, 2, 8, 5, 5, 5, 0, 8, 1, 0, 8, 3, 7, 5, 6, 7, 2, 2, 0, 1, 5, 6, 2, 6, 1, 8, 6, 3, 0, 7, 1, 5], [1, 4, 2], [0, 2, 0], [], [1, 1, 0, 1], [0, 0, 0], [1], [0], [0], [4, 4, 0, 0, 4, 2, 2, 5, 5, 2, 2, 4, 4, 4, 3, 6, 5, 6, 6, 0, 1, 1, 3, 5, 3, 0, 6, 1, 5, 4, 4, 3, 5, 2, 3, 3, 6, 0, 2, 2, 2, 4, 0, 1, 4, 2, 2, 5, 2, 5, 2], [], [0, 3, 2, 3, 0, 2, 2, 3, 3, 3, 2, 3, 3, 2, 3, 1, 0, 1, 3, 1, 3, 3, 0, 2, 2, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 2, 3, 2, 2, 3, 2, 0, 0, 2, 2, 3, 1, 3, 3, 0, 3, 1, 0, 3, 0, 2, 0, 1, 3, 1, 1, 2, 1, 0, 2, 1, 1, 2, 0, 2, 1, 1, 3, 2, 3, 0, 1, 1, 2, 2, 0, 3, 3, 3, 1, 1, 1, 3, 2, 2, 2, 2, 2, 3, 2, 1, 2, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0, 3, 3, 2, 3, 1, 0, 0, 2, 0, 1, 2, 3, 1, 2, 3, 0, 2, 2, 1, 2, 2, 1, 0, 2, 3, 3, 2, 3, 1, 0, 2, 0, 1, 3, 2, 1, 3, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 3, 2, 1, 1, 1, 0, 0, 1, 3, 3, 1, 2, 3, 0, 2, 3, 2, 0, 2, 0, 0, 2, 2, 1, 3, 2, 2, 0, 0, 0, 3, 2, 3, 0, 3, 0, 0, 3, 3, 2, 1, 0, 1, 0, 2, 3, 3, 1, 3, 3, 1, 1, 0, 1, 1, 2, 0, 3, 3, 1, 2, 1, 2, 0, 1, 3, 1, 3, 1, 1, 3, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 2, 2, 1, 2, 0, 2, 1, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 1, 2, 2, 2, 1, 1, 1, 0, 2, 2, 0, 2, 2, 1, 0, 0, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0], [1, 2, 1, 0, 2, 1, 1, 2, 2, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in1 \\g max(mod(max(in1, divInt(( abs(abs(max(divInt(abs(min(mod(abs(int(3.0)),i0), int(5.0))),max(int(8.0), min(min(i0, divInt(mod(mod(( in1 - ( int(4.0) * ( ( i2 - i2 ) + in2 ) ) ),mod(max(( mod(max(( in2 * i2 ), ( ( min(int(5.0), max(abs(i2), min(int(6.0), in1))) - abs(in1) ) - mod(in1,int(9.0)) )),abs(int(7.0))) * int(5.0) ), ( int(6.0) * in0 )),mod(int(1.0),int(1.0)))),divInt(res0,mod(int(5.0),int(6.0)))),min(mod(min(in2, int(8.0)),int(2.0)), mod(( res0 + abs(max(min(int(2.0), int(9.0)), int(7.0))) ),min(divInt(( ( ( mod(min(divInt(int(0.0),( res0 + abs(int(3.0)) )), int(9.0)),i0) - i1 ) + divInt(int(4.0),int(6.0)) ) - i1 ),min(min(divInt(min(int(3.0), in0),in2), ( in0 + int(3.0) )), mod(max(int(0.0), mod(abs(i0),( ( int(2.0) - ( ( int(8.0) - res0 ) - divInt(abs(abs(( max(int(5.0), i1) - mod(in2,int(5.0)) ))),max(( int(5.0) * max(( divInt(int(0.0),int(8.0)) + int(1.0) ), in1) ), mod(int(0.0),in1))) ) ) - int(8.0) ))),in0))), divInt(in2,min(divInt(int(3.0),int(7.0)), int(5.0)))))))), i2))), in0))) * int(6.0) ),abs(abs(int(7.0))))),mod(min(in0, divInt(abs(( res0 + ( i0 * i2 ) )),( divInt(int(2.0),abs(( divInt(i2,i2) - in1 ))) + max(mod(min(i0, min(i1, in1)),min(abs(( int(2.0) - i2 )), int(0.0))), i2) ))),divInt(min(max(int(1.0), max(abs(int(5.0)), int(6.0))), in2),int(2.0)))), int(6.0)):{:\\nb0 = divInt(i2,max(abs(int(1.0)), divInt(int(8.0),( in2 - int(6.0) )))) \\le max(int(3.0), min(int(0.0), int(7.0)))\\nb2 = True\\nb0 = min(int(1.0), int(5.0)) == i2\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 58, 58, 3, 3, 0, 4, 3, 1, 1, 1, 51, 0, 231, 65, 57, 29, 36]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1], [0, 2, 8, 2, 0, 4], [3], [2], [], [1], [0], [], [], [], [0, 6, 3, 6, 6], [], [3, 3, 3, 3, 3, 2, 1, 1, 2, 1, 3, 1, 0, 0, 3, 0, 3, 1, 2, 0, 2, 1, 0], [1, 0, 0, 0], [2, 2, 0, 0, 2, 0, 0, 1], [0, 1, 1], [0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = abs(abs(min(min(abs(divInt(int(0.0),int(2.0))), ( int(8.0) + min(int(2.0), i0) )), res0))) \\ge min(in0, max(int(0.0), ( res0 - ( int(4.0) - res0 ) )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 23, 4, 8, 3, 1]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [3], [], [], [], [], [], [], [], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(3.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 0, 1], [1, 5, 2, 5, 0], [1, 4], [1, 2], [], [0, 0, 1, 1], [0, 0], [2, 2], [], [], [5, 0, 3], [], [1, 0, 3, 2, 1, 3, 0, 0, 1, 1], [1], [1, 0], [], [0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not not int(1.0) \\g in2\\nb2 = max(divInt(int(5.0),min(i0, in0)), int(2.0)) \\le int(50.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 2, 2, 0, 4, 2, 2, 0, 0, 3, 0, 10, 1, 2, 0, 1]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 2, 1], [1, 0, 0, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 5, 2, 2, 5, 0, 0, 1, 5, 2, 9, 6, 8, 4, 3], [1, 5, 1, 4, 3], [2, 0, 0, 2], [1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [3, 0, 3, 0, 3, 0, 2], [], [1, 0], [4, 6, 5, 3, 0, 3, 6, 4, 2, 6, 0, 5, 5, 1, 2, 6], [0], [1, 2, 3, 0, 3, 3, 0, 1, 2, 3, 3, 0, 3, 0, 0, 0, 0, 3, 3, 2, 1, 2, 0, 1, 1, 3, 2, 3, 3, 1, 2, 0, 1, 2, 2, 3, 0, 1, 0, 0, 1, 0, 3, 0, 1, 0, 3, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 2, 0, 2, 1, 1, 0], [0, 0, 0], [1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( b2 or int(7.0) \\g ( min(in1, min(min(res0, int(3.0)), ( max(max(in2, min(in0, i0)), in0) + res0 ))) + max(min(mod(int(5.0),( in1 + int(2.0) )), int(2.0)), abs(divInt(min(abs(int(5.0)), mod(i2,int(0.0))),divInt(mod(max(res0, int(0.0)),i0),in2)))) ) ):{:\\nif int(1.0) != in2:{:\\nb0 = ( b0 and max(i1, int(5.0)) \\g i2 )\\n:}else:{:\\nif ( min(int(2.0), int(9.0)) \\le int(6.0) or b2 ):{:\\nloopBreak% = 0\\nwhile not int(8.0) \\ge int(4.0):{:\\nres0 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 16, 16, 5, 4, 3, 12, 5, 7, 0, 2, 16, 1, 53, 8, 14, 3, 5]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [9, 5, 1], [1], [2], [], [1], [0], [], [], [], [4], [], [3, 1, 2, 3, 0, 3, 1, 1], [1], [2, 0, 2], [], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = abs(int(9.0)) \\g mod(min(in1, abs(int(5.0))),int(1.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 8, 1, 3, 0, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [0], [1], [], [1], [0], [], [], [], [1, 5], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i1 \\l in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1, 1, 1], [5, 3, 5, 7, 1], [], [], [], [], [], [], [], [], [5, 5, 3, 4, 0, 3, 5], [0, 0], [0, 2, 1, 3, 2, 1, 2, 0, 2, 0, 2, 2, 2, 1, 1, 0, 2, 3, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0], [2, 2], [2, 1, 1, 2, 2, 2], [1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = in2\\nin0 = mod(int(5.0),abs(( int(3.0) * ( in1 - ( i0 - ( divInt(( int(5.0) * int(7.0) ),in0) * ( abs(in2) * int(1.0) ) ) ) ) )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 20, 8, 2, 6, 2]}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 5, 6, 3, 5, 7, 0, 2, 2, 9, 9, 7, 7, 4, 7], [4, 1, 3], [1, 0], [0], [1, 1, 0, 1, 0], [0, 0, 0], [3, 1], [0], [0], [1, 2, 2, 1, 2, 5, 5, 3, 0, 4], [], [3, 0, 1, 0, 1, 3, 2, 1, 1, 0, 2, 3, 2, 2, 0, 3, 2, 1, 3, 2, 3, 1, 2, 2, 1, 3, 1, 1, 3, 1, 3, 0, 1, 3, 2, 2, 0, 0, 0, 0, 1, 3, 1, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 1, 2, 0, 1, 0, 2, 1, 0, 1], [0, 0, 2, 2, 2, 1], [1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(i1, int(4.0)) \\le i2\\nif int(8.0) \\g abs(( int(5.0) + int(6.0) )):{:\\nb0 = ( i2 \\ge ( max(mod(mod(i1,abs(( int(3.0) + min(mod(max(int(5.0), ( divInt(int(7.0),min(int(0.0), int(2.0))) * abs(int(2.0)) )),max(i2, int(9.0))), min(mod(( in2 * in2 ),in0), i0)) ))),int(9.0)), max(int(7.0), int(7.0))) * ( in1 - mod(int(4.0),int(7.0)) ) ) and True )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 16, 16, 3, 2, 1, 5, 3, 2, 1, 1, 10, 0, 49, 12, 11, 6, 6]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1], [4, 6, 0], [5], [], [], [1], [0], [], [], [], [0, 3, 6, 2, 0, 0], [0], [0, 1, 3, 2, 0, 2, 0, 3, 3, 3, 1, 0, 1, 0], [0, 1], [1, 2, 0, 0], [1], [0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 != int(4.0):{:\\nin0 = max(( res0 - divInt(i2,abs(min(min(int(6.0), i0), int(0.0)))) ), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 1, 0, 0, 1, 1, 0, 0, 0, 6, 1, 14, 2, 4, 1, 1]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [0, 0], [1, 1, 1, 1, 1, 1], [9, 8, 9, 9, 8, 1], [2], [2, 2, 1, 1], [], [0, 0, 1, 0], [0], [2, 0, 0], [], [], [4], [], [2, 2, 0, 3, 1, 1, 3, 1, 2, 1, 1, 3, 1], [1, 1, 1], [1, 1, 2], [], [0, 0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not b2:{:\\nb2 = divInt(divInt(in1,max(int(9.0), int(8.0))),max(int(9.0), divInt(int(9.0),int(8.0)))) == abs(int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 1, 4, 0, 4, 1, 3, 0, 0, 1, 0, 13, 3, 3, 0, 3]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 1, 0, 0, 1, 1], [0], [0, 1, 1, 1, 0], [1, 1, 1], [1, 0, 8], [5, 4], [1, 2, 2, 2], [1, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0], [3, 1, 3, 0, 0], [1], [1], [3, 5, 5, 1, 5, 4, 0], [1, 0, 1], [3, 0, 0, 0, 1, 1, 1, 0], [], [2], [1, 0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(in0) != in2:{:\\nb1 = ( in2 \\le int(1.0) or False )\\n:}else:{:\\ni1 -= int(0.0)\\nin2 = int(8.0)\\nin1 += i0\\n:}\\nb2 = ( b2 and b2 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 3, 3, 2, 4, 2, 7, 2, 5, 1, 1, 7, 3, 8, 0, 1, 2, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [1, 4, 3, 5], [1, 1], [0, 0], [], [], [0, 1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += in1\\nin0 -= in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [1, 2, 2, 0, 1], [0, 1], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 6, 5, 4, 2, 2, 8, 4, 2, 0, 2, 6, 8], [4, 3, 3], [2, 2, 1, 1], [], [1, 1, 0, 1, 0], [0, 0, 0], [0, 1], [0], [1], [1, 5, 2, 0, 2, 3, 6, 2, 4, 0, 5], [], [0, 1, 1, 3, 2, 3, 1, 2, 1, 1, 1, 1, 2, 3, 0, 1, 2, 2, 3, 3, 2, 3, 3, 1, 1, 0, 3, 2, 0, 3, 3, 0, 0, 2, 2, 0, 3, 1, 0, 3, 0, 0, 1, 3, 0, 1, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 2, 2, 0], [0, 2, 2, 2], [0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i1 \\le int(0.0)\\nif int(1.0) \\ge min(divInt(max(int(6.0), mod(int(5.0),int(4.0))),int(2.0)), int(2.0)):{:\\nloopBreak% = 0\\nwhile b2:{:\\nb1 = mod(min(in2, int(8.0)),divInt(( max(abs(divInt(min(min(int(4.0), int(2.0)), i2),min(( i0 + max(min(i2, in0), ( ( res0 * abs(int(0.0)) ) * i2 )) ), abs(in1)))), i0) * int(2.0) ),min(in2, int(6.0)))) \\ge int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = True\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 14, 14, 3, 4, 0, 5, 3, 2, 1, 1, 11, 0, 47, 9, 13, 4, 5]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1], [0, 9, 7, 1, 5, 8, 9], [2], [2], [], [1], [0], [], [], [], [6, 6, 3, 1, 1, 5, 1], [], [3, 2, 0, 2, 2, 2, 0, 3, 0, 2, 0, 3, 0, 3, 3, 2, 1, 1, 2, 1, 1, 3, 3, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1], [0, 1, 2, 0, 1, 2, 1], [2, 1, 0], [0, 1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(( res0 * ( divInt(mod(res0,max(in0, ( i1 - abs(i1) ))),min(max(divInt(int(0.0),int(9.0)), mod(int(7.0),int(1.0))), abs(max(int(5.0), in2)))) + i1 ) ), int(8.0)) == int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 7, 0, 28, 7, 7, 3, 4]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 0, 6, 5, 7, 6, 6], [], [], [], [], [], [], [], [], [6, 4, 4, 5, 4, 3, 5, 6, 4, 1, 3, 6, 6, 3, 0, 0], [1], [3, 3, 2, 3, 2, 3, 0, 3, 3, 0, 2, 1, 2, 0, 1, 0, 3, 3, 0, 2, 1, 0, 3, 3, 0, 3, 2, 3, 1, 2, 0, 3, 1, 0, 1, 3, 0, 2, 0, 1, 0, 2, 3, 0, 2, 0, 1, 3, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 2, 0, 0, 2, 2, 1, 0, 0, 1, 0, 0, 0, 1, 2], [1, 2, 1, 2, 0, 1], [0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= max(min(( abs(divInt(min(in1, min(abs(in1), divInt(int(1.0),mod(in2,int(9.0))))),in1)) * abs(max(in0, ( int(0.0) - in2 ))) ), min(min(res0, max(( min(int(6.0), ( in1 * min(int(5.0), i1) )) + int(7.0) ), min(in0, divInt(res0,int(6.0))))), res0)), divInt(max(in0, ( i0 - int(6.0) )),abs(i0)))\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 1, 1, 0, 1, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 49, 10, 16, 6, 5]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 1, 2, 1, 2, 2, 2, 0], [0, 0, 1, 1, 0, 0], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 8, 0, 6, 9, 8, 3, 2, 5, 3, 1, 1, 2, 4, 5, 7, 9, 6, 9, 7], [3, 2, 1, 4, 1, 4, 0], [2, 1, 0], [0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 0, 1], [1], [1, 1, 0, 0], [1, 6, 4, 4, 4, 1, 4, 1, 4, 0, 1, 3, 6, 1, 6, 6, 2, 2, 5, 2, 0, 0, 5, 0, 0, 2], [1, 0], [0, 3, 1, 0, 3, 1, 3, 3, 2, 0, 3, 3, 2, 0, 0, 1, 1, 0, 0, 2, 3, 1, 1, 1, 0, 3, 3, 0, 3, 3, 2, 2, 2, 1, 1, 0, 3, 0, 2, 0, 0, 2, 0, 1, 2, 1, 0, 2, 0, 3, 1, 3, 3, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 3, 2, 3, 0, 3, 1, 1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [2, 1, 1, 2, 1, 2, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 2], [1, 1, 0, 2, 2, 2, 1, 2, 2, 0], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\ge abs(int(9.0)):{:\\nres0 -= in1\\nif max(int(7.0), max(abs(( in1 - max(abs(( in1 + i1 )), int(8.0)) )), int(0.0))) == in1:{:\\nb2 = ( b1 and i1 \\g divInt(max(int(6.0), int(9.0)),int(8.0)) )\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nin1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile min(min(i1, min(abs(( ( divInt(int(3.0),int(2.0)) * in0 ) * max(res0, mod(i1,res0)) )), divInt(res0,int(5.0)))), ( int(3.0) * i2 )) \\le ( i2 - max(int(1.0), min(min(int(1.0), max(abs(int(2.0)), ( in2 * int(4.0) ))), int(5.0))) ):{:\\nif i2 \\g int(7.0):{:\\nif min(( max(i0, max(int(9.0), int(6.0))) * int(9.0) ), i0) \\le in2:{:\\nb0 = i0 \\l ( max(abs(i0), i2) + int(7.0) )\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 6, 4, 21, 21, 7, 3, 1, 10, 7, 3, 1, 4, 26, 2, 80, 13, 22, 10, 4]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 1, 0], [], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 1, 7, 9, 2, 9, 1, 0, 1, 2, 0, 3, 4, 6, 7, 7, 6, 1, 2, 5, 1, 5, 0, 9, 8, 4, 6, 7, 1, 9, 5, 3, 7, 9, 6, 5, 9, 0, 0, 3, 8, 8, 6, 3, 8, 8, 0, 1, 8, 6, 9], [4, 0, 3], [1, 0, 0], [0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0], [3, 2, 3, 2, 1, 2, 1], [0, 0], [], [3, 4, 2, 1, 5, 1, 3, 6, 5, 4, 4, 3, 3, 2, 2, 5, 6, 6, 2, 5, 1, 2, 0, 2, 5, 4, 1, 3, 6, 0, 3, 0, 4, 1, 0, 5, 3, 2, 1, 0, 1, 0, 2, 0, 0, 5, 6, 4, 1, 3, 0], [1], [0, 2, 3, 3, 0, 2, 2, 1, 2, 0, 2, 3, 2, 3, 2, 3, 1, 2, 1, 1, 1, 3, 3, 1, 1, 0, 2, 0, 2, 1, 2, 0, 1, 3, 2, 2, 2, 0, 3, 0, 0, 2, 3, 1, 3, 3, 3, 1, 2, 2, 0, 0, 2, 0, 2, 3, 0, 0, 0, 3, 0, 0, 1, 2, 1, 1, 0, 3, 3, 1, 0, 1, 0, 3, 3, 3, 3, 0, 2, 2, 0, 2, 1, 1, 3, 2, 2, 3, 0, 1, 2, 2, 3, 3, 2, 1, 2, 0, 2, 1, 3, 2, 2, 3, 0, 1, 1, 0, 1, 3, 3, 0, 2, 1, 0, 0, 1, 0, 2, 3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 0, 1, 2, 1, 0, 1, 1, 1, 1, 2, 1, 1, 3, 2, 2, 3, 0, 0, 3, 2, 3, 0, 2, 0, 1, 2, 2, 0, 2, 2, 3, 2, 1, 3, 0, 1, 1, 2, 0, 2, 3, 1, 0, 0, 2, 2, 0, 1, 1, 2, 2, 2, 1, 3, 1, 2, 3, 0, 3, 0, 3, 0, 0, 2, 0, 3, 1, 3, 2, 3, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 1, 3, 0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 2, 1, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 2, 0, 0, 0, 2, 2, 0, 2, 2, 2], [0, 2, 0, 1, 2, 0, 1, 0, 2, 2, 1, 1, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( not in0 \\le mod(min(max(in1, mod(( int(6.0) + ( i2 * ( max(mod(min(( max(int(1.0), mod(int(1.0),int(7.0))) + int(9.0) ), max(min(int(2.0), int(9.0)), i1)),( in2 - mod(int(1.0),mod(i1,int(0.0))) )), abs(( ( divInt(in0,max(res0, in2)) * divInt(abs(int(1.0)),max(max(min(int(2.0), divInt(( in1 + in1 ),( in0 - ( min(in0, i2) + i2 ) ))), max(in2, res0)), int(0.0))) ) * divInt(int(3.0),int(4.0)) ))) * res0 ) ) ),max(max(int(6.0), i2), int(7.0)))), in2),min(max(min(max(i1, ( mod(i2,mod(int(7.0),int(6.0))) - min(mod(( min(i0, int(1.0)) - mod(( max(abs(mod(int(2.0),( i2 * divInt(int(5.0),min(( ( max(in2, int(1.0)) * int(5.0) ) + in1 ), int(0.0))) ))), abs(max(i1, ( int(9.0) - in0 )))) - res0 ),int(8.0)) ),i0), mod(abs(int(4.0)),abs(max(max(in0, int(6.0)), min(max(min(i0, int(7.0)), ( int(1.0) * in1 )), int(9.0)))))) )), int(5.0)), int(3.0)), int(7.0))) and ( not True or not ( int(9.0) + int(6.0) ) \\l max(divInt(( abs(i1) * i0 ),abs(( max(in2, ( in0 - int(5.0) )) - divInt(mod(i2,( ( abs(mod(int(9.0),abs(i1))) * int(0.0) ) + int(0.0) )),( i0 + ( min(int(3.0), i1) * i0 ) )) ))), mod(( i2 - int(8.0) ),int(8.0))) ) )\\ni0 *= mod(( mod(int(6.0),min(int(3.0), mod(min(i0, abs(in2)),abs(res0)))) - in1 ),( i1 + min(int(8.0), abs(divInt(abs(( in0 + mod(int(8.0),( int(0.0) + divInt(int(1.0),int(8.0)) )) )),int(6.0)))) ))\\nb0 = int(9.0) \\ge abs(i0)\\nb0 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 52, 52, 3, 3, 2, 10, 3, 7, 2, 0, 51, 1, 212, 59, 51, 32, 28]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 1, 2, 1, 1, 1, 0], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 2, 0, 7, 9, 8, 8, 9, 8, 7, 7, 3, 1, 6, 1, 8, 9, 2, 2, 4, 9, 3, 2, 9, 5, 8, 3, 4, 3, 0, 7, 3, 8, 4, 0, 2, 5, 7, 5, 4, 2, 0, 4, 4, 3, 0, 6, 3, 2, 1, 1, 7, 1, 7, 2, 0, 2, 7, 2, 8, 9, 5, 3, 0, 7, 3, 4, 0, 2, 7, 8, 6, 3, 2, 0, 7, 8, 7, 7, 1, 8, 1, 1, 8, 2, 7, 4, 4, 7, 2, 1, 1, 2, 2, 1, 7, 6, 4, 9, 2, 3], [3, 3, 1], [], [1], [0, 1, 1, 0, 0, 1], [0, 0, 0], [3, 1, 1], [0, 1], [1, 1, 0, 0], [4, 1, 4, 4, 0, 1, 0, 3, 3, 5, 5, 5, 5, 5, 3, 2, 2, 6, 5, 6, 6, 2, 4, 6, 0, 1, 6, 5, 0, 1, 0, 2, 0, 3, 6, 1, 0, 1, 2, 2, 0, 2, 1, 2, 5, 1, 1, 4, 1, 5, 6, 2, 4, 6, 6, 6, 5, 5, 4, 0, 4, 0, 1, 1, 5, 2, 3, 0, 1, 3, 1, 3, 0, 4, 2, 2, 2, 6, 0, 3, 4, 5, 5, 6, 1, 2, 3, 5, 0, 2, 4, 6, 1, 2, 5, 6, 1, 0, 4, 5, 0, 2, 0, 4, 5, 2, 2, 5, 6, 3, 1, 1, 1, 5, 2, 2, 2, 2, 2, 1, 3, 6, 4, 2, 3, 5, 2, 3], [0, 0, 0, 1, 0, 1], [0, 1, 1, 2, 2, 2, 1, 0, 0, 0, 2, 1, 1, 2, 0, 2, 2, 0, 3, 3, 1, 2, 0, 2, 3, 3, 0, 2, 3, 0, 0, 3, 2, 2, 2, 1, 2, 3, 2, 0, 3, 1, 1, 3, 2, 0, 2, 0, 0, 2, 3, 0, 3, 1, 0, 3, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 3, 1, 2, 3, 0, 3, 2, 0, 1, 1, 1, 1, 2, 2, 0, 1, 0, 3, 0, 3, 3, 3, 1, 2, 2, 0, 1, 1, 2, 1, 0, 1, 0, 0, 2, 1, 2, 1, 2, 3, 0, 3, 3, 0, 0, 0, 2, 3, 2, 2, 3, 2, 2, 1, 0, 1, 1, 0, 3, 2, 3, 1, 3, 3, 2, 2, 2, 3, 1, 1, 3, 2, 0, 3, 1, 3, 0, 3, 3, 1, 2, 3, 1, 3, 2, 2, 1, 3, 3, 2, 3, 3, 3, 3, 0, 0, 1, 3, 3, 0, 2, 0, 3, 1, 1, 1, 0, 3, 3, 0, 1, 3, 0, 2, 1, 3, 1, 2, 3, 0, 2, 2, 1, 3, 3, 0, 2, 3, 0, 1, 2, 0, 3, 3, 0, 1, 1, 3, 2, 3, 0, 3, 0, 0, 0, 2, 2, 2, 1, 3, 3, 3, 3, 1, 0, 2, 2, 3, 3, 2, 0, 2, 3, 2, 0, 0, 0, 0, 2, 0, 1, 2, 2, 1, 3, 3, 3, 0, 1, 2, 2, 2, 3, 0, 1, 3, 2, 3, 1, 1, 1, 3, 2, 0, 1, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 0, 3, 0, 2, 2, 0, 2, 3, 0, 1, 1, 3, 3, 2, 0, 1, 3, 0, 3, 0, 2, 0, 0, 0, 2, 1, 1, 2, 3, 3, 2, 3, 3, 1, 0, 0, 2, 0, 1, 3, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 3, 1, 2, 0, 2, 0, 0, 3, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 0, 3, 1, 0, 2, 2, 3, 0, 3, 2, 3, 3, 3, 0, 2, 2, 1, 0, 1, 3, 0, 0, 0, 0, 0, 3, 2, 3, 1, 0, 1, 0, 1, 2, 2, 3, 2, 0, 0, 1, 0, 3, 1, 0, 0, 2, 0, 0, 1, 0, 1, 1, 0, 2, 2, 2, 3, 2, 2, 0, 1, 3, 2, 3, 3, 1, 2, 0, 3, 0, 1, 3, 0, 2, 3, 2, 2, 0, 3, 2, 1, 0, 3, 3, 0, 0, 2, 1, 2, 0, 0, 3, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 0, 3, 1, 2, 1, 0, 1, 3, 3, 0, 1, 0, 3, 2, 0, 3, 0, 2, 3, 3, 1, 3, 2, 2, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1, 0, 2, 1, 1, 2, 1, 1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 1, 2, 1, 0, 2, 2, 0, 2, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 1, 1, 0, 2, 0, 0, 2, 0, 2, 0, 2, 1, 0, 0, 0, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 2, 1, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2], [0, 1, 1, 0, 2, 0, 2, 0, 0, 2, 2, 1, 0, 0, 2, 1, 2, 0, 0, 1, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 0, 1, 1, 2, 0, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 2, 1, 0, 2, 2, 2, 2, 2, 0, 0, 2, 1, 2, 1, 1, 0, 2], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 91, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in1 \\ge int(5.0) or int(7.0) \\ge ( ( ( int(2.0) + i1 ) - in1 ) - in1 ) ):{:\\ni0 = ( int(0.0) + int(7.0) )\\n:}else:{:\\nif True:{:\\nif False:{:\\ni1 = divInt(i0,divInt(( in0 * max(max(int(9.0), divInt(in0,divInt(min(min(in2, mod(abs(in2),in2)), max(( divInt(divInt(int(8.0),mod(max(( in2 + max(int(8.0), int(9.0)) ), max(( in2 * divInt(in0,i2) ), mod(abs(i2),max(int(8.0), res0)))),abs(int(7.0)))),in2) + abs(res0) ), res0)),mod(abs(abs(abs(i2))),min(max(int(7.0), divInt(max(in1, max(( res0 + int(3.0) ), int(1.0))),int(6.0))), int(1.0)))))), ( mod(i0,int(8.0)) * i1 )) ),max(res0, abs(min(max(int(9.0), ( mod(in2,int(2.0)) * int(2.0) )), divInt(int(4.0),i0))))))\\n:}\\n:}else:{:\\nif int(9.0) \\g i1:{:\\ni0 = i2\\n:}\\n:}\\n:}\\ni0 -= ( int(3.0) + mod(int(2.0),( max(in0, abs(min(res0, i1))) + i0 )) )\\ni1 = ( max(( mod(max(( ( int(9.0) * i2 ) - int(5.0) ), int(8.0)),i2) * min(( max(int(3.0), abs(max(divInt(mod(( min(int(4.0), int(3.0)) + abs(( i0 + max(int(0.0), max(i2, abs(max(int(7.0), divInt(max(int(3.0), min(mod(( int(8.0) - abs(min(mod(min(abs(min(max(i1, i2), int(4.0))), min(abs(in2), ( i1 - max(int(0.0), int(2.0)) ))),int(5.0)), i1)) ),abs(max(in1, int(7.0)))), min(i1, ( int(5.0) - abs(int(4.0)) )))),( abs(in2) * ( ( int(2.0) - min(abs(res0), divInt(max(i2, int(0.0)),divInt(in1,abs(max(res0, int(4.0)))))) ) - int(4.0) ) )))))) )) ),min(( min(res0, min(res0, in2)) * in2 ), mod(divInt(mod(int(3.0),max(min(abs(min(int(0.0), in1)), ( ( max(min(( i0 * divInt(max(( in1 + i0 ), i1),i1) ), ( in2 + int(6.0) )), ( ( int(3.0) + max(min(abs(i2), int(2.0)), ( mod(( min(in0, int(1.0)) * min(( abs(int(1.0)) + int(7.0) ), int(1.0)) ),min(( i0 + int(7.0) ), abs(( ( min(abs(( max(( mod(min(i1, min(in0, divInt(( i1 - mod(min(in0, int(2.0)),int(0.0)) ),max(abs(mod(i0,int(2.0))), max(in1, abs(i2)))))),divInt(i2,i2)) - res0 ), mod(int(7.0),int(2.0))) * ( abs(min(divInt(max(max(int(8.0), i0), in0),( in1 * int(9.0) )), max(( int(5.0) * ( int(3.0) + mod(int(0.0),( divInt(( int(7.0) - int(3.0) ),int(4.0)) - in2 )) ) ), int(0.0)))) * in2 ) )), int(2.0)) + max(int(7.0), mod(res0,divInt(i1,i2))) ) - min(abs(int(8.0)), ( in0 - max(min(int(6.0), int(3.0)), int(2.0)) )) )))) + ( in2 + min(int(0.0), i0) ) )) ) - ( mod(max(i2, max(( min(max(min(in1, ( mod(int(7.0),res0) - int(8.0) )), min(i1, i2)), in2) * res0 ), i1)),min(divInt(abs(int(7.0)),i0), int(7.0))) - in1 ) )) - int(1.0) ) - ( ( max(mod(in2,i0), int(8.0)) * i2 ) - max(int(1.0), i0) ) )), in1)),( in2 + i2 )),int(1.0)))),i2), int(8.0)))) * int(2.0) ), in2) ), mod(divInt(divInt(abs(divInt(( res0 * int(7.0) ),min(( max(min(int(4.0), divInt(in0,min(i1, int(4.0)))), min(i1, mod(abs(divInt(( i1 * max(divInt(int(7.0),in2), min(min(i2, i2), ( int(2.0) * ( i2 * i2 ) ))) ),abs(i2))),i1))) + int(1.0) ), max(( int(1.0) + max(divInt(( int(2.0) * in0 ),res0), abs(int(2.0))) ), ( int(1.0) - in1 ))))),int(7.0)),max(abs(i2), int(6.0))),in0)) * abs(( in2 - abs(i2) )) )\\nin0 -= ( abs(abs(int(4.0))) + abs(divInt(( int(9.0) * int(2.0) ),int(3.0))) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 102, 102, 3, 0, 1, 6, 3, 3, 2, 4, 128, 6, 476, 122, 130, 70, 54]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1], [8, 7, 8], [1], [0], [], [1], [0], [], [], [], [2, 5, 1, 2, 4], [0], [2, 3, 3, 3, 1, 2, 0, 0, 1, 0, 3, 1, 0], [0, 0], [2, 2, 1, 0], [0, 2], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = ( abs(abs(max(int(8.0), ( in2 + i1 )))) * int(7.0) )\\nb0 = i2 \\g min(int(8.0), in1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 5, 1, 13, 2, 4, 2, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 1, 2, 0, 0], [0, 0], [1, 0, 1], [1, 1, 1], [7, 6, 2], [0, 2, 1], [0, 0], [1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0], [3, 3, 2, 2, 1, 0], [0], [0, 1], [4, 6, 3, 0, 1, 6, 6, 6, 2, 5], [0, 1], [0, 0, 3, 0, 1, 3, 0, 0, 3, 0, 0, 1, 3, 1, 0], [], [1, 1, 2, 0], [0], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( in1 \\l res0 or max(in0, int(7.0)) == max(i0, i1) ) or not not True ):{:\\nres0 = abs(res0)\\nif res0 \\g int(6.0):{:\\nb0 = b0\\n:}else:{:\\ni2 += min(int(2.0), in2)\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 3, 3, 3, 2, 2, 9, 3, 6, 1, 2, 10, 2, 15, 0, 4, 1, 0]}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 1], [1, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 3, 6, 4, 4, 3, 1, 3, 8, 1, 2, 0, 3, 4], [1, 1], [0, 2], [], [1, 1, 0], [0, 0], [0], [], [], [5, 5, 3, 2, 3, 2, 4, 2, 1, 2, 3, 4, 5, 2, 5, 4, 2, 6, 0, 6, 6, 0], [0], [3, 2, 1, 0, 3, 2, 3, 2, 3, 3, 0, 3, 2, 3, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 0, 2, 0, 0, 0, 3, 2, 1, 1, 2, 3, 0, 0, 2, 3, 3, 1, 1, 1, 3, 1, 2, 1, 0, 3, 3, 3, 1, 1, 0, 3, 3, 2, 0, 1, 2, 3, 3, 0, 2, 0, 1, 2, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 1, 0], [2, 2, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(( int(8.0) * in2 ), min(( min(divInt(max(abs(in2), min(( max(int(6.0), in0) * int(3.0) ), i2)),in0), i2) - in1 ), max(max(min(int(6.0), i2), ( i1 + i2 )), in0))) \\g min(mod(int(4.0),int(4.0)), mod(max(in1, in2),mod(max(abs(int(3.0)), int(1.0)),int(3.0)))):{:\\ni2 = min(int(8.0), divInt(int(1.0),in2))\\nloopBreak% = 0\\nwhile abs(min(min(int(2.0), int(0.0)), in1)) \\g abs(min(( i2 - int(3.0) ), divInt(max(min(res0, mod(i0,int(4.0))), ( res0 + res0 )),i0))):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 15, 15, 2, 2, 0, 3, 2, 1, 0, 0, 22, 1, 71, 13, 22, 6, 7]}, {"genotype": [[0], [1], [0], [], [0], [1], [5], [3], [1], [], [1], [0], [], [], [], [4, 0, 0], [], [3, 3, 1, 3, 0, 0, 0], [], [0, 2, 1], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(abs(int(5.0)), max(in1, i0)) \\ge i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 7, 0, 3, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 2, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 4, 4, 4, 9, 9, 4, 8, 1, 3, 4, 5, 7, 0, 3, 3, 4, 0, 0, 2, 3, 8, 8, 3, 2, 3, 6, 9, 5, 1, 9, 1, 1, 0, 9, 5, 8, 8, 8, 2, 7, 7, 1, 9, 1, 7, 2, 3, 6, 2, 8, 0, 8, 4, 2, 3, 2, 3, 0, 4, 2, 2, 6, 1, 4, 2, 0, 4, 8, 0, 8, 9, 0, 2, 8, 6, 0, 0, 6, 0, 7], [3, 5, 2, 3, 4, 3, 4, 1, 1, 0, 5], [2, 0, 0, 0, 2, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 2, 2, 1, 0, 2, 0, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 1], [0, 0, 1], [1, 1, 0], [1, 0, 1, 1, 5, 1, 3, 2, 4, 3, 2, 4, 0, 4, 4, 5, 1, 2, 3, 4, 1, 0, 5, 0, 4, 6, 2, 2, 1, 5, 0, 5, 6, 1, 6, 4, 6, 6, 0, 3, 2, 3, 3, 2, 1, 5, 1, 0, 5, 3, 0, 3, 6, 5, 3, 1, 4, 4, 5, 2, 1, 4, 4, 2, 5, 3, 4, 4, 5, 3, 1, 0, 4, 3, 3, 1, 1, 5], [0, 1, 0, 0], [1, 1, 1, 1, 2, 3, 2, 0, 1, 1, 3, 1, 2, 2, 3, 1, 0, 2, 2, 1, 2, 0, 3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 2, 0, 0, 2, 2, 1, 2, 1, 0, 2, 1, 2, 0, 0, 3, 2, 0, 1, 3, 0, 0, 3, 3, 0, 1, 2, 3, 3, 3, 3, 1, 3, 0, 3, 1, 3, 3, 0, 1, 3, 1, 0, 0, 1, 2, 2, 2, 1, 2, 1, 2, 3, 1, 3, 2, 3, 1, 3, 3, 0, 3, 0, 0, 1, 3, 0, 3, 2, 1, 0, 2, 1, 1, 1, 3, 2, 0, 1, 0, 3, 2, 2, 1, 2, 3, 3, 2, 1, 3, 2, 0, 0, 3, 0, 0, 0, 1, 2, 3, 1, 2, 2, 3, 1, 1, 0, 1, 1, 3, 3, 0, 0, 3, 3, 1, 1, 2, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 0, 3, 0, 0, 1, 3, 2, 0, 2, 0, 0, 1, 1, 3, 3, 2, 1, 3, 1, 3, 1, 2, 1, 3, 1, 3, 0, 2, 0, 0, 1, 1, 1, 0, 1, 2, 3, 1, 1, 3, 0, 3, 2, 2, 1, 3, 3, 0, 2, 3, 2, 2, 2, 0, 0, 2, 2, 0, 1, 0, 3, 3, 1, 2, 1, 2, 3, 1, 0, 3, 0, 0, 2, 1, 3, 2, 3, 2, 0, 2, 1, 3, 2, 2, 3, 0, 1, 1, 3, 2, 3, 0, 0, 2, 0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 2, 3, 2, 2, 0, 0, 2, 1, 0, 1, 3, 2, 2, 1, 0, 1, 0, 0, 0, 1, 2, 3, 1, 2, 2, 0, 1, 1, 1, 2, 1, 0, 1, 2, 3, 2, 1, 1, 2, 0, 3, 0, 0, 3, 2, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 2, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 0, 2, 0, 0, 2, 0, 1, 1, 2, 2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 1, 1, 2, 1, 1, 0, 0, 1, 2, 2, 0, 1, 1, 0, 1, 2, 0, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0], [1, 2, 2, 0, 0, 2, 0, 1, 0, 2, 0, 1, 2, 0, 2, 1, 1, 1, 1, 0, 0, 2, 2, 0, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1, 0, 2, 2, 1, 1, 0, 2], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(1.0) \\ge int(8.0) and ( ( not not True and b2 ) and not b0 ) ):{:\\ni1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(1.0) != divInt(max(divInt(i0,int(4.0)), int(4.0)),max(int(4.0), ( divInt(abs(int(9.0)),i1) - ( ( int(9.0) * mod(i1,min(int(4.0), min(min(mod(min(int(8.0), int(1.0)),max(divInt(( in2 * i1 ),( ( int(3.0) + mod(int(4.0),in0) ) + ( int(5.0) * divInt(i2,in1) ) )), max(divInt(in0,int(7.0)), min(i2, in1)))), min(max(i0, int(0.0)), ( min(min(min(min(int(3.0), abs(in1)), min(int(3.0), max(abs(in1), int(4.0)))), max(int(0.0), in2)), i1) + int(0.0) ))), ( ( ( int(2.0) - divInt(int(3.0),mod(abs(int(8.0)),abs(divInt(abs(int(8.0)),max(abs(i2), max(in0, in1)))))) ) + int(3.0) ) * max(i1, abs(mod(int(2.0),i0))) )))) ) + divInt(int(3.0),int(6.0)) ) ))):{:\\nb0 = int(9.0) == abs(mod(in2,int(5.0)))\\nb0 = ( i0 \\ge min(( ( int(1.0) - mod(abs(min(mod(int(9.0),min(mod(in1,res0), abs(i2))), i2)),i1) ) * int(1.0) ), mod(min(int(1.0), ( divInt(max(int(0.0), int(9.0)),in2) + int(5.0) )),int(8.0))) or b2 )\\nloopBreak% = 0\\nwhile max(abs(i0), in2) \\le abs(min(int(8.0), int(8.0))):{:\\nif divInt(res0,i1) \\ge divInt(res0,( in1 * int(2.0) )):{:\\nres0 -= res0\\n:}else:{:\\nb2 = ( i0 - in0 ) \\le max(i2, in0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = int(7.0) \\g min(( in0 - mod(i2,i1) ), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not b0:{:\\nin2 = int(1.0)\\n:}\\nloopBreak% = 0\\nwhile ( max(min(( int(9.0) - max(int(1.0), max(int(7.0), divInt(int(2.0),max(int(3.0), abs(i1))))) ), ( i0 + in2 )), int(6.0)) \\g int(2.0) or not ( not not int(8.0) \\l in0 or False ) ):{:\\ni0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( max(int(8.0), int(4.0)) + max(in0, abs(( divInt(int(2.0),max(max(res0, ( min(divInt(( ( in2 * in0 ) * ( mod(i1,int(3.0)) + in1 ) ),min(max(int(2.0), divInt(int(3.0),mod(abs(int(0.0)),in1))), abs(in2))), i2) - ( int(4.0) * min(( max(divInt(i1,( int(2.0) * max(( mod(min(in1, int(2.0)),int(6.0)) - max(( abs(in1) + i2 ), mod(in2,int(1.0))) ), divInt(min(abs(in0), int(4.0)),min(min(min(( min(divInt(( in1 - in1 ),mod(int(2.0),in2)), int(0.0)) + max(divInt(( int(4.0) * in0 ),int(8.0)), i1) ), i0), in1), int(0.0)))) )), ( abs(int(8.0)) + ( ( in0 - int(9.0) ) + int(0.0) ) )) * int(2.0) ), ( int(8.0) * in0 )) ) )), int(6.0))) - ( abs(divInt(int(0.0),int(0.0))) - ( i1 + max(i1, in2) ) ) ))) ) != min(( int(6.0) * int(0.0) ), int(7.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 7, 9, 84, 84, 11, 9, 6, 31, 11, 20, 3, 3, 78, 4, 311, 77, 76, 41, 37]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1], [9], [2], [], [], [1], [0], [], [], [0], [2, 0, 6], [0], [0, 3, 1, 0], [], [2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i2 == abs(int(9.0)):{:\\ni0 = res0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 3, 1, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 1], [], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 0, 1, 1, 6, 7, 6, 8, 7, 9, 3, 1, 4, 0, 1, 3, 4, 1, 5, 7, 7, 3, 8, 1, 3, 9, 8, 8, 1, 9, 2, 4, 3, 6, 6, 5], [1, 4], [0, 2], [], [1, 1], [0, 0], [], [], [], [4, 3, 3, 2, 4, 5, 4, 1, 0, 4, 1, 5, 1, 1, 4, 2, 0, 2, 4, 3, 3, 1, 0, 2, 5, 2, 4, 4, 4, 2, 3, 3, 1, 2, 4, 4, 4, 1, 4, 6], [1, 0], [1, 1, 0, 2, 3, 0, 3, 2, 1, 0, 2, 1, 3, 2, 1, 2, 0, 3, 0, 2, 3, 2, 2, 1, 3, 1, 0, 1, 1, 2, 2, 3, 2, 2, 0, 2, 3, 2, 1, 2, 0, 1, 2, 3, 3, 0, 3, 1, 1, 0, 3, 2, 0, 0, 1, 3, 0, 3, 1, 1, 0, 3, 2, 2, 0, 1, 2, 2, 1, 2, 0, 2, 1, 3, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 2, 0, 3, 1, 2, 3, 1, 2, 2, 3, 3, 0, 2, 2, 2, 2, 3, 2, 1, 2, 0, 0, 2, 0, 3, 0, 1, 3, 2, 2, 0, 0, 0, 1, 3, 1, 2, 0, 2, 1, 1, 2, 1, 3, 1, 2, 2, 0, 2, 0, 0, 3, 2, 3, 3, 0, 0, 2, 0, 1, 2, 1, 0, 3, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 2, 0, 2, 0, 1, 1, 1, 0, 2, 2, 1, 0, 0, 1, 1, 2, 0, 0, 0, 2, 0, 1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 0, 1, 2, 1, 1, 2, 1, 2, 0, 0, 1, 2, 0, 1, 0, 2, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(8.0) \\g int(0.0)\\nin1 -= in0\\nb2 = ( min(in0, min(divInt(int(1.0),i2), ( int(1.0) * abs(( int(6.0) - divInt(in1,min(in2, ( abs(( ( int(7.0) * min(int(6.0), in1) ) + int(8.0) )) - int(7.0) ))) )) ))) * ( ( max(divInt(( i1 - ( max(divInt(int(9.0),mod(i0,int(3.0))), divInt(max(min(in1, abs(int(1.0))), int(4.0)),i1)) - abs(( in2 * i1 )) ) ),int(0.0)), max(i1, min(int(1.0), int(3.0)))) - in1 ) * min(divInt(mod(i2,int(4.0)),( divInt(int(1.0),( i0 + ( int(5.0) + max(int(7.0), int(7.0)) ) )) - i2 )), mod(( int(3.0) * in1 ),divInt(in0,int(8.0)))) ) ) \\le mod(in0,max(int(1.0), ( abs(int(3.0)) + mod(divInt(min(min(i1, divInt(( mod(divInt(min(divInt(int(9.0),mod(i0,i2)), ( in2 - abs(i2) )),int(8.0)),min(( divInt(in1,in1) + in1 ), int(8.0))) * max(int(1.0), divInt(i2,mod(int(9.0),int(2.0)))) ),mod(int(4.0),abs(int(3.0))))), divInt(divInt(in0,( in0 - i1 )),max(divInt(abs(max(i2, in1)),( in1 + int(6.0) )), mod(int(6.0),in1)))),abs(i1)),int(5.0)) )))\\nin1 = res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 36, 36, 2, 2, 0, 2, 2, 0, 0, 0, 40, 2, 151, 48, 29, 22, 27]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 0, 2, 0, 1], [1, 0], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 9, 5, 7, 6, 2, 6], [4, 3], [1, 2], [], [1, 0, 1, 0, 0], [0, 0], [1, 2, 1], [0, 1], [1], [3, 5, 4, 2], [1], [3, 1, 1, 1, 0, 2, 0, 2, 3, 1, 1, 1, 2, 0, 1], [1, 1, 0], [1, 1], [2, 2], [0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(0.0), int(9.0)) \\le int(5.0):{:\\nin0 *= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nb1 = divInt(in1,divInt(max(int(7.0), int(6.0)),int(2.0))) \\ge ( i2 * int(6.0) )\\n:}else:{:\\nb2 = not False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 7, 7, 2, 2, 0, 5, 2, 3, 2, 1, 4, 1, 15, 3, 2, 2, 2]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1], [1, 7, 2, 4], [], [], [], [], [], [], [], [], [6, 4, 0], [1], [3, 2, 2, 0, 1, 3, 3, 1, 2, 3, 3, 1, 3, 0, 1], [0, 1, 1], [1, 2, 2, 0, 2, 2], [0, 2], [0, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += max(( divInt(in1,int(1.0)) * abs(abs(int(7.0))) ), mod(min(abs(int(2.0)), abs(i0)),int(4.0)))\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 15, 3, 6, 2, 2]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [0, 6], [], [], [], [], [], [], [], [], [2], [0], [2, 1, 3, 1], [1], [2], [], [1]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = mod(int(0.0),abs(int(6.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 1, 0, 1]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 6, 1, 9, 7, 4, 5, 4], [0, 5], [2, 2, 0], [0], [0, 0, 1, 1, 0, 0], [0, 0], [2, 3, 0, 1], [1], [], [2, 5, 3, 2, 4, 0, 4, 0, 1, 1], [], [3, 1, 0, 3, 0, 3, 2, 1, 0, 2, 3, 0, 1, 2, 3, 2, 1, 2, 1, 0, 2, 0, 2, 0, 1, 3, 2, 1, 0, 3, 1, 3, 0, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 2], [1, 0, 2], [1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not ( min(int(9.0), i2) \\l min(in2, min(mod(int(7.0),in0), ( max(i2, int(6.0)) - mod(min(divInt(int(1.0),( int(9.0) + in1 )), mod(i0,divInt(in1,int(7.0)))),max(( int(4.0) * i0 ), min(int(5.0), abs(i1)))) ))) and int(4.0) != i1 ):{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 9, 9, 2, 3, 1, 6, 2, 4, 1, 0, 10, 0, 35, 8, 8, 3, 5]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [2, 2, 1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 0], [1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 4, 0, 1, 9, 9, 6, 5, 0, 1, 4, 3, 1, 7, 2, 8, 9, 5, 3, 9, 7, 0, 5, 5, 5, 2, 9, 6, 7, 1, 5, 0, 5, 5, 9, 3, 4, 2, 8, 4, 0, 2, 7, 4, 9], [4, 1, 0, 3, 2, 5, 2, 2], [1, 1, 2, 2, 2, 0, 0], [], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 2, 2, 0], [0, 1], [], [5, 0, 4, 0, 1, 3, 2, 6, 5, 0, 0, 5, 5, 5, 1, 5, 6, 3, 0, 1, 2, 2, 6, 4, 0, 1, 4, 3, 6, 2, 0, 0, 6, 6, 2, 1, 2, 2, 1, 1], [1, 1], [1, 0, 0, 0, 1, 0, 0, 3, 1, 3, 1, 3, 3, 1, 2, 0, 1, 3, 0, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 1, 2, 2, 1, 2, 1, 3, 1, 3, 3, 0, 2, 1, 1, 0, 3, 3, 3, 3, 3, 2, 3, 1, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 3, 2, 0, 2, 1, 2, 3, 2, 3, 0, 1, 0, 0, 3, 1, 1, 3, 0, 0, 1, 2, 3, 2, 1, 2, 2, 3, 1, 3, 2, 0, 0, 2, 1, 3, 1, 2, 1, 0, 2, 3, 2, 2, 3, 0, 2, 3, 1, 3, 0, 3, 0, 2, 3, 1, 0, 2, 2, 2, 3, 1, 1, 0, 1, 2, 0, 1, 3, 1, 3, 3, 1, 2, 2, 3, 1, 2, 0, 0, 3, 2, 1, 0, 3, 1, 0, 1, 2, 1, 1, 0, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 1, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 1, 0, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 2, 0, 1, 2], [2, 0, 2, 0, 0, 1, 2, 2, 1, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2], [0, 1, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile False:{:\\nin2 *= int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i0 \\le in1\\nloopBreak% = 0\\nwhile i0 \\g int(6.0):{:\\nb1 = i1 \\l in0\\nb2 = not min(int(4.0), min(int(0.0), min(abs(int(1.0)), ( i2 + int(9.0) )))) \\ge max(res0, abs(abs(in2)))\\nb2 = max(min(min(int(9.0), min(i0, ( int(6.0) * ( ( int(5.0) + ( int(0.0) + max(int(1.0), abs(min(i0, ( int(4.0) - int(3.0) )))) ) ) * in2 ) ))), abs(max(abs(max(abs(divInt(max(int(1.0), int(7.0)),in2)), mod(in2,int(2.0)))), divInt(int(8.0),max(max(i1, min(mod(in2,( int(9.0) * ( min(( max(res0, int(5.0)) - in0 ), i0) * max(int(3.0), int(9.0)) ) )), min(i1, i2))), int(7.0)))))), ( abs(( int(0.0) - ( divInt(abs(int(5.0)),abs(( i2 + res0 ))) * ( int(5.0) * abs(int(5.0)) ) ) )) - ( int(2.0) + in1 ) )) == ( max(( ( max(i0, mod(max(int(9.0), min(i1, max(in1, ( min(int(6.0), in0) * ( ( ( max(int(7.0), int(1.0)) - res0 ) - int(5.0) ) + ( i2 * int(0.0) ) ) )))),min(int(5.0), max(abs(int(5.0)), ( ( min(int(9.0), ( i0 * i0 )) * max(( int(3.0) - res0 ), abs(int(4.0))) ) * res0 ))))) + int(2.0) ) + divInt(int(8.0),int(4.0)) ), i2) + int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not int(2.0) != i1:{:\\nloopBreak% = 0\\nwhile b2:{:\\ni2 *= mod(i2,i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(7.0) == int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(9.0) == i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 5, 8, 46, 46, 8, 7, 0, 13, 8, 5, 2, 0, 40, 2, 163, 35, 44, 29, 8]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [0, 0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 1, 4, 7, 4, 1, 3, 7, 7, 9, 6, 3, 3, 5, 2, 4, 2, 4, 5, 7, 6, 2, 3, 3, 3], [3], [0], [], [1, 0], [0], [0], [], [0, 0], [6, 1, 3, 1, 3, 2, 1, 3, 1, 1, 1, 5, 1, 6, 4, 5, 6, 2, 6, 6, 2, 0, 4, 2, 4, 2, 0, 3, 5], [1], [1, 0, 3, 3, 3, 3, 2, 0, 1, 3, 3, 2, 3, 3, 0, 2, 3, 0, 0, 0, 1, 1, 2, 1, 1, 0, 3, 2, 3, 0, 3, 2, 3, 2, 3, 3, 0, 3, 1, 2, 1, 3, 1, 2, 3, 3, 3, 3, 1, 0, 1, 2, 1, 2, 1, 3, 2, 0, 3, 3, 0, 3, 0, 1, 1, 1, 2, 0, 3, 0, 1, 2, 2, 2, 3, 0, 2, 2, 0, 0, 2, 3, 3, 1, 3, 3, 1, 1, 0, 0, 3, 0, 3, 3, 1, 3, 2, 3, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 2, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 1, 2, 2, 0, 0, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 1], [2, 2, 2, 0, 0, 2, 1, 2, 2, 1, 2, 1, 2], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) \\ge res0:{:\\nif b0:{:\\ni1 *= max(min(abs(max(mod(in0,int(0.0)), min(min(divInt(min(min(i1, mod(max(in0, i2),i1)), int(1.0)),int(4.0)), ( int(7.0) * int(4.0) )), in0))), max(divInt(max(i1, max(( min(( max(abs(i1), min(int(1.0), ( int(3.0) * abs(int(7.0)) ))) + ( abs(abs(max(max(int(7.0), i1), int(9.0)))) + divInt(int(6.0),( int(3.0) * abs(divInt(in2,abs(min(i1, min(res0, int(3.0)))))) )) ) ), int(5.0)) - int(2.0) ), mod(in1,abs(in2)))),int(4.0)), divInt(divInt(mod(abs(res0),divInt(( i2 * res0 ),( min(abs(int(2.0)), min(max(int(4.0), int(5.0)), res0)) * i2 ))),min(i0, min(abs(int(7.0)), abs(divInt(max(( in1 - divInt(i2,in1) ), ( i2 * i0 )),( in0 - mod(( int(6.0) * int(2.0) ),mod(int(3.0),in2)) )))))),int(3.0)))), int(3.0))\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 26, 26, 1, 1, 0, 2, 1, 1, 0, 2, 29, 1, 117, 27, 36, 13, 15]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1, 1, 1, 1], [0, 2, 7, 2], [5], [1], [], [1], [0], [], [], [], [3, 1, 1, 1, 6], [0], [0, 3, 3, 3, 0, 3, 3, 0, 1, 3, 3, 1, 1, 3, 0, 1], [], [2, 0, 0, 1, 0, 2, 2, 0], [], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = i1\\nb1 = abs(min(min(i1, max(min(i1, int(0.0)), abs(abs(int(2.0))))), int(7.0))) != min(res0, int(2.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 5, 1, 16, 0, 8, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [1, 5], [0], [2], [], [1], [0], [], [], [], [6, 6], [], [0, 3, 1, 2, 0, 1], [0], [1], [2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = res0 \\l max(int(1.0), ( res0 * int(5.0) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 6, 1, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [3], [0], [], [1], [0], [], [], [], [4, 4, 1, 6], [], [2, 0, 2, 0, 3, 0, 0], [0, 0], [2], [2, 1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( in1 * ( in1 - abs(i1) ) ) \\ge res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 7, 2, 1, 2, 0]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 0, 2, 2, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 4, 7, 1, 7, 0, 5, 8, 6, 9, 5, 3, 2, 1, 5, 3, 2, 0, 2, 2, 3, 1, 4, 2, 4, 3, 1, 3, 8], [2, 2, 5, 1, 3], [0, 0, 0, 0], [1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 0, 1, 1, 3, 2], [1, 0, 0], [1, 1, 1, 0, 0], [4, 5, 0, 0, 3, 3, 5, 0, 1, 3, 2, 4, 0, 6, 6, 2, 1, 2, 4, 2], [0], [0, 1, 0, 2, 1, 3, 1, 1, 2, 3, 2, 3, 1, 0, 1, 3, 1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0, 1, 2, 3, 3, 1, 3, 1, 1, 0, 1, 3, 3, 2, 1, 1, 2, 3, 2, 2, 1, 0, 3, 2, 2, 1, 0, 3, 3, 0, 0, 3, 0, 2, 2, 2, 1, 1, 0, 1, 0, 3, 0, 2, 3, 1, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 0, 2, 1, 3, 1, 1, 1, 1, 2, 1, 3, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2, 2, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 1, 0, 2, 1, 2, 1, 1, 2, 0], [0, 0, 1, 0, 2, 2, 1, 1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nif in1 == int(9.0):{:\\nif in2 == ( int(6.0) + abs(int(4.0)) ):{:\\nb0 = b0\\n:}else:{:\\nb0 = int(7.0) != ( abs(mod(max(int(1.0), i0),int(7.0))) + max(int(0.0), abs(( i0 - ( min(abs(int(5.0)), divInt(int(8.0),in0)) + int(6.0) ) ))) )\\n:}\\n:}else:{:\\nif True:{:\\nif True:{:\\nb0 = ( mod(max(min(int(9.0), max(int(5.0), int(3.0))), in0),int(2.0)) \\g max(max(( int(1.0) * int(5.0) ), ( abs(( mod(int(3.0),in2) * max(( divInt(int(2.0),i0) - max(min(i1, in0), abs(i2)) ), divInt(mod(mod(int(0.0),int(2.0)),in1),int(2.0))) )) - i0 )), max(res0, ( abs(int(3.0)) - int(1.0) ))) or not max(res0, ( ( max(int(4.0), ( i2 + ( i1 - divInt(int(2.0),abs(int(4.0))) ) )) - int(3.0) ) + int(1.0) )) \\ge int(3.0) )\\n:}\\n:}\\n:}\\n:}else:{:\\ni2 = mod(int(8.0),min(in1, i2))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 30, 30, 5, 4, 1, 11, 5, 6, 3, 5, 20, 1, 95, 23, 23, 13, 10]}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 1, 0, 2, 1], [1], [0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 0, 2, 1, 4, 9, 5, 2, 2, 7, 2, 0, 5, 5, 7, 8, 1, 3, 3, 6], [4, 4, 2, 2], [1, 1, 0, 2], [1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0], [2, 3, 1, 3, 2, 0], [0], [], [6, 4, 4, 4, 0, 0, 5, 2, 1, 5, 2, 3, 3, 1, 6, 5, 3, 5], [1], [2, 1, 3, 1, 1, 3, 3, 1, 3, 1, 0, 2, 3, 1, 2, 0, 2, 3, 0, 3, 2, 0, 2, 3, 1, 2, 3, 3, 1, 1, 1, 3, 3, 3, 2, 0, 2, 3, 3, 0, 1, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 0, 0, 0, 2, 3, 0, 2, 1, 0, 3, 2, 1, 3, 0, 1, 2, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 2, 1, 1], [2, 2, 2, 2, 1, 2, 0, 0, 2], [0, 1, 0, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not ( divInt(int(5.0),max(int(4.0), int(0.0))) \\le min(abs(int(2.0)), abs(int(1.0))) or True )\\nb1 = ( res0 \\le ( abs(int(4.0)) * mod(in1,divInt(min(in1, min(mod(in1,( abs(int(9.0)) * divInt(min(abs(int(5.0)), int(2.0)),int(2.0)) )), abs(max(min(( i0 * ( abs(abs(i0)) * int(7.0) ) ), min(int(2.0), in2)), ( i2 - abs(max(i1, abs(abs(int(0.0))))) ))))),max(in2, divInt(mod(( int(5.0) * int(5.0) ),i2),in0)))) ) or in0 == ( abs(i1) + divInt(int(7.0),res0) ) )\\nin2 += max(( int(8.0) * max(in0, int(1.0)) ), mod(int(3.0),in2))\\nloopBreak% = 0\\nwhile not b0:{:\\nb2 = int(3.0) == int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 21, 21, 4, 4, 2, 10, 4, 6, 1, 0, 18, 1, 79, 17, 24, 9, 9]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [1, 0, 1], [], [], [], [2, 0], [], [0], [], [0], [], [], [2, 6, 6, 5], [1, 1], [0, 0], [], [], [2, 2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= res0\\nb2 = b0\\nres0 *= in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 4, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [1, 1], [1, 1, 1], [1, 6, 2], [3], [], [], [1], [0], [], [], [], [1, 3, 1, 4, 5], [0, 1], [1, 0, 3, 1, 2, 3, 0, 1, 0], [0], [2, 0], [2, 1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(1.0)\\nloopBreak% = 0\\nwhile in0 \\ge abs(int(6.0)):{:\\ni1 *= ( min(in1, int(2.0)) - in2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 1, 0, 0, 1, 1, 0, 0, 0, 5, 2, 9, 1, 2, 2, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 1], [], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 3, 7, 3, 1, 6, 1, 2, 9, 5, 6, 0, 5, 9, 8, 1, 9, 0, 5, 7, 7, 3, 2], [3, 2, 1], [0, 0], [1], [0, 1, 0, 1, 1], [0, 0, 0], [2, 3], [], [], [6, 2, 1, 1, 4, 6, 0, 3, 3, 0, 1, 1, 2, 6, 6, 2, 0, 0], [0, 0], [3, 2, 2, 1, 1, 1, 3, 2, 2, 0, 2, 1, 0, 3, 1, 2, 3, 1, 0, 0, 2, 2, 0, 3, 3, 1, 0, 1, 1, 2, 0, 3, 3, 3, 3, 1, 3, 1, 0, 1, 0, 1, 0, 1, 3, 0, 1, 3, 2, 2, 0, 2, 3, 2, 3, 3, 1, 1, 3, 1, 2, 1, 3, 2, 3, 1, 0, 1, 2, 2, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 1, 1, 0, 2, 1, 0, 0, 2, 0], [2, 1, 1, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not min(( ( int(1.0) * int(7.0) ) - int(3.0) ), max(( mod(res0,divInt(int(7.0),i2)) - min(int(3.0), ( abs(int(1.0)) - i1 )) ), i1)) \\ge ( mod(in1,min(abs(int(6.0)), res0)) - int(1.0) )\\ni0 = int(2.0)\\nin0 = ( in0 - min(max(min(max(int(9.0), max(int(5.0), i0)), int(6.0)), i1), int(0.0)) )\\nb0 = ( i1 == int(5.0) or max(i2, int(9.0)) \\g min(mod(mod(res0,divInt(abs(mod(max(min(int(8.0), int(1.0)), min(int(9.0), ( int(0.0) + abs(mod(min(int(5.0), res0),int(7.0))) ))),( mod(i2,i0) + int(7.0) ))),int(3.0))),int(2.0)), i0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 24, 24, 3, 2, 1, 5, 3, 2, 0, 0, 18, 2, 76, 17, 19, 8, 9]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [2, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 7, 3, 6, 7, 7, 2, 0, 6, 1, 0, 1, 5, 9, 9, 2, 3, 2, 7, 0, 1, 6, 8, 9, 2, 0, 9, 0, 7, 0, 2, 8, 5, 2, 3, 6, 8, 8, 7, 6, 9, 9, 4, 6, 0, 0, 8, 1, 0, 6, 7, 8, 6, 5, 5, 0, 2, 2, 2, 9, 2, 9, 3, 9, 6, 4, 7, 2, 4], [5, 0, 1, 0, 1, 3, 1, 4, 5, 4], [1, 1, 1, 1, 0, 2, 0, 1, 2, 0, 1, 1], [0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 1, 3, 0, 0, 2, 1, 0, 1, 1, 3, 0, 0, 2, 2], [1, 0, 1, 1], [1, 1, 1, 1], [3, 4, 3, 4, 0, 4, 5, 1, 3, 4, 6, 6, 4, 0, 0, 0, 5, 3, 1, 1, 4, 5, 6, 0, 2, 5, 0, 3, 4, 5, 6, 5, 1, 4, 5, 0, 1, 5, 5, 6, 0, 0, 5, 6, 2, 3, 3, 4, 4, 2, 2, 1, 5, 0, 2, 3, 4, 2, 4, 0, 5, 6, 1, 5, 0, 6, 5, 0, 5, 5, 5, 6, 1, 1, 0, 2, 3, 5], [0, 0, 0, 0, 1], [2, 3, 1, 3, 3, 2, 2, 1, 0, 0, 0, 1, 3, 2, 1, 3, 0, 2, 1, 1, 0, 1, 1, 1, 3, 0, 0, 0, 2, 1, 1, 0, 1, 3, 1, 1, 2, 2, 3, 2, 0, 1, 2, 3, 1, 2, 3, 3, 3, 3, 1, 2, 0, 3, 2, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 1, 0, 3, 0, 0, 2, 2, 1, 2, 2, 2, 3, 2, 0, 3, 2, 0, 3, 0, 3, 3, 0, 0, 1, 2, 1, 1, 3, 0, 3, 1, 1, 1, 1, 2, 1, 1, 0, 1, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 2, 1, 3, 2, 1, 3, 1, 2, 2, 2, 1, 3, 1, 2, 1, 2, 0, 3, 1, 2, 0, 0, 0, 1, 2, 2, 0, 0, 3, 0, 3, 2, 2, 3, 3, 1, 0, 1, 3, 0, 0, 3, 3, 0, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 1, 1, 3, 0, 1, 2, 2, 2, 2, 2, 3, 0, 2, 0, 0, 3, 3, 3, 3, 1, 0, 1, 1, 3, 1, 1, 3, 0, 2, 3, 2, 3, 0, 0, 2, 1, 0, 0, 2, 2, 0, 0, 3, 0, 3, 3, 0, 2, 0, 1, 0, 0, 1, 2, 1, 3, 3, 2, 3, 0, 0, 1, 2, 0, 3, 2, 1, 2, 1, 0, 1, 1, 2, 3, 3, 3, 2, 0, 2, 1, 3, 2, 1, 0, 3, 2, 0, 1, 0, 1, 1, 2, 1, 1, 2, 2, 0, 3, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 1, 2, 1, 0, 0, 1, 0, 0, 2, 2, 1, 0, 1, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0], [1, 1, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 1, 1, 1, 2, 2, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not ( False and ( max(int(1.0), max(abs(( ( int(8.0) - in0 ) - in1 )), in0)) - int(7.0) ) != max(mod(int(3.0),min(in1, mod(int(6.0),int(7.0)))), i0) ):{:\\nin1 = int(7.0)\\nloopBreak% = 0\\nwhile int(2.0) \\l int(0.0):{:\\nb1 = max(in2, i1) \\g in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( int(6.0) + int(1.0) ) \\l in1:{:\\nloopBreak% = 0\\nwhile ( int(0.0) \\g min(int(1.0), int(5.0)) and ( divInt(min(( res0 * int(9.0) ), divInt(max(int(9.0), divInt(max(max(min(min(int(2.0), ( res0 - max(( int(3.0) * in1 ), i0) )), i0), int(2.0)), int(7.0)),int(0.0))),int(1.0))),( i0 + int(6.0) )) + int(8.0) ) \\ge int(9.0) ):{:\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\nif not True:{:\\nb0 = b2\\n:}else:{:\\nin2 = in0\\n:}\\n:}else:{:\\ni1 = max(i1, in1)\\n:}\\n:}else:{:\\nb0 = False\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nin2 = ( mod(int(2.0),mod(( divInt(abs(( res0 * max(mod(i0,min(i2, max(min(in2, i0), int(0.0)))), mod(int(9.0),int(0.0))) )),max(in0, abs(int(7.0)))) + int(0.0) ),int(2.0))) * int(8.0) )\\nin1 += ( int(5.0) + int(2.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( in2 \\g int(3.0) and mod(divInt(divInt(( mod(min(res0, in2),i1) + in1 ),divInt(int(6.0),min(divInt(int(8.0),max(int(8.0), ( ( divInt(int(7.0),min(int(6.0), divInt(int(9.0),( in2 * min(int(9.0), divInt(i0,i1)) )))) + in2 ) - int(4.0) ))), ( mod(in2,res0) - min(i0, abs(( ( min(max(int(6.0), i0), int(0.0)) * min(in2, res0) ) - min(max(i2, ( in0 - divInt(( in0 + in1 ),in1) )), ( ( ( int(0.0) + int(8.0) ) * abs(i2) ) + int(1.0) )) ))) )))),( divInt(mod(divInt(mod(max(i2, mod(i1,in2)),min(min(max(min(int(0.0), i0), int(6.0)), int(7.0)), min(int(8.0), int(6.0)))),abs(i2)),divInt(abs(mod(max(in0, in1),divInt(int(5.0),i2))),in1)),divInt(( i0 - in2 ),min(res0, max(min(i1, ( in2 - int(5.0) )), i0)))) - res0 )),int(0.0)) \\le ( int(2.0) * min(min(divInt(abs(in2),i0), int(2.0)), ( in2 * abs(mod(int(2.0),divInt(int(9.0),in2))) )) ) ):{:\\nb1 = int(2.0) != int(9.0)\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = not not divInt(max(max(abs(( in2 - ( int(3.0) + min(( int(9.0) + res0 ), max(divInt(i1,int(6.0)), i1)) ) )), int(4.0)), int(7.0)),( int(2.0) + int(4.0) )) \\le divInt(mod(i0,min(i2, in0)),in2)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 21, 21, 9, 12, 70, 70, 10, 12, 3, 27, 10, 17, 4, 4, 78, 5, 271, 71, 57, 35, 37]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 2, 1, 2, 0, 0, 0, 2, 0], [0, 0, 1], [1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 1, 8, 1, 7, 1, 5, 5, 5, 2, 1, 9, 3, 7, 1, 9, 3, 5, 3, 3, 4, 6, 3, 3, 5, 6, 0], [2, 1, 5, 4, 3, 0, 4, 4], [0, 2, 0, 2, 0, 0], [0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 1], [0], [1, 0], [2, 0, 2, 2, 1, 1, 3, 1, 3, 6, 3, 4, 2, 6, 0, 1, 5, 6, 6, 6, 3, 2, 1, 2, 2, 1, 0, 5, 1, 5, 5, 4, 5], [1, 0], [0, 2, 3, 1, 1, 1, 0, 2, 2, 1, 3, 1, 1, 0, 3, 3, 0, 0, 3, 3, 2, 0, 3, 1, 2, 3, 0, 2, 2, 2, 3, 3, 2, 1, 0, 1, 3, 1, 0, 0, 1, 1, 1, 0, 0, 2, 2, 0, 3, 3, 2, 0, 3, 3, 0, 1, 0, 1, 1, 2, 2, 1, 0, 2, 1, 1, 1, 2, 2, 1, 0, 0, 3, 2, 1, 1, 0, 2, 0, 2, 0, 2, 3, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 0, 3, 1, 3, 0, 2, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 2, 0, 0, 1, 1, 0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 1, 1], [0, 2, 1, 0, 0, 1, 2, 1, 2, 0, 0, 2], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += i0\\nb0 = ( divInt(min(int(6.0), int(4.0)),int(1.0)) == i2 and divInt(( int(8.0) * min(int(1.0), int(7.0)) ),i2) \\g max(abs(i1), i1) )\\nif min(min(divInt(in0,max(int(1.0), ( max(i1, ( divInt(( min(abs(( int(5.0) - in0 )), int(5.0)) + min(int(5.0), res0) ),in0) + int(2.0) )) - int(1.0) ))), int(9.0)), in1) != i2:{:\\nb2 = ( mod(( res0 * min(max(( i0 - abs(min(i1, int(3.0))) ), in2), int(7.0)) ),int(1.0)) \\le divInt(divInt(int(9.0),res0),( int(3.0) * int(5.0) )) and int(3.0) \\ge ( divInt(int(3.0),res0) + res0 ) )\\nif min(( int(4.0) + int(6.0) ), in0) \\l divInt(i2,divInt(i1,( max(int(3.0), i2) * mod(i2,int(3.0)) ))):{:\\ni1 = i0\\n:}\\n:}else:{:\\nb0 = b2\\n:}\\nb0 = in2 \\le min(i1, in2)\\nloopBreak% = 0\\nwhile True:{:\\nb0 = in2 \\le max(int(5.0), max(in1, mod(mod(int(6.0),in2),int(0.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 28, 28, 8, 6, 2, 12, 8, 4, 1, 2, 33, 2, 103, 24, 20, 12, 13]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 0, 1, 1], [0], [1, 1, 0, 0], [1, 1], [3, 7], [5, 4], [1, 2], [], [0, 1, 0, 1, 0, 0], [0, 0], [2, 2, 2, 1], [1], [1], [2, 5, 3, 3, 4, 4, 3], [0, 1], [3, 2, 0, 0, 1, 0, 1, 0, 0], [0], [2], [2, 1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(( in2 * in0 ))\\nif not int(3.0) != in0:{:\\nin1 -= int(7.0)\\n:}else:{:\\nb1 = not in1 \\le in0\\n:}\\nb2 = not False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 2, 2, 2, 2, 0, 6, 2, 4, 1, 1, 7, 2, 9, 1, 1, 2, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 0, 2, 1, 2, 1], [1, 0, 1], [1, 1, 0], [1, 1], [6, 2], [1], [2, 1, 1], [], [0, 0, 1, 0], [0], [0, 1, 0], [0], [1], [0, 6, 4, 3], [1, 0], [3, 0, 0, 1, 1], [], [2], [0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\ni0 += abs(res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nin1 = in0\\n:}else:{:\\nloopBreak% = 0\\nwhile int(6.0) \\g int(2.0):{:\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 2, 2, 1, 3, 0, 4, 1, 3, 1, 1, 4, 2, 5, 0, 1, 1, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 1, 2, 0, 2, 1], [1, 0, 0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 9, 1, 8, 9, 1, 6, 3, 8, 2, 0], [4, 2, 1], [1, 2, 1], [], [0, 1, 1, 1, 0], [0, 0, 0], [1, 0], [1], [1, 0], [6, 6, 5, 2, 3, 6, 5, 0, 3, 4, 2, 5, 1, 6, 6, 4, 6, 4], [1], [1, 0, 2, 2, 3, 0, 3, 0, 1, 0, 3, 2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 0, 2, 0, 0, 3, 1, 1, 1, 0, 1, 0, 2, 1, 2, 2, 3, 0, 2, 0, 2, 0, 1, 2, 1, 1, 3, 2, 1, 0, 3, 0, 3, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [2, 1, 2, 0, 2, 1, 1, 2, 1, 2, 0, 1], [2, 2, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb1 = int(3.0) \\le res0\\nif mod(divInt(abs(res0),max(in2, int(6.0))),i2) == abs(( min(mod(abs(max(mod(in0,res0), ( ( max(in2, ( i0 * in0 )) * abs(int(9.0)) ) - int(1.0) ))),int(8.0)), in1) + int(9.0) )):{:\\nb2 = i2 \\g divInt(int(1.0),( divInt(max(in2, ( i1 - ( res0 + int(6.0) ) )),( int(3.0) + int(8.0) )) - abs(( int(2.0) + res0 )) ))\\n:}else:{:\\nif b1:{:\\nin1 -= min(res0, max(in1, int(0.0)))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 12, 12, 3, 3, 0, 5, 3, 2, 1, 2, 18, 1, 56, 15, 12, 10, 6]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1, 1, 1, 1], [1, 0, 0, 1], [5, 5], [2], [], [1, 1], [0, 0], [], [], [0], [4], [], [1, 1, 3, 0, 1, 1], [], [1], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) != int(0.0):{:\\nb2 = max(in1, int(0.0)) != int(1.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 4, 4, 2, 1, 0, 2, 2, 0, 0, 1, 1, 0, 6, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [1], [0, 1], [1, 1, 1, 1, 1, 1], [6, 4, 4, 7, 2, 8], [1], [2, 0], [], [0, 0, 0, 1], [0], [2, 0, 2], [], [], [3, 5, 3, 3, 2, 0, 1, 6, 5, 6, 0], [0], [1, 3, 3, 3, 3, 1, 0, 2, 2, 3, 3, 2, 0, 0, 1, 3, 2, 3, 1, 0, 0, 3, 0, 0, 2, 0, 2, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 2, 2, 2], [0, 2, 2], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not b0\\nloopBreak% = 0\\nwhile not int(6.0) \\g min(min(max(max(int(4.0), in0), ( divInt(min(min(divInt(in2,in0), int(4.0)), abs(( abs(int(7.0)) + in0 ))),i2) * abs(i0) )), i1), mod(res0,( int(2.0) * divInt(in2,res0) ))):{:\\ni0 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 1, 2, 0, 4, 1, 3, 0, 0, 11, 1, 32, 7, 9, 3, 4]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 1], [1, 1], [9, 7], [], [0], [], [0], [], [1], [1], [], [5, 5, 3, 2, 2, 4, 1, 5], [1, 1], [2, 3, 2, 0, 3, 3, 2, 3, 0, 0, 0, 1, 3, 1, 0, 0], [1, 0, 1], [2, 2, 1, 1, 1], [2, 2, 2], [0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= divInt(abs(( in2 * abs(max(divInt(max(in0, i2),i2), int(9.0))) )),max(int(7.0), in1))\\nb0 = False\\ni1 *= in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 0, 1, 0, 1, 0, 1, 1, 0, 8, 2, 16, 3, 5, 3, 2]}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 1, 0, 2, 2, 2, 1, 2, 0, 2, 2, 0, 1, 1, 2, 1], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 6, 6, 5, 3, 7, 8, 8, 7, 9, 9, 4, 5, 7, 6, 6, 7, 7, 0, 8, 0, 7, 3, 9, 6, 0, 2, 8, 5, 2, 0, 0, 4, 9, 1, 3, 4, 0, 5, 4, 0, 8, 2, 8, 9, 6, 3, 6, 9, 6, 2, 4, 6, 9, 7, 5, 6, 4, 2, 6, 9, 6, 6, 4, 0, 8, 8, 9, 3, 5, 8, 9, 0, 2, 4, 3], [4, 4, 3, 4, 5, 3, 4, 3, 1, 0], [2, 0, 2, 1, 0, 2, 1, 0, 0], [0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 1, 3, 2, 0, 2, 0], [1], [0, 1, 1, 0], [2, 6, 0, 0, 6, 5, 4, 6, 3, 0, 6, 0, 1, 2, 3, 6, 6, 5, 1, 0, 4, 3, 6, 4, 1, 0, 5, 2, 0, 0, 0, 0, 5, 6, 0, 1, 6, 5, 0, 3, 0, 0, 1, 6, 5, 1, 0, 6, 2, 0, 1, 4, 5, 6, 2, 2, 6, 2, 6, 4, 5, 4, 4, 6, 5, 3, 5, 0, 1, 1, 6, 5, 3, 6, 1, 5, 1], [1, 1, 0, 0], [0, 3, 0, 3, 2, 1, 2, 1, 3, 2, 3, 0, 0, 1, 2, 3, 1, 3, 0, 0, 3, 0, 1, 2, 3, 3, 1, 1, 2, 1, 1, 3, 2, 0, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 3, 3, 3, 3, 1, 1, 2, 2, 0, 3, 2, 2, 2, 0, 1, 0, 2, 0, 3, 1, 0, 3, 0, 2, 3, 3, 1, 3, 3, 0, 1, 0, 1, 3, 2, 0, 3, 3, 2, 2, 1, 3, 0, 2, 2, 2, 3, 2, 2, 3, 0, 3, 3, 3, 3, 0, 0, 1, 3, 3, 1, 3, 0, 0, 2, 0, 1, 1, 2, 3, 3, 1, 3, 2, 1, 0, 3, 3, 0, 0, 1, 1, 2, 0, 3, 3, 0, 3, 2, 3, 3, 1, 0, 0, 2, 1, 2, 1, 1, 3, 0, 0, 0, 0, 3, 2, 2, 2, 1, 1, 1, 1, 0, 0, 2, 3, 1, 2, 2, 3, 0, 1, 1, 3, 1, 1, 1, 2, 2, 1, 0, 2, 1, 3, 0, 3, 0, 3, 2, 3, 3, 2, 1, 2, 2, 1, 3, 1, 0, 2, 2, 3, 1, 3, 2, 2, 3, 2, 0, 3, 1, 3, 3, 2, 0, 1, 3, 2, 1, 1, 1, 3, 1, 2, 1, 0, 0, 1, 2, 1, 2, 2, 0, 2, 1, 1, 1, 2, 1, 2, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 3, 0, 0, 2, 1, 3, 1, 2, 0, 0, 2, 1, 2, 0, 0, 0, 3, 3, 3, 1, 0, 3, 1, 1, 3, 2, 1, 2, 0, 0, 3, 2, 0, 1, 0, 2, 1, 3, 0, 0, 0, 3, 3, 1, 2, 1, 2, 1, 3, 0, 1, 2, 0, 3, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [2, 0, 2, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 1, 0, 1, 1, 1, 2, 1, 1, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 1, 1, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2], [1, 0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 1, 0, 2, 0, 0, 0, 1, 1, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 1, 2, 2, 0, 1, 0, 2, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nb0 = i2 \\le abs(res0)\\nb2 = b1\\ni0 -= min(( int(0.0) + ( int(0.0) + abs(( abs(i0) + res0 )) ) ), int(6.0))\\n:}\\nloopBreak% = 0\\nwhile mod(abs(int(6.0)),abs(in2)) \\le in1:{:\\nif min(res0, int(5.0)) \\ge ( min(max(int(3.0), int(7.0)), ( int(8.0) + int(8.0) )) + min(( in0 * min(i0, int(7.0)) ), int(9.0)) ):{:\\nloopBreak% = 0\\nwhile divInt(res0,int(9.0)) \\le mod(int(4.0),min(min(min(abs(max(int(5.0), int(7.0))), divInt(divInt(i0,abs(( ( divInt(i1,int(6.0)) + i2 ) - divInt(in0,min(int(6.0), res0)) ))),min(res0, divInt(max(min(int(7.0), abs(min(in2, int(7.0)))), i1),int(0.0))))), abs(mod(i0,min(min(( ( int(8.0) * min(in1, ( mod(divInt(abs(( mod(max(in0, max(min(abs(max(res0, in1)), int(0.0)), min(max(int(7.0), max(i1, i0)), ( in2 + int(3.0) )))),int(9.0)) - divInt(max(abs(int(6.0)), max(divInt(int(0.0),i2), max(max(i0, i0), int(2.0)))),int(8.0)) )),( i0 + min(max(i0, abs(mod(min(abs(int(5.0)), in2),res0))), divInt(int(2.0),( int(0.0) * int(0.0) ))) )),min(i0, i1)) + res0 )) ) + in2 ), max(( ( ( int(4.0) + int(9.0) ) - int(1.0) ) - int(3.0) ), i0)), in0)))), mod(abs(int(4.0)),( ( max(i0, int(0.0)) + int(5.0) ) - max(int(4.0), int(0.0)) )))):{:\\ni0 *= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile mod(( int(2.0) * i1 ),divInt(int(8.0),abs(res0))) != min(in2, max(( abs(min(divInt(int(9.0),divInt(( int(6.0) * min(int(3.0), i1) ),mod(divInt(max(int(6.0), max(divInt(( max(( i0 * abs(int(9.0)) ), max(abs(divInt(res0,int(6.0))), min(divInt(int(2.0),int(4.0)), int(6.0)))) * min(int(9.0), ( int(7.0) - i2 )) ),i0), int(5.0))),( int(6.0) * ( ( i1 * divInt(int(4.0),int(2.0)) ) * int(6.0) ) )),( int(9.0) - ( in1 * ( in2 + int(6.0) ) ) )))), divInt(int(6.0),min(res0, i2)))) - ( max(i2, res0) * ( int(4.0) * abs(int(0.0)) ) ) ), divInt(i2,res0))):{:\\nin1 = divInt(int(8.0),( in2 + in1 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif in1 \\ge min(min(abs(int(8.0)), res0), min(int(9.0), int(3.0))):{:\\nloopBreak% = 0\\nwhile min(( int(5.0) - mod(in2,in0) ), abs(( in2 + int(8.0) ))) \\le i0:{:\\nb0 = ( int(9.0) * abs(i1) ) \\ge i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = in2\\n:}\\nb2 = ( False and ( not b1 or max(abs(int(0.0)), divInt(int(2.0),( int(4.0) + max(in0, int(3.0)) ))) \\g divInt(res0,abs(i1)) ) )\\nif not in2 \\l i1:{:\\nb0 = b0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 8, 9, 77, 77, 10, 9, 2, 19, 10, 9, 1, 4, 77, 4, 301, 72, 79, 41, 33]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [1, 0, 0], [1], [0], [], [1], [0], [], [], [], [5], [], [3, 1, 1, 2, 1, 0], [1], [0], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(1.0), int(0.0)) \\g mod(int(0.0),in2)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 6, 1, 1, 0, 1]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0], [0], [1, 0, 0], [1], [6], [2], [0, 2, 0], [0], [0, 0, 1, 0, 0, 0], [0], [2, 3, 0, 1, 1], [1, 1], [0], [2, 4, 6], [1], [1, 0, 0], [], [], [0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( int(6.0) == i2 and b0 ):{:\\nin1 += res0\\nb2 = False\\n:}\\nb0 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 1, 3, 1, 6, 1, 5, 2, 1, 3, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [7, 9], [], [], [], [], [], [], [], [], [0], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(79.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [4, 0, 3], [2], [0], [], [0, 1], [0], [2], [], [], [1, 5, 4], [], [0, 2, 1, 2, 3, 3, 1, 0, 0, 3, 1], [1, 0], [1, 0, 2], [0], [0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not i1 == divInt(int(4.0),( max(min(int(0.0), in2), in1) + abs(int(3.0)) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 2, 1, 1, 0, 0, 3, 0, 11, 2, 3, 1, 1]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 7, 2, 6, 6, 9, 3, 5, 6, 6], [3, 0, 0], [1, 1], [1], [0, 0, 1, 1, 0, 1], [0, 0, 0], [3, 0, 2], [], [0], [3, 3, 4, 4], [], [3, 3, 2, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 1, 2, 3, 1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 1], [0, 0, 0, 0, 2, 1], [2, 1], [0, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( b1 or min(min(( int(8.0) * min(in0, in0) ), divInt(int(7.0),min(( in1 - int(7.0) ), abs(int(2.0))))), divInt(max(int(6.0), int(6.0)),int(9.0))) \\ge int(3.0) ):{:\\nif int(5.0) \\l in1:{:\\nb1 = not int(6.0) \\l int(6.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 11, 11, 3, 2, 1, 6, 3, 3, 0, 1, 4, 0, 25, 4, 6, 2, 2]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 2, 2, 1, 2, 1], [0, 1, 1], [1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 1, 9, 6, 3, 3, 2, 5, 9, 8, 2, 9, 8, 3, 3, 7, 2, 3, 3, 7, 0, 0, 6, 5, 5, 6, 4, 1, 0], [5, 0, 0, 4], [0, 1, 2, 2], [1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0], [2, 3, 0, 2, 1, 3, 0], [1], [0], [5, 6, 2, 5, 2, 1, 5, 6, 4, 6, 3, 1, 2, 3, 1, 1, 4, 2, 3, 0, 0, 5, 2, 3, 6, 4, 2, 1, 3, 2, 2], [1, 0, 1, 0], [1, 3, 1, 1, 3, 3, 2, 3, 3, 1, 3, 3, 0, 2, 3, 0, 3, 0, 1, 3, 0, 1, 2, 1, 2, 1, 0, 2, 2, 1, 3, 0, 2, 3, 0, 3, 2, 3, 3, 3, 0, 3, 3, 2, 2, 0, 2, 0, 3, 2, 3, 3, 2, 1, 3, 1, 3, 2, 2, 1, 0, 1, 3, 0, 1, 3, 3, 1, 0, 1, 1, 1, 2, 3, 3, 1, 1, 0, 1, 0, 0, 3, 1, 3, 0, 2, 1, 0, 3, 1, 0, 2, 3, 3, 0, 3, 0, 3, 1, 1, 1, 3, 1, 1, 0, 0, 0, 3, 0, 0, 3, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 2, 1, 1, 2, 0, 1, 2, 2, 2, 1, 0, 1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 2], [0, 0, 2, 1, 1, 0, 0, 2, 0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += int(6.0)\\nres0 = max(int(6.0), int(1.0))\\ni2 += max(min(mod(abs(min(int(9.0), min(min(in2, ( max(i2, min(i1, int(6.0))) * min(in2, int(3.0)) )), divInt(int(3.0),( int(2.0) - res0 ))))),mod(( int(5.0) - min(in1, ( max(res0, min(divInt(min(abs(min(in0, abs(max(mod(mod(i1,mod(i2,max(( abs(min(divInt(int(9.0),max(int(8.0), abs(mod(divInt(int(2.0),in0),int(9.0))))), abs(i1))) + int(8.0) ), abs(max(int(3.0), i1))))),int(3.0)), int(7.0))))), int(2.0)),mod(min(max(int(3.0), int(3.0)), in1),int(7.0))), i2)) + in0 )) ),abs(int(0.0)))), max(i0, ( int(0.0) * i0 ))), max(int(6.0), in2))\\nb0 = not ( b1 or ( min(max(i2, abs(in0)), min(int(5.0), int(5.0))) + int(6.0) ) != max(int(4.0), int(1.0)) )\\nif not res0 \\l in1:{:\\nloopBreak% = 0\\nwhile False:{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( abs(in0) \\l i2 or abs(i2) \\le int(0.0) ):{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 9, 9, 3, 6, 30, 30, 4, 4, 2, 11, 4, 7, 1, 1, 31, 4, 113, 18, 38, 9, 11]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 0], [1, 1, 1, 1], [3, 5, 7, 8], [3], [0, 2], [], [0, 1], [0], [0], [], [], [4, 5, 1, 1], [1], [3, 1, 2, 1, 0, 2, 1, 3, 1, 2, 0, 0], [1, 1, 1], [0, 2], [2], [1, 0, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nin1 *= min(int(3.0), mod(int(5.0),in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = divInt(int(7.0),abs(int(8.0))) \\ge mod(i1,i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 1, 2, 0, 2, 1, 1, 0, 0, 4, 1, 12, 3, 2, 1, 3]}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [1, 0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 1, 7, 6, 5, 0, 7, 3, 4, 1], [2], [2], [], [0, 1], [0], [0], [], [0], [4, 0, 4, 0, 5, 0, 6, 5, 0, 1, 6, 0, 2, 5, 1, 3, 2, 5, 3, 2], [0], [1, 3, 0, 2, 2, 2, 2, 2, 2, 3, 0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 0, 1, 1, 3, 0, 0, 2, 3, 1, 3, 2, 3, 2, 0, 0, 1, 3, 2, 1, 2, 1, 1, 1, 2, 0, 3, 0, 0, 0, 0, 2, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 2, 0, 1, 1, 0, 2, 2, 0, 0, 1], [1, 0, 1, 2, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1], [0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nif int(6.0) == abs(in1):{:\\ni0 = ( divInt(( ( ( ( abs(in1) - i0 ) + ( in2 - i0 ) ) * divInt(( ( res0 * divInt(in2,min(int(9.0), mod(int(1.0),max(divInt(max(i0, int(7.0)),int(6.0)), min(i1, res0))))) ) - ( abs(int(5.0)) + abs(divInt(min(( i0 - i2 ), int(0.0)),min(( int(7.0) * ( int(3.0) - int(4.0) ) ), int(1.0)))) ) ),( in2 + max(i1, in0) )) ) - i2 ),in2) * ( in0 - i2 ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 11, 11, 1, 1, 0, 2, 1, 1, 0, 1, 20, 1, 61, 20, 11, 14, 6]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 0], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1], [8, 5, 8, 1, 9, 1], [0], [2], [], [1], [0], [], [], [], [4, 5, 1, 3, 2, 6], [], [1, 2, 0, 3, 3, 0, 1, 3, 3, 0, 0, 2, 0, 3, 2, 3, 3, 1, 1, 3, 1, 0, 1], [1, 0, 0], [0, 0, 1, 0, 0, 0, 2, 1], [1, 0], [0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(8.0) \\l divInt(in1,min(min(in2, int(5.0)), max(min(i1, in0), ( i2 - min(( min(abs(int(8.0)), int(1.0)) + max(int(9.0), res0) ), int(1.0)) ))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 6, 0, 23, 3, 8, 2, 1]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1], [2, 1, 2, 0, 1, 2, 1], [1, 1, 1], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 8, 4, 3, 8, 2, 8], [5, 4, 1], [1, 1, 0, 0], [], [1, 1, 0, 1, 0], [0, 0, 0], [0, 0], [], [], [0, 0, 3, 2, 0, 3, 6, 2, 3, 2, 5, 6], [0, 0], [1, 2, 1, 1, 2, 0, 0, 0, 1, 3, 3, 2, 0, 0, 3, 3, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 3, 1, 1], [0, 0, 0, 1, 1, 1], [1, 1, 2, 1, 1], [1, 1, 1], [1, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(1.0) != ( int(3.0) - int(8.0) ):{:\\ni0 = ( i0 - in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i2 \\le int(4.0):{:\\nb1 = b1\\ni0 = max(max(( in0 - res0 ), abs(max(mod(mod(divInt(int(3.0),i2),in0),int(8.0)), i2))), in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile res0 \\g max(int(2.0), int(8.0)):{:\\nb0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 8, 8, 3, 4, 0, 5, 3, 2, 0, 0, 12, 2, 29, 6, 5, 3, 3]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 1, 1, 1, 1, 2, 1, 0], [0, 1, 1], [0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 0, 0, 3, 9, 5, 2, 8, 6, 1, 4, 0, 0, 0, 4, 2, 9, 8, 6, 6, 9, 0, 1, 3, 9, 9, 0, 8, 4, 1, 5], [3, 3, 5, 5, 5, 5, 1, 5, 1], [2, 1, 0, 0, 2, 1, 2], [0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 1, 2, 3, 2, 3, 2, 3, 2, 0], [0], [1], [1, 6, 5, 4, 0, 2, 4, 4, 6, 0, 4, 4, 2, 1, 0, 2, 2, 3, 5, 0, 2, 1, 1, 6, 2, 4, 6, 6, 2, 6, 4, 6, 5], [1], [3, 0, 0, 1, 2, 0, 1, 0, 0, 2, 2, 3, 3, 2, 3, 3, 2, 1, 1, 2, 0, 1, 1, 2, 2, 2, 2, 3, 1, 2, 2, 2, 2, 0, 1, 2, 0, 2, 3, 0, 2, 2, 0, 3, 2, 1, 3, 3, 1, 1, 2, 0, 2, 0, 3, 0, 1, 0, 3, 1, 0, 2, 3, 1, 0, 0, 3, 0, 1, 0, 2, 2, 3, 0, 1, 1, 1, 2, 1, 1, 2, 1, 3, 2, 0, 0, 1, 0, 0, 1, 3, 2, 2, 2, 0, 3, 1, 1, 2, 0, 1, 1, 1, 1, 0, 1, 1, 1, 3, 0, 1, 3, 0, 2, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0], [2, 1, 0, 2, 1, 0, 0, 2, 2, 1, 0, 2, 1, 1, 0, 0, 1, 2, 0, 0], [0, 0, 0, 1, 1, 2, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(i1) \\ge res0:{:\\nloopBreak% = 0\\nwhile int(1.0) \\ge divInt(in2,int(1.0)):{:\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( in1 != i0 and True )\\nb0 = not ( mod(max(min(divInt(abs(max(( int(2.0) + int(0.0) ), ( i2 + int(0.0) ))),int(3.0)), mod(divInt(( ( min(int(9.0), ( mod(mod(( in1 + int(5.0) ),( in1 - divInt(min(res0, divInt(( i0 - abs(( int(2.0) * abs(max(int(8.0), int(6.0))) )) ),mod(in1,divInt(in1,min(i2, int(1.0)))))),i1) )),abs(int(4.0))) * i0 )) + mod(max(int(0.0), i2),i2) ) * max(in0, int(0.0)) ),in2),( ( min(i0, int(0.0)) * int(4.0) ) + int(2.0) ))), ( int(9.0) - int(8.0) )),( int(6.0) - min(divInt(i2,i1), int(6.0)) )) - i1 ) != res0\\n:}else:{:\\ni2 += int(9.0)\\nloopBreak% = 0\\nwhile ( not ( not ( max(( mod(divInt(in1,abs(int(0.0))),int(1.0)) * divInt(res0,int(3.0)) ), int(9.0)) != int(9.0) and not int(0.0) != res0 ) and int(8.0) \\g int(4.0) ) and int(1.0) != min(i2, int(5.0)) ):{:\\nb2 = min(res0, ( in1 - res0 )) \\g in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 33, 33, 9, 7, 4, 20, 9, 11, 1, 1, 33, 1, 117, 32, 20, 17, 16]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1], [2, 0, 2, 0, 1, 1, 2, 0, 1], [1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 6, 0, 1, 2, 2, 4, 0, 4, 9, 1, 4, 3, 1, 7, 8, 9, 8, 8, 3, 4, 6, 4, 4, 2, 5, 0, 6, 7, 2, 2, 5, 1, 9, 9, 0, 1, 9, 2, 7, 7, 1, 6, 0, 1, 8, 0, 3, 5, 5, 0, 9, 8, 7, 4, 4, 8], [3, 3, 1, 4, 1, 0], [0, 2, 2], [1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0], [3, 2, 2, 0, 3, 3, 0, 3, 2, 3, 2, 1], [1], [1], [2, 0, 3, 6, 4, 5, 0, 5, 2, 1, 3, 3, 1, 6, 5, 4, 0, 4, 0, 5, 6, 3, 6, 6, 2, 6, 3, 2, 3, 3, 3, 3, 4, 3, 2, 6, 6, 5, 3, 1, 5, 5, 1, 5, 0, 5, 3, 0, 5, 3, 5, 4, 2, 3, 5, 0, 5, 4, 4, 0, 6, 5, 0, 6, 1], [1, 0, 1, 0, 1], [0, 0, 1, 3, 1, 2, 3, 1, 3, 2, 2, 2, 3, 2, 1, 1, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2, 0, 3, 3, 3, 2, 0, 0, 1, 3, 2, 1, 2, 0, 2, 2, 3, 2, 0, 0, 3, 0, 2, 1, 1, 0, 1, 1, 3, 1, 3, 2, 0, 3, 2, 2, 0, 1, 2, 1, 1, 1, 2, 0, 0, 3, 0, 3, 1, 2, 1, 0, 3, 2, 1, 1, 0, 1, 2, 0, 3, 1, 2, 2, 3, 0, 2, 0, 0, 2, 3, 0, 2, 2, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 1, 2, 3, 1, 3, 2, 3, 2, 3, 1, 2, 0, 0, 3, 0, 3, 0, 0, 1, 2, 0, 2, 3, 0, 1, 0, 0, 2, 3, 2, 2, 0, 2, 3, 2, 3, 2, 3, 1, 1, 0, 1, 0, 0, 2, 2, 0, 1, 3, 1, 0, 1, 3, 2, 2, 0, 2, 2, 0, 3, 3, 1, 2, 3, 3, 1, 0, 0, 3, 2, 0, 3, 1, 3, 0, 0, 3, 0, 2, 0, 1, 2, 3, 1, 0, 1, 1, 3, 0, 0, 2, 3, 2, 1, 1, 2, 2, 0, 1, 3, 1, 3, 3, 2, 2, 2, 3, 3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 0, 3, 0, 0, 1, 2, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 2, 2, 1, 0, 1, 0, 1, 1, 2, 2, 0, 1, 0, 2, 0, 2, 1, 1, 2, 0, 1, 2, 1, 1, 0, 1, 1, 2, 2, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0, 2, 1, 0, 0, 2, 1, 2, 1, 2, 2, 0, 2, 1], [2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 0, 2, 0, 1, 2, 1, 0, 1, 0, 0, 2, 2, 2, 2], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i2 \\ge i0:{:\\nin0 *= int(2.0)\\nif ( abs(int(8.0)) \\ge divInt(abs(int(6.0)),abs(mod(( mod(max(divInt(int(0.0),int(1.0)), int(2.0)),int(2.0)) - mod(( ( min(max(int(4.0), int(0.0)), ( res0 - min(max(max(divInt(in1,in2), int(4.0)), abs(( int(9.0) * divInt(i0,( ( abs(mod(in2,i2)) * min(i1, mod(int(1.0),int(4.0))) ) - in0 )) ))), int(3.0)) )) - int(1.0) ) * max(int(7.0), min(( in0 * abs(( ( i1 - int(8.0) ) * ( int(9.0) - int(8.0) ) )) ), int(8.0))) ),( res0 - in2 )) ),min(in1, abs(int(3.0)))))) or not divInt(int(4.0),i0) \\g max(( int(6.0) * int(4.0) ), in1) ):{:\\ni0 = int(4.0)\\n:}else:{:\\nb0 = not b2\\n:}\\nin2 *= ( res0 * max(int(2.0), mod(( abs(in0) - ( res0 * res0 ) ),divInt(min(i2, mod(( divInt(divInt(int(5.0),int(0.0)),mod(res0,divInt(int(6.0),int(7.0)))) + int(2.0) ),in0)),int(2.0)))) )\\nloopBreak% = 0\\nwhile ( i2 \\le int(5.0) or ( b2 or ( not ( not ( max(int(1.0), abs(divInt(max(divInt(max(int(9.0), divInt(in0,in0)),min(in0, max(in0, in1))), int(9.0)),divInt(in0,( max(i2, int(0.0)) - res0 ))))) - res0 ) \\g ( abs(mod(( in2 + mod(abs(( min(( max(int(1.0), int(9.0)) * in0 ), int(2.0)) + i1 )),in2) ),( divInt(in2,int(7.0)) - min(int(7.0), i1) ))) * int(1.0) ) and max(mod(mod(in2,( divInt(i0,min(min(int(6.0), ( max(abs(int(0.0)), in2) - in0 )), min(mod(i0,max(int(1.0), min(in2, in0))), abs(in2)))) + ( in1 - int(8.0) ) )),mod(max(int(0.0), i2),int(3.0))), int(5.0)) \\l min(in0, in2) ) and False ) ) ):{:\\ni0 = divInt(min(mod(int(5.0),int(0.0)), ( divInt(in2,int(9.0)) + abs(int(8.0)) )),max(abs(( ( ( max(abs(in1), abs(int(7.0))) + int(4.0) ) * int(4.0) ) * min(abs(in1), ( i0 * max(res0, in2) )) )), int(8.0)))\\ni0 *= divInt(res0,i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 58, 58, 6, 3, 5, 18, 6, 12, 1, 1, 65, 5, 237, 65, 54, 35, 33]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 3], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 0, 0, 2, 0, 2, 1], [1, 0, 1], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 3, 4, 3, 0, 4, 9, 0, 1, 2, 9, 9, 7, 3, 7, 0, 9, 8, 6, 6, 0, 9, 1, 1, 1, 3, 8, 1, 8, 1, 0, 8, 1, 0, 8, 4, 5, 1, 1, 5, 7, 7, 9, 3, 6, 0, 9, 6, 6, 4, 3, 5, 7, 1, 7, 0, 4, 1, 8], [4, 5, 5], [0, 2, 1], [0], [0, 0, 1, 1, 0, 1, 0], [0, 0, 0], [3, 1, 0, 1], [0, 1], [0], [4, 4, 5, 1, 6, 1, 1, 5, 2, 5, 0, 3, 2, 1, 2, 2, 1, 5, 0, 2, 5, 3, 3, 0, 1, 6, 3, 4, 1, 1, 5, 5, 5, 5, 5, 6, 6, 5, 3, 2, 1, 0, 5, 1, 1, 4, 2, 4, 4, 1, 1, 2, 1, 6, 3, 6, 5, 6], [1, 1], [2, 2, 2, 0, 0, 2, 2, 3, 3, 2, 1, 0, 0, 0, 3, 3, 2, 3, 3, 1, 3, 1, 3, 2, 2, 3, 0, 1, 2, 2, 3, 1, 3, 0, 1, 1, 3, 1, 1, 1, 2, 1, 1, 3, 2, 0, 0, 1, 2, 1, 1, 2, 3, 3, 1, 2, 2, 2, 2, 3, 0, 1, 0, 0, 2, 0, 2, 2, 0, 3, 2, 3, 2, 0, 3, 2, 2, 1, 3, 3, 3, 1, 1, 3, 0, 2, 3, 1, 0, 0, 2, 2, 1, 1, 1, 0, 3, 0, 1, 0, 3, 2, 1, 0, 1, 3, 0, 0, 1, 3, 1, 2, 3, 0, 3, 2, 0, 3, 0, 2, 0, 2, 2, 3, 1, 0, 3, 3, 0, 3, 3, 0, 0, 1, 3, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 0, 0, 2, 0, 1, 0, 0, 2, 2, 0, 1, 3, 2, 3, 3, 2, 2, 3, 1, 1, 1, 1, 2, 2, 3, 1, 3, 1, 3, 1, 2, 1, 1, 2, 3, 2, 1, 2, 3, 0, 0, 0, 1, 2, 3, 1, 2, 2, 2, 2, 3, 0, 3, 0, 3, 3, 0, 1, 3, 1, 0, 1, 0, 3, 0, 2, 3, 1, 3, 3, 2, 2, 0, 2, 1, 3, 0, 1, 2, 2, 1, 1, 2, 1, 1, 0, 3, 2, 3, 1, 2, 0, 2, 1, 2, 3, 3, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 2, 0, 0, 2, 0, 1, 0, 1, 2, 2, 2, 0, 2, 1, 0, 0, 2, 0, 1, 0, 1, 2, 2, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1, 2, 0, 1, 2, 0, 2, 0, 2, 2, 0, 2, 1, 2, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2, 1, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2, 2, 1, 0, 1, 0, 1, 1, 2, 0, 2, 1, 1, 2], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( True and mod(mod(divInt(in1,in1),mod(( max(min(( int(1.0) + in2 ), i1), res0) + min(max(( abs(min(int(7.0), min(int(3.0), abs(( mod(min(i1, int(4.0)),mod(( max(int(3.0), min(i1, int(0.0))) - int(4.0) ),max(int(9.0), int(0.0)))) + int(1.0) ))))) + mod(int(2.0),int(9.0)) ), abs(divInt(in2,i2))), int(9.0)) ),( int(7.0) + int(3.0) ))),divInt(abs(abs(int(7.0))),( ( ( divInt(min(in2, int(0.0)),i0) + in0 ) + ( i2 + ( mod(i1,abs(mod(max(( i2 * min(mod(( int(9.0) + min(abs(min(int(8.0), int(6.0))), max(i2, mod(min(int(6.0), i1),in2))) ),divInt(mod(int(0.0),int(9.0)),int(1.0))), i0) ), max(i2, int(1.0))),in2))) + abs(mod(int(1.0),in0)) ) ) ) - int(3.0) ))) \\le abs(in0) ):{:\\ni0 -= i1\\nres0 -= int(8.0)\\nif abs(int(1.0)) != mod(max(in0, min(divInt(in1,abs(i1)), mod(i1,mod(( max(int(8.0), in2) + max(min(in2, min(min(in2, in2), int(1.0))), max(( ( int(0.0) * ( int(8.0) - abs(in2) ) ) - divInt(res0,min(res0, in2)) ), ( in0 * int(1.0) ))) ),i2)))),i1):{:\\nb0 = b2\\n:}\\nloopBreak% = 0\\nwhile ( ( i0 - int(0.0) ) + max(mod(abs(min(( mod(abs(int(8.0)),int(4.0)) * int(5.0) ), int(1.0))),divInt(( min(int(1.0), abs(int(5.0))) * abs(int(7.0)) ),( int(7.0) - int(9.0) ))), divInt(min(divInt(int(3.0),( abs(in2) + i1 )), i1),int(6.0))) ) != ( max(int(0.0), ( divInt(( divInt(abs(in1),max(i2, max(max(in1, int(9.0)), min(int(6.0), in1)))) - int(6.0) ),i1) + abs(i1) )) - ( min(int(4.0), max(max(( ( i2 - ( int(3.0) * abs(i1) ) ) + int(5.0) ), ( divInt(int(7.0),int(1.0)) * ( int(7.0) - int(0.0) ) )), res0)) - abs(mod(max(int(4.0), ( in0 * divInt(int(1.0),divInt(max(abs(int(8.0)), res0),in2)) )),res0)) ) ):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 986, "mapping_values": [1, 7, 7, 3, 4, 60, 60, 3, 3, 1, 7, 3, 4, 2, 1, 58, 2, 246, 67, 63, 36, 33]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 2, 1, 1, 0, 1, 2, 1, 2, 1, 2, 1], [1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 8, 3, 3, 1, 4, 0, 4, 6, 0, 4, 2, 9, 8, 7, 9, 9, 3, 7, 3, 7, 5, 3, 3, 5, 7], [3, 4, 4, 3, 2, 4, 1, 2, 3, 3], [2, 2, 0, 0, 0, 2], [1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 2, 3, 2, 3], [0, 1], [0, 1, 0], [6, 5, 1, 6, 5, 6, 6, 0, 0, 4, 3, 6, 3, 5, 3, 4, 3, 4, 0, 4, 6, 3, 6, 4, 1], [1, 1], [1, 1, 1, 3, 0, 2, 3, 3, 2, 0, 1, 1, 3, 1, 2, 3, 1, 0, 2, 1, 1, 0, 2, 2, 0, 3, 1, 1, 3, 2, 3, 3, 0, 0, 1, 2, 2, 0, 3, 1, 0, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 2, 3, 0, 1, 0, 1, 0, 3, 2, 0, 3, 3, 1, 2, 3, 1, 0, 2, 0, 1, 0, 0, 3, 1, 2, 0, 0, 0, 3, 0, 2, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 2, 0, 2, 0, 1, 0, 2, 1, 2, 0, 0, 1, 0], [2, 2, 0, 0, 1, 2, 2, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nloopBreak% = 0\\nwhile False:{:\\nb2 = int(3.0) \\ge int(1.0)\\nb0 = int(3.0) \\le max(res0, mod(max(max(( in2 * int(8.0) ), int(3.0)), min(int(3.0), divInt(abs(int(1.0)),i1))),( int(4.0) * int(0.0) )))\\nres0 += in2\\nb0 = ( mod(res0,min(int(4.0), int(6.0))) + abs(divInt(min(max(res0, i0), int(0.0)),( ( i0 - min(int(4.0), in1) ) * int(2.0) ))) ) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(8.0) \\ge int(7.0):{:\\nb0 = not ( ( in0 * int(9.0) ) == int(9.0) or int(3.0) \\le int(7.0) )\\nif divInt(abs(res0),int(3.0)) \\g in0:{:\\nin2 -= int(7.0)\\n:}else:{:\\nif in0 == max(( in1 - abs(min(int(5.0), ( min(int(3.0), in0) - ( in1 + int(3.0) ) ))) ), i0):{:\\nb2 = not ( in1 \\ge max(int(5.0), mod(res0,in0)) or res0 \\ge min(in1, ( i1 + int(7.0) )) )\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 28, 28, 10, 6, 2, 16, 10, 6, 2, 3, 25, 2, 84, 16, 17, 12, 6]}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 1], [1, 0], [1, 1], [1], [0], [2], [0], [], [0, 1], [0], [0], [], [0], [4, 4, 3, 5, 6, 5], [0, 1], [0, 3, 0, 1, 0, 0], [], [0], [2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(in0, int(0.0)) == in2:{:\\nres0 *= in2\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1, 6, 2, 6, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 0, 5, 0, 3, 0, 0, 1, 6, 9, 8, 3, 8, 8, 2, 6, 0, 2, 2, 4, 6, 8, 5, 9, 8, 3, 4, 3, 2, 0, 7, 7, 0, 4, 0, 2, 6, 7, 7, 2, 3, 1], [4, 0, 1, 4, 5, 4, 3, 5, 3, 2, 4], [0, 2, 1], [0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 1, 3, 3, 3], [0, 0], [1, 1, 0, 0, 1], [0, 5, 3, 3, 2, 5, 0, 4, 2, 4, 0, 2, 1, 0, 0, 0, 6, 3, 2, 2, 4, 5, 6, 1, 1, 6, 5, 5, 2, 0, 4, 6, 5, 1, 5, 2, 4, 1, 1, 0, 5, 3, 6, 5, 4, 6, 1, 3, 2, 0, 4, 1, 0, 5, 3, 4, 1, 5, 4, 2], [0, 0, 1], [3, 3, 3, 3, 0, 2, 3, 1, 3, 1, 1, 0, 3, 2, 1, 0, 0, 1, 3, 1, 0, 0, 3, 2, 2, 1, 1, 2, 2, 0, 0, 2, 1, 3, 3, 0, 3, 0, 0, 0, 1, 2, 0, 2, 3, 0, 2, 1, 3, 3, 1, 2, 0, 2, 0, 3, 3, 3, 3, 0, 2, 3, 3, 3, 1, 3, 3, 3, 0, 0, 1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 1, 1, 3, 3, 2, 0, 0, 0, 1, 0, 2, 0, 2, 3, 0, 3, 0, 1, 3, 2, 3, 2, 2, 3, 2, 0, 0, 2, 0, 0, 2, 0, 1, 2, 2, 0, 3, 1, 0, 3, 2, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 0, 1, 0, 2, 2, 3, 3, 2, 3, 2, 2, 0, 2, 1, 3, 0, 0, 3, 2, 0, 2, 3, 0, 1, 0, 1, 1, 3, 0, 3, 2, 1, 1, 1, 3, 3, 1, 2, 2, 1, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [2, 2, 2, 2, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 1, 1, 0, 2, 1, 1, 0, 1, 0, 0, 1, 2, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 2, 0, 2, 1], [0, 2, 0, 0, 2, 1, 1, 2, 2, 1, 1, 0, 0, 2, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( abs(abs(abs(abs(i0)))) \\le ( min(int(6.0), min(int(0.0), int(5.0))) + in2 ) and True ) or abs(divInt(int(0.0),in0)) \\l in0 ):{:\\nif int(3.0) \\g abs(int(0.0)):{:\\nb0 = i2 \\le in2\\n:}else:{:\\nif True:{:\\nb2 = max(divInt(divInt(int(0.0),int(1.0)),( divInt(i0,in1) * ( int(6.0) + abs(min(i2, min(in1, i0))) ) )), i2) != int(9.0)\\n:}\\n:}\\n:}else:{:\\ni1 = divInt(i0,mod(min(i0, divInt(int(8.0),min(abs(int(3.0)), ( i0 + ( res0 * max(abs(max(max(in0, mod(min(min(min(int(8.0), max(max(min(i2, i2), int(8.0)), in1)), mod(int(2.0),in2)), res0),int(6.0))), i1)), int(0.0)) ) )))),i1))\\nif int(2.0) \\le int(2.0):{:\\nif abs(max(divInt(res0,in2), in2)) \\ge int(4.0):{:\\ni2 = i0\\n:}else:{:\\nb1 = ( ( mod(in1,mod(max(res0, min(in2, int(6.0))),max(divInt(min(( ( min(divInt(i1,in2), divInt(i2,in1)) - divInt(i1,int(8.0)) ) - divInt(( i1 * max(int(5.0), i0) ),abs(( in2 * int(9.0) ))) ), in0),res0), min(in2, in1)))) != min(res0, i1) and ( in0 \\ge i2 and int(8.0) == int(3.0) ) ) or divInt(min(max(max(i0, int(4.0)), in1), ( divInt(abs(max(mod(max(( ( i1 - divInt(int(3.0),max(i0, in2)) ) - max(( in0 + mod(abs(in1),int(2.0)) ), i1) ), int(0.0)),int(7.0)), abs(in2))),min(( int(7.0) + int(0.0) ), int(4.0))) * abs(max(int(0.0), ( mod(int(2.0),int(6.0)) + int(7.0) ))) )),int(7.0)) \\le in1 )\\n:}\\n:}\\n:}\\ni2 -= int(231.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 42, 42, 11, 3, 5, 18, 11, 7, 2, 5, 60, 3, 184, 38, 49, 16, 23]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1], [2, 4], [], [], [], [], [], [], [], [], [3, 4, 3, 6, 2, 6, 3, 6], [0, 0], [0, 3, 3, 2, 3, 0, 2, 3, 1, 3, 2, 0, 0, 0, 0, 1], [0, 1, 0], [0, 2, 2, 0, 1], [0, 1], [0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = in1\\nin0 = min(abs(( abs(res0) + divInt(min(int(2.0), max(( i2 - res0 ), in0)),res0) )), int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 16, 3, 5, 2, 1]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1, 1, 1, 1, 1], [0, 1, 4, 6, 8], [1, 4], [0], [], [1, 1], [0, 0], [], [], [0], [1, 3], [], [1, 3, 1, 1, 2, 3, 0, 1, 3, 1, 0], [1], [0, 0, 2], [], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(0.0) \\g min(int(1.0), int(4.0)):{:\\nb0 = divInt(min(i1, int(6.0)),abs(int(8.0))) \\le in0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 5, 5, 2, 1, 0, 2, 2, 0, 0, 1, 2, 0, 11, 1, 3, 0, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1], [1, 2, 0, 0, 0, 2, 1, 0], [0, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 1, 7, 4, 2, 1, 4, 9, 5, 0, 6, 8, 0, 8, 9, 8, 3, 7, 0, 7, 3, 4, 4, 4, 3, 7, 2, 5, 8, 8, 9, 7, 9, 9, 5, 3, 3, 5, 1, 0, 4, 6, 6, 0, 6, 4, 5, 3, 5, 4, 0], [4, 2, 4, 4, 3, 3], [0, 1, 0, 2], [0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 1, 3, 1, 2], [0, 0], [1], [5, 0, 4, 6, 2, 1, 0, 2, 3, 0, 4, 5, 5, 0, 0, 6, 6, 5, 2, 6, 4, 3, 5, 1, 4, 3, 0, 5, 4, 5, 5, 2, 5, 4, 2, 4, 5, 4, 1, 2, 2, 3, 1, 0, 4, 4, 3, 3, 3, 3, 1, 5, 6, 4, 4, 1, 3, 4], [0, 0], [1, 3, 3, 0, 0, 1, 1, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 3, 3, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 2, 1, 1, 1, 2, 2, 3, 2, 0, 3, 1, 1, 2, 0, 3, 3, 1, 0, 1, 2, 3, 2, 0, 0, 3, 0, 2, 3, 1, 0, 3, 3, 0, 1, 3, 0, 3, 0, 3, 0, 2, 0, 2, 1, 2, 1, 1, 3, 0, 3, 2, 2, 0, 0, 0, 2, 2, 3, 2, 1, 1, 2, 1, 1, 0, 2, 1, 3, 1, 3, 3, 2, 0, 1, 3, 0, 3, 0, 2, 0, 0, 0, 2, 1, 3, 2, 1, 2, 0, 3, 2, 3, 2, 1, 2, 3, 1, 2, 2, 2, 3, 0, 1, 2, 1, 2, 1, 3, 2, 1, 2, 3, 0, 1, 2, 2, 0, 3, 2, 0, 2, 1, 2, 1, 3, 1, 0, 3, 1, 2, 0, 1, 1, 3, 3, 2, 2, 1, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 3, 0, 2, 2, 1, 2, 2, 1, 2, 3, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 2, 0, 2, 2, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2], [0, 1, 2, 0, 2, 1, 1, 2, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 2, 2, 0, 1, 0, 0, 2, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(2.0)\\nif max(min(i0, in1), int(1.0)) \\le int(1.0):{:\\nb0 = res0 == i2\\n:}else:{:\\nb1 = ( True and ( True and i1 \\le int(7.0) ) )\\n:}\\nb0 = int(4.0) \\le ( divInt(i0,i2) + in0 )\\nloopBreak% = 0\\nwhile not i0 \\ge in1:{:\\nin2 = abs(min(in2, mod(int(2.0),( ( abs(mod(i0,abs(max(mod(max(max(int(1.0), ( abs(( int(4.0) - abs(( int(9.0) * int(5.0) )) )) + int(0.0) )), ( divInt(abs(( i0 * max(int(6.0), int(8.0)) )),( res0 - min(max(int(0.0), res0), int(8.0)) )) - divInt(min(( in2 * i2 ), min(res0, divInt(max(int(9.0), in1),max(min(in0, int(8.0)), max(in2, max(i1, max(in1, mod(in0,mod(int(3.0),( int(7.0) - int(0.0) )))))))))),min(i0, max(( ( in2 + in1 ) - in2 ), divInt(( max(( int(7.0) - int(3.0) ), divInt(int(4.0),int(4.0))) - in2 ),divInt(int(4.0),min(int(3.0), min(max(mod(i2,int(7.0)), min(in2, max(in1, ( i2 + in1 )))), in2))))))) )),( int(2.0) - min(( int(5.0) - divInt(in1,abs(divInt(min(divInt(int(8.0),divInt(abs(int(8.0)),( ( mod(min(i1, int(9.0)),divInt(int(7.0),( int(9.0) + min(( int(9.0) + ( min(i2, int(5.0)) - ( mod(i2,min(( in0 + ( int(3.0) + mod(int(3.0),min(int(5.0), i1)) ) ), min(int(1.0), ( i0 - int(0.0) )))) * int(4.0) ) ) ), max(min(mod(mod(int(6.0),in1),int(6.0)), int(0.0)), int(6.0))) ))) * in1 ) + in0 ))), divInt(in0,in0)),in0))) ), abs(i1)) )), ( ( int(4.0) - mod(mod(int(5.0),mod(abs(in2),res0)),in1) ) + int(3.0) ))))) + divInt(in1,( i1 * int(5.0) )) ) + int(4.0) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = divInt(in0,in1) \\ge int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 52, 52, 6, 4, 2, 11, 6, 5, 2, 1, 58, 2, 212, 59, 45, 30, 29]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1], [2, 1, 2, 1, 1, 2, 0], [0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 4, 1, 7, 5, 5, 7, 3, 5, 5, 3, 8, 3, 1, 0], [5, 1, 0, 1], [1, 1, 0], [], [0, 1, 1, 1, 0, 1], [0, 0, 0, 0], [0, 2], [], [1, 0], [4, 4, 2, 0, 5, 0, 3, 1, 6, 1, 6, 1, 1], [0, 1], [2, 0, 1, 2, 3, 1, 0, 1, 1, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 3, 1, 0, 0, 1, 2, 1, 1, 0, 2, 2, 3, 3, 0, 3, 1, 2, 1, 2, 1, 3, 0, 1, 3, 3, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 2, 0, 2, 2, 2, 0, 1, 1], [0, 2, 0, 0, 1, 1, 1, 0], [1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nb1 = ( in1 + int(5.0) ) != mod(min(int(9.0), in1),int(4.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile int(1.0) \\g ( i2 * ( ( abs(i0) + in2 ) + divInt(mod(int(7.0),i0),min(int(5.0), in0)) ) ):{:\\ni1 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = int(5.0) \\l ( int(7.0) - int(3.0) )\\nif not i1 \\g mod(divInt(abs(abs(res0)),abs(int(5.0))),( int(5.0) - ( int(3.0) - min(i1, int(8.0)) ) )):{:\\ni1 += max(max(int(3.0), int(1.0)), int(0.0))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 16, 16, 4, 3, 0, 6, 4, 2, 0, 2, 13, 2, 48, 12, 9, 8, 5]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [0, 2, 1, 0, 0, 0], [0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 7, 1, 1, 5, 6, 9, 5, 4, 5, 8, 9, 1, 2, 7, 5, 4, 4], [2, 2, 0, 2], [2, 1, 0, 0], [], [0, 1, 1, 1, 1], [0, 0, 0, 0], [1], [0], [1], [2, 0, 0, 5, 2, 1, 2, 3, 4, 2, 6, 0, 1, 0, 4, 2, 4, 0, 6, 2, 2, 6], [1], [1, 3, 2, 2, 3, 1, 3, 1, 3, 1, 3, 0, 1, 2, 2, 1, 0, 3, 2, 0, 1, 2, 1, 3, 1, 3, 0, 3, 0, 3, 1, 0, 0, 0, 1, 0, 3, 3, 3, 3, 2, 1, 0, 2, 2, 3, 0, 2, 2, 3, 0, 3, 0, 0, 2, 0, 3, 0, 1, 3, 2, 3, 0, 2, 1, 0, 1, 2, 2, 0, 0, 3, 1, 1, 3, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 2, 2, 0, 0, 2, 0, 1, 2, 1, 0, 2, 2, 1, 2, 0, 1, 0, 0, 0, 0], [1, 2, 1, 2, 0, 2, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= int(9.0)\\nif True:{:\\nb2 = max(( divInt(min(int(1.0), abs(int(7.0))),abs(int(1.0))) * min(i0, int(1.0)) ), ( ( int(5.0) - i0 ) * min(( in2 + int(6.0) ), ( int(9.0) * abs(int(5.0)) )) )) == min(i2, max(i1, abs(int(4.0))))\\nb1 = i2 == in0\\n:}else:{:\\nb0 = in1 \\l int(5.0)\\n:}\\nb0 = i2 == max(min(abs(abs(divInt(int(8.0),res0))), ( ( max(i0, ( ( abs(i1) - min(i0, in1) ) + ( i2 - max(in1, int(9.0)) ) )) - min(mod(min(i0, ( int(1.0) - res0 )),int(2.0)), ( mod(i2,i2) + min(int(7.0), int(5.0)) )) ) - min(res0, int(4.0)) )), int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 19, 19, 4, 4, 0, 5, 4, 1, 1, 1, 22, 1, 78, 16, 22, 13, 4]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 3, 1, 9, 5, 0, 9, 2, 4, 2, 1], [], [], [], [], [], [], [], [], [0, 2, 2, 4, 0, 1, 2], [1, 0], [2, 1, 2, 0, 1, 3, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 1, 1, 0, 2, 0, 1, 3, 2, 1, 1, 3, 0, 2, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 2], [0, 1, 2, 2, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += ( int(2.0) - mod(i2,int(9.0)) )\\ni2 = min(( ( divInt(int(3.0),( in1 * mod(mod(divInt(int(1.0),divInt(int(9.0),int(5.0))),i0),mod(i1,int(0.0))) )) * min(mod(int(9.0),int(2.0)), abs(i2)) ) - ( int(4.0) + int(2.0) ) ), int(1.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 33, 13, 3, 6, 8]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1], [1, 0, 5, 8], [0], [1], [], [1], [0], [], [], [], [6, 3, 1, 1, 0], [], [0, 2, 1, 3, 3, 2, 2, 2, 3, 0, 0, 1, 0, 3, 1, 3, 2, 3, 1, 0], [0, 0, 0, 1, 0], [0, 2, 1, 2, 2, 2], [2, 0, 2, 1], [0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = res0 \\l ( int(1.0) * min(abs(( ( divInt(max(in0, i1),int(0.0)) + i1 ) * abs(int(5.0)) )), abs(( abs(int(8.0)) - i0 ))) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 20, 5, 6, 4, 1]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 8, 6, 1, 0, 3, 8, 3, 3, 2], [4], [2], [], [1], [0], [], [], [], [3, 6, 4, 3, 2, 6, 0, 5, 3, 0], [1], [2, 2, 0, 2, 2, 3, 1, 1, 0, 1, 0, 2, 2, 1, 2, 3, 2, 3, 1, 3, 1, 0, 3, 0, 1, 0, 2, 2, 3, 1, 3, 3, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 2, 0, 1, 1, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 2], [0, 0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( divInt(in0,( ( min(int(0.0), int(8.0)) + res0 ) + int(6.0) )) + in1 ) \\le divInt(( int(1.0) - ( abs(( min(int(0.0), max(int(3.0), in0)) + max(i2, int(8.0)) )) + res0 ) ),( divInt(min(int(3.0), abs(min(i0, int(3.0)))),in2) + int(2.0) ))\\nin0 *= i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 10, 10, 1, 1, 0, 1, 1, 0, 0, 0, 10, 1, 37, 10, 8, 8, 3]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 1, 2, 2, 2, 0, 2, 2, 2, 1, 1, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 1, 9, 6, 7, 0, 7, 4, 5, 6, 6, 0, 3, 6, 8, 4, 1, 7, 1, 8, 4, 6, 3, 9, 9, 5, 5, 7, 6, 1, 9, 8, 2, 6, 9, 2, 9, 6, 8, 9, 9, 5, 8, 4, 5, 9, 6, 1, 0, 9, 9, 6, 1, 5, 2, 5, 8, 6, 8, 5, 0, 3, 2, 7, 2, 0, 0, 5, 3, 1, 1, 3, 1, 4, 4, 4, 0, 5, 6, 5, 9, 8, 6, 5, 7, 0, 1, 5, 1, 8, 4, 4, 3, 5, 8, 7, 9, 0, 1, 0, 8, 4, 7, 0], [0, 2, 5, 1, 1, 0, 1, 2, 5, 2, 5], [2, 0, 1, 2, 0, 0, 0, 1, 0, 1, 1], [], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 2, 1, 0, 0], [1], [0, 0, 0, 1, 0, 0], [5, 5, 3, 5, 5, 5, 5, 1, 3, 2, 3, 4, 4, 5, 1, 4, 5, 3, 1, 6, 3, 3, 5, 5, 4, 2, 3, 0, 2, 6, 4, 2, 2, 6, 2, 5, 2, 4, 2, 3, 6, 0, 0, 0, 5, 5, 6, 2, 6, 6, 5, 4, 4, 4, 6, 0, 1, 0, 4, 1, 6, 2, 1, 6, 4, 2, 6, 4, 0, 3, 1, 1, 5, 5, 6, 2, 2, 1, 3, 5, 2, 5, 0, 6, 2, 0, 6, 3, 6, 2, 5, 1, 2, 1, 0, 6, 2, 0, 1, 5, 4, 6, 1, 4, 5, 5, 4, 2, 1, 0, 0, 0, 6, 2, 0, 5, 0], [1], [1, 1, 3, 0, 2, 3, 2, 2, 2, 3, 2, 3, 0, 2, 1, 1, 0, 2, 0, 0, 3, 2, 2, 1, 0, 3, 3, 1, 2, 0, 3, 2, 2, 2, 3, 3, 3, 2, 3, 0, 1, 2, 0, 2, 2, 0, 3, 2, 2, 3, 2, 0, 0, 3, 2, 3, 2, 0, 0, 3, 2, 1, 2, 1, 3, 1, 3, 1, 3, 0, 1, 0, 0, 2, 1, 3, 0, 3, 2, 2, 2, 2, 0, 3, 3, 1, 1, 2, 3, 3, 1, 2, 3, 0, 0, 0, 1, 3, 2, 2, 2, 1, 0, 3, 2, 0, 2, 1, 3, 3, 1, 1, 3, 0, 2, 0, 3, 0, 3, 1, 2, 1, 2, 2, 3, 0, 2, 2, 0, 1, 1, 2, 2, 3, 0, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 0, 1, 3, 0, 1, 1, 2, 2, 1, 0, 3, 1, 2, 0, 2, 3, 1, 1, 1, 0, 0, 2, 2, 2, 3, 1, 1, 1, 0, 3, 3, 2, 1, 1, 1, 3, 1, 1, 2, 0, 2, 3, 3, 2, 0, 3, 1, 2, 2, 2, 2, 2, 2, 3, 1, 0, 3, 0, 1, 0, 2, 3, 1, 3, 3, 3, 2, 2, 3, 2, 1, 1, 0, 0, 2, 2, 1, 2, 3, 0, 3, 0, 2, 2, 0, 1, 3, 3, 3, 0, 0, 0, 2, 3, 0, 0, 1, 2, 1, 0, 0, 1, 2, 0, 3, 1, 2, 0, 2, 1, 3, 2, 0, 2, 1, 3, 1, 2, 1, 2, 0, 2, 2, 2, 0, 0, 3, 1, 2, 1, 2, 3, 0, 0, 0, 0, 1, 2, 0, 2, 1, 2, 2, 1, 3, 0, 3, 0, 3, 2, 0, 1, 3, 1, 2, 1, 0, 2, 3, 2, 0, 1, 1, 2, 2, 0, 0, 3, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 1, 3, 1, 2, 1, 1, 2, 2, 0, 1, 3, 0, 2, 3, 3, 1, 0, 0, 0, 1, 3, 3, 2, 3, 1, 0, 0, 1, 3, 1, 2, 2, 2, 2, 3, 1, 3, 2, 1, 2, 0, 3, 2, 1, 0, 0, 3, 1, 0, 2, 1, 1, 0, 3, 3, 3, 2, 3, 3, 2, 0, 0, 3, 3, 3, 2, 3, 3, 1, 0, 2, 2, 3, 0, 3, 3, 1, 2, 3, 2, 0, 2, 1, 1, 0, 2, 1, 0, 2, 1, 0, 3, 0, 0, 3, 2, 2, 2, 1, 2, 0, 2, 3, 0, 1, 3, 3, 0, 1, 2, 3, 0, 3, 3, 2, 0, 3, 3, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 1, 2, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [1, 2, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 0, 2, 0, 1, 2, 0, 2, 1, 2, 0, 2, 1, 1, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 1, 1, 1, 1, 1, 2, 0, 0, 2, 0, 2, 2, 2, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 1, 0, 2, 0, 1, 2, 2, 1, 1, 2, 1, 2, 2, 0, 2, 0, 2], [1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 2, 0, 1, 0, 2, 0, 2, 2, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 1, 2, 0, 0, 0, 1, 2, 2, 0, 1, 2, 0, 1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 90, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nb0 = int(4.0) \\l int(4.0)\\nif max(in2, ( abs(( ( divInt(min(divInt(min(in2, mod(int(1.0),int(9.0))),in0), ( in2 - in2 )),max(( divInt(int(6.0),in2) + min(abs(int(7.0)), ( in2 + min(( divInt(( min(max(min(( min(i1, int(0.0)) + divInt(in0,( mod(i2,min(( ( min(mod(in0,in1), abs(divInt(max(( in1 + in2 ), min(mod(int(7.0),divInt(int(4.0),abs(int(5.0)))), abs(int(6.0)))),abs(i1)))) + int(6.0) ) - in1 ), in2)) - ( int(0.0) * min(in0, abs(( divInt(( mod(i1,min(max(int(3.0), int(6.0)), ( abs(min(int(8.0), divInt(abs(res0),in0))) - in0 ))) * int(4.0) ),max(( ( divInt(int(1.0),in2) - abs(mod(in2,( int(7.0) - min(abs(int(1.0)), int(8.0)) ))) ) + max(in1, ( i2 * max(in0, min(int(4.0), ( int(6.0) + ( ( abs(i0) - ( divInt(i2,int(3.0)) + int(9.0) ) ) * ( ( min(res0, divInt(int(9.0),( in1 + i2 ))) * i2 ) * res0 ) ) ))) )) ), int(5.0))) * mod(i2,in2) ))) ) )) ), int(5.0)), abs(i2)), int(7.0)) * int(6.0) ),( mod(int(1.0),in1) + abs(int(9.0)) )) - divInt(i2,( abs(int(8.0)) - int(2.0) )) ), int(6.0)) )) ), in0)) * res0 ) * ( ( ( min(int(9.0), int(2.0)) * int(9.0) ) - i0 ) + abs(abs(( int(6.0) + int(8.0) ))) ) )) - int(9.0) )) == abs(int(9.0)):{:\\nif int(5.0) != ( i0 + mod(min(max(mod(i0,abs(int(8.0))), ( ( ( ( ( ( min(int(4.0), in2) - max(in2, int(5.0)) ) * res0 ) + ( max(int(9.0), max(max(max(divInt(( abs(divInt(int(6.0),int(1.0))) + i2 ),res0), ( divInt(int(0.0),mod(min(res0, min(in2, ( divInt(in1,int(9.0)) - abs(min(abs(in1), in1)) ))),res0)) + mod(abs(i0),i1) )), int(9.0)), ( int(6.0) + i0 ))) * in1 ) ) + int(1.0) ) + mod(i1,abs(int(5.0))) ) + mod(res0,( int(2.0) - max(mod(i2,( int(5.0) + max(int(8.0), ( int(6.0) * mod(i1,( divInt(( res0 + in1 ),max(int(8.0), ( int(5.0) - ( max(i2, res0) * in1 ) ))) + i0 )) )) )), int(0.0)) )) )), ( in0 + ( int(3.0) + divInt(( int(2.0) - min(i1, abs(i1)) ),min(divInt(in2,int(7.0)), min(int(2.0), ( int(0.0) * in2 )))) ) )),( abs(( res0 * int(0.0) )) + int(5.0) )) ):{:\\nloopBreak% = 0\\nwhile not b1:{:\\nb2 = mod(( i2 - i2 ),min(i1, in0)) \\g in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}\\nif not not i2 \\g int(3.0):{:\\nif int(1.0) \\l ( ( ( min(int(1.0), min(int(3.0), ( int(1.0) * int(4.0) ))) + mod(mod(in2,int(4.0)),max(i0, ( max(abs(int(4.0)), res0) - i2 ))) ) - i0 ) * int(0.0) ):{:\\nloopBreak% = 0\\nwhile abs(min(mod(min(int(5.0), res0),in0), int(6.0))) \\g max(int(5.0), ( divInt(divInt(mod(min(int(9.0), abs(( int(8.0) + divInt(res0,min(divInt(int(6.0),i2), in2)) ))),min(int(5.0), i1)),( int(7.0) * int(0.0) )),i2) + abs(min(min(( abs(min(( i1 - i0 ), abs(abs(max(divInt(min(abs(int(1.0)), res0),( ( min(i2, max(abs(int(5.0)), ( abs(( i0 * divInt(int(1.0),int(8.0)) )) + i1 ))) + ( int(4.0) - in2 ) ) - ( int(4.0) + in1 ) )), max(res0, i1)))))) - max(( divInt(mod(int(3.0),( in1 - mod(abs(in2),int(5.0)) )),max(abs(in2), int(8.0))) - ( abs(in1) + min(abs(( i2 + min(abs(int(7.0)), i1) )), i0) ) ), i0) ), int(9.0)), int(0.0))) )):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = i0 == res0\\nb0 = i2 != i0\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = int(1.0) == int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b1\\nif int(8.0) != in2:{:\\ni0 *= divInt(int(4.0),( int(7.0) + int(0.0) ))\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 9, 8, 105, 105, 11, 11, 0, 19, 11, 8, 1, 6, 117, 1, 460, 132, 107, 82, 51]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 0, 1, 1, 1, 1, 0], [0, 1], [0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 2, 9, 5, 1, 5, 0, 3, 3, 3, 9, 2, 6, 7, 1, 1, 6, 0, 8, 4, 2, 4, 8, 8, 8, 0, 3, 4, 7, 3, 8, 6, 5, 3], [3, 4, 5, 2, 2], [1, 2, 2, 0], [], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [1], [1], [1], [5, 4, 0, 4, 1, 1, 6, 5, 1, 0, 4, 6, 0, 5, 4, 4, 6, 3, 6, 4, 5, 2, 6, 5, 3, 2, 5, 4, 1, 5, 5, 3], [0, 0], [2, 1, 2, 1, 3, 0, 2, 2, 3, 0, 1, 1, 3, 0, 3, 3, 1, 2, 1, 3, 2, 3, 1, 3, 2, 0, 2, 2, 0, 2, 3, 1, 0, 1, 2, 1, 0, 1, 3, 3, 3, 2, 2, 0, 0, 1, 2, 0, 2, 2, 0, 1, 3, 1, 0, 3, 1, 0, 0, 1, 2, 3, 2, 1, 1, 1, 3, 0, 1, 0, 3, 1, 3, 2, 0, 3, 0, 2, 2, 1, 0, 2, 2, 3, 0, 0, 1, 1, 0, 1, 3, 2, 3, 2, 1, 0, 3, 3, 1, 2, 2, 1, 3, 3, 1, 2, 0, 0, 2, 0, 1, 3, 3, 0, 1, 3, 3, 3, 2, 0, 1, 3, 1, 2, 1, 3, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 0, 0, 2, 1, 1, 2, 0, 2, 2, 0, 2], [0, 0, 2, 1, 2, 1, 0, 2, 1, 1, 2, 2, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(5.0) + divInt(int(2.0),max(in2, divInt(mod(min(in1, int(2.0)),int(9.0)),abs(i0)))) ) \\ge min(max(int(5.0), ( int(1.0) + max(( max(int(5.0), max(mod(in1,divInt(( i1 * ( min(int(0.0), i1) - int(3.0) ) ),mod(int(3.0),res0))), int(3.0))) * min(min(max(( mod(in2,i1) - int(9.0) ), mod(i0,( divInt(in1,int(2.0)) + min(int(6.0), res0) ))), max(int(7.0), i0)), in2) ), int(1.0)) )), divInt(abs(divInt(int(1.0),int(6.0))),int(0.0))):{:\\nloopBreak% = 0\\nwhile abs(in1) \\le int(8.0):{:\\nb1 = in1 != abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = max(( res0 * max(in0, divInt(( int(2.0) - res0 ),( ( abs(in1) - in2 ) * int(4.0) ))) ), int(8.0)) == i2\\n:}\\nres0 = int(8.0)\\nin2 = abs(( max(mod(int(8.0),in0), min(min(int(0.0), divInt(mod(int(3.0),abs(max(int(4.0), mod(i2,in2)))),( in1 * int(7.0) ))), max(abs(i1), int(3.0)))) + min(abs(abs(mod(in2,int(8.0)))), min(int(6.0), mod(int(5.0),abs(int(3.0))))) ))\\nb2 = in2 == in0\\nb0 = False\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 8, 8, 2, 6, 35, 35, 5, 4, 0, 6, 5, 1, 1, 1, 32, 2, 129, 31, 33, 13, 18]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 1, 1, 1], [0, 0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 5, 6, 2, 9, 0, 7, 6, 6, 4, 9, 9, 3, 0, 9, 7, 0, 9], [3, 5, 0], [], [0], [0, 1, 1, 1], [0, 0, 0], [3], [], [1, 0], [4, 4, 3, 1, 3, 0, 5, 3, 5, 1, 1, 5, 2, 4, 0, 4, 2, 3, 4, 4], [0, 0, 0], [2, 3, 3, 1, 0, 0, 3, 0, 3, 1, 2, 3, 2, 0, 1, 2, 0, 3, 3, 3, 2, 1, 1, 1, 2, 3, 3, 0, 0, 1, 1, 0, 3, 2, 2, 2, 1, 1, 3, 1, 1, 0, 0, 2, 2, 2, 3, 2, 3, 1, 3, 0, 3, 0, 3, 3, 1, 3, 3, 0, 2, 0, 3, 1, 3, 1, 2, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 0, 2, 2, 0, 0, 1, 0, 0, 2, 2, 2, 0, 2, 1, 2, 0, 2, 2, 1, 1, 0], [1, 0, 0, 0, 2, 0, 0, 2, 2, 2], [0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( abs(min(int(6.0), in1)) - in1 ) \\ge abs(in0) and abs(int(5.0)) != ( min(( i1 + int(5.0) ), divInt(in0,min(max(min(mod(int(6.0),int(2.0)), int(9.0)), ( min(abs(i0), in2) + int(0.0) )), int(7.0)))) + in0 ) ):{:\\nif abs(( ( mod(int(6.0),int(6.0)) * abs(int(4.0)) ) + int(9.0) )) \\l in2:{:\\ni1 = i1\\n:}\\n:}else:{:\\nin2 = ( ( ( min(divInt(abs(int(9.0)),max(i2, abs(in1))), min(abs(int(3.0)), abs(max(i0, mod(in1,max(int(0.0), min(int(9.0), ( i2 + in0 )))))))) * int(7.0) ) * in1 ) * int(0.0) )\\n:}\\nin1 = int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 19, 19, 3, 0, 1, 4, 3, 1, 0, 2, 20, 3, 73, 15, 22, 10, 5]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [0, 4, 0, 6], [1, 0], [0, 0], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= in1\\ni0 = res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 1, 0, 2, 2, 0, 2, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 3, 9, 1, 4, 4, 5, 8, 2, 6, 8, 9, 0, 1, 6, 7, 1, 5, 1, 7, 5, 8, 6, 8, 2, 9, 6, 0, 9, 1, 0, 7, 4, 8, 8, 5, 2, 5, 2, 2, 9, 6, 7, 4, 5], [0, 3, 4, 2, 5, 0, 0, 1], [0, 2, 1, 2, 0, 2], [1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 1, 3, 2, 0, 3, 3, 2, 0, 0, 1, 3], [1, 1], [1, 0, 0], [1, 6, 3, 3, 5, 6, 1, 3, 6, 3, 0, 5, 5, 4, 6, 1, 0, 6, 0, 5, 5, 1, 5, 0, 1, 5, 5, 5, 2, 5, 1, 0, 2, 0, 2, 4, 1, 2, 1, 5, 1], [1, 0], [0, 1, 3, 2, 3, 0, 3, 2, 2, 3, 0, 3, 3, 3, 2, 0, 3, 1, 2, 0, 3, 1, 0, 2, 1, 2, 2, 2, 3, 2, 2, 2, 3, 1, 0, 2, 0, 3, 0, 2, 0, 1, 0, 2, 3, 2, 0, 1, 0, 0, 2, 1, 2, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 2, 0, 3, 0, 1, 0, 2, 0, 2, 1, 2, 1, 2, 0, 1, 0, 0, 0, 3, 0, 1, 1, 1, 0, 2, 2, 1, 3, 0, 1, 1, 1, 0, 2, 0, 3, 2, 2, 2, 1, 1, 3, 1, 0, 2, 1, 2, 3, 2, 2, 2, 1, 0, 2, 3, 1, 2, 1, 1, 1, 3, 1, 1, 2, 3, 0, 0, 0, 0, 1, 1, 1, 3, 1, 2, 3, 3, 2, 1, 2, 3, 3, 1, 0, 1, 3, 3, 0, 1, 3, 3, 0, 2, 3, 0, 3, 3, 3, 1, 3, 1, 1, 1, 1, 2, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [1, 2, 0, 2, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2, 2, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1, 0, 2, 0, 2, 1, 2, 2, 0, 2, 1, 0, 0, 0, 2, 1, 2, 2, 2], [0, 1, 1, 0, 1, 1, 2, 1, 0, 2, 1, 2, 1, 0, 2, 1, 0, 0, 2, 2, 1, 1, 1, 2, 2], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\l int(4.0):{:\\nb0 = not max(( abs(res0) + min(( divInt(abs(in0),min(min(max(( in0 - max(int(2.0), divInt(in2,min(int(3.0), res0))) ), divInt(int(9.0),( divInt(( max(mod(( ( min(int(1.0), i1) - ( in0 + max(res0, divInt(in0,int(4.0))) ) ) - i0 ),( abs(( in2 - int(4.0) )) * in2 )), in1) - mod(int(5.0),divInt(int(8.0),int(2.0))) ),abs(abs(abs(max(int(6.0), min(max(abs(( res0 + abs(i1) )), int(8.0)), i0)))))) * divInt(res0,( int(9.0) - ( int(0.0) * divInt(i0,int(1.0)) ) )) ))), in2), in2)) - i1 ), min(in2, int(6.0))) ), int(7.0)) \\ge int(1.0)\\nb2 = ( i0 \\le ( mod(int(5.0),min(i1, int(1.0))) + int(7.0) ) or ( False or ( not b1 and int(5.0) == in2 ) ) )\\nif ( ( not b2 or ( in2 * abs(mod(( divInt(int(8.0),int(6.0)) - max(int(8.0), in2) ),( int(2.0) + ( min(divInt(( divInt(int(9.0),i2) + divInt(abs(int(6.0)),( int(0.0) * int(9.0) )) ),int(1.0)), min(int(0.0), int(7.0))) * ( abs(in2) - i1 ) ) ))) ) != i0 ) and b0 ):{:\\nloopBreak% = 0\\nwhile i2 \\l int(4.0):{:\\ni0 -= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif False:{:\\ni2 = int(8.0)\\n:}\\n:}else:{:\\nb2 = ( max(int(5.0), divInt(abs(abs(( int(2.0) - ( min(abs(int(5.0)), in1) * int(2.0) ) ))),max(min(i1, int(2.0)), min(min(i2, divInt(abs(i1),max(abs(abs(int(9.0))), abs(int(6.0))))), int(7.0))))) \\l int(4.0) or int(5.0) \\g ( in2 * i1 ) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 46, 46, 8, 6, 6, 22, 8, 14, 2, 3, 41, 2, 170, 42, 43, 25, 18]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 2, 1, 1], [1, 1], [1, 1, 0], [1], [5], [5], [0, 0], [], [0, 0, 1], [0], [0, 1], [1], [], [2, 5, 1, 2, 3, 3, 5], [0, 0], [3, 0, 0, 0, 2, 2, 0, 1, 3, 0], [1, 0], [2, 2], [2], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\ni2 = abs(in2)\\nloopBreak% = 0\\nwhile False:{:\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = in0 != divInt(( in0 * int(5.0) ),abs(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 2, 0, 3, 1, 2, 1, 0, 7, 2, 10, 2, 2, 1, 1]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 3, 3, 4, 9, 6, 0, 1, 4, 0, 8, 5, 6, 7, 0, 3, 3, 7, 0, 1, 5, 4, 2, 7, 7, 7, 0, 1, 7], [2], [1, 0], [], [0, 1], [0], [1], [0], [], [1, 3, 3, 3, 4, 0, 2, 2, 0, 4, 4, 1, 3, 5, 2, 6, 5, 0, 3, 1], [0], [0, 2, 3, 3, 2, 0, 0, 2, 0, 3, 1, 2, 1, 3, 3, 3, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 3, 1, 0, 1, 1, 3, 1, 2, 1, 1, 3, 1, 1, 3, 2, 1, 3, 0, 1, 3, 2, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 0, 1, 2, 0, 3, 2, 0, 2, 1, 0, 2, 0, 0, 3, 3, 3, 1, 0, 3, 1, 3, 3, 1, 1, 1, 1, 2, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 1, 0, 0, 1, 1, 0, 1, 2, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2], [0, 1, 0, 2, 2, 0, 2, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nb0 = i1 == mod(abs(max(( in0 + in0 ), ( in0 - max(int(2.0), divInt(int(1.0),min(min(max(( mod(int(2.0),int(3.0)) + mod(( divInt(divInt(int(3.0),mod(int(4.0),int(9.0))),max(int(6.0), in1)) * int(0.0) ),int(1.0)) ), min(int(4.0), mod(int(0.0),int(8.0)))), max(int(5.0), int(6.0))), abs(mod(int(7.0),abs(i0)))))) ))),int(0.0))\\ni2 = abs(divInt(min(min(i2, min(i0, abs(in1))), max(in1, min(min(int(3.0), ( int(3.0) * mod(( int(7.0) + divInt(( int(0.0) * mod(i1,mod(int(1.0),divInt(in0,int(5.0)))) ),divInt(in2,max(divInt(i2,( int(4.0) - res0 )), mod(in2,i0)))) ),max(max(max(int(2.0), in0), max(int(7.0), max(abs(int(7.0)), int(7.0)))), int(0.0))) )), int(1.0)))),divInt(int(7.0),i1)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 31, 31, 1, 2, 0, 2, 1, 1, 1, 0, 20, 1, 103, 27, 26, 8, 19]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 0, 1, 2, 2, 0, 2, 2, 0], [1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 6, 6, 5, 6, 7, 0, 4, 8, 6, 3, 3, 8], [3, 2, 3, 3, 0], [2, 1, 2, 1, 0, 2], [1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 2, 2, 2, 3, 1, 1, 0, 0], [0, 1, 0, 1], [1, 0], [3, 3, 6, 5, 3, 6, 4, 6, 1, 4, 6, 3, 3, 5, 0, 6, 3, 4, 3, 3, 4], [1], [2, 1, 2, 2, 1, 3, 2, 0, 3, 0, 3, 0, 2, 3, 0, 1, 1, 3, 1, 3, 1, 2, 0, 3, 0, 1, 3, 0, 2, 1, 2, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 3, 2, 3, 0, 1, 3, 0, 0, 3, 3, 2, 0, 1, 1, 0, 3, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 2, 2, 2, 1, 0, 0, 1, 1, 2, 1, 2, 2], [0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nb2 = False\\nloopBreak% = 0\\nwhile not not not ( mod(int(4.0),mod(mod(int(0.0),min(divInt(in0,max(in0, abs(res0))), divInt(abs(in2),int(6.0)))),int(6.0))) \\ge abs(int(5.0)) or max(int(6.0), divInt(in0,min(res0, int(7.0)))) == min(in1, ( int(0.0) + divInt(divInt(res0,int(4.0)),i1) )) ):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 += res0\\nloopBreak% = 0\\nwhile False:{:\\nif divInt(divInt(( divInt(in0,in0) - in2 ),int(8.0)),max(divInt(max(i0, int(6.0)),abs(res0)), in0)) \\ge max(abs(mod(in1,int(3.0))), int(3.0)):{:\\nb2 = b1\\n:}else:{:\\nif in0 \\ge abs(in0):{:\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = int(8.0) \\l in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 6, 5, 14, 14, 5, 6, 1, 15, 5, 10, 4, 2, 21, 1, 63, 15, 14, 3, 13]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 1, 0, 1], [1, 0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 3, 2, 0, 0, 7, 5, 0, 5, 5], [3, 4], [2, 1], [1], [0, 1, 1, 0, 0], [0, 0], [3, 0, 1], [1], [1], [1, 1, 4, 1, 6, 6, 5, 0, 2, 6, 5, 0], [0, 0], [2, 1, 2, 3, 3, 0, 1, 1, 3, 3, 2, 2, 2, 1, 2, 1, 0, 2, 3, 0, 3, 1, 3, 2, 1, 2, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 2, 2, 0, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( int(8.0) + divInt(max(min(i1, int(9.0)), int(3.0)),min(abs(divInt(divInt(divInt(int(2.0),divInt(int(0.0),i1)),( abs(in1) + min(int(0.0), max(divInt(int(7.0),divInt(int(5.0),i1)), mod(res0,int(0.0)))) )),int(5.0))), res0)) ) \\ge in2 or i0 \\le i2 ):{:\\nif b2:{:\\nres0 = in2\\n:}else:{:\\ni0 = int(5.0)\\n:}\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 11, 11, 2, 2, 1, 5, 2, 3, 1, 1, 12, 2, 38, 10, 7, 2, 8]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 3], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1], [9], [], [1, 0], [], [0], [], [0], [], [], [1], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\ni1 *= int(9.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1], [1], [], [], [], [0], [], [1], [0], [0], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin1 = int(1.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1], [2, 1, 0, 1, 1, 0, 1], [1], [1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 2, 5, 3, 7, 5, 6, 6, 0, 2, 3, 2, 8, 1, 4, 9, 8, 5, 7, 7, 0, 5, 5, 6, 2], [2], [1, 1], [1], [0, 0, 1, 0], [0], [3, 1, 0], [0], [], [4, 5, 2, 4, 0, 1, 2, 4, 2, 5, 2, 0, 1, 4, 0, 0, 4, 2, 2, 4, 6, 0, 2, 1, 0, 5, 6, 6, 2, 2, 4, 0, 0, 4, 1, 1, 1, 5], [0, 0, 0, 0, 0], [0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 0, 3, 0, 3, 0, 3, 2, 0, 1, 0, 1, 1, 3, 3, 1, 2, 2, 2, 2, 3, 1, 2, 3, 0, 1, 2, 1, 0, 3, 2, 1, 2, 0, 0, 3, 3, 3, 1, 2, 2, 3, 1, 0, 2, 2, 1, 3, 2, 3, 3, 2, 0, 2, 2, 0, 2, 2, 0, 1, 2, 1, 3, 0, 3, 0, 2, 2, 1, 0, 2, 3, 0, 1, 0, 0, 2, 3, 3, 2, 3, 0, 3, 0, 2, 1, 1, 3, 0, 3, 3, 3, 1, 0, 0, 3, 1, 0, 2, 0, 0, 1, 0, 0, 3, 2, 1, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 1, 0, 2, 1, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 0], [2, 2, 2, 0, 0, 1, 2, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( True or in1 == in2 ):{:\\ni2 = divInt(int(7.0),( int(7.0) * divInt(int(2.0),( int(5.0) * ( abs(( in1 * max(i0, max(i1, min(divInt(i2,int(3.0)), in1))) )) + int(7.0) ) )) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\nin2 = abs(max(int(6.0), mod(( ( divInt(abs(int(6.0)),( max(i2, int(0.0)) + ( int(2.0) - i0 ) )) * max(divInt(int(3.0),( i1 + in1 )), abs(max(min(int(2.0), ( ( max(int(8.0), i0) - ( ( int(1.0) - min(( abs(min(( i0 + mod(divInt(in1,divInt(( i2 + int(4.0) ),( int(9.0) - abs(i2) ))),abs(in1)) ), ( mod(int(8.0),res0) - divInt(min(i0, int(5.0)),i2) ))) - i1 ), mod(max(abs(divInt(abs(i0),max(in2, divInt(int(7.0),int(7.0))))), min(res0, abs(max(abs(int(0.0)), res0)))),i2)) ) + min(int(5.0), i2) ) ) + divInt(in1,i0) )), int(5.0)))) ) - i0 ),in1)))\\ni1 = min(mod(int(6.0),i1), int(2.0))\\ni1 = in2\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 26, 26, 1, 2, 1, 4, 1, 3, 1, 0, 38, 5, 122, 34, 29, 18, 16]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 2, 2, 0, 1], [1, 1], [0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 7, 3, 4, 5, 8, 7, 4, 7, 9, 3, 2, 9, 3, 8, 1, 0, 3, 0, 8, 4, 5, 4, 7, 4, 8, 6, 6, 4, 0, 6, 0, 7, 7, 7], [2, 4, 2], [0, 0, 2], [1], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0], [3, 2, 2, 0, 2, 1], [1], [], [1, 4, 3, 6, 3, 0, 0, 1, 2, 0, 0, 3, 4, 5, 4, 3, 0, 2, 1, 3, 6, 3, 5, 6, 2, 6, 5, 3, 1, 3, 1, 6, 6, 3, 2, 5, 4, 0, 3, 6, 5, 3], [1, 0, 1], [3, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 3, 3, 3, 2, 3, 3, 2, 3, 1, 0, 1, 0, 2, 0, 2, 1, 3, 2, 0, 2, 1, 0, 3, 1, 2, 3, 1, 3, 2, 2, 2, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 3, 3, 1, 3, 3, 1, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 2, 3, 3, 2, 3, 0, 1, 0, 3, 1, 1, 3, 2, 3, 0, 1, 1, 3, 1, 3, 1, 2, 0, 0, 3, 2, 0, 3, 1, 1, 2, 0, 0, 2, 3, 2, 2, 2, 3, 0, 2, 2, 2, 3, 1, 3, 0, 0, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 0, 0, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 3, 0, 3, 0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 0, 2, 1, 0], [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 1, 2, 2, 0, 2, 1, 2, 0, 1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 1], [1, 1, 0, 1, 2, 2, 2, 2, 2, 1, 1, 0, 0, 1, 2, 0, 2, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not not b0 or not max(mod(divInt(i1,mod(in1,in0)),res0), in0) == int(9.0) )\\ni0 -= int(9.0)\\ni0 = max(max(min(( abs(min(mod(min(int(7.0), i1),int(3.0)), i2)) - ( i0 + mod(int(4.0),max(( i0 - ( int(5.0) * in0 ) ), max(int(8.0), ( min(int(7.0), min(divInt(mod(( ( in1 * int(4.0) ) * divInt(mod(in2,in1),int(7.0)) ),in0),divInt(abs(abs(int(9.0))),abs(abs(int(3.0))))), ( int(2.0) * min(divInt(int(9.0),max(int(3.0), ( i0 * divInt(divInt(abs(abs(mod(min(i2, int(8.0)),i1))),abs(int(1.0))),int(0.0)) ))), max(( abs(in0) - int(3.0) ), int(0.0))) ))) - min(int(8.0), max(int(4.0), ( res0 + in0 ))) )))) ) ), max(divInt(in2,max(int(5.0), int(4.0))), ( res0 + i2 ))), ( min(divInt(( ( max(res0, mod(mod(divInt(abs(int(7.0)),abs(in2)),in0),min(int(4.0), min(int(8.0), min(divInt(min(abs(i1), mod(in0,i1)),res0), int(6.0)))))) - int(6.0) ) * int(4.0) ),int(0.0)), ( int(6.0) + res0 )) * in0 )), i2)\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile abs(in2) \\le abs(in1):{:\\nb2 = int(0.0) == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 += mod(res0,min(int(7.0), mod(int(7.0),max(in2, divInt(int(7.0),in0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 36, 36, 3, 3, 1, 9, 3, 6, 1, 0, 42, 3, 155, 40, 40, 18, 24]}, {"genotype": [[0], [0, 1, 1, 1, 1], [0, 2, 2, 2, 1], [1, 0, 1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 8, 6, 5, 2, 5, 8, 0, 2, 8, 9, 8, 3, 5, 1, 7, 8, 3, 8, 9, 2, 7, 4, 0, 6, 0, 4, 6, 5, 7, 9, 7, 8, 1, 6, 1, 2, 5, 6, 4, 3, 3, 5, 0, 2, 2, 3, 3, 5, 6, 7, 2, 1, 0, 6, 1, 1, 6, 7, 9, 9, 3, 1, 3, 6, 7, 3, 1, 8, 8, 5, 0], [1, 0, 4, 4, 1], [0, 1, 0], [1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [3, 1, 2, 0, 3], [1], [0], [4, 4, 0, 0, 1, 1, 4, 0, 4, 6, 2, 2, 1, 2, 1, 1, 3, 4, 2, 3, 1, 2, 4, 3, 3, 1, 6, 5, 2, 6, 0, 5, 6, 4, 2, 1, 0, 2, 1, 4, 3, 4, 6, 4, 2, 0, 3, 3, 4, 5, 5, 2, 0, 5, 3, 5, 6, 0, 0, 1, 4, 2, 1, 4, 2, 0, 3, 4, 4, 2, 5, 3, 2, 4, 0, 6, 6, 6, 5, 1, 5, 4, 4, 5, 0], [], [2, 1, 2, 0, 1, 3, 1, 2, 2, 2, 2, 0, 1, 1, 3, 2, 0, 2, 0, 1, 0, 1, 1, 2, 2, 3, 2, 1, 1, 0, 0, 2, 0, 0, 3, 3, 0, 0, 1, 2, 2, 0, 3, 2, 3, 2, 2, 2, 3, 0, 3, 0, 2, 2, 3, 1, 0, 3, 3, 3, 2, 0, 1, 0, 3, 1, 1, 1, 3, 1, 2, 3, 3, 2, 2, 0, 0, 3, 0, 2, 3, 2, 3, 1, 1, 2, 3, 2, 0, 2, 0, 3, 3, 1, 0, 2, 2, 2, 0, 1, 2, 0, 2, 2, 0, 0, 0, 3, 1, 0, 3, 3, 0, 1, 1, 3, 2, 2, 3, 1, 1, 2, 2, 3, 1, 0, 0, 2, 3, 3, 3, 0, 3, 3, 2, 1, 1, 3, 1, 3, 2, 3, 3, 0, 2, 2, 2, 3, 3, 2, 3, 0, 3, 2, 3, 0, 2, 1, 1, 0, 2, 1, 3, 2, 2, 3, 1, 0, 1, 3, 1, 1, 2, 3, 3, 0, 2, 0, 0, 0, 3, 0, 0, 3, 3, 2, 1, 3, 0, 1, 2, 2, 3, 3, 3, 0, 3, 0, 1, 0, 2, 0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 0, 0, 2, 3, 1, 1, 3, 1, 2, 0, 0, 1, 2, 0, 3, 0, 0, 0, 3, 0, 3, 1, 3, 3, 2, 3, 3, 3, 2, 0, 2, 2, 2, 0, 2, 3, 0, 0, 0, 0, 3, 1, 0, 2, 0, 2, 0, 3, 3, 0, 0, 3, 0, 1, 0, 2, 3, 3, 1, 3, 1, 1, 2, 0, 1, 3, 2, 3, 3, 0, 2, 1, 1, 2, 0, 3, 0, 2, 1, 3, 3, 1, 1, 1, 2, 2, 3, 3, 0, 3, 1, 1, 1, 0, 1, 3, 2, 2, 1, 1, 3, 0, 1, 3, 2, 2, 0, 2, 3, 3, 2, 3, 1, 3, 0, 1, 0, 3, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0], [1, 0, 0, 2, 0, 1, 1, 2, 2, 1, 1, 2, 0, 1, 0, 0, 0, 1, 0, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 1, 2, 1, 1, 2, 2, 2, 1, 0, 0, 0, 1, 0, 1, 2, 0, 1, 0, 2, 2, 0, 2, 2, 2, 2, 1, 0, 0, 1, 2, 0, 2, 1, 0, 1, 1, 2, 0, 2, 0, 2], [1, 0, 2, 2, 0, 2, 0, 1, 1, 1, 2, 0, 2, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2, 0, 2, 0, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 92, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( False or not ( int(1.0) - ( in1 + int(6.0) ) ) \\g max(int(8.0), mod(( mod(mod(in1,int(6.0)),int(5.0)) * min(divInt(i0,( i0 * int(2.0) )), i1) ),int(5.0))) )\\nloopBreak% = 0\\nwhile b1:{:\\nif ( int(8.0) \\l divInt(( min(divInt(int(0.0),int(2.0)), i1) + in1 ),mod(i0,in1)) or abs(min(res0, i2)) \\le int(8.0) ):{:\\nloopBreak% = 0\\nwhile ( divInt(i2,max(( max(( mod(( abs(i1) * abs(i2) ),mod(divInt(max(int(9.0), i1),max(abs(min(mod(i1,int(8.0)), in0)), max(int(3.0), int(5.0)))),int(1.0))) + min(int(7.0), divInt(min(min(( mod(in1,i2) - max(in0, ( min(( min(int(8.0), int(3.0)) - ( max(mod(i1,mod(i2,abs(abs(int(8.0))))), in1) - ( divInt(divInt(in0,int(9.0)),divInt(in0,mod(divInt(i1,res0),in2))) * min(int(2.0), i2) ) ) ), min(max(res0, int(7.0)), int(4.0))) + min(divInt(( abs(int(0.0)) * int(6.0) ),( ( min(int(0.0), i0) + in2 ) * ( max(abs(max(res0, max(max(( int(4.0) + int(6.0) ), max(int(5.0), abs(divInt(max(max(in1, mod(divInt(( abs(abs(mod(min(i2, abs(( min(i1, ( int(7.0) - int(9.0) )) + i0 ))),divInt(int(7.0),min(( mod(min(int(8.0), i2),int(1.0)) - abs(int(6.0)) ), int(1.0)))))) - mod(min(min(i1, ( in1 - in0 )), in1),min(res0, in1)) ),max(max(( int(2.0) - abs(i2) ), int(5.0)), ( divInt(max(max(abs(i0), abs(in0)), int(6.0)),in0) * ( in1 + in2 ) ))),in2)), ( divInt(( int(4.0) * ( int(3.0) + int(3.0) ) ),i2) * i0 )),divInt(abs(int(5.0)),int(0.0)))))), max(int(2.0), mod(in2,in0))))), int(2.0)) - divInt(in2,min(res0, i0)) ) )), i0) )) ), min(i1, min(int(3.0), max(min(divInt(max(abs(min(mod(in1,( ( divInt(i2,( max(i1, in1) * i2 )) - i0 ) - min(int(3.0), in0) )), divInt(in1,( in1 - abs(abs(i2)) )))), in2),min(in0, int(5.0))), i2), divInt(abs(abs(int(6.0))),abs(int(7.0))))))), int(2.0)),divInt(in1,int(1.0)))) ), abs(mod(max(min(i0, ( int(0.0) * int(6.0) )), ( res0 - min(res0, ( int(1.0) - max(abs(int(1.0)), int(6.0)) )) )),int(7.0)))) * mod(( min(abs(res0), max(int(9.0), int(9.0))) * int(3.0) ),in2) ), int(1.0))) - min(mod(divInt(int(3.0),int(6.0)),max(i1, int(7.0))), max(mod(mod(in2,mod(abs(min(( abs(int(3.0)) + min(in1, int(1.0)) ), in1)),abs(int(8.0)))),int(8.0)), int(5.0))) ) \\le in2:{:\\nb0 = i0 \\g int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 73, 73, 5, 3, 2, 10, 5, 5, 1, 1, 85, 0, 335, 86, 91, 39, 47]}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 0, 1], [0], [1, 1, 1], [1, 1], [9, 6], [2, 1], [], [0], [0, 1, 1], [0, 0], [3], [], [0], [4, 3, 0, 3, 0, 6, 4, 0, 1, 3, 4], [1, 0, 1], [0, 3, 2, 2, 0, 0, 3, 3, 1, 0, 0, 1, 0, 3, 0, 0], [1, 1], [2, 0, 2, 2], [2, 0], [0, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in1 == abs(divInt(divInt(in0,i0),min(abs(int(9.0)), in0))) and i0 \\g int(6.0) ):{:\\nres0 *= in1\\ni0 = abs(i1)\\nin0 += in1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 2, 2, 2, 0, 1, 3, 2, 1, 0, 1, 11, 3, 16, 2, 4, 2, 2]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 2, 2, 2, 1, 1], [1, 1, 1, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 5, 0, 2, 1, 0, 7, 2, 6, 4, 2, 1, 9, 7, 5, 6, 2, 1, 1, 9, 6, 6, 3, 2, 5, 8, 5, 7, 0, 9, 7, 7, 3, 4, 6, 5, 9, 2, 2, 6, 1, 6, 2, 2, 0, 2, 4, 5, 9, 1, 0, 7, 4, 3, 4, 4, 3, 6, 0, 6, 8, 0, 2, 6, 5, 2, 1, 8, 4, 7, 2, 6, 7, 1], [1, 0, 5, 5], [2, 2], [0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0], [3, 2, 1, 2, 3, 0, 1], [1, 0], [], [6, 6, 1, 0, 2, 2, 5, 4, 1, 1, 4, 6, 4, 2, 0, 1, 6, 1, 3, 6, 5, 0, 2, 2, 2, 1, 1, 3, 6, 0, 4, 1, 0, 4, 2, 2, 5, 0, 6, 6, 3, 2, 3, 4, 6], [0], [1, 2, 3, 2, 3, 2, 3, 2, 1, 2, 3, 0, 3, 0, 2, 3, 2, 0, 0, 2, 0, 2, 3, 3, 3, 0, 2, 3, 2, 2, 1, 1, 2, 3, 1, 1, 1, 3, 0, 0, 0, 1, 2, 0, 1, 1, 2, 3, 3, 1, 1, 2, 1, 2, 2, 3, 2, 3, 3, 0, 1, 2, 1, 2, 1, 2, 1, 1, 3, 0, 3, 2, 2, 1, 0, 1, 3, 3, 0, 3, 0, 3, 1, 2, 0, 2, 3, 3, 0, 1, 2, 2, 3, 2, 3, 2, 3, 3, 2, 1, 1, 0, 1, 2, 1, 0, 1, 2, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 3, 0, 1, 1, 0, 1, 3, 2, 1, 1, 0, 3, 1, 2, 3, 2, 2, 2, 0, 1, 3, 1, 2, 1, 3, 3, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 0, 1, 3, 3, 2, 3, 2, 1, 3, 2, 1, 0, 1, 3, 1, 3, 3, 2, 0, 1, 2, 3, 3, 1, 1, 1, 0, 3, 1, 1, 3, 1, 1, 2, 3, 1, 3, 1, 3, 1, 3, 1, 1, 3, 3, 2, 1, 3, 1, 0, 3, 1, 3, 0, 1, 3, 1, 1, 3, 3, 0, 1, 2, 0, 3, 0, 2, 3, 2, 3, 2, 2, 1, 2, 3, 1, 1, 1, 2, 0, 1, 0, 0, 0, 3, 0, 0, 3, 3, 0, 0, 2, 0, 2, 1, 3, 1, 2, 0, 3, 3, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [2, 0, 2, 2, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0, 2, 2, 0, 1, 1, 0, 0, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 1, 0, 0, 2, 2, 2, 2, 0, 0, 2, 0, 2, 0, 1, 1, 1, 1, 0, 2, 0, 1, 2, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0], [2, 2, 2, 2, 0, 0, 0, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2, 0, 1, 2, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 1, 2, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( not int(1.0) \\g divInt(abs(divInt(min(( abs(( int(1.0) * mod(abs(res0),abs(res0)) )) * mod(min(divInt(i1,i0), divInt(i2,( min(min(min(i2, ( max(( mod(int(5.0),int(0.0)) * divInt(abs(int(2.0)),int(1.0)) ), int(0.0)) * max(in2, in1) )), i1), int(7.0)) + mod(i1,int(2.0)) ))),int(6.0)) ), ( max(min(int(4.0), int(2.0)), ( int(1.0) + ( ( abs(( abs(min(in1, int(9.0))) + ( int(7.0) - divInt(int(5.0),mod(int(6.0),int(2.0))) ) )) * max(res0, max(mod(( int(1.0) * in1 ),int(1.0)), min(min(i2, abs(i0)), min(int(9.0), ( i1 - divInt(min(max(res0, int(6.0)), ( divInt(abs(( abs(( min(min(divInt(int(6.0),int(3.0)), i1), int(2.0)) - ( int(5.0) * in0 ) )) * int(8.0) )),divInt(( ( res0 * int(5.0) ) - ( int(7.0) - abs(in2) ) ),( divInt(abs(i0),int(0.0)) * int(9.0) ))) - i2 )),int(7.0)) ))))) ) * abs(( int(7.0) + int(3.0) )) ) )) * i2 )),max(int(4.0), ( min(( ( mod(i2,int(6.0)) * min(int(5.0), divInt(int(9.0),abs(abs(divInt(( int(2.0) + mod(( ( ( int(2.0) - int(6.0) ) * ( i1 * int(1.0) ) ) * abs(abs(( min(( int(6.0) * min(( int(2.0) - i1 ), int(2.0)) ), abs(int(0.0))) - min(abs(divInt(in0,int(2.0))), ( min(max(int(4.0), int(5.0)), int(9.0)) - res0 )) ))) ),max(int(1.0), int(0.0))) ),max(int(7.0), int(4.0))))))) ) + divInt(max(int(3.0), min(int(4.0), abs(int(4.0)))),min(int(3.0), int(6.0))) ), max(abs(mod(int(0.0),abs(int(6.0)))), i0)) + min(int(8.0), abs(in1)) )))),int(0.0)) and False ):{:\\nloopBreak% = 0\\nwhile min(int(2.0), int(6.0)) \\l abs(min(i1, int(5.0))):{:\\nloopBreak% = 0\\nwhile mod(i0,abs(in1)) != mod(min(divInt(max(( ( int(2.0) * mod(min(int(1.0), int(8.0)),int(4.0)) ) - ( i2 - int(7.0) ) ), i2),in2), i0),abs(res0)):{:\\nloopBreak% = 0\\nwhile not res0 != abs(max(in0, i2)):{:\\nin0 = ( in1 * ( int(2.0) - min(int(6.0), divInt(res0,abs(min(int(7.0), int(1.0))))) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( b2 and True )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 75, 75, 4, 2, 2, 11, 4, 7, 2, 0, 45, 1, 257, 68, 70, 39, 29]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [3], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 2, 0, 1, 0, 2, 0], [0, 1, 0, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 4, 1, 9, 4, 1, 2, 4, 6, 1, 0, 0, 6, 0, 8, 9, 1, 9, 5, 1, 6, 1, 0, 3, 7, 0, 5, 2, 9, 3, 4, 4, 2, 1, 3, 1, 3, 5, 3, 8, 7, 6, 4, 2, 6, 5, 9, 9, 9, 3, 0, 0, 1, 2, 4, 5, 0, 0, 1, 8, 6, 3, 0, 1, 5, 1, 8, 7, 7, 3, 4, 7, 0, 7, 2, 0, 8, 3, 5, 5, 1, 8, 3, 4, 4, 0, 0, 7, 6, 6, 0, 4, 6, 1, 5, 1, 1, 6, 2], [1, 4, 2, 4, 5], [1, 0, 1], [1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 3, 1, 2, 3], [0], [1, 0], [4, 0, 6, 4, 3, 5, 2, 0, 1, 6, 0, 5, 5, 6, 3, 1, 2, 1, 4, 5, 0, 3, 5, 3, 6, 2, 2, 1, 4, 1, 0, 3, 3, 1, 5, 0, 5, 0, 6, 3, 5, 4, 4, 6, 5, 1, 5, 4, 5, 4, 0, 2, 5, 1, 0, 0, 2, 3, 2, 0, 4, 4, 2, 5, 1, 2, 6, 4, 1, 3, 5, 2, 2, 1, 2, 5, 5, 1, 4, 2, 3, 2, 4, 3, 5, 5, 2, 3, 1, 5, 3, 2, 4, 6, 4, 3, 0], [0, 0, 1, 0], [1, 0, 3, 1, 0, 3, 2, 0, 0, 0, 3, 2, 2, 1, 0, 3, 0, 2, 1, 0, 2, 1, 3, 1, 2, 3, 0, 3, 3, 3, 3, 2, 3, 2, 2, 2, 0, 1, 3, 1, 2, 1, 0, 1, 3, 3, 0, 1, 2, 1, 2, 0, 0, 3, 0, 0, 2, 1, 1, 0, 0, 3, 3, 0, 2, 0, 2, 0, 1, 3, 2, 0, 2, 2, 0, 3, 3, 0, 1, 3, 0, 1, 1, 0, 3, 3, 2, 1, 3, 2, 2, 0, 3, 3, 0, 3, 3, 2, 2, 1, 3, 2, 1, 1, 2, 2, 3, 1, 3, 3, 2, 1, 2, 1, 3, 1, 2, 3, 3, 1, 2, 0, 1, 3, 3, 3, 0, 3, 1, 2, 0, 1, 3, 3, 1, 1, 0, 3, 3, 1, 1, 1, 2, 0, 3, 1, 1, 1, 1, 0, 3, 2, 0, 1, 2, 3, 3, 2, 3, 3, 1, 0, 3, 1, 0, 1, 2, 2, 0, 1, 2, 2, 2, 0, 2, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 3, 2, 2, 2, 2, 3, 0, 3, 0, 2, 1, 0, 2, 2, 3, 0, 2, 2, 1, 3, 3, 3, 3, 1, 0, 3, 2, 3, 3, 2, 0, 2, 0, 3, 0, 2, 2, 0, 1, 3, 1, 0, 1, 1, 3, 2, 1, 0, 3, 0, 2, 1, 3, 3, 3, 0, 1, 2, 3, 3, 0, 1, 2, 2, 1, 1, 2, 3, 2, 1, 1, 1, 3, 2, 1, 3, 2, 1, 2, 2, 2, 1, 2, 0, 3, 2, 1, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 0, 2, 3, 0, 0, 3, 1, 0, 0, 3, 1, 0, 1, 1, 1, 1, 1, 2, 3, 2, 0, 3, 3, 3, 3, 1, 3, 3, 1, 0, 0, 3, 0, 3, 3, 2, 0, 2, 2, 3, 0, 2, 3, 3, 1, 1, 3, 3, 3, 0, 2, 0, 1, 0, 1, 1, 0, 1, 3, 3, 0, 3, 2, 3, 3, 1, 1, 0, 2, 3, 1, 2, 0, 3, 3, 3, 2, 1, 0, 2, 0, 1, 3, 0, 1, 2, 2, 0, 1, 1, 2, 2, 0, 3, 1, 2, 1, 1, 2, 3, 2, 3, 0, 2, 1, 2, 0, 2, 2, 1, 0, 1, 0, 1, 0, 0, 0, 3, 2, 0, 0, 2, 0, 1, 1, 3, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 1, 0, 2, 2, 0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 1, 0, 0, 1, 0, 2, 2, 1, 1, 0, 2, 0, 0, 2, 2, 2, 2, 1, 0, 0, 1, 1, 2, 2, 2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 0, 0, 0, 1, 1, 2, 2, 2, 0, 1, 0, 1, 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 2, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1], [1, 1, 1, 2, 1, 1, 1, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 1, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 1, 1, 2, 1, 2, 1, 0, 2, 0, 0, 2, 2, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nb0 = int(5.0) \\g in1\\nloopBreak% = 0\\nwhile abs(int(7.0)) \\le i0:{:\\nif b1:{:\\nloopBreak% = 0\\nwhile ( True or max(( res0 - in1 ), in0) == min(mod(( int(4.0) - in2 ),abs(i2)), mod(int(1.0),i0)) ):{:\\ni1 = ( int(9.0) - abs(int(4.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( min(i0, max(max(max(min(divInt(abs(divInt(( ( in2 * int(1.0) ) - abs(int(2.0)) ),divInt(int(4.0),in2))),int(6.0)), abs(min(res0, int(1.0)))), ( int(0.0) - mod(in0,i1) )), min(i2, i1)), ( int(0.0) - int(6.0) ))) * in1 )\\nin2 += i0\\n:}else:{:\\nloopBreak% = 0\\nwhile not ( max(min(in0, mod(in2,divInt(in0,int(0.0)))), min(mod(res0,divInt(mod(i2,min(min(i2, int(8.0)), abs(i1))),int(9.0))), int(1.0))) \\le in1 and min(abs(mod(int(9.0),abs(mod(divInt(i1,min(min(i0, min(min(( mod(int(5.0),max(( int(1.0) * int(6.0) ), ( mod(min(int(1.0), abs(max(mod(int(0.0),mod(int(3.0),max(int(7.0), ( min(max(int(0.0), divInt(in0,int(5.0))), abs(abs(min(in0, abs(int(2.0)))))) + mod(i1,int(9.0)) )))), max(min(int(3.0), int(4.0)), in2)))),max(abs(int(4.0)), int(2.0))) + int(1.0) ))) * ( i0 + abs(int(3.0)) ) ), int(1.0)), int(3.0))), int(5.0))),in2)))), max(( i0 * int(3.0) ), ( abs(abs(mod(abs(abs(int(8.0))),res0))) + min(int(7.0), in0) ))) != int(6.0) ):{:\\nin2 = mod(mod(in1,int(4.0)),mod(divInt(( in1 * ( ( min(res0, int(2.0)) + divInt(abs(in2),int(6.0)) ) - ( max(int(5.0), mod(min(min(divInt(mod(( ( max(i1, min(in2, divInt(int(9.0),in1))) - divInt(divInt(abs(in2),( ( int(9.0) - abs(max(max(min(int(9.0), in1), abs(( min(min(( i0 + ( i2 - abs(in2) ) ), divInt(divInt(i1,int(3.0)),abs(int(0.0)))), i0) * int(0.0) ))), int(1.0))) ) + abs(divInt(int(2.0),i0)) )),abs(i2)) ) + mod(int(4.0),max(min(min(in0, int(5.0)), ( max(max(i2, int(0.0)), divInt(divInt(int(0.0),int(1.0)),( abs(( int(8.0) + int(6.0) )) * int(3.0) ))) - abs(mod(int(0.0),abs(( int(1.0) - ( ( divInt(int(5.0),mod(i0,min(( int(1.0) - abs(mod(min(in1, min(abs(min(max(abs(int(8.0)), in1), mod(max(i2, in2),min(int(7.0), i1)))), i2)),min(int(7.0), res0))) ), int(3.0)))) * int(4.0) ) - int(7.0) ) )))) )), int(0.0))) ),int(7.0)),( min(( in1 * max(max(abs(abs(int(2.0))), abs(min(int(0.0), i1))), in0) ), max(in2, min(max(divInt(i2,mod(( max(i2, mod(min(abs(int(8.0)), int(3.0)),min(max(min(i1, divInt(i2,int(5.0))), in2), int(5.0)))) - int(1.0) ),in2)), int(8.0)), abs(min(i1, min(mod(max(abs(int(3.0)), int(4.0)),in1), ( max(int(4.0), divInt(i2,min(max(max(( int(0.0) + in0 ), ( i2 * int(0.0) )), min(in1, int(7.0))), ( mod(in0,int(6.0)) + int(6.0) )))) + mod(mod(in2,abs(int(0.0))),( int(4.0) * int(6.0) )) ))))))) * ( min(mod(max(in2, mod(int(1.0),mod(i2,( divInt(int(5.0),in0) - int(1.0) )))),i1), int(1.0)) + in2 ) )), in0), i2),abs(divInt(in1,res0)))) + mod(in1,int(6.0)) ) ) ),int(2.0)),max(in0, i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 100, 100, 5, 3, 2, 11, 5, 6, 1, 2, 97, 4, 413, 101, 119, 44, 58]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 2, 2, 1, 2, 1, 0], [1, 1, 1], [0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 1, 3, 1, 6, 2, 7, 2, 7, 3, 9, 1, 2, 9, 8, 6, 8, 4, 9, 4, 9, 7, 8, 2, 2, 2, 9, 1, 8, 3, 2, 0], [2, 2, 4, 3, 4, 3], [2, 1, 0, 1, 2, 1], [0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [0, 1, 3, 1, 2], [0, 1], [], [6, 5, 0, 1, 5, 5, 3, 4, 4, 4, 6, 2, 4, 6, 3, 6, 0, 5, 2, 3, 1, 2, 2, 2, 4, 1, 0, 4, 3, 3], [1], [3, 0, 2, 2, 1, 2, 0, 3, 0, 2, 2, 1, 1, 0, 2, 2, 3, 2, 1, 3, 0, 3, 1, 2, 1, 1, 3, 0, 2, 3, 2, 1, 1, 0, 1, 3, 2, 0, 1, 3, 0, 2, 2, 1, 0, 0, 0, 3, 2, 3, 3, 2, 1, 1, 1, 0, 2, 1, 3, 1, 0, 3, 2, 0, 0, 3, 0, 1, 0, 3, 2, 2, 1, 1, 2, 1, 1, 0, 2, 3, 2, 0, 3, 3, 3, 3, 1, 0, 0, 3, 1, 0, 1, 2, 0, 3, 3, 2, 0, 3, 0, 2, 0, 1, 0, 1, 1, 1, 2, 3, 3, 0, 2, 2, 3, 2, 1, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 1, 1, 1, 2, 2, 2], [2, 0, 1, 0, 1, 2, 0, 2, 0, 2, 0, 2, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\nb0 = True\\nb1 = abs(res0) == mod(( int(7.0) * ( in2 + min(i0, divInt(( int(9.0) - int(1.0) ),i1)) ) ),( ( min(mod(int(3.0),max(in2, abs(int(1.0)))), ( int(6.0) + int(2.0) )) - min(in2, divInt(max(( int(7.0) * int(2.0) ), in0),int(7.0))) ) + min(mod(in1,int(3.0)), min(in1, ( ( int(9.0) * in1 ) + res0 ))) ))\\nloopBreak% = 0\\nwhile i2 == min(( min(min(( int(1.0) * int(2.0) ), int(9.0)), in1) + ( int(8.0) * abs(int(6.0)) ) ), res0):{:\\nloopBreak% = 0\\nwhile abs(mod(in0,res0)) \\le min(i0, int(8.0)):{:\\nb2 = ( in2 \\ge min(divInt(( int(4.0) - int(9.0) ),mod(int(4.0),int(9.0))), i2) and False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( abs(( in0 - abs(max(min(max(int(7.0), i1), i2), min(int(8.0), i2))) )) + int(2.0) ) \\le ( i2 + max(max(divInt(in1,max(i1, ( i0 - int(2.0) ))), in1), int(2.0)) ):{:\\nin0 += int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not int(1.0) \\ge mod(abs(abs(in0)),( mod(abs(mod(int(8.0),int(3.0))),int(2.0)) + int(0.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 33, 33, 6, 6, 1, 11, 6, 5, 2, 0, 30, 1, 120, 30, 28, 19, 12]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [1, 9, 3], [5], [0], [], [0, 1], [0], [2], [], [], [5, 5, 6, 4, 3, 5], [], [3, 3, 2, 3, 2, 0, 1, 0, 3, 0, 3, 0, 3, 0, 2, 0, 1, 1], [0, 0, 0], [2, 1, 2, 0, 0, 0], [2, 0, 1], []], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not abs(max(( abs(( in2 * int(1.0) )) + in2 ), min(res0, min(in1, min(in0, ( in2 - int(9.0) )))))) != int(3.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 2, 1, 1, 0, 0, 6, 0, 18, 3, 6, 3, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [2], [], [], [], [], [], [], [], [], [0], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 2, 0, 2, 2, 0, 1, 2, 2, 0, 0], [0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 4, 5, 7, 2, 2, 3, 1, 6, 5, 2, 8, 1, 9, 9, 0, 3, 4, 8, 0, 4, 4, 5, 3, 7, 2, 8, 3, 3, 0, 6, 9, 6, 3, 2, 5, 7, 4, 5, 5, 4, 3, 9, 3, 2, 6, 5, 0, 1, 7, 6, 1, 3, 0, 1, 8, 1, 8, 5, 5, 4, 4, 0, 7, 2, 2, 5, 5, 3, 7], [5, 3, 5, 4, 3, 5, 2], [0, 0, 0, 1, 0], [1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 1, 3, 2, 1, 2, 3, 0, 0], [0, 1], [0, 0, 0, 0], [6, 4, 3, 6, 4, 3, 4, 4, 1, 1, 6, 6, 5, 0, 4, 3, 4, 5, 2, 4, 0, 4, 3, 3, 4, 5, 3, 3, 0, 4, 6, 6, 6, 1, 6, 0, 2, 5, 2, 2, 6, 3, 6, 5, 3, 1, 1, 2, 5, 0, 2, 4, 6, 0, 2, 4, 2, 2, 0, 4, 4, 6, 3, 1, 0, 5, 1, 4, 4, 2, 2, 2, 6, 3, 4, 1, 2, 6, 5, 5, 2, 6, 0, 4, 2, 6, 6, 4, 0, 2, 5, 1, 4, 6, 3, 1, 2, 5, 5, 1, 1, 0, 3], [0, 1, 0], [0, 2, 2, 0, 0, 1, 0, 0, 1, 3, 1, 3, 0, 3, 0, 1, 2, 1, 0, 3, 3, 0, 0, 3, 3, 3, 1, 2, 3, 0, 3, 2, 1, 2, 2, 0, 1, 0, 1, 0, 1, 2, 3, 2, 2, 2, 3, 2, 3, 0, 2, 1, 3, 0, 3, 2, 0, 0, 2, 1, 3, 0, 0, 0, 2, 3, 0, 0, 1, 0, 0, 0, 1, 1, 3, 0, 2, 0, 2, 0, 2, 2, 3, 0, 3, 1, 2, 2, 1, 2, 1, 1, 3, 3, 0, 3, 0, 0, 2, 3, 2, 3, 1, 3, 3, 2, 2, 1, 0, 0, 2, 0, 2, 3, 3, 2, 1, 3, 0, 3, 0, 2, 1, 0, 2, 2, 0, 2, 0, 3, 2, 3, 2, 1, 2, 2, 3, 2, 0, 3, 2, 0, 0, 2, 0, 2, 0, 0, 1, 3, 0, 0, 1, 3, 3, 3, 2, 2, 0, 0, 0, 3, 3, 2, 1, 1, 1, 0, 1, 2, 3, 2, 3, 0, 2, 2, 2, 3, 1, 3, 3, 3, 0, 3, 0, 3, 0, 0, 1, 0, 3, 2, 3, 1, 1, 1, 0, 3, 2, 1, 2, 0, 0, 3, 0, 3, 0, 3, 1, 3, 2, 0, 1, 1, 2, 1, 0, 0, 3, 1, 0, 2, 1, 3, 2, 2, 2, 3, 0, 3, 2, 2, 0, 3, 1, 0, 3, 0, 1, 3, 2, 3, 2, 3, 2, 1, 0, 1, 2, 3, 1, 1, 2, 1, 2, 1, 0, 3, 2, 3, 2, 0, 3, 3, 1, 2, 0, 3, 2, 3, 2, 1, 1, 1, 0, 3, 3, 1, 3, 0, 2, 3, 3, 3, 0, 0, 0, 1, 1, 0, 3, 0, 0, 3, 1, 2, 0, 1, 0, 3, 3, 0, 3, 0, 1, 0, 1, 3, 2, 0, 3, 1, 2, 0, 3, 3, 1, 3, 2, 1, 0, 2, 0, 1, 2, 3, 3, 0, 3, 3, 2, 0, 1, 3, 3, 0, 0, 2, 1, 3, 3, 0, 1, 1, 2, 0, 1, 3, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 2, 2, 1, 0, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 2, 2, 1, 1, 1, 1, 2, 1, 2], [0, 1, 2, 2, 1, 2, 0, 0, 0, 1, 1, 0, 1, 0, 2, 1, 2, 2, 2, 0, 0, 2, 1, 1, 1, 1, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 2, 2, 2, 1, 2, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( b0 or ( True and res0 != ( ( in1 + in0 ) - int(9.0) ) ) ):{:\\nif res0 \\ge in1:{:\\nin0 = int(3.0)\\n:}\\nif min(int(4.0), min(in1, min(in1, int(5.0)))) != divInt(int(7.0),i1):{:\\nloopBreak% = 0\\nwhile ( not abs(abs(i1)) \\le res0 or False ):{:\\nres0 *= max(min(min(int(2.0), mod(max(in2, max(divInt(int(2.0),mod(mod(i0,int(3.0)),in1)), int(1.0))),in0)), int(6.0)), divInt(min(divInt(( ( max(( min(in1, ( int(5.0) * abs(in2) )) - min(( i2 * in1 ), ( int(2.0) + max(i0, in1) )) ), in0) + divInt(max(in0, in1),int(8.0)) ) + in2 ),in0), in0),int(1.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nb0 = int(9.0) \\ge abs(i0)\\nif divInt(in1,( res0 - ( mod(max(res0, min(int(9.0), ( ( int(0.0) - ( int(3.0) + int(4.0) ) ) - max(abs(res0), max(i1, res0)) ))),( min(mod(abs(int(8.0)),min(max(( ( int(0.0) + i0 ) * i2 ), mod(in2,divInt(max(min(mod(int(4.0),min(i2, min(i2, ( int(4.0) - res0 )))), mod(divInt(in0,( res0 * min(mod(abs(( int(5.0) * ( mod(min(( in2 * min(( in0 + i1 ), ( i1 + mod(i2,in2) )) ), int(3.0)),min(i0, i2)) * int(7.0) ) )),abs(max(max(( ( in1 - res0 ) - i0 ), min(abs(divInt(int(2.0),int(8.0))), int(3.0))), i2))), int(3.0)) )),divInt(min(( min(in1, mod(mod(mod(abs(int(0.0)),abs(min(min(i2, abs(i2)), min(i0, in1)))),int(6.0)),in1)) - min(( min(int(9.0), int(6.0)) - int(3.0) ), res0) ), max(mod(int(2.0),( in0 + i1 )), abs(i0))),abs(in2)))), abs(int(5.0))),min(( i1 * int(7.0) ), int(4.0))))), ( int(5.0) + in1 ))), in1) + abs(int(5.0)) )) + i2 ) )) != mod(int(4.0),abs(( mod(divInt(min(i2, abs(( ( i2 - max(int(3.0), res0) ) * min(in0, int(9.0)) ))),min(mod(max(mod(max(( int(3.0) - in1 ), int(2.0)),( max(int(6.0), int(5.0)) + divInt(int(0.0),( int(1.0) - i1 )) )), max(( max(( i2 * abs(max(int(7.0), divInt(res0,min(mod(min(( int(6.0) * int(1.0) ), int(3.0)),in2), min(min(int(0.0), min(in2, divInt(min(abs(min(i2, res0)), i0),int(1.0)))), int(8.0)))))) ), in1) * min(i2, res0) ), min(int(1.0), ( res0 - int(8.0) )))),in1), abs(min(i0, max(i2, int(5.0)))))),in2) * int(5.0) ))):{:\\nloopBreak% = 0\\nwhile not ( b0 or min(divInt(i1,min(int(4.0), ( in1 - max(min(int(4.0), min(divInt(int(0.0),res0), mod(in0,int(7.0)))), mod(abs(abs(i1)),max(max(( i2 + int(2.0) ), max(max(in2, in2), ( int(2.0) + abs(max(i1, int(5.0))) ))), int(5.0)))) ))), mod(i1,int(3.0))) == abs(i0) ):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = int(7.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 6, 5, 71, 71, 7, 5, 4, 18, 7, 11, 2, 4, 103, 3, 350, 82, 97, 44, 39]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1], [0, 9, 4, 9], [1, 1], [1], [0], [0, 1, 0, 0, 1], [0, 0], [3, 2, 2], [], [], [2, 0, 2, 2], [], [2, 0, 1, 3, 0, 0, 1, 2, 3, 1, 0, 1], [0, 1], [1, 1], [2], [1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( i2 * int(0.0) ) \\g max(i0, i2) and not not int(9.0) \\g mod(max(int(4.0), i2),int(9.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 2, 1, 1, 5, 2, 3, 0, 0, 4, 0, 12, 2, 2, 1, 1]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1], [7], [4], [0, 1, 2], [], [1, 0], [0], [0], [], [], [2, 2], [], [3, 1, 0, 3, 0], [], [0, 2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(7.0), i2) \\le abs(i2)\\nb1 = b2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 3, 0, 2, 1, 1, 0, 0, 2, 0, 5, 0, 2, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1], [2, 1, 2, 1, 0, 1, 1], [1, 1], [1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 3, 8, 8, 4, 5, 7, 7, 7, 1, 0, 4, 1, 5, 4, 9, 1, 4, 2, 1, 8], [1, 4, 3], [0, 1, 0], [], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0], [2, 1, 2, 1], [0, 0], [], [3, 6, 3, 0, 4, 4, 0, 4], [1, 1], [2, 1, 1, 2, 0, 1, 1, 1, 3, 0, 1, 3, 2, 2, 1, 1, 2, 2, 3, 3, 1, 2, 1, 0, 3, 2, 3, 2, 3, 1, 2, 0, 1, 0, 2, 2, 2, 1, 3, 3, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 0, 3, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [2, 0, 2, 1, 1, 2, 1, 2, 0, 2], [1, 2, 0, 2, 2, 1, 2, 1, 2, 2], [0, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not True:{:\\nin0 -= divInt(int(2.0),int(9.0))\\nloopBreak% = 0\\nwhile not divInt(res0,int(3.0)) \\g int(8.0):{:\\nin0 *= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = abs(i0) \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = min(divInt(( int(5.0) + int(7.0) ),( divInt(abs(max(int(7.0), ( int(7.0) * in1 ))),max(( abs(( max(int(1.0), mod(in1,int(0.0))) * i0 )) - mod(( ( int(4.0) * abs(min(int(1.0), int(5.0))) ) - int(4.0) ),int(9.0)) ), int(1.0))) * int(4.0) )), ( int(2.0) * mod(int(1.0),in1) )) \\ge abs(int(8.0))\\nb0 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 22, 22, 3, 3, 0, 7, 3, 4, 2, 0, 8, 2, 53, 15, 10, 10, 7]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [0, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 2, 4, 0, 6, 3, 2, 2, 7, 1, 3, 1, 7], [0, 2], [], [], [1, 0, 1], [0, 0], [2], [], [0], [5, 6, 0, 0, 0, 2, 5, 0, 3, 4, 4, 1, 0, 5, 4], [0, 1], [0, 3, 3, 3, 2, 1, 1, 1, 2, 3, 2, 0, 3, 3, 1, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 3, 3, 1, 0, 1, 2, 3, 3, 1, 1, 1, 2, 3, 3, 1, 0, 0, 3, 2, 3, 3, 0, 2, 0, 3, 0, 1, 3, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], [2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 2, 2, 0, 2, 1, 2, 2, 0], [0, 2, 2, 1, 0, 2, 1, 2, 2, 0], [0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 \\l abs(abs(max(( int(0.0) + int(1.0) ), int(2.0)))):{:\\nloopBreak% = 0\\nwhile not ( abs(divInt(res0,abs(min(int(4.0), ( divInt(( max(divInt(mod(( ( int(0.0) * int(6.0) ) * abs(min(int(3.0), i0)) ),int(2.0)),( abs(abs(int(2.0))) - int(7.0) )), int(1.0)) + ( abs(min(int(3.0), i0)) * i0 ) ),abs(mod(max(abs(i2), ( in2 - abs(i0) )),int(1.0)))) * min(in0, in1) ))))) * in1 ) == i1:{:\\ni0 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 += in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 14, 14, 2, 0, 0, 3, 2, 1, 0, 1, 15, 2, 59, 14, 18, 10, 5]}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 0], [1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 4, 7, 2, 0, 0, 6], [4], [], [], [1], [0], [], [], [], [5, 5, 2, 0, 3, 0, 0, 2, 1], [1, 0, 1], [0, 2, 1, 2, 1, 1, 1, 3, 2, 3, 0, 1, 0, 3, 1, 3, 2, 3, 0, 0, 0, 2, 1, 1], [0, 1, 1, 1, 1], [1, 0, 2, 0, 0], [1, 0, 0], [1, 1, 0, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= in2\\nloopBreak% = 0\\nwhile ( int(9.0) + mod(int(6.0),int(4.0)) ) \\le int(7.0):{:\\ni2 = max(mod(min(i0, int(2.0)),in0), abs(int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += min(divInt(min(i0, i2),i1), divInt(int(0.0),int(6.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 8, 8, 1, 0, 0, 1, 1, 0, 0, 0, 9, 3, 24, 5, 5, 3, 4]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1, 1], [6, 7], [], [], [0], [0, 0, 0, 0], [], [3, 1, 2, 1], [0, 1], [0], [4, 3, 2, 5, 2, 0, 4, 6, 5, 6], [1], [2, 2, 3, 0, 3, 0, 2, 2, 3, 1, 3, 0, 3, 0, 3, 2, 3, 0, 0, 0, 2, 0, 2, 1, 0], [0, 1, 1, 1, 0, 0, 0], [1, 2, 2, 2, 0, 1, 2], [2, 0, 2, 0, 1], [0, 0, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( True and not False ):{:\\nin1 *= ( divInt(max(in0, abs(i2)),divInt(divInt(abs(int(6.0)),abs(in2)),min(i2, max(( abs(i0) + in1 ), res0)))) * ( in2 + ( int(7.0) - res0 ) ) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 0, 0, 1, 4, 0, 4, 2, 1, 10, 1, 25, 7, 7, 5, 3]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1], [2, 2, 2, 0, 1, 2, 1], [0, 0, 0, 1], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 8, 6, 8, 9, 3, 7, 2, 8, 2, 6, 5, 5, 0, 7, 9, 1, 2, 4, 3, 9, 0, 7, 4, 4, 1, 2, 9, 2, 8, 9, 2, 9, 6, 2, 4, 2, 4, 9, 5, 8, 6, 4, 4, 2, 6, 3, 5, 8, 4, 4, 4, 7, 4, 6, 7, 6, 9, 3, 9, 6, 7, 7, 7, 9, 9, 1, 7, 2, 0, 4, 4, 2, 4, 9, 7, 0, 2, 9, 6, 5, 6, 0, 1, 2, 2, 3, 9, 4, 6, 4, 1, 7, 1, 4, 3, 0, 7, 0, 3, 1, 5, 9, 1, 2, 3, 4, 5, 2, 8, 8, 7, 0, 0, 2, 4, 4, 2, 8, 4, 8, 5, 0, 7, 0, 6, 6, 3, 2], [4, 3, 2, 0, 1, 4], [0, 1, 1, 0, 2], [0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 3, 2, 3, 3, 0, 0], [], [0, 0, 1], [5, 1, 3, 1, 4, 2, 3, 5, 0, 5, 2, 1, 0, 1, 6, 3, 5, 1, 4, 6, 5, 0, 6, 5, 4, 2, 1, 2, 3, 1, 2, 6, 1, 1, 4, 6, 2, 5, 0, 6, 4, 0, 3, 1, 3, 4, 1, 1, 6, 1, 4, 0, 1, 3, 5, 5, 4, 1, 6, 5, 6, 2, 4, 1, 6, 3, 2, 4, 4, 3, 1, 3, 2, 1, 4, 1, 0, 3, 5, 6, 0, 2, 5, 2, 4, 2, 0, 0, 0, 4, 3, 3, 4, 1, 2, 3, 4, 0, 0, 3, 5, 3, 0, 6, 4, 1, 1, 3, 2, 3, 0, 4, 6], [1], [0, 1, 2, 3, 1, 3, 1, 2, 1, 3, 3, 3, 1, 2, 3, 2, 1, 0, 2, 1, 2, 1, 3, 3, 0, 2, 1, 1, 2, 2, 2, 1, 1, 1, 3, 2, 1, 3, 2, 3, 1, 2, 1, 3, 1, 2, 2, 0, 1, 2, 1, 0, 3, 1, 2, 3, 3, 2, 1, 2, 1, 2, 1, 2, 3, 3, 1, 1, 3, 2, 3, 3, 0, 2, 3, 2, 0, 1, 1, 0, 3, 2, 3, 2, 1, 2, 2, 0, 0, 0, 2, 3, 2, 2, 2, 0, 2, 2, 0, 2, 1, 3, 0, 2, 2, 3, 2, 0, 0, 2, 0, 2, 0, 3, 2, 2, 1, 1, 0, 0, 2, 2, 3, 0, 3, 1, 1, 0, 1, 3, 2, 3, 3, 3, 0, 1, 0, 2, 3, 2, 3, 3, 2, 0, 2, 3, 3, 2, 1, 3, 3, 0, 0, 3, 0, 2, 3, 0, 2, 3, 2, 2, 1, 3, 0, 3, 0, 2, 1, 2, 2, 2, 0, 2, 2, 3, 1, 2, 3, 1, 2, 3, 1, 1, 2, 1, 0, 1, 1, 3, 1, 3, 0, 3, 0, 2, 3, 2, 1, 3, 2, 3, 3, 0, 3, 2, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 3, 3, 3, 0, 3, 3, 3, 0, 0, 1, 1, 2, 3, 0, 2, 3, 0, 0, 2, 1, 1, 3, 1, 3, 2, 2, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 3, 2, 1, 0, 1, 2, 1, 0, 1, 2, 0, 3, 3, 3, 1, 2, 0, 3, 2, 2, 1, 2, 2, 0, 3, 3, 3, 3, 3, 1, 0, 3, 3, 1, 1, 3, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2, 1, 0, 3, 1, 2, 1, 2, 2, 1, 0, 0, 1, 2, 1, 3, 2, 1, 2, 2, 1, 1, 0, 1, 0, 3, 0, 2, 2, 2, 0, 0, 2, 1, 0, 3, 3, 3, 3, 3, 2, 3, 0, 1, 0, 0, 1, 3, 3, 3, 1, 2, 2, 0, 2, 1, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 3, 1, 3, 0, 3, 1, 0, 0, 0, 3, 1, 2, 2, 0, 1, 1, 3, 2, 0, 0, 0, 3, 1, 2, 1, 3, 2, 1, 3, 1, 1, 1, 0, 0, 1, 2, 1, 1, 0, 1, 3, 3, 2, 1, 2, 3, 1, 0, 3, 0, 2, 0, 2, 3, 3, 2, 3, 1, 3, 0, 2, 1, 1, 0, 2, 2, 0, 2, 3, 1, 3, 1, 1, 0, 1, 2, 1, 1, 0, 1, 2, 0, 2, 2, 3, 0, 2, 2, 1, 2, 0, 2, 1, 3, 3, 2, 2, 3, 2, 2, 3, 2, 1, 2, 1, 1, 1, 0, 3, 2, 1, 1, 1, 2, 2, 0, 3, 0, 2, 0, 3, 2, 2, 3, 3, 0, 2, 2, 2, 0, 0, 1, 0, 0, 3, 3, 0, 3, 0, 1, 0, 0, 3, 3, 3, 2, 2, 3, 1, 1, 1, 0, 3, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 1, 0, 2, 2, 2, 2, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1, 2, 0, 0, 2, 0, 1, 2, 1, 0, 2, 0, 1, 2, 0, 0, 0, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 0, 2, 2, 2, 1, 2, 1, 0, 2, 1, 2, 0, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 2, 0, 1, 0, 2, 1, 2, 0, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 1, 0, 1, 1, 0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 0, 2, 2, 0, 1, 2, 1, 2, 1, 0, 1, 2, 2, 2], [2, 2, 1, 1, 0, 1, 1, 0, 0, 2, 2, 2, 1, 0, 2, 1, 2, 1, 0, 0, 1, 0, 0, 1, 0, 2, 2, 0, 0, 1, 2, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 2, 1, 1, 2, 1, 1, 2, 2, 0, 0, 2, 2, 1, 0, 2, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 159, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 \\le int(6.0):{:\\nif b0:{:\\nif ( max(int(3.0), max(int(8.0), ( int(6.0) * max(min(abs(int(8.0)), divInt(abs(( int(9.0) * i1 )),( int(3.0) - ( int(7.0) - abs(abs(in0)) ) ))), mod(int(2.0),int(8.0))) ))) + ( ( ( int(2.0) - int(6.0) ) - int(5.0) ) + max(( int(5.0) + max(divInt(abs(int(0.0)),( int(7.0) * min(int(9.0), ( mod(i1,int(1.0)) * divInt(int(2.0),in1) )) )), max(int(4.0), ( min(abs(( int(3.0) * mod(int(9.0),( int(0.0) - ( max(min(int(7.0), int(4.0)), min(( max(abs(i2), ( min(mod(in0,int(4.0)), int(1.0)) + in2 )) * max(( abs(( int(2.0) - divInt(mod(i0,in2),i2) )) * ( min(( ( ( i1 - ( ( i0 + ( int(9.0) + min(i1, divInt(( abs(mod(res0,in0)) - ( in2 + ( i1 + min(( mod(int(2.0),int(8.0)) - in1 ), res0) ) ) ),( mod(max(in2, abs(int(9.0))),int(2.0)) + i0 ))) ) ) * int(9.0) ) ) * max(( min(abs(min(res0, int(6.0))), in2) + mod(max(( abs(min(mod(in1,mod(min(min(divInt(int(2.0),max(abs(i2), i1)), min(i2, divInt(abs(in0),( abs(( divInt(int(4.0),abs(i1)) + max(i2, ( int(2.0) - mod(divInt(( res0 * ( divInt(abs(int(4.0)),divInt(abs(int(9.0)),( max(int(5.0), int(8.0)) - mod(int(6.0),i1) ))) + int(4.0) ) ),int(4.0)),max(int(2.0), max(i1, max(in1, ( min(mod(int(6.0),abs(divInt(abs(abs(res0)),max(( mod(mod(i2,int(3.0)),in2) - int(5.0) ), divInt(divInt(i0,divInt(abs(max(min(res0, abs(max(abs(in1), i0))), int(8.0))),int(4.0))),( min(in0, mod(min(i1, in0),( int(4.0) - int(4.0) ))) - max(int(7.0), max(( divInt(min(in1, int(4.0)),mod(i1,int(6.0))) + divInt(abs(( min(max(( int(7.0) + i1 ), int(6.0)), divInt(int(9.0),res0)) - int(3.0) )),( i1 - max(min(abs(int(9.0)), divInt(in1,abs(divInt(( int(6.0) - ( ( i0 * min(max(min(abs(max(int(7.0), i1)), abs(min(int(7.0), int(7.0)))), abs(int(9.0))), int(9.0)) ) - divInt(in0,in2) ) ),int(1.0))))), in2) )) ), min(min(in1, mod(int(7.0),i1)), abs(int(2.0))))) )))))), mod(int(0.0),( divInt(int(4.0),res0) - in2 ))) - int(4.0) ))))) )) )) - ( int(2.0) * abs(divInt(int(4.0),( divInt(int(9.0),int(7.0)) * res0 ))) ) )))), int(0.0)),i2)), min(in1, ( mod(( i1 - res0 ),divInt(int(2.0),in0)) + min(abs(abs(abs(abs(( max(i2, int(9.0)) - in1 ))))), in1) )))) * int(6.0) ), min(max(max(int(5.0), ( ( in0 - mod(int(6.0),( min(int(0.0), i1) * in0 )) ) - int(1.0) )), int(2.0)), i2)),i1) ), int(2.0)) ) + min(int(3.0), max(in1, max(int(9.0), i1))) ), i0) + in0 ) ), min(int(4.0), ( divInt(in2,int(6.0)) * int(4.0) ))) ), abs(mod(res0,i0)))) - i2 ) )) )), max(int(1.0), ( int(7.0) - max(( int(1.0) * abs(int(4.0)) ), int(3.0)) ))) - int(0.0) ))) ), in2) ) ) \\ge i2:{:\\nin1 -= int(7.0)\\n:}else:{:\\nb1 = ( divInt(int(0.0),int(3.0)) == i2 and not int(1.0) \\l min(min(divInt(int(5.0),mod(min(int(9.0), i0),min(i0, ( i0 * ( min(max(( abs(int(1.0)) * min(in1, ( int(2.0) + int(3.0) )) ), in0), divInt(mod(in0,mod(max(int(4.0), abs(int(5.0))),int(2.0))),in1)) + int(8.0) ) )))), mod(int(8.0),int(7.0))), i1) )\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( ( b1 and b0 ) and int(0.0) \\g divInt(i2,( ( abs(in0) * ( ( int(0.0) * divInt(in1,( int(2.0) - min(abs(mod(mod(abs(( mod(min(( int(4.0) + mod(int(4.0),int(2.0)) ), int(8.0)),i0) * abs(mod(int(4.0),int(8.0))) )),int(5.0)),divInt(( i0 + abs(in0) ),mod(in2,min(( mod(max(abs(in0), divInt(mod(( i0 - res0 ),int(0.0)),in1)),i1) - max(abs(i1), max(in0, int(7.0))) ), i2))))), in0) )) ) + min(max(abs(( divInt(abs(int(0.0)),int(6.0)) + int(6.0) )), i0), abs(int(3.0))) ) ) + in1 )) ):{:\\nb2 = int(2.0) \\le res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 130, 130, 6, 5, 3, 13, 6, 7, 0, 3, 113, 1, 521, 146, 133, 78, 69]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1], [2, 0, 2, 1, 0, 0, 1], [1, 1], [0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 3, 7, 9, 2, 4, 3, 2, 0], [5, 2, 0], [0, 1, 0, 1, 1], [0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0], [3, 3, 2, 3, 0, 0, 1, 2, 0, 2], [1], [], [3, 5, 4, 6, 0, 4, 1, 4, 3, 2], [1, 0, 0], [2, 0, 0, 2, 3, 3, 2, 2, 1, 0, 1, 3, 1, 2, 1, 1, 1, 3, 2, 1, 3, 0, 3, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1], [2, 0, 2, 2, 2, 1], [1, 0, 0], [1, 1, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( ( in0 - in2 ) != mod(abs(min(mod(divInt(int(9.0),in1),int(9.0)), abs(int(3.0)))),( int(7.0) + int(9.0) )) and not ( b0 and b1 ) ) and False ):{:\\nb0 = int(2.0) == abs(divInt(int(4.0),abs(res0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not b1:{:\\ni0 += max(int(3.0), int(2.0))\\nb1 = not in1 \\l int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = in1\\nin0 = i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 10, 10, 3, 5, 3, 13, 3, 10, 1, 0, 10, 3, 29, 6, 6, 3, 4]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 0, 0, 1, 0, 2, 2, 2, 2, 2, 1, 2, 0], [1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 9, 1, 8, 9, 4, 3, 4, 5, 7, 8, 5, 3, 7, 0, 7, 1, 2, 8, 7, 8, 4, 7, 3, 5, 1, 1, 5, 9, 0, 4, 5, 3, 5, 4, 0, 7, 1, 8, 7, 4, 5, 1, 4, 9, 2, 3, 5, 2, 4, 5, 8, 0], [0, 2, 2, 5, 4, 5, 4], [2, 1, 0, 0, 2, 1, 1], [1], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0], [], [0, 0, 1, 0], [1, 6, 5, 0, 3, 3, 4, 3, 6, 6, 1, 6, 4, 1, 2, 6, 1, 6, 6, 5, 6, 6, 2, 1, 2, 6, 4, 3, 0, 6, 4, 4, 6, 3, 0, 3, 6, 2, 3, 4, 3, 5, 5, 5, 1, 1, 2, 0, 5, 3, 5, 4, 0, 5, 4], [1, 1, 1, 0, 0], [1, 1, 3, 2, 3, 3, 0, 2, 3, 0, 0, 1, 2, 2, 1, 3, 1, 3, 0, 1, 3, 3, 1, 3, 0, 3, 3, 2, 0, 3, 3, 3, 0, 1, 0, 1, 1, 2, 2, 2, 0, 3, 1, 2, 1, 2, 2, 2, 3, 1, 1, 3, 0, 0, 3, 3, 0, 3, 3, 1, 1, 1, 1, 2, 2, 0, 1, 2, 2, 0, 3, 3, 0, 3, 0, 1, 3, 2, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 1, 3, 2, 2, 3, 1, 3, 1, 0, 3, 1, 3, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 0, 2, 2, 2, 1, 3, 0, 0, 3, 2, 0, 1, 2, 3, 0, 0, 2, 1, 1, 3, 1, 2, 3, 3, 2, 1, 0, 1, 2, 0, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 3, 0, 3, 0, 1, 2, 0, 0, 3, 3, 2, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 2, 1, 1, 3, 2, 3, 1, 2, 0, 3, 2, 2, 2, 0, 3, 0, 3, 0, 1, 0, 2, 1, 0, 0, 0, 1, 0, 1, 2, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [2, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 2, 0, 0, 2, 1, 0, 0, 2, 2, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 0, 2, 0, 1, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 2, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2], [0, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 1, 1, 2, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(0.0) \\l int(3.0)\\ni1 += abs(( min(max(res0, ( max(in2, i0) * int(9.0) )), ( divInt(int(1.0),max(int(8.0), max(in0, int(9.0)))) * min(max(int(4.0), min(in0, max(min(mod(in1,abs(min(min(in0, int(3.0)), res0))), int(4.0)), int(5.0)))), ( ( ( res0 * abs(int(7.0)) ) * mod(int(8.0),( mod(mod(max(int(5.0), int(3.0)),min(i1, res0)),min(abs(in1), abs(max(int(7.0), int(0.0))))) * int(7.0) )) ) - int(1.0) )) )) - divInt(( i1 * int(2.0) ),( ( i2 * min(max(res0, min(i1, int(8.0))), abs(( res0 - int(7.0) ))) ) - max(mod(divInt(min(int(8.0), int(4.0)),min(int(7.0), int(3.0))),max(( ( abs(int(5.0)) * min(int(1.0), res0) ) - min(int(1.0), abs(min(in2, max(abs(abs(max(int(5.0), divInt(min(( int(9.0) + res0 ), ( divInt(mod(int(0.0),abs(res0)),i2) - min(( i1 - int(4.0) ), ( max(i2, res0) * ( int(5.0) - int(3.0) ) )) )),max(int(5.0), ( abs(min(( int(4.0) - in1 ), int(0.0))) * ( in0 + abs(max(i0, min(res0, int(7.0)))) ) )))))), in1)))) ), in1)), res0) )) ))\\nloopBreak% = 0\\nwhile b1:{:\\nin0 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 -= res0\\ni2 = abs(in0)\\nb0 = ( min(in1, int(1.0)) == ( in0 + in2 ) or max(min(( in2 + in2 ), int(8.0)), int(7.0)) == int(4.0) )\\nif int(5.0) != divInt(i1,int(1.0)):{:\\nif b0:{:\\nloopBreak% = 0\\nwhile int(4.0) \\le ( int(9.0) - int(2.0) ):{:\\nloopBreak% = 0\\nwhile min(mod(min(int(3.0), ( i1 * max(divInt(mod(( i2 + min(i0, abs(in2)) ),int(5.0)),in0), ( int(2.0) - in2 )) )),in1), i0) != int(4.0):{:\\nif b2:{:\\nin2 = in1\\n:}else:{:\\nif int(5.0) \\le divInt(int(8.0),int(0.0)):{:\\nb1 = b1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 7, 8, 54, 54, 7, 7, 1, 12, 7, 5, 0, 4, 55, 5, 204, 43, 57, 30, 16]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1, 1, 1, 1, 1], [8, 0, 2, 9, 3, 8], [2], [], [0], [0, 0, 1], [0], [3, 1], [0], [], [3, 6, 2, 1, 0, 1], [1], [1, 2, 2, 3, 0, 2, 1, 2, 0, 2, 1, 1, 3, 3, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [0, 1, 1], [2, 0, 0, 0], [0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( True and int(8.0) == ( divInt(min(in0, ( int(0.0) * ( res0 + mod(int(2.0),int(9.0)) ) )),max(max(i2, i1), int(3.0))) + i0 ) ):{:\\ni1 += int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 6, 6, 1, 0, 1, 3, 1, 2, 1, 0, 6, 1, 19, 5, 3, 4, 2]}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 0, 0, 1, 0], [], [0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [9, 1, 6, 1, 9, 5, 7, 5, 6, 9, 0, 7, 3, 7, 2, 4, 5, 2, 1, 2, 2, 8, 1], [2], [2, 2, 1, 0], [1], [0, 0, 0, 0, 1], [0], [3, 1, 1, 0], [1, 1], [], [6, 2, 4, 1, 2, 0, 2, 6, 3, 5, 1, 5, 6, 3, 2, 1, 5, 3, 5, 0, 6, 5, 6, 0, 2, 6], [0, 1], [0, 2, 3, 2, 0, 3, 3, 0, 2, 2, 3, 0, 0, 3, 0, 1, 1, 2, 3, 2, 0, 1, 1, 2, 2, 2, 2, 2, 0, 3, 1, 0, 3, 3, 3, 0, 2, 2, 1, 3, 2, 0, 3, 1, 2, 0, 2, 1, 3, 0, 3, 3, 0, 0, 0, 2, 1, 1, 0, 1, 0, 1, 2, 1, 1, 2, 3, 3, 2, 0, 1, 3, 3, 0, 1, 1, 3, 3, 0, 2, 3, 3, 0, 2, 0, 3, 0, 1, 3, 1, 2, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 2, 1, 0, 0, 0, 2, 0, 1, 2, 2, 1, 2, 2, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( False or False )\\nres0 = i2\\nb2 = b1\\nin1 += ( max(mod(i1,max(max(i2, ( ( max(i0, i2) - min(res0, int(9.0)) ) + int(1.0) )), ( max(( in0 + int(6.0) ), int(1.0)) + mod(divInt(( mod(mod(in2,max(int(9.0), i1)),min(max(abs(in2), ( ( int(5.0) + max(mod(res0,min(int(7.0), divInt(in0,( int(5.0) + min(i2, min(abs(i1), in2)) )))), in0) ) + mod(int(6.0),int(9.0)) )), in2)) * int(0.0) ),i0),int(7.0)) ))), divInt(int(3.0),int(7.0))) - ( min(max(( res0 + int(2.0) ), abs(abs(in2))), int(4.0)) - int(5.0) ) )\\nb0 = max(abs(res0), ( abs(max(i0, mod(i2,max(res0, int(2.0))))) + min(int(1.0), divInt(int(2.0),int(2.0))) )) == int(81.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 0, 5, 23, 23, 1, 4, 1, 5, 1, 4, 2, 0, 26, 2, 94, 23, 25, 13, 11]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 0, 0, 2, 2, 0, 1, 2, 1, 2, 2, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 0, 4, 3, 0, 5, 4, 4, 0, 1, 2, 8, 6, 0, 6, 9, 8, 8, 5, 9, 4, 8, 1, 4, 1, 8, 8, 9, 1, 2, 1, 7, 3, 9, 9, 7, 5, 9, 5, 2, 0, 3, 4, 0, 2, 4, 1, 3, 6, 6, 8, 9, 9, 0, 4, 8, 0, 1, 0, 7, 7, 6, 6, 3, 8, 0, 3, 3, 3, 8], [2, 2, 5, 0, 0, 2, 2, 5, 5, 2, 1], [2, 1, 1, 0, 2, 1, 0, 0, 0, 0], [0, 1, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 0, 3, 2, 0, 0, 1, 3, 0, 0], [0], [0, 1, 1, 0], [5, 6, 2, 2, 0, 5, 6, 2, 5, 1, 6, 4, 6, 6, 4, 3, 2, 4, 2, 2, 2, 4, 4, 4, 2, 5, 2, 6, 4, 0, 4, 3, 6, 0, 6, 6, 1, 6, 5, 6, 3, 5, 5, 6, 6, 6, 0, 2, 2, 6, 3, 5, 1, 6, 4, 1, 4, 2, 5, 3, 1, 6, 6, 0, 2, 5, 0, 3, 5, 3], [1, 0], [0, 3, 0, 3, 2, 0, 2, 1, 2, 2, 1, 1, 3, 0, 1, 2, 1, 1, 1, 2, 2, 2, 3, 2, 1, 1, 2, 0, 2, 3, 3, 2, 3, 0, 0, 3, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 2, 1, 0, 1, 2, 1, 2, 3, 0, 2, 3, 0, 2, 2, 1, 0, 1, 3, 3, 3, 0, 0, 1, 3, 2, 1, 2, 1, 2, 3, 0, 3, 2, 0, 3, 0, 3, 1, 3, 3, 0, 2, 2, 2, 3, 2, 0, 3, 0, 3, 2, 1, 2, 1, 1, 1, 3, 3, 1, 0, 1, 3, 1, 2, 0, 2, 0, 0, 1, 1, 3, 0, 2, 3, 0, 0, 2, 1, 0, 3, 1, 0, 1, 0, 0, 1, 0, 0, 3, 3, 0, 2, 1, 1, 3, 1, 2, 3, 2, 3, 2, 3, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 2, 3, 0, 1, 1, 2, 1, 2, 2, 1, 1, 0, 1, 3, 0, 1, 3, 3, 2, 0, 0, 1, 2, 3, 3, 0, 3, 1, 2, 2, 0, 3, 1, 0, 2, 1, 0, 1, 3, 2, 3, 1, 1, 3, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 1, 2, 3, 0, 3, 3, 3, 2, 3, 1, 1, 0, 2, 0, 0, 1, 3, 0, 2, 2, 1, 3, 2, 2, 1, 2, 2, 3, 3, 1, 0, 3, 2, 0, 2, 3, 0, 0, 1, 0, 1, 1, 2, 1, 0, 1, 3, 3, 3, 1, 0, 0, 2, 1, 2, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 2, 1, 0, 1, 0, 2, 1, 1, 0, 1, 2, 0, 1, 2, 2, 2, 2, 1, 1, 2, 0, 0, 1, 0, 1, 2, 1, 1], [0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 2, 0, 1, 1, 1, 1, 1, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 == min(res0, min(( i2 + ( int(3.0) * divInt(( int(1.0) + int(0.0) ),abs(i2)) ) ), int(4.0))):{:\\nif mod(int(3.0),int(0.0)) == int(5.0):{:\\ni0 -= ( ( ( min(mod(int(4.0),int(4.0)), ( in2 - ( min(min(( abs(res0) + i2 ), min(int(0.0), ( divInt(mod(in2,i1),int(1.0)) + ( ( res0 + in1 ) - divInt(mod(mod(mod(int(2.0),res0),int(8.0)),( int(6.0) * ( abs(res0) * ( min(in1, ( divInt(int(0.0),in0) + int(6.0) )) - max(min(abs(i2), in1), int(9.0)) ) ) )),max(( int(8.0) - ( int(8.0) - divInt(max(i2, max(divInt(i2,abs(i2)), min(int(5.0), max(abs(in1), ( ( divInt(max(( in1 - abs(in1) ), abs(mod(int(9.0),( int(4.0) - int(8.0) )))),int(1.0)) + min(max(int(4.0), i2), int(1.0)) ) + max(int(8.0), ( in2 * ( i2 + res0 ) )) ))))),int(8.0)) ) ), int(9.0))) ) ))), max(in1, mod(max(i0, in1),divInt(int(1.0),in0)))) * min(int(2.0), res0) ) )) - int(1.0) ) * i0 ) + res0 )\\n:}else:{:\\nloopBreak% = 0\\nwhile int(7.0) != res0:{:\\nloopBreak% = 0\\nwhile i1 \\l abs(max(res0, divInt(int(3.0),int(9.0)))):{:\\nb2 = ( max(int(9.0), ( max(( abs(( abs(in2) + int(7.0) )) + int(5.0) ), res0) * divInt(divInt(int(9.0),max(in0, min(( max(in2, int(5.0)) * int(2.0) ), mod(int(0.0),mod(mod(int(3.0),int(4.0)),in2))))),int(0.0)) )) \\l min(res0, int(2.0)) and not b1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nb1 = ( abs(max(mod(res0,res0), int(4.0))) == ( max(min(i0, max(int(1.0), ( ( i2 + abs(int(3.0)) ) * i2 ))), mod(int(6.0),res0)) - int(6.0) ) or not min(mod(max(int(8.0), int(9.0)),abs(in0)), in2) == i1 )\\nloopBreak% = 0\\nwhile int(9.0) != int(0.0):{:\\nif b0:{:\\nb2 = b1\\n:}else:{:\\nb0 = True\\n:}\\nif ( ( mod(int(4.0),int(8.0)) + res0 ) != int(0.0) or ( abs(in1) - abs(abs(max(divInt(max(int(1.0), int(0.0)),i1), ( in1 * i2 )))) ) == int(7.0) ):{:\\nin2 = abs(in0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile mod(mod(int(7.0),min(( mod(int(6.0),( mod(min(max(int(6.0), i1), min(divInt(res0,divInt(max(res0, i0),int(3.0))), i2)),int(8.0)) * int(0.0) )) - mod(int(3.0),in2) ), int(3.0))),abs(max(max(int(3.0), i0), in0))) \\g ( int(8.0) + ( in2 + in0 ) ):{:\\nb0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 9, 7, 71, 71, 11, 10, 3, 22, 11, 11, 1, 4, 70, 2, 273, 72, 62, 39, 34]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 0, 2, 2, 2, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 6, 5, 9, 1, 9, 6, 0, 3, 7, 3, 0, 0, 8, 0, 0, 0, 4, 3, 2, 7, 1, 2, 8, 6, 1, 4, 7, 7, 8, 9, 7, 3, 7, 1, 8, 4, 1, 5, 9, 8, 0, 1, 3, 5, 9, 1, 1, 6, 9, 1, 1, 7, 3, 7, 2, 0], [3, 5, 4, 2], [0, 0, 0, 2], [], [1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 2, 2, 1], [0, 1], [0, 0, 0, 0], [5, 2, 0, 1, 3, 5, 0, 0, 1, 2, 4, 5, 3, 6, 4, 0, 1, 0, 2, 1, 3, 2, 3, 6, 2, 4, 0, 6, 3, 0, 4, 3, 6, 1, 4, 4, 2, 5, 3, 5, 1, 4, 2, 4, 0, 0, 6, 4, 0, 5, 6, 1, 1, 5, 6, 1, 2, 5, 3, 5, 3, 2, 4, 4, 5, 3, 4, 1, 4, 1, 1, 5, 2, 1], [1, 1], [2, 0, 0, 1, 1, 3, 3, 0, 3, 1, 3, 3, 1, 0, 1, 0, 3, 0, 3, 2, 3, 0, 3, 0, 1, 0, 3, 3, 3, 3, 2, 2, 1, 2, 0, 3, 2, 0, 2, 2, 0, 2, 0, 3, 3, 1, 3, 1, 3, 2, 2, 3, 2, 0, 1, 1, 1, 1, 1, 2, 2, 0, 3, 3, 0, 3, 0, 3, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 1, 2, 1, 2, 2, 0, 1, 2, 2, 3, 2, 1, 2, 3, 2, 0, 2, 1, 3, 2, 1, 3, 2, 3, 1, 2, 3, 2, 3, 1, 3, 0, 3, 0, 3, 2, 0, 1, 2, 0, 2, 0, 3, 2, 2, 3, 1, 3, 3, 3, 3, 2, 3, 3, 2, 1, 0, 2, 0, 2, 1, 0, 3, 0, 0, 2, 2, 0, 0, 1, 0, 1, 1, 3, 2, 1, 1, 1, 3, 0, 0, 2, 1, 1, 3, 1, 3, 0, 1, 0, 0, 3, 2, 3, 2, 2, 0, 3, 2, 2, 2, 1, 1, 2, 3, 1, 1, 3, 2, 3, 0, 0, 1, 1, 3, 0, 3, 1, 3, 0, 0, 2, 0, 3, 1, 0, 2, 2, 0, 3, 2, 3, 2, 0, 0, 3, 0, 2, 1, 3, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 3, 2, 1, 0, 1, 2, 2, 0, 3, 0, 3, 0, 3, 3, 0, 1, 3, 0, 2, 2, 0, 0, 3, 1, 3, 0, 0, 2, 0, 1, 0, 3, 0, 3, 1, 1, 1, 0, 2, 2, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 1, 2, 0, 0, 1, 2, 0, 2, 2, 2, 0, 1, 0, 2, 1, 0, 1, 2, 0, 2, 0, 1, 2, 0, 2, 2, 2, 0, 2, 1, 2, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 2, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 1, 1], [1, 2, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 2, 1, 0, 2, 0, 2, 0, 0, 1, 2, 2, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 125, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( in2 - i2 ) \\ge int(6.0)\\nif True:{:\\nb0 = b0\\n:}\\nif not not False:{:\\nif int(4.0) != max(min(i0, max(int(6.0), abs(abs(int(5.0))))), i1):{:\\nif int(9.0) \\le in0:{:\\nb2 = max(in2, abs(mod(max(i0, max(i0, int(1.0))),i1))) == max(abs(max(max(( ( int(9.0) * ( i2 + max(mod(in1,divInt(( in2 * ( in0 * abs(max(int(6.0), abs(int(0.0)))) ) ),abs(( ( max(( res0 - int(3.0) ), int(7.0)) + int(3.0) ) + int(0.0) )))), int(0.0)) ) ) * divInt(divInt(in1,min(min(i0, min(i1, min(i0, int(8.0)))), int(0.0))),i2) ), max(divInt(int(0.0),abs(mod(min(( mod(min(int(0.0), max(mod(int(4.0),abs(min(int(3.0), divInt(int(2.0),divInt(( i1 * int(7.0) ),( ( abs(( int(1.0) - mod(abs(divInt(in0,divInt(int(2.0),abs(( int(8.0) + min(divInt(max(int(6.0), divInt(min(mod(abs(int(1.0)),max(i2, min(in0, max(divInt(res0,int(4.0)), divInt(i2,mod(in1,abs(( ( min(int(7.0), abs(min(max(abs(divInt(min(abs(( int(7.0) + i0 )), ( res0 - ( int(8.0) - in0 ) )),abs(i0))), in1), mod(( in0 - res0 ),int(9.0))))) + i1 ) * int(7.0) )))))))), int(3.0)),abs(( int(7.0) + int(1.0) )))),int(8.0)), min(in1, in1)) ))))),( int(4.0) + int(1.0) )) )) + abs(int(5.0)) ) * max(i2, int(9.0)) )))))), in2)),in0) - abs(divInt(max(( divInt(in2,abs(mod(divInt(divInt(int(8.0),int(0.0)),( abs(int(1.0)) + int(3.0) )),min(( max(i1, in1) * int(5.0) ), int(9.0))))) + max(i2, min(int(1.0), abs(in1))) ), i0),mod(i0,max(int(1.0), res0)))) ), ( mod(in1,abs(divInt(abs(( i0 * in2 )),min(res0, divInt(int(6.0),max(i1, ( ( i1 + mod(in2,divInt(divInt(res0,divInt(abs(( int(9.0) + i1 )),int(1.0))),( divInt(i2,min(in2, abs(in0))) - min(abs(in2), int(1.0)) ))) ) * min(in0, ( ( i2 * in1 ) - min(int(7.0), abs(in1)) )) ))))))) - in2 )),divInt(in0,int(3.0))))), in1)), max(i1, max(int(7.0), int(2.0))))), int(0.0))\\n:}\\n:}\\nin1 -= i1\\n:}\\ni1 += ( ( in2 + i2 ) + i1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 58, 58, 4, 4, 0, 9, 4, 5, 2, 4, 74, 2, 280, 73, 77, 38, 37]}, {"genotype": [[0], [0, 1, 0, 1, 1], [1, 2, 0, 2, 0], [0, 0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 8, 6, 5, 2, 7, 7, 6, 9, 5, 3, 1, 3, 2, 5, 1, 8, 9, 1, 5], [5, 4, 4], [0, 0, 0], [], [0, 1, 1, 1], [0, 0, 0], [0], [], [0, 0], [5, 1, 6, 0, 5, 1, 3, 4, 6, 1, 2, 1, 0, 2, 2, 4, 1], [1], [1, 3, 1, 2, 3, 3, 3, 0, 1, 1, 3, 3, 1, 2, 0, 2, 2, 2, 2, 3, 2, 1, 3, 3, 3, 0, 1, 3, 1, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 3, 1, 0, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 0, 0, 2, 3, 1, 2, 0, 2, 3, 0, 1, 1, 2, 0, 0, 3, 0, 2, 2, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [2, 2, 0, 1, 1, 2, 2, 2, 0, 0, 1, 2, 2, 2, 0, 1, 1, 0, 2, 1], [0, 1, 1, 2, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b0\\nif int(0.0) != abs(int(8.0)):{:\\nin2 += mod(abs(min(max(i1, int(6.0)), int(5.0))),max(abs(int(2.0)), ( res0 - ( mod(( divInt(abs(( int(7.0) - abs(min(min(i0, int(7.0)), max(int(6.0), in2))) )),i1) * mod(divInt(int(9.0),int(5.0)),mod(in0,int(3.0))) ),int(1.0)) - abs(int(3.0)) ) )))\\nif in1 \\le abs(int(2.0)):{:\\nb0 = abs(int(5.0)) \\le min(mod(max(max(res0, mod(i1,i2)), ( min(int(1.0), divInt(i1,( abs(i0) + int(8.0) ))) + int(9.0) )),divInt(i2,i2)), max(in1, ( mod(int(1.0),int(5.0)) + i1 )))\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 20, 20, 3, 3, 0, 4, 3, 1, 0, 2, 17, 1, 74, 18, 20, 8, 11]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [5, 9, 5, 6, 3, 2, 7], [4, 1, 2, 4], [2, 0, 0, 1], [0, 0], [1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0], [3, 0, 3, 2], [], [], [1, 1, 1, 6], [], [1, 1, 0, 3, 1, 1, 0, 2, 2, 3, 1, 0, 0, 1, 1], [1, 0], [2, 0], [0], [1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(5.0) \\le int(9.0)\\nb0 = ( b0 and i1 \\g abs(int(5.0)) )\\nb1 = ( int(6.0) == i1 and not mod(( min(int(3.0), i1) + res0 ),int(2.0)) \\le int(7.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 7, 7, 4, 4, 2, 8, 4, 4, 0, 0, 4, 0, 15, 2, 2, 1, 1]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [2, 2, 2, 1, 2, 0, 0, 2, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 0, 0], [1, 1, 1], [8, 3, 0], [3, 1], [0, 2, 2, 0], [], [1, 0, 0, 0, 0, 0, 0, 1], [0, 0], [0, 2, 1, 1, 0, 1], [0, 0, 1], [1], [1, 0, 2, 5, 3, 2, 1, 5, 5, 0], [1, 1, 1], [0, 0, 2, 0, 0, 0, 3, 1, 1, 0, 2, 1, 0], [0, 0], [1], [1, 0, 1, 2, 2], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\ge i0:{:\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile not True:{:\\ni2 -= ( in2 + in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\ni2 -= i1\\n:}else:{:\\nin2 *= max(int(8.0), int(3.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = False\\nb0 = in2 \\g ( int(0.0) * i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 3, 3, 2, 4, 0, 8, 2, 6, 3, 1, 10, 3, 13, 2, 1, 5, 0]}, {"genotype": [[0], [1], [0], [], [0], [1], [5], [0], [2], [], [1], [0], [], [], [], [3, 2, 0], [], [1, 2, 2, 0, 0, 0], [0, 0], [], [1, 2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(5.0) \\l ( ( in0 - i2 ) * i0 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 6, 2, 0, 2, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1], [4, 6, 2, 7, 0, 1, 9], [], [], [], [], [], [], [], [], [5, 0, 2, 6, 6], [1], [2, 3, 2, 2, 3, 0, 3, 0, 1, 1, 3, 1, 0, 2, 0, 2, 1, 1, 2, 1, 1], [0, 1, 0, 0, 0, 1], [1, 0, 0, 1], [2, 1, 2, 2, 2], [0, 1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= ( max(divInt(( min(i0, min(i2, int(4.0))) - int(6.0) ),max(int(2.0), res0)), ( res0 * ( int(7.0) * int(0.0) ) )) * mod(int(1.0),int(9.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 21, 6, 4, 5, 2]}, {"genotype": [[0], [1], [0], [], [0], [], [], [2], [1], [], [0, 1], [0], [2], [], [], [0, 4], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not i0 == in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 1], [1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 5, 6, 2, 2, 8, 1, 6, 0, 9, 2, 9, 0, 3, 7, 4], [3, 3], [1], [], [0, 1, 1], [0, 0], [2], [], [], [3, 1, 0, 2, 0, 3, 0, 6, 6, 3, 3, 4, 0, 1, 0, 5], [0, 0], [1, 3, 3, 3, 0, 2, 0, 2, 2, 1, 1, 0, 2, 2, 1, 2, 2, 0, 1, 3, 2, 0, 2, 3, 2, 1, 1, 3, 3, 1, 1, 3, 3, 0, 2, 1, 0, 2, 0, 3, 3, 1, 2, 1, 3, 0, 0, 2, 0, 0, 1, 1, 1, 3, 0, 3, 1, 0, 3, 1], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 2, 0, 2, 1, 2], [1, 2, 0, 0, 2, 1, 0], [1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not int(4.0) \\ge min(min(min(in0, mod(i1,( ( int(2.0) - int(5.0) ) * i0 ))), divInt(divInt(int(6.0),divInt(mod(i2,int(2.0)),min(( i0 + ( abs(( int(2.0) + int(8.0) )) * max(min(int(1.0), int(6.0)), min(min(in0, divInt(int(0.0),i0)), ( res0 - max(abs(int(9.0)), divInt(int(2.0),min(res0, in0))) ))) ) ), ( in0 + in1 )))),int(9.0))), int(0.0)):{:\\nb1 = int(3.0) \\ge abs(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(int(7.0), i0)\\nin2 = abs(int(4.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 17, 17, 2, 1, 0, 3, 2, 1, 0, 0, 16, 2, 60, 14, 15, 7, 7]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 2, 8, 7, 2, 5, 3, 4, 6, 8, 8, 2, 2], [2, 3, 1, 1], [1, 2, 2], [1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0], [3, 3, 3, 1, 3, 1, 3, 3, 0, 0], [0, 0], [0], [6, 0, 5, 0, 2, 5, 6, 5, 1, 5, 2, 4, 0, 3, 4, 6, 1, 1], [1], [0, 1, 2, 3, 0, 3, 0, 3, 3, 2, 1, 0, 0, 0, 1, 2, 3, 3, 3, 0, 3, 3, 0, 1, 3, 3, 3, 2, 3, 3, 1, 3, 0, 3, 3, 0, 1, 3, 2, 2, 1, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 3, 0, 0, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [2, 2, 2, 2, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 2, 1, 1, 1, 0], [1, 2, 1, 1, 2, 1, 2], [1, 1, 1, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( ( True or ( True or res0 == int(8.0) ) ) and ( mod(abs(i0),abs(in2)) \\ge abs(abs(( int(1.0) - i0 ))) and ( i2 \\g in2 and int(2.0) \\g ( max(min(abs(res0), min(abs(in2), int(8.0))), max(min(min(mod(min(min(int(7.0), abs(i1)), max(max(in2, int(2.0)), max(( mod(int(5.0),int(3.0)) * i2 ), int(4.0)))),divInt(int(6.0),( in1 - i0 ))), ( int(8.0) - in0 )), min(in1, res0)), int(8.0))) * ( int(2.0) - i1 ) ) ) ) ) and b1 ):{:\\nb2 = b2\\n:}\\ni1 *= int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 14, 14, 4, 3, 6, 14, 4, 10, 2, 1, 18, 1, 60, 10, 19, 7, 4]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 2, 0], [0, 0, 1], [1, 1], [1, 1, 1], [6, 2, 9], [0], [0, 1], [], [1, 0, 0], [0], [0, 0], [], [0, 1], [1, 6, 4, 1, 1, 3, 3, 0], [0, 1], [3, 0, 2, 1, 0, 2, 2, 1, 1, 2, 3, 0, 3, 3, 0, 0, 0], [1, 0, 1, 0], [2, 2, 2, 1], [2, 0, 0], [0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(i1) \\l divInt(int(6.0),res0):{:\\nif b0:{:\\nin1 = ( mod(int(2.0),int(9.0)) * ( abs(i1) + abs(max(i1, in0)) ) )\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nin0 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 3, 3, 1, 2, 0, 3, 1, 2, 0, 2, 8, 2, 17, 4, 4, 3, 2]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1], [7, 0, 2, 6, 1, 6], [], [], [], [], [], [], [], [], [1, 4, 2, 3, 4, 2, 1, 1], [0], [2, 3, 2, 0, 2, 2, 0, 1, 3, 2, 1, 1, 3, 2, 3, 0, 1, 2, 3, 1, 0, 0, 3, 2, 0, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0], [0, 2, 1, 0, 0, 2], [0, 2, 0], [1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = mod(min(( in1 + divInt(mod(i2,int(7.0)),abs(( int(0.0) * int(2.0) ))) ), max(divInt(min(in0, int(6.0)),divInt(min(int(1.0), in1),i2)), abs(( i1 + int(6.0) )))),i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 27, 8, 6, 3, 5]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1], [0, 7, 2, 5], [], [], [], [], [], [], [], [], [3, 3, 1, 2, 3, 5, 5, 2, 6], [0], [2, 0, 2, 0, 3, 2, 2, 1, 3, 0, 0, 2, 2, 1, 3, 3, 2, 2, 1, 1, 0, 0, 2, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 2, 2], [0, 2, 1, 2, 1], [0, 1, 0, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( in0 + divInt(i1,max(( mod(int(0.0),max(i2, in0)) * divInt(mod(int(7.0),abs(abs(( ( int(2.0) - int(5.0) ) * in2 )))),in2) ), ( i2 - res0 ))) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 25, 9, 4, 5, 4]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1], [4, 3, 6, 5, 9], [4], [0], [], [1], [0], [], [], [], [2, 6, 3, 5], [], [3, 2, 2, 1, 1, 1, 1, 3, 1, 2, 0, 2, 2, 0, 0, 0], [0, 1, 1, 1, 1], [0, 0], [2], [0, 0, 0, 0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(( divInt(int(4.0),int(3.0)) * int(6.0) ), int(5.0)) \\le min(int(9.0), divInt(i2,divInt(divInt(res0,in0),in2)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 16, 5, 2, 1, 4]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1], [1, 9, 6, 7], [5], [0, 2], [1], [0, 0, 1], [0], [3, 0], [], [], [3, 6, 0, 2, 0, 5, 3, 6, 0, 4, 1, 4], [], [2, 1, 2, 3, 0, 3, 3, 2, 3, 0, 0, 0, 2, 0, 3, 2, 2, 3, 0, 1, 1, 0, 3, 3, 3, 2, 3, 0, 1, 0, 3, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 2, 2, 2, 1, 0, 2, 1, 1], [2, 2, 2, 2], [0, 0, 0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( b2 or divInt(int(1.0),divInt(min(in0, min(max(( abs(res0) * i0 ), i2), ( i0 * abs(divInt(( abs(in2) * int(9.0) ),int(6.0))) ))),in0)) != max(min(abs(( max(res0, int(7.0)) * i0 )), max(in1, i1)), in1) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 2, 1, 3, 1, 2, 0, 0, 12, 0, 34, 7, 11, 4, 3]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1], [8, 9], [], [], [], [], [], [], [], [], [0, 1, 6, 6, 0], [1, 1], [2, 1, 3, 3, 0, 3, 0, 1, 0], [1], [1, 1, 2], [1, 1], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= divInt(int(8.0),max(max(i1, abs(res0)), int(9.0)))\\nres0 -= i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 9, 1, 3, 2, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [1], [1], [], [1], [0], [], [], [], [6, 0], [], [3, 0, 0], [], [2], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = abs(res0) \\g i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1], [6, 7, 0], [5, 0], [2, 1], [], [1, 1], [0, 0], [], [], [], [6, 2, 5], [], [2, 0, 0, 1, 2, 1, 1, 0], [0, 1], [], [2], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( res0 * i2 ) != int(6.0)\\nb1 = divInt(int(7.0),int(0.0)) \\l in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 2, 2, 0, 2, 2, 0, 0, 0, 3, 0, 8, 2, 0, 1, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 0, 1], [3, 6, 8], [2], [0], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(3.0) == int(68.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1], [0, 2, 1, 1, 0, 0], [1], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 1, 9, 7, 0, 7, 5, 3, 1, 3, 8, 3, 3, 4, 4, 2, 3, 6], [2, 3, 1, 4, 4], [1, 2, 2, 0], [1], [1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [3, 1], [1], [], [1, 6, 0, 5, 1, 0, 3, 2, 6, 0, 1], [1], [0, 1, 2, 2, 3, 3, 3, 2, 0, 2, 3, 1, 1, 2, 0, 3, 3, 0, 0, 1, 0, 2, 0, 1, 2, 1, 2, 1, 1, 3, 0, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 3, 1, 2, 0, 1, 3, 3, 3, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 1, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2], [2, 2, 0], [0, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i1 == int(3.0)\\nloopBreak% = 0\\nwhile ( divInt(( min(min(max(divInt(res0,( abs(int(2.0)) * int(1.0) )), divInt(i0,min(min(in2, i1), int(9.0)))), i0), divInt(in0,int(7.0))) * mod(int(0.0),mod(int(7.0),int(5.0))) ),min(i2, int(3.0))) \\ge int(1.0) or int(3.0) \\g int(8.0) ):{:\\nb2 = int(3.0) \\le int(3.0)\\nres0 += abs(int(4.0))\\nb2 = min(int(4.0), max(int(2.0), mod(i0,int(3.0)))) \\le max(abs(abs(i1)), int(6.0))\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 19, 19, 5, 4, 1, 7, 5, 2, 1, 0, 11, 1, 51, 9, 13, 3, 7]}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0], [1], [1, 0, 1], [1, 1], [6, 3], [], [0, 0], [], [0, 0], [], [1, 0], [0], [], [4, 6], [0, 0], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nin1 = int(6.0)\\nb0 = b0\\nres0 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 990, "mapping_values": [1, 4, 4, 1, 3, 2, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1, 1, 1], [1, 0, 4, 4, 2], [2], [1], [], [1], [0], [], [], [], [2, 3], [0], [2, 3, 2, 1, 1, 1, 0, 1, 1], [1, 1], [0], [], [1, 0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(min(divInt(int(1.0),int(0.0)), int(4.0)),i2) == int(4.0)\\nin0 = int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 9, 2, 1, 0, 2]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 6, 5, 5, 1, 2, 6, 4, 5, 0, 6, 2, 3, 9, 9, 7, 1], [3, 5], [], [], [1, 1], [0, 0], [], [], [], [0, 5, 6, 0, 0, 1, 0, 0, 3, 0, 4, 5, 6, 4, 3, 1, 1, 0, 5, 6, 3, 6, 4], [1, 1, 1], [2, 2, 2, 3, 0, 1, 3, 3, 3, 0, 2, 2, 1, 1, 2, 0, 1, 3, 1, 2, 0, 2, 0, 0, 0, 1, 3, 3, 2, 2, 3, 2, 1, 0, 1, 0, 1, 0, 3, 2, 3, 3, 1, 0, 1, 2, 0, 3, 2, 3, 3, 3, 0, 1, 0, 0, 0, 3, 1, 1, 2, 1, 3, 3, 2, 2, 1, 1, 3, 3, 0, 0, 0, 2, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0], [2, 0, 2, 1, 2, 0, 0, 1, 1, 2, 0, 2, 1, 0, 0, 0, 2, 1, 1, 2], [2, 2, 1, 2, 0, 2, 1, 1, 2, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(( ( abs(i0) * int(0.0) ) * min(abs(max(in2, divInt(( int(2.0) - int(6.0) ),( res0 * int(5.0) )))), abs(int(5.0))) ),divInt(i0,mod(i0,i1))) \\ge i0:{:\\nloopBreak% = 0\\nwhile int(1.0) != min(min(divInt(divInt(max(( int(2.0) + i0 ), int(6.0)),in0),int(4.0)), i0), max(divInt(abs(min(int(5.0), in1)),int(0.0)), mod(in2,abs(( max(min(min(res0, int(6.0)), in1), in0) * i1 ))))):{:\\ni1 -= min(int(2.0), int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= divInt(int(9.0),abs(max(mod(mod(int(9.0),int(7.0)),max(abs(in2), res0)), in0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 *= ( in1 - int(1.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 18, 18, 2, 0, 0, 2, 2, 0, 0, 0, 23, 3, 76, 18, 20, 10, 11]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 2, 1, 1, 1], [0, 0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 0, 8, 9, 7, 1, 5, 4, 6, 5, 6, 2, 3, 2, 1, 3, 2, 9, 4, 3, 0, 3, 8, 0, 6, 1, 3, 5, 3, 7, 4, 5, 0, 6], [5], [], [], [1, 0], [0], [1], [1], [0, 0], [6, 5, 1, 0, 3, 6, 1, 3, 1, 0, 3, 1, 5, 4, 1, 2, 3, 3, 4, 4, 5, 3, 5, 5], [1, 0, 0], [0, 0, 3, 3, 3, 0, 3, 1, 2, 1, 3, 0, 2, 2, 3, 2, 1, 3, 3, 1, 2, 3, 3, 1, 0, 2, 2, 0, 1, 3, 0, 3, 1, 1, 2, 2, 2, 1, 2, 3, 1, 1, 1, 3, 3, 3, 2, 0, 3, 2, 2, 2, 3, 0, 3, 1, 1, 1, 0, 3, 0, 2, 2, 0, 2, 2, 1, 3, 1, 2, 1, 2, 0, 0, 2, 1, 3, 3, 3, 3, 0, 0, 3, 1, 2, 1, 3, 0, 2, 2, 3, 3, 3, 1, 3, 0, 3, 1, 1, 3, 3, 1, 0, 0, 1, 3, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 2, 0, 2, 0, 2, 0, 0, 0, 2, 1, 2, 2, 0, 2, 1, 1, 0, 2, 1, 2, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 2, 1, 1, 2, 2, 1, 0, 2, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif res0 != in2:{:\\nif False:{:\\ni1 -= max(max(abs(i0), min(int(5.0), mod(int(6.0),abs(in0)))), ( divInt(min(( int(0.0) + abs(min(int(8.0), mod(min(min(int(9.0), res0), mod(( i1 * int(7.0) ),abs(in0))),max(int(1.0), int(5.0))))) ), divInt(divInt(( int(4.0) - ( abs(int(6.0)) - int(5.0) ) ),int(6.0)),abs(min(abs(( i1 * max(mod(( mod(max(i0, min(int(2.0), int(3.0))),int(2.0)) * in0 ),abs(i1)), mod(divInt(in2,( divInt(int(1.0),max(int(3.0), ( int(2.0) - mod(in1,i1) ))) + ( int(9.0) * abs(min(min(max(i2, in0), min(int(4.0), mod(int(3.0),min(in0, divInt(( max(min(max(int(0.0), min(in1, min(int(3.0), int(8.0)))), min(max(int(0.0), in1), in2)), int(6.0)) + max(int(1.0), int(3.0)) ),int(5.0)))))), int(3.0))) ) )),int(7.0))) )), int(4.0))))),int(5.0)) + in0 ))\\n:}\\nin2 = int(0.0)\\nin2 = int(6.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 35, 35, 1, 0, 0, 2, 1, 1, 1, 2, 24, 3, 116, 25, 35, 12, 14]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 1], [1], [1, 0, 1], [1], [4], [0], [0, 1], [], [1, 0], [0], [0], [], [], [0, 1, 4, 4, 0, 6, 2], [1, 0], [0, 2, 2, 0, 0, 0, 1, 0], [0, 0], [], [2, 0, 2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\l ( ( i1 * in1 ) + in1 ):{:\\ni0 *= int(4.0)\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 1, 2, 0, 2, 1, 1, 0, 0, 7, 2, 8, 2, 0, 3, 0]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 5, 9, 8, 6, 9, 2, 8, 8, 1, 4, 5, 1, 3, 2, 8], [3, 2, 4], [2, 2], [], [1, 1, 1], [0, 0, 0], [], [], [], [6, 4, 2, 4, 1, 5, 2, 4, 0, 3, 5, 0, 0, 1, 0], [], [0, 2, 2, 3, 1, 3, 3, 3, 3, 2, 1, 0, 1, 0, 1, 3, 3, 3, 1, 3, 1, 0, 2, 3, 2, 0, 2, 1, 1, 2, 2, 2, 0, 2, 0, 1, 3, 2, 1, 0, 3, 2, 0, 0, 1, 1, 2, 0, 0, 3, 0, 1, 2, 0, 3, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 0, 2, 2], [2, 2, 2, 1, 2, 0], [1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile res0 \\ge ( mod(min(int(1.0), max(min(abs(abs(divInt(int(5.0),in1))), int(9.0)), i2)),int(8.0)) * max(min(max(int(6.0), max(int(9.0), in1)), mod(min(mod(i1,divInt(int(2.0),int(8.0))), divInt(( divInt(in2,( i2 * int(8.0) )) * min(( int(1.0) - in1 ), min(( i0 * in0 ), int(4.0))) ),int(5.0))),divInt(in2,i0))), abs(i0)) ):{:\\nb2 = int(1.0) == ( i1 + abs(i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(3.0) \\le int(28.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 16, 16, 3, 2, 0, 3, 3, 0, 0, 0, 15, 0, 58, 14, 14, 6, 8]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [6, 0, 1], [5], [0], [], [1], [0], [], [], [], [6], [], [3, 3, 2, 1, 0, 1, 3, 1], [1], [2, 1, 2], [], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(max(mod(int(6.0),res0), int(0.0))) != abs(int(1.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 8, 1, 3, 0, 1]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 1, 1, 2, 1, 1, 2, 0, 1], [0, 0, 0], [0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 0, 8, 3, 7, 3, 0, 6, 3, 7, 5, 8, 5, 9, 3, 5, 2, 1, 0, 5, 8, 0, 2, 4], [3, 5, 2, 0, 3], [1, 2, 2], [1], [0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0], [1, 3, 1], [0, 1], [0, 0, 0], [5, 3, 0, 2, 6, 2, 3, 3, 3, 3, 0, 2, 6, 0, 3, 4, 3, 0, 4, 3, 6, 6, 2, 2, 1, 3, 1], [1, 0, 1], [2, 1, 2, 2, 0, 1, 0, 2, 1, 1, 1, 2, 3, 3, 0, 1, 3, 3, 0, 0, 2, 0, 2, 1, 3, 0, 2, 3, 1, 0, 2, 0, 1, 2, 0, 1, 2, 3, 0, 0, 1, 2, 3, 0, 2, 3, 1, 1, 3, 3, 0, 0, 2, 2, 1, 3, 2, 2, 3, 2, 2, 1, 0, 2, 2, 0, 2, 1, 3, 2, 1, 1, 3, 1, 1, 0, 2, 1, 3, 2, 3, 1, 0, 1, 0, 3, 0, 1, 0, 3, 1, 0, 3, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 1, 2, 2, 0, 2, 0, 0, 2, 1, 0, 0, 1, 2, 2, 1, 2, 1, 2], [1, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 1, 0, 2, 1, 0, 2, 0], [0, 0, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb1 = divInt(int(2.0),divInt(mod(in2,int(6.0)),in0)) \\ge ( int(0.0) - int(8.0) )\\ni0 += int(3.0)\\n:}\\nif ( abs(max(i2, int(7.0))) + max(abs(res0), i2) ) != ( in0 * ( int(3.0) - abs(in0) ) ):{:\\nin0 = ( min(int(0.0), in0) * divInt(i0,int(6.0)) )\\nb2 = ( i2 + int(3.0) ) == ( abs(res0) - i0 )\\nif ( int(7.0) \\l mod(min(in0, divInt(min(int(5.0), int(8.0)),abs(max(in1, in0)))),( ( int(5.0) - min(( ( min(( ( int(9.0) + i0 ) * divInt(( in1 + ( int(3.0) - max(divInt(int(5.0),int(2.0)), abs(int(1.0))) ) ),int(0.0)) ), in0) + ( int(5.0) * abs(( max(int(8.0), res0) - int(0.0) )) ) ) + res0 ), abs(i2)) ) * int(2.0) )) or i2 \\ge max(int(4.0), i1) ):{:\\nb2 = False\\n:}\\n:}\\nin0 += abs(i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 25, 25, 5, 3, 1, 8, 5, 3, 2, 3, 27, 3, 94, 25, 20, 19, 8]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [2, 7], [1], [2], [], [1], [0], [], [], [], [6, 6, 5, 4, 4, 1, 1, 6, 2], [], [2, 2, 2, 0, 2, 2, 0, 0, 3, 0, 3, 1, 0, 0, 0, 3, 0, 2, 0, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1], [2], [1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(mod(mod(res0,divInt(divInt(res0,in2),min(in1, max(int(2.0), in1)))),i1),i1) \\g max(res0, ( i2 * int(7.0) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 9, 0, 20, 6, 3, 1, 5]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 2, 0, 1, 1, 0], [0, 1], [0, 0, 1, 0], [1, 1, 1, 1, 1], [2, 5, 8, 3, 7], [1, 2, 1], [2, 0, 0], [1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0], [1, 1, 2, 2, 3, 1], [1, 0, 0], [0], [0, 5, 4, 6, 4, 5, 3, 1, 1, 3, 6, 3, 0], [0], [1, 0, 3, 2, 2, 1, 3, 3, 0, 0, 0, 3, 0, 0, 1, 3, 0, 2, 2, 3, 3, 1, 0, 2, 3, 0, 0, 1, 2, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 2, 2, 2, 0, 2], [1, 0, 0, 1], [0, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(2.0) \\g i0:{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not not ( min(( divInt(int(5.0),max(min(in2, in1), res0)) - abs(in1) ), in2) == int(8.0) or True )\\nin0 = abs(i1)\\n:}\\nb0 = ( divInt(abs(min(int(3.0), i1)),( abs(in0) + res0 )) + int(7.0) ) \\g ( in0 - i0 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 5, 5, 3, 3, 1, 9, 3, 6, 3, 1, 13, 1, 31, 6, 8, 4, 2]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [4, 9, 6], [], [], [], [], [], [], [], [], [6, 6, 0], [1], [2, 2, 0, 2, 2, 1, 1, 3, 0, 3, 1], [1, 1, 0, 0], [2, 2], [2, 0, 0], [1, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= mod(mod(res0,( ( int(4.0) + int(9.0) ) + abs(i0) )),abs(int(6.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 11, 4, 2, 3, 2]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 3, 2, 8, 9, 8, 3, 8, 0, 6, 5, 5, 4, 1, 9, 8, 7, 2, 7, 8, 1], [1], [2, 2, 0], [], [0, 1], [0], [0], [], [], [2, 1, 5, 5, 0, 2, 3, 3, 0, 6, 6, 0, 5, 6, 1, 1, 5, 5, 4, 3, 1, 0, 1, 0, 0, 3], [0], [0, 1, 2, 3, 3, 0, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3, 2, 2, 0, 1, 2, 2, 3, 0, 2, 3, 3, 0, 2, 0, 3, 1, 1, 1, 3, 2, 3, 2, 2, 1, 3, 2, 0, 1, 1, 0, 2, 0, 3, 0, 0, 3, 2, 3, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 0, 2, 2, 3, 0, 0, 0, 1, 2, 0, 2, 3, 2, 3, 0, 3, 2, 1, 3, 0, 0, 1, 3, 1, 3, 1, 2, 3, 2, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 0, 2], [1, 1, 0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 1, 2, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\nb0 = i2 \\g int(4.0)\\ni1 = mod(max(max(in2, min(int(9.0), ( max(divInt(( mod(abs(abs(int(3.0))),max(( mod(in2,int(2.0)) - divInt(mod(min(i0, ( min(min(i2, ( in0 - min(int(8.0), int(9.0)) )), int(8.0)) + min(( min(divInt(( int(3.0) - min(divInt(in0,int(8.0)), int(0.0)) ),i0), mod(res0,abs(res0))) + i0 ), abs(( abs(mod(int(6.0),in2)) * int(5.0) ))) )),divInt(int(5.0),( res0 + int(4.0) ))),( i1 + int(1.0) )) ), i1)) - ( ( max(in2, in2) - in1 ) - int(9.0) ) ),mod(in0,mod(min(mod(abs(i1),abs(( int(8.0) + abs(i0) ))), i1),int(7.0)))), abs(int(2.0))) - min(int(7.0), ( abs(( int(8.0) * i0 )) + i0 )) ))), int(1.0)),in0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 22, 22, 1, 3, 0, 2, 1, 1, 0, 0, 26, 1, 101, 29, 25, 15, 14]}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [1], [1, 0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 0, 7, 4, 6, 0, 2, 4, 3, 8, 3], [0, 1, 2], [0], [1], [1, 0, 1, 1], [0, 0, 0], [3], [], [], [5, 3, 5, 6, 4], [0], [2, 3, 3, 1, 1, 0, 1, 3, 1, 3, 0, 3, 1, 1, 0, 0, 3, 2, 3, 1, 2, 1, 1, 3, 3, 2, 3, 1, 1], [0, 1, 1, 1], [2, 0, 0, 2, 1, 0, 2, 2, 2, 2], [0], [1, 1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( abs(min(int(4.0), int(3.0))) + in0 )\\nloopBreak% = 0\\nwhile int(07.0) \\l min(int(4.0), abs(in2)):{:\\nb0 = ( max(int(6.0), int(0.0)) \\g res0 or in1 == min(mod(abs(int(2.0)),mod(int(4.0),int(3.0))), abs(abs(divInt(abs(int(8.0)),int(3.0))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 12, 12, 3, 1, 1, 4, 3, 1, 0, 0, 5, 1, 29, 4, 10, 1, 3]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 2, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 9, 1, 2, 7, 3, 5, 4, 6, 6, 6, 8, 1, 5, 9, 8, 3, 7, 4, 7, 4, 9, 0, 6, 3, 7, 5, 8, 8, 0, 5, 3, 6, 5, 3, 9, 6, 7, 8, 8, 2, 0, 0, 6, 2, 2, 3, 9, 2, 5, 9, 0, 1, 0, 3, 6, 4, 3, 4, 1, 7, 5, 5, 1, 7, 3, 1, 0, 5, 1, 8, 4, 7, 8, 1, 6, 9, 7, 2, 1, 9, 6, 5, 4, 0, 1, 8, 3, 6, 5, 1, 5, 1, 9, 7], [5, 0, 1, 4, 4, 3, 2, 0, 5, 2], [1, 2, 0, 0, 0, 0, 1], [0, 0], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 3, 0, 3, 0, 0], [1], [1, 0, 1], [3, 4, 5, 3, 0, 3, 5, 5, 3, 4, 6, 1, 1, 3, 4, 5, 4, 1, 4, 1, 6, 1, 6, 6, 5, 2, 5, 2, 5, 2, 1, 4, 1, 6, 2, 5, 0, 1, 2, 1, 6, 4, 4, 1, 5, 3, 6, 2, 4, 3, 2, 4, 2, 2, 3, 0, 1, 5, 3, 4, 0, 2, 1, 3, 4, 2, 0, 4, 0, 3, 4, 1, 5, 2, 5, 6, 1, 2, 6, 0, 6, 2, 2, 6, 2, 3, 1, 5, 6, 2, 6, 6, 5, 3, 4, 4, 2, 5, 2, 2, 3, 6, 6, 0], [0, 0, 0, 0, 0, 1, 1, 1], [1, 3, 0, 0, 3, 0, 3, 1, 0, 2, 0, 1, 3, 2, 2, 0, 3, 2, 3, 3, 2, 1, 3, 0, 0, 1, 1, 1, 3, 2, 1, 0, 0, 0, 1, 2, 2, 2, 3, 2, 0, 3, 3, 2, 1, 2, 0, 1, 1, 1, 2, 2, 3, 1, 2, 1, 1, 3, 1, 1, 0, 3, 0, 0, 1, 0, 2, 3, 2, 1, 3, 0, 2, 2, 2, 2, 1, 0, 2, 3, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 1, 0, 0, 0, 0, 2, 1, 0, 0, 3, 1, 2, 0, 2, 2, 3, 2, 2, 1, 3, 3, 0, 3, 2, 2, 0, 3, 3, 0, 3, 2, 0, 1, 3, 0, 3, 1, 1, 3, 1, 1, 1, 2, 3, 2, 3, 1, 1, 3, 2, 0, 0, 3, 1, 1, 1, 2, 0, 3, 0, 1, 3, 1, 0, 3, 1, 1, 1, 0, 2, 0, 0, 2, 2, 0, 0, 3, 0, 2, 3, 2, 3, 3, 3, 2, 2, 2, 1, 0, 3, 0, 1, 0, 3, 3, 3, 3, 3, 3, 1, 0, 2, 3, 2, 0, 0, 2, 3, 0, 0, 0, 3, 0, 1, 1, 0, 2, 0, 2, 2, 3, 3, 2, 2, 2, 3, 2, 3, 1, 1, 2, 0, 3, 3, 0, 0, 3, 3, 3, 3, 1, 3, 1, 1, 3, 0, 1, 2, 0, 3, 0, 0, 2, 2, 0, 3, 0, 1, 1, 1, 1, 1, 0, 3, 2, 0, 1, 3, 0, 1, 1, 3, 0, 1, 0, 3, 1, 1, 3, 2, 2, 2, 2, 1, 1, 1, 3, 0, 2, 2, 3, 1, 2, 2, 0, 0, 1, 0, 3, 0, 3, 2, 0, 1, 3, 3, 1, 3, 2, 0, 2, 3, 3, 2, 1, 0, 3, 3, 2, 3, 1, 0, 0, 0, 3, 3, 2, 3, 0, 1, 1, 2, 3, 0, 3, 0, 1, 2, 0, 2, 1, 1, 2, 3, 3, 2, 1, 0, 2, 2, 3, 0, 1, 2, 1, 0, 0, 1, 1, 3, 2, 1, 0, 0, 3, 3, 2, 0, 1, 0, 2, 0, 2, 2, 3, 0, 3, 1, 1, 2, 2, 0, 1, 2, 1, 3, 3, 0, 3, 1, 1, 3, 1, 3, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 2, 1, 1, 1, 0, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 0, 2, 1, 2, 2, 0, 1, 1, 1, 2, 2, 0, 1, 1, 1, 2, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 1, 2, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1, 2, 2, 0, 1, 0, 1, 1, 0, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 1, 2, 0, 1, 0, 0, 0, 1, 2, 1, 2, 1, 0, 1, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 0, 1, 2, 0, 1, 2, 1, 1, 0, 2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 1, 1, 2, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(3.0)\\nin1 = min(in2, in0)\\nif not abs(i0) != abs(int(2.0)):{:\\nloopBreak% = 0\\nwhile in0 \\l ( in2 + int(9.0) ):{:\\nb1 = max(divInt(( in2 + max(mod(max(min(divInt(int(1.0),max(in0, in1)), int(2.0)), int(7.0)),int(3.0)), abs(mod(int(5.0),res0))) ),i1), i1) \\g int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = ( divInt(divInt(abs(( in1 - abs(min(( int(6.0) - ( in2 + int(6.0) ) ), int(6.0))) )),int(8.0)),mod(( min(int(1.0), ( int(5.0) + int(9.0) )) - max(int(8.0), int(3.0)) ),in1)) - min(i1, in1) )\\n:}else:{:\\nif int(7.0) \\le i1:{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = ( mod(abs(divInt(int(4.0),max(res0, ( divInt(mod(( int(7.0) - i1 ),mod(max(divInt(min(abs(max(res0, abs(abs(min(int(4.0), int(9.0)))))), int(0.0)),res0), in2),i2)),in2) + ( int(6.0) * i2 ) )))),in2) \\le max(int(3.0), mod(i2,divInt(( max(mod(( int(7.0) * max(abs(i1), abs(( mod(in1,min(max(i1, max(( res0 * int(5.0) ), max(i2, abs(int(8.0))))), int(8.0))) - max(int(0.0), int(5.0)) ))) ),int(3.0)), ( abs(( min(int(6.0), int(5.0)) * abs(( in2 - i0 )) )) * min(int(3.0), int(9.0)) )) * int(6.0) ),divInt(i1,min(i2, int(7.0)))))) and b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = min(int(8.0), i1) \\ge max(int(8.0), int(2.0))\\n:}\\nres0 = int(0.0)\\nif in1 == divInt(in1,i1):{:\\nin2 = mod(( in0 - res0 ),abs(i2))\\n:}else:{:\\nloopBreak% = 0\\nwhile ( divInt(max(( max(abs(min(divInt(mod(( int(0.0) - in1 ),abs(in0)),int(6.0)), i2)), min(abs(max(max(max(max(int(2.0), in1), ( max(( i2 - i2 ), mod(max(in0, i0),i1)) - min(in2, int(2.0)) )), int(3.0)), in0)), divInt(in1,mod(mod(min(abs(mod(( ( abs(( max(int(9.0), int(2.0)) - mod(i0,min(abs(i2), i1)) )) + abs(min(max(max(int(5.0), abs(int(9.0))), int(0.0)), min(in0, int(1.0)))) ) * ( in1 + max(i2, i0) ) ),divInt(divInt(in1,abs(i0)),int(0.0)))), int(3.0)),int(6.0)),int(4.0))))) - int(3.0) ), in0),abs(mod(in1,int(4.0)))) \\l min(i1, int(1.0)) and int(7.0) != max(in2, int(5.0)) ):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni2 *= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 += min(int(5.0), int(1.0))\\nb0 = b1\\nloopBreak% = 0\\nwhile max(mod(( ( mod(int(7.0),int(3.0)) - int(1.0) ) * max(i1, ( ( min(int(0.0), divInt(( i2 - res0 ),int(5.0))) - i0 ) + min(res0, max(( i2 * int(1.0) ), abs(min(int(8.0), abs(( i2 + divInt(max(min(( int(4.0) + res0 ), max(min(( abs(int(7.0)) - i2 ), in0), i1)), max(abs(( min(in2, int(8.0)) + int(1.0) )), divInt(max(res0, min(i2, int(6.0))),( res0 + ( int(9.0) * int(7.0) ) )))),( min(min(( int(2.0) + res0 ), mod(( max(in2, int(1.0)) * ( int(9.0) + in0 ) ),in1)), int(6.0)) - int(5.0) )) )))))) )) ),abs(( int(4.0) - in1 ))), i2) == max(abs(divInt(in2,int(0.0))), i2):{:\\ni2 -= ( in0 - mod(( max(res0, min(int(1.0), int(8.0))) * ( divInt(res0,int(3.0)) - divInt(int(6.0),max(max(i0, max(int(5.0), int(1.0))), abs(int(5.0)))) ) ),max(int(1.0), max(int(9.0), int(7.0)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 8, 12, 96, 96, 10, 7, 2, 17, 10, 7, 1, 3, 104, 8, 388, 89, 107, 50, 42]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 8, 2, 2, 6, 3, 8, 5, 7, 0, 4, 4, 3, 4, 9, 0, 6, 6, 7, 0, 1, 1, 9], [0], [2], [], [1], [0], [], [], [], [0, 5, 0, 0, 2, 6, 2, 3, 4, 2, 3, 1, 4, 6], [1], [3, 0, 1, 3, 3, 0, 0, 3, 3, 3, 2, 2, 2, 3, 3, 2, 2, 1, 3, 2, 3, 1, 0, 2, 3, 3, 2, 2, 2, 1, 1, 1, 3, 2, 1, 1, 2, 1, 2, 0, 2, 3, 0, 0, 0, 1, 1, 2, 3, 1, 2, 1, 1, 3, 0, 3, 3, 2, 3, 0, 1, 1, 0, 3, 3, 1, 1, 3, 1, 1, 2, 1, 0, 3, 2, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 2, 0, 2, 1, 2, 0, 2, 2, 0, 2, 2, 2, 0, 2, 0, 1, 1, 0, 0, 1, 0], [0, 2, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += min(in2, int(4.0))\\nb2 = min(abs(i0), i0) \\l min(abs(max(( divInt(divInt(abs(min(mod(( int(0.0) * abs(( abs(int(8.0)) + i2 )) ),mod(min(abs(divInt(( ( int(2.0) + int(2.0) ) - int(6.0) ),abs(divInt(int(3.0),int(8.0))))), divInt(int(5.0),( res0 - mod(abs(i2),in0) ))),in1)), int(7.0))),int(0.0)),( min(int(4.0), divInt(int(4.0),int(3.0))) + abs(i2) )) - min(max(divInt(max(in0, int(4.0)),int(9.0)), i1), min(min(int(0.0), int(6.0)), max(int(6.0), int(7.0)))) ), ( int(0.0) + in1 ))), min(( int(1.0) - ( int(1.0) + res0 ) ), int(9.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 24, 24, 1, 1, 0, 1, 1, 0, 0, 0, 14, 1, 80, 20, 23, 11, 10]}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 0, 2, 1, 1], [0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 6, 3, 3, 1, 5, 7, 7, 2, 8, 5, 9, 0, 2, 4, 9, 5, 7, 1, 6, 1, 0, 9, 7, 0, 8, 5, 7, 5, 7, 7, 7, 3, 9, 4, 8, 0, 5, 5, 3, 7, 8, 7, 1, 1, 8, 9, 7, 8, 8, 5, 3, 8, 3, 9, 3, 4, 0, 6, 3, 1, 4, 3, 4, 5, 7, 2, 4, 0, 1, 1, 7, 5, 4, 2, 9, 1, 0, 4, 2, 6, 6, 9, 4, 8, 0, 5, 4, 5, 2, 1, 9, 2, 4, 8, 7, 3, 3, 7, 6, 2, 0, 1, 4, 0, 7, 4, 8, 3, 8, 0, 9, 2, 5, 9, 6, 4, 0, 0, 3, 9, 7, 0, 7, 5], [3, 4, 4, 0, 4, 1, 0, 5, 1], [1, 0, 0, 1, 1, 2], [0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 2, 3, 3, 2, 2, 1, 2, 0, 1, 1], [0, 1, 1], [0, 0, 1, 1], [0, 0, 2, 6, 2, 5, 2, 1, 0, 5, 0, 1, 0, 2, 2, 3, 2, 6, 0, 5, 6, 4, 4, 0, 4, 0, 3, 5, 6, 4, 0, 6, 6, 2, 0, 0, 2, 6, 3, 5, 5, 4, 6, 2, 5, 3, 6, 6, 0, 4, 5, 2, 1, 5, 1, 3, 1, 5, 4, 0, 5, 1, 6, 6, 2, 3, 4, 5, 4, 2, 1, 6, 3, 0, 4, 6, 1, 0, 5, 0, 3, 2, 2, 5, 0, 2, 5, 3, 5, 2, 0, 0, 5, 5, 5, 6, 5, 2, 0, 6, 0, 6, 6, 4, 3, 3, 0, 5, 3, 6, 6, 0, 1, 2, 6, 6, 5, 2, 0, 6, 2, 6, 4, 1, 2, 4, 3, 5], [0, 0, 1, 1], [1, 1, 3, 2, 1, 2, 3, 2, 2, 2, 0, 0, 0, 2, 2, 2, 1, 3, 0, 3, 0, 3, 2, 1, 1, 3, 3, 0, 0, 0, 1, 0, 2, 3, 3, 2, 3, 2, 0, 1, 3, 3, 3, 1, 2, 1, 2, 2, 1, 2, 3, 1, 1, 0, 0, 2, 2, 1, 3, 2, 2, 1, 0, 3, 0, 2, 2, 1, 2, 3, 0, 0, 1, 1, 0, 0, 0, 0, 3, 3, 2, 0, 1, 1, 3, 0, 2, 3, 1, 3, 0, 2, 1, 3, 0, 1, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 1, 0, 1, 1, 1, 2, 2, 0, 2, 0, 3, 0, 1, 3, 0, 1, 3, 1, 3, 3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 3, 0, 3, 3, 2, 0, 2, 0, 3, 2, 1, 0, 1, 3, 1, 0, 3, 1, 2, 0, 0, 2, 0, 3, 3, 2, 2, 1, 1, 0, 2, 3, 2, 2, 1, 3, 0, 1, 2, 1, 1, 0, 3, 0, 0, 3, 2, 3, 3, 0, 2, 1, 2, 2, 3, 3, 1, 3, 0, 2, 0, 2, 1, 3, 2, 2, 0, 1, 1, 3, 0, 0, 2, 2, 0, 0, 2, 3, 3, 0, 2, 2, 1, 1, 3, 1, 3, 0, 3, 1, 0, 3, 1, 1, 1, 2, 3, 3, 2, 3, 1, 2, 0, 1, 1, 2, 3, 3, 1, 2, 3, 1, 1, 0, 1, 2, 3, 1, 0, 3, 2, 1, 1, 3, 2, 3, 1, 0, 0, 2, 0, 0, 2, 2, 1, 2, 2, 3, 2, 3, 1, 2, 2, 0, 1, 2, 3, 1, 1, 3, 0, 2, 0, 3, 2, 0, 1, 0, 0, 3, 0, 0, 3, 3, 2, 1, 0, 3, 3, 3, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 1, 2, 3, 2, 3, 1, 0, 3, 0, 2, 2, 0, 2, 3, 1, 3, 1, 0, 1, 1, 1, 1, 3, 2, 0, 1, 3, 0, 3, 0, 1, 2, 0, 0, 1, 3, 0, 3, 3, 0, 3, 3, 2, 2, 0, 3, 0, 3, 1, 0, 0, 2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 3, 1, 3, 3, 3, 2, 2, 3, 1, 1, 2, 0, 3, 2, 2, 3, 0, 2, 1, 3, 2, 3, 2, 0, 3, 3, 0, 3, 2, 1, 0, 1, 1, 2, 1, 3, 2, 1, 1, 3, 2, 0, 3, 2, 2, 3, 3, 2, 0, 0, 1, 3, 2, 3, 2, 2, 2, 0, 1, 3, 3, 1, 3, 3, 2, 1, 0, 2, 2, 1, 0, 2, 3, 1, 3, 2, 3, 3, 0, 0, 1, 1, 3, 0, 1, 0, 3, 0, 3, 2, 0, 1, 3, 0, 2, 1, 3, 0, 0, 0, 3, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 2, 2, 1, 1, 3, 3, 0, 1, 3, 0, 3, 1, 1, 1, 1, 1, 0, 2, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 2, 2, 1, 2, 1, 0, 0, 2, 0, 0, 0, 1, 2, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 0, 1, 0, 0, 2, 1, 1, 0, 1, 0, 0, 1, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0, 2, 2, 0, 1, 2, 1, 2, 1, 0, 0, 0, 1, 2, 0, 1, 0, 1, 2, 1, 0, 1, 1, 2, 2, 1, 1, 0, 2, 2, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 0, 0, 1, 0, 1, 1, 2, 1, 0, 1, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0], [2, 1, 1, 2, 0, 1, 2, 1, 0, 1, 0, 1, 1, 2, 2, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 1, 2, 0, 2, 0, 2, 0, 2, 1, 1, 2, 2, 2, 2, 0, 1, 0, 2, 0, 2, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 82, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(7.0) \\ge int(5.0):{:\\nif not max(( int(6.0) * ( max(( ( mod(i0,i0) - i2 ) - divInt(( ( int(3.0) * min(res0, min(i2, min(mod(int(3.0),int(1.0)), max(max(in2, i2), i1)))) ) + int(5.0) ),i0) ), ( min(min(divInt(abs(( in2 - int(7.0) )),abs(abs(max(int(7.0), divInt(int(2.0),divInt(( int(8.0) * ( abs(int(5.0)) - int(9.0) ) ),i0)))))), i1), ( mod(int(0.0),max(( ( int(2.0) + i0 ) - min(i2, divInt(mod(int(4.0),( min(i2, in0) + int(9.0) )),int(5.0))) ), i2)) - res0 )) - i0 )) * in2 ) ), abs(min(divInt(res0,int(7.0)), int(1.0)))) \\le min(in1, ( min(int(6.0), max(in1, mod(int(1.0),abs(i0)))) * int(0.0) )):{:\\nin1 = mod(i0,( divInt(mod(( mod(in0,mod(in2,int(9.0))) + res0 ),int(7.0)),int(0.0)) + int(8.0) ))\\n:}\\n:}\\nif not ( not ( ( ( ( in1 - ( i0 - abs(res0) ) ) + int(5.0) ) \\le max(res0, int(7.0)) and not max(int(5.0), min(abs(( int(7.0) - abs(int(7.0)) )), int(7.0))) \\l max(min(divInt(int(3.0),abs(i2)), abs(abs(divInt(i0,( i0 * max(( int(9.0) + i2 ), int(4.0)) ))))), max(int(8.0), res0)) ) and min(int(0.0), mod(in0,in2)) \\le divInt(in2,min(abs(( ( int(5.0) * int(5.0) ) * in1 )), mod(abs(( mod(int(3.0),min(res0, int(7.0))) + mod(int(8.0),int(7.0)) )),i2))) ) or not True ):{:\\nb1 = max(in2, in0) \\g max(( min(max(res0, ( int(1.0) + mod(mod(min(min(int(1.0), abs(res0)), ( i0 + divInt(int(8.0),max(divInt(mod(in1,int(9.0)),int(7.0)), max(in2, i2))) )),divInt(( i1 * in2 ),divInt(min(max(i1, divInt(mod(int(8.0),int(8.0)),min(int(5.0), min(in0, max(int(3.0), i1))))), abs(int(8.0))),int(3.0)))),int(9.0)) )), divInt(min(min(mod(max(int(3.0), ( in2 + int(4.0) )),int(0.0)), ( abs(max(int(6.0), divInt(max(int(3.0), int(1.0)),in1))) + int(4.0) )), ( min(int(3.0), i0) + min(divInt(int(4.0),int(5.0)), min(( abs(int(7.0)) + in2 ), i1)) )),( res0 - res0 ))) - ( ( int(2.0) - mod(( abs(( min(int(4.0), mod(divInt(i2,int(0.0)),mod(max(int(1.0), int(1.0)),abs(in0)))) * divInt(in1,max(mod(in2,int(7.0)), in1)) )) + i2 ),abs(i1)) ) - res0 ) ), max(min(( int(5.0) * in0 ), min(min(max(i0, mod(( in1 - ( ( res0 - i1 ) + ( int(4.0) + i0 ) ) ),( int(2.0) * ( abs(divInt(min(int(9.0), in2),max(i0, mod(( in0 * mod(min(int(1.0), max(int(0.0), i2)),int(4.0)) ),int(2.0))))) - int(6.0) ) ))), int(6.0)), abs(mod(i2,int(9.0))))), max(in2, min(i0, int(4.0)))))\\nb0 = not b0\\nif False:{:\\ni2 = ( in2 - in0 )\\n:}else:{:\\nb1 = False\\n:}\\nin2 *= int(8.0)\\n:}else:{:\\nb1 = max(i2, max(abs(i0), abs(max(divInt(( i0 + max(in2, min(int(0.0), in2)) ),in2), ( divInt(divInt(int(5.0),mod(divInt(int(4.0),res0),in2)),i2) * abs(int(5.0)) ))))) \\l abs(min(max(( mod(min(int(2.0), int(1.0)),( i0 + max(( ( min(res0, divInt(int(9.0),abs(( min(mod(i0,max(max(res0, min(mod(int(2.0),res0), int(4.0))), int(8.0))), ( int(7.0) * abs(( int(3.0) + int(3.0) )) )) * min(( in1 - min(( ( max(min(( in0 - in0 ), int(7.0)), max(( max(divInt(( ( i0 * int(6.0) ) * abs(max(int(2.0), min(max(( int(0.0) * in2 ), ( ( int(1.0) * in0 ) + ( abs(int(4.0)) - min(mod(max(min(res0, res0), int(0.0)),int(7.0)), min(i0, int(4.0))) ) )), i1))) ),min(i2, max(( res0 + int(8.0) ), min(res0, ( int(3.0) * min(in2, i2) ))))), i0) + min(res0, int(8.0)) ), i2)) * int(0.0) ) - int(9.0) ), int(2.0)) ), res0) )))) - int(5.0) ) - in1 ), i1) )) + int(9.0) ), mod(( int(6.0) - int(4.0) ),abs(max(i2, int(0.0))))), max(in1, min(int(0.0), int(3.0)))))\\nloopBreak% = 0\\nwhile int(9.0) != int(7.0):{:\\nin0 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in2 \\g ( int(7.0) + int(5.0) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 5, 9, 126, 126, 9, 6, 3, 22, 9, 13, 3, 4, 128, 4, 510, 131, 129, 74, 59]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 8, 6, 0, 5, 9, 3, 9, 6, 8, 6, 8, 0, 6, 5], [], [], [], [], [], [], [], [], [0, 4, 3, 0, 1, 2, 2, 5, 0, 1, 4, 1, 1, 4, 2], [0, 1, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 3, 3, 2, 0, 0, 3, 0, 2, 1, 0, 2, 0, 3, 0, 1, 3, 2, 1, 1, 2, 2, 3, 0, 0, 3, 1, 1, 2, 0, 1, 3, 1, 2, 1, 2, 1, 1, 2, 2, 1, 0, 2, 1, 3, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 0, 2, 1, 1, 0, 2, 1, 2, 2, 0, 0, 0, 1, 1], [2, 1, 1, 2, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = max(min(abs(in1), max(int(9.0), divInt(max(min(abs(max(divInt(in0,i0), abs(i1))), ( int(2.0) * i2 )), divInt(i2,abs(in2))),int(8.0)))), min(divInt(int(6.0),int(0.0)), ( mod(min(i0, i1),min(int(5.0), int(9.0))) - divInt(in1,int(3.0)) )))\\ni1 -= max(int(9.0), divInt(int(6.0),( int(8.0) * int(6.0) )))\\ni1 = ( mod(int(8.0),in1) - divInt(int(0.0),max(mod(int(6.0),i2), int(5.0))) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 57, 14, 15, 5, 10]}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 1, 0], [1], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1], [7, 0, 2, 6, 3, 5, 0], [1, 3], [2, 2], [], [1, 0, 0, 1], [0, 0], [1, 2], [0], [], [3, 3, 4, 3, 4], [1], [0, 0, 3, 1, 2, 2, 1, 3, 2, 1, 1, 0, 3, 1, 1, 0, 1], [0, 0, 0], [0, 1, 1], [2, 1, 1, 2], []], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 \\g in0:{:\\nb2 = True\\nb2 = not min(int(7.0), ( ( int(0.0) * max(( int(2.0) - int(6.0) ), in1) ) - max(int(3.0), int(5.0)) )) \\ge in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 *= int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 7, 7, 2, 2, 0, 4, 2, 2, 1, 0, 5, 1, 17, 3, 3, 4, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 2, 1, 1], [1, 1, 1], [1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 0, 5, 8, 9, 1, 3, 8, 5, 0, 9, 4, 1, 5, 7, 4, 0, 8, 5, 4, 4, 4, 0], [0, 3, 4, 2], [1, 1], [0], [1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0], [3, 0, 2], [], [], [2, 6, 5, 3, 0, 0, 2, 5, 1, 2, 5, 1, 2, 3], [0], [1, 0, 1, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 2, 0, 2, 3, 2, 1, 0, 2, 1, 0, 2, 3, 2, 1, 1, 3, 3, 1, 0, 0, 3, 1, 1, 3, 3, 1, 2, 0, 3, 3, 0, 2, 1, 1, 2, 1, 2, 3, 1, 1, 3, 3, 3, 1, 2, 2, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 1, 2, 1, 1, 1, 2, 0, 1, 1, 0, 1, 0, 1], [2, 0, 1, 0, 2, 1, 1, 0, 2, 0], [0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(61.0) \\l i2:{:\\nloopBreak% = 0\\nwhile ( int(0.0) \\ge res0 and in2 \\le max(int(5.0), in0) ):{:\\nloopBreak% = 0\\nwhile b1:{:\\ni0 = ( int(8.0) * i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not divInt(divInt(( i2 + divInt(max(( int(9.0) - in2 ), ( int(1.0) + i1 )),( abs(( int(3.0) * int(8.0) )) - max(max(int(5.0), i2), in2) )) ),max(int(0.0), int(9.0))),abs(min(int(4.0), mod(i1,max(max(i2, ( int(1.0) - int(5.0) )), ( int(7.0) + ( min(int(4.0), int(0.0)) * max(min(max(int(8.0), divInt(( int(5.0) + int(4.0) ),int(4.0))), int(4.0)), in0) ) )))))) == int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 24, 24, 4, 2, 1, 7, 4, 3, 0, 0, 14, 1, 65, 15, 14, 10, 5]}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [2, 0, 0, 1, 0, 2, 0, 2, 0, 1], [0, 1, 1], [0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 4, 1, 6, 8, 4, 8, 3, 5, 9, 7, 5], [0, 2, 5], [2, 0, 2, 2], [], [1, 0, 1, 1, 0, 0, 0], [0, 0, 0], [2, 1, 0, 1], [0, 0], [1], [4, 1, 2, 6, 1, 0, 4, 2, 5, 4, 5, 4, 3, 0, 5, 4, 2, 5, 3], [1, 0, 0, 0], [1, 2, 3, 3, 2, 0, 1, 0, 1, 2, 1, 3, 0, 0, 2, 3, 3, 0, 2, 0, 3, 0, 0, 1, 3, 1, 1, 3, 3, 2, 1, 2, 1, 0, 0, 1, 2, 0, 3, 0, 2, 0, 2, 0, 3, 1, 1, 3, 1, 0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0], [2, 1, 1, 2, 0, 0, 0, 1, 2, 2, 1, 1], [1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(4.0) \\l divInt(abs(max(( in1 - int(4.0) ), i1)),int(4.0)):{:\\nb2 = not divInt(int(1.0),max(i2, res0)) == mod(abs(min(i1, divInt(i0,min(in1, i2)))),int(6.0))\\nin2 += min(int(8.0), int(4.0))\\n:}else:{:\\nin1 = max(abs(mod(int(8.0),divInt(int(3.0),in2))), in1)\\nb0 = int(5.0) != ( in0 - abs(i0) )\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nb2 = b2\\nloopBreak% = 0\\nwhile True:{:\\nin2 = ( in1 + ( i2 - max(int(9.0), int(7.0)) ) )\\nin2 = max(int(5.0), in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 13, 13, 3, 4, 0, 7, 3, 4, 2, 1, 19, 4, 50, 10, 12, 5, 6]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [1], [], [0], [], [1], [1], [], [6, 0], [1], [3, 0], [], [2], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nres0 += abs(i0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 2, 0, 1, 1, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 0, 2, 0, 0, 2, 0, 2, 1], [0, 1, 1, 1], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 3, 1, 0, 2, 3, 1, 9, 5, 6, 7, 1, 8, 0, 4, 4, 9, 5, 3, 3, 9, 5, 4, 0, 1, 2, 1, 8, 4, 2, 8, 0, 8, 2, 1, 5, 2, 4, 6, 9, 0, 0, 6, 1, 5, 6, 3, 8, 3, 4, 1, 2, 0, 2, 8, 8, 9, 8, 6, 1, 4, 2, 8, 7, 7, 5, 1, 0, 6, 5, 4, 0, 5, 8, 6, 7, 9, 1, 6, 4, 9, 5, 6, 7, 0, 9, 6, 4, 2, 3, 7, 7, 1, 3, 3, 1, 2, 2, 4, 9, 6, 3, 3, 7, 9, 2, 7, 4, 0, 9, 4, 5, 1, 9, 9, 6, 1, 7, 8, 1, 7, 1, 8, 4, 7, 2, 7, 6, 7, 7, 5, 3, 2, 5, 2, 4, 2, 5, 8, 9, 5, 1, 2, 8, 6, 6, 8, 9, 9, 0, 1, 2, 0, 9, 7, 7, 4, 3, 9, 3, 5], [3], [2, 0, 2, 2, 0], [], [0, 0, 0, 1, 0, 0], [0], [0, 0, 1, 0, 1], [0, 1], [1], [1, 6, 4, 3, 3, 6, 6, 6, 1, 3, 4, 0, 6, 4, 1, 2, 1, 5, 4, 1, 6, 2, 5, 2, 1, 1, 4, 5, 6, 6, 5, 4, 6, 6, 2, 1, 5, 6, 3, 4, 2, 1, 4, 2, 1, 4, 6, 2, 3, 3, 4, 3, 2, 4, 5, 1, 6, 0, 6, 0, 6, 5, 2, 2, 3, 3, 4, 6, 0, 5, 4, 1, 4, 0, 4, 4, 1, 4, 3, 1, 0, 4, 6, 4, 3, 4, 1, 5, 1, 1, 3, 4, 4, 6, 1, 5, 1, 5, 1, 6, 0, 6, 2, 2, 1, 0, 5, 4, 6, 1, 0, 4, 1, 4, 6, 5, 4, 0, 4, 6, 1, 5, 2, 4, 1, 1, 0, 5, 4, 5, 5, 5, 1, 0, 3, 2, 2, 6, 6, 6, 0, 6, 2, 6, 3, 1, 6, 1, 5, 6], [0, 1, 0], [3, 1, 0, 0, 2, 2, 2, 3, 2, 1, 3, 2, 1, 2, 2, 3, 1, 1, 3, 1, 2, 3, 0, 0, 3, 0, 1, 0, 3, 2, 0, 1, 2, 2, 2, 2, 1, 3, 3, 3, 2, 3, 2, 0, 3, 1, 2, 2, 0, 1, 3, 3, 2, 3, 1, 1, 1, 1, 0, 0, 3, 2, 3, 1, 2, 0, 2, 3, 3, 0, 3, 3, 1, 1, 3, 3, 2, 1, 3, 3, 2, 2, 3, 0, 3, 3, 3, 3, 0, 2, 0, 3, 1, 2, 2, 0, 2, 0, 1, 3, 2, 1, 3, 0, 2, 3, 1, 0, 1, 2, 1, 1, 1, 2, 2, 3, 1, 2, 0, 0, 1, 1, 2, 3, 3, 2, 2, 0, 1, 0, 0, 0, 1, 3, 1, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 1, 0, 0, 2, 3, 3, 3, 2, 1, 0, 2, 2, 3, 3, 2, 0, 3, 2, 3, 1, 1, 0, 0, 2, 2, 3, 0, 2, 1, 0, 3, 3, 1, 3, 0, 2, 1, 0, 1, 0, 3, 3, 0, 3, 3, 2, 0, 3, 1, 1, 2, 3, 1, 2, 1, 0, 0, 2, 3, 3, 2, 2, 3, 3, 1, 2, 3, 1, 1, 1, 2, 2, 2, 3, 1, 3, 3, 1, 2, 3, 0, 3, 0, 0, 2, 2, 2, 1, 3, 2, 1, 0, 3, 2, 0, 2, 3, 0, 2, 1, 0, 0, 3, 2, 2, 2, 3, 1, 0, 3, 2, 1, 0, 2, 3, 3, 3, 2, 2, 0, 2, 1, 0, 3, 2, 1, 2, 1, 0, 0, 2, 1, 3, 3, 0, 1, 2, 3, 3, 0, 2, 3, 2, 3, 0, 2, 2, 0, 3, 3, 0, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 1, 3, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 0, 3, 3, 2, 3, 0, 0, 0, 3, 0, 3, 1, 1, 0, 3, 3, 2, 2, 0, 3, 3, 3, 0, 1, 3, 3, 2, 1, 3, 3, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 3, 0, 2, 0, 1, 1, 2, 3, 2, 1, 2, 2, 1, 1, 0, 3, 0, 2, 1, 3, 3, 2, 0, 2, 2, 0, 3, 1, 0, 3, 0, 1, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 3, 1, 0, 2, 3, 3, 3, 3, 2, 2, 3, 0, 2, 2, 3, 3, 1, 2, 3, 1, 3, 1, 2, 0, 3, 1, 3, 1, 2, 1, 3, 3, 0, 1, 1, 0, 3, 0, 0, 3, 3, 1, 3, 3, 1, 1, 3, 0, 1, 1, 3, 3, 3, 1, 0, 3, 2, 1, 2, 0, 0, 0, 1, 0, 1, 3, 3, 0, 2, 1, 3, 2, 3, 2, 0, 3, 0, 3, 1, 1, 3, 0, 1, 3, 1, 2, 1, 2, 3, 1, 3, 3, 3, 0, 1, 0, 3, 2, 1, 3, 2, 3, 3, 0, 1, 1, 1, 1, 0, 2, 0, 1, 3, 1, 0, 0, 1, 0, 2, 3, 2, 2, 1, 3, 3, 1, 0, 0, 1, 1, 1, 1, 2, 3, 2, 3, 3, 0, 3, 3, 2, 3, 2, 1, 3, 2, 1, 0, 1, 3, 3, 0, 1, 3, 1, 0, 2, 2, 0, 3, 3, 2, 3, 3, 0, 2, 3, 3, 2, 3, 2, 1, 3, 0, 2, 1, 0, 2, 1, 0, 2, 3, 1, 2, 3, 2, 1, 3, 0, 3, 1, 2, 3, 2, 1, 2, 1, 3, 0, 1, 3, 0, 3, 3, 3, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1, 2, 1, 1, 3, 2, 1, 0, 3, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 3, 3, 0, 1, 2, 2, 2, 0, 2, 0, 2, 2, 0, 0, 1, 0, 1, 2, 2, 2, 0, 1, 1, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 2, 0, 2, 0, 1, 0, 2, 1, 1, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 2, 0, 2, 0, 2, 2, 1, 0, 1, 2, 0, 0, 1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0, 1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 1, 0, 1, 2, 1, 0, 1, 2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 1, 2, 0, 2, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 1, 2, 2, 0, 1, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 1, 2, 0, 1, 1, 0, 1, 2, 0, 2, 1, 1, 1, 2, 2, 0, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1], [0, 2, 1, 0, 1, 1, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 0, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 2, 1, 0, 0, 1, 0, 1, 0, 2, 0, 1, 1, 2, 2, 1, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 0, 0, 1, 2, 2, 1, 0, 2, 0, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 2], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 155, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\ni1 = abs(int(0.0))\\nloopBreak% = 0\\nwhile b0:{:\\nres0 += in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nb2 = ( mod(( min(( int(6.0) * abs(( int(3.0) - ( mod(abs(int(1.0)),int(0.0)) + min(int(2.0), mod(abs(res0),res0)) ) )) ), min(res0, int(3.0))) - i1 ),max(mod(in0,int(1.0)), mod(( ( divInt(int(9.0),min(abs(max(( max(( in1 - abs(int(5.0)) ), divInt(mod(i0,int(6.0)),abs(abs(( min(int(7.0), int(1.0)) * int(8.0) ))))) * int(0.0) ), res0)), in1)) - max(( min(int(4.0), divInt(i1,( abs(min(i2, min(max(int(4.0), int(9.0)), abs(min(divInt(int(5.0),abs(min(( ( abs(i1) + abs(max(min(max(in2, mod(in1,abs(int(3.0)))), mod(( i1 * ( res0 * int(3.0) ) ),min(( int(9.0) * min(i2, ( max(int(5.0), in2) * int(4.0) )) ), mod(int(0.0),int(1.0))))), int(2.0))) ) - mod(divInt(abs(int(1.0)),divInt(i2,i1)),int(8.0)) ), int(4.0)))), ( min(max(( ( i1 + int(2.0) ) * in1 ), in2), res0) * int(8.0) )))))) - min(int(0.0), mod(( ( res0 - divInt(divInt(( divInt(in2,divInt(in1,divInt(divInt(mod(int(8.0),res0),res0),mod(min(abs(min(divInt(int(2.0),i2), divInt(divInt(abs(min(( i1 * min(( max(int(1.0), int(5.0)) + in2 ), res0) ), divInt(mod(max(in0, mod(int(2.0),in1)),max(min(int(4.0), abs(i2)), mod(int(6.0),i1))),int(9.0)))),in1),max(max(i2, min(max(divInt(i1,min(int(0.0), int(0.0))), ( abs(int(6.0)) - divInt(int(1.0),in1) )), res0)), ( max(min(divInt(divInt(min(max(int(5.0), ( max(int(6.0), int(3.0)) * int(8.0) )), ( mod(( max(int(3.0), min(max(int(4.0), ( max(i2, max(in0, in0)) * ( mod(divInt(int(1.0),max(( int(2.0) - in1 ), min(( in0 + ( min(i2, mod(int(0.0),in1)) + in2 ) ), min(mod(divInt(mod(abs(int(2.0)),i1),abs(( int(8.0) - res0 ))),divInt(min(max(min(divInt(mod(i0,( int(8.0) * res0 )),max(( int(9.0) + ( int(8.0) * i0 ) ), res0)), ( int(6.0) * abs(max(in2, int(1.0))) )), mod(min(max(i2, ( abs(mod(abs(i2),divInt(mod(in0,abs(min(in0, in1))),mod(res0,divInt(min(i0, ( min(int(4.0), in2) - int(2.0) )),abs(divInt(min(abs(mod(int(8.0),in1)), divInt(abs(int(7.0)),mod(i1,abs(abs(( abs(in1) + i0 )))))),in1))))))) + abs(in1) )), abs(int(7.0))),int(5.0))), i1),min(max(( ( in1 - min(min(abs(in0), int(1.0)), max(min(divInt(int(0.0),min(max(( i1 + i0 ), int(6.0)), mod(mod(in1,res0),mod(( max(in1, mod(in0,int(5.0))) - int(4.0) ),mod(min(( int(0.0) + divInt(mod(int(5.0),int(8.0)),in1) ), min(i1, divInt(int(6.0),abs(abs(mod(in2,( divInt(i1,min(int(7.0), i1)) * max(in0, int(9.0)) ))))))),divInt(in1,int(1.0))))))), abs(int(6.0))), in1)) ) + int(4.0) ), int(9.0)), int(5.0)))), int(6.0))))),min(int(7.0), res0)) - ( abs(abs(abs(min(divInt(( max(i1, divInt(mod(max(abs(int(0.0)), ( max(int(9.0), abs(int(6.0))) - ( in2 * max(int(4.0), min(int(2.0), ( int(3.0) * max(abs(i1), int(7.0)) ))) ) )),int(7.0)),in2)) - min(i1, res0) ),abs(max(int(1.0), min(abs(int(3.0)), int(3.0))))), max(i0, int(1.0)))))) - int(2.0) ) ) )), abs(abs(min(int(2.0), res0))))) * max(( int(4.0) + ( i2 - i2 ) ), i1) ),int(9.0)) * i0 )),int(6.0)),max(abs(in2), divInt(int(3.0),min(( max(mod(in1,min(res0, max(int(3.0), int(7.0)))), min(i1, int(9.0))) * abs(int(2.0)) ), ( int(7.0) + mod(max(int(4.0), min(min(min(i0, int(0.0)), in1), min(mod(int(9.0),max(( max(min(i1, int(4.0)), int(5.0)) * int(1.0) ), int(9.0))), in1))),( res0 * int(9.0) )) ))))), max(int(6.0), in2)), in1) * int(1.0) ))))), i0),( max(( ( int(7.0) * abs(abs(int(8.0))) ) + in1 ), res0) + int(1.0) ))))) - int(7.0) ),int(1.0)),int(8.0)) ) * divInt(max(( abs(abs(i1)) * max(min(divInt(max(( int(4.0) - abs(( int(7.0) + in2 )) ), int(2.0)),abs(max(i2, int(7.0)))), max(int(6.0), in1)), divInt(( i1 * abs(abs(divInt(max(abs(i1), divInt(min(max(( max(( int(7.0) + min(i0, ( int(7.0) + in2 )) ), mod(int(5.0),in1)) - ( max(int(3.0), mod(abs(( int(2.0) * min(in2, abs(int(5.0))) )),divInt(max(mod(int(2.0),mod(int(4.0),max(in2, int(2.0)))), max(in2, abs(abs(min(( int(5.0) * int(8.0) ), ( min(min(max(( ( int(9.0) + ( int(5.0) + int(1.0) ) ) - min(( int(2.0) + i1 ), max(int(8.0), min(abs(int(6.0)), int(6.0)))) ), i0), int(8.0)), int(9.0)) * in0 )))))),i2))) + max(abs(i2), int(9.0)) ) ), divInt(divInt(( res0 + ( res0 - ( ( res0 - i0 ) - int(0.0) ) ) ),res0),int(1.0))), divInt(divInt(divInt(i2,int(2.0)),int(0.0)),res0)),mod(in0,i1))),int(9.0)))) ),int(7.0))) ), max(int(7.0), int(4.0))),int(3.0)) ),res0)) ))) + i1 ), int(9.0)) ) + int(3.0) ),int(5.0)))) * in2 ) \\ge res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 162, 162, 1, 5, 0, 6, 1, 5, 2, 1, 150, 3, 677, 174, 194, 84, 91]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 2], [0], [2], [], [1], [0], [], [], [], [4], [], [2, 0, 1, 1], [0], [], [0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( in1 + int(8.0) ) \\l int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [2], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [2, 0, 1, 0, 2, 0, 2, 0, 0, 0], [1, 0, 0], [1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 7, 2, 0, 3, 9, 6, 0, 6, 4, 0, 5, 5, 1, 9, 6, 5, 3, 5, 9, 5, 3, 8, 0, 5, 6, 8, 8, 1, 3, 8, 2, 8, 3, 2, 7, 2, 6, 9, 7, 6, 0, 8, 3, 3, 5, 5, 2, 7, 2, 4, 1, 0, 3, 3, 7, 9, 6, 3, 8, 0, 3, 1, 6, 4, 6, 4, 3, 4, 1, 8, 1, 3, 9, 6, 6, 0, 3, 9, 5, 9, 1, 3, 8, 8, 4, 1, 8, 1], [3, 4, 1, 3, 4, 0, 5, 4, 1, 3], [1, 1, 2, 1, 0], [1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 3, 2, 3, 3, 2, 2, 3, 3, 1], [1], [1, 0], [5, 2, 0, 0, 5, 1, 6, 4, 2, 1, 0, 5, 6, 1, 4, 2, 4, 0, 3, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 6, 1, 5, 3, 4, 1, 0, 2, 4, 0, 1, 0, 0, 3, 6, 3, 2, 2, 1, 4, 5, 0, 4, 6, 2, 6, 4, 5, 0, 0, 6, 6, 3, 5, 2, 6, 5, 2, 4, 4, 5, 2, 4, 6, 6, 4, 0, 2, 5, 6, 5, 4, 6, 4, 4, 0, 3, 3, 3, 4, 6, 4, 0, 4, 0, 2, 0], [1, 0, 1], [1, 2, 3, 1, 3, 2, 2, 3, 2, 3, 1, 1, 2, 0, 1, 3, 3, 0, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 2, 1, 2, 0, 0, 2, 0, 3, 0, 0, 1, 2, 0, 3, 3, 1, 0, 3, 0, 0, 3, 3, 2, 2, 1, 3, 3, 2, 2, 2, 2, 0, 2, 1, 2, 0, 3, 2, 3, 2, 0, 3, 3, 3, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 2, 1, 1, 0, 3, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 0, 1, 3, 2, 3, 3, 1, 3, 0, 0, 1, 3, 3, 1, 3, 2, 0, 3, 1, 3, 3, 1, 0, 1, 2, 1, 1, 2, 1, 3, 2, 0, 1, 0, 1, 2, 3, 3, 2, 3, 1, 3, 2, 2, 3, 0, 2, 3, 0, 1, 2, 2, 3, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 3, 2, 2, 2, 0, 2, 3, 0, 3, 1, 0, 1, 3, 3, 0, 2, 1, 3, 2, 0, 3, 0, 3, 2, 0, 1, 1, 2, 1, 0, 3, 2, 0, 0, 1, 0, 0, 0, 2, 0, 2, 3, 2, 1, 1, 0, 2, 0, 3, 0, 0, 0, 3, 3, 3, 3, 0, 3, 3, 0, 2, 0, 0, 0, 1, 0, 1, 3, 0, 1, 2, 0, 2, 2, 1, 3, 2, 3, 1, 1, 2, 1, 0, 2, 2, 0, 0, 0, 1, 3, 2, 0, 0, 1, 3, 0, 0, 0, 3, 1, 0, 2, 1, 3, 2, 2, 0, 0, 1, 2, 2, 2, 3, 0, 0, 2, 3, 3, 3, 3, 3, 2, 3, 0, 2, 3, 3, 0, 0, 0, 1, 0, 1, 3, 1, 2, 1, 1, 2, 3, 2, 1, 0, 1, 2, 1, 1, 3, 1, 2, 2, 1, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0, 2, 0, 2, 1, 2, 0, 3, 2, 0, 2, 3, 3, 3, 0, 1, 2, 3, 3, 1, 2, 3, 2, 0, 2, 1, 2, 3, 1, 1, 1, 1, 3, 3, 0, 2, 0, 0, 3, 0, 1, 2, 1, 3, 2, 0, 2, 1, 1, 3, 3, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 2, 2, 2, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 2, 2, 1, 0, 0, 0, 2, 2, 1, 1, 0, 2, 1, 1, 0, 2, 0, 2, 1, 1, 0, 0, 1, 2, 2, 2, 0, 1, 0, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 2, 0, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 1, 2, 2, 2, 1, 1, 2, 2, 0, 1, 2, 0, 1, 1, 2, 0, 0, 0, 1, 0, 0, 1, 1, 0, 2, 2, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 78, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not int(2.0) \\ge mod(min(int(0.0), min(( ( min(( abs(int(7.0)) + int(2.0) ), ( in2 - int(0.0) )) * min(min(i2, int(3.0)), int(9.0)) ) + i0 ), int(6.0))),int(0.0)):{:\\ni0 *= ( int(6.0) - int(4.0) )\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not ( int(0.0) \\le in2 or divInt(int(5.0),( i1 - res0 )) \\g mod(in1,abs(i2)) )\\nif not i1 \\ge int(5.0):{:\\nb1 = mod(i0,max(abs(int(1.0)), in2)) \\le abs(res0)\\nif ( ( i1 \\l abs(max(( divInt(int(9.0),max(max(( mod(( mod(in1,mod(int(6.0),divInt(i2,max(divInt(abs(divInt(in1,min(abs(max(int(5.0), int(3.0))), int(5.0)))),int(9.0)), int(5.0))))) - mod(max(int(3.0), int(8.0)),divInt(( int(0.0) * int(5.0) ),i0)) ),min(( mod(in0,int(6.0)) - i1 ), in0)) + mod(int(8.0),divInt(int(8.0),i2)) ), i2), int(1.0))) - min(divInt(min(min(int(3.0), min(i0, i0)), int(8.0)),abs(min(int(2.0), max(mod(i1,min(int(8.0), abs(min(int(3.0), i0)))), int(2.0))))), ( int(7.0) + int(2.0) )) ), mod(int(6.0),min(divInt(i0,int(9.0)), i0)))) and not int(7.0) != divInt(min(abs(( abs(int(6.0)) - abs(divInt(( max(res0, mod(min(i1, int(0.0)),( divInt(abs(( ( ( ( abs(( int(8.0) + abs(( ( max(( ( ( in2 * ( max(in0, abs(int(3.0))) - in1 ) ) * int(3.0) ) * min(min(i1, divInt(int(5.0),max(( i0 * abs(i2) ), min(divInt(in1,int(5.0)), int(2.0))))), mod(int(7.0),i0)) ), min(( i1 - i0 ), int(2.0))) - i0 ) * in0 )) )) * res0 ) + ( in0 - mod(min(mod(int(4.0),int(1.0)), i2),( i2 * abs(i1) )) ) ) + in1 ) - in2 )),abs(max(max(max(i0, max(abs(in1), divInt(res0,i2))), res0), int(0.0)))) - in1 ))) * int(3.0) ),abs(in2))) )), int(3.0)),( i0 + mod(divInt(int(7.0),max(( min(int(9.0), int(6.0)) + divInt(int(3.0),i0) ), divInt(( res0 + res0 ),in0))),int(8.0)) )) ) and min(( in2 - i2 ), int(0.0)) \\le min(res0, in2) ):{:\\nb0 = not ( i2 \\g abs(int(3.0)) and ( in1 \\ge divInt(int(1.0),abs(( divInt(in1,in2) + int(6.0) ))) or False ) )\\n:}\\n:}else:{:\\ni2 = mod(divInt(divInt(max(in1, res0),divInt(max(min(abs(max(max(( min(res0, mod(abs(min(in1, i0)),i2)) + int(4.0) ), in2), int(6.0))), abs(int(4.0))), ( int(3.0) - int(4.0) )),mod(max(mod(int(1.0),res0), int(8.0)),mod(int(1.0),int(3.0))))),max(int(9.0), divInt(( int(6.0) - divInt(in2,min(min(max(abs(in1), res0), in1), in1)) ),mod(i0,( int(6.0) + mod(in0,abs(( in0 * mod(abs(min(max(in0, int(0.0)), mod(min(min(int(3.0), divInt(max(divInt(in1,divInt(int(9.0),( abs(int(5.0)) * int(9.0) ))), int(1.0)),int(3.0))), max(abs(res0), divInt(in1,i0))),min(in1, int(8.0))))),( int(8.0) - min(divInt(i0,divInt(int(4.0),int(1.0))), abs(abs(i2))) )) ))) ))))),int(8.0))\\ni0 += int(1.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 90, 90, 10, 5, 5, 22, 10, 12, 1, 2, 96, 3, 376, 98, 95, 44, 56]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 0], [1], [0, 0, 0, 0], [], [2, 3, 1, 0], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not ( False or b0 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 1, 4, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 4], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [1, 2, 1, 1, 0, 1], [0], [0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 2, 8, 4, 9, 2, 5, 0, 3, 7, 3, 2, 3, 6, 4, 3, 9, 5, 9, 6, 5, 9, 8, 1, 0, 9, 8, 6, 3, 8, 2, 6, 6, 1, 3, 9, 7, 9, 5, 8, 9, 5, 7, 3, 1, 8, 7, 6, 4, 7, 6, 2, 4, 3, 9, 5, 0, 0, 8, 6, 2, 8, 9, 6, 3, 5, 9, 4, 6, 3, 9, 1, 3, 4, 1, 3, 4, 4, 0, 5, 3, 4, 2, 0, 9, 3, 6, 7, 6, 9, 3, 8, 8, 7, 8, 1, 3, 0, 9, 2, 5, 7, 3, 1, 8, 0, 1, 1, 8, 5, 3, 2, 4, 0, 2], [1, 4, 4], [2, 2, 2, 2, 2], [], [0, 0, 1, 1, 1], [0, 0, 0], [1, 0], [1], [1], [2, 6, 4, 6, 0, 0, 4, 0, 1, 0, 3, 5, 6, 5, 2, 5, 1, 5, 0, 2, 4, 3, 2, 5, 3, 5, 6, 1, 1, 1, 1, 4, 1, 3, 4, 2, 1, 4, 0, 4, 0, 6, 0, 1, 1, 3, 4, 3, 4, 4, 3, 1, 3, 6, 4, 4, 2, 1, 6, 0, 4, 0, 6, 5, 4, 1, 5, 2, 6, 1, 3, 6, 2, 2, 1, 5, 3, 6, 3, 3, 1, 5, 2, 5, 6, 6, 3, 1, 0, 6, 3, 5, 0, 4, 2, 6, 0, 2, 5, 1, 0, 2, 0, 2, 2, 4, 6, 4, 2, 3, 6, 3, 5, 1, 6, 2, 6, 1, 0, 6, 2, 4, 6, 2, 2, 2, 5, 1, 5, 3, 1, 5, 2, 2, 6, 2, 4, 3], [0], [1, 0, 1, 3, 2, 3, 1, 3, 2, 1, 0, 0, 2, 1, 2, 3, 3, 0, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 3, 0, 1, 2, 2, 2, 1, 2, 0, 3, 2, 2, 3, 3, 3, 1, 0, 1, 3, 3, 3, 1, 1, 2, 3, 0, 2, 0, 0, 1, 2, 1, 3, 1, 2, 3, 3, 1, 2, 1, 1, 0, 0, 1, 3, 0, 3, 0, 1, 3, 0, 1, 1, 2, 2, 1, 0, 3, 3, 2, 3, 0, 0, 2, 3, 2, 2, 0, 0, 1, 2, 3, 0, 0, 2, 3, 1, 2, 2, 3, 2, 0, 1, 1, 3, 2, 3, 3, 0, 0, 3, 3, 3, 2, 0, 3, 0, 2, 2, 0, 3, 0, 3, 3, 1, 1, 3, 1, 0, 3, 2, 1, 3, 1, 3, 0, 3, 3, 1, 3, 3, 2, 2, 0, 3, 3, 0, 2, 1, 3, 1, 1, 1, 0, 3, 3, 0, 3, 2, 3, 2, 3, 1, 0, 2, 3, 3, 3, 3, 2, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 1, 0, 0, 0, 0, 0, 2, 3, 3, 3, 2, 0, 0, 2, 0, 2, 1, 2, 2, 2, 2, 0, 3, 3, 1, 3, 2, 3, 2, 1, 2, 2, 1, 0, 3, 0, 1, 3, 2, 2, 0, 3, 2, 3, 1, 2, 0, 3, 2, 0, 2, 3, 0, 0, 0, 1, 0, 2, 3, 0, 1, 0, 2, 2, 2, 3, 2, 0, 0, 0, 3, 2, 0, 0, 2, 3, 3, 3, 3, 0, 2, 3, 2, 2, 2, 3, 2, 3, 1, 0, 2, 1, 3, 2, 1, 0, 3, 1, 0, 3, 3, 3, 3, 1, 1, 0, 1, 2, 3, 0, 0, 0, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 1, 2, 3, 2, 0, 3, 3, 0, 3, 1, 3, 0, 2, 1, 0, 2, 0, 3, 2, 2, 3, 2, 0, 0, 2, 1, 0, 1, 0, 3, 3, 0, 0, 2, 2, 0, 2, 2, 3, 1, 2, 1, 3, 0, 2, 3, 1, 3, 3, 3, 0, 0, 1, 3, 2, 0, 1, 3, 1, 0, 3, 2, 1, 3, 3, 3, 2, 1, 0, 1, 1, 0, 0, 3, 2, 1, 2, 1, 2, 0, 3, 3, 3, 3, 2, 3, 3, 2, 3, 1, 0, 0, 1, 1, 3, 3, 2, 1, 3, 1, 3, 2, 3, 0, 3, 3, 0, 3, 3, 1, 0, 2, 0, 0, 0, 3, 1, 2, 2, 3, 0, 2, 2, 0, 0, 0, 2, 2, 0, 3, 1, 3, 3, 3, 0, 0, 3, 0, 1, 0, 2, 2, 3, 2, 2, 1, 1, 0, 3, 0, 3, 0, 2, 2, 2, 3, 2, 1, 1, 1, 0, 3, 1, 0, 0, 3, 0, 2, 1, 3, 1, 2, 2, 2, 3, 3, 3, 1, 0, 0, 2, 1, 0, 2, 2, 2, 0, 1, 0, 2, 2, 0, 1, 1, 2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 2, 3, 1, 2, 1, 2, 1, 0, 0, 1, 2, 2, 3, 3, 1, 2, 0, 1, 1, 1, 3, 3, 1, 1, 3, 1, 1, 3, 3, 3, 0, 0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0], [1, 1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2, 0, 0, 0, 1, 2, 1, 2, 2, 1, 2, 2, 1, 0, 2, 0, 2, 0, 0, 1, 1, 2, 0, 2, 2, 2, 0, 2, 1, 1, 0, 0, 1, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 0, 0, 1, 0, 1, 0, 2, 1, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 2, 2, 0, 2, 1, 0, 2, 0, 0, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 1, 0, 1, 2, 2, 1, 2, 1, 2, 2, 2, 0], [1, 1, 2, 1, 0, 1, 2, 2, 2, 2, 0, 1, 2, 2, 1, 0, 2, 1, 2, 2, 0, 2, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 2, 2, 2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 2, 0, 1, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 2], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\nif b2:{:\\ni2 = int(6.0)\\nb2 = res0 \\g int(0.0)\\n:}else:{:\\nb2 = max(divInt(max(int(2.0), min(mod(int(8.0),in1), res0)),( int(4.0) - ( abs(max(i0, int(9.0))) - divInt(i0,( mod(( int(2.0) * mod(( int(5.0) - min(in1, int(0.0)) ),divInt(( ( int(3.0) + divInt(i0,max(( ( max(max(abs(int(7.0)), i1), int(3.0)) - min(min(max(int(2.0), int(3.0)), ( abs(i0) * ( in0 * in2 ) )), int(6.0)) ) * ( int(4.0) * min(int(3.0), mod(min(min(int(9.0), mod(int(5.0),int(9.0))), res0),in2)) ) ), int(6.0))) ) + max(i2, abs(in2)) ),int(5.0))) ),max(i1, int(9.0))) - int(8.0) )) ) )), mod(mod(int(1.0),in2),abs(abs(( max(i0, i2) * divInt(abs(( mod(in1,in0) * int(0.0) )),divInt(abs(i2),in2)) ))))) \\le divInt(max(int(9.0), ( ( min(divInt(in0,int(8.0)), int(6.0)) - abs(( min(abs(in2), res0) + min(min(max(( i1 * max(i1, ( ( i1 - abs(i1) ) * min(abs(int(3.0)), int(8.0)) )) ), abs(int(2.0))), in1), abs(mod(int(6.0),min(int(6.0), abs(i1))))) )) ) * max(max(int(1.0), min(min(( mod(in0,max(abs(in1), divInt(int(3.0),max(int(9.0), int(7.0))))) + int(9.0) ), i2), max(abs(i1), min(divInt(min(divInt(max(int(5.0), in1),divInt(max(max(max(abs(divInt(int(8.0),int(9.0))), int(5.0)), i0), ( in1 * abs(int(7.0)) )),i0)), ( int(3.0) - res0 )),i0), i1)))), i1) )),in0)\\n:}\\nb2 = mod(abs(abs(max(mod(in1,in0), ( in1 - mod(int(1.0),( ( divInt(mod(in1,abs(min(int(8.0), min(( max(( int(7.0) - divInt(mod(int(6.0),in0),min(i1, int(4.0))) ), max(divInt(( in0 - min(( abs(int(7.0)) * mod(res0,max(mod(in1,divInt(abs(in1),i2)), i1)) ), int(6.0)) ),res0), ( abs(i0) + int(2.0) ))) + in1 ), ( ( divInt(max(( i0 - res0 ), in2),min(mod(in1,i1), mod(abs(min(max(max(in2, divInt(abs(divInt(( mod(min(( min(int(4.0), i2) + mod(int(3.0),min(( int(9.0) - res0 ), abs(int(5.0)))) ), i1),min(min(abs(min(int(0.0), int(0.0))), in0), int(8.0))) * ( abs(res0) * i2 ) ),i2)),mod(divInt(( i1 * ( int(6.0) - in2 ) ),in0),int(2.0)))), res0), int(8.0))),( abs(mod(in0,min(min(in0, abs(int(9.0))), max(i1, mod(int(6.0),in2))))) - divInt(i2,abs(mod(( max(mod(in2,res0), ( int(3.0) + res0 )) + int(5.0) ),in0))) )))) * min(max(i1, i0), ( ( res0 * divInt(divInt(abs(int(9.0)),mod(int(4.0),abs(in0))),( min(int(6.0), abs(max(abs(in2), i0))) + int(3.0) )) ) - min(( in1 - int(9.0) ), max(int(1.0), i2)) )) ) * max(divInt(int(3.0),min(max(max(divInt(int(4.0),res0), int(1.0)), int(3.0)), i0)), i2) ))))),min(( int(4.0) + divInt(int(4.0),divInt(in2,min(max(max(min(( min(abs(mod(abs(int(0.0)),i1)), i0) * int(5.0) ), int(3.0)), max(abs(( int(4.0) - abs(int(2.0)) )), min(divInt(abs(i2),max(min(i0, abs(min(int(0.0), i2))), mod(i2,in1))), res0))), min(int(9.0), divInt(divInt(abs(in1),mod(divInt(i2,in0),res0)),divInt(mod(in0,max(int(3.0), max(max(max(in2, i1), abs(res0)), int(6.0)))),i2)))), divInt(( max(( mod(int(7.0),int(6.0)) + res0 ), max(i1, max(i0, mod(( divInt(max(( int(9.0) * int(3.0) ), int(8.0)),res0) + min(int(8.0), i2) ),in1)))) - abs(res0) ),mod(int(7.0),max(int(8.0), ( ( ( max(abs(abs(int(1.0))), i2) + i2 ) - mod(int(3.0),i2) ) + divInt(mod(( in2 + int(0.0) ),i1),( ( in2 + int(9.0) ) - int(2.0) )) ))))))) ), divInt(in0,i1))) * ( mod(in2,i2) + int(5.0) ) ) * divInt(int(7.0),abs(int(3.0))) )) )))),( max(( mod(min(max(divInt(abs(int(1.0)),mod(int(8.0),mod(int(0.0),i2))), res0), int(1.0)),divInt(( abs(max(int(1.0), ( i2 + int(8.0) ))) + int(5.0) ),int(3.0))) + abs(max(int(2.0), int(4.0))) ), abs(int(0.0))) * int(2.0) )) \\le abs(abs(min(in1, in0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 116, 116, 3, 5, 0, 5, 3, 2, 1, 1, 138, 1, 554, 145, 156, 65, 80]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1], [9], [4], [1, 0], [], [1, 0], [0], [1], [0], [], [6], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = res0 \\le int(9.0)\\nb0 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1], [8], [0], [2, 1], [], [0, 1], [0], [0], [], [], [5], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nb1 = int(8.0) \\l in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 1], [0], [1, 1, 1, 1, 1, 1], [8, 7, 4, 3, 0, 5], [0, 5, 3], [1, 1, 2], [1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0], [0, 3, 2, 3, 1, 2, 3, 1, 0, 2, 3], [1, 0], [], [0, 3, 2, 2, 5, 4], [], [0, 2, 3, 2, 3, 1, 1, 0, 0, 1, 3, 3, 3, 1, 0, 1, 2, 1, 0, 0], [1, 1, 0], [1, 2, 2, 1, 0], [2], [1, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile ( not ( False or not i0 \\l mod(max(mod(abs(int(8.0)),int(7.0)), in0),i2) ) and ( True or b1 ) ):{:\\nb2 = not ( int(4.0) != abs(max(min(int(3.0), i2), int(0.0))) and ( int(5.0) * in2 ) \\ge in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 6, 6, 3, 3, 4, 14, 3, 11, 2, 0, 6, 0, 20, 3, 5, 1, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 0, 2, 1, 0, 1, 1], [1, 0, 1], [0, 0, 1, 0, 0], [], [], [], [0, 2, 1, 2, 2, 0, 0, 1], [], [0, 0, 0, 0, 0, 0, 0, 0], [], [1, 0, 2, 1, 0, 0, 1, 0], [1, 1, 0], [1], [2, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nif b0:{:\\nb2 = not False\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = res0\\nb0 = True\\nb0 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 0, 0, 0, 8, 0, 8, 0, 8, 3, 1, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 0, 1], [8, 2, 5, 3, 8], [2], [2], [], [1], [0], [], [], [], [6, 0, 3, 4, 6, 3, 0], [], [2, 3, 2, 3, 2, 1, 0, 0, 3, 2, 2, 1, 0, 3, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1], [1, 0, 0, 1], [0], [1, 0, 1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( max(mod(min(divInt(int(8.0),res0), i0),min(mod(divInt(int(2.0),in0),max(in1, res0)), in0)), i0) + int(5.0) ) == int(38.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 7, 0, 20, 5, 4, 1, 4]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 2, 2, 9, 1, 0, 1], [0], [0], [], [0, 1], [0], [2], [], [], [1, 6, 1, 2, 1, 3, 6, 5, 1, 1, 0, 6, 1, 6], [], [0, 3, 0, 2, 1, 3, 2, 2, 0, 2, 3, 2, 1, 1, 2, 3, 1, 3, 0, 0, 1, 3, 3, 3, 2, 1, 2, 0, 3, 0, 3, 0, 0, 2, 0, 0, 2, 2, 0, 2, 3, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 2, 0, 2, 1, 1, 2, 1, 1, 1, 0], [0, 1, 1, 2, 0, 0], [0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not i1 \\l max(res0, ( int(3.0) + abs(divInt(mod(i1,( min(mod(int(0.0),int(2.0)), ( abs(int(2.0)) - max(i2, i1) )) - int(9.0) )),max(abs(max(mod(int(1.0),( in0 * max(res0, max(in2, i1)) )), divInt(i1,i0))), divInt(( res0 + ( min(i1, int(0.0)) + res0 ) ),int(1.0))))) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 8, 8, 1, 1, 0, 2, 1, 1, 0, 0, 14, 0, 45, 12, 11, 6, 6]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 7, 7, 1, 2, 4, 9, 4, 1, 1, 6, 0, 0, 7, 7, 0, 9, 9, 2, 7, 9, 7, 6, 6, 1, 5, 7, 8, 5, 3, 9, 7, 8, 5, 7, 1, 4, 9, 4, 5, 4, 8, 7, 0, 7, 0, 2, 2], [2, 3, 0], [0], [0], [0, 1, 1, 1], [0, 0, 0], [3], [], [], [0, 0, 1, 1, 1, 0, 2, 6, 3, 1, 0, 3, 2, 6, 5, 5, 6, 6, 4, 1, 3, 1, 3, 5, 5, 5, 6, 4, 0, 3, 0, 5, 6, 0, 6, 6, 4, 2, 2, 6, 4, 2, 6], [1], [1, 3, 3, 0, 3, 1, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 3, 0, 3, 2, 1, 3, 3, 3, 3, 0, 2, 0, 2, 1, 3, 0, 3, 2, 1, 1, 1, 3, 0, 3, 3, 2, 2, 3, 1, 2, 0, 3, 2, 0, 3, 1, 3, 2, 1, 2, 2, 0, 3, 2, 1, 0, 2, 3, 1, 0, 3, 0, 1, 1, 3, 0, 2, 1, 1, 3, 2, 1, 2, 3, 2, 3, 0, 2, 3, 2, 3, 3, 2, 2, 2, 1, 1, 1, 3, 3, 0, 2, 2, 1, 0, 0, 1, 3, 2, 3, 2, 0, 1, 0, 1, 3, 1, 3, 0, 1, 3, 1, 3, 0, 1, 2, 2, 1, 0, 1, 2, 2, 3, 2, 0, 2, 2, 3, 1, 1, 2, 1, 1, 1, 3, 3, 3, 3, 0, 0, 3, 0, 2, 3, 3, 2, 3, 0, 2, 1, 3, 2, 1, 1, 0, 2, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 3, 3, 3, 2, 1, 3, 3, 0, 2, 1, 0, 2, 2, 2, 0, 0, 2, 0, 1, 0, 3, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 2, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 1], [0, 0, 2, 0, 1, 1, 0, 1, 2, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 1, 0, 0, 2, 0, 1, 2], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(2.0) == abs(abs(i0)) and abs(int(9.0)) \\ge i0 ):{:\\nb0 = divInt(int(7.0),( abs(max(divInt(int(7.0),( mod(min(i1, min(divInt(int(1.0),max(abs(min(abs(i1), ( i1 + ( int(2.0) + min(i0, abs(( int(4.0) * int(9.0) ))) ) ))), int(4.0))), abs(i2))),min(min(( ( min(int(1.0), ( res0 + max(( in0 - min(int(1.0), max(( int(6.0) - ( ( i1 + min(divInt(int(0.0),i0), ( max(int(0.0), in0) - min(i2, int(7.0)) )) ) * int(7.0) ) ), min(res0, divInt(int(0.0),int(9.0))))) ), min(divInt(int(9.0),( abs(mod(min(in2, mod(abs(mod(min(min(( ( divInt(int(2.0),int(7.0)) + int(9.0) ) - max(abs(in2), mod(mod(int(7.0),res0),res0)) ), int(6.0)), abs(divInt(abs(( in1 - int(6.0) )),i1))),int(1.0))),min(int(5.0), abs(in0)))),int(7.0))) + abs(int(8.0)) )), abs(i1))) )) + int(5.0) ) + ( ( int(3.0) - in0 ) + int(9.0) ) ), mod(divInt(min(divInt(in2,( ( min(int(7.0), int(8.0)) - ( int(5.0) + int(7.0) ) ) * int(1.0) )), max(abs(max(abs(in2), in2)), max(res0, mod(min(abs(( max(in1, mod(int(4.0),max(mod(int(9.0),int(4.0)), i0))) + ( int(5.0) * in0 ) )), int(4.0)),i0)))),int(8.0)),in2)), res0)) - mod(i0,int(7.0)) )), max(abs(max(divInt(int(0.0),abs(abs(res0))), divInt(int(7.0),res0))), ( ( ( in1 + i2 ) + ( i2 * int(0.0) ) ) + res0 )))) - max(in1, int(2.0)) )) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 *= int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 49, 49, 3, 1, 1, 4, 3, 1, 0, 0, 43, 1, 197, 51, 55, 29, 23]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1], [5], [4], [1, 0], [], [0, 0, 1], [0], [1, 2], [1], [], [2], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nb0 = not i2 \\le int(5.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 3, 1, 2, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [1, 0], [1, 1, 1, 1, 1], [2, 7, 9, 6, 9], [4], [0], [], [1, 0], [0], [1], [1], [], [1, 6], [0], [1, 0, 3, 3, 1, 2, 1, 2, 1, 1], [1, 0], [1, 2], [0], [0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(2.0) \\le i1:{:\\nres0 = max(abs(int(7.0)), divInt(int(9.0),( int(6.0) + int(9.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 5, 5, 1, 1, 0, 2, 1, 1, 1, 0, 2, 1, 10, 2, 2, 1, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [0, 1, 2, 2, 1, 1], [0, 1], [0, 0, 1, 0], [1, 1, 1, 1], [8, 8, 8, 8], [4, 3, 1], [2, 2, 1, 0, 2], [], [0, 0, 1, 1, 1], [0, 0, 0], [0, 0], [], [0], [1, 4, 6, 3, 5, 3], [1], [2, 1, 1, 0, 3, 0, 1, 0, 1, 0, 0], [0], [0], [0, 1], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\nb1 = b0\\nif ( int(8.0) + int(8.0) ) \\le i1:{:\\nloopBreak% = 0\\nwhile min(in1, int(8.0)) \\ge res0:{:\\nin0 -= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = in2 \\g in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 4, 4, 3, 5, 0, 5, 3, 2, 0, 1, 6, 1, 11, 1, 1, 2, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [0, 8], [], [], [], [], [], [], [], [], [3, 0, 0], [1], [2, 3, 1, 2, 0, 2, 0, 1], [0, 0, 0], [2], [0, 1, 1, 0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += ( abs(int(0.0)) - ( i0 - ( i0 + int(8.0) ) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 8, 3, 1, 4, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0], [], [1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 0, 9, 1, 6, 2, 9, 4, 6, 9, 3, 2, 6, 6, 4], [5, 0, 2], [1, 2, 0, 0, 0], [], [1, 1, 1, 0], [0, 0, 0], [0], [], [], [3, 6, 0, 2, 1, 1, 4, 2, 0, 4, 5, 1, 6, 5, 0, 3], [0, 0], [2, 3, 1, 0, 0, 1, 0, 3, 2, 1, 2, 3, 3, 0, 1, 2, 1, 3, 1, 2, 0, 2, 3, 0, 1, 0, 3, 1, 3, 2, 1, 3, 2, 3, 1, 1, 1, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 1, 3, 3, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 1, 1, 2, 1, 0, 0, 1, 2, 1, 2, 2], [2, 2, 0, 1, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = divInt(abs(int(8.0)),res0)\\ni0 = i2\\nb1 = int(0.0) != i1\\nb2 = max(( int(9.0) * ( max(abs(i1), int(1.0)) * ( int(6.0) + max(int(2.0), ( in1 - ( min(i2, int(9.0)) * i0 ) )) ) ) ), min(int(4.0), max(( int(6.0) + abs(mod(max(int(9.0), int(3.0)),int(2.0))) ), divInt(in1,( divInt(in2,divInt(i1,res0)) - in2 ))))) \\l i0\\nb0 = ( mod(int(6.0),abs(abs(int(6.0)))) - in0 ) == int(4.0)\\nb0 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 0, 6, 15, 15, 3, 5, 0, 4, 3, 1, 0, 0, 16, 2, 55, 14, 12, 8, 6]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 1, 1, 1, 2, 1], [0, 0], [1, 0, 1, 1], [], [], [], [2, 1, 2, 0], [], [0, 0, 0], [], [0, 0, 0], [], [1, 0], [1, 3, 2, 6, 0, 5], [0, 0, 1], [0, 0, 0], [], [], [2], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\ni1 = in0\\nb1 = b2\\ni2 = res0\\n:}else:{:\\nif b0:{:\\ni0 *= in2\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 0, 0, 0, 4, 0, 3, 0, 3, 0, 2, 6, 3, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 0, 2, 1, 2, 0, 2, 2, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 8, 9, 3, 9, 9, 5, 8, 9, 6, 8, 9, 7, 4, 0, 9, 4, 3, 2, 6, 4, 2, 1, 1, 1, 7, 0, 4, 3, 0, 9, 3, 8, 3, 1, 8, 6, 8, 3, 1, 0, 1, 1, 2, 1, 9, 5, 1, 6, 9, 1, 5, 4, 6, 1, 0, 2, 7, 3, 8, 5, 3, 8, 4, 0, 9, 4, 1, 5, 8, 3, 5, 5, 0, 0, 1, 6, 4, 9, 5, 4, 5, 5, 6], [0, 4, 5, 2, 1, 0, 0, 0, 2, 4, 0], [1, 0, 1, 1, 0], [], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 2, 1], [1], [0, 0, 1, 1, 0], [1, 4, 0, 5, 1, 1, 2, 0, 0, 1, 5, 2, 5, 6, 3, 1, 3, 3, 2, 5, 3, 5, 5, 4, 4, 5, 4, 2, 6, 0, 6, 5, 0, 4, 0, 2, 2, 1, 2, 2, 4, 0, 4, 2, 1, 0, 5, 1, 4, 3, 0, 6, 2, 4, 3, 6, 6, 5, 2, 1, 0, 3, 1, 4, 2, 4, 5, 3, 1, 3, 6, 2, 4, 0, 1, 3, 6, 6, 6, 0, 4, 1, 1, 4, 2, 3, 2, 6, 2, 5, 6, 0, 6, 1, 3, 1, 0, 5, 5, 5, 3, 1, 0, 0, 6], [0, 0, 0], [3, 0, 3, 2, 0, 3, 3, 2, 2, 2, 1, 1, 3, 1, 0, 2, 1, 2, 2, 1, 2, 0, 1, 0, 1, 1, 0, 3, 3, 1, 3, 0, 3, 2, 1, 2, 0, 3, 0, 1, 0, 1, 0, 2, 0, 0, 1, 3, 0, 2, 3, 3, 2, 2, 0, 0, 3, 0, 3, 2, 0, 0, 1, 2, 1, 2, 1, 3, 3, 1, 2, 1, 0, 3, 2, 1, 3, 3, 3, 3, 2, 3, 0, 0, 0, 0, 1, 2, 0, 1, 3, 1, 0, 2, 2, 0, 1, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 2, 2, 2, 2, 1, 2, 2, 3, 0, 1, 1, 2, 0, 3, 3, 0, 1, 3, 1, 0, 2, 1, 0, 2, 1, 1, 3, 2, 1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 1, 0, 3, 0, 3, 3, 3, 0, 0, 0, 3, 1, 0, 1, 3, 2, 3, 1, 0, 1, 0, 2, 2, 1, 3, 3, 3, 1, 1, 1, 3, 3, 0, 3, 2, 0, 1, 3, 2, 1, 1, 2, 1, 1, 2, 0, 0, 3, 2, 0, 0, 1, 0, 0, 0, 0, 3, 1, 3, 3, 0, 1, 0, 2, 3, 3, 0, 0, 3, 1, 2, 2, 3, 3, 2, 1, 2, 3, 1, 2, 0, 0, 2, 1, 2, 3, 0, 2, 2, 0, 1, 2, 3, 1, 3, 2, 2, 2, 0, 3, 1, 2, 0, 3, 0, 0, 2, 0, 3, 0, 0, 2, 3, 2, 3, 1, 1, 0, 3, 3, 2, 3, 0, 2, 3, 2, 3, 2, 1, 2, 0, 3, 3, 2, 2, 0, 0, 3, 1, 0, 0, 3, 1, 0, 1, 2, 1, 3, 1, 2, 0, 2, 1, 2, 3, 3, 0, 2, 3, 2, 1, 2, 2, 3, 2, 1, 0, 3, 1, 3, 0, 2, 2, 1, 1, 1, 3, 0, 0, 3, 3, 2, 3, 2, 0, 0, 0, 1, 2, 0, 0, 0, 3, 1, 2, 0, 2, 3, 3, 0, 0, 1, 1, 2, 3, 3, 0, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 1, 3, 0, 2, 3, 2, 3, 2, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 0, 0, 0, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 2, 2, 2, 2, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 2, 0, 1, 1, 0, 1, 2, 0, 0, 1, 1, 2, 1, 2, 2, 0, 0, 0, 2, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 2, 1, 0, 1, 2, 1, 2, 2, 2, 1, 0, 0, 0, 2, 0, 1, 2, 1, 2, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 1, 2, 2], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(i1, abs(mod(in1,max(abs(mod(mod(( int(7.0) - int(6.0) ),max(int(8.0), i0)),mod(int(9.0),divInt(( int(3.0) - ( in2 - int(9.0) ) ),i1)))), int(9.0))))) \\l int(5.0):{:\\nloopBreak% = 0\\nwhile i1 \\le min(abs(int(8.0)), abs(i2)):{:\\nif not b1:{:\\nif not abs(( int(9.0) * divInt(i0,max(i0, int(6.0))) )) != i1:{:\\nif not not int(8.0) == in2:{:\\ni2 = mod(in2,res0)\\n:}else:{:\\nloopBreak% = 0\\nwhile int(9.0) \\g abs(in0):{:\\nb0 = ( min(min(( ( i1 - in0 ) + min(in0, min(( i2 - in2 ), int(7.0))) ), divInt(int(4.0),( int(0.0) * abs(max(int(9.0), ( int(4.0) - in0 ))) ))), min(divInt(int(3.0),abs(min(min(min(mod(min(in2, in2),in1), in1), int(2.0)), ( in2 * int(6.0) )))), min(int(4.0), in1))) * ( ( i2 * int(2.0) ) - int(1.0) ) ) \\l min(abs(max(max(min(int(1.0), res0), i0), res0)), ( ( ( mod(int(1.0),( mod(min(in2, int(7.0)),int(0.0)) + mod(i0,min(max(in1, int(4.0)), min(int(3.0), i0))) )) + ( int(0.0) + i2 ) ) * ( int(9.0) + int(3.0) ) ) - min(mod(int(8.0),( divInt(i2,( int(3.0) * mod(( mod(( int(1.0) - i1 ),max(i2, min(max(abs(i2), in1), i0))) * abs(int(8.0)) ),in1) )) + int(6.0) )), min(( abs(int(8.0)) - i2 ), int(3.0))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\ni1 = i0\\n:}else:{:\\nloopBreak% = 0\\nwhile ( divInt(int(1.0),min(max(min(int(0.0), int(1.0)), int(1.0)), min(min(in2, max(mod(i1,int(2.0)), abs(( int(1.0) - int(9.0) )))), ( int(5.0) * int(1.0) )))) - mod(in1,in0) ) \\l abs(( i0 - res0 )):{:\\nif int(6.0) \\l i2:{:\\nb1 = in1 == in0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = abs(int(9.0)) \\le abs(min(in2, int(1.0)))\\nb0 = i2 \\l ( min(max(i1, i0), abs(int(5.0))) + ( ( min(abs(mod(int(4.0),divInt(max(int(6.0), ( in0 + i1 )),( int(1.0) + divInt(min(in1, ( ( i2 + int(0.0) ) - divInt(min(int(2.0), abs(( ( mod(in1,abs(int(7.0))) - divInt(in2,min(in0, i1)) ) * mod(in0,max(res0, i2)) ))),mod(max(( min(int(3.0), int(8.0)) - in1 ), max(abs(( min(i0, mod(min(( max(( int(5.0) + ( i1 + max(abs(mod(divInt(in0,res0),max(int(3.0), res0))), res0) ) ), abs(int(8.0))) * i0 ), int(4.0)),mod(int(0.0),abs(int(9.0))))) * ( in1 + divInt(int(4.0),( min(min(i1, divInt(min(mod(int(1.0),divInt(( abs(divInt(int(5.0),i1)) * abs(int(8.0)) ),abs(in1))), divInt(mod(int(3.0),int(5.0)),int(5.0))),max(i2, in0))), max(min(( min(divInt(i2,res0), i2) + int(0.0) ), ( in2 + res0 )), i0)) * max(int(0.0), ( res0 + ( max(min(i1, in0), int(1.0)) * int(6.0) ) )) )) ) )), ( min(max(i1, ( int(4.0) * ( int(9.0) + i0 ) )), in2) * in2 ))),in2)) )),in0) )))), i1) - int(5.0) ) * min(i0, mod(min(mod(min(( i0 * int(4.0) ), res0),int(5.0)), int(5.0)),int(6.0))) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 9, 7, 85, 85, 11, 5, 0, 17, 11, 6, 1, 5, 105, 3, 376, 95, 94, 53, 42]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 0, 0], [0], [2, 0, 0], [0], [], [1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( i0 - i0 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [2, 1, 0, 1, 0, 1], [1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 1, 6, 1, 7, 7, 8, 2], [1, 5, 0, 0], [2, 1, 1, 0, 2], [0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0], [0, 3, 1, 3, 1], [1, 0], [], [3, 1, 5, 1, 6, 4, 4, 2, 4, 6, 6, 1, 5], [0], [0, 2, 3, 0, 2, 1, 3, 1, 0, 1, 0, 0, 3, 2, 0, 1, 1, 1, 2, 0, 2, 0, 2, 2, 2, 1, 0, 1, 3, 2, 1, 3, 0, 3, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 2, 0, 0, 2, 0], [0, 1, 2, 2], [1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nb1 = ( in0 \\g mod(abs(i1),( int(9.0) + abs(int(8.0)) )) and in2 != int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i1 \\l res0\\nb0 = False\\nb2 = ( True or min(( in1 - int(6.0) ), int(1.0)) \\l int(7.0) )\\nin1 = ( i2 * mod(in1,divInt(( mod(int(7.0),res0) * int(8.0) ),min(divInt(int(2.0),abs(res0)), min(i1, in2)))) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 9, 9, 4, 5, 2, 9, 4, 5, 2, 0, 13, 1, 36, 9, 6, 4, 5]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 0, 1], [0, 0, 0], [1, 0], [1, 1, 1, 1, 1], [9, 2, 3, 6, 6], [4, 3, 2], [1, 2, 1], [1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0], [2, 3, 0, 0, 3, 1], [0], [0, 1, 0], [0, 3, 0, 3, 0, 4, 3], [0], [0, 1, 0, 2, 3, 1, 3, 0, 2, 1, 0, 0, 2, 1, 3, 0, 1], [0, 1, 1], [2, 1, 2], [1], [0, 1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i0 \\le int(9.0):{:\\nif not in0 \\ge ( abs(int(2.0)) - max(i0, divInt(int(3.0),in0)) ):{:\\nif ( b1 or b2 ):{:\\ni0 = in1\\n:}\\n:}else:{:\\nb1 = ( True or mod(int(6.0),abs(in0)) == int(6.0) )\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 5, 5, 3, 3, 2, 9, 3, 6, 1, 3, 7, 1, 17, 3, 3, 1, 2]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [0, 2, 2, 1, 1, 0], [1, 0], [1, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 1, 1, 1, 1, 5, 2, 4, 7, 2, 4, 1, 1, 0, 0, 0, 1, 4, 9, 9, 9, 5, 4, 6, 6, 0, 2, 1, 2, 6, 5, 4, 1, 6, 5, 3, 2, 7, 1, 2, 2, 2, 5, 3, 0, 6, 6, 6, 9, 3, 4, 9, 2, 3, 5, 5, 3, 8, 5, 0, 7, 9, 6], [3, 1, 1], [1], [], [1, 1, 1], [0, 0, 0], [], [], [1], [3, 4, 1, 1, 5, 6, 6, 3, 3, 6, 6, 4, 5, 2, 2, 4, 1, 5, 5, 1, 0, 3, 0, 4, 6, 2, 3, 2, 3, 6, 3, 0, 6, 3, 0, 3, 5, 0, 3, 4, 6, 1, 2, 4, 4, 1, 1, 0, 1, 2, 0, 6, 0, 6, 2, 6, 4, 0, 3, 4, 6, 0, 6], [0, 0, 0], [3, 0, 0, 3, 2, 1, 0, 1, 2, 2, 2, 0, 2, 3, 1, 0, 0, 3, 1, 1, 0, 1, 2, 2, 2, 1, 3, 0, 3, 0, 0, 3, 3, 1, 0, 0, 3, 2, 2, 2, 1, 2, 1, 3, 2, 3, 3, 3, 1, 3, 0, 2, 2, 2, 1, 3, 3, 0, 0, 1, 3, 1, 1, 2, 0, 2, 2, 2, 0, 3, 0, 1, 1, 1, 0, 2, 3, 3, 2, 2, 3, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 1, 1, 2, 1, 3, 1, 2, 0, 3, 2, 0, 1, 0, 2, 3, 2, 3, 1, 2, 3, 3, 1, 2, 1, 0, 0, 2, 3, 1, 3, 0, 3, 1, 2, 1, 2, 3, 1, 3, 3, 2, 2, 1, 3, 3, 3, 1, 0, 0, 0, 0, 3, 3, 2, 2, 1, 3, 2, 0, 1, 1, 2, 0, 2, 0, 3, 1, 2, 2, 3, 3, 0, 1, 3, 2, 1, 3, 0, 0, 1, 0, 0, 1, 3, 3, 0, 2, 0, 3, 2, 0, 1, 0, 0, 3, 2, 0, 2, 3, 3, 2, 3, 1, 2, 3, 3, 1, 3, 2, 1, 3, 1, 0, 1, 1, 1, 2, 0, 0, 2, 1, 1, 1, 0, 3, 0, 2, 3, 0, 3, 1, 3, 2, 2, 1, 1, 3, 3, 3, 2, 0, 1, 2, 2, 0, 2, 3, 0, 0, 2, 0, 1, 1, 2, 3, 0, 2, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 2, 2, 0, 2, 1, 1, 2, 0, 2, 1, 1, 1, 1, 1, 2, 0, 1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 0, 2, 1, 1, 2, 1, 2, 2], [0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 1, 2, 1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 0, 2, 0, 1, 1, 1, 0, 0, 2, 1, 1, 2, 0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = max(in1, i1)\\nloopBreak% = 0\\nwhile abs(mod(int(9.0),i1)) \\ge int(61.0):{:\\nif mod(divInt(( in2 + divInt(max(int(1.0), res0),res0) ),max(int(1.0), int(1.0))),in0) \\g int(5.0):{:\\nb1 = mod(( mod(int(2.0),max(in0, max(res0, res0))) * min(max(int(4.0), in1), in2) ),min(( mod(divInt(int(7.0),divInt(int(2.0),max(( max(max(abs(int(4.0)), abs(i2)), ( mod(( int(1.0) - min(abs(i2), in1) ),int(1.0)) * max(int(0.0), int(0.0)) )) * divInt(i1,mod(( divInt(in2,max(in2, int(0.0))) - int(1.0) ),int(4.0))) ), i1))),mod(abs(min(mod(( abs(int(9.0)) * max(divInt(max(( mod(i0,int(9.0)) * int(9.0) ), int(5.0)),int(4.0)), in0) ),int(6.0)), ( i0 * ( int(6.0) + int(0.0) ) ))),( int(2.0) - max(int(1.0), divInt(in1,max(( res0 * int(2.0) ), i2))) ))) - ( max(( abs(int(6.0)) * divInt(min(max(int(5.0), ( int(4.0) * in0 )), i2),mod(max(int(1.0), abs(in0)),min(int(6.0), ( int(5.0) + ( min(int(3.0), abs(max(divInt(( int(2.0) * min(abs(max(int(7.0), res0)), in0) ),i0), res0))) - min(min(( divInt(int(1.0),min(divInt(in0,int(2.0)), int(2.0))) + divInt(i0,( in0 * abs(int(2.0)) )) ), mod(( min(min(in2, int(5.0)), abs(( int(3.0) - max(i0, in0) ))) * int(0.0) ),in1)), res0) ) )))) ), int(6.0)) - min(min(i1, divInt(i2,max(( in1 + int(6.0) ), in1))), i1) ) ), max(( i1 * ( max(max(( max(int(6.0), ( abs(max(int(9.0), abs(divInt(int(3.0),max(int(4.0), i0))))) + int(9.0) )) - int(2.0) ), int(3.0)), ( i1 - i2 )) - ( int(5.0) + int(5.0) ) ) ), int(3.0)))) \\g i0\\n:}else:{:\\nres0 = abs(i0)\\n:}\\nres0 = ( min(i2, abs(int(8.0))) + max(divInt(( int(5.0) * int(0.0) ),max(abs(max(( res0 - int(7.0) ), mod(mod(in1,divInt(abs(i0),in0)),( in1 - int(9.0) )))), int(6.0))), ( abs(res0) * ( i0 + res0 ) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 64, 64, 3, 1, 0, 3, 3, 0, 0, 1, 63, 3, 256, 67, 66, 36, 31]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 1, 1, 2, 2, 1, 1], [0, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 4, 2, 2, 8, 5, 1, 9, 0, 9, 0, 3, 7, 1, 3, 8, 0, 8, 0, 9, 6], [3, 5, 3], [0, 0, 0, 0, 1], [], [1, 0, 0, 0, 0, 1, 1], [0, 0, 0], [0, 0, 1, 2], [1], [0, 0], [1, 1, 2, 0, 2, 1, 3, 2, 4, 6, 0, 1, 5, 2, 2, 4, 4, 6, 5, 1, 5, 5, 1, 0, 5, 4, 2, 3, 5, 5, 6, 4, 1], [1], [2, 2, 2, 2, 2, 3, 3, 2, 0, 0, 3, 3, 3, 2, 2, 3, 3, 1, 3, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 2, 3, 1, 0, 3, 0, 0, 2, 3, 0, 1, 3, 0, 1, 1, 0, 3, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 2, 0, 1, 2, 3, 1, 3, 3, 2, 3, 1, 1, 0, 3, 2, 0, 3, 2, 2, 0, 2, 2, 0, 0, 0, 1, 3, 3, 0, 3, 0, 0, 3, 0, 3, 3, 2, 1, 2, 1, 1, 0, 3, 0, 1, 0, 1, 0, 1, 3, 2, 0, 2, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 2, 2, 0, 0, 2, 1, 2, 1, 0, 2, 2, 2, 1, 0, 0, 0, 2, 0, 1, 2, 1, 1, 1, 2, 1, 1, 0, 0, 0, 2], [1, 0, 2, 0, 1, 2, 2, 2, 1, 2, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(( mod(divInt(( max(abs(( i1 - i1 )), abs(min(min(( divInt(abs(max(int(5.0), abs(max(i2, i0)))),mod(int(2.0),i2)) + i1 ), ( in0 * min(( abs(int(4.0)) + i2 ), abs(in1)) )), res0))) - divInt(abs(i0),int(2.0)) ),max(i1, int(2.0))),int(8.0)) * in2 ),min(min(i2, int(5.0)), divInt(divInt(i2,int(1.0)),( int(9.0) * min(divInt(in1,int(0.0)), ( abs(int(9.0)) * min(max(divInt(abs(int(0.0)),int(3.0)), in1), max(( res0 - max(mod(( in2 * mod(( i1 + in2 ),in2) ),int(7.0)), max(abs(i1), max(i0, in2))) ), max(in1, min(min(divInt(int(1.0),( int(3.0) + int(8.0) )), i2), min(in0, int(0.0)))))) )) )))) \\ge in2:{:\\nb0 = b0\\nin2 += int(8.0)\\nif b0:{:\\nloopBreak% = 0\\nwhile False:{:\\nb0 = not res0 != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = abs(( in1 - ( int(9.0) - int(6.0) ) )) \\ge i1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 22, 22, 3, 5, 0, 7, 3, 4, 1, 2, 33, 1, 112, 27, 31, 15, 13]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [8, 8, 1], [], [], [], [], [], [], [], [], [5, 6], [0], [2, 1, 2, 2, 3, 1, 0, 1], [0, 0, 1], [2], [2, 0], [1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( int(8.0) * ( mod(abs(int(8.0)),res0) + int(1.0) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 8, 3, 1, 2, 1]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [6, 2, 9], [], [], [], [], [], [], [], [], [0], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += int(629.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 4, 3, 9, 4, 4, 3, 1, 8, 8], [2], [2], [], [1], [0], [], [], [], [1, 6, 4, 2, 3, 6, 6, 1, 2], [], [2, 3, 2, 3, 0, 3, 1, 0, 3, 0, 1, 3, 3, 2, 1, 0, 2, 3, 3, 1, 2, 1, 2, 1, 0, 1, 2, 0, 2, 3, 1, 1, 3, 3, 0, 0, 0, 3, 2, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1], [0, 2, 0, 1, 2, 0, 0, 0, 1, 0, 0, 2], [1, 2, 2, 0, 1], [0, 0, 1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = divInt(min(( abs(i1) - min(int(4.0), res0) ), max(in1, int(6.0))),abs(min(divInt(int(4.0),i2), ( min(min(int(3.0), ( int(9.0) * mod(int(4.0),in0) )), int(4.0)) * ( res0 + ( max(int(3.0), int(1.0)) - min(min(res0, i1), i2) ) ) )))) == abs(mod(int(8.0),int(8.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 11, 11, 1, 1, 0, 1, 1, 0, 0, 0, 9, 0, 41, 9, 12, 5, 4]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 2, 2, 1, 0, 2, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 8, 2, 1, 7, 1, 3, 0, 6, 5, 7, 1, 2], [5, 4, 2], [1, 0, 0, 1, 1], [0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0], [0, 1, 0, 2, 3, 1, 1], [0, 0, 0], [0], [2, 1, 0, 2, 5, 0, 1, 4, 6, 2, 3, 0, 1], [0], [1, 0, 3, 1, 3, 0, 3, 0, 1, 2, 2, 3, 0, 3, 1, 1, 1, 3, 1, 3, 3, 3, 3, 0, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 0, 2, 0, 2, 0, 2, 0, 3, 2, 1, 3, 3, 1, 1, 2, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 1, 2, 2, 0, 0, 2, 1, 2, 2, 0, 1, 1, 2, 0], [2, 0, 1, 0, 0], [0, 1, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = int(0.0) != i2\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile b0:{:\\nb1 = max(int(2.0), max(i1, min(i0, int(8.0)))) \\le ( ( max(i2, abs(int(2.0))) * int(1.0) ) + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = abs(int(1.0)) == min(min(abs(max(in2, abs(int(3.0)))), i0), abs(min(int(0.0), max(int(6.0), int(5.0)))))\\nif not ( True and True ):{:\\ni1 = divInt(in1,mod(res0,( i2 - ( in0 + max(mod(int(7.0),abs(min(int(1.0), int(2.0)))), ( i0 + i1 )) ) )))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 14, 14, 3, 5, 1, 10, 3, 7, 3, 1, 13, 1, 51, 8, 17, 5, 3]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 2, 2, 0, 0, 1], [0, 0, 0], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 6, 9, 5, 4, 3, 8, 3, 7, 0], [0, 5, 2, 3, 5], [1, 2, 2, 0], [0, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0], [3, 1, 3, 1, 0], [1, 0], [0, 1, 0], [5, 1, 5, 2, 0, 0, 4, 0, 4, 5, 1, 5, 1, 5, 2], [], [2, 2, 1, 1, 2, 2, 3, 3, 3, 0, 2, 1, 2, 0, 0, 2, 1, 2, 0, 3, 0, 3, 0, 1, 0, 3, 0, 0, 0, 0, 2, 1, 0, 2, 3, 0, 2, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 2, 2], [1, 0, 1, 2], [0, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(( int(8.0) - int(5.0) ),divInt(( min(max(min(in2, mod(int(6.0),mod(i1,in2))), ( int(9.0) + mod(i2,max(i0, max(i0, int(5.0)))) )), in1) - abs(i0) ),in1)) \\l in2:{:\\nif i1 != ( int(4.0) * in2 ):{:\\nif ( False and divInt(abs(i1),divInt(in2,int(3.0))) == int(8.0) ):{:\\nb1 = ( int(3.0) \\ge i2 or int(7.0) != int(0.0) )\\n:}\\n:}else:{:\\nb2 = True\\n:}\\nb2 = b0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 11, 11, 5, 4, 2, 10, 5, 5, 2, 3, 15, 0, 44, 11, 7, 4, 7]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 0, 2, 1, 2, 2, 2, 2, 1, 1], [0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 1, 6, 0, 9, 4, 3, 9, 4, 0, 3, 9, 7, 6, 4, 5, 9, 8, 8, 6, 9, 6, 4, 1, 0, 3, 1, 9, 0, 5, 8, 8, 5, 3, 3, 4, 4, 8, 3, 7, 6, 4, 9, 6, 4, 6, 7, 0, 2, 0, 0, 4, 7], [5, 2, 3, 0], [1, 1, 1, 0, 1], [], [0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0], [0, 2, 0, 0, 1], [1], [1, 1], [3, 2, 4, 3, 1, 2, 0, 3, 3, 4, 2, 3, 1, 0, 6, 6, 1, 1, 4, 3, 4, 0, 5, 0, 2, 5, 4, 5, 4, 4, 0, 3, 2, 2, 5, 3, 1, 4, 0, 0, 3, 0, 5, 4, 5, 0, 0, 1, 2, 2, 3, 2, 4, 1, 4, 4, 2, 3, 6, 0, 2, 3, 1], [0, 1, 0], [0, 1, 2, 0, 2, 2, 1, 2, 2, 2, 3, 3, 0, 1, 3, 0, 2, 2, 1, 3, 1, 3, 3, 1, 3, 1, 3, 1, 3, 0, 3, 2, 2, 1, 0, 3, 3, 0, 3, 2, 0, 2, 2, 1, 3, 1, 3, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 3, 1, 3, 3, 3, 2, 1, 2, 3, 0, 2, 3, 2, 0, 3, 0, 2, 1, 1, 0, 0, 3, 2, 0, 0, 1, 1, 2, 1, 0, 2, 1, 0, 1, 2, 2, 2, 3, 3, 0, 2, 1, 1, 3, 3, 2, 2, 2, 0, 3, 1, 1, 3, 3, 2, 0, 1, 0, 2, 3, 2, 1, 1, 0, 3, 3, 1, 3, 0, 0, 2, 2, 3, 3, 0, 2, 1, 3, 3, 2, 3, 3, 1, 2, 1, 1, 0, 3, 0, 0, 2, 2, 2, 2, 0, 1, 3, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 2, 0, 2, 2, 0, 1, 2, 3, 1, 0, 3, 0, 0, 3, 0, 3, 1, 1, 0, 2, 1, 1, 1, 2, 1, 3, 0, 3, 0, 3, 2, 2, 2, 1, 2, 2, 2, 2, 0, 1, 2, 0, 0, 2, 2, 0, 1, 3, 3, 3, 0, 2, 0, 0, 3, 1, 2, 2, 2, 0, 0, 3, 3, 0, 0, 3, 0, 0, 3, 1, 3, 0, 1, 3, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [2, 0, 2, 1, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 1, 2, 0, 2, 1, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 0, 2, 0, 2, 2, 2, 1, 2, 0, 0, 1, 2], [2, 1, 2, 1, 2, 1, 1, 2, 2, 0, 0, 1, 1, 2, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 1, 0, 1, 1, 1, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nb1 = in0 != int(7.0)\\n:}else:{:\\nb1 = ( i2 * ( mod(int(5.0),( ( mod(abs(min(in1, int(1.0))),abs(in0)) - ( ( int(6.0) * max(int(0.0), min(min(int(9.0), min(int(4.0), max(int(3.0), min(i1, min(mod(mod(int(9.0),i2),abs(max(i0, min(mod(in0,( ( int(4.0) - min(int(0.0), abs(in0)) ) * int(3.0) )), int(9.0))))), int(7.0)))))), mod(int(6.0),in1))) ) - int(4.0) ) ) - i2 )) * ( max(int(5.0), abs(abs(abs(( int(9.0) * ( max(in0, mod(max(( i1 + max(i0, ( int(8.0) + int(8.0) )) ), res0),res0)) - max(mod(i1,i1), int(6.0)) ) ))))) - int(9.0) ) ) ) == divInt(int(6.0),in1)\\n:}\\nloopBreak% = 0\\nwhile not b0:{:\\nin0 = ( int(4.0) * in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(1.0) \\ge ( ( ( abs(abs(i0)) + ( int(0.0) * int(3.0) ) ) * min(min(divInt(divInt(mod(in2,max(int(1.0), int(9.0))),abs(abs(mod(i0,int(0.0))))),i2), divInt(abs(divInt(int(5.0),int(8.0))),in2)), max(max(int(8.0), abs(in1)), in2)) ) * mod(( min(abs(in1), ( int(5.0) * max(min(mod(min(max(int(3.0), divInt(int(3.0),int(4.0))), in1),min(i0, in0)), divInt(mod(( divInt(i2,int(4.0)) - min(i2, in2) ),mod(in0,i1)),in1)), ( int(8.0) + abs(( mod(i0,( divInt(i0,int(3.0)) + ( max(int(7.0), in0) + max(i0, in2) ) )) + abs(in1) )) )) )) * max(int(6.0), int(4.0)) ),in2) ):{:\\nloopBreak% = 0\\nwhile b1:{:\\nif ( int(9.0) - int(6.0) ) \\l int(4.0):{:\\nloopBreak% = 0\\nwhile False:{:\\ni0 *= ( int(6.0) + max(i0, min(i1, abs(( mod(( int(7.0) + ( divInt(( ( i2 + int(0.0) ) - ( i2 + in0 ) ),( divInt(i2,int(2.0)) - min(abs(abs(in1)), ( i1 - in1 )) )) - abs(int(0.0)) ) ),mod(( mod(in1,i2) * max(abs(in0), res0) ),min(i0, i2))) + min(int(0.0), max(in0, int(4.0))) )))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 = abs(int(7.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 6, 5, 54, 54, 4, 5, 0, 9, 4, 5, 1, 2, 63, 3, 239, 65, 60, 37, 29]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 0, 0, 2, 1, 0, 1], [1, 0, 1], [0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 2, 1, 6, 7, 4, 0], [3, 2, 5, 5, 3], [2, 0, 1, 1, 1, 0], [0], [0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 1, 3], [0], [1], [0, 6, 5, 5, 0, 6, 5, 3, 0, 2, 5, 1, 4, 0, 0], [0, 0], [2, 0, 0, 0, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 0, 2, 3, 3, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1], [1, 0, 2, 1], [2], [0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = divInt(i0,res0) \\ge in2\\nif b1:{:\\nb1 = max(int(3.0), divInt(min(in2, i0),int(1.0))) == int(2.0)\\n:}else:{:\\nb1 = res0 != in2\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nin0 = divInt(( int(1.0) * int(6.0) ),int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( mod(i2,in2) != i1 and mod(abs(max(in1, int(0.0))),i0) \\ge i0 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 8, 8, 5, 6, 1, 9, 5, 4, 1, 1, 15, 2, 31, 6, 4, 1, 5]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 6, 6, 5, 6, 9, 4, 4, 6], [1, 5], [1], [], [1, 1], [0, 0], [], [], [], [6, 6], [], [1, 3, 2, 2, 2, 1, 0, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1], [0, 0], [2, 1], [1, 0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(77.0) \\g min(mod(divInt(( int(6.0) * res0 ),( min(mod(int(6.0),int(5.0)), int(6.0)) - int(9.0) )),int(4.0)), int(4.0)):{:\\nb1 = int(6.0) != res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 10, 10, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 18, 5, 2, 2, 3]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [0, 1, 1], [1], [1], [], [2], [], [0], [], [1], [0], [], [2, 3, 3], [1, 1], [3, 1, 0], [], [2], [0, 0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\ni2 += abs(int(1.0))\\nin0 += in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 3, 2, 3, 0, 1, 2, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 0, 0, 1, 2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 1, 0], [0, 0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 4, 9, 8, 8, 6, 3, 8, 1, 7, 7, 6, 7, 2, 8, 4, 7, 1, 0, 0, 3, 0, 6, 0, 8, 4, 2, 3, 0, 9, 5, 9, 5, 8, 2, 9, 2, 0, 8, 2, 6, 0, 8, 8, 1, 4, 3, 8, 7, 6, 5, 1, 2, 0, 6, 7, 0, 9, 3, 9, 6, 3, 7, 5], [4, 2, 2, 1, 5, 0, 3, 2, 3, 1, 0, 3, 3, 0], [1, 0, 2, 2, 1], [1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 1, 1, 3], [1, 0], [1, 1, 1, 0], [4, 0, 0, 5, 1, 1, 3, 2, 5, 1, 5, 1, 4, 0, 3, 3, 0, 6, 1, 6, 3, 1, 2, 2, 6, 5, 4, 6, 6, 3, 0, 5, 2, 1, 5, 0, 0, 3, 1, 1, 1, 6, 5, 5, 1, 2, 0, 5], [1, 0, 1, 1], [2, 2, 0, 2, 1, 0, 1, 1, 0, 3, 3, 1, 2, 1, 2, 0, 3, 2, 1, 0, 3, 3, 1, 1, 2, 1, 2, 1, 3, 0, 1, 1, 3, 0, 0, 3, 2, 2, 1, 1, 1, 0, 2, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 0, 2, 1, 3, 2, 1, 3, 2, 3, 0, 0, 0, 3, 1, 3, 3, 1, 1, 3, 2, 1, 0, 1, 3, 2, 1, 1, 2, 2, 3, 2, 0, 0, 2, 2, 3, 1, 3, 1, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 2, 1, 2, 3, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 1, 0, 1, 0, 1, 1, 1, 0, 0, 2, 0, 0, 3, 3, 1, 0, 0, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 2, 3, 1, 2, 2, 3, 1, 0, 1, 0, 0, 1, 0, 2, 2, 2, 2, 0, 1, 2, 0, 1, 1, 2, 2, 2, 0, 3, 3, 3, 3, 2, 3, 1, 1, 3, 0, 2, 1, 1, 1, 1, 3, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 1, 2, 0, 2, 1, 0, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 2, 2, 1, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 2, 2], [0, 1, 0, 2, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2, 1, 1, 2, 2, 1, 0, 1, 1, 1, 1, 2], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( divInt(in1,( int(2.0) + i0 )) - int(6.0) ) \\le int(4.0):{:\\ni0 += in2\\nb1 = max(min(int(9.0), divInt(int(8.0),mod(i1,max(mod(int(8.0),i1), min(max(int(6.0), int(3.0)), mod(int(8.0),mod(int(1.0),max(in0, int(7.0))))))))), int(7.0)) == abs(i2)\\nin2 = i1\\n:}else:{:\\nif ( min(mod(mod(int(6.0),int(7.0)),int(2.0)), in2) == ( i1 * int(8.0) ) or ( ( False or divInt(( int(4.0) + in1 ),int(7.0)) \\g abs(divInt(i0,in0)) ) or True ) ):{:\\nb0 = ( int(1.0) + max(( int(0.0) - min(( min(in0, i0) * res0 ), max(int(0.0), abs(max(int(3.0), int(0.0))))) ), max(( int(6.0) * i1 ), int(0.0))) ) != max(( int(8.0) * int(4.0) ), mod(divInt(min(( res0 - in0 ), mod(mod(max(int(2.0), abs(int(3.0))),mod(int(0.0),( ( int(9.0) * i1 ) - int(5.0) ))),( divInt(int(9.0),int(5.0)) + ( int(8.0) * divInt(max(i2, mod(( i2 - res0 ),mod(abs(mod(in2,divInt(abs(int(2.0)),in1))),int(9.0)))),res0) ) ))),int(2.0)),int(0.0)))\\n:}else:{:\\nres0 -= int(8.0)\\n:}\\n:}\\nif in0 \\l i0:{:\\nb2 = divInt(in2,i2) \\ge max(max(int(2.0), i1), in2)\\n:}else:{:\\nb2 = ( i0 == int(6.0) and i0 \\ge min(max(( int(0.0) * int(8.0) ), int(8.0)), int(1.0)) )\\nloopBreak% = 0\\nwhile int(4.0) \\g int(3.0):{:\\nloopBreak% = 0\\nwhile in0 \\l int(8.0):{:\\nloopBreak% = 0\\nwhile int(7.0) \\ge ( int(6.0) * int(5.0) ):{:\\nif mod(min(int(1.0), ( divInt(abs(int(2.0)),i1) - int(0.0) )),i1) \\ge i1:{:\\nb1 = int(6.0) \\l res0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += ( mod(mod(mod(in2,int(7.0)),( i1 - int(0.0) )),int(9.0)) - ( ( ( i2 - abs(abs(max(max(divInt(min(int(3.0), int(9.0)),abs(i0)), mod(int(6.0),int(3.0))), int(7.0)))) ) - int(5.0) ) * abs(in2) ) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 7, 9, 65, 65, 14, 5, 4, 20, 14, 6, 2, 4, 48, 4, 197, 52, 36, 26, 29]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1], [3, 1, 5], [3], [0], [], [1], [0], [], [], [], [3, 1], [1], [1, 1, 3, 1, 0], [], [0], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(3.0) \\ge int(1.0)\\nin0 -= min(int(5.0), i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 5, 0, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 4], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 2, 0, 1, 1, 0], [1], [1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 4, 9, 8, 2, 2, 9, 9, 5, 2, 6, 9, 7, 7, 2, 6, 2, 5, 4, 1, 5, 2, 9, 1, 0, 6, 9, 0, 5, 9, 9, 5, 5, 2, 6, 5, 9, 4, 1, 8, 7, 8, 6, 4, 4, 7, 4, 7, 5, 9, 6], [4, 3, 4, 5], [0, 0, 2, 1], [], [0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [2, 2, 1, 2], [0], [], [4, 4, 2, 2, 2, 3, 2, 3, 4, 2, 4, 4, 5, 0, 1, 2, 0, 3, 0, 6, 4, 0, 2, 1, 1, 6, 0, 1, 6, 0, 2, 6, 5, 1, 3, 3, 3, 0, 2, 0, 6, 3, 6, 0, 6, 3, 4, 5, 3, 2, 4, 4, 1, 5, 0, 1, 3, 1, 0, 6, 6, 4, 4, 1, 4, 4, 6], [1, 0, 1], [1, 2, 2, 1, 2, 3, 1, 0, 1, 2, 1, 0, 2, 3, 1, 0, 0, 1, 2, 2, 3, 3, 0, 3, 0, 1, 3, 2, 0, 2, 2, 3, 3, 1, 1, 2, 2, 1, 3, 1, 2, 2, 2, 3, 2, 2, 3, 3, 1, 3, 3, 0, 3, 1, 2, 2, 3, 0, 2, 0, 2, 0, 2, 0, 1, 2, 0, 1, 2, 1, 1, 1, 3, 0, 2, 0, 0, 0, 2, 3, 3, 0, 0, 3, 1, 1, 3, 0, 2, 3, 3, 1, 2, 2, 3, 2, 2, 2, 0, 1, 3, 3, 2, 3, 2, 0, 2, 0, 0, 3, 0, 0, 0, 3, 0, 1, 3, 0, 0, 0, 0, 1, 3, 3, 2, 0, 2, 0, 2, 0, 2, 3, 0, 2, 3, 2, 1, 1, 2, 2, 3, 1, 0, 3, 0, 1, 2, 0, 2, 2, 0, 2, 2, 1, 0, 0, 1, 2, 0, 3, 3, 0, 0, 1, 2, 2, 3, 3, 0, 0, 2, 3, 2, 3, 2, 0, 0, 3, 3, 0, 0, 3, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 3, 2, 1, 0, 2, 0, 2, 1, 2, 3, 0, 3, 0, 3, 2, 0, 1, 0, 1, 2, 3, 2, 1, 0, 3, 1, 3, 3, 2, 1, 0, 1, 1, 2, 3, 1, 0, 1, 3, 0, 0, 3, 1, 3, 1, 1, 1, 2, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [2, 2, 2, 0, 2, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1, 2, 1, 0, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 2, 1, 2, 1, 0, 2, 2, 2, 0, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 2, 2, 0, 1, 0, 1, 2, 0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= int(1.0)\\nb0 = not mod(( int(3.0) - ( abs(int(4.0)) - in1 ) ),int(9.0)) \\le divInt(int(8.0),i2)\\nb0 = divInt(abs(int(2.0)),i2) \\ge i2\\nloopBreak% = 0\\nwhile not int(2.0) \\le ( ( abs(min(in0, abs(i2))) + int(9.0) ) * max(mod(in0,mod(( abs(abs(int(9.0))) * int(5.0) ),divInt(divInt(int(2.0),min(int(6.0), divInt(mod(( max(( ( max(min(int(9.0), abs(min(in1, abs(int(7.0))))), mod(( max(i2, mod(in1,mod(in1,( in2 * int(7.0) )))) * divInt(i0,int(2.0)) ),divInt(int(6.0),int(2.0)))) * int(5.0) ) - abs(i1) ), ( i2 + i0 )) * in0 ),divInt(max(min(i0, res0), max(int(4.0), int(1.0))),max(in1, ( max(max(int(5.0), ( mod(min(divInt(mod(divInt(i0,int(2.0)),abs(max(( max(( i2 + ( i1 + i1 ) ), max(res0, i0)) * i1 ), abs(res0)))),int(9.0)), abs(i0)),i2) * res0 )), in2) * int(1.0) )))),min(max(mod(i1,( in0 + mod(in0,divInt(abs(in0),divInt(min(( int(0.0) - int(6.0) ), divInt(( abs(int(9.0)) + i0 ),max(i2, int(0.0)))),( i0 + ( ( res0 + divInt(mod(int(5.0),in0),res0) ) - int(9.0) ) )))) )), divInt(i0,abs(abs(res0)))), in0)))),int(9.0)))), mod(( min(abs(in1), in2) + ( max(( abs(divInt(in0,i2)) + max(min(in1, in1), abs(int(5.0))) ), i1) - mod(( int(5.0) + abs(( abs(( int(2.0) * min(( int(6.0) + in2 ), mod(i0,( int(5.0) * ( abs(i1) * max(in0, min(( i1 + int(9.0) ), i0)) ) ))) )) - int(4.0) )) ),mod(max(( int(1.0) + res0 ), min(int(8.0), min(min(mod(int(7.0),res0), int(8.0)), int(6.0)))),( max(int(4.0), in1) - int(4.0) ))) ) ),max(in1, i1))) ):{:\\nb2 = True\\nb1 = not max(int(7.0), max(int(4.0), int(7.0))) != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = ( int(9.0) * int(6.0) )\\nin1 += res0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 1, 7, 52, 52, 4, 4, 0, 8, 4, 4, 1, 0, 67, 3, 243, 68, 59, 37, 33]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 0, 0, 1, 0, 2, 2, 2, 1, 0], [1, 1, 1, 1], [1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 9, 1, 2, 8, 7, 5, 6, 8, 9, 9, 2, 4, 7, 4, 6, 2, 8, 0, 8], [0, 5, 0], [2, 1], [], [0, 0, 1, 0, 1, 0, 1], [0, 0, 0], [1, 2, 2, 0], [1], [], [1, 0, 6, 4, 2, 2, 6, 2, 0, 3, 1, 0, 5, 6, 2, 1, 3, 0, 3, 0, 6, 3, 0, 0, 0, 6, 0, 4, 3], [1, 0, 1, 1, 1], [3, 2, 2, 0, 2, 3, 3, 3, 3, 0, 2, 3, 0, 2, 1, 0, 2, 2, 3, 1, 2, 2, 0, 2, 3, 0, 3, 1, 1, 3, 3, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 1, 0, 3, 0, 1, 0, 3, 1, 2, 0, 0, 1, 1, 3, 3, 0, 1, 2, 0, 2, 1, 1, 0, 1, 2, 3, 1, 3, 1, 1, 0, 0, 1, 2, 2, 1, 3, 0, 3, 0, 3, 0, 0, 0, 0, 3, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [2, 2, 1, 2, 2, 1, 0, 1, 2, 1, 1, 0, 1, 0, 2, 0, 0, 0, 2, 1, 2, 2], [2, 0, 2, 2, 1, 1, 2, 2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 2], [0, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\ni1 *= abs(( ( i0 + ( abs(max(abs(abs(res0)), ( max(in1, ( int(6.0) * i2 )) * ( ( min(int(1.0), ( ( i2 - divInt(max(res0, abs(int(9.0))),int(1.0)) ) - max(max(min(( ( mod(mod(divInt(int(2.0),i2),i0),int(8.0)) * int(7.0) ) * in0 ), max(i1, int(5.0))), i0), min(int(6.0), ( in2 * res0 ))) )) - int(8.0) ) + int(9.0) ) ))) - abs(min(i2, int(9.0))) ) ) + ( i1 - divInt(int(2.0),int(4.0)) ) ))\\nin0 = i0\\nb2 = not int(7.0) \\l mod(min(int(4.0), min(int(6.0), int(2.0))),in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += res0\\nloopBreak% = 0\\nwhile not int(8.0) != mod(( int(0.0) - abs(in0) ),max(i0, abs(i0))):{:\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile i0 \\l res0:{:\\ni0 += in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 *= abs(int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 21, 21, 3, 2, 0, 7, 3, 4, 1, 0, 29, 5, 88, 21, 22, 18, 7]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 2, 1, 2, 0, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 5, 6, 7, 8, 7, 9, 3, 0, 0, 6, 5, 1, 1, 3, 5, 5, 4, 1, 3, 7, 3, 5, 6, 7], [5, 4, 3, 4, 0, 5], [2, 2, 2], [], [1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0], [], [1, 0, 0], [5, 6, 5, 4, 3, 0, 0, 1, 2, 5, 4, 5, 2, 4, 2, 3, 2, 2, 0, 6, 1, 6], [0, 0, 0, 1, 1], [1, 1, 2, 3, 0, 1, 3, 0, 3, 2, 1, 1, 2, 3, 3, 0, 2, 3, 1, 0, 1, 3, 0, 2, 0, 1, 0, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 2, 0, 0, 3, 0, 3, 3, 3, 0, 0, 0, 2, 1, 2, 1, 2, 3, 1, 1, 2, 1, 2, 1, 3, 1, 0, 1, 1, 3, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1], [1, 2, 0, 0, 0, 0, 1, 1, 2, 0, 1, 2, 1, 2, 1, 0, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0], [1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(05.0)\\nif int(5.0) != mod(max(res0, int(6.0)),abs(in2)):{:\\nloopBreak% = 0\\nwhile min(( int(7.0) * int(8.0) ), divInt(min(min(in1, divInt(min(int(7.0), in0),int(9.0))), max(i0, ( i0 + int(3.0) ))),i1)) \\le int(0.0):{:\\nb2 = max(abs(int(0.0)), int(6.0)) \\ge int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b2:{:\\nb2 = int(1.0) \\le min(max(int(1.0), ( i2 + in2 )), abs(in1))\\n:}\\n:}else:{:\\nin2 = max(abs(max(i2, in1)), i2)\\nin0 = ( int(3.0) + divInt(int(5.0),( min(int(5.0), int(4.0)) + ( int(1.0) + divInt(int(3.0),min(int(7.0), i2)) ) )) )\\ni2 *= int(3.0)\\nif int(5.0) \\l min(i0, res0):{:\\nloopBreak% = 0\\nwhile int(6.0) != i1:{:\\nres0 += int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 26, 26, 6, 3, 0, 7, 6, 1, 0, 3, 22, 5, 71, 11, 18, 8, 5]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [1, 6, 2], [], [], [], [], [], [], [], [], [5, 3], [0], [2, 1, 3, 2, 0, 3, 2, 1, 1], [0, 0, 1], [2, 2], [2, 0], [0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( int(1.0) * abs(( in0 + abs(divInt(int(6.0),int(2.0))) )) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 9, 3, 2, 2, 1]}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 7, 2, 3, 3, 2, 2, 3, 3, 9, 6], [1], [0, 0], [], [1, 0], [0], [1], [0], [], [6, 5, 1, 6, 2, 5, 1, 3, 0], [0], [3, 1, 2, 0, 0, 2, 2, 2, 1, 2, 0, 1, 3, 3, 3, 0, 3, 0, 2, 2, 3, 3, 1, 1, 1, 0, 3, 1, 0, 2, 3, 1, 2, 0, 3, 1, 1, 3, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 2], [1], [1, 0, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(int(3.0), mod(res0,in2)) \\g divInt(mod(divInt(int(5.0),mod(i1,int(7.0))),min(max(max(res0, max(i2, divInt(divInt(min(max(int(2.0), int(3.0)), int(3.0)),in2),max(int(2.0), i1)))), divInt(abs(int(2.0)),( in0 - abs(int(3.0)) ))), int(3.0))),abs(int(9.0)))\\nb0 = True\\ni0 = int(6.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 12, 12, 1, 2, 0, 2, 1, 1, 1, 0, 9, 1, 40, 9, 11, 1, 8]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 2, 2, 0, 1, 1], [1, 0], [0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 1, 1, 9, 7, 1, 3, 6, 5, 1, 7, 0, 6, 5, 2, 5, 7, 0, 3, 6, 5, 4, 9, 9, 5, 2, 6, 7, 7, 9, 4, 8, 3, 5, 8, 8, 5, 9, 7, 4, 9, 8, 3, 6, 4, 7, 5, 9, 6, 0, 5, 6, 7, 4, 4, 2, 9, 0, 5, 1, 5, 6, 9, 6], [0, 2, 1, 4, 1, 5, 2, 5], [2, 0, 0, 2, 2], [0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 3, 1], [1, 0], [0], [5, 3, 3, 1, 2, 3, 2, 2, 4, 1, 4, 4, 6, 4, 6, 3, 5, 3, 0, 3, 1, 1, 3, 1, 0, 1, 6, 0, 5, 4, 3, 0, 2, 0, 5, 6, 5, 3, 3, 3, 6, 0, 5, 5, 5, 3, 3, 3, 1, 5, 0, 3, 5, 0, 3], [0, 1], [3, 2, 1, 1, 3, 1, 2, 2, 0, 0, 2, 1, 1, 1, 1, 0, 0, 3, 1, 3, 1, 1, 3, 1, 2, 1, 1, 2, 3, 3, 1, 2, 0, 3, 2, 2, 2, 0, 0, 1, 2, 3, 3, 2, 2, 0, 3, 1, 1, 0, 0, 0, 3, 1, 3, 1, 3, 2, 1, 0, 3, 1, 2, 1, 3, 2, 1, 0, 3, 0, 2, 0, 2, 3, 2, 1, 3, 0, 2, 1, 0, 0, 3, 3, 0, 2, 2, 0, 2, 2, 3, 3, 1, 3, 3, 2, 0, 2, 2, 2, 3, 1, 0, 1, 2, 2, 3, 0, 1, 3, 1, 0, 2, 3, 2, 3, 0, 3, 3, 1, 1, 0, 2, 2, 3, 3, 2, 1, 2, 1, 1, 3, 2, 0, 1, 3, 1, 0, 2, 1, 3, 1, 3, 2, 1, 3, 2, 1, 1, 2, 2, 0, 0, 3, 0, 0, 2, 2, 0, 2, 2, 2, 0, 1, 0, 0, 2, 2, 0, 3, 0, 1, 0, 0, 0, 3, 1, 2, 2, 1, 1, 0, 2, 3, 3, 3, 2, 0, 2, 2, 2, 1, 3, 0, 1, 0, 0, 1, 0, 2, 3, 3, 2, 2, 2, 1, 3, 1, 1, 1, 1, 3, 1, 3, 1, 1, 0, 1, 3, 0, 2, 3, 1, 1, 2, 2, 0, 1, 1, 0, 0, 3, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 1, 2, 0, 2, 1, 1, 0, 0, 0, 1, 1, 2, 0, 0, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 2, 1, 2, 1, 1, 0, 2], [1, 1, 2, 1, 1, 0, 0, 1, 2, 0, 1, 2, 2, 1, 1, 0, 2, 1, 1, 1, 1, 2, 0, 1, 1, 1, 0, 0, 2, 0, 1, 1, 2, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(divInt(int(1.0),int(9.0)), max(int(1.0), divInt(( in2 - in0 ),divInt(int(1.0),int(9.0))))) \\l int(7.0)\\nb0 = int(1.0) == in0\\ni1 = i2\\nb0 = False\\nloopBreak% = 0\\nwhile ( max(int(3.0), abs(int(6.0))) \\g int(5.0) and max(int(1.0), mod(int(7.0),int(0.0))) \\le ( min(min(int(6.0), ( in0 - min(mod(( ( i2 * i2 ) - int(5.0) ),( min(max(( mod(in1,min(int(2.0), int(5.0))) - i1 ), in1), in1) + min(int(7.0), min(int(0.0), min(( int(3.0) + res0 ), min(int(6.0), ( int(5.0) - max(( int(4.0) * in1 ), min(res0, divInt(in0,( max(divInt(int(9.0),abs(in2)), ( int(9.0) + in0 )) - i0 )))) ))))) )), max(abs(in0), mod(divInt(i1,divInt(( min(abs(int(5.0)), max(max(( i1 * divInt(( divInt(min(int(2.0), in0),int(6.0)) * ( ( min(i1, int(7.0)) - min(int(7.0), i0) ) - divInt(max(( max(i1, abs(min(int(9.0), int(4.0)))) + res0 ), ( ( min(abs(mod(int(8.0),( int(3.0) * int(5.0) ))), max(divInt(i0,int(8.0)), abs(int(8.0)))) - in2 ) - ( int(5.0) - max(int(9.0), max(( int(7.0) - abs(divInt(int(4.0),int(9.0))) ), divInt(divInt(in1,in0),abs(i0)))) ) )),i2) ) ),divInt(( i0 * ( ( ( in2 + int(8.0) ) - res0 ) - in2 ) ),( ( in0 - abs(in0) ) + int(3.0) ))) ), in0), res0)) + i0 ),abs(int(6.0)))),( mod(int(4.0),int(7.0)) * in2 )))) )), mod(abs(min(abs(( in2 + mod(( ( int(5.0) - max(in2, int(9.0)) ) - in0 ),in0) )), int(6.0))),in0)) * mod(abs(abs(( divInt(( int(0.0) + max(int(5.0), int(6.0)) ),int(7.0)) + int(4.0) ))),abs(int(4.0))) ) ):{:\\nif max(int(2.0), int(9.0)) \\g i1:{:\\nin2 += int(0.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = max(i0, divInt(min(int(5.0), int(1.0)),mod(divInt(in0,int(5.0)),int(6.0)))) != in2\\nb2 = ( i0 == abs(int(9.0)) or ( int(6.0) != in0 or True ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 2, 7, 65, 65, 8, 5, 3, 13, 8, 5, 2, 1, 55, 2, 235, 63, 54, 36, 28]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [1, 1], [0, 1], [1, 1, 1, 1, 1, 1], [7, 1, 5, 3, 0, 0], [1, 1], [1], [], [0, 1, 1], [0, 0], [1], [1], [], [3, 0, 5], [1], [2, 0, 2, 1, 1, 1, 3, 0, 1, 1, 3, 1], [1, 0], [1, 2], [1, 1], [0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile divInt(in0,( int(7.0) - int(1.0) )) \\g int(5.0):{:\\nb1 = max(i0, int(3.0)) \\g int(0.0)\\nin2 -= abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 6, 6, 2, 1, 0, 3, 2, 1, 1, 0, 3, 1, 12, 2, 2, 2, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 6, 0, 0, 6, 7, 9, 9, 9, 8, 4, 6, 4, 4, 0, 6, 5, 5], [0], [0], [0], [0, 1, 0], [0], [3, 1], [1], [], [1, 5, 1, 5, 3, 5, 0, 0, 5, 6, 2, 0, 0, 1, 1, 2, 2, 5, 2, 4, 5, 3], [], [3, 2, 2, 0, 2, 2, 0, 2, 1, 2, 0, 3, 0, 0, 1, 3, 3, 0, 0, 2, 2, 3, 3, 3, 2, 3, 2, 0, 0, 0, 1, 3, 1, 2, 3, 2, 3, 0, 0, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2, 2, 1, 2, 1, 2, 3, 2, 3, 3, 2, 2, 3, 2, 0, 0, 0, 2, 3, 0, 1, 1, 1, 1, 3, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 0, 3, 1, 2, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [2, 1, 2, 0, 1, 2, 1, 2, 2, 0, 1, 0, 0, 2, 0, 1, 1, 2, 1, 2, 0, 0, 1, 2], [2, 1, 0, 0, 1, 2, 2, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( abs(( mod(i1,divInt(( in2 * ( int(3.0) - ( i1 + max(in2, in0) ) ) ),int(6.0))) + abs(min(in2, i0)) )) \\l mod(( max(abs(max(( abs(mod(i0,in2)) - res0 ), int(6.0))), abs(int(0.0))) * mod(min(( max(i2, i0) * min(min(abs(int(0.0)), min(max(max(int(6.0), int(7.0)), divInt(divInt(int(9.0),mod(int(9.0),( abs(mod(max(abs(( ( min(divInt(i0,i1), i1) + ( min(i2, int(9.0)) + int(8.0) ) ) + int(4.0) )), int(6.0)),max(int(4.0), i2))) + mod(in2,int(4.0)) ))),int(0.0))), i2)), ( in1 - int(6.0) )) ), in2),abs(int(5.0))) ),divInt(int(5.0),in0)) and False )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 19, 19, 1, 1, 1, 3, 1, 2, 1, 0, 22, 0, 89, 24, 24, 12, 12]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 0, 0, 1], [5, 5, 6, 6, 7, 2], [2], [1], [], [1], [0], [], [], [], [4, 2, 4], [1], [3, 0, 3, 2, 1, 2, 1, 0, 1, 1], [1, 0], [2, 1], [1, 2], [1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = abs(in1) == max(mod(int(5.0),( int(5.0) - i2 )), int(6.0))\\nin1 *= int(672.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 10, 2, 2, 2, 1]}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 2, 0, 0, 1, 2, 0, 1, 0], [0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 8, 0, 0, 7, 0, 5, 5, 4, 8, 6, 5, 9, 1, 8, 7, 6], [4, 3, 5, 0, 5], [0, 2, 1, 0, 2, 1], [0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [3, 2, 1, 1, 1, 2, 1, 1], [0, 1, 0, 0, 1], [1, 1], [6, 1, 1, 1, 1, 3, 3, 3, 4, 1, 0], [], [2, 1, 3, 3, 1, 1, 2, 1, 0, 3, 1, 1, 2, 2, 1, 3, 2, 2, 3, 1, 0, 0, 1, 0, 3, 0, 3, 3, 1, 3, 3, 3, 1, 1, 1, 2, 1, 0, 2, 2, 3, 2, 0, 0, 3, 1, 3, 0, 0, 1, 1, 3, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 0, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 0, 1, 2], [0, 2, 2], [1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(int(3.0),abs(min(int(8.0), int(8.0)))) \\le ( int(0.0) + res0 ):{:\\nif ( not max(int(0.0), int(7.0)) \\ge divInt(mod(int(0.0),max(( mod(max(int(5.0), i1),i1) * int(5.0) ), i1)),abs(i1)) and True ):{:\\nb0 = abs(min(int(4.0), max(abs(min(int(8.0), int(6.0))), int(5.0)))) != divInt(int(9.0),in0)\\n:}else:{:\\nb2 = False\\n:}\\n:}else:{:\\nb1 = ( divInt(abs(mod(in0,in0)),min(int(1.0), max(in1, i1))) * int(8.0) ) \\l int(7.0)\\nloopBreak% = 0\\nwhile True:{:\\nb0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\n:}\\nb1 = abs(int(6.0)) != i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 18, 18, 5, 6, 1, 13, 5, 8, 5, 2, 11, 0, 54, 10, 15, 3, 7]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [], [], [], [], [], [0], [], [1], [1], [0], [2, 4, 3, 5], [1], [2, 0, 3, 0, 0], [0], [1], [0, 1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\ni2 += ( in1 - max(in0, in2) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 4, 1, 5, 1, 1, 2, 0]}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 1, 1], [1], [1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 3, 4, 5, 0, 6], [4], [], [], [1], [0], [], [], [], [6, 0, 1, 4, 6, 1, 0, 3, 4, 4], [0, 1, 0], [1, 3, 1, 1, 2, 1, 1, 3, 0, 3, 2, 3, 0, 3, 0, 2, 0, 2, 3, 1, 0, 2, 0, 3, 0], [0, 1, 0, 1, 0], [1, 2, 2, 2, 1, 0, 2], [2, 1, 1, 2], [0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(1.0) \\le max(int(3.0), int(4.0)):{:\\nres0 = ( int(5.0) * int(0.0) )\\ni0 -= abs(i1)\\nin1 = abs(divInt(abs(res0),max(i1, ( i0 - divInt(min(int(6.0), in0),( in1 * abs(in1) )) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 6, 6, 1, 0, 0, 1, 1, 0, 0, 0, 10, 3, 25, 5, 7, 4, 2]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [4, 3, 5], [2], [2], [], [0, 1], [0], [2], [], [], [6, 6, 1, 6, 3, 2], [], [3, 3, 3, 3, 0, 1, 0, 3, 2, 3, 0, 3, 0, 1, 1, 0, 0], [0], [1, 0, 2, 1, 1, 1, 0], [2], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not max(min(abs(max(res0, int(4.0))), res0), max(( max(i1, min(res0, int(3.0))) * int(5.0) ), in0)) == i2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 2, 1, 1, 0, 0, 6, 0, 17, 1, 7, 1, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [], [], [2, 0], [], [0, 0], [], [1, 0], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 2, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 2, 5, 4, 5, 9, 2, 8, 7, 6, 2, 7, 4, 0, 0, 1, 6, 2, 4, 4, 3, 6, 5, 5, 5, 8], [0], [2], [], [1], [0], [], [], [], [0, 6, 4, 2, 0, 6, 5, 5, 1, 0, 2, 3, 1, 1, 5, 0, 2, 0, 3, 4, 2, 0, 6, 0, 3, 1, 6, 6, 1, 1, 3, 6, 4, 1, 4, 0, 6, 1, 5, 3], [0], [2, 3, 3, 1, 2, 0, 2, 3, 1, 3, 3, 3, 0, 3, 0, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 0, 1, 0, 2, 2, 2, 3, 2, 2, 3, 2, 3, 0, 2, 2, 3, 3, 2, 2, 0, 2, 1, 2, 0, 2, 0, 0, 0, 3, 3, 3, 0, 0, 3, 0, 0, 1, 1, 3, 2, 0, 0, 3, 2, 0, 3, 0, 3, 2, 3, 0, 2, 2, 0, 2, 3, 1, 0, 3, 3, 0, 3, 2, 3, 3, 1, 0, 2, 2, 2, 0, 0, 1, 3, 1, 3, 1, 0, 0, 1, 3, 1, 1, 1, 1, 2, 0, 1, 2, 2, 1, 0, 1, 2, 0, 3, 2, 2, 3, 0, 3, 1, 0, 0, 1, 1, 0, 1, 3, 2, 1, 3, 0, 3, 2, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 2, 2, 0, 0, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 1, 1, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 2], [2, 2, 0, 2, 0, 2, 1, 0, 1, 1, 1, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( min(abs(int(1.0)), ( res0 * divInt(abs(int(8.0)),min(min(min(in1, max(i2, i0)), divInt(abs(min(abs(( ( ( int(2.0) * res0 ) + in2 ) * in2 )), int(5.0))),i1)), ( ( ( max(( divInt(abs(( max(i0, ( ( abs(abs(mod(divInt(i2,divInt(int(4.0),( in0 + mod(i1,i1) ))),in2))) * min(abs(max(i0, i2)), abs(i0)) ) - in0 )) + int(5.0) )),int(9.0)) - max(divInt(in1,i2), min(( i0 - max(res0, min(divInt(min(i0, ( ( in0 - ( min(int(2.0), i1) + abs(max(res0, max(mod(abs(max(int(8.0), res0)),mod(( ( i1 - i1 ) * int(7.0) ),min(int(6.0), min(int(2.0), in0)))), res0))) ) ) - int(7.0) )),abs(int(4.0))), int(0.0))) ), int(0.0))) ), int(1.0)) * divInt(in1,int(6.0)) ) + ( mod(int(2.0),i1) + int(4.0) ) ) * divInt(in1,max(( ( min(i0, min(int(4.0), res0)) * i1 ) * int(3.0) ), int(6.0))) ))) )) + in2 )\\nb2 = int(5.0) \\l abs(( int(5.0) + max(in0, abs(divInt(int(5.0),int(8.0)))) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 27, 27, 1, 1, 0, 1, 1, 0, 0, 0, 40, 1, 143, 38, 39, 23, 15]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 0, 2, 2, 0, 2, 1, 2, 1, 2, 0], [1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 6, 0, 4, 8, 6, 4, 2, 2, 4, 8, 4, 6, 4, 8, 5, 4, 7, 7, 7, 6, 6, 3, 7, 8, 1, 6, 7, 9, 5, 4, 1, 8, 5, 5, 0, 0, 0, 7, 9, 3, 5, 7, 7, 0, 4, 4, 5, 0, 7, 6, 6, 5, 3, 7, 1, 5, 4, 3, 0, 1, 5, 3, 1, 9, 5, 8, 5, 0, 1, 5, 6, 7, 0, 1, 9, 3, 5, 9, 0, 6, 5, 3, 2, 5, 6, 5, 0, 5, 1, 2, 3], [2, 1, 3, 5, 3, 5], [2, 1, 0, 1, 2], [1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 2, 1, 2, 3, 0, 1], [1, 0], [0, 1, 1], [1, 1, 1, 1, 4, 4, 5, 5, 4, 3, 3, 4, 3, 5, 0, 3, 4, 3, 5, 3, 2, 1, 0, 3, 4, 1, 3, 6, 2, 5, 5, 6, 4, 4, 5, 6, 5, 0, 1, 6, 0, 4, 6, 0, 3, 4, 0, 1, 4, 5, 4, 5, 1, 0, 1, 5, 3, 2, 4, 6, 3, 0, 4, 3, 3, 4, 1, 3, 6, 5, 3, 0, 3, 6, 0, 4, 0, 3, 2, 2, 6, 0, 4, 6, 5, 1, 1, 2, 5, 4, 6, 5, 1, 4], [0, 0, 1], [1, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 3, 1, 1, 3, 3, 3, 2, 3, 3, 3, 0, 0, 1, 0, 2, 2, 0, 0, 3, 0, 2, 0, 2, 0, 3, 2, 3, 2, 2, 0, 2, 0, 1, 3, 3, 2, 3, 3, 0, 0, 2, 3, 3, 1, 1, 0, 2, 3, 2, 1, 3, 0, 3, 2, 3, 2, 3, 1, 1, 1, 0, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0, 3, 3, 2, 0, 1, 1, 3, 0, 1, 1, 3, 2, 2, 3, 2, 2, 2, 3, 3, 0, 2, 0, 2, 1, 1, 1, 2, 0, 2, 2, 3, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 1, 2, 2, 2, 2, 3, 0, 2, 1, 1, 1, 2, 3, 1, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0, 2, 0, 1, 1, 3, 0, 2, 0, 2, 3, 0, 3, 0, 3, 0, 1, 2, 3, 3, 0, 1, 0, 1, 1, 2, 0, 0, 3, 3, 3, 2, 2, 1, 0, 0, 0, 1, 2, 3, 1, 2, 3, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 0, 3, 0, 0, 1, 0, 2, 0, 3, 3, 0, 1, 0, 2, 3, 0, 2, 3, 2, 3, 1, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 2, 2, 3, 3, 1, 2, 2, 1, 3, 3, 0, 0, 0, 1, 1, 1, 2, 0, 3, 2, 3, 2, 1, 0, 1, 0, 2, 1, 1, 2, 3, 3, 0, 2, 0, 2, 0, 1, 2, 0, 2, 3, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0, 2, 0, 3, 1, 0, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 0, 1, 3, 2, 1, 2, 0, 3, 3, 1, 2, 2, 1, 2, 0, 2, 1, 0, 2, 3, 1, 2, 2, 0, 0, 0, 2, 1, 2, 2, 1, 2, 1, 0, 3, 2, 0, 1, 0, 1, 3, 3, 1, 2, 2, 3, 3, 1, 3, 1, 2, 1, 1, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 2, 0, 1, 2, 1, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 1, 1, 1, 2, 0, 0, 2, 1, 2, 0, 0, 2, 1, 1, 2, 2, 2, 1, 2, 2, 0, 0, 2, 0], [2, 1, 1, 0, 2, 2, 2, 1, 1, 1, 2, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\ni1 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not max(i1, int(2.0)) == min(mod(i1,int(6.0)), i1)\\nif int(0.0) \\g min(min(int(4.0), int(8.0)), max(min(max(( max(max(min(in1, in1), int(6.0)), in2) * mod(( in2 - in1 ),max(in0, divInt(in0,mod(in1,min(( max(( divInt(in0,divInt(in2,int(4.0))) - max(max(( max(min(i0, in0), divInt(abs(min(int(2.0), int(2.0))),in1)) + divInt(max(( int(4.0) * abs(in0) ), max(( abs(( abs(int(8.0)) * int(4.0) )) * int(6.0) ), in2)),int(4.0)) ), int(8.0)), int(5.0)) ), int(4.0)) - int(7.0) ), abs(min(max(in0, i2), min(min(divInt(i1,int(7.0)), int(7.0)), min(i0, int(6.0)))))))))) ), int(6.0)), min(( divInt(min(mod(mod(divInt(min(max(in0, ( in1 - ( int(3.0) - int(7.0) ) )), int(8.0)),divInt(i1,( divInt(min(in0, ( mod(( res0 * int(1.0) ),mod(divInt(divInt(i2,divInt(mod(divInt(in2,int(6.0)),int(7.0)),( mod(( ( min(in2, ( int(9.0) * int(5.0) )) + int(4.0) ) - ( abs(int(1.0)) - res0 ) ),in1) + in1 ))),int(8.0)),int(5.0))) * mod(int(5.0),in2) )),res0) + in2 ))),i0),max(int(0.0), ( i1 - mod(res0,int(0.0)) ))), int(0.0)),max(i0, divInt(in1,divInt(min(res0, min(i0, max(in0, int(7.0)))),divInt(min(max(in1, int(9.0)), i0),int(3.0)))))) - int(5.0) ), ( i1 + in1 ))), abs(max(max(divInt(( int(7.0) * in2 ),in1), in2), int(7.0))))):{:\\nloopBreak% = 0\\nwhile divInt(max(int(0.0), mod(max(int(4.0), int(4.0)),abs(int(5.0)))),min(i1, ( ( divInt(int(0.0),abs(( abs(i0) + abs(i1) ))) * in2 ) * int(7.0) ))) \\ge in0:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not ( b1 or ( i2 * min(min(in1, int(6.0)), res0) ) != mod(abs(in0),divInt(min(mod(abs(int(6.0)),abs(max(abs(min(mod(abs(max(abs(divInt(min(divInt(mod(abs(max(int(5.0), divInt(( int(3.0) * max(max(i0, in1), in0) ),int(7.0)))),int(1.0)),int(5.0)), divInt(in0,max(divInt(abs(mod(int(4.0),in1)),int(3.0)), i1))),divInt(int(0.0),int(1.0)))), divInt(min(min(in0, ( res0 * divInt(in2,int(5.0)) )), mod(in0,divInt(abs(i0),in0))),divInt(max(int(3.0), abs(( mod(res0,i0) - ( in1 - min(int(1.0), i0) ) ))),( ( int(9.0) * int(5.0) ) - int(8.0) ))))),int(5.0)), int(0.0))), min(int(1.0), int(5.0))))), abs(int(6.0))),max(int(7.0), in0))) ):{:\\ni2 = int(0.0)\\n:}else:{:\\nif True:{:\\ni2 -= max(divInt(int(1.0),( res0 - abs(abs(int(9.0))) )), divInt(mod(int(3.0),divInt(i0,( int(5.0) * in1 ))),divInt(abs(int(9.0)),divInt(( res0 * in2 ),i1))))\\n:}else:{:\\nloopBreak% = 0\\nwhile ( int(0.0) * mod(divInt(int(6.0),( int(5.0) + i1 )),max(( i2 - int(3.0) ), in2)) ) \\ge int(2.0):{:\\nb2 = abs(abs(int(5.0))) != ( divInt(min(min(int(6.0), abs(int(5.0))), ( int(0.0) * int(5.0) )),in1) + ( divInt(mod(( res0 + int(1.0) ),in2),( i1 + min(int(2.0), int(3.0)) )) * in1 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 93, 93, 6, 5, 1, 13, 6, 7, 2, 3, 94, 3, 381, 104, 93, 44, 61]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [1, 5], [], [], [], [], [], [], [], [], [1, 5], [1], [2, 2, 1, 0, 3, 1], [0, 0], [2], [0, 1, 2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += ( ( int(1.0) - in2 ) * abs(int(5.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 6, 2, 1, 3, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [4, 0], [4], [1], [], [1], [0], [], [], [], [1], [], [3, 0, 1, 1], [], [1], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(i1, int(4.0)) \\le int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [0, 0, 0], [1, 1, 1, 1], [4, 2, 3, 9], [2, 0], [2, 0, 2, 1], [], [1, 0, 1], [0, 0], [0], [], [], [2, 0], [], [1, 2, 1, 0, 2, 1, 1, 0], [0, 1], [], [1], [0]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(4.0) == ( int(2.0) - i2 )\\nb0 = b2\\nb1 = divInt(int(3.0),int(9.0)) \\l i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 4, 4, 2, 4, 0, 3, 2, 1, 0, 0, 2, 0, 8, 2, 0, 1, 1]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 2, 2, 2, 0, 2, 1, 1, 0], [1, 1, 0, 1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 4, 5, 2, 8, 2, 5, 3, 8, 7, 2, 5, 6, 7, 8, 7, 5, 8, 9, 4, 7, 9, 3, 9, 5, 4, 4, 3, 2, 2, 6, 9, 6, 2, 9, 9, 8, 8, 9, 9, 2, 5, 2, 4, 1, 2, 8, 5, 8, 2, 8, 8, 2, 2, 0], [2, 2, 5, 2], [0, 1, 1, 1, 1], [1], [0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0], [0, 0, 3, 0], [], [1], [3, 5, 2, 1, 0, 0, 1, 2, 5, 4, 2, 6, 5, 2, 3, 6, 0, 2, 0, 4, 2, 1, 6, 0, 4, 3, 3, 5, 3, 1, 1, 2, 0, 6, 4, 0, 1, 6, 4, 4, 2, 1, 5, 2, 4, 4, 5, 0, 1, 0, 0, 1, 6, 3], [0, 0, 0], [1, 2, 1, 3, 1, 3, 0, 3, 1, 0, 1, 0, 0, 0, 1, 3, 2, 2, 1, 1, 1, 2, 1, 0, 3, 1, 2, 1, 1, 3, 3, 2, 3, 0, 3, 3, 0, 2, 3, 1, 1, 3, 2, 2, 3, 2, 0, 2, 2, 3, 2, 0, 3, 3, 1, 3, 1, 3, 2, 0, 3, 3, 1, 0, 0, 1, 3, 1, 2, 1, 2, 2, 3, 2, 1, 3, 2, 1, 2, 1, 2, 0, 2, 1, 2, 2, 0, 2, 2, 3, 3, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 2, 0, 0, 3, 3, 1, 3, 3, 3, 0, 1, 1, 0, 3, 0, 2, 0, 3, 1, 3, 0, 3, 2, 2, 0, 1, 2, 2, 1, 1, 3, 2, 2, 2, 2, 0, 2, 2, 1, 1, 2, 2, 3, 1, 0, 3, 3, 1, 3, 3, 0, 3, 1, 3, 1, 2, 3, 2, 0, 0, 1, 0, 1, 3, 1, 3, 1, 2, 2, 3, 2, 0, 0, 3, 2, 0, 0, 1, 3, 2, 3, 0, 0, 0, 1, 2, 2, 0, 2, 2, 3, 2, 0, 3, 0, 0, 0, 3, 0, 2, 3, 3, 0, 1, 1, 2, 1, 1, 3, 3, 3, 0, 0, 3, 0, 1, 2, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 2, 1, 0, 0, 0, 1, 2, 2, 0, 0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 0, 2, 0, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 1, 2, 1, 0], [0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 1, 1, 2, 0, 1, 2, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile int(5.0) == ( int(4.0) + min(int(4.0), max(in0, min(int(5.0), in2))) ):{:\\nif ( int(2.0) == i2 or i1 != i0 ):{:\\ni0 = int(8.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile min(mod(mod(int(2.0),int(5.0)),int(3.0)), ( int(8.0) - i1 )) == max(int(7.0), ( int(2.0) + int(5.0) )):{:\\ni2 = abs(max(divInt(min(in2, min(min(in1, ( max(int(6.0), int(7.0)) * abs(mod(( abs(( i2 * divInt(( min(divInt(res0,min(abs(int(8.0)), abs(int(7.0)))), max(( in2 + max(max(int(5.0), i2), in0) ), int(8.0))) + abs(int(9.0)) ),( int(4.0) + ( mod(abs(mod(int(7.0),abs(( int(9.0) + divInt(int(3.0),mod(res0,( int(9.0) + ( mod(i0,divInt(divInt(abs(abs(i2)),int(5.0)),i0)) + int(4.0) ) ))) )))),in1) - int(4.0) ) )) )) + int(3.0) ),i2)) )), int(2.0))),i1), mod(divInt(( res0 * i0 ),max(abs(int(2.0)), min(abs(min(in1, int(6.0))), int(9.0)))),in0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = max(in2, ( in0 + max(int(6.0), max(i1, min(divInt(( i1 + int(2.0) ),divInt(( int(9.0) - int(9.0) ),min(( mod(divInt(divInt(i2,( ( int(8.0) - int(8.0) ) - ( ( max(int(9.0), i0) - min(abs(int(9.0)), min(max(res0, min(int(2.0), min(int(5.0), divInt(min(( in1 - i0 ), int(2.0)),i1)))), int(4.0))) ) * min(int(1.0), min(int(2.0), divInt(divInt(abs(mod(res0,in1)),abs(mod(in1,i2))),int(8.0)))) ) )),min(( min(i1, in2) + i2 ), int(5.0))),( divInt(in1,divInt(( min(mod(in1,min(in2, i0)), i1) - abs(i0) ),divInt(abs(abs(i0)),int(8.0)))) * int(2.0) )) - mod(int(8.0),int(8.0)) ), max(abs(max(i1, res0)), min(in0, int(2.0)))))), ( int(2.0) - int(0.0) )))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 56, 56, 4, 5, 1, 8, 4, 4, 0, 1, 54, 3, 222, 57, 58, 27, 30]}, {"genotype": [[0], [0, 1, 1, 1, 1], [1, 2, 2, 2, 0], [0, 1, 1], [1, 0], [1, 1, 1, 1, 1, 1], [7, 4, 2, 4, 2, 5], [5, 3, 2], [1], [], [1, 0, 1, 1], [0, 0, 0], [1], [1], [0], [4, 1, 1, 6, 1, 3], [0], [1, 2, 3, 2, 3, 1, 0, 3, 2, 0, 1, 1, 3, 3, 1, 1, 3, 0, 3, 0, 0], [0, 0, 0], [2, 2, 2, 2, 1, 2, 2], [2, 0, 2], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(7.0)\\nif ( abs(( abs(int(4.0)) * i1 )) + abs(( i1 * int(2.0) )) ) != int(4.0):{:\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile abs(max(int(2.0), int(5.0))) \\ge abs(res0):{:\\nb1 = abs(i1) == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 6, 6, 3, 1, 0, 4, 3, 1, 1, 1, 6, 1, 21, 3, 7, 3, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1], [9], [1], [0, 2], [], [0, 1, 0, 0], [0], [2, 2, 1], [0], [], [6], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not int(9.0) \\g res0\\nb2 = not True\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 4, 1, 3, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 2, 2, 0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 0, 9, 4, 6, 3, 2, 1, 1, 2, 7, 9, 6, 4, 1, 2, 1, 8, 4, 1, 3, 6, 7], [3, 4], [2, 0], [], [0, 1, 0, 1], [0, 0], [1, 0], [1], [1], [3, 0, 1, 1, 4, 5, 6, 2, 2, 3, 1, 5, 6, 0, 0, 0, 6, 0, 6], [0, 1], [1, 1, 2, 3, 3, 2, 1, 3, 1, 2, 2, 1, 1, 2, 3, 2, 2, 0, 2, 3, 0, 3, 3, 3, 0, 3, 0, 2, 0, 1, 0, 2, 2, 3, 0, 3, 0, 2, 3, 3, 1, 1, 1, 0, 2, 3, 2, 2, 1, 3, 0, 0, 3, 2, 1, 1, 2, 1, 3, 2, 1, 2, 3, 3, 1, 0, 3, 0, 0, 3, 0, 3, 2, 0, 0, 1, 1, 2, 3, 1, 1, 3, 1, 1, 1, 1], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0], [2, 1, 1, 1, 2, 0, 0, 0, 1, 2, 2, 1, 2, 1, 2, 0, 2, 2, 0, 2, 0, 1, 2, 0], [1, 1, 2, 1, 0, 1, 0, 2, 2, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nloopBreak% = 0\\nwhile int(1.0) \\ge int(9.0):{:\\nloopBreak% = 0\\nwhile b2:{:\\nin0 = divInt(abs(max(( int(0.0) - max(int(9.0), ( mod(int(4.0),int(6.0)) - mod(max(divInt(( i0 * ( abs(i1) - min(min(min(i1, max(in1, ( in2 + int(3.0) ))), res0), ( ( abs(i2) - abs(i2) ) + ( max(abs(int(2.0)), int(1.0)) * int(1.0) ) )) ) ),in0), divInt(max(( ( int(2.0) * abs(i1) ) + in2 ), min(mod(int(7.0),int(9.0)), ( int(6.0) - abs(( int(4.0) - divInt(abs(min(int(1.0), res0)),abs(i0)) )) ))),i0)),min(i0, max(divInt(res0,i0), int(2.0)))) )) ), int(1.0))),( abs(int(8.0)) - int(4.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = min(int(1.0), int(3.0)) \\le int(6.0)\\n:}else:{:\\nres0 -= int(7.0)\\n:}\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 6, 6, 3, 3, 24, 24, 2, 2, 0, 4, 2, 2, 1, 1, 19, 2, 86, 21, 24, 14, 8]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 8, 8, 0, 6, 6, 4, 1, 9, 5, 8, 8, 7, 6, 9, 2, 0, 2, 2, 9, 8], [5, 1, 2], [2, 0], [1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0], [3, 1, 0, 3, 2, 3, 2], [0], [], [5, 5, 3, 0, 2, 4, 5, 5, 2, 1, 6, 0, 0, 5, 5, 4, 1, 2, 3, 2, 1, 2, 2, 1, 6, 1], [], [1, 0, 0, 1, 2, 3, 3, 3, 3, 2, 0, 2, 3, 1, 2, 2, 3, 1, 0, 2, 2, 3, 0, 2, 0, 2, 0, 3, 3, 1, 0, 3, 0, 1, 0, 1, 0, 2, 1, 3, 2, 1, 2, 2, 2, 1, 0, 3, 2, 1, 0, 1, 2, 3, 0, 0, 2, 2, 0, 0, 0, 2, 2, 1, 3, 0, 2, 0, 3, 2, 0, 3, 2, 0, 0, 2, 1, 1, 2, 1, 1, 1, 3, 1, 2, 0, 1, 2, 3, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 2, 1, 2, 2, 0, 2], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( True or b2 ):{:\\nb0 = ( not int(0.0) != in2 or ( in2 \\g int(8.0) or not ( max(min(abs(abs(divInt(in0,mod(max(int(8.0), mod(( min(int(0.0), i0) + mod(divInt(min(i2, divInt(in1,( in2 - abs(max(int(6.0), in2)) ))),max(i2, int(6.0))),i1) ),int(4.0))),res0)))), mod(int(1.0),min(( int(9.0) - divInt(mod(divInt(int(5.0),i0),abs(( int(8.0) + i0 ))),int(8.0)) ), divInt(min(in2, in2),( mod(in1,i1) * i2 ))))), divInt(( int(7.0) - min(in0, ( i2 * min(( i1 * max(divInt(i2,i2), mod(int(6.0),int(9.0))) ), ( int(2.0) + int(0.0) )) )) ),int(2.0))) * min(int(2.0), divInt(i1,int(9.0))) ) == divInt(max(res0, int(8.0)),i1) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 21, 21, 3, 2, 3, 10, 3, 7, 1, 0, 26, 0, 92, 27, 18, 10, 17]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 1, 0], [1, 0, 1], [6, 8, 5], [3], [1, 0, 0], [], [0, 1], [0], [0], [], [], [2, 5], [1], [3, 1, 0, 1], [], [2], [1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\ni2 -= abs(int(6.0))\\nb0 = in2 \\ge int(85.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 1, 1, 0, 0, 2, 1, 4, 0, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [3], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [0, 1], [1, 1, 1, 1, 1, 1], [6, 7, 4, 4, 0, 8], [1, 1], [0], [], [1, 1], [0, 0], [], [], [], [0, 4, 3, 0, 2, 0, 0], [1], [2, 3, 2, 1, 2, 2, 3, 1, 3, 3, 3, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1], [0, 2, 2, 1, 1], [0], [0, 0, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(min(divInt(int(6.0),divInt(divInt(abs(int(7.0)),abs(max(max(int(4.0), i0), in1))),in0)), int(4.0)),i0) \\g int(0.0):{:\\nb0 = i2 \\g int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 2, 1, 0, 2, 2, 0, 0, 0, 7, 1, 21, 4, 5, 1, 4]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 1, 8, 6, 0, 4, 5, 1, 1, 5, 3, 2, 5, 9, 0, 9, 5, 8, 4, 7, 2, 0, 4, 2, 6, 5, 3, 4, 2, 1, 4, 9, 8, 5, 7, 5, 8, 1, 5, 8, 6, 7], [1, 2], [2], [], [1, 1], [0, 0], [], [], [], [2, 3, 3, 0, 4, 1, 4, 3, 0, 4, 4, 4, 6, 3, 5, 4, 2, 1, 6, 2, 1, 0, 2, 1, 3, 4, 1, 2, 6, 6, 1, 0, 3, 3, 5, 3, 0], [0], [1, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 0, 1, 0, 3, 3, 3, 1, 0, 2, 3, 3, 0, 0, 2, 1, 1, 1, 1, 3, 0, 3, 1, 3, 2, 2, 1, 3, 3, 2, 0, 3, 0, 3, 0, 0, 3, 1, 2, 2, 3, 2, 0, 2, 3, 1, 3, 0, 0, 2, 0, 1, 1, 3, 1, 3, 0, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 1, 2, 3, 2, 0, 3, 1, 3, 0, 3, 1, 1, 1, 2, 1, 1, 1, 3, 0, 2, 2, 1, 3, 3, 0, 0, 2, 1, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 0, 2, 1, 1, 2, 1, 0, 0, 2, 0, 3, 3, 0, 0, 1, 2, 0, 3, 3, 0, 0, 2, 2, 3, 2, 2, 0, 1, 2, 3, 2, 3, 1, 0, 0, 2, 0, 1, 1, 1, 3, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 1, 2, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 0], [2, 2, 0, 0, 0, 2, 1, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(4.0) \\g ( min(( max(max(min(mod(int(2.0),i2), mod(in0,int(1.0))), in0), min(max(max(int(8.0), i0), ( abs(max(in1, i1)) * mod(int(6.0),int(0.0)) )), int(4.0))) * int(5.0) ), max(in1, abs(int(1.0)))) + max(( ( int(1.0) + max(max(mod(in0,min(i0, min(in1, in1))), min(int(5.0), ( ( min(divInt(in1,( abs(int(3.0)) + min(res0, in0) )), ( in2 * int(2.0) )) - int(5.0) ) + abs(int(9.0)) ))), min(in1, ( int(0.0) + divInt(( divInt(( int(9.0) + ( int(5.0) * mod(i2,divInt(int(8.0),mod(int(4.0),int(7.0)))) ) ),( max(mod(i1,abs(int(2.0))), max(res0, max(int(0.0), int(4.0)))) + int(2.0) )) * mod(int(6.0),int(5.0)) ),int(3.0)) ))) ) + max(i2, mod(divInt(int(4.0),abs(max(i1, i0))),( int(2.0) * min(int(1.0), min(min(max(abs(int(4.0)), min(abs(abs(i2)), ( int(9.0) * int(8.0) ))), ( int(5.0) + i1 )), in0)) ))) ), mod(in1,min(min(i1, i2), int(7.0)))) ):{:\\nb2 = ( res0 + min(abs(res0), i1) ) == divInt(mod(min(( divInt(i0,int(5.0)) * mod(abs(( max(int(8.0), in0) + in0 )),mod(in2,int(1.0))) ), int(5.0)),int(8.0)),min(int(6.0), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 43, 43, 2, 1, 0, 2, 2, 0, 0, 0, 37, 1, 164, 40, 45, 20, 20]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [9, 1], [], [], [], [], [], [], [], [], [4, 1, 6], [0], [2, 3, 0, 3, 3, 3, 2, 1, 0, 1], [0, 1], [2, 1, 2, 2], [2], [1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( abs(i1) * max(abs(abs(mod(int(9.0),res0))), int(1.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 10, 2, 4, 1, 1]}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 1, 0, 2, 1, 2, 2, 2, 1], [1, 0, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 8, 4, 5, 4, 5, 1, 5, 6, 7, 1, 8, 6, 3, 4], [3, 2, 2, 2, 4], [1, 0], [], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0], [], [0, 0], [0, 5, 1, 6, 4, 0, 6, 2, 3, 3, 0, 1, 6, 5, 4, 4, 0, 2, 1, 1], [1, 0, 1], [2, 1, 3, 1, 1, 0, 3, 3, 1, 3, 1, 2, 2, 3, 0, 2, 3, 0, 0, 3, 0, 1, 2, 1, 1, 1, 1, 1, 0, 3, 0, 0, 3, 2, 0, 2, 0, 2, 2, 0, 1, 2, 2, 2, 0, 3, 0, 1, 2, 0, 1, 0, 3, 1, 3, 2, 0, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [2, 2, 0, 1, 2, 1, 0, 0, 0, 2, 1, 2], [2, 2, 1, 0, 2, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(int(0.0),abs(int(0.0))) \\ge int(1.0):{:\\ni0 *= in2\\ni1 = abs(min(int(8.0), max(int(4.0), mod(mod(abs(res0),mod(max(in1, i0),min(res0, int(5.0)))),( int(4.0) * int(5.0) )))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(1.0) == int(5.0):{:\\nb1 = int(6.0) == i2\\nif min(in0, in0) == min(( i0 - mod(i1,mod(mod(res0,int(7.0)),( mod(( in2 + abs(in1) ),int(1.0)) * divInt(in1,int(8.0)) ))) ), i0):{:\\nloopBreak% = 0\\nwhile max(int(6.0), abs(( i2 * int(3.0) ))) \\le int(4.0):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni1 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 17, 17, 5, 2, 0, 6, 5, 1, 0, 2, 20, 3, 60, 14, 12, 7, 9]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 2, 0, 1, 0, 0], [1], [0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1], [5, 4, 0, 9, 0, 8, 3], [5, 3, 4, 0], [2, 0, 1, 2], [1], [0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 2, 3], [0, 1], [], [0, 6, 3, 5, 4, 3, 1, 5, 2, 4, 0, 2, 0, 5, 3], [0], [3, 0, 0, 1, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 3, 2, 0, 3, 0, 0, 1, 3, 3, 0, 1, 3, 3, 0, 0, 0, 2, 3, 1, 2, 2, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0], [2, 1, 0, 0, 0, 2, 2, 2, 1, 2, 2], [0, 1, 1], [1, 1, 1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nloopBreak% = 0\\nwhile False:{:\\nb0 = not ( abs(i0) != res0 or int(5.0) \\ge in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = max(mod(in2,int(4.0)), mod(( min(in1, int(0.0)) + min(mod(in0,min(i1, in2)), int(9.0)) ),abs(abs(i2)))) \\le int(0.0)\\nin1 = abs(max(i0, i2))\\nb2 = i0 \\l ( abs(int(8.0)) - divInt(( in2 - int(3.0) ),abs(in0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 7, 7, 4, 4, 1, 8, 4, 4, 2, 0, 15, 1, 39, 7, 11, 3, 4]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 1], [], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 7, 2, 1, 6, 3, 4, 6, 3, 9, 7, 1, 2, 6, 3, 3, 3, 7, 5, 2], [3, 5, 3], [1, 2, 2], [0], [1, 1, 0, 1, 0], [0, 0, 0], [3, 1], [1], [], [0, 2, 4, 4, 5, 1, 3, 0, 4, 2, 5, 0, 6, 1, 4, 5, 3, 4, 3, 4, 2, 6, 4], [1], [1, 3, 2, 3, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 1, 0, 3, 2, 2, 3, 0, 3, 0, 2, 2, 3, 0, 3, 0, 3, 3, 3, 2, 2, 3, 3, 0, 2, 1, 1, 0, 2, 3, 0, 3, 1, 1, 0, 1, 3, 2, 0, 2, 3, 0, 1, 2, 1, 1, 3, 2, 0, 0, 0, 3, 0, 1, 3, 1, 1, 2, 2, 0, 3, 0, 1, 1, 3, 2, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 0, 2, 0, 1, 0], [2, 0, 0, 2, 1, 0, 0, 1, 0, 0, 2, 2], [0, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(1.0) \\ge min(( max(i0, int(3.0)) * ( i2 + int(7.0) ) ), in1)\\nb2 = int(2.0) != divInt(in1,int(1.0))\\nb2 = ( int(6.0) \\ge in2 and False )\\ni1 += abs(( ( min(in0, min(i0, ( ( min(in1, max(i2, max(min(min(mod(( min(abs(in2), mod(int(3.0),int(4.0))) * i0 ),mod(max(res0, max(int(6.0), int(3.0))),i1)), int(9.0)), max(mod(in1,( max(in2, int(7.0)) - ( int(1.0) + int(2.0) ) )), min(( in0 + in1 ), in0))), abs(in1)))) - int(6.0) ) + min(int(3.0), int(3.0)) ))) + divInt(mod(i2,max(res0, int(3.0))),int(7.0)) ) * min(( int(5.0) * int(2.0) ), in1) ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 21, 21, 3, 3, 1, 5, 3, 2, 1, 0, 23, 1, 82, 18, 21, 12, 7]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 1, 0], [0, 1, 0, 0], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 9, 1, 4, 0, 5, 3, 8, 6, 9, 4, 9, 7, 1, 6, 7, 2, 9, 9], [0, 1, 2], [1, 1, 1, 1], [1], [0, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0], [3, 0, 1, 1, 2, 0], [0, 1], [0, 1, 0], [3, 6, 2, 6, 4, 3, 2, 3, 4, 5, 3, 0, 2, 4, 3, 2, 4, 5, 5, 6], [0, 1], [2, 3, 2, 3, 2, 1, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 3, 0, 1, 2, 3, 3, 2, 0, 1, 2, 3, 2, 3, 1, 2, 0, 0, 2, 3, 3, 0, 3, 0, 0, 0, 1, 1, 2, 1, 1, 2, 3, 1, 3, 1, 3, 3, 1, 0, 0, 0, 2, 3, 0, 3, 1, 1, 2, 0, 0, 1, 0, 3, 1, 2, 2, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 1], [0, 2, 0, 2, 1, 1, 2, 0, 0, 2], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = divInt(abs(( abs(mod(int(2.0),divInt(( ( divInt(int(7.0),res0) + mod(int(9.0),int(1.0)) ) * int(4.0) ),min(i2, int(0.0))))) + ( min(min(mod(res0,int(5.0)), ( max(mod(max(int(3.0), divInt(in1,in0)),( abs(min(i2, min(in0, in1))) * in2 )), int(8.0)) - int(6.0) )), mod(int(9.0),int(4.0))) - mod(max(int(9.0), abs(int(7.0))),abs(min(int(1.0), in0))) ) )),i0)\\nb1 = ( b1 or i2 \\l ( abs(in1) * abs(int(6.0)) ) )\\nif True:{:\\nloopBreak% = 0\\nwhile False:{:\\nif not b1:{:\\nif int(7.0) \\g divInt(in0,i2):{:\\nin1 += int(2.0)\\n:}\\n:}else:{:\\nb1 = in2 == max(int(9.0), ( ( in2 + res0 ) * int(9.0) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 20, 20, 3, 4, 1, 9, 3, 6, 2, 3, 20, 2, 75, 20, 17, 10, 11]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 4], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = in1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [0, 1, 2, 0, 2, 0], [1, 0], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 4, 6, 7, 8, 6, 1, 9, 9, 2, 6, 2, 2, 6, 8, 2, 6, 8, 8, 8, 1, 5, 6, 9, 3, 3, 9, 6, 4, 7, 4, 6, 6, 5, 6, 2, 1, 3, 1, 0, 0, 1, 1, 5, 9, 0, 7, 9, 1, 8, 4, 4, 5, 1, 2, 8, 9, 1, 5, 8], [4, 1], [1, 2, 2], [], [1, 0, 0, 1], [0, 0], [0, 1], [0], [0], [3, 4, 5, 6, 2, 6, 1, 5, 5, 6, 0, 2, 5, 4, 6, 1, 1, 3, 1, 0, 0, 4, 4, 5, 2, 2, 6, 6, 4, 2, 4, 3, 6, 5, 1, 1, 5, 0, 0, 1, 2, 1, 3, 4, 2, 2, 2, 6, 0, 1, 0, 3, 0, 5, 0, 3, 4, 3, 1, 4, 0, 5, 2, 1, 6, 1, 2, 2, 2], [1, 0], [3, 3, 2, 1, 1, 3, 2, 2, 2, 0, 0, 3, 2, 2, 2, 1, 2, 2, 3, 1, 1, 3, 3, 0, 2, 2, 1, 0, 3, 2, 1, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 2, 1, 1, 3, 1, 3, 2, 1, 2, 2, 3, 0, 0, 3, 2, 3, 1, 3, 0, 0, 2, 2, 1, 2, 3, 2, 3, 3, 2, 2, 2, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 0, 0, 1, 2, 2, 2, 2, 3, 1, 0, 0, 0, 0, 1, 0, 2, 3, 1, 0, 2, 3, 0, 3, 2, 3, 3, 0, 0, 2, 3, 3, 3, 1, 2, 1, 1, 2, 0, 3, 0, 3, 0, 3, 2, 0, 0, 0, 1, 2, 0, 3, 3, 3, 0, 1, 1, 1, 3, 3, 1, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 3, 3, 3, 1, 2, 0, 3, 0, 1, 1, 0, 3, 1, 1, 3, 2, 3, 1, 0, 0, 1, 3, 1, 2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 1, 3, 2, 3, 2, 2, 0, 0, 3, 2, 3, 1, 3, 2, 0, 0, 0, 3, 3, 1, 1, 2, 2, 3, 2, 2, 1, 0, 2, 2, 0, 2, 2, 0, 3, 1, 3, 2, 2, 2, 3, 1, 1, 3, 3, 0, 0, 0, 3, 0, 1, 2, 3, 0, 2, 3, 3, 2, 0, 1, 1, 3, 0, 1, 0, 1, 2, 3, 1, 2, 0, 3, 0, 3, 1, 2, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 0, 1, 1, 0, 0, 0, 2, 0, 1, 2, 2, 2, 2, 0, 2, 0, 0, 2, 1, 1, 1, 0, 0, 0, 2, 1, 2, 2, 0, 2, 1, 2, 1, 0, 1, 2, 1], [2, 2, 2, 2, 0, 1, 2, 0, 1, 1, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 0, 2, 2, 1, 0, 2, 0, 0, 2], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 83, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(min(( int(1.0) * int(9.0) ), max(( ( divInt(in0,in1) * max(( ( mod(int(4.0),divInt(( max(int(6.0), int(7.0)) * abs(abs(in2)) ),( ( int(8.0) * res0 ) + min(( int(6.0) - ( min(( i2 * min(abs(divInt(int(1.0),mod(mod(divInt(int(9.0),int(9.0)),abs(int(2.0))),min(divInt(int(6.0),divInt(( min(res0, i1) + min(mod(min(int(2.0), min(in2, in2)),( mod(int(2.0),( max(( max(abs(( mod(( int(6.0) - res0 ),i0) - int(8.0) )), i2) * in2 ), int(2.0)) * int(6.0) )) * abs(int(8.0)) )), min(in1, res0)) ),i1)), int(8.0))))), ( ( mod(divInt(max(int(8.0), i1),in0),i1) * i0 ) * int(1.0) )) ), i0) * ( abs(int(5.0)) + in1 ) ) ), ( max(in1, max(mod(max(abs(in2), i2),( abs(abs(abs(int(6.0)))) * ( int(9.0) + int(3.0) ) )), divInt(i2,max(res0, abs(res0))))) + min(( in1 * i2 ), in1) )) ))) * int(3.0) ) + mod(in0,max(max(min(res0, int(9.0)), int(6.0)), int(4.0))) ), min(min(int(7.0), in2), i1)) ) + mod(abs(mod(( int(4.0) + divInt(int(6.0),( int(6.0) * divInt(min(divInt(int(5.0),mod(int(6.0),max(abs(abs(int(2.0))), mod(i1,abs(in2))))), int(1.0)),int(3.0)) )) ),i0)),abs(int(1.0))) ), int(0.0))), min(mod(abs(int(0.0)),i0), i1)) \\le int(1.0)\\nb2 = b2\\nloopBreak% = 0\\nwhile True:{:\\ni2 += min(int(1.0), ( i1 * in0 ))\\nif mod(( in1 - i2 ),int(5.0)) \\g ( int(9.0) * int(0.0) ):{:\\ni2 = min(( abs(( divInt(i2,res0) + max(( max(int(7.0), max(( i0 * i1 ), i0)) * min(min(int(9.0), int(1.0)), divInt(mod(min(divInt(mod(int(8.0),in0),( ( i0 - ( ( in2 + abs(int(4.0)) ) * max(mod(( divInt(abs(int(4.0)),int(5.0)) + abs(min(i0, in0)) ),in1), abs(in0)) ) ) + int(1.0) )), divInt(max(i1, mod(abs(max(divInt(in1,int(2.0)), int(8.0))),min(i0, int(9.0)))),in2)),int(1.0)),divInt(max(int(5.0), mod(i2,abs(i1))),max(int(8.0), divInt(res0,i1))))) ), i2) )) * i2 ), i2)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 61, 61, 2, 3, 0, 4, 2, 2, 1, 1, 69, 2, 275, 77, 70, 39, 39]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 0, 1, 0], [0], [3, 2, 0, 0, 0], [1], [0], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(mod(i0,i1), i0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 0, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [2, 0, 2, 1, 1, 1, 1, 2, 0, 1, 1], [0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 0, 6, 1, 3, 8, 3, 0, 5, 2, 8, 0, 5, 7, 7, 2, 2, 8, 2, 4, 7, 9, 1, 5, 5, 9, 2, 6, 6, 8, 4], [2, 1, 1, 0, 4, 4], [1, 2, 1, 0, 1, 1], [1], [1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 3], [], [1, 1], [6, 3, 0, 6, 0, 1, 0, 5, 1, 4, 6, 1, 3, 2, 2, 2, 0, 2, 3, 4, 5, 1, 3, 1, 2, 4, 3, 4, 0, 6, 0, 3, 2, 6, 6, 3, 4, 3, 5], [1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 2, 3, 2, 0, 0, 3, 2, 1, 1, 3, 0, 0, 0, 0, 3, 1, 2, 0, 2, 2, 2, 3, 0, 1, 3, 1, 1, 0, 2, 0, 3, 3, 1, 2, 3, 2, 2, 2, 2, 2, 1, 3, 3, 0, 1, 3, 3, 3, 0, 0, 2, 3, 1, 1, 2, 3, 2, 0, 3, 3, 2, 3, 3, 2, 0, 2, 0, 3, 0, 1, 1, 1, 0, 1, 3, 1, 0, 3, 0, 2, 2, 3, 3, 1, 0, 3, 0, 3, 0, 3, 1, 1, 0, 1, 2, 1, 2, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 0, 0, 3, 2, 0, 3, 0, 0, 3, 1, 3, 0, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [2, 1, 0, 2, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 1, 1, 2, 2, 0, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 2, 0, 1, 2, 0, 0], [1, 2, 1, 0, 2, 2, 0, 1, 1, 2, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) == int(9.0):{:\\nb1 = res0 \\g in0\\n:}else:{:\\nif b2:{:\\ni0 -= int(0.0)\\n:}else:{:\\nres0 = int(6.0)\\n:}\\n:}\\nb1 = b0\\ni0 = i1\\nloopBreak% = 0\\nwhile ( divInt(abs(( i0 * in2 )),max(divInt(int(1.0),int(3.0)), min(i1, in1))) \\g res0 or i1 \\l abs(int(8.0)) ):{:\\nb1 = divInt(in0,mod(divInt(divInt(max(i2, int(3.0)),max(int(0.0), int(5.0))),i2),( i2 - abs(max(int(2.0), divInt(min(( divInt(divInt(mod(divInt(int(8.0),min(min(i0, int(0.0)), max(abs(min(i2, in0)), mod(max(int(5.0), int(7.0)),( max(( in1 + abs(abs(mod(min(abs(mod(in2,( i1 * max(in0, int(7.0)) ))), int(2.0)),int(2.0)))) ), i1) * int(8.0) ))))),min(int(2.0), i2)),max(in1, ( mod(min(min(int(4.0), in0), max(in1, abs(i0))),abs(int(7.0))) + int(9.0) ))),res0) - int(1.0) ), mod(int(5.0),divInt(int(5.0),int(9.0)))),( max(abs(i0), int(2.0)) - int(6.0) )))) ))) \\le ( min(in0, i2) * max(( res0 - abs(res0) ), in0) )\\nin1 = min(int(6.0), min(in0, in2))\\nb1 = int(8.0) \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 11, 11, 3, 8, 32, 32, 6, 6, 1, 9, 6, 3, 0, 2, 39, 4, 129, 27, 35, 11, 17]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 0, 1], [0, 6, 7, 8, 0], [1], [1, 2], [], [1, 0, 0], [0], [2, 0], [], [], [4, 0, 3, 5], [], [2, 2, 3, 1, 2, 0, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1, 0], [0, 1, 0], [1, 0], [1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( mod(min(int(0.0), ( in1 - int(6.0) )),max(i0, in0)) + min(int(7.0), in2) ) \\g int(80.0):{:\\nb1 = not b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 5, 5, 1, 2, 0, 3, 1, 2, 0, 0, 4, 0, 14, 3, 3, 2, 1]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 1, 1, 1, 2, 0, 0, 0, 2, 1], [0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 1, 5, 9, 0, 8, 4, 4, 3, 5, 4, 7, 3, 8, 6, 4, 7, 6, 5, 0, 1, 6, 1, 3, 8, 8, 8, 5, 3, 6, 7, 6, 9, 2, 9, 1, 9, 2, 7, 3, 0, 2, 1, 5, 5, 9, 7, 3, 6, 8], [0, 4, 2, 4, 0], [1, 1, 2, 0], [], [1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0], [2, 0], [], [1, 1, 0], [1, 2, 4, 1, 4, 6, 5, 0, 2, 4, 3, 1, 3, 5, 0, 1, 5, 2, 5, 1, 0, 4, 0, 5, 0, 4, 4, 6, 3, 3, 5, 3, 6, 5, 4, 2, 3, 4, 1, 2, 3, 1, 4, 4, 2, 4, 5, 3, 3, 1, 1, 0, 6, 5], [1, 0, 1, 0, 1], [2, 1, 0, 2, 0, 3, 2, 3, 0, 2, 0, 3, 2, 1, 1, 0, 2, 0, 1, 0, 1, 2, 2, 2, 0, 2, 2, 3, 0, 1, 1, 2, 2, 1, 1, 1, 3, 2, 3, 2, 3, 3, 0, 1, 3, 3, 3, 0, 3, 1, 1, 1, 2, 2, 1, 3, 0, 0, 3, 2, 2, 1, 1, 1, 2, 1, 3, 0, 1, 0, 2, 1, 3, 1, 1, 0, 0, 3, 0, 1, 3, 0, 0, 3, 2, 2, 0, 0, 2, 2, 1, 3, 2, 2, 2, 3, 3, 0, 3, 2, 3, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 1, 3, 2, 0, 2, 2, 0, 3, 3, 1, 2, 2, 1, 0, 1, 3, 3, 3, 2, 3, 0, 3, 2, 0, 1, 2, 2, 3, 2, 0, 3, 0, 0, 2, 2, 3, 3, 3, 1, 3, 0, 3, 0, 1, 2, 1, 1, 1, 1, 1, 3, 3, 1, 3, 0, 2, 1, 2, 1, 0, 0, 3, 0, 1, 2, 3, 1, 3, 0, 0, 1, 2, 3, 2, 1, 3, 1, 0, 3, 3, 2, 1, 3, 0, 3, 1, 3, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 2, 1, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 1, 2, 1, 1, 0, 1, 1, 2], [2, 1, 2, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1, 2, 0, 2, 2, 2], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(int(5.0),i1) \\l mod(i2,max(( max(in1, divInt(i1,abs(( int(7.0) * int(1.0) )))) - in1 ), mod(res0,int(5.0))))\\nif in2 \\le int(9.0):{:\\nb1 = mod(divInt(( i0 * divInt(divInt(max(i2, int(0.0)),int(8.0)),divInt(divInt(int(4.0),int(4.0)),int(3.0))) ),abs(( max(( min(max(in1, int(5.0)), min(max(abs(in0), abs(int(4.0))), int(7.0))) * int(3.0) ), mod(( int(8.0) - max(i1, in0) ),abs(divInt(( int(6.0) * int(4.0) ),int(7.0))))) - mod(int(6.0),min(in2, int(5.0))) ))),i0) == ( int(0.0) * min(int(1.0), int(6.0)) )\\ni1 *= in2\\n:}else:{:\\ni2 = in2\\n:}\\nif min(i1, int(1.0)) \\le abs(i0):{:\\nin1 += i0\\nin2 = max(divInt(( i0 + in1 ),mod(( int(3.0) + min(( ( divInt(abs(max(in1, max(mod(max(int(8.0), res0),int(8.0)), divInt(int(8.0),in0)))),in0) + in2 ) - in0 ), int(5.0)) ),int(3.0))), abs(( res0 - ( divInt(in2,max(max(int(6.0), ( mod(int(7.0),in1) + int(6.0) )), max(min(max(( abs(i2) - abs(divInt(in0,int(9.0))) ), ( ( min(( in1 + abs(i1) ), i2) * ( ( min(abs(abs(int(2.0))), max(in0, max(i1, int(9.0)))) * mod(int(1.0),int(9.0)) ) + int(2.0) ) ) - int(7.0) )), int(3.0)), max(max(int(0.0), abs(in1)), divInt(int(2.0),divInt(int(1.0),in1)))))) * i2 ) )))\\n:}else:{:\\nb2 = not b0\\nif min(in1, int(5.0)) \\l divInt(min(int(5.0), max(in2, in0)),int(9.0)):{:\\nin0 += ( abs(( int(7.0) * max(int(3.0), i1) )) * max(min(( int(6.0) * max(i1, max(int(8.0), abs(i0))) ), res0), in2) )\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 3, 8, 51, 51, 5, 4, 0, 7, 5, 2, 0, 3, 54, 5, 201, 49, 52, 27, 25]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1], [1, 2, 0, 2, 2, 1, 1], [1, 0, 1], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 2, 1, 0, 3, 5, 9, 5, 5, 6, 0, 9, 3, 2, 2, 0, 9, 7], [2, 0, 5], [1, 2, 2], [1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0], [1, 3, 3, 1, 1, 0, 2], [1, 0, 1], [0], [1, 6, 5, 1, 0, 0, 1, 5, 4, 3, 0, 2, 2, 4, 4, 0, 4, 0, 3, 0, 5, 6, 1, 6, 5, 3, 4, 2], [1, 1], [2, 0, 0, 1, 3, 3, 2, 1, 1, 1, 0, 3, 2, 2, 2, 2, 0, 3, 0, 1, 2, 3, 2, 3, 2, 3, 1, 3, 0, 2, 3, 3, 1, 1, 2, 3, 2, 3, 2, 3, 3, 3, 0, 0, 1, 2, 2, 1, 2, 0, 0, 3, 3, 2, 1, 0, 3, 0, 0, 1, 0, 2, 3, 3, 1, 0, 2, 3, 0, 3, 0, 0, 1, 0, 0, 3, 2, 1, 0, 0, 1, 3, 0, 2, 1, 1, 3, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 2, 1, 1, 1, 1, 2, 1, 0, 1, 2, 1, 2, 2, 0, 1, 0, 2, 0, 2, 1, 1, 2, 2], [2, 0, 1, 1, 2, 2, 1, 0, 2, 0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nloopBreak% = 0\\nwhile mod(i1,res0) == int(6.0):{:\\nin2 *= min(min(( int(2.0) + int(2.0) ), int(1.0)), i1)\\nif ( ( True or False ) or b2 ):{:\\nloopBreak% = 0\\nwhile not abs(mod(mod(( divInt(i0,max(i0, int(0.0))) - ( max(divInt(max(( max(int(3.0), abs(i1)) - mod(max(min(int(5.0), int(9.0)), divInt(max(mod(abs(mod(max(abs(abs(in2)), in1),int(5.0))),divInt(( int(5.0) * ( in0 * i0 ) ),min(max(divInt(int(6.0),i2), min(i2, in1)), int(0.0)))), in1),divInt(abs(min(int(9.0), i0)),( abs(in1) - max(i0, in0) )))),int(3.0)) ), i0),in2), max(( int(2.0) + res0 ), i1)) * int(2.0) ) ),abs(res0)),divInt(int(0.0),int(9.0)))) \\l abs(in2):{:\\nin0 += in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = i2 != int(7.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 19, 19, 3, 3, 2, 10, 3, 7, 3, 1, 28, 2, 91, 21, 25, 10, 13]}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1], [2, 2, 1, 1, 1, 2, 1], [0, 1, 0], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1], [6, 8, 6, 4, 1, 9, 8], [4, 0, 4, 5, 3], [2, 1, 2], [], [1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0], [2, 1], [0], [1, 0], [1, 4, 6, 2, 4, 3, 3, 0, 0], [1], [0, 1, 0, 0, 1, 2, 0, 3, 0, 2, 2, 3, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0], [0, 2], [1, 1, 0], [1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\le int(6.0):{:\\nloopBreak% = 0\\nwhile in1 \\l res0:{:\\nb2 = int(8.0) \\le ( i2 - min(in1, mod(( abs(int(6.0)) - in0 ),in0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(4.0) != int(1.0)\\n:}else:{:\\nb2 = int(9.0) \\ge int(8.0)\\nif not True:{:\\ni0 += i0\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 7, 7, 5, 3, 0, 7, 5, 2, 1, 2, 9, 1, 20, 3, 2, 3, 1]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 2, 2, 0, 2, 0], [1, 1, 0, 0, 0, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 5, 3, 6, 7, 1, 8, 0, 8, 5, 9, 4, 4, 3, 1, 4, 6, 1, 4, 5, 2, 0, 7, 3, 1, 8, 1, 6, 3, 9, 4, 1, 8, 2, 9, 4, 5, 6, 0, 7, 7, 3, 5, 9, 6, 4, 8, 2, 5, 9], [0, 0, 0, 5], [0], [0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0], [1, 0, 3, 2, 1], [0, 0], [1, 0, 0], [0, 5, 1, 6, 1, 2, 6, 5, 5, 5, 3, 5, 3, 0, 1, 1, 6, 5, 3, 4, 2, 4, 2, 4, 6, 1, 3, 1, 1, 6, 5, 3, 0, 4, 2, 3, 6, 5, 4, 3, 6, 5, 3, 1, 3, 1, 5, 2, 3, 6, 5, 3, 1, 5, 1, 4, 2, 6, 5, 4, 3, 0, 3, 6, 6, 4], [0, 1, 1], [2, 0, 1, 1, 1, 3, 2, 0, 2, 2, 3, 2, 3, 3, 0, 3, 1, 2, 2, 2, 2, 1, 2, 0, 0, 1, 0, 1, 2, 2, 0, 1, 2, 3, 2, 2, 2, 1, 1, 0, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 0, 3, 1, 3, 2, 0, 0, 3, 3, 1, 0, 1, 2, 1, 0, 2, 0, 2, 1, 1, 1, 1, 2, 0, 2, 3, 3, 1, 2, 2, 0, 2, 2, 0, 1, 1, 1, 1, 0, 2, 0, 0, 2, 1, 3, 3, 2, 2, 2, 3, 3, 2, 0, 2, 2, 0, 2, 3, 3, 2, 3, 3, 2, 2, 3, 0, 1, 3, 1, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 3, 0, 2, 3, 3, 2, 2, 1, 0, 2, 0, 1, 1, 0, 1, 3, 3, 1, 3, 3, 2, 1, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 3, 1, 1, 2, 0, 0, 3, 0, 2, 0, 0, 3, 2, 1, 0, 2, 3, 0, 0, 0, 1, 3, 2, 0, 2, 0, 2, 0, 0, 2, 1, 0, 0, 1, 0, 3, 2, 3, 0, 2, 3, 2, 2, 1, 1, 3, 1, 0, 3, 1, 2, 3, 1, 2, 2, 1, 3, 0, 0, 3, 1, 1, 1, 2, 1, 0, 2, 2, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 2, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 0, 1, 0, 0, 1, 2, 1, 1, 2, 0, 2, 2, 0, 2, 2, 1, 1, 2, 2, 1], [1, 0, 1, 1, 0, 2, 1, 0, 2, 1, 1, 0, 2, 0, 1, 1, 2, 2, 2, 0, 0, 2, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile b0:{:\\nif ( not True and ( i0 - int(4.0) ) \\l int(7.0) ):{:\\nin2 = int(5.0)\\n:}else:{:\\nif min(( i1 + ( mod(max(mod(min(abs(res0), max(int(3.0), mod(( mod(( int(6.0) - ( i1 - i2 ) ),int(7.0)) + res0 ),int(1.0)))),( ( in2 * int(8.0) ) - ( min(( ( mod(int(0.0),int(8.0)) + in2 ) * max(abs(min(in2, max(in0, min(max(min(min(in2, min(int(5.0), abs(mod(in0,i0)))), abs(min(int(9.0), i1))), int(4.0)), mod(int(4.0),i1))))), mod(res0,( int(3.0) - int(1.0) ))) ), int(4.0)) - int(6.0) ) )), divInt(in2,( min(abs(int(1.0)), mod(( in0 + ( ( in1 * int(4.0) ) + int(5.0) ) ),int(2.0))) - int(0.0) ))),i2) - mod(in1,i2) ) ), divInt(int(7.0),abs(abs(mod(( ( abs(min(( in1 * ( mod(res0,divInt(max(abs(divInt(abs(min(divInt(( min(i1, int(3.0)) * min(int(1.0), divInt(mod(( divInt(mod(in0,mod(i1,mod(i1,res0))),divInt(in2,min(in0, mod(max(min(mod(( int(8.0) * i0 ),( in1 + int(1.0) )), int(6.0)), i2),int(3.0))))) + min(max(int(9.0), abs(max(( int(4.0) * mod(in0,( res0 - in2 )) ), int(1.0)))), in1) ),in0),res0)) ),in2), max(int(8.0), int(2.0)))),divInt(in0,i1))), abs(in0)),( i1 - in2 ))) - min(mod(int(9.0),i2), divInt(abs(in0),res0)) ) ), in2)) - int(4.0) ) + abs(mod(in0,( i1 - ( in2 - i1 ) ))) ),divInt(int(5.0),in1)))))) \\l i2:{:\\nif int(6.0) \\l res0:{:\\nin2 *= min(( abs(in1) - divInt(abs(divInt(mod(int(0.0),int(7.0)),max(int(7.0), in0))),max(int(3.0), divInt(abs(int(5.0)),mod(( int(9.0) - abs(i0) ),in0)))) ), max(int(6.0), int(4.0)))\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(8.0) != ( int(2.0) - res0 ):{:\\nres0 *= ( ( int(5.0) - int(9.0) ) + in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 6, 3, 51, 51, 4, 1, 1, 9, 4, 5, 2, 3, 66, 3, 235, 71, 50, 36, 37]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 5, 6, 5, 6, 6, 6, 0, 4, 4, 4, 8, 8, 8, 1, 5, 2], [2, 5], [1, 1], [0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0], [3, 3, 2, 3, 1, 1, 1], [1, 0, 1], [], [0, 0, 0, 1, 1, 5, 4, 2, 3, 3, 0], [], [2, 1, 3, 3, 2, 3, 0, 3, 2, 1, 2, 2, 1, 2, 0, 3, 1, 0, 2, 0, 2, 2, 2, 2, 3, 2, 3, 1, 3, 3, 3, 1, 0, 3, 1, 1, 1, 1, 3, 0, 1, 0, 1, 0, 3, 1, 1, 1, 3, 1, 3, 2, 0, 2, 0, 0, 2, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0], [0, 1, 0, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( int(1.0) + min(max(( min(i0, max(divInt(int(4.0),mod(divInt(int(5.0),( i0 - abs(int(6.0)) )),i0)), divInt(i1,( ( mod(( abs(( abs(int(5.0)) + min(min(max(int(6.0), i1), abs(int(6.0))), int(6.0)) )) - int(0.0) ),int(4.0)) - abs(in2) ) - int(4.0) )))) + in1 ), int(4.0)), i2) ) == min(int(8.0), int(8.0)) and ( not ( False or True ) and int(8.0) != max(int(1.0), max(mod(in0,divInt(in0,i0)), ( int(5.0) + int(2.0) ))) ) )\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 18, 18, 2, 2, 3, 9, 2, 7, 3, 0, 11, 0, 59, 15, 15, 8, 7]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 0, 1, 2, 1, 2, 2, 0, 0], [0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 3, 2, 9, 2, 3, 1, 7, 3, 4, 1, 9, 3, 1, 1, 1, 6, 5, 8, 3, 3, 7, 9, 3, 8, 4, 2, 3, 6, 2, 0, 7, 1, 4, 0, 0, 4, 8, 5, 2, 1, 0, 9, 2, 4, 4, 9, 1, 5, 7, 4, 0, 3, 9, 1, 7, 0], [2, 4, 0, 0], [0, 0, 0, 0], [1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0], [2, 3, 2, 3, 1, 0, 0, 1], [0, 0], [1, 1, 0, 1], [5, 6, 3, 0, 3, 4, 1, 2, 3, 1, 5, 4, 1, 3, 0, 5, 0, 3, 5, 3, 2, 0, 2, 0, 5, 6, 1, 6, 2, 3, 4, 6, 4, 6, 2, 5, 5, 6, 0, 2, 3, 1, 2, 5, 3, 6, 4, 6, 3, 4, 0, 1, 6], [0, 1, 0, 0, 0], [2, 0, 2, 3, 2, 3, 2, 3, 1, 0, 2, 1, 2, 2, 2, 0, 0, 0, 2, 1, 2, 1, 3, 0, 0, 2, 3, 1, 0, 1, 3, 3, 1, 3, 1, 1, 0, 2, 3, 0, 1, 2, 0, 1, 3, 3, 0, 0, 2, 3, 2, 2, 0, 1, 0, 1, 3, 1, 3, 1, 1, 0, 1, 3, 2, 3, 3, 0, 0, 0, 3, 2, 1, 2, 1, 1, 0, 2, 3, 1, 3, 0, 2, 2, 0, 2, 1, 1, 3, 3, 1, 2, 3, 2, 3, 1, 1, 0, 0, 2, 3, 3, 3, 3, 0, 1, 2, 3, 0, 1, 2, 3, 2, 0, 2, 2, 0, 2, 1, 1, 3, 1, 0, 1, 1, 3, 0, 3, 0, 0, 2, 1, 1, 3, 3, 0, 0, 3, 1, 0, 2, 2, 3, 1, 3, 2, 1, 0, 3, 1, 0, 3, 3, 2, 0, 3, 1, 2, 0, 0, 3, 2, 3, 0, 1, 2, 2, 3, 3, 3, 0, 0, 2, 2, 1, 0, 3, 2, 3, 1, 1, 2, 1, 0, 2, 3, 3, 3, 1, 2, 1, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 1, 1, 3, 1, 1, 1, 3, 2, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 2, 0], [0, 0, 2, 1, 0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not ( ( in2 + mod(max(( min(mod(min(int(5.0), res0),( int(8.0) + ( divInt(( in0 * i0 ),in0) - mod(int(3.0),( int(2.0) + min(in1, i1) )) ) )), ( min(int(9.0), i2) * int(2.0) )) * min(min(int(3.0), abs(int(1.0))), int(7.0)) ), in0),mod(max(i1, int(3.0)),divInt(in2,int(4.0)))) ) == abs(max(in1, i1)) or divInt(max(( mod(in0,int(1.0)) - i0 ), int(9.0)),abs(int(3.0))) \\le min(int(1.0), int(1.0)) )\\nif not ( True or b0 ):{:\\nin2 = i0\\n:}else:{:\\nin0 -= int(1.0)\\n:}\\nin2 = min(mod(min(min(in0, i2), i0),max(divInt(int(6.0),divInt(int(5.0),int(8.0))), i2)), mod(min(int(3.0), abs(i0)),divInt(( in2 * mod(int(3.0),int(7.0)) ),max(max(int(9.0), ( max(( min(int(3.0), int(8.0)) - res0 ), i1) * divInt(max(min(max(max(res0, int(4.0)), ( min(i2, int(2.0)) + mod(min(divInt(in0,divInt(( in1 + ( int(3.0) + int(6.0) ) ),max(int(2.0), res0))), int(0.0)),int(7.0)) )), min(in1, abs(res0))), i2),mod(int(1.0),int(4.0))) )), min(abs(in2), in2)))))\\nif max(int(0.0), res0) \\l mod(mod(max(int(0.0), abs(divInt(int(4.0),i0))),abs(int(8.0))),i2):{:\\nin0 = max(min(( i1 * min(int(5.0), mod(i2,in2)) ), max(divInt(max(in0, int(2.0)),( ( max(min(min(res0, in1), divInt(( int(1.0) - res0 ),abs(( abs(int(0.0)) * int(9.0) )))), divInt(int(2.0),in0)) - ( abs(abs(max(int(4.0), divInt(int(4.0),in1)))) + abs(abs(divInt(int(9.0),min(int(1.0), int(5.0))))) ) ) - min(( int(7.0) + int(4.0) ), int(0.0)) )), abs(int(3.0)))), int(9.0))\\n:}else:{:\\nif int(1.0) \\l min(mod(i0,int(7.0)), int(0.0)):{:\\nif b0:{:\\ni1 = res0\\n:}else:{:\\nb0 = True\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 4, 7, 58, 58, 4, 4, 2, 12, 4, 8, 2, 4, 53, 5, 214, 50, 58, 22, 29]}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 0], [], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 6, 0, 3, 2, 4, 0, 3], [3, 2, 0], [2, 2, 0], [], [1, 1, 1], [0, 0, 0], [], [], [], [5, 4, 6, 2, 6, 4, 3, 4, 5, 0], [0], [2, 2, 0, 3, 3, 2, 3, 0, 3, 2, 0, 1, 3, 0, 1, 2, 0, 1, 1, 1, 3, 1, 3, 0, 1, 0, 3, 3, 3, 2, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 2, 1, 1, 0, 2, 2, 2, 1, 2], [1, 1, 1, 2, 0], [0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( ( in1 - min(abs(( max(res0, max(( i2 - int(0.0) ), min(res0, int(1.0)))) - ( in1 * int(6.0) ) )), int(0.0)) ) + int(3.0) )\\nb2 = abs(int(2.0)) \\ge abs(in0)\\nb2 = int(4.0) == in1\\nb0 = abs(max(abs(divInt(int(0.0),in2)), i0)) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 9, 9, 3, 3, 0, 3, 3, 0, 0, 0, 10, 1, 34, 6, 10, 5, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 8, 6, 2, 9, 8, 8, 9, 8], [4], [2], [], [1], [0], [], [], [], [4, 6, 4, 4, 5, 3, 1, 5, 1, 6, 2, 5, 1, 2], [], [3, 2, 2, 2, 3, 2, 0, 3, 0, 3, 1, 1, 0, 0, 3, 1, 2, 3, 1, 1, 0, 3, 1, 2, 2, 0, 3, 3, 2, 1, 2, 3, 0, 3, 1, 1, 2, 0, 3, 0, 3, 0, 3, 2, 0, 1, 0, 3, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 2, 1, 2, 0, 2, 0, 1, 0, 0, 2, 1], [0, 0, 0, 1, 2, 1, 2], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(divInt(( ( max(( in1 + min(res0, min(int(5.0), int(5.0))) ), in1) + in1 ) + abs(int(8.0)) ),divInt(max(int(6.0), int(2.0)),in2)), abs(int(9.0))) \\le ( ( in0 - min(abs(mod(int(8.0),( min(i1, max(int(8.0), int(9.0))) * divInt(in2,min(i1, min(res0, abs(( i2 - int(8.0) ))))) ))), in2) ) * max(i1, i2) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 10, 10, 1, 1, 0, 1, 1, 0, 0, 0, 14, 0, 50, 11, 15, 7, 4]}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 1, 1, 2, 0], [0], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [7, 8, 0, 5, 0, 1], [5, 3, 4], [0, 0, 0, 0, 0], [], [1, 0, 0, 1, 1, 0], [0, 0, 0], [2, 1, 0], [0], [0], [3, 4, 3, 2, 0, 0, 6], [], [2, 3, 0, 3, 2, 0, 1, 2, 2, 1, 0, 1, 0, 3, 0, 0, 1, 3, 1, 3, 1, 0], [0, 0, 1, 0], [1, 1, 0, 2, 2], [1, 0, 0], [1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( max(in0, max(( in1 - int(7.0) ), mod(( int(8.0) + in0 ),int(0.0)))) + i2 ) != min(i0, i0)\\nb0 = not True\\nb0 = int(5.0) \\ge abs(int(0.0))\\nif abs(int(1.0)) \\le res0:{:\\nb0 = b0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 6, 6, 3, 5, 0, 6, 3, 3, 1, 1, 7, 0, 22, 4, 5, 3, 1]}, {"genotype": [[0], [1], [0], [], [0], [1], [7], [3], [0], [], [1], [0], [], [], [], [4, 3], [], [0, 3, 1, 0], [], [0], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = in1 \\ge min(int(7.0), in0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 2, 6, 5, 7, 9, 1, 6, 8, 0, 9, 1, 3, 0, 1, 9, 5, 0, 7, 3, 2, 5, 7], [5, 3, 4, 3, 4, 3, 0, 4], [2, 2, 1, 0, 1, 1, 2, 0], [1], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 1, 0], [0], [1, 1, 1, 1], [1, 3, 5, 2, 4, 5, 2, 5, 1, 5, 1, 1, 2, 6, 4, 5, 4, 6, 5, 6, 4, 5, 3, 5, 1, 0, 0, 4, 5, 3], [1, 0, 1, 1], [1, 0, 2, 3, 1, 3, 3, 3, 0, 3, 1, 2, 0, 1, 0, 1, 2, 0, 0, 3, 2, 0, 0, 1, 1, 0, 1, 3, 3, 1, 3, 2, 2, 0, 3, 3, 1, 1, 1, 2, 0, 2, 3, 2, 2, 3, 0, 1, 0, 0, 2, 0, 3, 0, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 3, 1, 2, 2, 0, 2, 3, 2, 2, 3, 1, 1, 0, 1, 3, 1, 0, 2, 1, 3, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 0, 2, 1, 0, 1, 1, 2, 1], [0, 2, 2, 2, 2, 2, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(5.0) != i1\\nin0 += divInt(abs(int(4.0)),max(min(abs(in2), max(int(2.0), mod(i2,int(6.0)))), in1))\\nif int(5.0) \\ge ( in2 * i2 ):{:\\nloopBreak% = 0\\nwhile min(divInt(in2,i1), int(7.0)) \\le int(9.0):{:\\nif in2 \\ge int(1.0):{:\\nif b2:{:\\ni1 = max(abs(int(6.0)), abs(divInt(divInt(i1,max(min(int(8.0), int(0.0)), int(9.0))),( i2 * ( abs(mod(divInt(min(res0, int(1.0)),in1),in2)) * ( in1 * abs(res0) ) ) ))))\\n:}else:{:\\nloopBreak% = 0\\nwhile int(3.0) \\le int(0.0):{:\\nin2 *= res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nif ( b1 or True ):{:\\nin1 -= int(1.0)\\n:}else:{:\\nb0 = in2 \\ge in0\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in2 \\l i1\\n:}else:{:\\nb1 = b2\\nb0 = max(i0, min(int(9.0), mod(divInt(i0,mod(max(( ( max(int(5.0), int(0.0)) - in1 ) - int(7.0) ), abs(int(3.0))),in2)),mod(int(2.0),max(int(5.0), int(7.0)))))) \\le in0\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 6, 9, 24, 24, 8, 8, 1, 13, 8, 5, 1, 4, 30, 4, 87, 17, 20, 9, 11]}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 1], [1, 1], [1, 0], [1, 1, 1, 1, 1, 1], [3, 9, 2, 0, 8, 3], [0, 2, 4], [1], [0, 1], [0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0], [1, 2, 3, 3, 1], [1, 0], [], [0, 6, 3, 5, 1, 2], [0], [1, 0, 3, 1, 3, 3, 2, 1, 1, 3, 0, 0, 3, 0, 3, 1, 0, 1], [1], [1, 2, 2, 0, 2, 1], [], [1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile int(3.0) \\l i0:{:\\nres0 = max(int(9.0), abs(abs(mod(int(2.0),int(0.0)))))\\nb1 = not ( min(in0, in2) == abs(i1) and ( True or max(int(8.0), i2) \\le int(3.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 6, 6, 3, 1, 2, 8, 3, 5, 2, 0, 6, 1, 18, 1, 6, 0, 1]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1], [9], [2, 5], [1, 0], [1], [1, 0, 0, 1, 0], [0, 0], [2, 3, 1], [1], [], [4, 5, 2, 4, 5], [], [0, 1, 3, 0, 0, 3, 0, 0], [], [0, 0], [], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in1 == int(9.0)\\nb0 = not ( min(in2, i2) != min(in1, in2) or False )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 2, 2, 1, 5, 2, 3, 1, 0, 5, 0, 8, 0, 2, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 0], [1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 0, 2, 8, 4, 2, 5, 8, 6, 5, 2, 5], [5, 3], [0], [], [0, 0, 1, 1], [0, 0], [2, 2], [], [], [1, 3, 0, 2, 3, 2, 5, 2, 5, 1, 5, 5, 2, 3], [1, 1], [0, 0, 0, 2, 3, 2, 2, 2, 1, 0, 2, 3, 1, 1, 2, 3, 2, 2, 3, 2, 1, 1, 0, 0, 0, 1, 3, 3, 0, 3, 2, 0, 1, 3, 2, 1, 3, 0, 3, 1, 2, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 1, 2, 2, 2, 0, 1, 2, 1, 2], [0, 1, 1, 1, 0, 1, 2], [1, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not i1 != in0:{:\\nb0 = i0 \\ge ( max(mod(( ( int(4.0) + i2 ) - ( max(int(0.0), int(2.0)) - divInt(abs(divInt(divInt(abs(( int(8.0) - int(4.0) )),in0),i2)),in2) ) ),int(2.0)), abs(min(i2, max(divInt(in2,int(5.0)), abs(divInt(int(8.0),max(i1, abs(int(6.0))))))))) + mod(int(5.0),in2) )\\nin2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 *= int(25.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 12, 12, 2, 1, 0, 4, 2, 2, 0, 0, 14, 2, 45, 12, 10, 7, 7]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1], [2, 2, 2, 0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 3, 2, 4, 9, 3, 3, 4, 2, 8, 8, 8, 8, 1, 0, 4, 4, 3, 7, 9, 1, 2, 9, 7, 9, 1, 7, 7, 9, 9, 7, 3, 6, 3, 3, 0], [1, 5, 5, 0, 5, 1], [1, 1], [0], [1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [3], [], [0], [2, 0, 4, 4, 2, 2, 5, 5, 2, 1, 0, 4, 2, 2, 6, 1, 1, 0, 4, 2, 4, 0, 4, 4, 2, 3, 6, 4, 1, 5, 4, 6, 4, 0, 4], [1], [2, 3, 0, 1, 3, 0, 1, 3, 2, 3, 1, 2, 0, 1, 3, 3, 3, 3, 0, 1, 0, 3, 3, 1, 3, 2, 2, 0, 0, 3, 0, 0, 2, 0, 3, 3, 3, 1, 2, 0, 0, 2, 1, 1, 3, 2, 3, 0, 2, 3, 1, 1, 2, 1, 3, 2, 3, 3, 2, 2, 3, 1, 0, 2, 0, 2, 0, 2, 2, 1, 0, 3, 1, 0, 3, 1, 2, 2, 0, 0, 1, 1, 2, 3, 1, 3, 2, 0, 3, 1, 2, 0, 1, 0, 1, 3, 2, 3, 0, 3, 3, 1, 1, 2, 2, 0, 1, 2, 3, 3, 3, 3, 2, 0, 2, 1, 1, 3, 3, 1, 2, 3, 1, 2, 0, 1, 0, 2, 0, 3, 0, 1, 2, 1, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 2, 0, 0, 2, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 2, 1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 1, 2, 2], [1, 2, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2, 2, 2, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(abs(i2),int(6.0)) \\g abs(i0):{:\\nloopBreak% = 0\\nwhile int(9.0) != min(mod(min(int(3.0), ( in1 - int(2.0) )),abs(max(abs(abs(in1)), int(4.0)))), i2):{:\\nif ( abs(abs(int(9.0))) != max(( ( i2 * in2 ) * abs(in2) ), i2) and ( i1 * max(min(min(int(3.0), divInt(i0,in1)), mod(int(3.0),int(4.0))), min(mod(min(i2, mod(abs(int(2.0)),int(8.0))),( int(8.0) * abs(divInt(min(min(mod(mod(min(int(8.0), i2),( res0 * ( i1 - divInt(mod(int(8.0),i1),abs(int(1.0))) ) )),i0), min(int(0.0), divInt(( in1 + i2 ),int(4.0)))), int(4.0)),( max(int(3.0), abs(mod(in1,max(int(7.0), divInt(i0,int(9.0)))))) - in1 ))) )), int(1.0))) ) \\l max(divInt(abs(in1),abs(min(int(2.0), int(9.0)))), ( ( i2 - int(7.0) ) * ( min(max(max(min(( in0 * divInt(int(9.0),int(1.0)) ), min(max(int(7.0), divInt(abs(int(7.0)),divInt(res0,int(9.0)))), in1)), ( i1 * abs(in2) )), int(9.0)), ( int(7.0) * int(3.0) )) - mod(in1,res0) ) )) ):{:\\nb1 = in1 != i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 += int(6.0)\\nb1 = divInt(int(3.0),int(3.0)) \\g int(0.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 37, 37, 6, 2, 1, 7, 6, 1, 0, 1, 35, 1, 145, 35, 39, 16, 20]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 2, 0, 1, 1], [1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 1, 7, 6, 8, 4, 4, 2, 5, 3, 3, 0, 6, 6, 8, 5, 9, 3, 2], [5], [], [], [1, 0], [0], [1], [1], [], [2, 0, 4, 1, 3, 6, 3, 6, 5, 4, 0, 2, 1, 6, 6, 4, 5, 3, 0, 6, 5, 2, 1], [0, 0, 0], [1, 2, 0, 1, 2, 1, 0, 3, 1, 3, 2, 2, 2, 3, 2, 0, 2, 3, 2, 0, 2, 1, 0, 0, 2, 1, 1, 1, 3, 3, 0, 3, 0, 0, 2, 1, 3, 1, 2, 1, 2, 3, 0, 2, 2, 0, 3, 0, 2, 1, 0, 3, 2, 2, 2, 1, 2, 1, 0, 2, 1, 0, 2, 3, 1, 3, 0, 3, 2, 1, 0, 0, 3, 3, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 2, 0, 2, 1, 2, 1, 1, 0, 2], [2, 1, 1, 1, 1, 2, 2, 2, 2, 0, 2], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(0.0) != ( i2 * int(7.0) ):{:\\nloopBreak% = 0\\nwhile False:{:\\ni0 = ( int(1.0) - in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(int(7.0), min(( mod(mod(max(divInt(in0,divInt(max(( res0 - divInt(int(6.0),in0) ), res0),( int(8.0) - int(4.0) ))), int(4.0)),min(min(in2, max(in1, i0)), ( int(2.0) - abs(int(5.0)) ))),( int(3.0) * divInt(min(i2, ( divInt(i1,abs(res0)) * divInt(int(3.0),res0) )),max(( mod(divInt(int(0.0),( int(6.0) * in1 )),divInt(int(6.0),in2)) * mod(abs(int(8.0)),max(in0, max(( int(5.0) + i0 ), res0))) ), min(abs(int(9.0)), in2))) )) * int(3.0) ), i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 20, 20, 1, 0, 0, 2, 1, 1, 1, 0, 23, 3, 79, 23, 16, 11, 12]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [0, 1], [0], [1, 1, 1, 1, 1], [3, 4, 1, 3, 8], [5], [2, 2, 2], [], [0, 0, 1], [0], [0, 0], [], [0], [1, 0, 5, 1, 0, 5, 0, 6], [], [3, 0, 0, 2, 3, 2, 1, 3, 2, 2, 2, 0, 3, 0, 1, 0, 2, 0, 0, 2, 1, 3, 2, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1], [1, 2, 0, 0, 2], [0, 2, 0, 2, 2], [1, 0, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = max(i1, i0) != mod(abs(( int(3.0) + min(( ( ( in2 * min(i1, int(4.0)) ) + i0 ) * ( in2 * i0 ) ), divInt(int(1.0),abs(divInt(int(3.0),res0)))) )),int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 5, 5, 1, 3, 0, 3, 1, 2, 0, 1, 8, 0, 26, 8, 5, 5, 3]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1], [2], [5], [2], [], [0, 1], [0], [2], [], [], [1, 0, 4, 4, 3], [0], [3, 0, 0, 2, 3, 0, 3, 1, 3, 0], [1], [2, 2, 1, 2], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not abs(i1) != i0\\nin1 = mod(abs(in1),max(int(2.0), abs(in0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 5, 1, 10, 1, 4, 0, 1]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [0, 1, 0, 1], [8, 0, 4, 9], [1], [2], [], [1], [0], [], [], [], [3, 3], [1], [1, 1, 0], [], [], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= int(80.0)\\nb2 = int(49.0) \\g in0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 2, 1], [0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 3, 8, 2, 3, 0, 0, 6, 0, 9, 0, 9, 3, 7, 1, 1, 8, 2, 7, 7, 0, 3, 3, 8, 9, 9, 5, 7, 9, 2, 0, 9, 6, 1, 7, 3, 5, 9, 8, 2, 6, 1, 7, 3, 0, 5], [1, 2, 4, 0, 4, 5, 4, 1, 1], [0, 2, 0, 2, 0, 0, 1], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 2, 2, 1], [0], [1, 0], [4, 3, 1, 3, 5, 5, 5, 6, 1, 1, 2, 6, 0, 0, 2, 1, 2, 1, 1, 3, 1, 3, 2, 6, 4, 0, 4, 3, 5, 6, 1, 2, 2, 2, 4, 2, 6, 5, 4, 2, 1, 2, 2, 4, 2, 4, 3, 3, 1, 1, 3, 5, 2, 2, 0, 2, 1, 4, 3, 1], [0, 1, 0, 1], [1, 0, 3, 0, 3, 1, 2, 1, 0, 0, 2, 0, 1, 0, 2, 3, 2, 0, 1, 0, 1, 2, 0, 2, 3, 0, 2, 2, 1, 3, 1, 1, 2, 2, 3, 0, 1, 0, 1, 3, 3, 2, 2, 3, 2, 0, 2, 0, 0, 3, 0, 2, 3, 3, 1, 1, 1, 2, 1, 3, 2, 1, 0, 1, 1, 0, 0, 3, 2, 2, 2, 0, 3, 0, 0, 3, 1, 3, 3, 0, 2, 1, 2, 1, 1, 1, 0, 3, 3, 1, 3, 3, 0, 0, 3, 1, 3, 2, 2, 0, 3, 0, 0, 1, 3, 3, 1, 3, 2, 0, 0, 1, 3, 2, 1, 1, 1, 1, 2, 0, 1, 2, 0, 3, 3, 3, 2, 0, 3, 0, 3, 1, 2, 2, 3, 3, 3, 2, 0, 2, 0, 0, 3, 3, 1, 3, 0, 1, 1, 3, 0, 1, 2, 0, 1, 2, 0, 2, 2, 3, 1, 3, 2, 1, 1, 0, 1, 0, 1, 2, 0, 0, 3, 0, 2, 3, 2, 0, 2, 0, 3, 1, 3, 2, 0, 1, 0, 3, 2, 0, 3, 2, 2, 0, 0, 1, 2, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 2, 0, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 2, 1, 0, 0, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 0, 0, 0, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 2, 1, 1, 2, 0, 1, 2], [2, 2, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 1, 1, 2, 1, 2, 0, 2, 2, 0, 2, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not b2\\nin1 = int(6.0)\\nb0 = in0 \\g max(i1, abs(int(4.0)))\\nif ( int(3.0) * in0 ) == in2:{:\\nb2 = mod(in2,int(8.0)) \\le in2\\nres0 *= ( min(divInt(i1,int(2.0)), i1) - int(3.0) )\\nb0 = not not ( i2 * ( max(res0, divInt(mod(int(0.0),max(int(0.0), int(6.0))),( mod(min(i0, int(0.0)),i0) - int(9.0) ))) - max(abs(( ( min(divInt(i2,divInt(i1,i2)), min(i1, divInt(min(abs(int(0.0)), int(9.0)),int(3.0)))) + ( int(7.0) - max(divInt(int(1.0),i1), int(1.0)) ) ) - int(8.0) )), in0) ) ) \\l i1\\n:}else:{:\\nloopBreak% = 0\\nwhile abs(( ( divInt(in0,max(i2, res0)) - min(int(2.0), min(max(in1, mod(int(7.0),( int(7.0) + int(0.0) ))), int(3.0))) ) * i0 )) \\le abs(max(int(3.0), max(abs(in1), in0))):{:\\nin2 = max(int(8.0), abs(( ( res0 + abs(i1) ) * i2 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not int(9.0) != abs(abs(int(9.0)))\\nloopBreak% = 0\\nwhile not max(divInt(i2,i2), int(5.0)) \\le min(mod(int(7.0),int(9.0)), int(2.0)):{:\\nif True:{:\\nin1 -= int(0.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile divInt(i2,int(9.0)) \\g divInt(res0,min(min(abs(divInt(in2,abs(in1))), max(int(6.0), mod(( max(min(max(( i2 + ( i1 - i2 ) ), max(min(int(1.0), min(i2, int(7.0))), int(3.0))), min(in1, int(5.0))), mod(i2,int(9.0))) - divInt(in1,( ( max(int(8.0), abs(( int(2.0) * int(6.0) ))) - in0 ) * int(1.0) )) ),in0))), int(7.0))):{:\\nb1 = ( i1 + i1 ) \\g max(in0, ( max(mod(in2,( i2 * abs(int(3.0)) )), min(( i2 * int(0.0) ), i0)) + max(mod(i2,abs(( ( i1 * in1 ) + int(5.0) ))), ( in0 - i1 )) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 5, 10, 47, 47, 9, 7, 0, 16, 9, 7, 1, 2, 60, 4, 199, 47, 49, 28, 21]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1], [0, 4, 5, 7, 2], [0], [2, 1], [], [1, 0], [0], [1], [1], [], [5, 0, 3, 0, 4, 0, 5, 4, 3], [], [2, 0, 1, 2, 3, 3, 3, 3, 0, 0, 0, 3, 2, 0, 2, 2, 1, 3, 0, 0, 3, 2, 0, 3, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2, 0], [0], [1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(in2,int(0.0)) \\l ( min(max(abs(min(i0, in0)), i0), min(mod(in1,mod(divInt(int(4.0),max(i0, in2)),abs(mod(in1,min(int(5.0), int(7.0)))))), int(2.0))) + in0 )\\nb1 = False\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 2, 0, 2, 1, 1, 1, 0, 9, 0, 28, 6, 8, 1, 5]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1, 1], [4, 0, 0], [3], [], [], [1], [0], [], [], [0], [0, 1, 2, 3, 5], [1], [2, 2, 3, 1, 0, 0, 1, 3, 1, 3, 0, 0], [1, 1], [0, 2, 1], [0], [1, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(mod(min(int(4.0), i0),i1),int(0.0)) \\ge abs(int(0.0)):{:\\ni2 += max(in0, in2)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 1, 0, 0, 1, 1, 0, 0, 1, 5, 1, 12, 2, 3, 1, 2]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1], [2, 0, 0, 2, 1, 2, 0, 1], [0, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 8, 3, 0, 7, 8, 1, 5], [0, 3], [0, 2], [1], [1, 0, 0, 0, 0, 1], [0, 0], [3, 1, 0, 1], [1, 0], [0, 0], [4, 3, 1, 5, 0, 5, 1, 2, 1, 6, 6, 3, 5, 2, 1, 0, 2, 1, 2, 4, 3], [1, 1, 1, 0], [0, 3, 0, 2, 1, 3, 1, 1, 2, 3, 2, 0, 3, 3, 3, 1, 1, 0, 2, 2, 2, 2, 1, 2, 0, 2, 3, 0, 0, 2, 0, 0, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0], [2, 2, 1, 1, 2, 1, 2, 1], [1, 2, 1, 1, 2, 0, 0, 1, 2, 1], [0, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in1 \\l abs(in0):{:\\ni1 -= ( int(3.0) * abs(int(2.0)) )\\nin2 -= int(8.0)\\nloopBreak% = 0\\nwhile ( False or b0 ):{:\\ni0 -= divInt(max(divInt(in2,max(abs(max(int(3.0), int(0.0))), i1)), divInt(( ( ( int(7.0) * divInt(i2,divInt(abs(i1),res0)) ) + ( res0 + in0 ) ) - in2 ),max(divInt(i2,i1), divInt(i0,i2)))),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif True:{:\\ni2 = in1\\nb2 = in0 \\ge ( ( int(8.0) * int(1.0) ) - int(5.0) )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 9, 9, 2, 2, 1, 6, 2, 4, 2, 2, 21, 4, 48, 14, 8, 10, 7]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1], [6, 2, 4, 2], [], [], [], [], [], [], [], [], [0, 2, 6], [1], [3, 2, 3, 1, 2, 1, 0, 2, 1, 0, 1], [0, 0, 1], [1, 1], [2, 2, 2], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= max(( max(int(6.0), ( int(2.0) * i2 )) * divInt(int(4.0),res0) ), int(2.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 11, 3, 2, 3, 1]}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 0, 0], [0], [1, 1, 0], [1, 1, 1, 1, 1, 1], [6, 1, 1, 9, 3, 6], [3], [1], [], [0, 1, 0], [0], [2, 1], [0], [1], [2, 3, 5, 6, 3, 5, 3, 6, 3], [0, 1], [3, 2, 2, 1, 0, 1, 1, 1, 3, 2, 0, 0, 3, 2, 1, 0, 0, 3, 0, 2, 0, 1], [0, 0, 1, 1, 0], [1, 0, 1, 1], [1, 0, 1, 2], [0, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not max(( ( int(6.0) - i2 ) + int(1.0) ), int(1.0)) \\ge int(9.0):{:\\nin0 = min(divInt(in2,res0), max(divInt(int(3.0),in0), in2))\\n:}else:{:\\nin0 -= max(res0, ( in0 * int(6.0) ))\\nb1 = True\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 6, 6, 1, 1, 0, 3, 1, 2, 1, 1, 9, 2, 22, 5, 4, 4, 2]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 2, 1, 1, 1], [1, 1], [0, 0, 1], [1, 1, 1, 1, 1, 1], [2, 6, 8, 6, 8, 9], [4, 3], [2, 0, 1], [], [0, 0, 0, 1, 1], [0, 0], [1, 2, 0], [0], [], [6, 5, 2, 4, 3, 1, 5, 6, 1, 5, 5], [0], [3, 1, 2, 3, 3, 3, 3, 2, 3, 0, 0, 0, 3, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 3, 1, 2, 0, 0], [1, 1, 0, 0, 1, 0], [1, 0, 0, 2, 2, 0, 2, 1], [0, 1, 2], [0, 0, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile not b2:{:\\nb0 = max(int(2.0), divInt(min(min(abs(abs(divInt(min(res0, in2),i2))), abs(int(6.0))), ( int(8.0) + ( mod(int(6.0),in1) - in0 ) )),i1)) \\le in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(8.0) \\ge res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(int(9.0), ( in2 * in2 ))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 6, 6, 2, 3, 0, 5, 2, 3, 1, 0, 11, 1, 30, 6, 8, 3, 3]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 1, 0, 0], [0], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 1, 8, 9, 0, 7, 1, 0, 3, 0, 5, 2, 3, 4, 8, 0, 7, 6, 2, 2, 4, 2], [1, 2, 2], [1, 0], [], [0, 1, 1, 1], [0, 0, 0], [2], [], [1], [4, 4, 5, 5, 4, 5, 3, 2, 0, 5, 3, 5, 1, 5, 6], [0, 0], [1, 1, 1, 0, 3, 1, 3, 2, 3, 3, 3, 0, 1, 1, 3, 2, 3, 0, 3, 2, 1, 2, 1, 0, 3, 2, 1, 3, 3, 3, 0, 1, 2, 3, 3, 2, 0, 1, 2, 3, 1, 1, 0, 0, 2, 1, 2, 3, 2, 0, 0, 3, 1, 3, 1, 3, 0, 2, 1, 0, 2, 1, 3, 3, 1, 1, 1, 1, 2, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 2, 1, 2, 0, 1, 2, 1, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0], [1, 1, 2, 0, 1, 1, 1, 2], [1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not int(9.0) \\g int(6.0):{:\\nin1 = int(1.0)\\nin1 = in2\\nb1 = min(int(8.0), min(( abs(min(abs(in2), int(9.0))) - int(0.0) ), max(mod(abs(in1),min(( int(7.0) - mod(int(1.0),in2) ), max(divInt(int(0.0),abs(max(max(in0, int(3.0)), mod(abs(abs(divInt(i2,int(0.0)))),( min(int(5.0), int(2.0)) * i0 ))))), in2))), ( int(3.0) + divInt(min(( in0 - in2 ), max(int(4.0), abs(int(8.0)))),min(i1, ( int(0.0) - in2 ))) )))) == ( int(7.0) - max(min(int(6.0), int(2.0)), int(2.0)) )\\n:}else:{:\\nb0 = int(4.0) == ( int(2.0) * res0 )\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 23, 23, 3, 2, 0, 4, 3, 1, 0, 1, 15, 2, 71, 14, 21, 8, 6]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [7, 8, 5, 8, 4, 8, 3, 5, 1, 2], [4, 5], [0, 2], [], [0, 1, 1], [0, 0], [0], [], [0], [5, 1, 2, 1, 3, 3, 1, 4, 2], [1], [2, 2, 0, 3, 3, 3, 1, 2, 2, 2, 1, 3, 1, 0, 3, 3, 0, 0, 2, 0, 0, 0, 1, 2, 1, 1, 0, 1, 2, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0], [1, 1, 0, 2, 2, 0], [0, 2, 0], [0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nloopBreak% = 0\\nwhile ( divInt(in2,max(max(min(int(7.0), mod(mod(divInt(int(8.0),abs(int(5.0))),i1),abs(min(i2, i1)))), mod(in0,in0)), i1)) + int(8.0) ) \\le divInt(int(4.0),int(8.0)):{:\\nin1 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = int(35.0) != ( int(1.0) + int(2.0) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 10, 10, 2, 2, 0, 3, 2, 1, 0, 1, 9, 1, 31, 8, 6, 3, 6]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 6, 1], [0], [3, 0, 0], [], [1], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = max(res0, i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1], [0, 2, 2, 0, 1, 1, 1], [1, 0], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 7, 9, 9, 1, 9, 8, 2, 6, 7, 5], [4, 1, 3, 4], [1, 0, 1], [], [1, 1, 1, 0, 1, 0], [0, 0, 0, 0], [2, 1], [1], [0], [6, 1, 6, 3, 6, 6, 4, 6], [1, 0], [1, 1, 0, 3, 3, 3, 0, 2, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 3, 2, 0, 1, 3, 0, 1], [1, 1, 1, 0], [1, 0, 1, 2, 0], [2, 2], [0, 1, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= int(1.0)\\nloopBreak% = 0\\nwhile int(8.0) \\le i1:{:\\nif max(min(max(res0, divInt(mod(int(7.0),int(9.0)),int(9.0))), mod(int(1.0),int(9.0))), in0) \\g int(8.0):{:\\nb1 = int(2.0) \\ge int(6.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not res0 \\le abs(( res0 * int(7.0) ))\\nb1 = False\\nin1 = min(res0, int(5.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 12, 12, 4, 3, 0, 6, 4, 2, 1, 1, 8, 2, 27, 4, 5, 2, 3]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 5, 7, 0, 4, 0, 0, 9, 4, 9], [0], [1, 1], [], [0, 1], [0], [0], [], [], [4, 4, 0, 6, 6, 6, 5], [1], [3, 0, 2, 0, 3, 1, 3, 1, 1, 2, 1, 3, 2, 0, 2, 3, 3, 0, 2, 0, 3, 3, 2, 3, 1, 1, 1, 0, 3, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0], [1, 0, 2, 1, 1, 1, 0, 0, 2, 1], [1, 1, 1], [0, 0, 0, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = max(in1, divInt(in1,min(int(0.0), abs(int(3.0))))) \\l int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= divInt(int(7.0),max(divInt(res0,mod(max(max(res0, ( res0 - min(min(( abs(int(0.0)) - int(4.0) ), int(0.0)), in2) )), max(int(0.0), int(9.0))),int(4.0))), int(9.0)))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 11, 11, 1, 2, 0, 2, 1, 1, 0, 0, 7, 1, 33, 6, 10, 3, 4]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 9, 3, 8, 7, 8, 6, 8, 6, 7, 6, 3, 8, 9, 0, 7, 1, 7, 9, 0, 5, 3], [1], [], [], [1], [0], [], [], [], [2, 2, 1, 6, 5, 1, 3, 6, 4, 6, 0, 3, 2, 3, 2, 6, 5, 1, 5, 0, 2, 6, 1, 2], [1], [3, 3, 2, 1, 2, 2, 1, 2, 0, 3, 2, 2, 2, 2, 2, 0, 3, 2, 0, 1, 0, 1, 2, 3, 3, 1, 1, 1, 2, 2, 0, 3, 2, 3, 1, 1, 3, 3, 3, 0, 3, 1, 3, 2, 0, 0, 0, 1, 3, 1, 0, 3, 0, 3, 2, 0, 0, 3, 3, 2, 2, 0, 1, 1, 3, 0, 1, 0, 2, 2, 3, 0, 2, 2, 0, 2, 2, 0, 2, 2, 3, 2, 1, 1, 1, 0, 2, 1, 2, 0, 1, 1, 0, 2, 3, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [1, 1, 2, 2, 1, 1, 2, 0, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 2, 2], [0, 1, 2, 1, 1, 0, 0, 2, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(max(mod(int(3.0),divInt(( int(0.0) + mod(i2,abs(mod(divInt(divInt(( divInt(i2,abs(( i1 - int(9.0) ))) * res0 ),int(3.0)),divInt(max(max(int(8.0), int(7.0)), int(8.0)),divInt(divInt(in2,abs(divInt(min(int(6.0), int(8.0)),abs(abs(max(i1, abs(int(6.0)))))))),abs(divInt(in0,res0))))),in1))) ),int(7.0))), max(int(6.0), res0)), max(i0, min(divInt(in0,i2), max(min(mod(( in0 - int(3.0) ),int(8.0)), min(i2, int(9.0))), res0)))) \\g divInt(mod(min(in2, ( mod(i1,mod(( in2 - mod(mod(abs(( int(0.0) + int(7.0) )),int(1.0)),i0) ),mod(int(7.0),mod(i2,int(9.0))))) + int(0.0) )),res0),( abs(int(5.0)) * i1 )):{:\\ni2 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 23, 23, 1, 0, 0, 1, 1, 0, 0, 0, 24, 1, 98, 30, 22, 9, 22]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 2, 0, 0, 1, 0, 2, 1, 0, 1], [1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 5, 1, 5, 0, 7, 9, 2, 4, 8, 1, 9, 1, 1, 9, 9, 7, 3, 6, 8, 3, 9, 4, 1, 6, 7, 0, 8, 0, 3, 0, 6, 7, 6, 3, 8, 3, 6, 2, 2, 1, 9, 5, 9, 9, 4, 1, 6, 6, 7, 1, 1, 7, 6, 9, 6, 5, 4, 4, 4, 0, 4, 3, 2, 8, 4, 3, 7, 5, 3, 6, 2, 9, 2, 6, 9, 5, 5, 1, 9, 4, 2, 6, 1, 5, 0, 5, 4, 2, 3, 9, 6, 9, 2, 7, 0, 4, 6, 7, 0, 2, 1, 6, 5, 5, 6, 2, 3, 9, 0, 9, 4, 8, 3, 1, 1, 0, 4, 7, 3], [5, 3, 3, 2], [2, 2, 0], [1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0], [1, 2, 3, 3, 1, 2, 2, 1], [0, 1, 0], [1], [3, 6, 4, 1, 2, 5, 6, 6, 3, 0, 0, 0, 4, 3, 2, 4, 3, 5, 0, 5, 0, 3, 2, 3, 5, 6, 2, 1, 5, 6, 0, 5, 4, 4, 5, 4, 2, 6, 6, 4, 6, 5, 6, 0, 0, 5, 5, 2, 5, 1, 0, 4, 2, 3, 1, 0, 2, 0, 3, 2, 1, 3, 6, 5, 2, 4, 3, 2, 2, 5, 0, 3, 1, 3, 6, 6, 2, 3, 6, 6, 1, 0, 2, 1, 4, 3, 4, 1, 1, 1, 3, 6, 6, 2, 2, 4, 0, 4, 1, 6, 6, 4, 3, 3, 0, 1, 2, 2, 4, 1, 2, 6, 5, 4, 6, 0, 0, 1, 3, 5, 3, 5], [1, 1, 0, 1, 0], [3, 2, 1, 0, 0, 3, 2, 3, 1, 1, 2, 3, 0, 1, 1, 2, 3, 1, 0, 0, 2, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 2, 3, 0, 3, 2, 2, 1, 0, 2, 2, 1, 3, 2, 0, 0, 0, 0, 0, 3, 3, 3, 1, 2, 1, 2, 0, 2, 1, 2, 2, 0, 2, 3, 0, 0, 2, 2, 0, 0, 0, 3, 1, 2, 2, 0, 1, 1, 1, 3, 3, 3, 0, 0, 1, 0, 2, 3, 3, 1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 0, 0, 1, 0, 0, 3, 2, 0, 1, 1, 0, 3, 2, 1, 1, 2, 0, 2, 0, 0, 3, 0, 2, 0, 0, 1, 1, 2, 1, 1, 3, 0, 1, 3, 1, 2, 1, 1, 2, 0, 2, 2, 3, 1, 2, 0, 3, 3, 3, 3, 1, 2, 3, 1, 1, 3, 3, 3, 3, 2, 0, 3, 3, 2, 1, 1, 2, 2, 1, 0, 3, 2, 1, 0, 2, 2, 3, 1, 0, 3, 2, 0, 2, 1, 3, 0, 2, 2, 3, 2, 1, 3, 3, 3, 2, 0, 3, 1, 1, 2, 2, 3, 1, 3, 3, 3, 2, 2, 1, 3, 1, 0, 2, 3, 1, 2, 2, 0, 2, 1, 2, 1, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 3, 2, 2, 0, 1, 1, 2, 2, 2, 3, 3, 0, 1, 0, 2, 0, 1, 1, 3, 1, 1, 0, 0, 2, 3, 1, 2, 1, 0, 1, 1, 0, 2, 0, 2, 1, 3, 3, 2, 3, 3, 0, 3, 1, 2, 1, 3, 3, 0, 2, 3, 3, 0, 0, 2, 3, 1, 3, 2, 2, 2, 2, 0, 3, 0, 1, 0, 3, 1, 0, 2, 0, 1, 0, 3, 3, 1, 2, 2, 0, 3, 3, 0, 1, 1, 1, 3, 3, 2, 3, 2, 3, 3, 1, 1, 1, 0, 1, 3, 3, 3, 1, 1, 2, 3, 0, 2, 2, 0, 1, 2, 1, 2, 2, 3, 2, 2, 1, 0, 1, 1, 3, 3, 3, 2, 0, 3, 3, 3, 3, 1, 1, 2, 0, 0, 3, 3, 2, 2, 0, 1, 3, 2, 2, 0, 0, 2, 3, 2, 2, 3, 1, 1, 3, 1, 3, 2, 0, 1, 0, 0, 1, 2, 3, 3, 0, 3, 2, 3, 2, 2, 0, 3, 3, 2, 0, 0, 2, 2, 1, 1, 2, 0, 2, 1, 3, 1, 1, 0, 2, 2, 3, 0, 3, 2, 0, 3, 3, 0, 1, 1, 3, 0, 3, 3, 0, 3, 1, 0, 2, 3, 3, 3, 3, 0, 1, 3, 1, 0, 2, 0, 2, 0, 1, 1, 1, 1, 0, 1, 0, 3, 0, 1, 2, 2, 3, 3, 3, 0, 1, 0, 3, 3, 2, 3, 3, 3, 0, 1, 0, 0, 3, 0, 0, 0, 3, 3, 0, 1, 0, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 0, 2, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 2, 1, 1, 0, 1, 2, 1, 1, 2, 0, 0, 2, 2, 0, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1, 2, 1, 1, 1, 0, 0, 1, 0, 1, 2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 1, 2, 1, 0, 0, 2, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 0, 2, 0, 0, 1, 2, 1, 2, 1, 1, 0, 1, 2, 0, 1, 0, 2, 2], [2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 2, 0, 2, 2, 1, 0, 0, 0, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 1, 1, 2, 1, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 0, 2, 2, 0, 0, 1, 2, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 147, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nloopBreak% = 0\\nwhile min(( int(5.0) * in0 ), res0) != abs(divInt(abs(int(7.0)),int(5.0))):{:\\nin1 += divInt(max(i1, int(1.0)),int(5.0))\\ni2 += mod(max(int(0.0), in2),res0)\\nb2 = not ( ( False or not not True ) or ( divInt(( divInt(( min(mod(int(7.0),max(mod(mod(divInt(abs(res0),max(divInt(mod(int(9.0),in0),( ( int(2.0) * max(( i0 - i0 ), i0) ) * in1 )), in0)),abs(min(min(int(4.0), mod(int(8.0),( i2 - mod(int(1.0),( divInt(in1,( abs(in0) - in2 )) + ( mod(i0,in2) + i0 ) )) ))), abs(int(9.0))))),( ( in0 * int(1.0) ) + int(1.0) )), int(9.0))), min(max(max(i2, in0), int(9.0)), in2)) * ( max(min(int(7.0), min(( abs(int(3.0)) * divInt(divInt(max(int(6.0), max(mod(int(8.0),res0), i2)),int(3.0)),i1) ), in2)), max(mod(res0,int(9.0)), int(4.0))) - i0 ) ),max(mod(int(1.0),int(6.0)), ( in2 + ( in1 + in1 ) ))) + abs(in2) ),( in1 - i2 )) * int(7.0) ) \\ge int(0.0) )\\nres0 = mod(int(8.0),int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif abs(res0) \\ge int(3.0):{:\\nb0 = min(int(0.0), mod(int(6.0),int(7.0))) == ( in1 + divInt(mod(max(int(6.0), ( res0 - abs(abs(abs(max(int(3.0), divInt(min(int(8.0), int(3.0)),abs(min(abs(min(( in2 - max(abs(divInt(int(6.0),int(2.0))), mod(( int(2.0) + res0 ),max(mod(int(1.0),i0), ( ( min(int(9.0), i0) + max(mod(in2,divInt(int(5.0),abs(in2))), ( mod(max(( int(9.0) + abs(max(max(( i2 + min(int(9.0), int(4.0)) ), ( ( max(int(1.0), abs(max(max(divInt(mod(int(6.0),max(int(6.0), in2)),mod(min(int(7.0), ( divInt(i1,mod(int(1.0),mod(int(1.0),min(max(( ( divInt(( min(mod(max(divInt(( int(7.0) + ( mod(int(6.0),i0) * divInt(int(9.0),( int(6.0) + abs(mod(( in1 + int(5.0) ),int(4.0))) )) ) ),( ( mod(abs(max(i2, int(4.0))),in0) * ( i1 - int(4.0) ) ) + int(0.0) )), min(int(4.0), int(3.0))),i0), i2) - ( abs(int(2.0)) - divInt(int(8.0),i0) ) ),int(4.0)) * int(3.0) ) - in0 ), mod(i2,( int(7.0) + min(max(divInt(abs(min(i1, abs(int(5.0)))),( int(3.0) + min(abs(in0), ( abs(max(res0, in2)) * ( abs(int(6.0)) * max(divInt(mod(divInt(( i2 * max(in1, int(2.0)) ),in0),max(int(9.0), i2)),divInt(i2,int(2.0))), in2) ) )) )), min(min(int(6.0), ( ( i0 * abs(max(in0, int(9.0))) ) * int(5.0) )), int(5.0))), max(abs(divInt(max(mod(max(max(int(1.0), int(9.0)), int(4.0)),i1), int(2.0)),abs(abs(min(int(6.0), int(1.0)))))), ( max(in0, mod(divInt(res0,int(5.0)),( int(0.0) * divInt(( abs(( ( int(5.0) - res0 ) - int(4.0) )) * int(2.0) ),min(abs(max(( i2 * max(abs(max(min(int(3.0), int(9.0)), ( in0 + res0 ))), min(abs(( mod(res0,int(6.0)) * min(( mod(i1,i0) * divInt(abs(divInt(( abs(int(9.0)) + int(2.0) ),abs(int(7.0)))),max(( i2 + int(0.0) ), i1)) ), in1) )), int(4.0))) ), ( abs(abs(in0)) - max(( abs(( divInt(in1,abs(abs(mod(i1,i1)))) * divInt(mod(int(6.0),int(7.0)),( i1 + divInt(int(0.0),abs(int(2.0))) )) )) * int(1.0) ), in0) ))), divInt(divInt(abs(res0),max(divInt(res0,abs(max(i2, int(6.0)))), int(5.0))),abs(i2)))) ))) - abs(abs(in1)) ))) ))), min(int(5.0), i0))))) + ( abs(min(min(max(in1, int(6.0)), abs(int(2.0))), i1)) + mod(res0,( res0 - int(3.0) )) ) )),int(9.0))), int(0.0)), int(9.0)))) - in1 ) - int(4.0) )), in0)) ), max(in0, int(8.0))),divInt(( abs(max(max(i0, int(3.0)), i1)) + min(max(mod(abs(min(max(i2, int(1.0)), i2)),in1), min(i1, i2)), res0) ),abs(abs(in2)))) + int(1.0) )) ) + in1 )))) ), ( res0 + i0 ))), i0))))))) )),divInt(int(0.0),i1)),in0) )\\n:}else:{:\\nin2 += int(4.0)\\nin0 = divInt(in2,divInt(int(7.0),int(3.0)))\\n:}\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 10, 10, 2, 8, 121, 121, 4, 3, 2, 12, 4, 8, 3, 1, 122, 5, 517, 141, 138, 70, 74]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [0, 8, 9], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= int(089.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [0, 1], [1, 1, 1, 1], [0, 7, 4, 2], [3, 2], [1], [], [1, 1], [0, 0], [], [], [], [4, 0, 3], [1], [0, 2, 1, 1, 1, 0, 1], [1], [], [1], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 \\ge mod(int(0.0),int(7.0)):{:\\nb1 = int(4.0) == i0\\nin0 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 2, 1, 0, 2, 2, 0, 0, 0, 3, 1, 7, 1, 0, 1, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 0, 1, 2, 0], [0], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 8, 7, 6, 8, 8, 9, 7, 2, 6, 3, 1, 9, 9, 0, 1, 4, 8], [], [], [], [0], [], [1], [1], [0], [0, 4, 5, 1, 0, 5, 5, 3, 6, 0, 5, 0, 2, 0, 5, 0, 6, 1], [0, 1, 1, 0], [2, 2, 1, 1, 3, 1, 0, 3, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0, 2, 2, 2, 3, 0, 1, 2, 1, 3, 0, 3, 1, 0, 3, 2, 3, 0, 3, 0, 2, 3, 2, 2, 3, 1, 3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 2, 1, 1, 0, 2, 1, 0, 2, 1, 1, 1], [0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( ( int(5.0) + int(1.0) ) + min(int(8.0), in1) )\\nin2 *= min(( mod(divInt(int(7.0),( i1 + i0 )),in2) * in2 ), in0)\\nres0 *= mod(divInt(divInt(abs(i0),int(6.0)),mod(int(8.0),max(in2, max(int(8.0), i0)))),min(( abs(i2) * max(i0, ( min(mod(( abs(int(9.0)) + max(max(divInt(int(7.0),in2), mod(mod(int(2.0),( int(6.0) * ( i0 + max(int(3.0), int(1.0)) ) )),int(9.0))), int(9.0)) ),int(0.0)), res0) + int(1.0) )) ), int(4.0)))\\nif False:{:\\ni1 = int(8.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 19, 19, 0, 0, 0, 1, 0, 1, 1, 1, 18, 4, 65, 19, 13, 11, 10]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1], [2, 8, 2, 5, 3], [0, 1], [2], [1, 1], [0, 0, 1, 0, 1], [0, 0], [3, 3, 1], [0], [], [1, 3, 3, 5], [], [1, 0, 3, 2, 3, 2, 0, 0, 1, 0, 1, 3, 3, 1, 1], [0, 0], [0, 1, 1, 2], [1, 0], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( int(2.0) \\l i1 or True ) or min(( max(( in0 - in0 ), int(8.0)) + in2 ), int(2.0)) \\g max(abs(int(5.0)), int(3.0)) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 2, 1, 2, 5, 2, 3, 1, 0, 4, 0, 15, 2, 4, 2, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 1], [1, 1], [3, 2], [0], [], [], [1], [0], [], [], [], [1, 3, 1, 2, 5], [0, 0], [0, 2, 0, 0, 1, 3, 1], [0], [2], [2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\l ( in0 * i1 ):{:\\ni2 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = abs(int(2.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 5, 2, 7, 1, 1, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1], [2, 2, 0, 2, 0, 0, 0, 1], [0, 1, 1], [0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 8, 5, 7, 4, 4, 1, 6, 7, 1, 8], [0, 4, 0, 1], [2, 2, 0, 2, 2], [1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0], [2, 2, 3, 2, 0, 0, 1], [0], [1], [2, 5, 2, 2, 0, 3, 5, 2, 4, 4, 2, 4, 2, 2], [1, 0], [0, 1, 2, 2, 2, 0, 0, 3, 1, 1, 0, 2, 2, 2, 1, 0, 1, 0, 1, 3, 3, 1, 1, 3, 3, 0, 2, 3, 2, 1, 2, 1, 2, 3, 2, 0, 1, 0, 3, 0, 2, 0, 3, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [2, 2, 1, 2, 0, 2, 2, 2, 0], [1, 0, 2, 2, 2, 2, 2, 2], [1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not i2 \\l int(3.0):{:\\nloopBreak% = 0\\nwhile mod(( ( in2 - i2 ) + abs(int(6.0)) ),int(3.0)) \\le i2:{:\\nb2 = not ( mod(divInt(( int(8.0) * i0 ),int(5.0)),in0) \\l int(7.0) or abs(max(int(4.0), int(4.0))) \\g abs(min(in2, ( abs(( int(1.0) * ( int(6.0) * mod(abs(divInt(i2,int(7.0))),in1) ) )) * abs(in1) ))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile not b2:{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = True\\n:}\\ni2 *= ( in1 * min(int(1.0), i2) )\\ni2 = int(8.0)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 13, 13, 4, 5, 1, 11, 4, 7, 1, 1, 14, 2, 46, 12, 9, 8, 5]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 1, 0, 2, 2, 1, 1], [1, 0, 0], [1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 3, 6, 2, 0, 6, 9, 0, 5, 9, 7, 3, 1, 8, 1, 6, 6, 6, 6, 6, 7, 5, 2, 6, 4, 7, 6, 9, 9, 1, 4, 9, 5, 3, 3, 8, 7], [4, 5, 2], [1, 0, 2], [1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0], [3, 1, 3, 1, 1, 0], [1, 1, 1], [0, 1], [6, 1, 4, 1, 1, 6, 0, 3, 5, 6, 0, 1, 3, 4, 0, 4, 5, 0, 5, 4, 6, 4, 3, 3, 1, 2, 1, 4, 0, 6, 3, 0, 4, 6, 5, 6, 2], [1, 1, 0], [2, 1, 3, 3, 1, 1, 2, 0, 2, 1, 3, 1, 0, 0, 2, 2, 1, 3, 2, 2, 0, 2, 3, 2, 0, 1, 2, 2, 2, 2, 2, 0, 1, 3, 1, 2, 1, 3, 3, 0, 0, 0, 1, 2, 2, 2, 3, 1, 3, 0, 3, 2, 3, 3, 1, 2, 2, 3, 0, 2, 1, 3, 2, 3, 0, 0, 0, 1, 1, 2, 2, 3, 2, 3, 2, 2, 3, 0, 1, 1, 0, 3, 3, 0, 3, 1, 1, 2, 0, 2, 1, 3, 0, 1, 2, 1, 1, 0, 0, 2, 2, 0, 0, 3, 1, 1, 1, 0, 1, 3, 1, 2, 2, 3, 3, 2, 1, 3, 0, 0, 2, 1, 3, 1, 1, 3, 2, 1, 0, 1, 0, 0, 0, 0, 2, 3, 0, 1, 2, 0, 1, 3, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 2, 0, 0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 1, 0, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0, 0, 2], [2, 0, 1, 1, 0, 2, 0, 0, 0, 2, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2, 0, 0, 2, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= mod(int(2.0),max(abs(int(0.0)), int(3.0)))\\nloopBreak% = 0\\nwhile ( i1 + divInt(int(6.0),min(int(2.0), in1)) ) \\le i1:{:\\ni1 -= divInt(( int(0.0) - min(( ( res0 + ( abs(divInt(i0,int(6.0))) * ( ( ( ( ( in0 + int(9.0) ) + max(int(0.0), divInt(int(5.0),abs(max(in2, res0)))) ) + i0 ) * int(9.0) ) * divInt(( ( abs(int(7.0)) * max(i1, max(divInt(abs(min(int(3.0), ( divInt(max(in0, divInt(int(1.0),min(divInt(max(in1, i0),in1), int(8.0)))),int(1.0)) + mod(( max(( min(mod(divInt(max(in2, int(6.0)),int(6.0)),i0), max(max(in2, abs(int(6.0))), int(6.0))) - divInt(in1,( int(6.0) - abs(res0) )) ), int(7.0)) * ( int(5.0) * int(2.0) ) ),in1) ))),in0), mod(( in0 + i1 ),max(int(6.0), int(4.0))))) ) - int(7.0) ),i2) ) ) ) * int(6.0) ), max(int(9.0), ( ( max(max(divInt(int(9.0),abs(i1)), in1), divInt(int(1.0),max(int(4.0), int(9.0)))) + min(( int(5.0) + i0 ), int(3.0)) ) * res0 ))) ),in0)\\nb1 = ( i0 != in1 or False )\\nif ( False or False ):{:\\nif ( min(res0, int(3.0)) - ( in2 - int(8.0) ) ) == abs(res0):{:\\ni2 = int(7.0)\\n:}else:{:\\nb0 = b2\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 38, 38, 3, 3, 2, 9, 3, 6, 3, 2, 37, 3, 144, 40, 32, 25, 17]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [0, 1, 1, 1, 1], [8, 8, 5, 2, 0], [4], [2], [], [0, 1], [0], [2], [], [], [2, 1], [1], [1, 3, 1, 1, 2, 0, 1], [1], [1], [0], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += int(88.0)\\nb2 = not max(int(5.0), int(2.0)) \\le mod(i1,int(0.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 1, 0, 2, 1, 1, 0, 0, 2, 1, 7, 1, 1, 1, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [4], [], [], [], [], [], [], [], [], [4, 4], [0], [3, 3, 1, 0], [], [0, 2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(abs(int(4.0)), in1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 2, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1], [2, 1, 0, 2, 0, 2, 2, 0], [0, 0, 1, 0], [1, 0, 1, 0], [1, 1, 1], [1, 8, 8], [1, 4], [1, 2, 0, 2, 0, 1], [1], [0, 0, 1, 1, 0, 0, 0, 0], [0, 0], [0, 1, 0, 3, 0, 0], [1], [0, 1, 0], [0, 6, 1, 5, 0, 2, 4], [0, 1], [2, 0, 0, 3, 0, 0, 0, 3, 1, 1, 1], [0], [2, 1], [2, 1], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\ni0 = ( res0 * i1 )\\n:}\\nb2 = False\\nif abs(in2) \\g i0:{:\\ni2 -= in1\\n:}else:{:\\nloopBreak% = 0\\nwhile max(int(1.0), int(8.0)) \\le int(8.0):{:\\nif b0:{:\\nb2 = ( b0 or b1 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 3, 3, 2, 6, 1, 8, 2, 6, 1, 3, 7, 2, 11, 1, 2, 2, 0]}, {"genotype": [[0], [0, 0, 1, 1], [1, 1, 2, 1], [1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 3, 2, 4, 3, 3, 6, 0, 0, 4], [5, 5], [1], [], [1, 1], [0, 0], [], [], [], [0, 0, 5, 1, 5, 1, 5], [1, 0], [0, 1, 3, 3, 3, 2, 3, 1, 2, 2, 1, 2, 1, 1, 3, 0, 3, 2, 3, 2, 0, 1, 1, 3, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 0], [1, 1, 0], [0, 1, 0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i0 != int(0.0)\\ni0 -= max(abs(abs(divInt(abs(int(3.0)),( ( int(2.0) - mod(int(4.0),int(3.0)) ) + abs(in2) )))), abs(divInt(abs(divInt(i1,int(3.0))),int(6.0))))\\nloopBreak% = 0\\nwhile min(in2, i1) != int(00.0):{:\\nin2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 10, 10, 2, 1, 0, 2, 2, 0, 0, 0, 7, 2, 28, 6, 8, 3, 4]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 2, 0, 0, 1, 1], [1, 0], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 1, 3, 8, 2, 4, 5, 5, 1, 4, 2], [0, 1], [], [], [1, 1], [0, 0], [], [], [0], [3, 3, 0, 0, 1, 4, 0, 2, 1, 5, 1, 5, 6, 4, 2, 3, 5, 6, 0, 1], [1, 0, 1, 0], [2, 0, 0, 0, 0, 2, 2, 1, 0, 2, 1, 1, 3, 3, 0, 2, 1, 2, 2, 2, 1, 0, 2, 2, 3, 0, 0, 2, 3, 2, 0, 3, 1, 2, 1, 0, 0, 2, 1, 2, 1, 0, 3, 2, 0, 0, 3, 1, 3, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [2, 1, 1, 0, 2, 2, 2, 2, 1], [2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(in0,in0) \\l i0:{:\\nif i0 \\g ( divInt(int(4.0),i1) * ( int(5.0) * int(1.0) ) ):{:\\nin1 += abs(max(i0, mod(int(3.0),divInt(( divInt(int(8.0),i2) * mod(( max(i1, in2) - ( min(( i1 * abs(int(2.0)) ), ( int(4.0) * in2 )) * res0 ) ),( int(5.0) + mod(int(5.0),in1) )) ),abs(( i2 - in0 ))))))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = abs(int(1.0))\\nres0 += abs(max(int(4.0), int(2.0)))\\ni0 = i1\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 6, 6, 2, 4, 12, 12, 2, 0, 0, 2, 2, 0, 0, 1, 20, 4, 53, 16, 9, 11, 7]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 0], [], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 9, 9, 8, 0, 3, 8, 6, 6], [5, 0], [2, 2], [], [1, 1], [0, 0], [], [], [], [0, 1, 0, 5, 0, 2, 2, 1, 4, 6, 1], [0, 1], [1, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 0, 3, 0, 2, 2, 0, 2, 2, 1, 1, 3, 3, 2, 2, 1, 0, 0, 2, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 2, 1], [0, 0, 1, 0, 0], [1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(2.0)\\nb2 = ( int(0.0) + max(max(mod(int(9.0),int(9.0)), int(8.0)), int(0.0)) ) != i1\\ni0 += in2\\nb2 = min(i0, ( divInt(i2,mod(divInt(int(3.0),int(8.0)),abs(max(( ( int(6.0) - i2 ) + i1 ), divInt(in1,res0))))) + int(6.0) )) \\l i1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 10, 10, 2, 2, 0, 2, 2, 0, 0, 0, 11, 2, 33, 9, 5, 5, 5]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1], [1, 2, 2], [], [], [], [], [], [], [], [], [5, 6, 5, 5], [1], [3, 3, 0, 3, 2, 0, 3, 2, 1, 3, 0, 1, 1], [1, 0], [2, 1, 1, 2, 1], [2, 2], [0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= abs(max(res0, max(divInt(in2,abs(( int(1.0) * max(in2, int(2.0)) ))), int(2.0))))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 13, 2, 5, 2, 1]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1], [1, 1], [0], [], [], [1], [0], [], [], [0], [4, 1, 2, 6, 4, 4], [0], [1, 1, 3, 3, 2, 0, 3, 0, 0, 2, 0, 0], [0, 1], [0, 1, 2], [1], [1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) \\l int(1.0):{:\\nin1 = min(max(( i1 - abs(i2) ), res0), mod(in1,in1))\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 1, 6, 1, 12, 2, 3, 1, 1]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1], [3], [], [2], [], [0], [], [1], [0], [], [6, 0, 4], [1], [2, 2, 1, 0, 0], [0, 1], [], [1, 0], [0]], "fitness": 100, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= ( divInt(int(3.0),i0) + in1 )\\nb2 = True\\n", "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 3, 1, 5, 2, 0, 2, 1]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 1, 1], [1, 1, 1], [9, 1, 4], [], [], [], [], [], [], [], [], [6, 4, 0, 3], [0, 0, 0], [1, 1, 2, 0, 1], [1], [], [], [1]], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(9.0)\\nin1 = int(1.0)\\ni0 = mod(in0,int(4.0))\\n", "other_info": {}, "test_fitness": 989, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 5, 1, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 4], [1], [0], [], [], [1], []], "fitness": 100, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= in1\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 0, 1], [5, 1, 4, 9], [3], [1], [], [1], [0], [], [], [], [6, 3, 2, 5], [0], [1, 2, 2, 1, 2, 0, 3, 0, 0, 1], [0, 0, 0], [2], [0, 1, 2], []], "fitness": 100, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(5.0)\\nb1 = ( ( int(1.0) + ( in0 - abs(i2) ) ) * in2 ) \\ge int(49.0)\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 10, 3, 1, 3, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 2, 2, 2, 0], [1, 0, 1], [1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1], [9, 9, 4, 7, 0, 6], [1, 0, 4], [2, 0, 1], [], [0, 1, 1, 0, 1], [0, 0, 0], [0, 1], [0], [0], [4, 0, 6, 2, 3, 0, 4, 0, 0, 1, 5], [1, 1, 0], [0, 2, 1, 1, 0, 1, 2, 0, 1, 2, 3, 0, 0, 1, 3, 0, 1, 3, 3, 0, 0], [0, 1, 1], [1, 2, 2, 1], [1, 0, 2], [1, 0]], "fitness": 100, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= i0\\nb2 = b0\\nres0 += ( int(9.0) * int(9.0) )\\ni2 = in0\\nloopBreak% = 0\\nwhile int(4.0) \\g mod(i0,int(7.0)):{:\\nif divInt(max(in1, i0),int(0.0)) \\l abs(i0):{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = int(6.0) \\le abs(max(i1, in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 8, 8, 3, 5, 6, 6, 3, 3, 0, 5, 3, 2, 1, 1, 11, 3, 21, 3, 4, 3, 2]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 2, 2, 1, 0, 1], [0, 0], [1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 8, 6, 2, 5, 2, 8, 3, 0, 0, 2, 3, 2, 1, 9, 5, 4, 2, 0, 2, 8, 6, 3, 2, 5, 6, 8, 7, 1, 9, 5, 7, 5, 8, 3, 7, 8, 8, 0, 5, 3], [4, 0, 0], [2, 2], [], [0, 1, 1, 1], [0, 0, 0], [1], [1], [0, 0], [0, 6, 5, 5, 1, 0, 5, 3, 3, 3, 1, 3, 2, 3, 6, 3, 4, 4, 6, 3, 3, 0, 6, 5, 2, 0, 6, 1, 0, 5, 0, 5, 3, 5, 5, 4, 0, 3, 1, 6, 4, 1], [1, 1, 1, 0], [1, 1, 2, 3, 0, 3, 3, 2, 0, 1, 2, 1, 0, 3, 3, 1, 2, 1, 0, 2, 1, 2, 0, 2, 0, 1, 2, 0, 2, 1, 2, 2, 1, 3, 0, 1, 0, 2, 3, 3, 0, 1, 3, 0, 3, 0, 1, 3, 1, 2, 0, 0, 1, 3, 3, 1, 1, 3, 2, 2, 1, 2, 2, 0, 3, 1, 3, 0, 1, 3, 3, 3, 0, 1, 2, 3, 3, 0, 2, 0, 2, 2, 1, 3, 2, 3, 2, 3, 0, 2, 1, 2, 0, 0, 2, 3, 3, 1, 1, 3, 3, 1, 3, 1, 3, 0, 2, 3, 2, 3, 0, 3, 0, 0, 2, 0, 1, 2, 1, 2, 0, 2, 0, 1, 1, 0, 1, 3, 3, 3, 1, 2, 2, 0, 1, 2, 2, 0, 1, 1, 0, 1, 2, 0, 2, 3, 1, 0, 2, 3, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 2, 1, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 2, 0, 1, 2, 1, 1, 0, 2, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]], "fitness": 100, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= int(1.0)\\nres0 -= int(5.0)\\nin2 -= mod(min(in2, max(min(mod(i1,int(8.0)), mod(int(6.0),i0)), min(min(int(2.0), divInt(int(5.0),in2)), ( int(2.0) - ( in0 - ( in0 * int(8.0) ) ) )))),mod(in0,mod(int(3.0),mod(divInt(int(0.0),min(i1, int(0.0))),in0))))\\nif False:{:\\nif divInt(max(max(i2, int(2.0)), abs(in0)),max(res0, int(3.0))) \\le max(int(2.0), ( in0 * in1 )):{:\\nin1 = int(1.0)\\n:}\\nb2 = min(abs(int(9.0)), int(5.0)) \\l max(mod(( int(4.0) - ( mod(res0,abs(int(2.0))) - min(in0, int(0.0)) ) ),max(abs(min(in0, int(2.0))), ( min(max(i0, ( res0 + mod(mod(int(8.0),min(( min(mod(min(in2, ( int(6.0) + ( i2 - i0 ) )),mod(max(abs(int(3.0)), int(2.0)),min(max(int(5.0), abs(int(6.0))), max(res0, divInt(max(divInt(min(i1, abs(i0)),in2), ( i0 - int(8.0) )),( int(7.0) - mod(in2,( in0 + int(1.0) )) )))))), int(9.0)) * in2 ), int(5.0))),min(min(max(int(7.0), mod(mod(in2,int(5.0)),mod(( in1 * int(8.0) ),int(3.0)))), i0), int(7.0))) )), ( in0 + ( min(int(8.0), i1) - divInt(min(res0, in1),int(8.0)) ) )) - i1 ))), int(0.0))\\nb2 = int(5.0) \\l int(3.0)\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 42, 42, 3, 2, 0, 4, 3, 1, 1, 2, 42, 4, 157, 39, 38, 20, 22]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 5, 4], [1], [2, 0, 0], [0], [], [1, 1], []], "fitness": 100, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= ( in2 - in1 )\\n", "other_info": {}, "test_fitness": 998, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1], [9], [], [1], [], [0], [], [1], [0], [], [6], [0], [3, 1], [], [2], [], []], "fitness": 100, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = abs(int(9.0))\\nb1 = True\\n", "other_info": {}, "test_fitness": 989, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1], [7, 4], [1], [0], [0], [0, 0, 1], [0], [3, 1], [0], [], [6, 1, 0, 5], [0], [2, 0, 1, 1, 3, 0, 0], [0], [0], [0], []], "fitness": 100, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = ( i1 + int(7.0) )\\nb0 = ( True and int(4.0) \\g min(i0, in2) )\\n", "other_info": {}, "test_fitness": 993, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 1, 1, 3, 1, 2, 1, 0, 4, 1, 7, 1, 1, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 1, 1], [0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 2, 9, 3, 3, 9, 3, 7, 4, 5, 9, 4, 2, 7, 0, 2, 0, 1, 3, 8, 0, 9, 0, 1, 4, 9, 1, 3, 8, 3, 3, 3, 6, 8, 5, 9, 6, 9, 6, 2, 7, 9, 8, 6, 4, 3, 4, 2, 1, 3, 3, 0, 1, 0, 0, 1, 9, 1, 8, 8, 7, 3, 9, 2, 0, 6, 8, 7, 2, 0, 2, 7, 7, 3, 9, 6, 6, 9, 7, 9, 5, 8, 1, 3, 8, 4, 2, 6, 9, 9, 0, 1, 1], [5, 2, 1, 2, 2, 3, 5], [0, 2, 2, 2, 2, 2, 2, 1], [0, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 3, 1, 3, 0, 1], [0, 1], [1, 0], [6, 6, 2, 3, 3, 5, 4, 3, 6, 0, 6, 1, 4, 4, 5, 6, 0, 5, 4, 3, 3, 4, 4, 2, 0, 4, 1, 2, 1, 1, 0, 0, 4, 6, 0, 3, 4, 6, 1, 5, 5, 0, 2, 2, 6, 0, 5, 1, 0, 0, 6, 6, 6, 3, 2, 1, 2, 1, 3, 1, 0, 4, 2, 3, 5, 2, 4, 5, 6, 3, 4, 4, 1, 2, 3, 3, 5, 5, 2, 5, 5, 0, 5, 5, 5, 1, 1, 3, 4, 5, 6, 5, 6, 6, 4, 2, 6, 2], [1, 1, 0], [0, 1, 3, 2, 1, 1, 1, 2, 2, 1, 0, 3, 0, 2, 2, 3, 1, 1, 2, 1, 0, 1, 1, 3, 1, 2, 0, 2, 1, 0, 2, 0, 0, 0, 1, 2, 0, 2, 2, 3, 3, 0, 2, 3, 0, 0, 1, 3, 1, 2, 1, 3, 2, 2, 2, 2, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 1, 0, 3, 3, 0, 2, 3, 2, 2, 1, 2, 3, 2, 3, 3, 3, 0, 2, 3, 3, 1, 0, 0, 2, 3, 0, 3, 3, 2, 0, 3, 2, 3, 0, 3, 2, 3, 1, 2, 0, 0, 3, 3, 1, 2, 3, 3, 2, 2, 1, 3, 2, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 2, 0, 2, 1, 1, 3, 2, 0, 2, 2, 0, 0, 0, 1, 0, 3, 3, 3, 2, 0, 1, 1, 3, 0, 3, 1, 3, 0, 0, 1, 3, 1, 0, 3, 2, 2, 3, 1, 3, 2, 1, 2, 1, 1, 1, 1, 2, 0, 2, 2, 0, 3, 1, 1, 1, 3, 1, 0, 1, 3, 0, 3, 2, 0, 1, 1, 3, 0, 3, 2, 1, 2, 0, 0, 2, 2, 2, 1, 2, 3, 3, 3, 2, 1, 3, 0, 0, 1, 0, 1, 2, 1, 3, 2, 0, 2, 1, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 2, 1, 0, 2, 3, 1, 1, 3, 0, 0, 0, 3, 1, 3, 1, 2, 3, 2, 0, 3, 0, 2, 3, 0, 3, 0, 0, 2, 0, 3, 2, 2, 2, 2, 3, 0, 3, 0, 0, 1, 0, 1, 0, 0, 2, 0, 3, 2, 1, 0, 3, 2, 3, 0, 3, 1, 3, 0, 3, 2, 0, 2, 0, 3, 2, 2, 1, 1, 3, 2, 3, 1, 0, 1, 0, 2, 3, 1, 1, 2, 3, 2, 3, 2, 0, 1, 1, 2, 2, 3, 0, 2, 0, 3, 0, 3, 0, 0, 1, 2, 0, 0, 3, 2, 0, 3, 2, 0, 3, 2, 3, 0, 0, 2, 2, 3, 0, 3, 1, 2, 0, 3, 2, 1, 0, 3, 1, 1, 0, 3, 1, 1, 2, 1, 0, 1, 3, 1, 0, 2, 0, 1, 1, 1, 1, 3, 3, 2, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 2, 0, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 2, 0, 0, 0, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 1, 1, 2, 1, 2, 0, 1, 0, 2, 0, 0, 2, 0, 2, 0, 2, 1, 1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 0, 2, 1, 1, 2, 2, 0, 1, 2, 0, 0, 2, 0, 2, 1, 1, 0, 0, 0, 1, 2, 0, 0], [1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 1, 2, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 0, 0, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 2, 1, 1, 2, 2, 2], [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1]], "fitness": 100, "tree_depth": 88, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\nif ( res0 != int(3.0) and True ):{:\\nres0 -= min(( int(1.0) + int(2.0) ), int(9.0))\\nb2 = mod(( int(3.0) * i2 ),min(in0, ( mod(max(int(3.0), int(9.0)),( int(3.0) + in0 )) * int(7.0) ))) == int(4.0)\\nif abs(int(5.0)) \\g divInt(in2,divInt(int(9.0),in1)):{:\\nin0 *= ( res0 + i0 )\\n:}\\nloopBreak% = 0\\nwhile res0 == int(4.0):{:\\nb2 = mod(i1,divInt(( min(min(in1, ( abs(in1) + in2 )), int(2.0)) * abs(int(7.0)) ),divInt(int(0.0),abs(( ( mod(( int(2.0) * max(int(0.0), int(1.0)) ),int(3.0)) + min(int(8.0), int(0.0)) ) * abs(int(9.0)) ))))) == int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = i0\\nb2 = abs(max(in2, ( abs(divInt(( int(1.0) + ( abs(( min(min(min(in1, divInt(max(max(int(4.0), in0), in0),( max(in1, abs(max(( in1 * min(divInt(min(i2, min(( min(int(9.0), ( i0 - in1 )) * min(min(int(1.0), divInt(abs(min(mod(( int(3.0) - max(( ( divInt(mod(i1,int(8.0)),( i2 * i1 )) * i1 ) - divInt(divInt(i0,( int(3.0) + int(3.0) )),min(( i0 - ( divInt(in1,res0) + i0 ) ), int(3.0))) ), in0) ),max(min(max(mod(in1,int(6.0)), int(8.0)), abs(res0)), min(int(5.0), abs(i1)))), in2)),int(9.0))), min(int(6.0), in2)) ), max(( ( max(int(9.0), max(divInt(int(6.0),divInt(int(2.0),int(7.0))), int(9.0))) + int(8.0) ) - divInt(i0,( mod(i2,min(int(6.0), int(4.0))) * int(3.0) )) ), min(int(4.0), i2)))),int(2.0)), min(res0, abs(( i0 * int(1.0) )))) ), int(3.0)))) * max(in2, max(divInt(int(3.0),( i1 - i0 )), mod(( divInt(int(0.0),( abs(max(abs(mod(int(1.0),min(i0, res0))), int(0.0))) + res0 )) * int(0.0) ),divInt(int(1.0),max(( res0 + divInt(int(9.0),( divInt(min(abs(min(min(int(1.0), mod(int(8.0),( int(8.0) + abs(( int(7.0) + in0 )) ))), ( min(int(3.0), int(9.0)) * abs(i2) ))), i1),i2) * min(int(2.0), abs(int(0.0))) )) ), divInt(max(mod(i1,max(in0, mod(max(i1, abs(i0)),in1))), mod(i2,min(( divInt(( ( max(in0, max(in2, i2)) - int(6.0) ) + in1 ),int(8.0)) - in2 ), res0))),( in0 * abs(( int(7.0) * in1 )) ))))))) ))), min(divInt(max(in1, max(int(2.0), min(i1, abs(divInt(i2,( in0 - max(( mod(int(0.0),int(2.0)) + max(( abs(int(7.0)) - in0 ), int(7.0)) ), in2) )))))),mod(abs(int(3.0)),int(9.0))), ( min(mod(max(mod(in2,int(6.0)), int(6.0)),divInt(( abs(i2) + ( in2 * min(in2, min(i0, in2)) ) ),int(9.0))), ( in2 + in2 )) * abs(( i1 * min(( i1 + abs(mod(max(in0, in1),( mod(max(in2, min(int(7.0), divInt(res0,min(mod(int(9.0),in2), min(int(5.0), int(8.0)))))),res0) * max(int(1.0), int(3.0)) ))) ), ( int(8.0) * res0 )) )) ))), int(4.0)) - abs(int(2.0)) )) - in1 ) ),( i2 * int(6.0) ))) * int(9.0) ))) \\ge int(9.0)\\nb2 = ( int(0.0) != min(min(( int(1.0) * res0 ), i2), int(1.0)) and b2 )\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 3, 9, 94, 94, 7, 8, 2, 13, 7, 6, 2, 2, 98, 3, 389, 102, 98, 57, 47]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 3, 7, 5, 2, 9, 8, 1, 2, 4, 4, 1, 4, 8, 2, 0, 4, 8, 2, 7, 5, 5, 3, 9, 9, 1, 2, 6, 3, 6, 1, 6, 0, 4, 3, 6, 7, 5, 5, 3, 6, 8, 5, 6, 5, 0, 9, 8, 5, 1, 3, 6, 6, 6, 9, 2, 4, 5, 3, 5, 1, 4, 0, 5, 6, 7, 2, 0, 3, 5], [4, 3, 4, 1, 5, 5, 4, 1], [0, 1, 0], [1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 3, 2, 3, 0, 3, 2, 1], [1, 1], [1, 0, 0, 1], [1, 2, 2, 4, 1, 4, 5, 1, 3, 1, 0, 0, 3, 0, 5, 0, 3, 3, 2, 4, 6, 4, 1, 4, 5, 5, 6, 0, 1, 2, 5, 1, 3, 6, 0, 2, 1, 4, 5, 1, 5, 2, 5, 3, 3, 0, 2, 1, 0, 2, 2, 1, 0, 1, 0, 1, 6, 3, 6, 3, 0, 1, 6, 4, 2, 4, 3], [0, 0, 0, 1, 1], [0, 3, 1, 2, 2, 0, 1, 0, 1, 3, 3, 3, 0, 3, 0, 1, 1, 1, 0, 3, 0, 1, 3, 2, 1, 0, 0, 2, 2, 2, 3, 3, 1, 3, 3, 1, 1, 3, 0, 1, 2, 2, 1, 2, 2, 2, 0, 1, 2, 1, 3, 0, 1, 1, 3, 2, 3, 3, 3, 1, 1, 2, 1, 3, 3, 1, 0, 2, 2, 1, 3, 1, 3, 0, 1, 1, 0, 3, 3, 3, 0, 1, 1, 0, 1, 3, 2, 2, 1, 1, 0, 3, 2, 2, 1, 3, 2, 1, 2, 0, 0, 0, 3, 2, 1, 3, 0, 0, 3, 3, 2, 3, 3, 2, 0, 3, 1, 0, 1, 2, 3, 1, 3, 3, 2, 3, 3, 3, 1, 0, 3, 2, 2, 1, 2, 3, 0, 3, 1, 2, 0, 0, 3, 1, 0, 3, 3, 2, 0, 3, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 3, 2, 1, 3, 3, 2, 0, 0, 2, 0, 1, 3, 0, 2, 3, 0, 2, 0, 2, 2, 0, 2, 2, 2, 1, 0, 1, 3, 0, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 2, 0, 3, 3, 0, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 3, 3, 2, 2, 1, 1, 0, 1, 2, 3, 1, 2, 1, 0, 3, 1, 0, 0, 2, 2, 3, 0, 3, 2, 0, 3, 2, 3, 3, 3, 2, 2, 2, 0, 0, 3, 0, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 2, 2, 0, 0, 1, 0, 2, 1, 1, 1, 0, 0, 1, 2, 0, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 0, 2, 0, 2, 2], [1, 2, 1, 2, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1, 2, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 100, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 \\le min(int(9.0), ( ( i2 - int(8.0) ) * i2 )):{:\\nloopBreak% = 0\\nwhile int(3.0) \\ge min(min(abs(in1), abs(i1)), int(7.0)):{:\\nin1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = int(2.0)\\n:}\\nloopBreak% = 0\\nwhile not i1 \\le min(in0, int(9.0)):{:\\nif False:{:\\nif ( not ( b0 or min(mod(int(8.0),i1), i0) \\g mod(( mod(max(abs(int(1.0)), abs(abs(int(2.0)))),int(4.0)) - max(i0, int(4.0)) ),divInt(divInt(int(1.0),mod(mod(divInt(in0,int(4.0)),mod(int(8.0),min(i0, int(2.0)))),int(0.0))),min(( min(abs(abs(int(4.0))), int(8.0)) * ( int(2.0) * min(min(int(7.0), in2), divInt(( int(5.0) + max(int(5.0), min(i0, int(3.0))) ),int(9.0))) ) ), in0))) ) and ( abs(max(max(in0, int(9.0)), int(1.0))) != i2 or int(2.0) != max(divInt(mod(int(6.0),int(3.0)),in1), min(( mod(int(6.0),min(divInt(int(1.0),( res0 + in1 )), i1)) * max(divInt(int(6.0),abs(in1)), in2) ), min(min(divInt(min(max(divInt(in2,max(int(0.0), res0)), int(4.0)), ( max(int(3.0), abs(min(divInt(max(min(min(int(6.0), i0), max(( ( int(7.0) + divInt(abs(i1),max(int(5.0), ( i2 * in2 ))) ) + min(int(5.0), i1) ), min(min(mod(in0,min(int(3.0), mod(int(6.0),int(8.0)))), int(5.0)), int(6.0)))), abs(int(5.0))),int(0.0)), int(9.0)))) * min(divInt(int(8.0),min(max(divInt(res0,i0), ( i2 + int(5.0) )), max(i1, ( abs(in1) + ( in2 * ( mod(i1,( divInt(mod(int(1.0),in2),int(3.0)) + max(i2, int(6.0)) )) - int(6.0) ) ) )))), ( ( in2 * in0 ) + in0 )) )),mod(( int(6.0) - int(9.0) ),int(2.0))), ( i0 * min(max(i2, mod(divInt(mod(int(4.0),i1),i0),abs(int(5.0)))), i2) )), int(3.0)))) ) ):{:\\nb1 = max(min(divInt(( int(5.0) * int(1.0) ),i2), int(4.0)), divInt(abs(int(0.0)),( int(5.0) * i1 ))) \\le min(int(6.0), i0)\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not i1 \\g divInt(divInt(max(i0, abs(( i1 + min(( abs(min(abs(( ( mod(res0,in0) + abs(res0) ) + int(7.0) )), int(2.0))) - int(0.0) ), divInt(in0,i0)) ))),int(3.0)),i1):{:\\nb0 = False\\nres0 = in1\\n:}else:{:\\ni2 *= in1\\n:}\\nin0 -= int(5.0)\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 13, 13, 6, 7, 71, 71, 8, 3, 3, 17, 8, 9, 2, 4, 67, 5, 264, 63, 68, 29, 36]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 9, 5, 9, 8, 4, 4, 9, 3, 7, 3, 7, 7, 2, 8, 7, 8, 7, 2, 4], [], [], [], [], [], [], [], [], [6, 5, 3, 2, 5, 1, 1, 6, 2, 1, 2, 6, 1, 1, 1, 5, 3, 0, 2, 1, 3, 3, 3, 5], [0], [3, 1, 3, 3, 1, 1, 2, 3, 1, 3, 3, 0, 1, 3, 3, 2, 3, 3, 3, 2, 1, 0, 2, 3, 2, 1, 1, 3, 3, 3, 2, 3, 2, 2, 3, 0, 0, 2, 3, 0, 2, 1, 1, 2, 1, 0, 0, 0, 0, 3, 2, 2, 3, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 0, 1, 3, 0, 3, 3, 1, 3, 1, 0, 0, 1, 1, 0, 2, 1, 0, 3, 3, 0, 1, 0, 0, 2, 2, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 0, 1], [0, 2, 1, 2, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1]], "fitness": 100, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = max(int(0.0), max(max(int(7.0), int(9.0)), ( max(int(5.0), abs(min(in2, int(9.0)))) + min(min(divInt(min(min(abs(( int(8.0) * in0 )), divInt(max(divInt(int(4.0),int(4.0)), max(max(min(mod(max(mod(divInt(min(i2, in2),mod(max(i1, mod(int(9.0),int(3.0))),mod(int(7.0),i1))),res0), i2),i1), max(divInt(mod(max(mod(int(3.0),i2), ( ( res0 - i1 ) * mod(( i1 - i1 ),int(7.0)) )),abs(in2)),abs(max(int(7.0), max(int(2.0), in0)))), i0)), int(8.0)), int(7.0))),i2)), divInt(int(8.0),i1)),min(max(in0, int(7.0)), in0)), in0), divInt(mod(int(2.0),int(4.0)),in2)) )))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 21, 21, 0, 0, 0, 0, 0, 0, 0, 0, 24, 1, 91, 21, 26, 5, 16]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [2, 9, 4], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(294.0)\\n", "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 4, 1, 6, 4, 2, 8, 5, 4, 1, 3, 7, 4, 9, 9, 3, 0, 4, 7, 0, 7, 9, 1, 6, 6, 5, 9, 2, 4, 5, 3, 3, 7, 7, 7, 0, 3, 9, 2, 4, 0, 5, 4, 2, 0, 0, 9, 5, 6, 3, 7, 1, 6, 3, 1, 2, 1, 8, 0, 9, 6, 1, 4, 9, 4], [1], [], [], [1], [0], [], [], [], [5, 0, 5, 5, 5, 5, 5, 6, 5, 0, 0, 5, 1, 2, 0, 0, 3, 4, 0, 5, 6, 2, 2, 6, 1, 1, 2, 5, 4, 3, 2, 2, 5, 5, 4, 6, 1, 6, 5, 4, 1, 2, 5, 6, 5, 2, 3, 0, 1, 2, 6, 6, 1, 4, 6, 0, 4, 0, 3, 4, 0], [1, 1], [1, 2, 2, 0, 0, 3, 3, 2, 1, 3, 2, 1, 2, 1, 3, 0, 1, 0, 3, 3, 3, 2, 3, 3, 2, 1, 0, 1, 3, 1, 2, 2, 1, 0, 3, 0, 0, 2, 2, 1, 0, 3, 2, 1, 2, 3, 0, 1, 0, 0, 3, 3, 2, 0, 1, 0, 2, 2, 2, 3, 0, 2, 3, 3, 0, 2, 2, 0, 1, 1, 0, 0, 1, 2, 2, 3, 2, 1, 3, 0, 1, 2, 3, 2, 2, 1, 3, 1, 2, 3, 0, 0, 2, 0, 3, 3, 2, 3, 0, 1, 1, 3, 0, 2, 0, 3, 2, 2, 2, 1, 3, 0, 2, 1, 2, 1, 3, 3, 1, 3, 1, 2, 2, 3, 3, 0, 2, 3, 0, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 3, 1, 2, 2, 0, 1, 3, 2, 1, 2, 0, 2, 1, 0, 3, 1, 3, 3, 0, 1, 0, 2, 2, 0, 2, 0, 0, 3, 2, 1, 1, 3, 2, 3, 1, 1, 3, 1, 0, 0, 1, 1, 2, 2, 3, 2, 2, 3, 3, 1, 2, 1, 0, 2, 1, 0, 3, 1, 2, 3, 2, 0, 2, 0, 2, 3, 1, 1, 3, 1, 0, 3, 0, 1, 3, 3, 0, 1, 2, 0, 2, 3, 1, 3, 0, 1, 2, 0, 2, 1, 2, 3, 3, 0, 2, 3, 1, 2, 1, 1, 2, 3, 2, 3, 0, 3, 0, 1, 3, 3, 0, 2, 3, 3, 2, 3, 1, 0, 2, 0, 0, 0, 2, 2, 3, 1, 1, 2, 1, 3, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [1, 2, 1, 0, 2, 0, 1, 2, 0, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 2, 2, 2, 0, 2, 0, 0, 1, 2, 1, 1, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 0, 2, 2, 2, 2, 1, 2, 0, 2, 2, 1, 2, 2, 0, 1, 1, 1, 0], [2, 2, 2, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 2, 2, 1, 2, 2, 0, 1, 1, 2, 0, 0, 2, 1, 2, 2], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]], "fitness": 100, "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(4.0) \\g mod(( in2 * i0 ),max(abs(divInt(int(9.0),max(( int(4.0) * mod(int(1.0),min(in2, int(6.0))) ), in2))), abs(min(max(mod(abs(min(( int(4.0) * in2 ), int(2.0))),abs(int(8.0))), ( ( int(5.0) - in2 ) + min(in2, res0) )), ( divInt(int(4.0),in2) + max(( int(1.0) * divInt(max(i0, int(3.0)),i0) ), in2) ))))):{:\\ni1 += max(min(mod(i2,int(7.0)), i0), ( mod(divInt(max(i0, mod(abs(min(in0, ( ( in1 + int(4.0) ) * int(9.0) ))),i0)),in2),int(9.0)) + ( ( max(mod(int(3.0),min(res0, int(0.0))), mod(abs(divInt(mod(int(4.0),abs(int(7.0))),( abs(i2) + i2 ))),divInt(res0,min(abs(( min(i1, int(0.0)) - int(7.0) )), min(i1, ( i2 + max(( divInt(( int(9.0) * abs(in2) ),mod(int(1.0),( int(6.0) * max(max(int(6.0), abs(int(5.0))), ( divInt(max(min(in1, ( abs(in0) * i2 )), divInt(i2,int(9.0))),mod(divInt(( int(2.0) * ( ( min(int(4.0), ( divInt(in2,int(5.0)) * max(mod(int(3.0),divInt(in2,divInt(int(3.0),in1))), min(int(7.0), max(abs(res0), int(7.0)))) )) + i1 ) * divInt(divInt(res0,( in2 - in1 )),min(( int(7.0) - int(0.0) ), abs(mod(abs(int(3.0)),int(9.0))))) ) ),max(int(2.0), i1)),i2)) - int(4.0) )) ))) * int(0.0) ), ( mod(min(mod(( abs(abs(int(5.0))) * ( int(4.0) - in2 ) ),mod(int(2.0),res0)), min(int(0.0), ( max(divInt(in2,divInt(i2,divInt(abs(int(0.0)),int(9.0)))), min(int(5.0), in0)) * min(i0, int(6.0)) ))),abs(abs(i1))) * int(3.0) )) )))))) + ( i2 - ( abs(int(7.0)) - abs(res0) ) ) ) * int(1.0) ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 += ( i1 + divInt(int(6.0),divInt(max(abs(in1), divInt(min(int(3.0), divInt(int(1.0),int(2.0))),mod(abs(( abs(res0) * max(i0, int(1.0)) )),abs(abs(in1))))),( min(max(mod(max(int(8.0), i0),( in0 - in1 )), i0), ( mod(max(int(0.0), int(9.0)),mod(int(6.0),min(int(1.0), int(4.0)))) * int(9.0) )) * int(4.0) ))) )\\n", "other_info": {}, "test_fitness": 994, "mapping_values": [1, 3, 3, 1, 2, 66, 66, 1, 0, 0, 1, 1, 0, 0, 0, 61, 2, 273, 79, 69, 39, 42]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 1, 1, 0, 1, 1, 1, 2, 0], [0, 1, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 0, 1, 7, 1, 0, 0, 7, 9, 4, 5, 0, 0, 4, 5, 7, 2, 2, 1, 7, 7, 0, 9, 1, 5, 6, 8, 0, 7, 2, 9, 7, 7, 8, 3, 5, 9, 7, 7, 2, 6, 0, 2, 7, 2, 4, 7, 6, 5, 8], [5, 3, 3, 1, 3, 2, 4, 1, 3, 3, 3, 3], [1, 0, 0, 0, 0, 2, 0, 2], [1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 1, 3, 2, 0, 2, 1, 0, 2, 1], [1, 1, 1], [0, 1, 0, 1], [2, 6, 4, 3, 3, 6, 2, 3, 2, 1, 2, 4, 6, 2, 5, 3, 6, 5, 3, 3, 1, 3, 1, 3, 4, 6, 4, 1, 6, 4, 2, 5, 5, 3, 4, 2, 6, 5, 0, 1, 0, 5, 3, 4, 4, 3, 3, 6, 6, 0, 1, 6, 0], [0, 0, 1, 1], [0, 2, 1, 3, 2, 1, 1, 1, 1, 1, 3, 0, 0, 3, 3, 3, 2, 1, 3, 1, 1, 0, 0, 2, 3, 1, 2, 0, 2, 2, 3, 2, 0, 0, 1, 3, 1, 0, 2, 1, 0, 1, 3, 3, 3, 1, 3, 3, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 2, 2, 2, 1, 1, 1, 0, 2, 1, 1, 0, 3, 3, 3, 1, 0, 3, 0, 0, 0, 3, 0, 3, 1, 0, 1, 1, 2, 3, 2, 2, 3, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 1, 0, 0, 3, 3, 1, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 1, 3, 0, 2, 3, 0, 1, 1, 0, 3, 2, 2, 0, 1, 3, 1, 2, 0, 1, 0, 0, 2, 1, 1, 0, 3, 3, 1, 3, 0, 1, 2, 1, 0, 2, 3, 3, 0, 0, 2, 3, 3, 1, 3, 3, 3, 3, 3, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2, 3, 1, 0, 2, 3, 3, 3, 0, 1, 3, 1, 1, 0, 1, 0, 0, 3, 3, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 2, 0, 0, 1, 2, 0, 2, 0, 1, 1, 1, 1, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0, 1, 2, 2, 1, 0, 2, 2], [1, 0, 0, 0, 0, 1, 0, 1, 2, 2, 0, 1, 0, 2, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0]], "fitness": 100, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( not False or i2 != ( int(8.0) - max(( int(1.0) + int(0.0) ), int(1.0)) ) ) and int(7.0) \\ge int(1.0) ):{:\\nres0 = min(in1, in0)\\n:}\\nloopBreak% = 0\\nwhile abs(min(min(mod(int(0.0),max(int(0.0), int(7.0))), in0), res0)) \\ge ( abs(int(9.0)) + ( i2 + ( ( min(mod(in0,i2), int(4.0)) + abs(int(5.0)) ) - i1 ) ) ):{:\\nif ( divInt(int(0.0),i2) \\g int(0.0) or not b1 ):{:\\nloopBreak% = 0\\nwhile min(max(max(int(4.0), max(max(in1, res0), i2)), int(5.0)), abs(abs(abs(( min(int(7.0), mod(( ( int(2.0) + int(2.0) ) - int(1.0) ),in2)) * ( int(7.0) * int(7.0) ) ))))) \\ge in0:{:\\nloopBreak% = 0\\nwhile abs(min(min(int(0.0), res0), max(in2, in0))) == in0:{:\\nb0 = not min(i1, abs(int(9.0))) \\le in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif int(1.0) \\g int(5.0):{:\\ni1 = divInt(max(( mod(max(in0, int(6.0)),int(8.0)) + max(in1, divInt(int(0.0),abs(int(7.0)))) ), min(int(2.0), res0)),in1)\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif max(max(int(9.0), max(divInt(i1,min(mod(res0,abs(( in1 - abs(( int(7.0) + abs(i2) )) ))), ( max(in2, int(7.0)) * int(8.0) ))), in2)), min(divInt(( in0 - int(3.0) ),abs(int(5.0))), ( in1 + int(9.0) ))) \\ge i2:{:\\nres0 -= in2\\n:}else:{:\\nb0 = False\\n:}\\nb0 = b0\\nb2 = mod(int(7.0),int(7.0)) \\ge i0\\nb0 = not abs(min(int(2.0), min(i1, int(6.0)))) \\ge mod(int(0.0),i0)\\nb2 = mod(min(min(in2, in0), mod(abs(abs(int(2.0))),abs(min(min(abs(min(int(7.0), mod(int(2.0),mod(in1,in1)))), in0), divInt(mod(divInt(max(int(4.0), in0),( abs(abs(max(res0, int(7.0)))) - min(int(6.0), int(5.0)) )),res0),int(8.0)))))),i0) \\ge i1\\nloopBreak% = 0\\nwhile False:{:\\nres0 += abs(abs(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 999, "mapping_values": [1, 18, 18, 8, 10, 51, 51, 12, 8, 3, 24, 12, 12, 3, 4, 53, 4, 194, 36, 58, 19, 19]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 2, 0, 2, 1, 1, 1], [0, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 6, 7, 4, 2, 8, 4, 9, 7, 7, 3, 0, 8, 9, 3, 9, 5, 5, 2, 6, 4, 3], [2, 4, 2], [], [], [1, 1, 1], [0, 0, 0], [], [], [0, 0], [0, 6, 5, 0, 2, 5, 6, 2, 1, 3, 2, 4, 4, 3, 0, 1, 0, 5, 2, 6, 5, 5, 0, 1, 4, 4, 1, 6, 3, 1, 3, 5, 5, 0, 1, 3, 1, 6, 6, 4, 4], [0, 0, 0, 1], [3, 2, 2, 1, 0, 2, 3, 3, 2, 1, 3, 0, 3, 0, 2, 0, 0, 0, 0, 2, 3, 0, 1, 2, 0, 1, 3, 0, 1, 2, 2, 0, 1, 2, 3, 1, 2, 3, 3, 0, 1, 2, 2, 3, 2, 2, 2, 1, 2, 0, 2, 0, 3, 2, 0, 3, 0, 1, 1, 3, 0, 2, 1, 3, 0, 3, 2, 0, 0, 3, 3, 0, 3, 0, 1, 0, 1, 3, 1, 1, 2, 3, 0, 3, 3, 2, 2, 2, 2, 1, 1, 3, 0, 3, 0, 3, 3, 0, 2, 0, 0, 0, 3, 2, 0, 0, 1, 3, 1, 0, 0, 2, 0, 1, 2, 1, 3, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0], [2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 0, 0, 0], [1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1]], "fitness": 100, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(( mod(int(4.0),i0) - ( max(max(divInt(int(6.0),max(res0, abs(in2))), ( i0 * i2 )), in2) - res0 ) )) == ( max(i2, int(6.0)) - mod(i1,int(7.0)) ):{:\\nloopBreak% = 0\\nwhile max(in0, int(4.0)) \\le mod(( i2 - int(2.0) ),divInt(abs(int(8.0)),( max(max(in1, int(4.0)), mod(( max(divInt(( divInt(int(9.0),divInt(in1,mod(in0,max(divInt(i0,abs(i1)), int(7.0))))) - int(7.0) ),max(i0, ( int(3.0) - max(in2, max(( i2 * res0 ), min(abs(in2), min(in2, int(0.0))))) ))), i0) * int(8.0) ),abs(int(9.0)))) * int(3.0) ))):{:\\ni1 = mod(abs(in1),max(abs(divInt(( divInt(( int(9.0) - int(5.0) ),abs(in1)) - abs(i1) ),max(max(res0, mod(in0,i1)), in0))), min(mod(in2,in2), int(5.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(int(2.0), i0) == i1:{:\\nin0 = mod(i1,int(6.0))\\n:}\\nres0 = ( int(4.0) - min(int(3.0), res0) )\\nin1 *= in1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 23, 23, 3, 0, 0, 3, 3, 0, 0, 2, 41, 4, 120, 30, 30, 14, 17]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1], [7], [2], [0], [1], [0, 0, 1], [0], [3, 1], [0], [], [0, 5, 6], [0], [0, 0, 3, 1], [], [2], [], []], "fitness": 100, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( True or i0 == in2 )\\nres0 = abs(int(7.0))\\n", "other_info": {}, "test_fitness": 993, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 1, 3, 1, 2, 1, 0, 3, 1, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 1, 2, 1, 2, 2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 1, 0, 2, 1, 1, 0, 2, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 0, 9, 8, 5, 4, 1, 7, 5, 8, 0, 9, 7, 8, 1, 8, 7, 6, 7, 3, 7, 5, 2, 9, 0, 2, 7, 6, 4, 5, 9, 2, 8, 1, 4, 7, 5, 1, 3, 6, 0, 4, 9, 2, 8, 7, 2, 8, 0, 8, 8, 5, 8, 6, 1, 1, 0, 7, 7, 9, 1, 2, 5, 9, 6, 8, 9, 6, 9, 8, 7, 9, 6, 7, 7, 3, 0, 9, 7], [4, 4, 2, 3, 4, 3, 2, 2, 2, 1, 2], [2, 0, 0, 0, 1, 2, 0, 2, 1, 1, 0, 1], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1], [1, 0, 0, 0, 1], [5, 6, 5, 0, 2, 4, 2, 2, 3, 6, 1, 0, 2, 6, 4, 0, 5, 6, 4, 2, 5, 2, 0, 6, 1, 1, 5, 2, 3, 1, 6, 6, 5, 0, 0, 4, 0, 5, 5, 0, 5, 0, 2, 6, 6, 6, 2, 0, 2, 1, 0, 1, 2, 1, 0, 3, 6, 3, 2, 0, 2, 2, 2, 2, 3, 6, 6, 6, 1, 6, 0, 4, 3, 1, 6, 2, 5, 6, 6, 2, 1, 2, 4, 5, 3, 6, 3, 4, 6, 3, 3], [1, 0, 1, 1], [2, 1, 3, 2, 3, 3, 2, 3, 1, 3, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 2, 3, 3, 2, 0, 2, 2, 3, 1, 3, 0, 2, 1, 2, 1, 3, 1, 1, 3, 2, 1, 2, 2, 3, 0, 2, 0, 0, 0, 0, 3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 2, 2, 0, 3, 0, 2, 1, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 2, 1, 2, 2, 0, 3, 2, 0, 0, 3, 3, 2, 1, 3, 0, 3, 2, 3, 2, 1, 0, 2, 2, 0, 0, 3, 0, 1, 0, 2, 2, 0, 3, 0, 1, 3, 1, 3, 0, 2, 0, 1, 1, 3, 2, 3, 3, 0, 1, 1, 1, 1, 1, 3, 1, 2, 1, 0, 1, 2, 1, 0, 0, 3, 1, 0, 0, 3, 3, 1, 2, 1, 2, 1, 0, 0, 0, 1, 0, 0, 3, 1, 1, 3, 0, 3, 1, 2, 3, 1, 0, 3, 2, 2, 2, 3, 2, 0, 0, 0, 3, 0, 1, 3, 1, 3, 3, 0, 2, 0, 0, 1, 3, 0, 3, 3, 2, 3, 2, 0, 0, 3, 2, 3, 1, 0, 3, 3, 3, 2, 1, 0, 0, 3, 1, 2, 1, 2, 1, 1, 0, 2, 2, 1, 0, 3, 1, 2, 1, 3, 0, 3, 0, 3, 0, 1, 1, 3, 2, 3, 2, 1, 1, 2, 0, 2, 1, 3, 0, 0, 1, 1, 3, 3, 2, 3, 3, 1, 2, 0, 0, 3, 2, 0, 3, 2, 0, 0, 3, 2, 0, 1, 1, 0, 3, 1, 2, 1, 3, 2, 0, 3, 0, 0, 3, 1, 3, 2, 2, 3, 0, 2, 2, 2, 3, 0, 1, 2, 0, 1, 2, 0, 2, 0, 3, 1, 2, 2, 3, 3, 2, 1, 1, 0, 1, 3, 0, 2, 1, 3, 2, 1, 0, 1, 2, 2, 1, 1, 3, 3, 1, 1, 1, 0, 2, 0, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 0, 1, 1, 0, 2, 1, 1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 1, 0, 1, 0, 2, 1], [2, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 2, 2, 0, 1, 0, 0, 1, 2, 0, 0, 2, 1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0]], "fitness": 100, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(int(2.0),max(mod(abs(min(( min(int(7.0), abs(in2)) * ( ( divInt(( mod(res0,int(0.0)) - divInt(in2,mod(max(abs(mod(i0,divInt(( abs(int(9.0)) + abs(i2) ),( int(8.0) * divInt(int(5.0),max(int(4.0), int(1.0))) )))), abs(( int(7.0) * mod(mod(max(in1, divInt(i2,i2)),in0),res0) ))),abs(( int(5.0) * i1 )))) ),int(8.0)) - i0 ) + i2 ) ), int(0.0))),( ( mod(res0,mod(( in1 * max(i0, mod(int(9.0),max(max(max(in2, mod(res0,in1)), max(int(7.0), i2)), ( int(8.0) * ( mod(in2,min(( i2 - i0 ), max(max(( int(1.0) + abs(res0) ), abs(( max(divInt(int(8.0),i1), ( divInt(i1,in2) - max(i2, int(7.0)) )) * in0 ))), divInt(divInt(i1,min(res0, int(6.0))),abs(int(7.0)))))) * min(res0, mod(in2,int(3.0))) ) )))) ),int(7.0))) - abs(divInt(max(min(i0, int(5.0)), int(2.0)),int(9.0))) ) + int(0.0) )), int(2.0))) \\le min(int(7.0), ( int(6.0) * i0 )):{:\\nb2 = int(4.0) \\le ( int(5.0) * in1 )\\n:}else:{:\\nloopBreak% = 0\\nwhile b0:{:\\ni0 -= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile min(int(9.0), in2) == i0:{:\\nloopBreak% = 0\\nwhile min(max(int(2.0), ( int(8.0) + ( int(1.0) + in2 ) )), i0) \\ge i2:{:\\nif int(4.0) \\le res0:{:\\nif True:{:\\nres0 = res0\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not True\\nb0 = False\\nloopBreak% = 0\\nwhile b1:{:\\nif min(int(7.0), int(5.0)) \\ge max(i2, abs(int(1.0))):{:\\ni0 *= divInt(min(int(3.0), i2),abs(mod(mod(divInt(min(( i1 * i0 ), i1),max(i2, int(6.0))),abs(int(0.0))),max(min(i1, divInt(i0,in0)), int(4.0)))))\\n:}\\nb2 = False\\nb0 = max(res0, abs(min(( min(mod(in0,i2), max(divInt(max(int(9.0), i0),min(abs(max(( int(2.0) - i2 ), i2)), max(int(8.0), divInt(int(7.0),divInt(int(2.0),int(8.0)))))), i2)) * ( mod(int(0.0),i2) * min(int(8.0), ( int(8.0) + abs(in0) )) ) ), abs(res0)))) == abs(res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 -= int(5.0)\\nif int(8.0) == abs(mod(min(( int(6.0) + int(1.0) ), divInt(i1,( int(1.0) + abs(res0) ))),i0)):{:\\nb2 = b1\\n:}else:{:\\nb1 = False\\nb0 = int(0.0) == int(7.0)\\nloopBreak% = 0\\nwhile abs(abs(divInt(abs(abs(int(7.0))),divInt(in1,in0)))) \\g max(mod(i1,max(( res0 - i2 ), max(divInt(in2,int(9.0)), int(1.0)))), res0):{:\\nb1 = max(int(2.0), divInt(int(5.0),min(( res0 * abs(i2) ), i1))) == min(int(9.0), min(( divInt(abs(i2),mod(divInt(mod(max(in1, int(6.0)),( in2 + int(8.0) )),( in0 + ( res0 * min(int(9.0), divInt(divInt(max(min(( int(6.0) - int(9.0) ), in0), int(8.0)),max(in1, divInt(int(7.0),min(( int(9.0) - res0 ), int(6.0))))),( ( int(7.0) - int(7.0) ) - abs(max(int(3.0), int(0.0))) ))) ) )),int(9.0))) - in0 ), ( in0 - int(7.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 23, 23, 10, 13, 80, 80, 11, 12, 0, 20, 11, 9, 5, 5, 91, 4, 336, 86, 83, 42, 47]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [5, 2, 2], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(522.0)\\n", "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 1, 1], [1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 2, 1, 6, 6, 9, 7, 3, 6, 0, 5, 6, 3, 3, 3, 7, 5, 2, 5, 8, 1, 2, 7, 9, 9, 6, 0, 4, 8, 5, 7, 0, 2, 2, 4, 9, 7, 0, 5], [5, 0, 4, 5, 2, 4, 4, 0, 4], [0, 1, 2], [1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 3, 1, 3, 0, 2, 0], [0], [0, 0, 1, 0], [4, 1, 5, 0, 1, 2, 6, 1, 6, 5, 2, 3, 5, 2, 2, 5, 2, 0, 3, 4, 6, 1, 2, 6, 3, 0, 4, 6, 4, 0, 1, 3, 4, 0, 4, 6, 2, 3, 5, 0, 2, 2, 2, 2, 3, 1, 1, 1, 2, 3, 3, 3, 6, 3, 0, 3, 0, 1, 1, 1, 5, 4, 0], [1, 0, 0, 1], [1, 3, 0, 2, 3, 2, 0, 0, 1, 2, 1, 2, 0, 3, 3, 0, 2, 2, 3, 0, 3, 1, 1, 3, 0, 2, 2, 1, 0, 2, 1, 2, 1, 0, 0, 2, 1, 0, 3, 3, 2, 3, 0, 2, 1, 0, 3, 2, 0, 2, 2, 3, 2, 0, 3, 3, 3, 2, 1, 0, 0, 2, 1, 0, 3, 2, 2, 1, 3, 3, 0, 1, 3, 2, 0, 2, 0, 1, 1, 3, 1, 0, 2, 0, 2, 1, 0, 1, 2, 0, 1, 0, 0, 1, 0, 2, 3, 1, 1, 2, 0, 0, 0, 1, 3, 2, 1, 0, 0, 3, 3, 3, 3, 3, 0, 1, 1, 2, 1, 0, 0, 1, 0, 3, 3, 0, 1, 0, 2, 3, 2, 3, 1, 1, 2, 0, 2, 3, 2, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 0, 0, 0, 0, 3, 0, 0, 3, 2, 2, 3, 2, 3, 0, 1, 2, 0, 2, 3, 0, 0, 0, 2, 1, 1, 2, 0, 2, 1, 3, 0, 0, 3, 0, 2, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 2, 1, 0, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 0, 2, 1, 2, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0, 2, 1, 2, 0, 0, 0, 0, 2, 1, 0, 1], [0, 2, 0, 2, 1, 1, 2, 1, 2, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 100, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(8.0) != min(in1, ( max(( i1 + in2 ), int(3.0)) * ( int(2.0) + mod(i0,max(max(i1, ( mod(min(i2, abs(int(1.0))),int(6.0)) * max(res0, ( divInt(int(6.0),i1) - divInt(int(9.0),divInt(int(7.0),res0)) )) )), in2)) ) )) or not mod(int(3.0),i2) \\l min(abs(( abs(in0) - divInt(int(6.0),in2) )), max(mod(i2,divInt(divInt(abs(mod(i2,max(abs(max(mod(int(0.0),in2), i2)), ( int(5.0) * i0 )))),max(( ( int(6.0) - abs(max(in0, int(3.0))) ) * min(mod(in1,mod(res0,int(3.0))), int(3.0)) ), abs(int(7.0)))),i1)), mod(i2,( int(5.0) - res0 )))) ):{:\\nif int(2.0) \\le ( in0 + int(5.0) ):{:\\nif i0 != in1:{:\\nres0 += int(8.0)\\n:}\\n:}\\nloopBreak% = 0\\nwhile in1 == ( max(int(1.0), int(2.0)) + divInt(i0,i1) ):{:\\nif ( in0 \\le int(7.0) and True ):{:\\nif ( b0 or abs(( int(9.0) + in1 )) \\le i0 ):{:\\nloopBreak% = 0\\nwhile not min(min(min(min(min(in1, int(9.0)), int(6.0)), divInt(int(0.0),res0)), i2), int(4.0)) \\l in0:{:\\nin2 = max(max(i0, int(8.0)), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\ni2 = ( abs(divInt(abs(int(5.0)),int(7.0))) - ( i2 + ( max(divInt(min(int(0.0), abs(( i2 * ( max(int(2.0), abs(int(2.0))) + min(in0, i1) ) ))),i1), i1) + min(i2, in0) ) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = min(( divInt(min(mod(abs(in0),int(4.0)), ( in0 - ( max(res0, in0) - i0 ) )),mod(int(9.0),int(7.0))) + divInt(in0,( int(0.0) + min(i0, i1) )) ), max(i1, divInt(int(5.0),i1))) \\le in2\\nin1 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 8, 5, 40, 40, 9, 3, 3, 17, 9, 8, 1, 4, 63, 4, 189, 46, 44, 24, 24]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 0, 0, 1, 0], [0], [1, 0, 0, 0, 1, 1], [1, 1, 1, 1], [1, 4, 5, 7], [0], [0, 1, 0, 1, 1], [], [1, 0, 0, 0], [0], [0, 0, 1], [1], [1], [3, 0, 0, 6, 0, 6, 3], [1, 1, 0], [1, 2, 2, 0, 0, 1, 1, 0, 2, 0, 1], [0, 1, 1], [], [1, 2, 2], [1, 1]], "fitness": 100, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= int(1.0)\\nif ( mod(i0,i0) * int(4.0) ) \\l int(5.0):{:\\nb0 = b1\\nb0 = b1\\nb1 = False\\n:}else:{:\\nres0 *= i0\\n:}\\nres0 = mod(in0,int(7.0))\\n", "other_info": {}, "test_fitness": 997, "mapping_values": [1, 7, 7, 1, 6, 4, 4, 1, 5, 0, 4, 1, 3, 1, 1, 7, 3, 11, 3, 0, 3, 2]}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1], [2, 2, 0, 0, 0, 0, 0], [0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 3, 9, 6, 6, 2, 1, 7, 4, 8, 0, 1, 2, 5, 4, 3, 1, 3, 8, 6, 3, 5, 8, 4, 6, 5, 9, 6, 7, 9, 8, 1, 5, 1, 3, 9, 3, 7, 5, 9, 7, 3, 5, 5, 5, 3, 9, 3, 8, 5, 2, 6, 5], [5, 3], [], [], [1, 1], [0, 0], [], [], [1], [3, 6, 5, 1, 3, 0, 6, 4, 5, 0, 1, 1, 3, 5, 2, 1, 6, 2, 4, 4, 6, 2, 0, 4, 2, 6, 1, 0, 4, 3, 3, 3, 1, 5, 0, 0], [0, 1, 1, 1, 1], [3, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 3, 1, 2, 0, 2, 1, 0, 3, 0, 1, 2, 3, 1, 3, 1, 3, 2, 1, 3, 0, 0, 1, 0, 2, 3, 3, 3, 3, 2, 3, 3, 2, 1, 2, 2, 3, 1, 0, 3, 2, 2, 3, 3, 3, 3, 1, 1, 3, 0, 0, 0, 2, 0, 1, 3, 3, 1, 1, 2, 0, 2, 3, 2, 2, 1, 2, 2, 0, 2, 1, 2, 2, 1, 3, 1, 2, 0, 2, 1, 2, 3, 1, 2, 1, 1, 3, 3, 3, 0, 1, 3, 3, 3, 0, 2, 0, 2, 3, 1, 1, 3, 3, 1, 0, 1, 1, 1, 1, 3, 0, 1, 2, 3, 2, 2, 2, 3, 2, 0, 1, 0, 1, 0, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 3, 3, 3, 0, 2, 1, 0, 3, 1, 0, 2, 1, 3, 0, 2, 2, 1, 3, 3, 0, 3, 1, 3, 3, 1, 3, 3, 1, 0, 3, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 2, 2, 0, 1, 0, 0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 1, 1, 0, 1, 2, 1, 0, 2, 0, 1, 0, 0, 1, 1, 0, 2, 1, 2, 1, 2, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 0], [0, 2, 1, 2, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 2, 1, 2, 2, 0, 0, 0, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1]], "fitness": 100, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(int(8.0), ( int(5.0) + ( ( int(3.0) * ( int(9.0) - ( int(6.0) * max(int(6.0), ( in0 * ( int(2.0) + res0 ) )) ) ) ) - abs(in2) ) )) != int(1.0):{:\\nloopBreak% = 0\\nwhile ( abs(int(7.0)) * min(int(4.0), max(divInt(int(8.0),min(i1, in0)), int(0.0))) ) \\ge i0:{:\\nres0 = ( min(min(abs(abs(( max(abs(( int(1.0) * ( ( abs(int(2.0)) + in1 ) + abs(mod(divInt(abs(abs(max(abs(int(5.0)), int(4.0)))),abs(in2)),i0)) ) )), i1) - ( i1 + int(3.0) ) ))), min(min(int(1.0), int(3.0)), ( in0 * ( max(mod(divInt(int(8.0),( mod(in2,divInt(int(6.0),divInt(( int(3.0) * max(int(5.0), ( i2 - ( int(8.0) * ( min(int(4.0), ( int(6.0) * int(5.0) )) + max(abs(max(i1, int(9.0))), min(abs(min(res0, ( i2 + divInt(max(int(6.0), int(7.0)),min(min(int(9.0), in1), int(8.0))) ))), int(1.0))) ) ) )) ),int(5.0)))) + int(1.0) )),max(in1, int(3.0))), mod(max(( mod(mod(min(( res0 - int(9.0) ), i2),int(3.0)),i0) * abs(in1) ), max(int(7.0), abs(int(5.0)))),int(9.0))) * max(i2, int(7.0)) ) ))), abs(abs(min(res0, ( int(3.0) + i1 ))))) + abs(int(5.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 -= in1\\nin0 *= ( int(5.0) * max(in0, ( ( int(5.0) * min(max(in0, min(int(3.0), abs(min(int(9.0), max(max(int(3.0), i1), min(int(8.0), int(5.0))))))), int(2.0)) ) - int(6.0) )) )\\nin2 -= int(5.0)\\ni0 += i0\\n:}\\n", "other_info": {}, "test_fitness": 998, "mapping_values": [1, 7, 7, 2, 5, 54, 54, 2, 0, 0, 2, 2, 0, 0, 1, 36, 5, 180, 41, 54, 33, 12]}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 0, 0, 2, 0], [1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [6, 0, 5, 9, 6, 8, 3, 6, 2, 4, 4, 3, 7, 4, 5, 6, 1, 4, 0, 2, 2, 2, 5, 5, 9, 9, 9, 3, 4, 1, 4, 8, 3, 7, 8, 0, 3, 4, 6, 2, 2, 6, 2, 2, 1, 3, 1, 5, 0, 9, 0, 6], [2, 1, 0], [1], [], [1, 1, 1], [0, 0, 0], [], [], [], [5, 0, 2, 5, 6, 6, 3, 6, 6, 6, 2, 1, 3, 5, 1, 6, 2, 0, 0, 6, 5, 4, 6, 5, 3, 2, 6, 5, 6, 5, 6, 2, 3, 2, 1, 5, 6, 1], [1, 0], [1, 2, 2, 3, 1, 2, 3, 0, 1, 3, 3, 2, 2, 1, 1, 2, 3, 1, 0, 3, 1, 2, 3, 0, 3, 2, 2, 3, 2, 0, 3, 2, 3, 0, 2, 0, 3, 3, 0, 2, 3, 2, 0, 0, 1, 1, 2, 0, 2, 1, 1, 3, 3, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 2, 0, 2, 3, 0, 2, 3, 2, 3, 2, 2, 3, 2, 2, 1, 3, 1, 0, 3, 2, 0, 0, 3, 1, 0, 3, 2, 3, 1, 2, 3, 3, 1, 1, 2, 1, 3, 1, 0, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 0, 0, 3, 1, 1, 2, 2, 3, 3, 1, 2, 2, 0, 0, 3, 1, 1, 2, 1, 1, 2, 2, 0, 3, 2, 3, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 1, 1, 1, 0, 1, 1, 0, 2, 0, 0, 2, 3, 3, 2, 2, 0, 3, 1, 3, 3, 1, 0, 1, 2, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 1, 2, 0, 1, 1, 2, 0, 0, 0, 2, 2, 2, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 0], [1, 2, 2, 2, 1, 0, 2, 2, 1, 1, 1, 0, 1, 2, 2, 2, 0, 0, 2, 2, 0, 0, 1, 2, 2], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1]], "fitness": 100, "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(6.0) == divInt(( abs(int(0.0)) - ( min(in2, int(5.0)) * min(abs(( mod(int(9.0),int(6.0)) * ( max(int(8.0), i0) * min(int(3.0), ( max(i2, max(mod(divInt(min(divInt(in2,abs(( min(res0, ( res0 - max(abs(in0), mod(min(mod(res0,res0), int(6.0)),int(2.0))) )) + mod(res0,divInt(int(4.0),int(4.0))) ))), max(max(( mod(int(3.0),i2) * divInt(( i1 * int(7.0) ),int(4.0)) ), divInt(int(5.0),( int(6.0) - divInt(( in0 - mod(abs(in2),divInt(min(divInt(min(divInt(mod(min(( divInt(int(1.0),abs(int(4.0))) - i1 ), abs(( res0 + i2 ))),abs(int(0.0))),i0), abs(( abs(int(2.0)) - ( max(min(int(2.0), int(2.0)), ( int(5.0) * max(int(5.0), i0) )) * abs(min(max(res0, in2), int(9.0))) ) ))),int(9.0)), int(9.0)),int(3.0))) ),int(4.0)) ))), in1)),res0),min(int(1.0), int(4.0))), ( mod(min(abs(int(8.0)), divInt(divInt(in2,in0),max(int(3.0), int(7.0)))),mod(int(8.0),int(0.0))) * ( ( i2 + min(( min(res0, int(3.0)) + int(4.0) ), in2) ) * ( abs(int(6.0)) * int(2.0) ) ) ))) + max(( int(2.0) + int(6.0) ), int(2.0)) )) ) )), int(2.0)) ) ),res0):{:\\nin2 -= int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(31.0)\\nloopBreak% = 0\\nwhile i2 \\g ( in0 * i2 ):{:\\nb1 = divInt(max(max(( divInt(i1,abs(int(5.0))) * abs(min(int(0.0), in2)) ), int(9.0)), mod(int(0.0),int(6.0))),res0) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 995, "mapping_values": [1, 5, 5, 2, 3, 52, 52, 3, 1, 0, 3, 3, 0, 0, 0, 38, 2, 181, 50, 44, 25, 26]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 0, 2, 2, 2, 2, 0, 0, 1, 0, 2, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 6, 5, 8, 5, 6, 1, 4, 0, 6, 6, 7, 6, 1, 2, 9, 5, 8, 8, 5, 6, 3, 1, 2, 9, 5, 5, 7, 7, 8, 5, 5, 1, 1, 2, 8, 1, 8, 9, 4, 1, 5, 4, 9, 6, 5, 7, 7, 1, 8, 6, 2, 0, 5, 4, 8, 3, 3, 8, 5, 0, 9, 1, 9, 6, 3, 5, 4, 7, 3, 9, 2, 7, 5, 1, 9, 5, 9, 9, 9, 1, 4, 0, 7, 7, 2, 7, 1, 1, 8, 0, 4, 2, 0, 7, 0, 5, 0, 0, 0, 9, 5, 0, 3, 9, 9, 2, 3, 0, 9, 2, 4, 3], [0, 4, 0, 1, 4, 4, 5, 5, 4, 0, 5, 1, 1, 3, 1, 4], [1, 1, 0, 1, 2], [1, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 3, 2, 3, 2, 2], [1], [0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 6, 0, 2, 2, 0, 6, 2, 6, 4, 6, 2, 4, 0, 1, 5, 3, 3, 1, 5, 6, 2, 5, 2, 4, 2, 2, 1, 1, 2, 3, 5, 2, 5, 5, 3, 3, 1, 0, 5, 5, 3, 6, 4, 2, 2, 0, 0, 1, 3, 5, 0, 3, 3, 6, 3, 0, 5, 4, 6, 1, 4, 5, 2, 6, 1, 5, 1, 6, 4, 4, 5, 1, 5, 3, 1, 4, 4, 0, 2, 2, 3, 3, 4, 3, 0, 6, 2, 3, 6, 2, 2, 2, 3, 1, 0, 4, 4, 4, 2, 3, 4, 0, 4, 5, 4, 2, 2, 2, 3, 4, 5, 4, 6, 4, 0, 5, 4, 3, 5, 6, 4, 1, 3, 3, 5], [1, 1, 1, 1, 1, 0, 1, 0], [0, 3, 3, 2, 0, 0, 3, 2, 1, 3, 1, 3, 2, 3, 3, 1, 1, 1, 3, 3, 1, 2, 2, 2, 1, 0, 2, 0, 0, 1, 1, 3, 0, 3, 2, 1, 3, 2, 3, 3, 0, 0, 1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 1, 2, 0, 0, 3, 3, 0, 3, 3, 0, 1, 0, 0, 1, 1, 1, 2, 3, 0, 0, 0, 2, 3, 1, 3, 0, 2, 2, 3, 0, 2, 2, 3, 1, 3, 3, 1, 2, 2, 2, 2, 0, 1, 2, 3, 1, 2, 1, 0, 1, 1, 2, 2, 1, 2, 3, 3, 0, 1, 2, 0, 1, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 3, 0, 2, 1, 0, 3, 1, 3, 1, 3, 0, 1, 1, 3, 0, 1, 2, 2, 2, 0, 0, 2, 3, 3, 2, 2, 2, 3, 2, 0, 2, 0, 1, 3, 3, 0, 1, 1, 3, 0, 3, 1, 0, 2, 3, 2, 2, 1, 0, 1, 0, 0, 0, 1, 3, 0, 1, 2, 3, 3, 3, 3, 3, 1, 3, 0, 3, 2, 2, 0, 2, 3, 3, 3, 1, 1, 0, 1, 3, 1, 2, 0, 0, 2, 3, 0, 3, 3, 0, 0, 1, 1, 3, 1, 2, 3, 3, 3, 1, 3, 0, 3, 2, 0, 1, 1, 1, 3, 3, 3, 2, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 2, 1, 1, 2, 2, 3, 1, 2, 3, 0, 0, 3, 1, 0, 3, 2, 2, 1, 3, 1, 2, 3, 1, 0, 0, 2, 0, 2, 1, 0, 2, 1, 1, 3, 1, 3, 3, 3, 3, 3, 2, 0, 3, 3, 2, 0, 2, 1, 3, 0, 2, 2, 0, 3, 3, 2, 3, 3, 2, 0, 1, 3, 1, 0, 1, 1, 1, 2, 1, 3, 3, 2, 2, 3, 3, 2, 0, 0, 1, 1, 1, 2, 3, 2, 0, 2, 2, 0, 0, 0, 0, 0, 1, 3, 0, 1, 2, 0, 2, 1, 2, 3, 3, 2, 3, 1, 1, 0, 2, 2, 0, 3, 3, 0, 0, 0, 1, 3, 0, 1, 2, 1, 0, 0, 1, 2, 3, 0, 3, 3, 2, 0, 2, 0, 2, 2, 0, 0, 3, 3, 0, 1, 2, 3, 0, 2, 2, 1, 3, 1, 1, 2, 2, 2, 2, 3, 3, 0, 2, 1, 1, 2, 3, 3, 1, 3, 0, 3, 1, 3, 2, 1, 1, 3, 3, 0, 1, 2, 3, 0, 2, 1, 0, 3, 0, 0, 3, 0, 0, 0, 3, 2, 3, 1, 0, 3, 0, 0, 0, 1, 2, 2, 2, 0, 1, 3, 0, 1, 2, 1, 0, 0, 1, 0, 1, 1, 1, 3, 3, 3, 0, 1, 0, 0, 3, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [2, 0, 1, 2, 0, 2, 2, 2, 2, 0, 1, 0, 2, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2, 1, 1, 0, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 0, 0, 1, 1, 0, 2, 0, 1, 1, 2, 2, 0, 2, 0, 2, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 0, 2, 1, 1, 0, 1, 2, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 2, 2, 0, 1, 1, 1, 0, 0, 2], [0, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 1, 1, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 2, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0]], "fitness": 100, "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += i1\\nloopBreak% = 0\\nwhile abs(min(( i1 - i0 ), max(mod(int(8.0),abs(int(4.0))), min(mod(abs(abs(int(6.0))),int(5.0)), int(8.0))))) \\l abs(abs(int(5.0))):{:\\ni1 -= ( ( mod(int(6.0),res0) * divInt(i0,i2) ) * int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not False:{:\\nb1 = ( not ( int(4.0) \\le min(i2, max(( int(0.0) * min(( abs(abs(i0)) - res0 ), int(6.0)) ), int(6.0))) or ( ( abs(mod(min(mod(i2,( int(7.0) - ( res0 - in1 ) )), max(max(res0, abs(abs(i2))), int(6.0))),in1)) - i0 ) - int(1.0) ) \\l int(2.0) ) or int(9.0) \\g ( min(i1, in2) + in0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( max(int(5.0), abs(in0)) + divInt(( max(i1, ( mod(min(int(8.0), min(abs(int(8.0)), mod(( ( ( in2 - int(5.0) ) + divInt(abs(int(6.0)),( int(3.0) - res0 )) ) + int(1.0) ),int(2.0)))),( ( int(9.0) - ( abs(abs(i2)) + int(5.0) ) ) - ( in2 + int(5.0) ) )) * ( ( mod(divInt(int(7.0),int(7.0)),int(8.0)) + int(5.0) ) + i2 ) )) - in1 ),abs(i2)) ) \\le divInt(int(5.0),i2):{:\\ni1 -= min(int(1.0), abs(int(1.0)))\\nif min(i1, int(2.0)) \\le int(8.0):{:\\nloopBreak% = 0\\nwhile abs(i2) != int(1.0):{:\\nin0 += divInt(mod(divInt(in2,i2),mod(min(abs(( divInt(( max(( in2 + mod(in2,int(8.0)) ), abs(min(in0, int(9.0)))) + int(4.0) ),abs(in0)) - max(int(1.0), i1) )), ( max(( ( int(5.0) + i0 ) * int(4.0) ), in2) - in2 )),in0)),int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 -= min(in1, int(6.0))\\nb1 = not divInt(max(abs(min(abs(min(int(5.0), min(i2, max(( mod(i2,divInt(abs(abs(abs(int(7.0)))),int(7.0))) - i0 ), int(1.0))))), min(int(8.0), ( i0 - i1 )))), mod(max(in0, abs(abs(in2))),i0)),int(6.0)) != int(2.0)\\nif max(int(0.0), ( abs(min(min(int(5.0), min(in0, min(( in0 * int(4.0) ), int(8.0)))), int(3.0))) * max(max(min(mod(res0,abs(min(max(in0, i0), in2))), in1), max(res0, mod(int(3.0),int(8.0)))), ( ( abs(int(5.0)) - ( abs(i1) + in1 ) ) + min(int(0.0), in2) )) )) \\le abs(( divInt(int(9.0),min(int(1.0), divInt(abs(int(9.0)),i2))) - res0 )):{:\\nif ( i1 * mod(int(6.0),in2) ) \\l ( int(3.0) + int(5.0) ):{:\\nif max(int(4.0), min(max(min(abs(abs(( i1 + abs(max(mod(res0,( int(7.0) + max(in1, ( mod(in1,min(min(mod(abs(max(divInt(in2,int(3.0)), max(int(9.0), i1))),int(2.0)), int(7.0)), int(5.0))) + mod(int(1.0),min(max(divInt(divInt(abs(max(mod(in2,in0), int(9.0))),int(5.0)),int(9.0)), ( min(mod(i1,divInt(( in1 + in1 ),i0)), i2) * i2 )), int(9.0))) )) )), abs(in0))) ))), int(9.0)), divInt(in0,( int(1.0) + mod(min(min(divInt(max(int(4.0), int(0.0)),in1), ( ( in0 + max(min(i0, res0), i2) ) + int(7.0) )), min(in0, int(7.0))),divInt(int(2.0),res0)) ))), i2)) != int(7.0):{:\\nloopBreak% = 0\\nwhile ( abs(i2) - abs(abs(( i2 + mod(in0,( ( i1 - i0 ) + max(max(in1, int(1.0)), ( min(in1, ( divInt(int(1.0),max(int(8.0), int(0.0))) * ( ( divInt(divInt(min(max(in1, ( int(4.0) - int(2.0) )), divInt(max(max(int(0.0), max(i2, max(int(7.0), min(mod(int(0.0),int(5.0)), min(max(in0, int(0.0)), ( min(in1, ( int(0.0) * i0 )) - abs(in1) )))))), in2),min(in1, i2))),i2),abs(mod(abs(int(0.0)),i2))) + min(in0, in1) ) * in2 ) )) * int(9.0) )) )) ))) ) \\g ( ( divInt(in1,int(5.0)) + max(res0, int(0.0)) ) - mod(int(3.0),in1) ):{:\\nb0 = i0 \\g int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb1 = not in2 \\ge int(9.0)\\n:}\\n:}else:{:\\nin1 = int(2.0)\\nin0 += int(3.0)\\nif max(max(min(in2, int(0.0)), res0), in1) \\g min(abs(int(9.0)), i1):{:\\nin0 = int(2.0)\\n:}\\nb2 = ( in0 + divInt(int(4.0),in2) ) \\le int(3.0)\\n:}\\n", "other_info": {}, "test_fitness": 993, "mapping_values": [1, 23, 23, 10, 13, 114, 114, 16, 5, 2, 23, 16, 7, 1, 5, 130, 8, 480, 113, 131, 67, 52]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [1, 2, 1, 0, 0, 1], [0], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 3, 6, 3, 5, 6, 8, 2, 2, 0, 5, 6, 8, 2, 2, 7, 6, 2], [1], [2, 0], [], [0, 0, 1], [0], [2, 0], [], [1], [0, 2, 3, 6, 3, 0, 2, 6, 6, 2, 0, 4, 3, 5, 0, 0, 0], [1, 1, 0, 0], [3, 2, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2, 2, 3, 2, 0, 3, 3, 3, 1, 3, 0, 2, 3, 1, 3, 1, 3, 1, 0, 3, 2, 2, 2, 1, 1, 3, 3, 3, 0, 1, 2, 3, 3, 0, 2, 0, 3, 0, 0, 2, 1, 2, 3, 1, 2, 3, 1, 1, 1, 3, 3, 0, 0, 3, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 2, 1, 2, 2, 0, 2, 2, 2, 1, 2, 1, 0, 1, 1, 1, 2, 2, 1, 0, 2], [0, 0, 0, 2, 2, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1, 1, 1]], "fitness": 100, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not b0\\nif max(( int(9.0) + int(7.0) ), ( int(3.0) + int(6.0) )) \\g int(3.0):{:\\ni0 += i2\\nin0 *= int(5.0)\\nres0 = ( divInt(( abs(( in0 * max(abs(abs(int(6.0))), min(i0, mod(abs(int(8.0)),abs(int(2.0))))) )) - abs(int(2.0)) ),i2) + max(( ( ( int(0.0) * int(5.0) ) - abs(max(min(res0, int(6.0)), mod(max(max(res0, mod(i2,max(i0, in1))), mod(int(8.0),( abs(int(2.0)) - ( abs(int(2.0)) * int(7.0) ) ))),int(6.0)))) ) * max(min(in0, in2), abs(int(2.0))) ), i0) )\\n:}else:{:\\ni0 = i0\\n:}\\n", "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 6, 6, 1, 5, 19, 19, 1, 2, 0, 3, 1, 2, 0, 1, 17, 4, 68, 15, 21, 12, 5]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [7, 7], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(77.0)\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [0], []], "fitness": 100, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(9.0)\\n", "other_info": {}, "test_fitness": 989, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1], [1, 0, 4, 5], [], [], [], [], [], [], [], [], [6, 3, 5, 6, 3], [1], [2, 2, 2, 1, 0, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0], [1, 1, 0, 1, 0, 1], [1], [0, 0, 2], [1, 1, 1, 1]], "fitness": 100, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += mod(mod(( int(1.0) + in0 ),max(mod(in2,int(0.0)), int(4.0))),( res0 * mod(int(5.0),in0) ))\\n", "other_info": {}, "test_fitness": 993, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 15, 6, 1, 3, 4]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [0, 1], [1, 1, 0, 0, 1], [5, 0, 2, 1, 8], [1], [1, 0], [1], [0, 1, 0, 0, 0], [0], [3, 0, 2, 1], [0], [], [1, 4, 4, 1, 6], [1], [3, 1, 3, 2, 0, 0, 3, 0, 0, 1, 1], [1], [1, 1, 0], [0], [1]], "fitness": 100, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( max(int(5.0), max(mod(i1,in1), min(in1, i1))) \\g int(0.0) or b1 ):{:\\nb0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 += int(218.0)\\n", "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 3, 3, 1, 2, 5, 5, 1, 2, 1, 5, 1, 4, 1, 0, 5, 1, 11, 1, 3, 1, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 2, 1, 1, 1, 0, 0], [0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 8, 3, 0, 7, 0, 8, 7, 2, 4, 4, 0, 5, 9, 0, 1, 4, 5, 4, 2, 2, 1, 8, 3, 0, 3, 1, 5, 9, 6, 0, 8, 9, 8, 5, 7, 2, 7, 2, 4, 3, 0, 2, 2, 0, 8, 7, 7, 3, 3, 3, 2, 0, 8, 4, 5, 8, 4, 2, 2, 7, 3, 3, 5, 6, 5, 4, 5, 6, 4, 0, 6, 4, 4, 0, 6, 8, 9, 0, 3, 4, 8, 6, 3, 8, 5, 6, 9, 7, 2, 7, 9, 9, 3, 5, 2, 5, 0, 8, 6, 8, 6, 3, 0, 5, 7, 8, 1, 2, 1, 1, 7, 7, 7, 1, 0, 6, 4, 8, 1, 3, 7, 0, 8, 1, 4, 2, 0, 9, 2, 2, 3, 0, 4, 8, 2, 2, 3, 8, 3, 4, 8, 8, 7, 6, 2, 4, 0, 2, 4, 2, 4, 0, 9, 9, 3, 7, 2, 6, 1, 7, 6, 2, 7, 5, 7, 5, 2, 2, 5, 9, 5, 7, 7, 4, 1, 0, 9, 7, 3], [2, 5, 1, 1, 1, 5, 4, 1, 3], [0, 1, 0, 0, 1, 2], [0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 2, 2], [], [1], [1, 0, 5, 5, 4, 3, 0, 0, 5, 2, 4, 2, 5, 4, 4, 2, 0, 2, 0, 6, 6, 4, 1, 3, 2, 2, 1, 4, 0, 6, 1, 6, 4, 2, 6, 1, 1, 6, 0, 4, 2, 6, 3, 3, 0, 2, 6, 3, 3, 5, 5, 0, 0, 0, 6, 6, 5, 3, 2, 1, 5, 4, 4, 3, 5, 1, 5, 4, 6, 0, 5, 1, 5, 3, 0, 0, 5, 4, 4, 2, 4, 4, 0, 1, 3, 5, 0, 6, 5, 5, 2, 0, 3, 2, 4, 3, 4, 6, 1, 6, 3, 0, 3, 4, 1, 0, 5, 0, 6, 0, 4, 4, 3, 5, 3, 0, 4, 1, 5, 5, 0, 4, 1, 5, 6, 2, 5, 6, 6, 4, 1, 0, 1, 6, 3, 6, 4, 0, 4, 1, 5, 3, 6, 4, 5, 5, 6, 6, 0, 0, 5, 1, 0, 3, 2, 2, 5, 1, 0, 6, 6, 5, 0, 6, 2, 5, 5, 2, 3], [1, 1, 1], [2, 2, 3, 3, 1, 3, 1, 3, 2, 1, 3, 2, 0, 3, 3, 2, 0, 1, 3, 3, 3, 0, 3, 2, 0, 1, 2, 3, 1, 3, 1, 0, 1, 1, 3, 1, 1, 3, 3, 2, 3, 0, 3, 2, 3, 2, 1, 0, 1, 3, 3, 2, 0, 0, 2, 3, 3, 3, 3, 0, 3, 1, 3, 1, 1, 2, 0, 3, 3, 1, 3, 2, 2, 3, 3, 0, 1, 2, 0, 3, 0, 2, 0, 0, 3, 3, 1, 2, 1, 1, 2, 3, 1, 2, 2, 1, 0, 1, 3, 1, 1, 1, 0, 2, 0, 3, 1, 1, 1, 0, 0, 3, 1, 2, 2, 3, 0, 2, 0, 0, 1, 3, 1, 3, 1, 1, 1, 0, 1, 2, 3, 3, 3, 2, 0, 3, 2, 0, 3, 0, 0, 3, 1, 0, 3, 2, 3, 2, 1, 2, 0, 2, 1, 0, 1, 3, 2, 3, 1, 3, 2, 0, 3, 1, 3, 1, 0, 0, 2, 0, 2, 3, 2, 1, 3, 2, 1, 2, 2, 3, 2, 0, 0, 3, 2, 2, 2, 0, 2, 1, 1, 2, 1, 3, 1, 2, 3, 1, 3, 2, 0, 2, 1, 1, 3, 2, 2, 0, 3, 1, 0, 1, 1, 1, 3, 3, 2, 1, 3, 3, 3, 0, 3, 0, 0, 0, 2, 1, 2, 1, 0, 2, 1, 0, 0, 0, 2, 1, 3, 3, 0, 3, 0, 2, 0, 2, 0, 3, 0, 1, 1, 1, 0, 1, 3, 0, 2, 3, 2, 1, 2, 1, 3, 3, 0, 1, 2, 3, 0, 2, 1, 2, 3, 3, 3, 0, 3, 3, 2, 0, 3, 2, 2, 2, 0, 3, 0, 3, 1, 3, 0, 3, 0, 2, 1, 0, 0, 3, 0, 2, 0, 2, 3, 1, 2, 1, 3, 2, 2, 3, 3, 1, 3, 1, 0, 2, 2, 0, 2, 3, 2, 2, 3, 1, 1, 3, 0, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 1, 0, 3, 2, 2, 3, 2, 1, 1, 3, 1, 3, 3, 0, 3, 1, 0, 0, 0, 1, 0, 1, 3, 3, 3, 1, 2, 1, 2, 0, 3, 2, 3, 0, 1, 2, 2, 2, 2, 2, 3, 2, 3, 2, 3, 3, 3, 3, 1, 3, 1, 0, 1, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 0, 0, 0, 0, 1, 3, 0, 0, 2, 3, 2, 0, 2, 0, 0, 1, 3, 3, 3, 3, 3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 2, 1, 3, 1, 0, 1, 3, 0, 3, 0, 3, 0, 1, 1, 3, 1, 1, 3, 3, 1, 1, 2, 3, 3, 2, 1, 3, 0, 3, 3, 0, 0, 2, 1, 3, 1, 0, 2, 1, 2, 1, 1, 1, 3, 1, 2, 1, 3, 0, 2, 1, 1, 3, 0, 1, 2, 2, 3, 3, 3, 2, 2, 1, 0, 1, 0, 2, 3, 1, 1, 2, 2, 2, 2, 0, 3, 1, 0, 0, 3, 0, 1, 2, 1, 2, 3, 3, 2, 3, 2, 3, 3, 0, 2, 2, 2, 2, 3, 2, 0, 1, 0, 3, 2, 1, 2, 1, 3, 0, 2, 1, 2, 0, 3, 2, 2, 1, 3, 3, 0, 3, 2, 3, 3, 0, 1, 1, 3, 1, 2, 0, 1, 3, 1, 0, 3, 1, 1, 0, 2, 0, 0, 2, 1, 0, 2, 3, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 1, 1, 1, 2, 2, 0, 0, 2, 1, 2, 1, 3, 2, 0, 0, 1, 2, 1, 2, 0, 0, 3, 1, 0, 3, 3, 1, 0, 1, 2, 2, 3, 0, 1, 0, 0, 3, 1, 2, 0, 1, 0, 3, 2, 1, 2, 3, 1, 0, 1, 2, 2, 1, 1, 1, 0, 3, 2, 3, 0, 2, 2, 2, 3, 0, 1, 2, 2, 3, 3, 2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 1, 2, 3, 0, 1, 1, 2, 3, 1, 2, 2, 3, 2, 2, 3, 3, 2, 0, 0, 2, 0, 2, 2, 1, 1, 3, 3, 0, 0, 2, 3, 0, 0, 3, 1, 2, 1, 2, 3, 3, 0, 3, 1, 3, 0, 2, 0, 2, 0, 0, 1, 1, 3, 1, 3, 1, 1, 2, 2, 2, 3, 0, 2, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 3, 0, 3, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 0, 2, 1, 1, 1, 2, 2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 2, 1, 0, 1, 1, 2, 2, 0, 0, 1, 0, 0, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 0, 1, 2, 0, 0, 2, 2, 2, 1, 2, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 0, 2, 2, 1, 0, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 2, 2, 1, 1, 2, 0, 1, 0, 0, 0, 0, 1, 2, 2, 0, 1, 1, 2, 1, 0, 2, 1, 0, 0, 1, 0, 2, 2, 1, 0, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 2, 2, 0, 2, 2, 0, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 0, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 0], [2, 1, 1, 2, 1, 0, 0, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 0, 0, 2, 2, 0, 2, 0, 1, 2, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 1, 0, 1, 1, 0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 1, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 2, 0, 1, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0]], "fitness": 100, "tree_depth": 119, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not ( ( max(min(int(5.0), max(int(8.0), abs(mod(int(8.0),min(mod(i1,min(max(mod(i0,int(3.0)), abs(abs(max(in2, min(( in2 * int(0.0) ), divInt(abs(int(7.0)),min(int(0.0), in1))))))), int(8.0))), int(7.0)))))), abs(int(2.0))) - int(4.0) ) - abs(abs(mod(min(in0, min(mod(abs(( int(4.0) * i0 )),int(0.0)), abs(max(( i0 - in2 ), divInt(abs(max(max(min(i2, min(int(5.0), min(int(9.0), int(0.0)))), ( in1 + min(max(int(1.0), min(( ( abs(abs(i2)) + int(4.0) ) * mod(in2,abs(in1)) ), ( in1 * i2 ))), max(abs(int(5.0)), mod(int(4.0),int(2.0)))) )), divInt(abs(int(2.0)),( mod(int(1.0),i0) * int(8.0) )))),abs(int(3.0))))))),int(0.0)))) ) == int(3.0)\\ni2 -= i0\\nres0 -= ( res0 - max(int(1.0), int(5.0)) )\\nb1 = ( int(9.0) != in1 and i1 \\g abs(int(6.0)) )\\nif ( ( min(in0, divInt(i2,i2)) * int(0.0) ) - min(int(8.0), abs(int(9.0))) ) \\g int(8.0):{:\\nb0 = ( int(5.0) \\g i1 and int(7.0) != ( max(max(max(divInt(in1,abs(( i0 * abs(res0) ))), i1), min(int(2.0), res0)), min(( abs(divInt(int(7.0),( in1 - divInt(int(2.0),i2) ))) + int(4.0) ), abs(divInt(abs(int(3.0)),max(divInt(res0,min(int(0.0), abs(int(2.0)))), i1))))) + i1 ) )\\nres0 *= ( i0 * mod(min(divInt(int(2.0),max(( int(0.0) + ( ( abs(( in1 * i2 )) + max(( mod(( res0 - ( int(8.0) * int(7.0) ) ),( int(7.0) - max(int(3.0), mod(min(int(3.0), abs(( in0 + divInt(int(3.0),int(2.0)) ))),max(mod(mod(in0,min(int(0.0), i0)),int(8.0)), int(4.0)))) )) * int(5.0) ), max(max(( int(8.0) + abs(abs(min(i2, min(res0, in0)))) ), in0), mod(int(4.0),( int(2.0) * in2 )))) ) - ( int(2.0) + in2 ) ) ), i0)), i0),divInt(int(7.0),max(min(i0, min(res0, divInt(res0,divInt(in2,max(in0, int(3.0)))))), int(3.0)))) )\\nb0 = not int(5.0) \\le i2\\n:}else:{:\\nb1 = int(6.0) \\g abs(i1)\\n:}\\nb2 = not mod(max(mod(int(5.0),divInt(int(4.0),abs(max(in2, int(5.0))))), ( max(in1, mod(int(6.0),mod(max(min(min(in1, max(abs(( in0 - abs(( ( ( in2 + min(i1, abs(int(4.0))) ) * abs(in2) ) - abs(in1) )) )), ( int(0.0) + res0 ))), i0), abs(in2)),( i1 * ( min(int(6.0), mod(int(4.0),max(( mod(abs(min(int(4.0), min(int(0.0), in2))),( mod(in0,( abs(mod(mod(abs(int(6.0)),int(8.0)),abs(i0))) - max(abs(mod(min(divInt(max(( max(min(max(int(9.0), i0), max(( divInt(min(mod(int(0.0),int(3.0)), min(int(4.0), min(min(in2, abs(int(8.0))), in1))),in1) - i2 ), int(6.0))), in1) * int(3.0) ), min(abs(abs(int(8.0))), ( int(5.0) + ( in1 - max(divInt(min(i0, int(6.0)),( ( mod(divInt(( max(( max(divInt(max(max(min(max(int(9.0), abs(int(7.0))), i1), int(2.0)), max(in0, max(max(in2, int(7.0)), divInt(min(max(min(i0, res0), in2), in2),int(9.0))))),max(i2, i0)), divInt(abs(( in0 + ( i2 - in1 ) )),int(9.0))) - abs(max(min(min(max(divInt(mod(abs(( ( min(int(3.0), in0) + int(5.0) ) * mod(int(2.0),abs(int(5.0))) )),in1),int(0.0)), abs(res0)), abs(i1)), max(res0, int(8.0))), int(6.0))) ), max(int(8.0), int(6.0))) - abs(min(int(3.0), int(0.0))) ),( max(min(divInt(int(5.0),min(in0, min(min(i0, in0), ( int(7.0) * max(int(8.0), in1) )))), divInt(int(1.0),( int(2.0) + int(1.0) ))), int(1.0)) * abs(int(7.0)) )),divInt(int(7.0),abs(i1))) - ( int(7.0) - int(1.0) ) ) * min(i0, int(0.0)) )), divInt(mod(max(max(abs(( ( int(6.0) + in2 ) + int(4.0) )), i0), ( max(int(8.0), int(1.0)) * ( divInt(( ( res0 * min(int(3.0), i0) ) * in1 ),abs(in1)) + int(7.0) ) )),( int(0.0) - ( max(min(( min(mod(max(min(in0, ( ( ( divInt(abs(divInt(in2,int(8.0))),in0) * abs(divInt(int(1.0),( int(4.0) - max(i0, ( int(2.0) - mod(in1,min(( mod(int(0.0),min(abs(i1), abs(( max(max(in2, int(9.0)), int(2.0)) * min(int(2.0), divInt(in2,int(3.0))) )))) * max(int(0.0), i0) ), max(int(4.0), int(8.0)))) )) ))) ) + in1 ) - ( i1 + in2 ) )), mod(int(2.0),res0)),mod(min(int(2.0), divInt(mod(i2,max(in2, max(int(3.0), mod(res0,int(8.0))))),int(3.0))),int(4.0))), divInt(mod(res0,in1),mod(int(8.0),( int(8.0) - min(( i1 + i0 ), int(7.0)) )))) * ( int(6.0) - ( i1 + res0 ) ) ), max(int(2.0), in0)), abs(abs(int(4.0)))) - res0 ) )),int(0.0))) ) ))),( ( min(in1, int(2.0)) * i0 ) - in1 )), abs(int(4.0))),mod(i1,int(2.0)))), in2) )) + abs(divInt(int(4.0),( min(int(0.0), in0) * int(9.0) ))) )) + ( ( int(9.0) * int(3.0) ) + int(7.0) ) ), res0))) - max(( max(in1, mod(( ( abs(in2) * int(2.0) ) * ( divInt(abs(max(mod(in2,( divInt(mod(res0,divInt(int(6.0),res0)),int(1.0)) * int(7.0) )), mod(max(i0, int(6.0)),int(2.0)))),( abs(int(7.0)) - mod(( abs(( divInt(max(max(divInt(i0,in2), ( i1 * divInt(( int(5.0) + int(7.0) ),max(min(i0, in0), ( abs(i2) + i2 ))) )), max(int(5.0), ( int(2.0) * ( max(max(in2, abs(int(2.0))), abs(i1)) + ( i0 + divInt(res0,res0) ) ) ))),int(5.0)) + int(9.0) )) - abs(int(5.0)) ),max(int(7.0), int(7.0))) )) + ( mod(( max(in2, ( int(4.0) + int(1.0) )) * divInt(i0,res0) ),i2) + int(0.0) ) ) ),int(9.0))) + in2 ), in2) ) )))) - abs(i2) )),min(int(7.0), in0)) \\ge int(3.0)\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 10, 10, 1, 9, 181, 181, 9, 6, 2, 14, 9, 5, 0, 1, 169, 3, 746, 188, 211, 103, 88]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1], [7, 2, 8, 1, 5, 8, 8], [], [0, 1], [], [0], [], [0], [], [], [6, 2, 2, 6, 1], [0], [2, 2, 0, 1, 3, 3, 1, 2, 3, 2, 3, 3, 3, 1, 2, 1, 3, 1, 0, 3, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 0], [0, 2, 0, 2, 2, 1, 1, 2], [0, 0, 1], [1, 1, 1]], "fitness": 100, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = mod(( i2 + int(7.0) ),min(abs(int(2.0)), mod(min(mod(abs(abs(max(int(8.0), ( int(1.0) + max(int(5.0), i2) )))),abs(int(8.0))), res0),( i1 - int(8.0) ))))\\nb0 = b1\\n", "other_info": {}, "test_fitness": 993, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 0, 2, 0, 1, 0, 1, 0, 0, 5, 1, 25, 6, 8, 3, 3]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 0, 1, 0], [1, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 6, 2, 8, 0, 7, 1, 4, 9, 4, 4, 1, 2, 6, 0, 5, 4, 4, 3, 3, 5, 8, 4, 5, 6, 1, 6, 6, 5, 6, 1, 2, 8, 2, 9, 5], [1, 1, 5, 5, 5, 1, 2, 4, 1, 1], [0, 0, 0, 2, 1, 2], [0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 1, 2, 3, 3, 0, 2, 1], [1, 0], [1], [5, 3, 1, 6, 4, 3, 6, 0, 5, 4, 3, 6, 2, 1, 3, 6, 4, 0, 5, 6, 3, 3, 5, 4, 3, 0, 1, 2, 1, 6, 4, 4, 1, 4, 4, 6, 2, 0, 4, 3, 4, 3, 2, 5, 1, 3, 6, 3, 1, 6, 1, 4, 2, 4], [0, 0, 0, 0, 1], [0, 1, 0, 2, 0, 3, 0, 2, 1, 3, 3, 0, 0, 1, 2, 1, 0, 3, 3, 0, 1, 3, 3, 0, 2, 2, 0, 2, 1, 3, 1, 0, 1, 3, 0, 1, 0, 3, 0, 0, 0, 1, 0, 2, 1, 0, 0, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 0, 3, 0, 3, 3, 3, 1, 0, 2, 1, 2, 0, 2, 2, 0, 3, 0, 2, 2, 2, 0, 2, 3, 2, 3, 3, 3, 3, 1, 2, 1, 0, 0, 1, 1, 3, 2, 1, 1, 3, 0, 3, 0, 3, 2, 0, 3, 2, 0, 0, 2, 0, 1, 2, 2, 1, 2, 2, 3, 1, 1, 2, 2, 0, 1, 0, 1, 3, 0, 3, 2, 0, 0, 3, 1, 3, 1, 3, 1, 0, 1, 1, 1, 3, 0, 0, 0, 1, 2, 3, 0, 3, 1, 2, 2, 0, 1, 0, 2, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 1, 2, 1, 0, 1, 1, 1, 2, 2, 0, 2, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2], [2, 2, 0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0]], "fitness": 100, "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( b0 and in2 \\g int(0.0) )\\nin0 = i1\\nres0 = ( in1 * max(in0, mod(int(3.0),max(abs(res0), i0))) )\\nb0 = ( int(6.0) \\g ( int(2.0) * in2 ) or max(min(in1, int(8.0)), max(max(in0, divInt(( res0 + ( int(0.0) + max(int(7.0), i2) ) ),int(1.0))), abs(i1))) != int(4.0) )\\nloopBreak% = 0\\nwhile False:{:\\nb2 = not ( ( b1 and in0 != abs(res0) ) or not in1 != i0 )\\nin2 = int(9.0)\\nloopBreak% = 0\\nwhile res0 \\g divInt(int(4.0),in0):{:\\nloopBreak% = 0\\nwhile in0 == int(4.0):{:\\nif mod(divInt(min(int(1.0), ( mod(abs(( max(min(in2, max(in1, max(min(max(int(2.0), in0), ( int(6.0) * mod(i0,( mod(i1,max(i2, ( ( ( i1 - ( abs(( max(max(max(max(int(0.0), mod(int(5.0),res0)), in1), int(4.0)), int(4.0)) - min(( int(3.0) - int(3.0) ), abs(in1)) )) - max(i1, abs(mod(in1,abs(divInt(in1,res0))))) ) ) + mod(i2,int(5.0)) ) - divInt(( int(8.0) + ( mod(abs(int(4.0)),int(5.0)) + divInt(( i0 * int(6.0) ),in1) ) ),int(1.0)) ))) * max(in0, max(divInt(in1,in0), abs(int(6.0)))) )) )), abs(int(6.0))))), abs(int(5.0))) - i2 )),int(6.0)) + int(1.0) )),int(2.0)),abs(in2)) \\le i1:{:\\nloopBreak% = 0\\nwhile in0 \\g int(8.0):{:\\nloopBreak% = 0\\nwhile True:{:\\nres0 = divInt(max(in0, abs(int(2.0))),divInt(( i1 + int(9.0) ),res0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = divInt(i1,in1) \\g i2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 += int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 15, 15, 6, 9, 37, 37, 10, 6, 4, 20, 10, 10, 2, 1, 54, 5, 161, 37, 38, 19, 19]}, {"genotype": [[0], [0, 0, 0, 1, 1], [2, 0, 0, 0, 1], [0], [1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 4, 3, 4, 0, 3, 8, 4, 7, 9, 2, 2, 7, 2, 9, 4, 9, 8, 2, 5, 6, 1, 6, 4, 5, 7, 0, 5, 3, 5], [3, 0], [2], [], [1, 1], [0, 0], [], [], [0], [2, 1, 1, 2, 6, 0, 0, 0, 0, 0, 1, 3, 0, 6, 0, 6, 3, 4, 4, 3, 6, 0, 5, 5, 3, 1, 1, 4, 0, 3, 2, 5, 3, 1, 6, 3, 1, 0, 0, 2], [1, 1, 1], [2, 2, 0, 1, 1, 2, 3, 1, 3, 0, 3, 1, 2, 1, 3, 3, 2, 0, 0, 3, 3, 2, 3, 3, 3, 2, 2, 0, 2, 3, 0, 2, 3, 2, 1, 3, 1, 1, 1, 3, 3, 2, 2, 0, 0, 3, 1, 3, 3, 3, 0, 1, 0, 1, 1, 3, 0, 0, 2, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 2, 0, 0, 3, 3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 0, 1, 2, 0, 3, 3, 1, 3, 2, 0, 3, 3, 2, 3, 2, 3, 3, 3, 1, 1, 0, 1, 0, 0, 2, 3, 3, 1, 3, 1, 1, 0, 0, 0, 3, 0, 1, 1, 3, 1, 1, 3, 0, 1, 2, 3, 3, 0, 0, 1, 0, 3, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 1, 0, 1, 1, 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2], [1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 2, 1, 0, 2, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0]], "fitness": 100, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( mod(i2,int(1.0)) - int(8.0) ) \\ge ( max(int(4.0), min(i1, min(int(3.0), divInt(int(4.0),min(min(( i1 - i2 ), min(min(( min(max(max(( ( res0 - mod(min(i0, divInt(max(mod(int(0.0),abs(int(3.0))), int(8.0)),int(4.0))),min(min(mod(divInt(i0,i0),max(int(7.0), min(min(min(i0, int(9.0)), i0), int(2.0)))), int(2.0)), max(i1, in0))) ) * ( max(int(7.0), divInt(mod(abs(abs(min(max(i0, res0), abs(i0)))),max(res0, min(in0, in1))),in1)) - ( in0 - res0 ) ) ), max(max(divInt(( abs(int(2.0)) * abs(( divInt(i0,int(9.0)) - int(4.0) )) ),in2), int(9.0)), ( in2 + abs(min(int(8.0), abs(( in0 + abs(max(( abs(( abs(abs(max(int(2.0), int(5.0)))) + i1 )) * int(6.0) ), i1)) )))) ))), in1), divInt(min(max(int(1.0), abs(int(6.0))), int(4.0)),i0)) - in0 ), i2), abs(in2))), int(5.0)))))) + int(7.0) ):{:\\nin0 *= min(int(0.0), int(5.0))\\n:}\\nb2 = abs(i1) \\l int(3.0)\\nres0 -= divInt(max(max(in0, i1), int(5.0)),i0)\\ni0 -= abs(i2)\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 5, 5, 1, 4, 31, 31, 2, 1, 0, 2, 2, 0, 0, 1, 40, 3, 145, 27, 50, 17, 13]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [1, 1], [0, 1], [1, 1, 1, 0, 0, 1], [5, 9, 1, 6, 3, 4], [2, 4], [0, 0], [0], [0, 0, 0, 0, 0, 1, 1], [0, 0], [0, 2, 3, 1, 2], [1], [], [0, 3, 5, 6], [0], [1, 3, 0, 0, 0, 2, 1, 1, 1], [1], [0], [], [0]], "fitness": 100, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile not ( False and not int(5.0) == min(i0, in0) ):{:\\nb0 = in2 \\le divInt(int(9.0),int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(634.0)\\n", "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 4, 4, 2, 2, 6, 6, 2, 2, 1, 7, 2, 5, 1, 0, 4, 1, 9, 1, 1, 0, 1]}][{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [8, 7, 0, 5, 8, 3, 6, 2, 2, 0, 7, 9, 9, 4, 2, 2, 5, 5, 0, 2, 2, 5, 2, 5, 8, 0, 5, 9, 3, 4, 6, 6, 4, 8, 5, 4, 5, 2, 6, 7, 9, 0, 4, 3, 6, 5, 8, 0, 1, 1, 0, 3, 1, 1, 9, 8, 0, 7, 5, 8, 7, 5, 5, 0, 6, 5, 4, 5, 2, 5, 9, 2, 5, 1, 4, 4, 6, 9, 2, 9, 9, 0, 9, 6, 7, 1, 2, 1, 8, 5, 1, 8, 5, 3, 1, 4, 8, 4, 8, 7, 6, 7, 4, 2, 8, 9, 5, 9, 5, 2, 4, 7, 2, 6, 8, 3, 6, 9, 9, 1, 0, 6, 5, 7, 4, 1, 2, 0, 0, 4, 0, 1, 9, 7, 4, 0, 2, 2, 3, 0, 3, 0, 5, 9, 5, 4, 5, 9, 3, 0, 1], [3, 3, 4, 4, 1, 4, 2, 4, 2, 1], [2, 2, 2, 0], [1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 2, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [6, 5, 3, 4, 5, 3, 1, 5, 4, 5, 2, 4, 0, 3, 4, 1, 0, 0, 0, 0, 1, 3, 3, 0, 6, 3, 0, 3, 3, 1, 3, 6, 1, 4, 2, 1, 2, 5, 2, 6, 4, 2, 1, 1, 0, 0, 3, 6, 0, 5, 0, 6, 5, 2, 3, 2, 5, 6, 0, 2, 5, 2, 0, 3, 1, 6, 1, 4, 1, 4, 3, 2, 0, 1, 4, 4, 0, 6, 0, 5, 6, 5, 2, 2, 6, 4, 3, 2, 4, 0, 5, 1, 3, 6, 1, 0, 5, 5, 6, 2, 1, 0, 5, 6, 6, 2, 1, 3, 1, 6, 6, 5, 4, 0, 0, 1, 5, 5], [0, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 3, 2, 2, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 3, 1, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 3, 0, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 3, 2, 2, 2, 0, 0, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 2, 3, 1, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 2, 0, 2, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 2, 2, 0, 0, 3, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 3, 1, 2, 1, 0, 2, 3, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 0, "tree_depth": 154, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(max(min(in2, in0), in1), max(in2, in0))\\nif not i1 \\ge max(int(8.0), min(( int(7.0) + mod(mod(int(0.0),int(5.0)),in2) ), divInt(( int(8.0) - min(mod(min(divInt(int(3.0),int(6.0)), in1),( int(2.0) + int(2.0) )), in2) ),abs(( mod(( ( i2 - int(0.0) ) - in1 ),max(i0, divInt(divInt(max(( int(7.0) - divInt(in0,in1) ), min(abs(( abs(int(9.0)) * i1 )), abs(divInt(int(9.0),i0)))),int(4.0)),( i0 * i0 )))) + divInt(mod(int(2.0),max(divInt(max(abs(int(2.0)), i0),i1), in0)),int(5.0)) ))))):{:\\nif mod(in0,i0) \\ge min(min(res0, max(( max(abs(in0), int(5.0)) + mod(i0,max(( max(mod(divInt(mod(min(int(0.0), abs(int(2.0))),in0),int(2.0)),int(5.0)), in0) + ( min(int(2.0), i1) + max(int(5.0), ( int(8.0) - min(min(int(059.0), int(3.0)), ( int(4.0) + divInt(int(6.0),( mod(abs(int(6.0)),in0) * res0 )) )) )) ) ), int(4.0))) ), max(max(divInt(i1,( in1 - min(i2, max(int(8.0), int(5.0))) )), max(int(4.0), min(abs(i1), max(min(int(5.0), ( min(abs(int(2.0)), min(i2, divInt(in2,mod(min(abs(int(6.0)), min(( max(( i2 - ( ( divInt(res0,max(max(( ( in1 + int(7.0) ) - ( divInt(i2,min(( divInt(( i1 * i1 ),i0) * min(min(int(9.0), i0), abs(int(0.0))) ), in0)) + abs(int(4.0)) ) ), abs(res0)), ( int(3.0) * ( mod(abs(int(6.0)),divInt(mod(int(5.0),( max(( divInt(min(abs(mod(abs(abs(i0)),int(8.0))), int(0.0)),in2) - i0 ), min(( ( max(divInt(divInt(max(( min(( res0 - max(in2, int(1.0)) ), mod(divInt(int(1.0),int(0.0)),int(3.0))) * ( abs(i2) - in0 ) ), int(1.0)),i2),divInt(abs(in2),int(1.0))), min(min(min(mod(res0,abs(mod(int(9.0),( ( int(8.0) + int(0.0) ) * abs(int(7.0)) )))), abs(abs(i0))), max(max(min(int(5.0), abs(i2)), ( divInt(abs(int(8.0)),mod(in2,mod(int(7.0),abs(mod(min(max(int(5.0), max(( max(int(5.0), i2) + abs(int(0.0)) ), max(max(i0, divInt(divInt(int(6.0),int(5.0)),in0)), min(max(i1, int(4.0)), max(( int(5.0) + max(mod(res0,( min(abs(int(2.0)), min(max(int(5.0), i1), ( min(in1, i1) + in1 ))) * min(divInt(( int(9.0) - in0 ),divInt(min(( ( max(int(2.0), mod(int(5.0),( ( ( int(1.0) - i2 ) - min(abs(mod(int(4.0),i0)), int(4.0)) ) + int(6.0) ))) + i1 ) - mod(max(int(9.0), int(2.0)),min(( int(9.0) - ( in1 - ( ( int(9.0) + max(( int(0.0) - max(int(9.0), mod(in1,divInt(int(6.0),int(7.0)))) ), i0) ) - divInt(int(1.0),int(2.0)) ) ) ), abs(abs(res0)))) ), max(int(1.0), int(8.0))),abs(int(5.0)))), int(1.0)) )), abs(mod(i0,( in2 - res0 )))) ), in2))))), int(8.0)),int(5.0)))))) - abs(int(3.0)) )), abs(mod(int(1.0),i2)))), min(( mod(i2,res0) * abs(mod(mod(abs(in1),max(in0, ( int(4.0) - min(( i2 + in1 ), i0) ))),in2)) ), int(8.0)))) + i1 ) + int(4.0) ), int(8.0))) - int(7.0) )),mod(divInt(int(6.0),in0),int(7.0)))) * res0 ) ))) + i1 ) * int(4.0) ) ), max(i0, int(2.0))) + in2 ), max(int(8.0), divInt(( abs(in2) - int(9.0) ),int(5.0))))),int(9.0))))) - ( ( abs(max(abs(( abs(res0) * int(5.0) )), i2)) + min(( int(2.0) - i1 ), min(int(4.0), max(int(7.0), mod(int(2.0),i0)))) ) + divInt(abs(abs(abs(in2))),res0) ) )), divInt(int(6.0),res0))))), mod(int(8.0),i2)))), i1):{:\\nif int(36.0) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile ( ( int(9.0) * divInt(max(( in0 + min(int(1.0), int(06.0)) ), int(5.0)),i1) ) \\le int(7.0) or not True ):{:\\nif not res0 \\g max(res0, in2):{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n:}else:{:\\nb0 = True\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 9, 9, 5, 4, 124, 124, 5, 4, 1, 13, 5, 8, 3, 4, 112, 1, 496, 130, 135, 64, 66]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 8, 6, 4, 1, 7, 5, 2, 1, 4, 9], [], [], [], [], [], [], [], [], [0, 3, 5, 0, 6, 6, 1, 2, 6, 5, 1, 1, 6, 3], [0, 0], [2, 1, 2, 3, 0, 2, 2, 2, 2, 2, 0, 2, 1, 1, 3, 2, 0, 3, 2, 3, 0, 2, 3, 1, 2, 3, 3, 3, 1, 3, 0, 0, 3, 2, 0, 1, 3, 1, 3, 3, 1, 1, 2, 1, 1, 3, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [2, 2, 0, 2, 1, 1, 0, 2, 0, 0, 0, 2, 1, 2], [0, 0, 1, 1, 2, 0, 2, 2], [1, 1, 1, 0, 1, 1]], "fitness": 53, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( int(0.0) + ( abs(in0) + ( mod(mod(( mod(in2,divInt(int(2.0),int(8.0))) - abs(mod(i0,min(( abs(res0) - mod(max(int(6.0), ( max(min(abs(int(4.0)), min(res0, i1)), min(( i2 * int(1.0) ), min(int(7.0), abs(max(int(5.0), int(2.0)))))) + ( int(1.0) * int(4.0) ) )),abs(res0)) ), in2))) ),i1),int(9.0)) * i1 ) ) )\\nres0 = in0\\n", "other_info": {}, "test_fitness": 499, "mapping_values": [1, 2, 2, 0, 2, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 14, 2, 52, 14, 14, 8, 6]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 5, 4, 2, 7, 9, 1, 5, 8, 7, 5, 5, 8, 2, 7, 5], [4], [2], [], [1], [0], [], [], [], [1, 1, 2, 5, 3, 1, 3, 0, 1, 5, 5, 2, 6, 5, 6, 3, 4], [], [3, 3, 1, 3, 3, 1, 0, 0, 3, 0, 2, 2, 2, 0, 2, 0, 3, 0, 0, 3, 2, 1, 2, 3, 2, 2, 0, 2, 1, 1, 3, 2, 1, 1, 1, 2, 1, 3, 0, 1, 2, 3, 3, 0, 3, 3, 1, 0, 3, 2, 1, 3, 3, 0, 0, 1, 2, 1, 0, 2, 3, 1, 2, 0, 0, 1, 2, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0], [0, 2, 2, 2, 2, 0, 1, 1, 2, 1, 2], [0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(max(int(7.0), max(min(int(9.0), i1), i1)), max(i2, divInt(( ( in2 + ( in0 * max(i1, in0) ) ) * min(mod(int(5.0),( max(divInt(( i0 * ( int(4.0) * int(2.0) ) ),abs(mod(int(7.0),int(9.0)))), int(1.0)) + ( int(5.0) - min(i1, int(8.0)) ) )), divInt(min(min(in2, abs(abs(int(7.0)))), in2),min(( int(5.0) - max(max(i2, res0), int(5.0)) ), mod(int(8.0),in2)))) ),( min(int(2.0), ( res0 * in0 )) - int(7.0) )))) \\le ( int(5.0) * in1 )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 17, 17, 1, 1, 0, 1, 1, 0, 0, 0, 17, 0, 69, 17, 18, 11, 6]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 1, 1, 1, 2, 0], [0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 5, 1, 0, 6, 1, 9, 3, 4, 0, 3, 3, 8, 1, 4, 0, 5, 2, 5, 3, 5, 8, 9, 7, 7, 2, 8, 6, 5], [5, 4, 2, 0, 1, 3, 2, 5, 1], [2, 1, 0, 1, 1, 0, 0, 0], [1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 0, 3, 1, 2, 2, 0], [0, 0], [1, 1, 0, 1, 1], [4, 6, 6, 5, 3, 2, 3, 0, 2, 4, 1, 2, 2, 2, 6, 0, 4, 1, 6, 4, 2, 0, 6, 5, 3, 4, 1, 1, 4, 5, 5, 5, 0, 5, 2, 0, 0, 6, 6, 6, 0, 5, 4, 4, 6, 2, 6, 0, 1], [1, 1, 0, 0], [2, 3, 1, 2, 1, 2, 1, 2, 1, 0, 0, 3, 1, 0, 1, 3, 2, 2, 3, 0, 0, 0, 2, 0, 1, 1, 2, 1, 1, 3, 3, 1, 1, 0, 0, 1, 2, 0, 2, 1, 0, 3, 0, 1, 2, 1, 3, 2, 0, 1, 0, 3, 3, 0, 0, 0, 0, 2, 3, 2, 2, 3, 1, 2, 2, 0, 3, 0, 0, 1, 3, 2, 2, 3, 3, 0, 2, 0, 0, 1, 3, 2, 0, 3, 0, 2, 0, 2, 1, 3, 0, 3, 3, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 3, 0, 2, 1, 0, 2, 2, 2, 2, 0, 3, 0, 0, 1, 3, 1, 3, 1, 2, 3, 3, 0, 3, 1, 2, 0, 0, 2, 2, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 2, 0, 2, 1, 1, 2, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 2], [1, 0, 0, 0, 1, 1, 1, 2, 0, 1, 2, 1, 1, 2, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= mod(max(int(5.0), mod(int(3.0),divInt(int(5.0),divInt(int(1.0),res0)))),res0)\\nif True:{:\\nin2 += max(int(0.0), in0)\\n:}else:{:\\nif int(6.0) != max(( ( abs(i2) + in0 ) + i0 ), divInt(i2,int(1.0))):{:\\nif int(9.0) \\le ( int(3.0) - int(4.0) ):{:\\nif not min(abs(int(0.0)), int(3.0)) == in1:{:\\nif b2:{:\\nb1 = i1 \\l int(3.0)\\n:}else:{:\\nb0 = ( divInt(i2,( int(8.0) - i2 )) \\g max(i2, int(1.0)) or ( int(4.0) - max(( res0 * int(0.0) ), i0) ) \\ge abs(min(in1, i1)) )\\n:}\\n:}else:{:\\nb1 = res0 == in1\\n:}\\n:}\\n:}else:{:\\nb1 = True\\n:}\\n:}\\nb0 = ( min(mod(divInt(min(int(5.0), ( ( i2 + max(i0, res0) ) - int(2.0) )),max(divInt(divInt(max(min(in2, ( in0 * in1 )), int(5.0)),min(( i1 - max(i1, ( in1 - divInt(int(3.0),max(in2, abs(max(int(5.0), int(8.0))))) )) ), in2)),divInt(in2,i0)), in2)),i2), i0) * i0 ) != int(9.0)\\nb0 = not not b0\\nres0 = min(res0, mod(int(7.0),res0))\\nloopBreak% = 0\\nwhile divInt(mod(mod(( i0 + abs(in2) ),in1),int(7.0)),abs(int(2.0))) \\g max(int(8.0), mod(abs(max(in1, abs(int(6.0)))),( res0 + i2 ))):{:\\nres0 = ( ( int(5.0) + i0 ) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 6, 10, 30, 30, 9, 8, 1, 17, 9, 8, 2, 5, 49, 4, 136, 33, 28, 18, 17]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 1, 2, 1, 2, 0, 1], [1, 1, 0], [0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 9, 2, 6, 4, 6, 1, 6, 0, 2, 5], [0, 4, 5, 5, 4], [1, 0, 0, 2], [], [1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 2], [], [0], [1, 6, 6, 6, 5, 6, 5, 0], [1, 0], [1, 0, 1, 1, 2, 1, 1, 0, 0, 3, 0, 1, 3, 2, 0, 1, 1, 3, 1, 3, 2, 1, 0, 1, 1], [0, 0, 1], [2, 0, 1, 1], [0, 0, 0], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(4.0) \\l i1\\nloopBreak% = 0\\nwhile int(0.0) \\le int(9.0):{:\\nres0 += ( int(2.0) + int(6.0) )\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = res0 != res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not abs(in2) != int(4.0):{:\\nb2 = min(( res0 + int(6.0) ), int(1.0)) \\le max(int(6.0), max(divInt(int(0.0),in2), int(2.0)))\\n:}\\ni0 = int(5.0)\\n", "other_info": {}, "test_fitness": 992, "mapping_values": [1, 8, 8, 3, 5, 12, 12, 5, 4, 0, 7, 5, 2, 0, 1, 8, 2, 25, 3, 4, 3, 1]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 3], [0, 3, 5], [2], [1, 1], [0, 1, 0, 1, 0, 1], [0, 0, 0], [3, 3, 2], [], [], [6, 5, 1, 2, 1], [], [3, 0, 1, 3, 1, 0, 0, 0, 0], [], [0, 2], [], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( min(res0, int(8.0)) \\l abs(int(3.0)) or ( in2 \\ge i1 or not i2 != i1 ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 3, 1, 2, 6, 3, 3, 0, 0, 5, 0, 9, 0, 2, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [1], [7], [5], [], [], [1], [0], [], [], [], [1, 1, 2, 5, 1, 6, 2, 2, 3, 2, 4, 1, 1, 2, 5, 1, 4, 1], [0, 1], [3, 2, 0, 2, 2, 0, 0, 0, 3, 0, 0, 3, 0, 2, 3, 3, 0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 3, 3, 1, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [1, 0, 1, 2, 0, 0, 0, 2], [0, 0, 2], [0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(divInt(i1,divInt(mod(i1,i2),in2)), min(i1, res0)) != max(i2, ( abs(min(i2, in0)) + i2 )):{:\\nin1 = ( i1 + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= min(divInt(mod(in2,min(abs(int(7.0)), i1)),in1), i1)\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 18, 2, 32, 7, 8, 3, 5]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [2, 0, 2, 0, 2, 1, 0, 2, 1, 1], [0, 1, 0, 0], [0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 8, 0, 8, 1, 7, 5, 3, 8, 2, 0, 9, 6, 8, 5, 2, 7, 4, 6, 3, 0, 4, 7, 4, 0, 1, 8, 6, 1], [3, 2, 5, 0, 3, 3, 3, 4, 0, 2], [2, 0, 1, 0, 2], [1, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 2, 2, 3, 2], [0], [1, 1, 0], [6, 4, 5, 2, 5, 2, 4, 4, 3, 5, 4, 1, 4, 6, 6, 2, 5, 2, 4, 2, 6, 4, 6, 0, 2, 0, 5, 4, 5, 0, 1, 0], [1], [3, 0, 1, 0, 2, 1, 3, 3, 1, 2, 3, 0, 0, 3, 3, 1, 3, 3, 1, 2, 1, 3, 3, 3, 2, 1, 3, 1, 1, 0, 0, 0, 2, 3, 0, 0, 3, 1, 3, 2, 2, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 3, 0, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 1, 0, 1, 3, 0, 1, 2, 2, 2, 0, 0, 2, 1, 0, 0, 3, 3, 3, 2, 3, 1, 1, 0, 1, 2, 2, 0, 3, 2, 1, 1, 1, 0, 1, 2, 1, 3, 3, 1, 1, 2, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [2, 0, 1, 2, 1, 0, 0, 2, 1, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 0, 0, 1, 2, 1, 1, 2], [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(res0) \\ge int(1.0) or True ):{:\\nb2 = in1 == ( int(2.0) * min(max(int(3.0), mod(abs(in2),i2)), max(min(int(8.0), min(abs(int(0.0)), ( int(8.0) - max(abs(abs(divInt(int(1.0),max(int(7.0), int(5.0))))), in2) ))), i2)) )\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 != ( min(in1, in0) - abs(int(3.0)) ):{:\\nb0 = not abs(mod(( in2 * in1 ),i1)) \\l int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif in1 \\ge res0:{:\\nres0 -= ( mod(int(2.0),i2) * abs(in2) )\\n:}else:{:\\nb1 = int(0.0) \\ge divInt(min(int(9.0), i2),abs(int(6.0)))\\nif not in1 \\ge i2:{:\\nb0 = mod(( ( divInt(mod(mod(res0,int(8.0)),in1),int(5.0)) - min(res0, int(2.0)) ) * mod(divInt(( i0 * i2 ),divInt(int(7.0),i0)),in2) ),min(min(max(( abs(int(4.0)) - int(6.0) ), in1), int(3.0)), mod(( in2 - max(( int(0.0) + int(4.0) ), int(7.0)) ),i0))) \\le int(4.0)\\n:}\\nb2 = ( not mod(int(0.0),max(abs(int(1.0)), int(8.0))) \\l divInt(i1,i0) and int(6.0) == int(1.0) )\\n:}\\n", "other_info": {}, "test_fitness": 996, "mapping_values": [1, 10, 10, 4, 6, 31, 31, 10, 5, 2, 16, 10, 6, 1, 3, 32, 1, 114, 26, 26, 12, 15]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 0, 3, 1, 1, 6, 6, 0, 9, 0, 6, 5, 8, 9, 2, 4, 4, 6, 5, 0, 6, 6, 7, 7, 2, 0, 8, 2, 0, 8, 9, 6, 2, 4, 7, 8, 9, 7, 2, 2], [3, 5], [0], [], [1, 1], [0, 0], [], [], [], [0, 1, 5, 0, 0, 5, 5, 5, 5, 6, 3, 3, 0, 2, 3, 1, 4, 4, 1, 0, 1, 2, 1, 4, 6, 1, 0, 3, 6, 5, 6, 3, 5, 4, 1, 0, 6, 6, 2, 0], [1], [2, 3, 0, 3, 3, 3, 2, 2, 3, 3, 0, 2, 1, 0, 0, 2, 0, 2, 0, 3, 2, 0, 1, 0, 2, 1, 1, 0, 2, 1, 1, 0, 1, 3, 3, 2, 1, 2, 1, 2, 2, 2, 0, 0, 1, 0, 3, 2, 3, 1, 3, 2, 1, 0, 3, 3, 0, 2, 2, 0, 1, 2, 2, 2, 2, 2, 3, 2, 1, 1, 2, 1, 2, 1, 3, 3, 3, 0, 3, 2, 3, 0, 0, 2, 3, 0, 3, 3, 0, 3, 0, 1, 3, 3, 2, 2, 0, 3, 0, 3, 1, 0, 0, 1, 2, 1, 3, 2, 0, 3, 1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 1, 3, 3, 3, 2, 1, 2, 1, 2, 3, 0, 0, 2, 0, 3, 0, 1, 3, 1, 0, 0, 1, 2, 2, 1, 0, 3, 1, 0, 1, 2, 0, 2, 2, 2, 0, 0, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 1, 3, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 2, 0, 1, 2, 0, 2, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 2, 2, 0, 0, 0, 0, 1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [1, 1, 2, 1, 1, 1, 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 2], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( max(i0, min(max(abs(divInt(( min(max(i1, mod(int(8.0),in2)), i0) - ( i0 - ( in2 * abs(mod(in2,int(1.0))) ) ) ),in2)), ( int(0.0) - int(3.0) )), in2)) - ( int(1.0) - int(1.0) ) ) \\ge res0:{:\\nb0 = int(6.0) != min(abs(mod(int(6.0),( int(0.0) - divInt(( ( in0 + in0 ) * int(9.0) ),i0) ))), abs(divInt(min(int(0.0), max(divInt(int(6.0),i2), min(min(in0, ( mod(i1,int(5.0)) + ( ( ( ( mod(abs(( int(8.0) - int(9.0) )),( int(2.0) + ( int(4.0) * min(max(min(in1, min(( max(in1, i1) + ( abs(i0) + abs(min(i1, min(i2, int(4.0)))) ) ), min(min(divInt(divInt(i1,max(in1, abs(int(6.0)))),res0), i1), int(5.0)))), mod(int(0.0),abs(( i0 - min(int(6.0), int(6.0)) )))), int(7.0)) ) )) + int(7.0) ) * abs(min(min(mod(divInt(mod(int(2.0),min(min(min(mod(int(0.0),( int(8.0) + mod(abs(in0),res0) )), mod(in2,abs(res0))), int(2.0)), abs(int(0.0)))),in0),in2), int(8.0)), divInt(( int(9.0) + in1 ),abs(int(6.0))))) ) - i1 ) + int(2.0) ) )), divInt(i0,divInt(( mod(res0,res0) + int(4.0) ),divInt(i2,divInt(int(7.0),divInt(int(8.0),int(9.0))))))))),mod(int(7.0),int(2.0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= abs(int(2.0))\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 41, 41, 2, 1, 0, 2, 2, 0, 0, 0, 40, 1, 170, 49, 41, 24, 26]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [1, 2, 0, 1, 1, 0, 0], [0], [0, 1, 1, 0, 0, 0], [1, 1], [0, 0], [3], [2, 2, 1, 0, 1, 1], [], [0, 0, 1, 0, 0, 0], [0], [2, 1, 1, 0, 0], [0, 1], [1], [1, 2, 3, 4, 6], [1, 0], [1, 0, 3, 0, 0, 1], [], [1], [0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not True\\nif int(0.0) \\ge i1:{:\\ni2 += max(in0, in1)\\nres0 = int(0.0)\\n:}else:{:\\nb2 = False\\n:}\\nb1 = b0\\nb1 = b1\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 2, 2, 1, 6, 0, 6, 1, 5, 2, 1, 5, 2, 6, 0, 1, 1, 0]}][{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [8, 7, 0, 5, 8, 3, 6, 2, 2, 0, 7, 9, 9, 4, 2, 2, 5, 5, 0, 2, 2, 5, 2, 5, 8, 0, 5, 9, 3, 4, 6, 6, 4, 8, 5, 4, 5, 2, 6, 7, 9, 0, 4, 3, 6, 5, 8, 0, 1, 1, 0, 3, 1, 1, 9, 8, 0, 7, 5, 8, 7, 5, 5, 0, 6, 5, 4, 5, 2, 5, 9, 2, 5, 1, 4, 4, 6, 9, 2, 9, 9, 0, 9, 6, 7, 1, 2, 1, 8, 5, 1, 8, 5, 3, 1, 4, 8, 4, 8, 7, 6, 7, 4, 2, 8, 9, 5, 9, 5, 2, 4, 7, 2, 6, 8, 3, 6, 9, 9, 1, 0, 6, 5, 7, 4, 1, 2, 0, 0, 4, 0, 1, 9, 7, 4, 0, 2, 2, 3, 0, 3, 0, 5, 9, 5, 4, 5, 9, 3, 0, 1], [3, 3, 4, 4, 1, 4, 2, 4, 2, 1], [2, 2, 2, 0], [1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 2, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [6, 5, 3, 4, 5, 3, 1, 5, 4, 5, 2, 4, 0, 3, 4, 1, 0, 0, 0, 0, 1, 3, 3, 0, 6, 3, 0, 3, 3, 1, 3, 6, 1, 4, 2, 1, 2, 5, 2, 6, 4, 2, 1, 1, 0, 0, 3, 6, 0, 5, 0, 6, 5, 2, 3, 2, 5, 6, 0, 2, 5, 2, 0, 3, 1, 6, 1, 4, 1, 4, 3, 2, 0, 1, 4, 4, 0, 6, 0, 5, 6, 5, 2, 2, 6, 4, 3, 2, 4, 0, 5, 1, 3, 6, 1, 0, 5, 5, 6, 2, 1, 0, 5, 6, 6, 2, 1, 3, 1, 6, 6, 5, 4, 0, 0, 1, 5, 5], [0, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 3, 2, 2, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 3, 1, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 3, 0, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 3, 2, 2, 2, 0, 0, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 2, 3, 1, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 2, 0, 2, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 2, 2, 0, 0, 3, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 3, 1, 2, 1, 0, 2, 3, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 0, "tree_depth": 154, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(max(min(in2, in0), in1), max(in2, in0))\\nif not i1 \\ge max(int(8.0), min(( int(7.0) + mod(mod(int(0.0),int(5.0)),in2) ), divInt(( int(8.0) - min(mod(min(divInt(int(3.0),int(6.0)), in1),( int(2.0) + int(2.0) )), in2) ),abs(( mod(( ( i2 - int(0.0) ) - in1 ),max(i0, divInt(divInt(max(( int(7.0) - divInt(in0,in1) ), min(abs(( abs(int(9.0)) * i1 )), abs(divInt(int(9.0),i0)))),int(4.0)),( i0 * i0 )))) + divInt(mod(int(2.0),max(divInt(max(abs(int(2.0)), i0),i1), in0)),int(5.0)) ))))):{:\\nif mod(in0,i0) \\ge min(min(res0, max(( max(abs(in0), int(5.0)) + mod(i0,max(( max(mod(divInt(mod(min(int(0.0), abs(int(2.0))),in0),int(2.0)),int(5.0)), in0) + ( min(int(2.0), i1) + max(int(5.0), ( int(8.0) - min(min(int(059.0), int(3.0)), ( int(4.0) + divInt(int(6.0),( mod(abs(int(6.0)),in0) * res0 )) )) )) ) ), int(4.0))) ), max(max(divInt(i1,( in1 - min(i2, max(int(8.0), int(5.0))) )), max(int(4.0), min(abs(i1), max(min(int(5.0), ( min(abs(int(2.0)), min(i2, divInt(in2,mod(min(abs(int(6.0)), min(( max(( i2 - ( ( divInt(res0,max(max(( ( in1 + int(7.0) ) - ( divInt(i2,min(( divInt(( i1 * i1 ),i0) * min(min(int(9.0), i0), abs(int(0.0))) ), in0)) + abs(int(4.0)) ) ), abs(res0)), ( int(3.0) * ( mod(abs(int(6.0)),divInt(mod(int(5.0),( max(( divInt(min(abs(mod(abs(abs(i0)),int(8.0))), int(0.0)),in2) - i0 ), min(( ( max(divInt(divInt(max(( min(( res0 - max(in2, int(1.0)) ), mod(divInt(int(1.0),int(0.0)),int(3.0))) * ( abs(i2) - in0 ) ), int(1.0)),i2),divInt(abs(in2),int(1.0))), min(min(min(mod(res0,abs(mod(int(9.0),( ( int(8.0) + int(0.0) ) * abs(int(7.0)) )))), abs(abs(i0))), max(max(min(int(5.0), abs(i2)), ( divInt(abs(int(8.0)),mod(in2,mod(int(7.0),abs(mod(min(max(int(5.0), max(( max(int(5.0), i2) + abs(int(0.0)) ), max(max(i0, divInt(divInt(int(6.0),int(5.0)),in0)), min(max(i1, int(4.0)), max(( int(5.0) + max(mod(res0,( min(abs(int(2.0)), min(max(int(5.0), i1), ( min(in1, i1) + in1 ))) * min(divInt(( int(9.0) - in0 ),divInt(min(( ( max(int(2.0), mod(int(5.0),( ( ( int(1.0) - i2 ) - min(abs(mod(int(4.0),i0)), int(4.0)) ) + int(6.0) ))) + i1 ) - mod(max(int(9.0), int(2.0)),min(( int(9.0) - ( in1 - ( ( int(9.0) + max(( int(0.0) - max(int(9.0), mod(in1,divInt(int(6.0),int(7.0)))) ), i0) ) - divInt(int(1.0),int(2.0)) ) ) ), abs(abs(res0)))) ), max(int(1.0), int(8.0))),abs(int(5.0)))), int(1.0)) )), abs(mod(i0,( in2 - res0 )))) ), in2))))), int(8.0)),int(5.0)))))) - abs(int(3.0)) )), abs(mod(int(1.0),i2)))), min(( mod(i2,res0) * abs(mod(mod(abs(in1),max(in0, ( int(4.0) - min(( i2 + in1 ), i0) ))),in2)) ), int(8.0)))) + i1 ) + int(4.0) ), int(8.0))) - int(7.0) )),mod(divInt(int(6.0),in0),int(7.0)))) * res0 ) ))) + i1 ) * int(4.0) ) ), max(i0, int(2.0))) + in2 ), max(int(8.0), divInt(( abs(in2) - int(9.0) ),int(5.0))))),int(9.0))))) - ( ( abs(max(abs(( abs(res0) * int(5.0) )), i2)) + min(( int(2.0) - i1 ), min(int(4.0), max(int(7.0), mod(int(2.0),i0)))) ) + divInt(abs(abs(abs(in2))),res0) ) )), divInt(int(6.0),res0))))), mod(int(8.0),i2)))), i1):{:\\nif int(36.0) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile ( ( int(9.0) * divInt(max(( in0 + min(int(1.0), int(06.0)) ), int(5.0)),i1) ) \\le int(7.0) or not True ):{:\\nif not res0 \\g max(res0, in2):{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n:}else:{:\\nb0 = True\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 9, 9, 5, 4, 124, 124, 5, 4, 1, 13, 5, 8, 3, 4, 112, 1, 496, 130, 135, 64, 66]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 2, 0, 1, 2, 1, 1, 2, 1], [0, 0, 0], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 5, 2, 5, 4, 1, 0, 6, 8, 8, 7, 1, 6, 8, 2, 8, 2, 8, 1], [3, 0, 4], [1, 1, 1, 0, 1], [], [1, 1, 0, 0, 1, 0, 0], [0, 0, 0], [1, 0, 1, 1], [0, 0, 0], [1, 1, 0], [4, 6, 6, 4, 0, 4, 6, 4, 6, 5, 5, 2, 2, 0, 2, 0, 3, 2, 6, 5, 1, 4, 1, 2, 6, 4, 6, 0, 0, 2, 3], [0, 0], [3, 0, 1, 2, 1, 0, 3, 3, 2, 1, 0, 3, 2, 0, 0, 3, 3, 3, 2, 1, 3, 1, 0, 3, 2, 1, 3, 0, 3, 0, 3, 1, 1, 3, 1, 0, 3, 0, 3, 2, 0, 3, 0, 2, 2, 2, 1, 3, 1, 3, 3, 3, 2, 0, 0, 3, 2, 0, 3, 0, 2, 0, 3, 0, 1, 2, 3, 0, 0, 3, 0, 2, 0, 3, 3, 3, 2, 0, 2, 0, 1, 0, 2, 3, 3, 3, 1, 0, 3, 1, 0, 0, 3, 3, 2, 1, 1, 3, 3, 3, 0, 3, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 0, 0, 2, 2, 0, 2, 0, 0, 2, 1, 1, 1, 0, 1, 1, 0, 2, 1, 2, 1, 2], [2, 0, 2, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(in1, int(9.0)) \\ge divInt(int(2.0),res0)\\nif abs(abs(mod(int(5.0),res0))) \\l abs(( in1 * i0 )):{:\\nb1 = True\\n:}else:{:\\nb1 = b0\\n:}\\nif max(abs(abs(( int(2.0) + min(int(5.0), in1) ))), min(mod(int(4.0),min(res0, min(in1, min(int(1.0), int(0.0))))), abs(int(6.0)))) \\le res0:{:\\nb1 = True\\nin2 = max(in2, max(mod(i2,abs(i2)), ( ( divInt(int(8.0),abs(int(8.0))) * min(min(abs(mod(i0,i2)), abs(( i0 + min(in0, ( i2 + abs(res0) )) ))), int(7.0)) ) - divInt(min(in2, i1),min(in1, divInt(i1,abs(max(max(divInt(i2,divInt(res0,int(1.0))), in1), mod(max(min(max(int(6.0), res0), max(int(8.0), i0)), i0),min(abs(divInt(int(2.0),int(8.0))), max(abs(max(i2, abs(int(2.0)))), int(8.0))))))))) )))\\n:}else:{:\\nif True:{:\\nin0 = int(1.0)\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 20, 20, 3, 5, 0, 7, 3, 4, 3, 3, 31, 2, 105, 18, 38, 6, 12]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [2, 0], [1], [2], [1], [0, 0, 1, 0], [0], [2, 3, 1], [0], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not ( int(2.0) \\g int(0.0) or True )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 1, 4, 1, 3, 1, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 5], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= in2\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 6, 8, 0, 7, 6, 6, 4], [], [], [], [], [], [], [], [], [5, 2, 0, 0, 5, 6, 6, 2], [0], [2, 3, 0, 1, 2, 1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 0, 2, 1, 2, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1], [0, 1, 1, 2, 0, 0, 1], [0, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( max(i2, int(6.0)) + ( int(1.0) - max(max(min(max(divInt(i0,i0), ( mod(( in2 - res0 ),res0) * int(6.0) )), int(8.0)), int(0.0)), ( ( i2 + ( int(7.0) + divInt(int(6.0),int(6.0)) ) ) - int(4.0) )) ) )\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 31, 10, 5, 7, 3]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1], [2], [], [], [], [], [], [], [], [], [0, 4, 6, 0], [1, 1], [0, 3, 1, 0], [], [1], [0, 1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += in1\\nres0 -= max(int(2.0), i0)\\n", "other_info": {}, "test_fitness": 995, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 4, 0, 1, 2, 0]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1, 1, 1], [7, 1, 7, 0], [1], [], [], [1], [0], [], [], [], [6, 6], [1], [1, 3, 1, 1, 2, 1, 0], [0], [1], [0, 1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(7.0) \\g max(int(1.0), int(7.0)):{:\\nres0 += ( int(0.0) - res0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 4, 4, 1, 0, 0, 1, 1, 0, 0, 0, 2, 1, 7, 1, 1, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 1, 4, 8, 7, 3, 1, 6, 5, 3, 0, 2, 1, 4, 5, 1, 6, 6, 6, 6, 2, 6, 4, 8, 5, 2, 8], [2], [], [], [1], [0], [], [], [], [4, 1, 5, 4, 6, 0, 0, 4, 6, 0, 5, 6, 0, 4, 1, 5, 4, 5, 2, 2, 1, 4, 4, 4, 1, 4, 4, 6, 1, 3, 4, 0, 6, 3, 3], [0], [3, 2, 2, 0, 0, 1, 2, 3, 1, 0, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 3, 2, 2, 0, 2, 1, 3, 0, 1, 0, 1, 1, 0, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 0, 2, 1, 3, 3, 1, 3, 3, 1, 0, 3, 3, 0, 2, 3, 0, 0, 2, 0, 3, 3, 0, 2, 0, 3, 0, 3, 1, 0, 3, 0, 3, 3, 0, 2, 3, 1, 1, 2, 1, 3, 2, 3, 0, 1, 1, 0, 3, 3, 0, 2, 0, 3, 1, 1, 1, 1, 3, 1, 2, 2, 0, 2, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 2, 0, 1, 0, 1, 1, 2, 0, 2, 1], [0, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 0, 2, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(divInt(divInt(in1,i1),int(8.0)), ( min(int(9.0), in2) + in1 )) == divInt(res0,( ( mod(divInt(abs(int(1.0)),mod(min(mod(( i0 + mod(int(4.0),min(i0, int(8.0))) ),in1), int(7.0)),int(3.0))),res0) * mod(int(1.0),divInt(mod(int(6.0),mod(int(5.0),mod(( divInt(divInt(i0,( int(3.0) + min(max(int(0.0), max(max(int(2.0), in2), max(max(res0, ( max(i0, in1) - ( i1 + min(abs(in2), divInt(in1,max(in2, max(int(1.0), i2)))) ) )), abs(i2)))), min(max(i1, divInt(min(int(4.0), int(5.0)),( int(1.0) + max(divInt(max(in1, int(6.0)),int(6.0)), in1) ))), abs(min(in1, divInt(i1,abs(int(6.0))))))) )),int(6.0)) * int(2.0) ),int(6.0)))),max(int(4.0), ( ( in1 - ( divInt(int(8.0),( ( in1 - int(5.0) ) + divInt(mod(int(2.0),( res0 + i1 )),divInt(in0,int(8.0))) )) * in1 ) ) + i0 )))) ) - res0 )):{:\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 28, 28, 1, 0, 0, 1, 1, 0, 0, 0, 35, 1, 126, 38, 26, 15, 23]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 1, 1, 0, 2, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 6, 4, 7, 5, 9, 4, 9, 8, 2, 6, 9, 3, 4, 2, 2, 9, 2, 8, 8, 6, 0, 6, 6, 3, 9, 2, 6, 2, 5, 3, 5, 9, 6, 6, 5, 8, 8, 2, 2, 6, 5, 7, 0, 3, 0, 6, 8], [4, 2, 3, 2, 3, 4, 5, 4, 4, 1, 2, 2, 2, 1, 3, 2], [2, 1, 2, 0, 1, 1, 1, 1, 0, 2, 2], [0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 3, 2, 0, 1, 2, 0, 3, 1, 2, 3, 2, 0, 2], [0, 0], [1, 0, 1, 1], [0, 2, 0, 4, 0, 6, 3, 1, 5, 6, 4, 2, 5, 0, 0, 4, 5, 0, 4, 1, 0, 6, 4, 6, 6, 5, 4, 0, 6, 3, 0, 1, 0, 0, 5, 3, 2, 4, 5, 5, 0, 3, 4, 4, 6, 0, 1, 5, 5, 2, 5, 6, 4, 0, 6, 6, 5, 6, 0, 2, 5, 6], [0, 1, 0, 1], [1, 0, 3, 0, 1, 2, 2, 2, 0, 2, 3, 1, 2, 0, 2, 3, 0, 1, 0, 0, 3, 1, 1, 0, 1, 3, 1, 3, 3, 2, 2, 0, 3, 0, 2, 0, 1, 0, 2, 2, 3, 0, 3, 0, 0, 3, 0, 3, 3, 0, 2, 3, 0, 1, 0, 0, 0, 1, 3, 2, 2, 0, 2, 1, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0, 2, 3, 1, 3, 2, 1, 1, 0, 0, 3, 3, 1, 1, 2, 2, 1, 2, 0, 3, 0, 2, 3, 0, 0, 3, 0, 1, 0, 3, 1, 0, 1, 1, 2, 3, 3, 3, 3, 0, 3, 1, 1, 2, 0, 1, 1, 3, 1, 0, 0, 1, 1, 1, 0, 3, 1, 2, 2, 0, 3, 3, 1, 2, 0, 3, 1, 0, 3, 1, 0, 3, 2, 2, 2, 0, 3, 2, 1, 0, 3, 2, 1, 2, 1, 1, 1, 2, 0, 3, 1, 0, 0, 1, 0, 1, 2, 2, 1, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 3, 0, 3, 3, 0, 1, 3, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 1, 1, 0, 1, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 0, 1, 0, 2, 1, 2, 2, 1, 0, 1], [2, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]], "fitness": 100, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) \\le i0:{:\\nloopBreak% = 0\\nwhile abs(i2) == int(7.0):{:\\nb2 = ( mod(( i0 * divInt(abs(int(6.0)),( in1 + mod(abs(i0),int(4.0)) )) ),res0) - in0 ) \\ge min(int(7.0), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = i1 == int(9.0)\\n:}\\nb2 = not min(int(4.0), abs(max(( divInt(in2,abs(res0)) - divInt(in1,int(9.0)) ), i2))) \\ge divInt(divInt(max(in2, max(i0, i0)),min(in1, min(min(in2, ( min(i0, int(8.0)) + in1 )), i1))),i0)\\nb0 = b1\\nres0 = int(26.0)\\nif max(mod(mod(in1,divInt(int(9.0),res0)),mod(mod(res0,min(abs(in2), in1)),i0)), res0) \\le ( min(int(3.0), min(( int(4.0) - int(2.0) ), in0)) - i0 ):{:\\nloopBreak% = 0\\nwhile abs(max(int(2.0), int(9.0))) != ( ( int(2.0) * ( i1 - max(i0, divInt(min(i0, in2),max(in0, int(8.0)))) ) ) - i2 ):{:\\nin1 += abs(int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not in2 \\le int(6.0):{:\\nif int(0.0) \\le ( max(min(max(abs(in2), abs(int(6.0))), int(6.0)), divInt(i0,int(3.0))) - int(9.0) ):{:\\nloopBreak% = 0\\nwhile ( max(int(2.0), in0) \\g in1 and not int(6.0) == int(2.0) ):{:\\nloopBreak% = 0\\nwhile b1:{:\\nin1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile res0 == max(int(3.0), mod(( i0 - abs(abs(int(5.0))) ),divInt(i1,min(int(9.0), in2)))):{:\\nloopBreak% = 0\\nwhile not b1:{:\\nin2 -= max(int(6.0), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb1 = ( min(( ( divInt(in2,abs(divInt(int(6.0),res0))) * max(( int(5.0) - ( int(8.0) * int(8.0) ) ), int(2.0)) ) * ( in1 - abs(int(2.0)) ) ), i0) == res0 or True )\\n:}\\nb0 = not int(6.0) \\g res0\\nloopBreak% = 0\\nwhile ( int(5.0) \\ge ( ( int(7.0) - divInt(in2,mod(divInt(int(0.0),divInt(res0,i0)),i2)) ) * int(3.0) ) and not b2 ):{:\\nb2 = not abs(in2) == max(min(res0, int(0.0)), max(int(6.0), int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 995, "mapping_values": [1, 23, 23, 12, 11, 49, 49, 16, 11, 3, 32, 16, 16, 2, 4, 62, 4, 191, 41, 44, 21, 22]}][{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [8, 7, 0, 5, 8, 3, 6, 2, 2, 0, 7, 9, 9, 4, 2, 2, 5, 5, 0, 2, 2, 5, 2, 5, 8, 0, 5, 9, 3, 4, 6, 6, 4, 8, 5, 4, 5, 2, 6, 7, 9, 0, 4, 3, 6, 5, 8, 0, 1, 1, 0, 3, 1, 1, 9, 8, 0, 7, 5, 8, 7, 5, 5, 0, 6, 5, 4, 5, 2, 5, 9, 2, 5, 1, 4, 4, 6, 9, 2, 9, 9, 0, 9, 6, 7, 1, 2, 1, 8, 5, 1, 8, 5, 3, 1, 4, 8, 4, 8, 7, 6, 7, 4, 2, 8, 9, 5, 9, 5, 2, 4, 7, 2, 6, 8, 3, 6, 9, 9, 1, 0, 6, 5, 7, 4, 1, 2, 0, 0, 4, 0, 1, 9, 7, 4, 0, 2, 2, 3, 0, 3, 0, 5, 9, 5, 4, 5, 9, 3, 0, 1], [3, 3, 4, 4, 1, 4, 2, 4, 2, 1], [2, 2, 2, 0], [1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 2, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [6, 5, 3, 4, 5, 3, 1, 5, 4, 5, 2, 4, 0, 3, 4, 1, 0, 0, 0, 0, 1, 3, 3, 0, 6, 3, 0, 3, 3, 1, 3, 6, 1, 4, 2, 1, 2, 5, 2, 6, 4, 2, 1, 1, 0, 0, 3, 6, 0, 5, 0, 6, 5, 2, 3, 2, 5, 6, 0, 2, 5, 2, 0, 3, 1, 6, 1, 4, 1, 4, 3, 2, 0, 1, 4, 4, 0, 6, 0, 5, 6, 5, 2, 2, 6, 4, 3, 2, 4, 0, 5, 1, 3, 6, 1, 0, 5, 5, 6, 2, 1, 0, 5, 6, 6, 2, 1, 3, 1, 6, 6, 5, 4, 0, 0, 1, 5, 5], [0, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 3, 2, 2, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 3, 1, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 3, 0, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 3, 2, 2, 2, 0, 0, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 2, 3, 1, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 2, 0, 2, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 2, 2, 0, 0, 3, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 3, 1, 2, 1, 0, 2, 3, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 0, "tree_depth": 154, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(max(min(in2, in0), in1), max(in2, in0))\\nif not i1 \\ge max(int(8.0), min(( int(7.0) + mod(mod(int(0.0),int(5.0)),in2) ), divInt(( int(8.0) - min(mod(min(divInt(int(3.0),int(6.0)), in1),( int(2.0) + int(2.0) )), in2) ),abs(( mod(( ( i2 - int(0.0) ) - in1 ),max(i0, divInt(divInt(max(( int(7.0) - divInt(in0,in1) ), min(abs(( abs(int(9.0)) * i1 )), abs(divInt(int(9.0),i0)))),int(4.0)),( i0 * i0 )))) + divInt(mod(int(2.0),max(divInt(max(abs(int(2.0)), i0),i1), in0)),int(5.0)) ))))):{:\\nif mod(in0,i0) \\ge min(min(res0, max(( max(abs(in0), int(5.0)) + mod(i0,max(( max(mod(divInt(mod(min(int(0.0), abs(int(2.0))),in0),int(2.0)),int(5.0)), in0) + ( min(int(2.0), i1) + max(int(5.0), ( int(8.0) - min(min(int(059.0), int(3.0)), ( int(4.0) + divInt(int(6.0),( mod(abs(int(6.0)),in0) * res0 )) )) )) ) ), int(4.0))) ), max(max(divInt(i1,( in1 - min(i2, max(int(8.0), int(5.0))) )), max(int(4.0), min(abs(i1), max(min(int(5.0), ( min(abs(int(2.0)), min(i2, divInt(in2,mod(min(abs(int(6.0)), min(( max(( i2 - ( ( divInt(res0,max(max(( ( in1 + int(7.0) ) - ( divInt(i2,min(( divInt(( i1 * i1 ),i0) * min(min(int(9.0), i0), abs(int(0.0))) ), in0)) + abs(int(4.0)) ) ), abs(res0)), ( int(3.0) * ( mod(abs(int(6.0)),divInt(mod(int(5.0),( max(( divInt(min(abs(mod(abs(abs(i0)),int(8.0))), int(0.0)),in2) - i0 ), min(( ( max(divInt(divInt(max(( min(( res0 - max(in2, int(1.0)) ), mod(divInt(int(1.0),int(0.0)),int(3.0))) * ( abs(i2) - in0 ) ), int(1.0)),i2),divInt(abs(in2),int(1.0))), min(min(min(mod(res0,abs(mod(int(9.0),( ( int(8.0) + int(0.0) ) * abs(int(7.0)) )))), abs(abs(i0))), max(max(min(int(5.0), abs(i2)), ( divInt(abs(int(8.0)),mod(in2,mod(int(7.0),abs(mod(min(max(int(5.0), max(( max(int(5.0), i2) + abs(int(0.0)) ), max(max(i0, divInt(divInt(int(6.0),int(5.0)),in0)), min(max(i1, int(4.0)), max(( int(5.0) + max(mod(res0,( min(abs(int(2.0)), min(max(int(5.0), i1), ( min(in1, i1) + in1 ))) * min(divInt(( int(9.0) - in0 ),divInt(min(( ( max(int(2.0), mod(int(5.0),( ( ( int(1.0) - i2 ) - min(abs(mod(int(4.0),i0)), int(4.0)) ) + int(6.0) ))) + i1 ) - mod(max(int(9.0), int(2.0)),min(( int(9.0) - ( in1 - ( ( int(9.0) + max(( int(0.0) - max(int(9.0), mod(in1,divInt(int(6.0),int(7.0)))) ), i0) ) - divInt(int(1.0),int(2.0)) ) ) ), abs(abs(res0)))) ), max(int(1.0), int(8.0))),abs(int(5.0)))), int(1.0)) )), abs(mod(i0,( in2 - res0 )))) ), in2))))), int(8.0)),int(5.0)))))) - abs(int(3.0)) )), abs(mod(int(1.0),i2)))), min(( mod(i2,res0) * abs(mod(mod(abs(in1),max(in0, ( int(4.0) - min(( i2 + in1 ), i0) ))),in2)) ), int(8.0)))) + i1 ) + int(4.0) ), int(8.0))) - int(7.0) )),mod(divInt(int(6.0),in0),int(7.0)))) * res0 ) ))) + i1 ) * int(4.0) ) ), max(i0, int(2.0))) + in2 ), max(int(8.0), divInt(( abs(in2) - int(9.0) ),int(5.0))))),int(9.0))))) - ( ( abs(max(abs(( abs(res0) * int(5.0) )), i2)) + min(( int(2.0) - i1 ), min(int(4.0), max(int(7.0), mod(int(2.0),i0)))) ) + divInt(abs(abs(abs(in2))),res0) ) )), divInt(int(6.0),res0))))), mod(int(8.0),i2)))), i1):{:\\nif int(36.0) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile ( ( int(9.0) * divInt(max(( in0 + min(int(1.0), int(06.0)) ), int(5.0)),i1) ) \\le int(7.0) or not True ):{:\\nif not res0 \\g max(res0, in2):{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n:}else:{:\\nb0 = True\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 0, "mapping_values": [1, 9, 9, 5, 4, 124, 124, 5, 4, 1, 13, 5, 8, 3, 4, 112, 1, 496, 130, 135, 64, 66]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1], [0, 2, 1, 0, 1, 0, 1], [1], [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 0, 5, 8, 6, 3, 8, 5, 8, 2, 7, 6, 8, 9, 3, 9, 1, 4, 9, 1, 7, 4, 6, 5, 9, 8, 4, 3, 0, 5, 8, 1, 1, 0, 8, 0, 8, 3, 9, 7, 9, 3, 8, 9, 6, 9, 6, 3, 3, 6, 4, 2, 7, 0, 2, 1, 5, 7, 9, 8, 6, 5, 2, 4, 6, 4, 1, 0, 4, 5, 6, 1, 5, 4, 8, 7, 4, 4, 6, 6, 8], [1, 0, 4, 4], [1, 1, 0, 0, 1, 0], [0], [0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 2, 3, 0], [0, 0], [], [0, 1, 4, 3, 5, 4, 0, 5, 6, 1, 6, 6, 4, 0, 0, 5, 1, 6, 4, 6, 6, 4, 2, 6, 6, 5, 4, 6, 2, 1, 4, 0, 3, 3, 5, 1, 0, 4, 6, 1, 0, 3, 2, 3, 1, 5, 4, 6, 0, 2, 4, 0, 1, 4, 1, 1, 0, 5, 3, 6, 2, 2, 5, 2, 6, 6, 3, 5, 2, 3, 3, 3, 5, 5, 5, 5, 1, 5, 1, 3, 0, 6, 1, 4, 4, 3, 3, 6], [0], [2, 0, 3, 1, 2, 2, 2, 0, 3, 1, 3, 2, 1, 3, 1, 2, 2, 0, 3, 1, 0, 3, 2, 0, 3, 2, 2, 0, 2, 3, 0, 1, 1, 3, 3, 0, 3, 3, 1, 1, 0, 2, 0, 3, 0, 1, 0, 0, 1, 1, 2, 0, 2, 1, 2, 0, 2, 2, 3, 1, 1, 3, 1, 2, 1, 2, 3, 2, 3, 2, 0, 0, 1, 2, 2, 3, 2, 2, 2, 3, 0, 1, 0, 3, 1, 2, 3, 0, 0, 2, 3, 0, 3, 0, 1, 3, 0, 1, 3, 0, 1, 2, 3, 1, 3, 3, 3, 0, 3, 3, 2, 1, 0, 3, 0, 2, 3, 3, 1, 0, 2, 2, 3, 2, 2, 0, 1, 1, 3, 3, 1, 1, 1, 0, 1, 1, 3, 1, 3, 1, 2, 0, 2, 0, 3, 3, 1, 2, 1, 3, 2, 3, 1, 0, 1, 3, 2, 0, 2, 2, 1, 1, 0, 2, 3, 0, 0, 2, 3, 0, 2, 2, 2, 3, 1, 1, 1, 2, 1, 0, 3, 0, 3, 3, 3, 3, 0, 1, 2, 0, 2, 2, 1, 1, 0, 3, 3, 2, 3, 0, 2, 3, 3, 3, 0, 0, 2, 3, 1, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2, 0, 2, 2, 0, 0, 3, 2, 0, 1, 3, 1, 1, 2, 0, 2, 2, 2, 1, 1, 0, 0, 1, 3, 0, 3, 2, 3, 3, 1, 3, 2, 3, 1, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 2, 0, 3, 0, 1, 2, 0, 1, 3, 0, 0, 3, 0, 1, 3, 0, 0, 1, 3, 2, 2, 0, 0, 1, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 2, 2, 2, 2, 0, 1, 0, 3, 0, 3, 0, 1, 1, 1, 1, 0, 0, 1, 2, 3, 3, 0, 0, 3, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 2, 0, 2, 2, 2, 2, 1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 1, 0, 1, 1, 2, 2, 2, 1, 2, 2, 0, 2, 2, 1, 0, 1, 2, 0, 1], [0, 1, 0, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0, 1, 0, 0, 1, 1, 0, 1, 2, 0, 1, 0, 1, 2, 1, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( i1 + abs(int(3.0)) )\\nloopBreak% = 0\\nwhile True:{:\\nb1 = mod(divInt(divInt(in1,max(int(2.0), max(mod(int(0.0),max(int(5.0), divInt(( in0 - min(int(8.0), in2) ),max(( in1 + abs(mod(mod(i0,( max(in2, int(6.0)) * int(3.0) )),max(max(res0, max(max(int(8.0), int(5.0)), i1)), divInt(res0,max(res0, int(8.0)))))) ), in1)))), i0))),int(2.0)),int(7.0)) \\g mod(i0,mod(int(6.0),divInt(in2,mod(( max(int(8.0), int(9.0)) * max(int(3.0), mod(int(9.0),divInt(max(divInt(min(divInt(i1,res0), int(1.0)),divInt(( abs(mod(divInt(( max(in1, int(4.0)) * res0 ),max(int(9.0), ( max(res0, in1) - ( abs(i2) + max(res0, int(1.0)) ) ))),max(res0, int(7.0)))) - min(in2, int(4.0)) ),mod(min(int(6.0), max(min(min(in1, min(abs(divInt(int(5.0),res0)), min(i2, ( abs(abs(int(9.0))) + i1 )))), ( mod(abs(mod(mod(in1,int(8.0)),int(4.0))),abs(max(int(3.0), int(0.0)))) * int(5.0) )), i0)),int(8.0)))), int(1.0)),min(int(1.0), min(int(0.0), ( in0 * ( in0 + abs(min(int(8.0), mod(int(0.0),min(divInt(min(int(8.0), in2),int(3.0)), min(mod(i1,( ( int(9.0) - int(7.0) ) + i0 )), ( abs(in1) + res0 )))))) ) )))))) ),( min(i1, ( ( ( min(int(9.0), int(3.0)) - int(8.0) ) - mod(int(9.0),i0) ) + abs(in0) )) - max(max(min(min(i2, int(6.0)), mod(in0,mod(mod(int(9.0),int(6.0)),i1))), min(min(( max(in2, ( max(abs(min(in1, res0)), ( abs(int(3.0)) * int(3.0) )) + ( min(divInt(( mod(divInt(( ( divInt(int(6.0),max(int(4.0), int(2.0))) - mod(i0,divInt(mod(i2,in1),min(mod(i0,int(7.0)), min(int(0.0), int(2.0))))) ) + ( i1 - ( divInt(( int(1.0) * int(5.0) ),in1) - i1 ) ) ),int(7.0)),min(i1, min(( min(min(int(9.0), max(( abs(int(8.0)) + ( min(mod(max(int(6.0), int(5.0)),i0), int(2.0)) + int(4.0) ) ), mod(divInt(mod(in2,min(in0, int(6.0))),( res0 - int(4.0) )),max(i2, i2)))), min(in2, int(1.0))) * max(i2, res0) ), int(0.0)))) * max(( mod(res0,in0) * int(4.0) ), divInt(mod(in2,abs(abs(abs(max(abs(abs(i2)), in0))))),min(abs(abs(int(5.0))), divInt(max(int(6.0), in0),int(1.0))))) ),int(5.0)), in0) * in2 ) )) - divInt(int(4.0),mod(divInt(( divInt(mod(in2,int(8.0)),in2) - min(in2, max(i1, int(7.0))) ),int(4.0)),int(4.0))) ), int(6.0)), in2)), i1) )))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = True\\nb0 = not int(6.0) \\l ( abs(min(in0, i0)) - max(res0, mod(i1,in1)) )\\nb0 = ( b1 and int(8.0) \\le in1 )\\nb0 = in0 \\le mod(in0,res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 82, 82, 4, 6, 1, 9, 4, 5, 2, 0, 88, 1, 352, 92, 91, 37, 55]}, {"genotype": [[0], [0, 1, 0, 1, 1], [0, 2, 2, 1, 0], [0, 1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 0, 1, 5, 4, 3, 9, 2, 7, 5, 5, 0, 3, 2, 7, 1, 0, 4, 3, 4, 2, 8, 5, 0, 8, 6, 6, 2, 1, 1], [3, 5, 2], [0], [], [1, 1, 1], [0, 0, 0], [], [], [0], [2, 1, 4, 0, 3, 0, 3, 0, 1, 3, 6, 3, 5, 5, 0, 4, 1, 5, 4, 5, 5, 2, 3, 4, 1, 3, 6, 5], [1, 0], [3, 1, 0, 0, 3, 2, 2, 1, 1, 0, 1, 0, 3, 0, 2, 1, 3, 3, 3, 1, 0, 2, 3, 3, 2, 2, 0, 0, 3, 0, 1, 3, 2, 2, 2, 1, 2, 2, 0, 2, 0, 3, 0, 1, 1, 2, 2, 0, 3, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 3, 1, 2, 1, 0, 2, 1, 3, 3, 2, 2, 3, 3, 1, 3, 1, 1, 0, 3, 0, 2, 0, 1, 1, 1, 0, 3, 0, 3, 0, 2, 2, 2, 3, 3, 2, 1, 0, 3, 2, 2, 3, 1, 2, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 2], [0, 1, 1, 0, 2, 2, 1, 1, 0, 2, 2, 2, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(int(0.0)) \\ge i2\\nif i1 != abs(( ( int(5.0) + int(0.0) ) - in1 )):{:\\nloopBreak% = 0\\nwhile int(1.0) == i0:{:\\nin0 -= min(i0, mod(int(5.0),max(min(min(int(4.0), in0), ( max(min(divInt(( i0 + i1 ),min(in0, int(3.0))), min(divInt(divInt(mod(int(9.0),mod(( res0 * ( in0 * abs(in2) ) ),int(2.0))),int(7.0)),divInt(( in2 - max(int(5.0), divInt(int(5.0),int(0.0))) ),( max(int(3.0), i0) - in1 ))), ( max(int(2.0), mod(int(7.0),i1)) + mod(int(1.0),abs(min(( ( min(min(int(0.0), min(int(4.0), int(3.0))), in2) * abs(in1) ) * divInt(in2,int(4.0)) ), int(2.0)))) ))), int(8.0)) * in2 )), min(i2, abs(in0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = ( ( ( min(max(( int(5.0) - i1 ), max(mod(mod(abs(int(0.0)),divInt(int(8.0),in0)),int(6.0)), int(6.0))), res0) - int(2.0) ) + mod(int(1.0),in2) ) + int(1.0) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 31, 31, 3, 1, 0, 3, 3, 0, 0, 1, 28, 2, 113, 30, 26, 16, 15]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [2, 0, 1, 2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 1, 2, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 0, 4, 7, 9, 2, 9, 3, 4, 1, 1, 5, 1, 2, 5, 4, 2, 0, 9, 8, 6, 7, 8, 2, 2, 6, 5, 1, 4, 3, 0, 4, 0, 6, 2, 9, 5, 4, 7, 8, 8, 9, 2, 7, 4, 1, 8, 8, 3, 5, 9, 9, 5, 2, 4, 9, 6, 0, 0, 1, 7, 1, 1, 0, 9, 7, 5, 9, 8, 1, 7, 7, 4, 7, 2, 5, 0, 4, 2, 7, 9, 4, 0, 4, 7, 2, 0, 6, 0, 1, 3, 0, 0, 4, 5, 5, 8, 9], [4, 1, 4, 0, 2, 0, 2, 2, 0, 3, 1, 5, 5], [2, 0, 2, 1, 2, 2, 0, 1], [1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 2, 0, 3, 2, 1, 2], [1], [1, 1, 0, 1], [2, 2, 5, 0, 5, 5, 1, 5, 6, 1, 0, 4, 6, 4, 4, 3, 5, 4, 6, 5, 5, 2, 6, 6, 6, 1, 0, 0, 4, 5, 5, 1, 1, 1, 2, 4, 5, 0, 2, 5, 0, 6, 1, 6, 4, 2, 2, 2, 2, 0, 0, 1, 3, 6, 1, 2, 0, 3, 3, 2, 1, 5, 4, 0, 5, 5, 4, 3, 5, 3, 5, 4, 5, 2, 6, 2, 3, 5, 5, 6, 5, 3, 2, 6, 0, 3, 6, 4, 3, 0, 5, 0, 4, 4, 4, 6, 0, 3], [0, 1, 1, 1, 1, 0], [0, 0, 1, 2, 0, 2, 2, 3, 2, 0, 1, 3, 0, 1, 3, 2, 1, 2, 1, 0, 1, 3, 1, 2, 2, 3, 0, 3, 3, 3, 2, 3, 0, 1, 2, 3, 3, 2, 3, 2, 2, 1, 0, 2, 0, 2, 1, 2, 3, 0, 1, 3, 2, 3, 1, 3, 2, 3, 1, 0, 3, 0, 2, 2, 0, 3, 0, 3, 2, 0, 1, 0, 0, 3, 0, 2, 1, 3, 1, 3, 0, 3, 1, 2, 3, 3, 3, 2, 2, 1, 1, 1, 0, 1, 2, 0, 1, 3, 1, 3, 1, 3, 1, 3, 1, 0, 2, 0, 1, 1, 1, 0, 1, 3, 0, 2, 3, 2, 3, 1, 2, 1, 2, 1, 0, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 0, 2, 0, 2, 0, 3, 2, 1, 2, 0, 0, 2, 0, 3, 2, 3, 1, 0, 1, 3, 2, 3, 1, 0, 3, 1, 0, 2, 1, 2, 2, 2, 2, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 1, 2, 3, 2, 1, 0, 1, 1, 0, 2, 1, 3, 1, 2, 1, 0, 0, 3, 1, 1, 1, 0, 3, 2, 3, 3, 2, 1, 3, 3, 1, 0, 3, 0, 2, 1, 3, 2, 1, 2, 0, 0, 0, 0, 3, 1, 0, 1, 0, 2, 3, 0, 2, 2, 1, 3, 2, 0, 2, 2, 1, 3, 1, 2, 1, 0, 2, 2, 3, 3, 0, 3, 3, 2, 3, 2, 0, 0, 0, 2, 3, 3, 3, 1, 0, 0, 1, 2, 3, 3, 3, 2, 0, 3, 0, 2, 2, 3, 0, 0, 2, 0, 2, 2, 1, 2, 1, 3, 1, 0, 3, 3, 2, 2, 0, 0, 3, 0, 1, 0, 3, 1, 0, 3, 2, 0, 2, 3, 0, 2, 1, 3, 3, 1, 3, 2, 1, 1, 3, 0, 1, 2, 2, 0, 1, 2, 0, 0, 2, 2, 1, 3, 3, 1, 3, 1, 0, 0, 1, 0, 1, 1, 2, 2, 3, 3, 3, 0, 0, 3, 2, 1, 3, 0, 2, 1, 2, 3, 0, 2, 3, 2, 3, 1, 1, 3, 3, 1, 0, 1, 1, 2, 2, 0, 0, 1, 3, 1, 2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [2, 2, 0, 1, 0, 1, 2, 1, 2, 2, 0, 0, 1, 2, 1, 0, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 2, 1, 2, 1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 2, 2, 2, 1, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 2, 0, 2, 2, 0, 1, 2, 1, 1, 0, 1, 0, 0, 1, 2, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 2, 0, 2], [2, 2, 0, 2, 1, 0, 1, 0, 0, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 1, 1, 2, 0, 1, 2, 2, 1, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( b2 or i2 \\le i2 ):{:\\nin2 = int(7.0)\\n:}else:{:\\ni0 *= divInt(in2,( mod(abs(( in2 * int(5.0) )),abs(i1)) + int(0.0) ))\\n:}\\nloopBreak% = 0\\nwhile min(( int(4.0) * divInt(int(7.0),in2) ), int(9.0)) \\g max(int(2.0), divInt(mod(min(res0, max(abs(max(divInt(abs(i1),int(9.0)), mod(abs(min(( min(mod(mod(int(3.0),i0),( in1 - ( int(4.0) + ( max(res0, int(1.0)) - abs(( max(int(1.0), min(mod(abs(int(5.0)),in1), abs(in1))) + ( divInt(in0,max(in2, abs(divInt(in1,int(1.0))))) + res0 ) )) ) ) )), in2) - abs(in2) ), ( int(2.0) * abs(int(5.0)) ))),max(i2, min(int(4.0), mod(min(min(max(( mod(int(2.0),int(0.0)) - int(9.0) ), res0), int(8.0)), divInt(res0,int(6.0))),abs(int(7.0)))))))), abs(int(8.0)))),min(int(2.0), min(int(2.0), res0))),mod(i1,int(6.0)))):{:\\ni0 -= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(1.0) \\le i0:{:\\nif int(4.0) \\l abs(in1):{:\\nb0 = mod(min(( max(int(3.0), mod(int(0.0),( int(4.0) * in2 ))) * max(int(0.0), int(6.0)) ), max(int(2.0), int(9.0))),int(5.0)) == abs(int(4.0))\\n:}else:{:\\nif max(in2, ( i1 + divInt(i1,abs(mod(int(7.0),mod(i1,i2)))) )) \\l mod(in1,max(( min(int(8.0), in2) + int(8.0) ), max(mod(min(int(9.0), i0),max(int(2.0), i2)), ( int(7.0) + divInt(( ( mod(int(4.0),in2) * int(1.0) ) - min(int(8.0), abs(divInt(abs(min(i0, int(8.0))),divInt(abs(( int(3.0) - res0 )),int(5.0))))) ),int(9.0)) )))):{:\\nloopBreak% = 0\\nwhile not b2:{:\\nloopBreak% = 0\\nwhile i1 == ( int(9.0) * abs(int(5.0)) ):{:\\nb1 = ( int(2.0) + res0 ) == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nb2 = ( not abs(int(4.0)) \\l int(9.0) and int(6.0) \\ge i2 )\\ni2 -= abs(divInt(max(abs(divInt(int(0.0),min(min(int(0.0), i2), abs(i2)))), ( int(1.0) * abs(divInt(int(7.0),( i0 * i0 ))) )),i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in0 \\g abs(int(1.0)):{:\\nb2 = False\\n:}else:{:\\nres0 -= i1\\nb0 = int(1.0) != i2\\nb1 = not ( max(i0, mod(divInt(int(0.0),max(divInt(in0,( divInt(int(9.0),max(int(7.0), ( int(5.0) + in0 ))) + mod(divInt(max(min(i2, min(abs(( min(( i1 - in2 ), in1) + divInt(abs(abs(min(int(9.0), i0))),in2) )), int(8.0))), ( max(abs(max(divInt(in2,max(in1, ( mod(min(in0, in2),divInt(in0,( mod(int(1.0),( int(7.0) * max(int(7.0), in2) )) + min(min(( mod(in1,in2) - max(i2, int(4.0)) ), res0), abs(int(7.0))) ))) - i2 ))), min(( in0 - mod(min(in2, mod(int(2.0),min(abs(int(5.0)), abs(mod(int(0.0),int(4.0)))))),abs(in2)) ), int(2.0)))), ( ( res0 + int(7.0) ) - ( in2 + in0 ) )) + mod(mod(int(9.0),min(min(int(4.0), abs(int(0.0))), i2)),res0) )),int(4.0)),i0) )), int(7.0))),int(2.0))) - ( ( min(min(abs(in0), res0), max(( int(0.0) + max(in1, mod(int(6.0),mod(abs(in0),divInt(min(( min(int(0.0), int(1.0)) * abs(min(int(3.0), i0)) ), int(0.0)),int(0.0))))) ), mod(( in2 - i0 ),int(4.0)))) + abs(int(5.0)) ) - ( int(5.0) - in1 ) ) ) != ( in1 * in1 )\\nres0 = mod(divInt(( i0 + int(8.0) ),int(9.0)),in0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 8, 12, 99, 99, 13, 8, 2, 21, 13, 8, 1, 4, 98, 6, 389, 98, 100, 49, 53]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [1], [1, 1], [1, 1, 1], [7, 3, 0], [0], [], [], [1], [0], [], [], [], [3, 2, 2, 5, 6], [1, 0], [3, 1, 3, 1, 0, 3, 2, 0, 3, 0, 1], [0], [1, 2, 2, 2], [2, 1], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(7.0), abs(int(3.0))) \\l in0:{:\\ni2 *= abs(( i2 - abs(in2) ))\\nres0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 1, 0, 0, 1, 1, 0, 0, 0, 5, 2, 11, 1, 4, 2, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 0, 0, 2, 1], [1], [0, 1, 0, 1], [1, 1, 1, 0, 1, 1], [7, 3, 8, 5, 9, 9], [2, 0, 0], [2, 0], [0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0], [3, 1, 3, 1, 3, 1, 2], [1, 1, 0], [], [5, 2, 4, 2, 1, 6, 2], [0, 0], [1, 0, 1, 3, 0, 2, 0, 0, 1, 1, 0, 1], [0], [1], [1], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( False and int(7.0) == in2 )\\ni2 = int(3.0)\\nb0 = ( False or ( True or not max(in1, ( i2 - i1 )) \\l int(8.0) ) )\\nloopBreak% = 0\\nwhile int(59.0) \\l res0:{:\\ni2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 6, 6, 3, 2, 3, 10, 3, 7, 3, 0, 7, 2, 12, 1, 1, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1], [2, 0, 0, 0, 1, 1, 1, 1], [1], [1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 4, 7, 2, 3, 4, 4, 9, 2, 4, 4, 5, 1, 7, 3, 3, 4, 0, 9, 5, 0, 0, 2, 0, 4, 8], [4, 5, 5], [1, 2, 0, 2], [], [1, 1, 0, 1], [0, 0, 0], [0], [], [], [5, 3, 0, 0, 3, 3, 0, 1, 2, 0, 3, 4, 3, 5, 0, 3, 6, 1, 1, 3, 5, 6], [1, 0, 0, 0], [3, 2, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 0, 2, 2, 1, 2, 1, 1, 1, 2, 3, 2, 1, 3, 3, 0, 0, 0, 2, 3, 1, 3, 3, 2, 0, 2, 3, 0, 1, 3, 3, 2, 1, 2, 0, 3, 3, 3, 1, 2, 1, 3, 2, 1, 0, 0, 1, 0, 2, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 1, 1, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 1, 0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 1, 2, 0, 2, 1, 2, 2, 2, 0, 0, 2, 0, 0, 1], [2, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(divInt(mod(( int(3.0) * int(5.0) ),int(4.0)),int(7.0)), int(2.0)) \\le min(int(3.0), int(4.0)):{:\\nin2 *= in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = divInt(( int(4.0) * divInt(int(9.0),int(2.0)) ),int(4.0)) != ( min(mod(int(4.0),max(max(i0, i0), in0)), ( max(int(5.0), max(abs(divInt(in0,( min(i0, int(1.0)) + abs(max(divInt(int(7.0),( i1 * abs(abs(abs(int(3.0)))) )), divInt(int(3.0),min(( int(4.0) + i2 ), i0)))) ))), int(0.0))) * in0 )) + divInt(min(( abs(min(int(9.0), in1)) + in0 ), in2),int(5.0)) )\\nb2 = b0\\ni0 = divInt(in0,int(0.0))\\nres0 = int(0.0)\\ni1 = ( i1 - min(in0, int(2.0)) )\\nb2 = ( int(0.0) - max(in2, int(4.0)) ) != mod(int(8.0),res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 1, 7, 27, 27, 3, 4, 0, 4, 3, 1, 0, 0, 22, 4, 86, 21, 20, 11, 11]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 2, 0, 0, 1, 2, 2, 0, 1, 0, 2, 0, 2, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 9, 8, 6, 2, 6, 4, 4, 4, 0, 6, 9, 0, 6, 2, 3, 8, 8, 9, 0, 2, 7, 2, 4, 1, 8, 5, 3, 6, 7, 3, 5, 9, 7, 5, 0, 1, 2, 3, 1, 4, 6, 2, 4, 3, 4, 3, 6, 6, 3, 8, 8, 5, 3, 0, 6, 9, 8, 0, 5, 4, 2, 7, 5, 7, 0, 5, 2, 2, 4, 9, 9, 7, 2, 4, 4, 7, 4, 5, 9, 6, 2, 3, 2, 7, 3, 3, 9], [3, 2, 2, 2, 5, 3, 4, 0, 1, 1, 5, 0], [2, 1, 0, 1, 2, 1, 2], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 1, 1, 2, 2, 0, 3, 3, 3, 1, 3, 0, 3, 3, 3, 2, 1, 3, 0], [1, 0, 0, 1], [1, 1, 0], [4, 4, 4, 6, 4, 6, 5, 0, 4, 5, 4, 4, 0, 0, 0, 6, 1, 0, 2, 1, 1, 3, 1, 5, 1, 1, 5, 6, 3, 6, 0, 1, 3, 6, 2, 0, 0, 5, 0, 5, 5, 5, 2, 3, 1, 4, 5, 4, 5, 1, 3, 5, 0, 3, 4, 2, 0, 6, 3, 1, 1, 1, 1, 2, 2, 1, 2, 3, 2, 0, 4, 6, 2, 3, 6, 0, 6, 5, 2, 2], [1, 1, 0, 1, 0], [3, 2, 1, 3, 0, 2, 1, 1, 3, 2, 0, 0, 1, 3, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1, 0, 1, 3, 1, 3, 3, 3, 3, 2, 0, 1, 1, 2, 3, 3, 2, 2, 2, 0, 1, 0, 0, 2, 2, 3, 0, 2, 3, 3, 1, 0, 2, 1, 2, 1, 3, 1, 3, 3, 1, 1, 2, 3, 0, 1, 3, 0, 0, 1, 0, 1, 0, 2, 1, 2, 2, 2, 3, 3, 1, 3, 0, 0, 1, 0, 2, 0, 2, 3, 2, 3, 0, 2, 2, 2, 3, 2, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 3, 2, 2, 1, 3, 3, 3, 0, 2, 0, 3, 3, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1, 2, 0, 2, 3, 2, 1, 0, 1, 1, 1, 2, 1, 2, 3, 1, 3, 2, 2, 1, 3, 0, 3, 0, 3, 3, 3, 1, 2, 1, 1, 0, 0, 3, 1, 2, 0, 3, 2, 3, 1, 2, 2, 0, 2, 1, 3, 3, 0, 3, 2, 2, 0, 3, 0, 1, 3, 2, 3, 0, 0, 2, 1, 3, 2, 3, 1, 1, 0, 0, 2, 0, 0, 0, 0, 3, 0, 2, 1, 3, 0, 2, 2, 2, 3, 0, 0, 1, 0, 3, 0, 3, 3, 3, 2, 1, 2, 2, 3, 1, 3, 1, 3, 0, 2, 1, 3, 0, 0, 0, 0, 3, 2, 0, 0, 2, 3, 2, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 3, 0, 2, 2, 0, 1, 1, 1, 3, 2, 1, 2, 0, 0, 3, 1, 3, 2, 1, 0, 2, 2, 2, 1, 1, 1, 2, 3, 0, 1, 2, 2, 1, 3, 2, 1, 3, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 2, 2, 1, 1, 0, 0, 1, 2, 0, 2, 1, 0, 0, 1, 2, 1, 2, 2, 2, 0, 0, 2, 2, 0, 0, 1, 0, 1, 1, 2, 2, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 0, 0, 1, 2, 0, 1, 0, 1, 1, 0, 2, 2, 0, 2, 0, 2, 0, 2], [0, 0, 0, 2, 0, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 2, 1, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 1, 1, 0, 2, 0, 2, 0, 1, 2, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(( int(8.0) + abs(in1) ), ( int(5.0) + int(9.0) )) \\ge abs(divInt(in1,in1))\\nloopBreak% = 0\\nwhile not ( int(8.0) == max(int(6.0), int(2.0)) or res0 == int(6.0) ):{:\\nin1 += int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 *= int(4.0)\\nb1 = ( in2 + i0 ) == int(4.0)\\nif ( False or True ):{:\\nif in1 != int(0.0):{:\\nin2 = max(int(6.0), min(min(max(abs(( in1 * int(9.0) )), int(0.0)), mod(min(abs(( mod(( in1 * int(6.0) ),i0) * i0 )), ( ( max(i0, mod(min(min(int(2.0), res0), ( int(3.0) - divInt(int(8.0),max(int(8.0), abs(max(int(9.0), int(0.0))))) )),( abs(i1) * int(2.0) ))) * abs(i0) ) * i2 )),int(7.0))), i1))\\n:}else:{:\\ni1 -= int(2.0)\\n:}\\nin0 = i1\\nloopBreak% = 0\\nwhile ( int(4.0) * mod(( divInt(abs(min(int(1.0), min(in2, i1))),int(8.0)) - i1 ),divInt(in2,divInt(abs(( abs(res0) - ( ( ( min(( int(5.0) + mod(min(int(3.0), int(6.0)),divInt(int(7.0),int(3.0))) ), int(5.0)) * int(9.0) ) * max(divInt(( int(7.0) + min(max(max(in0, mod(res0,abs(abs(int(5.0))))), int(0.0)), i0) ),i1), ( int(1.0) + int(2.0) )) ) * int(3.0) ) )),int(1.0)))) ) \\ge int(4.0):{:\\nb0 = not not b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif ( ( ( True or ( in0 + divInt(min(( int(6.0) + res0 ), int(2.0)),int(4.0)) ) \\le int(3.0) ) or divInt(int(4.0),divInt(abs(int(3.0)),abs(( ( int(6.0) + max(i2, max(i0, abs(max(min(int(6.0), mod(int(3.0),int(8.0))), i0)))) ) * in2 )))) \\l max(int(8.0), divInt(i0,abs(( max(int(5.0), divInt(( in2 * ( int(3.0) - min(abs(in2), min(( divInt(in2,max(i2, int(0.0))) * max(divInt(min(in0, i1),divInt(int(6.0),min(mod(max(int(9.0), int(8.0)),in1), in2))), ( in1 * in2 )) ), i1)) ) ),in0)) * abs(in2) )))) ) and ( b2 or ( ( ( not ( int(0.0) + max(i0, divInt(( divInt(max(in0, in1),int(5.0)) - i2 ),min(i0, min(max(abs(divInt(int(4.0),mod(( min(int(2.0), max(int(7.0), min(res0, mod(int(5.0),max(in0, i1))))) - i1 ),i1))), max(( i1 + i2 ), mod(min(( divInt(( i2 - ( int(7.0) * ( mod(( i1 * int(0.0) ),divInt(i2,mod(in0,mod(int(5.0),i2)))) - ( abs(int(2.0)) - int(2.0) ) ) ) ),divInt(int(4.0),i0)) + int(9.0) ), mod(int(9.0),( in1 * res0 ))),abs(i2)))), divInt(mod(in0,int(7.0)),int(2.0)))))) ) \\g int(4.0) or False ) or ( b1 and min(( int(4.0) + divInt(res0,i0) ), abs(int(7.0))) \\g min(( int(4.0) * res0 ), ( mod(mod(int(5.0),int(9.0)),int(6.0)) + ( abs(in2) - int(2.0) ) )) ) ) and ( ( int(3.0) * min(divInt(int(2.0),abs(int(7.0))), int(3.0)) ) - int(3.0) ) != i2 ) ) ):{:\\nb2 = int(9.0) \\l i2\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 5, 9, 89, 89, 12, 7, 10, 33, 12, 21, 4, 3, 80, 5, 323, 87, 72, 48, 42]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 1, 1, 1, 1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 2, 2, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 1, 9, 3, 6, 8, 1, 1, 9, 9, 1, 1, 7, 4, 7, 4, 2, 1, 3, 1, 0, 3, 4, 8, 4, 7, 2, 8, 2, 2, 7, 7, 1, 1, 7, 5, 3, 1, 2, 7, 1, 0, 2, 0, 1, 4, 7, 3, 5, 2, 2, 1, 3, 3, 6, 2, 2, 9, 0, 3, 0, 5, 0, 4, 4, 7, 9, 6, 2, 7, 0, 1, 8, 9, 7, 4, 7, 2, 5, 9, 1, 9, 8, 2, 2, 3, 1, 8, 4, 4, 3, 7, 3, 0, 4, 5, 4, 7, 3, 1, 3, 7, 3, 8, 5, 7, 0, 4, 0, 2, 2, 0, 0, 2, 4, 7, 3, 1, 8, 2, 4, 3, 9, 3, 2, 3, 7, 2, 0, 0, 6, 0, 0, 3, 9, 9, 0, 4, 8, 0, 5, 1, 6, 5, 3, 9, 4, 9, 9, 7, 6, 2, 3, 4, 3, 8, 9, 3, 4, 3, 2, 8, 1, 2, 5, 6, 1, 3, 0, 9, 1, 2, 6, 8, 9, 9], [2, 4, 4, 2, 4, 2, 5, 4, 3, 0, 5], [1, 2, 1, 1, 2], [0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 3, 0, 2, 2, 3, 2, 2, 0], [0], [1, 1], [3, 5, 1, 1, 5, 2, 5, 5, 2, 5, 3, 3, 3, 0, 6, 4, 3, 0, 3, 2, 5, 1, 1, 6, 2, 4, 3, 4, 3, 2, 0, 3, 0, 0, 6, 2, 5, 1, 2, 1, 0, 4, 3, 2, 2, 1, 0, 2, 4, 0, 2, 6, 6, 2, 6, 4, 0, 4, 4, 5, 0, 0, 0, 4, 4, 6, 0, 3, 6, 3, 5, 4, 3, 4, 4, 3, 3, 3, 3, 1, 5, 3, 6, 4, 5, 1, 2, 0, 2, 4, 6, 3, 6, 2, 3, 1, 5, 4, 4, 2, 2, 5, 1, 2, 3, 1, 3, 4, 1, 5, 5, 6, 5, 4, 5, 0, 2, 4, 0, 5, 6, 6, 2, 0, 4, 3, 6, 0, 1, 3, 5, 4, 5, 1, 3, 0, 0, 0, 5, 1, 6, 4, 2, 0, 5, 4, 3, 4, 6, 6, 4, 0, 4, 3, 6, 3, 2, 0, 3, 0, 6, 4, 5], [1, 0, 1, 1, 1, 0, 0, 1], [2, 3, 3, 1, 3, 1, 2, 0, 1, 0, 2, 1, 2, 0, 0, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 3, 1, 3, 2, 0, 0, 2, 3, 2, 1, 2, 3, 2, 2, 1, 2, 0, 2, 0, 3, 2, 2, 3, 2, 3, 1, 1, 3, 3, 2, 0, 2, 0, 2, 2, 0, 0, 3, 2, 2, 1, 3, 3, 1, 2, 3, 2, 3, 1, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 2, 3, 1, 0, 3, 2, 1, 3, 2, 3, 3, 0, 3, 2, 3, 0, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 0, 0, 3, 3, 2, 3, 1, 2, 2, 3, 3, 0, 2, 0, 0, 3, 2, 1, 2, 3, 3, 1, 1, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 3, 0, 3, 1, 0, 0, 1, 2, 1, 1, 1, 1, 1, 0, 3, 2, 1, 2, 2, 3, 0, 1, 1, 2, 0, 1, 0, 0, 0, 3, 3, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 2, 0, 1, 2, 2, 1, 2, 0, 2, 3, 0, 3, 2, 0, 2, 3, 2, 2, 2, 2, 2, 3, 2, 3, 3, 3, 2, 1, 2, 2, 2, 2, 2, 2, 1, 3, 1, 1, 1, 3, 0, 3, 2, 2, 2, 1, 3, 0, 1, 3, 2, 2, 2, 1, 3, 2, 2, 3, 3, 2, 1, 2, 1, 3, 3, 3, 1, 3, 1, 3, 1, 2, 0, 2, 0, 3, 1, 2, 3, 2, 2, 0, 2, 0, 3, 2, 2, 2, 0, 3, 0, 2, 2, 1, 1, 1, 3, 2, 3, 3, 3, 2, 1, 0, 0, 3, 1, 3, 0, 3, 2, 0, 2, 3, 2, 3, 3, 2, 1, 0, 0, 0, 0, 3, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 2, 3, 3, 0, 1, 3, 0, 3, 3, 0, 3, 0, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 2, 3, 3, 1, 0, 0, 3, 3, 1, 2, 3, 3, 2, 1, 1, 1, 3, 1, 0, 2, 0, 2, 3, 2, 0, 0, 1, 3, 0, 2, 0, 1, 1, 3, 3, 1, 0, 0, 1, 2, 1, 0, 3, 1, 3, 2, 0, 2, 3, 1, 1, 2, 1, 1, 1, 0, 2, 1, 3, 2, 3, 1, 1, 3, 3, 1, 3, 1, 3, 3, 1, 3, 0, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 0, 1, 0, 1, 1, 0, 0, 1, 2, 0, 1, 3, 2, 2, 2, 3, 1, 1, 1, 0, 3, 3, 0, 1, 3, 0, 2, 1, 0, 3, 3, 0, 2, 2, 2, 2, 1, 2, 3, 1, 0, 3, 0, 2, 0, 1, 0, 2, 3, 0, 3, 1, 0, 1, 3, 0, 3, 1, 3, 1, 0, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 3, 2, 3, 2, 3, 1, 3, 2, 0, 0, 2, 1, 1, 1, 2, 3, 3, 1, 2, 2, 1, 1, 3, 3, 1, 3, 1, 3, 0, 1, 1, 1, 2, 2, 3, 3, 1, 0, 2, 1, 1, 3, 3, 3, 2, 3, 1, 2, 2, 0, 2, 0, 0, 1, 1, 1, 3, 1, 3, 3, 3, 1, 0, 1, 1, 1, 2, 3, 0, 3, 3, 2, 3, 2, 2, 0, 0, 1, 2, 3, 2, 0, 3, 1, 2, 1, 3, 2, 1, 2, 0, 1, 0, 2, 0, 0, 1, 2, 2, 2, 0, 1, 1, 0, 3, 3, 2, 1, 3, 0, 1, 3, 0, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 0, 3, 2, 0, 3, 1, 3, 0, 3, 2, 0, 2, 0, 1, 3, 0, 0, 1, 2, 2, 3, 2, 3, 0, 2, 0, 3, 2, 1, 0, 3, 1, 1, 1, 0, 0, 3, 0, 0, 2, 0, 3, 3, 0, 0, 1, 2, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 1, 2, 0, 1, 2, 1, 0, 2, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 2, 1, 1, 1, 2, 2, 2, 0, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 0, 0, 2, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 2, 2, 1, 1, 2, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1, 2, 1, 0, 0, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 1, 1, 1, 1, 2, 1, 2, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 1, 0, 1, 0, 0, 1, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2, 2, 0, 1], [2, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 2, 2, 1, 0, 1, 1, 2, 0, 2, 1, 0, 0, 1, 2, 2, 2, 0, 2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 2, 1, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 170, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(min(min(int(5.0), max(int(5.0), divInt(in0,int(1.0)))), in2),( int(9.0) * ( i1 + i1 ) )) == in2:{:\\ni2 += min(int(3.0), int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in2\\ni2 -= mod(int(8.0),in2)\\nin0 *= int(1.0)\\nif not in0 \\le min(int(1.0), max(divInt(in0,i0), ( max(( int(9.0) * divInt(min(( ( int(9.0) - divInt(res0,( in1 + abs(divInt(( max(( max(int(1.0), int(1.0)) + min(min(( in0 + ( i0 + divInt(mod(in0,i2),min(( ( int(7.0) * abs(abs(int(4.0))) ) * mod(abs(mod(abs(int(7.0)),( mod(in2,abs(i1)) - max(mod(( i1 - res0 ),( abs(int(4.0)) * i2 )), min(mod(int(2.0),max(( abs(max(in1, min(( abs(in0) + int(1.0) ), int(3.0)))) + ( in1 * in0 ) ), i2)), int(1.0))) ))),i0) ), ( int(0.0) * in0 ))) ) ), i0), max(max(mod(min(int(3.0), mod(divInt(min(abs(i0), divInt(res0,i2)),max(divInt(int(4.0),( min(max(int(8.0), int(4.0)), ( int(7.0) - int(2.0) )) * mod(in2,int(8.0)) )), int(2.0))),i1)),int(2.0)), mod(min(i2, min(int(7.0), i1)),i0)), int(7.0))) ), ( int(1.0) - int(1.0) )) * int(7.0) ),int(5.0))) )) ) + int(3.0) ), in1),min(( int(1.0) * ( ( abs(in0) * int(2.0) ) - int(7.0) ) ), mod(i2,int(1.0)))) ), i2) + i1 ))):{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = ( b2 and not i0 \\le max(min(min(( mod(int(0.0),int(2.0)) - i2 ), int(0.0)), in1), mod(int(1.0),( i0 - int(4.0) ))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not ( ( ( int(7.0) * ( i2 + mod(abs(res0),min(mod(res0,( min(( divInt(divInt(( mod(min(divInt(min(max(abs(divInt(int(3.0),divInt(( ( ( ( divInt(int(5.0),abs(int(2.0))) * int(2.0) ) - int(1.0) ) + max(i2, max(( divInt(mod(int(3.0),max(res0, int(3.0))),abs(divInt(( mod(int(6.0),abs(mod(( abs(min(mod(int(2.0),mod(int(2.0),abs(min(max(int(9.0), max(int(0.0), abs(int(3.0)))), divInt(in1,( i0 + max(int(0.0), mod(min(mod(mod(in1,divInt(in1,min(( ( ( in2 - min(i0, ( ( int(5.0) * int(0.0) ) * int(4.0) )) ) * abs(mod(max(min(min(( int(4.0) + i0 ), i0), abs(int(7.0))), abs(in1)),min(mod(in1,divInt(max(( min(min(( int(9.0) * res0 ), i0), in0) + res0 ), min(max(in0, ( mod(( ( int(6.0) * ( int(2.0) + in2 ) ) - int(7.0) ),divInt(max(max(in1, int(0.0)), min(in0, min(min(in1, min(in1, mod(int(1.0),max(( int(8.0) + min(int(9.0), ( int(7.0) * ( mod(abs(abs(int(4.0))),in0) * in0 ) )) ), max(max(int(7.0), mod(abs(min(( int(2.0) - int(5.0) ), int(9.0))),min(int(1.0), in0))), mod(in0,( max(( i1 + in2 ), int(9.0)) - min(in0, divInt(res0,int(8.0))) ))))))), int(2.0)))),abs(min(int(2.0), in1)))) - in2 )), int(3.0))),( int(1.0) - i1 ))), min(int(8.0), max(mod(i2,mod(max(int(4.0), int(4.0)),mod(int(3.0),int(7.0)))), int(3.0)))))) ) - i0 ), divInt(int(0.0),min(( max(int(4.0), int(5.0)) * abs(max(int(4.0), min(int(7.0), min(abs(int(3.0)), min(i2, int(1.0)))))) ), int(3.0)))))),divInt(in1,res0)), int(7.0)),int(3.0))) )))))), int(8.0))) - min(( in0 * int(5.0) ), res0) ),int(7.0)))) * int(0.0) ),i2))) + in0 ), int(4.0))) ) - ( i1 * int(0.0) ) ),min(mod(divInt(( abs(int(2.0)) - int(2.0) ),int(0.0)),in2), abs(max(in1, int(0.0))))))), max(in1, mod(int(2.0),i2))), max(max(i2, ( divInt(mod(( int(4.0) - mod(max(int(7.0), in2),abs(i1)) ),mod(i2,int(3.0))),in0) - divInt(abs(i1),min(int(1.0), in0)) )), int(8.0))),max(in1, min(int(2.0), abs(int(4.0))))), i1),in2) - int(3.0) ),divInt(( in2 * int(9.0) ),res0)),int(3.0)) + in2 ), int(2.0)) - in1 )), int(3.0))) ) ) - ( int(7.0) - int(2.0) ) ) == in2 or not int(0.0) \\le i0 ):{:\\ni2 += divInt(divInt(max(divInt(max(( max(int(0.0), max(( in1 - i0 ), mod(int(6.0),int(0.0)))) * int(0.0) ), divInt(abs(max(int(3.0), ( divInt(int(9.0),int(9.0)) - abs(max(int(0.0), min(int(4.0), max(in2, int(8.0))))) ))),int(0.0))),int(5.0)), ( ( abs(min(int(1.0), res0)) * ( int(6.0) - int(5.0) ) ) + max(min(min(mod(min(int(3.0), divInt(( res0 - mod(i2,i0) ),int(9.0))),int(4.0)), int(9.0)), min(int(9.0), abs(max(min(int(7.0), in1), int(6.0))))), int(2.0)) )),int(3.0)),mod(abs(in0),abs(min(divInt(max(( ( res0 + i0 ) + int(4.0) ), mod(abs(mod(i1,max(int(3.0), ( int(8.0) * min(mod(int(9.0),( in0 * int(3.0) )), in2) )))),( in1 - in2 ))),int(4.0)), ( divInt(( i1 + int(3.0) ),int(2.0)) + in0 )))))\\n:}else:{:\\nloopBreak% = 0\\nwhile max(min(mod(int(8.0),min(i0, int(1.0))), max(i0, int(2.0))), abs(int(5.0))) == divInt(int(6.0),i0):{:\\nin2 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile i1 != ( res0 * in1 ):{:\\nloopBreak% = 0\\nwhile not min(( i2 * max(int(3.0), max(i0, max(divInt(in2,mod(in1,int(0.0))), max(in0, in1)))) ), int(9.0)) \\le ( ( abs(divInt(max(res0, ( res0 - abs(( int(1.0) + in1 )) )),abs(int(2.0)))) + int(6.0) ) + int(8.0) ):{:\\ni0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in0 \\ge abs(res0)\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile in0 \\l divInt(i2,min(max(i0, in0), int(9.0))):{:\\ni0 -= divInt(int(9.0),res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in1 != in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 9, 11, 177, 177, 11, 5, 2, 21, 11, 10, 1, 2, 163, 8, 679, 180, 167, 94, 91]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 5, 1, 1, 3, 9, 2, 2, 9, 5], [4, 3], [1, 2, 1], [1], [0, 1, 0, 1], [0, 0], [3, 0], [], [], [6, 5, 1, 1, 3, 2], [1], [2, 1, 3, 2, 3, 0, 1, 0, 2, 1, 1, 3, 1, 0, 1, 1, 2, 3, 1, 2, 2, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0], [0, 1, 0, 1], [1, 2, 1, 2, 2, 0], [1]], "fitness": 100, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= ( int(6.0) * min(( max(in2, int(6.0)) - i1 ), ( int(5.0) * int(1.0) )) )\\nb1 = ( min(int(1.0), i1) \\le int(3.0) or b2 )\\nb1 = int(92.0) \\ge ( max(int(2.0), mod(( in0 * int(9.0) ),i2)) + int(5.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 3, 3, 0, 3, 11, 11, 2, 3, 1, 4, 2, 2, 0, 0, 6, 1, 25, 6, 4, 6, 1]}][{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [8, 7, 0, 5, 8, 3, 6, 2, 2, 0, 7, 9, 9, 4, 2, 2, 5, 5, 0, 2, 2, 5, 2, 5, 8, 0, 5, 9, 3, 4, 6, 6, 4, 8, 5, 4, 5, 2, 6, 7, 9, 0, 4, 3, 6, 5, 8, 0, 1, 1, 0, 3, 1, 1, 9, 8, 0, 7, 5, 8, 7, 5, 5, 0, 6, 5, 4, 5, 2, 5, 9, 2, 5, 1, 4, 4, 6, 9, 2, 9, 9, 0, 9, 6, 7, 1, 2, 1, 8, 5, 1, 8, 5, 3, 1, 4, 8, 4, 8, 7, 6, 7, 4, 2, 8, 9, 5, 9, 5, 2, 4, 7, 2, 6, 8, 3, 6, 9, 9, 1, 0, 6, 5, 7, 4, 1, 2, 0, 0, 4, 0, 1, 9, 7, 4, 0, 2, 2, 3, 0, 3, 0, 5, 9, 5, 4, 5, 9, 3, 0, 1], [3, 3, 4, 4, 1, 4, 2, 4, 2, 1], [2, 2, 2, 0], [1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 2, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [6, 5, 3, 4, 5, 3, 1, 5, 4, 5, 2, 4, 0, 3, 4, 1, 0, 0, 0, 0, 1, 3, 3, 0, 6, 3, 0, 3, 3, 1, 3, 6, 1, 4, 2, 1, 2, 5, 2, 6, 4, 2, 1, 1, 0, 0, 3, 6, 0, 5, 0, 6, 5, 2, 3, 2, 5, 6, 0, 2, 5, 2, 0, 3, 1, 6, 1, 4, 1, 4, 3, 2, 0, 1, 4, 4, 0, 6, 0, 5, 6, 5, 2, 2, 6, 4, 3, 2, 4, 0, 5, 1, 3, 6, 1, 0, 5, 5, 6, 2, 1, 0, 5, 6, 6, 2, 1, 3, 1, 6, 6, 5, 4, 0, 0, 1, 5, 5], [0, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 3, 2, 2, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 3, 1, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 3, 0, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 3, 2, 2, 2, 0, 0, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 2, 3, 1, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 2, 0, 2, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 2, 2, 0, 0, 3, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 3, 1, 2, 1, 0, 2, 3, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 0, "tree_depth": 154, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(max(min(in2, in0), in1), max(in2, in0))\\nif not i1 \\ge max(int(8.0), min(( int(7.0) + mod(mod(int(0.0),int(5.0)),in2) ), divInt(( int(8.0) - min(mod(min(divInt(int(3.0),int(6.0)), in1),( int(2.0) + int(2.0) )), in2) ),abs(( mod(( ( i2 - int(0.0) ) - in1 ),max(i0, divInt(divInt(max(( int(7.0) - divInt(in0,in1) ), min(abs(( abs(int(9.0)) * i1 )), abs(divInt(int(9.0),i0)))),int(4.0)),( i0 * i0 )))) + divInt(mod(int(2.0),max(divInt(max(abs(int(2.0)), i0),i1), in0)),int(5.0)) ))))):{:\\nif mod(in0,i0) \\ge min(min(res0, max(( max(abs(in0), int(5.0)) + mod(i0,max(( max(mod(divInt(mod(min(int(0.0), abs(int(2.0))),in0),int(2.0)),int(5.0)), in0) + ( min(int(2.0), i1) + max(int(5.0), ( int(8.0) - min(min(int(059.0), int(3.0)), ( int(4.0) + divInt(int(6.0),( mod(abs(int(6.0)),in0) * res0 )) )) )) ) ), int(4.0))) ), max(max(divInt(i1,( in1 - min(i2, max(int(8.0), int(5.0))) )), max(int(4.0), min(abs(i1), max(min(int(5.0), ( min(abs(int(2.0)), min(i2, divInt(in2,mod(min(abs(int(6.0)), min(( max(( i2 - ( ( divInt(res0,max(max(( ( in1 + int(7.0) ) - ( divInt(i2,min(( divInt(( i1 * i1 ),i0) * min(min(int(9.0), i0), abs(int(0.0))) ), in0)) + abs(int(4.0)) ) ), abs(res0)), ( int(3.0) * ( mod(abs(int(6.0)),divInt(mod(int(5.0),( max(( divInt(min(abs(mod(abs(abs(i0)),int(8.0))), int(0.0)),in2) - i0 ), min(( ( max(divInt(divInt(max(( min(( res0 - max(in2, int(1.0)) ), mod(divInt(int(1.0),int(0.0)),int(3.0))) * ( abs(i2) - in0 ) ), int(1.0)),i2),divInt(abs(in2),int(1.0))), min(min(min(mod(res0,abs(mod(int(9.0),( ( int(8.0) + int(0.0) ) * abs(int(7.0)) )))), abs(abs(i0))), max(max(min(int(5.0), abs(i2)), ( divInt(abs(int(8.0)),mod(in2,mod(int(7.0),abs(mod(min(max(int(5.0), max(( max(int(5.0), i2) + abs(int(0.0)) ), max(max(i0, divInt(divInt(int(6.0),int(5.0)),in0)), min(max(i1, int(4.0)), max(( int(5.0) + max(mod(res0,( min(abs(int(2.0)), min(max(int(5.0), i1), ( min(in1, i1) + in1 ))) * min(divInt(( int(9.0) - in0 ),divInt(min(( ( max(int(2.0), mod(int(5.0),( ( ( int(1.0) - i2 ) - min(abs(mod(int(4.0),i0)), int(4.0)) ) + int(6.0) ))) + i1 ) - mod(max(int(9.0), int(2.0)),min(( int(9.0) - ( in1 - ( ( int(9.0) + max(( int(0.0) - max(int(9.0), mod(in1,divInt(int(6.0),int(7.0)))) ), i0) ) - divInt(int(1.0),int(2.0)) ) ) ), abs(abs(res0)))) ), max(int(1.0), int(8.0))),abs(int(5.0)))), int(1.0)) )), abs(mod(i0,( in2 - res0 )))) ), in2))))), int(8.0)),int(5.0)))))) - abs(int(3.0)) )), abs(mod(int(1.0),i2)))), min(( mod(i2,res0) * abs(mod(mod(abs(in1),max(in0, ( int(4.0) - min(( i2 + in1 ), i0) ))),in2)) ), int(8.0)))) + i1 ) + int(4.0) ), int(8.0))) - int(7.0) )),mod(divInt(int(6.0),in0),int(7.0)))) * res0 ) ))) + i1 ) * int(4.0) ) ), max(i0, int(2.0))) + in2 ), max(int(8.0), divInt(( abs(in2) - int(9.0) ),int(5.0))))),int(9.0))))) - ( ( abs(max(abs(( abs(res0) * int(5.0) )), i2)) + min(( int(2.0) - i1 ), min(int(4.0), max(int(7.0), mod(int(2.0),i0)))) ) + divInt(abs(abs(abs(in2))),res0) ) )), divInt(int(6.0),res0))))), mod(int(8.0),i2)))), i1):{:\\nif int(36.0) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile ( ( int(9.0) * divInt(max(( in0 + min(int(1.0), int(06.0)) ), int(5.0)),i1) ) \\le int(7.0) or not True ):{:\\nif not res0 \\g max(res0, in2):{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n:}else:{:\\nb0 = True\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 0, "mapping_values": [1, 9, 9, 5, 4, 124, 124, 5, 4, 1, 13, 5, 8, 3, 4, 112, 1, 496, 130, 135, 64, 66]}, {"genotype": [[0], [0, 1, 1, 0, 1], [0, 2, 1, 1, 1], [0], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 4, 7, 2, 9, 9, 1, 1, 0, 7, 0, 8, 4, 8, 6, 3, 1, 1, 2, 5, 3, 5, 6, 0, 1, 1, 2, 8, 4, 1, 7, 5, 4, 5, 6, 1, 5, 8, 8, 4, 0, 4, 9, 1, 9, 9, 4, 5, 1, 4, 1, 8, 3, 2, 2, 6, 5, 7, 1, 5, 8, 0, 2, 9, 3, 6, 5, 2, 9, 8, 8, 9, 7, 3, 6, 4, 3, 8, 5, 8, 1, 0, 7, 0, 6, 4, 8, 7, 8, 9, 7, 1, 5, 7, 9, 8, 6, 9, 1, 2, 6, 5, 5, 1], [0, 4, 0, 5, 1, 3, 0], [0, 0, 0, 1], [1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 2, 3], [], [1], [5, 0, 4, 4, 2, 5, 1, 6, 6, 3, 3, 1, 2, 2, 0, 3, 4, 0, 5, 4, 6, 5, 2, 4, 2, 2, 2, 6, 0, 4, 5, 4, 6, 5, 1, 5, 5, 5, 1, 0, 6, 2, 1, 2, 6, 1, 4, 0, 4, 4, 3, 1, 3, 0, 3, 3, 1, 0, 5, 4, 1, 1, 2, 4, 0, 3, 5, 6, 5, 2, 6, 5, 1, 1, 4, 0, 2, 3, 5, 4, 0, 4, 2, 2, 5, 1, 3, 4, 2, 4, 4, 5, 6, 6, 0, 4, 0, 0, 4, 4, 6, 0, 3], [], [1, 0, 3, 3, 2, 2, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 0, 1, 2, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 2, 0, 2, 1, 0, 2, 2, 0, 3, 0, 2, 1, 1, 0, 3, 0, 0, 3, 1, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 3, 2, 3, 2, 1, 0, 0, 2, 0, 3, 1, 2, 2, 1, 0, 2, 2, 3, 3, 3, 2, 2, 0, 3, 2, 0, 3, 2, 3, 1, 1, 2, 0, 1, 2, 2, 3, 2, 1, 1, 2, 1, 1, 3, 3, 1, 1, 3, 0, 3, 1, 2, 1, 0, 0, 3, 2, 1, 2, 2, 2, 2, 1, 0, 1, 1, 0, 3, 0, 3, 0, 3, 2, 3, 1, 3, 2, 0, 1, 1, 3, 3, 0, 0, 3, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 1, 3, 2, 2, 3, 2, 2, 1, 3, 2, 0, 3, 3, 0, 2, 1, 0, 3, 0, 2, 2, 0, 1, 3, 2, 0, 2, 1, 2, 0, 0, 1, 3, 2, 2, 1, 0, 1, 3, 1, 2, 3, 2, 3, 3, 1, 0, 3, 1, 2, 2, 1, 2, 0, 2, 3, 2, 1, 1, 0, 3, 2, 2, 2, 0, 1, 3, 1, 0, 0, 3, 3, 3, 0, 1, 3, 1, 2, 0, 3, 0, 0, 1, 3, 2, 0, 2, 1, 2, 3, 1, 0, 0, 1, 1, 2, 1, 0, 3, 0, 3, 1, 1, 1, 1, 0, 2, 0, 2, 0, 3, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 3, 3, 1, 2, 3, 0, 3, 2, 3, 1, 0, 3, 1, 3, 2, 2, 3, 1, 2, 0, 2, 1, 1, 1, 0, 3, 3, 1, 1, 2, 2, 0, 3, 2, 1, 3, 3, 0, 2, 2, 0, 3, 0, 2, 3, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 3, 2, 3, 0, 0, 2, 3, 2, 2, 0, 3, 0, 1, 0, 0, 1, 1, 2, 2, 1, 3, 2, 3, 3, 1, 2, 0, 0, 3, 2, 2, 3, 2, 1, 1, 2, 3, 1, 2, 1, 0, 1, 1, 3, 1, 1, 0, 0, 3, 3, 3, 1, 3, 0, 2, 1, 0, 0, 3, 3, 3, 0, 3, 1, 2, 0, 1, 2, 1, 2, 1, 1, 2, 2, 0, 3, 3, 0, 2, 3, 0, 3, 0, 0, 1, 3, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [2, 1, 2, 2, 1, 2, 0, 2, 0, 1, 0, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 1, 1, 2, 1, 2, 0, 2, 2, 1, 1, 0, 0, 2, 1, 2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 1, 1, 2, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 0, 2, 0, 2, 1, 0, 1, 2, 2, 2, 0, 1, 2, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 1, 2], [1, 1, 0, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 0, 0, 1, 0, 1, 1, 2, 0, 0, 2, 2, 1, 2, 0, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(1.0) \\l in2\\nif ( not ( abs(max(divInt(mod(mod(divInt(abs(divInt(int(5.0),( divInt(abs(mod(int(4.0),( i0 - int(7.0) ))),divInt(in1,( ( ( int(2.0) - in1 ) + ( int(9.0) + divInt(i2,mod(max(abs(divInt(int(9.0),( int(1.0) - int(1.0) ))), in2),int(0.0))) ) ) - i1 ))) * ( res0 - ( int(7.0) + res0 ) ) ))),divInt(( in0 - min(in0, mod(int(0.0),int(8.0))) ),i1)),abs(i2)),i2),min(int(4.0), divInt(max(int(8.0), min(max(abs(i0), abs(abs(in0))), int(6.0))),( int(3.0) - ( in1 - i0 ) )))), int(1.0))) \\le in2 or int(1.0) \\l in1 ) or max(divInt(abs(divInt(int(2.0),res0)),in2), mod(i2,max(int(5.0), ( ( int(3.0) - in1 ) * ( divInt(max(abs(abs(mod(( i2 - max(( i2 - abs(( max(int(5.0), int(6.0)) * divInt(i2,int(0.0)) )) ), ( ( abs(divInt(int(1.0),int(1.0))) * ( int(2.0) + int(8.0) ) ) - max(min(int(4.0), int(1.0)), max(res0, min(int(7.0), ( int(5.0) * i0 )))) )) ),in1))), max(divInt(int(4.0),( divInt(divInt(( int(5.0) + in2 ),int(6.0)),int(1.0)) * in1 )), max(res0, abs(in2)))),max(( abs(int(5.0)) * min(mod(i1,int(8.0)), int(8.0)) ), abs(abs(in2)))) * in2 ) )))) != max(max(min(divInt(mod(mod(( min(( abs(mod(max(divInt(int(4.0),abs(mod(( abs(mod(divInt(int(0.0),max(( in2 + max(min(i1, ( int(4.0) * i0 )), min(res0, ( ( i2 + int(9.0) ) * abs(mod(i1,divInt(int(1.0),mod(i2,res0)))) ))) ), int(9.0))),abs(( ( int(9.0) + i1 ) + int(4.0) )))) - min(int(5.0), ( min(( max(min(int(1.0), in1), min(int(4.0), ( ( int(1.0) * ( i0 - divInt(min(mod(int(8.0),int(3.0)), in1),max(( ( ( in1 - int(2.0) ) + min(int(2.0), in0) ) + i1 ), max(max(abs(in0), int(6.0)), abs(int(5.0))))) ) ) + ( i0 - abs(in0) ) ))) * in0 ), int(7.0)) * min(mod(i1,mod(int(1.0),mod(abs(int(5.0)),i0))), in2) )) ),int(8.0)))), int(0.0)),divInt(int(2.0),in1))) + abs(i1) ), min(int(9.0), int(3.0))) + int(6.0) ),int(5.0)),i1),( i2 - mod(in1,min(i0, in0)) )), in2), res0), int(2.0)) ):{:\\nb0 = int(9.0) \\g ( int(8.0) + int(8.0) )\\n:}else:{:\\nb0 = in2 \\ge abs(max(int(9.0), ( min(i2, abs(mod(max(int(7.0), res0),max(int(3.0), abs(mod(divInt(max(int(6.0), divInt(in2,( int(4.0) - int(3.0) ))),int(8.0)),i1)))))) - max(max(int(5.0), int(8.0)), divInt(( i1 * min(mod(int(1.0),abs(max(in1, divInt(( i0 + max(i2, ( abs(divInt(divInt(divInt(min(min(min(in0, in2), in1), int(0.0)),abs(( min(i0, in1) + mod(abs(mod(( i2 * max(i2, int(7.0)) ),in2)),i1) ))),int(0.0)),int(6.0))) * mod(mod(int(4.0),min(divInt(max(abs(int(8.0)), divInt(in0,in1)),abs(mod(mod(abs(divInt(int(7.0),int(8.0))),( min(int(9.0), divInt(int(7.0),i2)) - int(1.0) )),int(5.0)))), max(int(7.0), int(9.0)))),in1) )) ),in1)))), abs(min(max(int(8.0), max(in2, ( int(6.0) * res0 ))), res0))) ),min(max(abs(i0), min(int(9.0), ( in1 + int(1.0) ))), ( int(2.0) - mod(int(6.0),int(5.0)) )))) )))\\nb1 = mod(( i0 + min(max(i0, ( min(in1, max(in1, res0)) + int(5.0) )), abs(i0)) ),int(1.0)) \\l in0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 105, 105, 7, 4, 2, 10, 7, 3, 0, 1, 103, 0, 442, 123, 111, 58, 65]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 0, 2, 0, 1, 1], [1, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 3, 6, 2, 5, 1, 1], [3, 3, 5], [2, 2, 1, 2], [1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0], [3, 0, 1, 2, 1, 2], [1, 1], [], [6, 4, 4, 2], [1], [3, 1, 1, 0, 1, 1, 1, 3, 1, 3, 1, 0, 2, 1, 0], [0], [0, 0, 0], [0, 2], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( min(int(4.0), int(8.0)) \\ge res0 or b2 ):{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not False:{:\\nin1 += int(3.0)\\nb1 = int(6.0) \\ge int(2.0)\\nb2 = not min(int(5.0), min(int(1.0), in1)) != ( int(1.0) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 8, 8, 3, 4, 1, 9, 3, 6, 2, 0, 4, 1, 15, 1, 3, 2, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 2, 2, 2, 1, 1, 1, 0, 1, 2, 1, 0, 0, 1, 1], [1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 2, 1, 3, 6, 3, 0, 0, 1, 1, 2, 3, 9, 0, 3, 8, 1, 6, 2, 7, 8, 2, 2, 9, 4, 4, 8, 0, 3, 4, 8, 6, 1, 9, 3, 4, 0, 6, 8, 6, 4, 8, 3, 1, 6, 4, 8, 8, 3, 9, 5, 2, 1, 6, 1, 1], [1, 0, 0, 3, 0, 5, 5, 4], [1, 1, 1, 1, 1, 0, 1, 1, 2, 2], [0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 3, 3, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1], [3, 6, 2, 4, 6, 0, 6, 5, 2, 0, 3, 5, 3, 4, 1, 5, 0, 0, 3, 5, 6, 6, 4, 3, 5, 1, 4, 6, 2, 2, 1, 0, 4, 1, 0, 2, 4, 2, 5, 4, 3, 3, 5, 3, 2, 6, 6], [1, 1, 0], [1, 1, 1, 0, 2, 3, 0, 2, 3, 1, 2, 2, 0, 2, 2, 1, 0, 3, 1, 0, 1, 0, 0, 2, 2, 2, 2, 2, 3, 3, 1, 0, 1, 2, 0, 2, 1, 2, 3, 1, 2, 1, 0, 0, 3, 3, 2, 0, 3, 3, 3, 0, 1, 2, 3, 1, 1, 1, 3, 3, 2, 0, 2, 1, 3, 2, 0, 2, 0, 0, 3, 1, 3, 2, 0, 2, 3, 0, 1, 3, 1, 1, 1, 1, 2, 3, 0, 1, 1, 1, 3, 2, 0, 1, 1, 3, 0, 3, 3, 1, 2, 0, 3, 2, 3, 0, 3, 1, 3, 1, 3, 1, 1, 3, 3, 3, 0, 3, 3, 3, 3, 0, 0, 0, 2, 1, 2, 3, 2, 3, 3, 0, 3, 0, 1, 0, 3, 3, 3, 2, 1, 0, 2, 1, 1, 0, 3, 3, 0, 3, 0, 3, 1, 3, 0, 1, 2, 3, 0, 2, 3, 2, 1, 2, 1, 1, 0, 0, 1, 2, 1, 3, 2, 3, 1, 2, 0, 3, 3, 1, 1, 0, 1, 3, 1, 0, 3, 2, 1, 1, 1, 3, 1, 0, 2, 1, 3, 1, 1, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 0, 0, 1, 2, 2, 0, 2, 2, 0, 2, 0, 2, 1, 1, 2, 1, 0, 2, 1, 2, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 0, 2, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 2, 1, 1, 2, 1, 0, 0, 2, 2, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(6.0) \\g int(4.0)\\nloopBreak% = 0\\nwhile False:{:\\nif b1:{:\\nif int(2.0) \\l in0:{:\\nres0 += mod(min(i2, mod(min(int(1.0), ( mod(in1,( mod(int(3.0),res0) - max(int(6.0), i0) )) + int(3.0) )),res0)),in2)\\n:}else:{:\\nb1 = divInt(( mod(( mod(max(max(int(0.0), i2), int(0.0)),( i0 - ( int(1.0) + ( max(int(1.0), ( int(2.0) + in0 )) + in2 ) ) )) - abs(max(( in0 - abs(max(abs(in1), int(3.0))) ), ( max(int(9.0), int(0.0)) + int(3.0) ))) ),max(min(( i1 * divInt(int(8.0),min(divInt(in2,mod(i0,i0)), max(int(1.0), abs(mod(in0,mod(abs(in2),int(6.0))))))) ), min(int(2.0), int(7.0))), int(8.0))) - int(2.0) ),mod(abs(res0),int(2.0))) \\l int(9.0)\\n:}\\n:}else:{:\\nres0 -= int(4.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b1\\nb0 = abs(mod(in1,int(4.0))) \\ge int(8.0)\\nif min(in0, abs(min(int(0.0), ( in2 * abs(mod(max(i1, max(int(3.0), abs(int(4.0)))),max(int(8.0), int(6.0)))) )))) \\l min(abs(max(in1, abs(min(min(max(res0, i2), i2), ( int(1.0) - divInt(min(( min(abs(i1), min(i0, int(9.0))) + in1 ), max(max(min(( int(3.0) + i1 ), divInt(int(4.0),int(0.0))), i0), abs(abs(i2)))),min(in1, min(int(6.0), min(i2, int(8.0))))) ))))), ( min(in2, ( max(divInt(int(6.0),divInt(int(4.0),int(8.0))), in1) * in0 )) * int(3.0) )):{:\\nb1 = mod(int(1.0),max(mod(min(int(6.0), ( in0 - max(min(int(4.0), int(8.0)), in2) )),int(8.0)), abs(int(3.0)))) != in0\\nb1 = min(( int(9.0) - int(5.0) ), int(2.0)) != abs(int(1.0))\\nb2 = i2 \\le ( int(6.0) + max(int(1.0), int(1.0)) )\\n:}else:{:\\nres0 = res0\\n:}\\nb2 = ( ( True and True ) and True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 4, 11, 57, 57, 8, 10, 2, 16, 8, 8, 4, 3, 47, 3, 200, 41, 58, 22, 21]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1, 1], [2, 3, 7], [5], [], [], [1], [0], [], [], [], [6, 4, 4], [0], [3, 1, 1, 1, 2, 0, 3, 0], [1], [1, 2], [], [1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(2.0), int(3.0)) != int(7.0):{:\\nres0 = mod(in1,abs(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 1, 0, 0, 1, 1, 0, 0, 0, 3, 1, 8, 1, 2, 0, 1]}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 1, 2, 0, 2, 1, 2, 0], [0, 0, 1, 0, 1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 1, 4, 5, 1, 8, 5, 6, 0, 4, 3, 3, 2, 5, 7, 5, 6, 2, 6, 4, 6, 8, 7, 5, 7, 5, 3, 6, 7, 8, 7, 6, 6, 0, 9, 4, 2, 4, 1, 8, 0, 3, 7, 6, 1, 7, 9, 0, 0, 0, 5, 4, 1, 9, 3, 9, 4, 1, 5], [4, 0, 1, 2, 3, 3, 5], [1, 0], [1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 3, 3, 3, 1, 1], [1, 0, 0], [0, 0, 1], [1, 0, 5, 1, 2, 1, 1, 3, 5, 5, 4, 6, 0, 0, 5, 4, 6, 6, 6, 0, 6, 1, 2, 4, 2, 4, 3, 6, 1, 2, 4, 5, 1, 1, 3, 0, 4, 0, 3, 3, 1, 4, 1, 3, 5, 0, 2, 4, 4, 6, 1, 6, 1, 1, 2, 2, 0, 0, 5, 4, 2, 6, 2, 1, 5, 4, 6, 6, 2, 4, 5, 6, 4, 3, 6, 6, 0, 3, 3, 3, 5], [1, 0, 1], [1, 3, 2, 2, 1, 0, 2, 0, 0, 2, 0, 2, 3, 0, 0, 3, 2, 2, 0, 1, 0, 1, 1, 0, 3, 2, 3, 3, 0, 2, 0, 0, 0, 2, 0, 2, 3, 3, 2, 0, 3, 2, 0, 3, 2, 2, 0, 3, 0, 0, 1, 0, 1, 1, 2, 3, 1, 1, 3, 1, 2, 3, 3, 1, 3, 3, 0, 2, 1, 2, 2, 3, 2, 0, 3, 0, 0, 3, 1, 0, 1, 3, 2, 3, 2, 3, 2, 1, 2, 1, 3, 2, 3, 3, 0, 2, 0, 2, 1, 0, 3, 1, 0, 3, 0, 2, 0, 0, 3, 0, 3, 2, 3, 0, 2, 3, 2, 0, 1, 3, 0, 2, 0, 2, 1, 0, 2, 1, 2, 1, 1, 3, 3, 1, 2, 3, 1, 3, 2, 1, 2, 2, 3, 1, 0, 0, 0, 3, 1, 3, 2, 0, 2, 1, 1, 1, 2, 3, 2, 3, 0, 3, 0, 0, 2, 1, 3, 1, 3, 3, 0, 0, 3, 2, 3, 2, 2, 3, 2, 3, 1, 3, 3, 0, 1, 1, 3, 0, 1, 0, 0, 0, 0, 3, 0, 2, 3, 2, 1, 3, 3, 2, 3, 1, 0, 1, 3, 3, 1, 2, 2, 1, 2, 1, 2, 3, 2, 0, 1, 2, 1, 0, 3, 3, 1, 1, 0, 3, 0, 3, 0, 2, 3, 0, 1, 0, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 2, 2, 1, 2, 1, 2, 0, 2, 3, 1, 1, 1, 2, 3, 3, 0, 3, 2, 0, 1, 0, 3, 1, 0, 0, 0, 2, 3, 2, 0, 3, 2, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 3, 1, 0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 2, 2, 1, 2, 1, 2, 2, 1, 0, 1, 1, 2, 2, 0, 2, 1, 2, 2, 0, 1, 0, 0, 2, 2, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 2, 2, 0, 2, 2, 0, 1, 2, 2, 0, 1, 1, 1, 2, 1, 2, 1, 0, 1, 0, 0, 1, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 2], [2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 2], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(4.0) \\le abs(divInt(mod(int(2.0),i1),( i0 * in2 ))):{:\\nif ( i1 + mod(abs(i2),i1) ) \\l abs(mod(( i1 - int(1.0) ),in0)):{:\\nin2 += int(4.0)\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( b1 or False ):{:\\nin2 = int(5.0)\\nif in1 \\g max(mod(abs(max(res0, divInt(i0,i0))),in2), mod(in1,( abs(abs(divInt(res0,max(( res0 - min(divInt(divInt(res0,max(i0, res0)),int(1.0)), i1) ), int(8.0))))) + int(5.0) ))):{:\\nb0 = ( max(int(6.0), int(0.0)) - abs(int(4.0)) ) == divInt(abs(min(int(3.0), abs(max(i2, divInt(int(3.0),divInt(mod(abs(mod(in1,abs(i2))),in1),min(int(2.0), in0))))))),int(5.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile ( ( max(mod(min(( min(( int(7.0) - mod(int(5.0),abs(( abs(abs(res0)) - ( i1 * mod(int(6.0),i2) ) ))) ), min(int(2.0), in1)) * max(in2, mod(i1,i1)) ), min(in0, min(( abs(i0) + mod(min(( in1 * int(6.0) ), min(i0, ( in0 - ( int(4.0) + in0 ) ))),( int(6.0) + mod(int(8.0),int(7.0)) )) ), max(min(int(5.0), divInt(min(int(7.0), abs(divInt(int(5.0),divInt(( abs(int(3.0)) - i1 ),in1)))),i1)), min(int(6.0), abs(mod(in0,( int(7.0) + int(8.0) )))))))),int(7.0)), mod(abs(divInt(min(in2, max(i0, i2)),divInt(int(6.0),abs(int(6.0))))),abs(min(in1, in1)))) \\ge max(divInt(max(( mod(max(mod(abs(int(0.0)),max(abs(res0), int(9.0))), int(4.0)),max(i1, int(2.0))) + res0 ), i1),i1), i2) and ( ( True and min(i2, ( max(( int(4.0) * min(min(divInt(max(int(1.0), i0),int(8.0)), abs(max(int(0.0), ( ( int(3.0) + ( int(7.0) - mod(min(divInt(i0,int(6.0)), divInt(int(1.0),in2)),abs(max(int(7.0), int(9.0)))) ) ) + in1 )))), max(i2, abs(res0))) ), divInt(max(i2, int(0.0)),i1)) + divInt(divInt(mod(int(0.0),mod(in2,abs(int(0.0)))),( int(5.0) + divInt(divInt(int(4.0),( int(1.0) * divInt(in1,mod(max(int(9.0), int(3.0)),int(9.0))) )),( min(min(res0, abs(( res0 * int(4.0) ))), i2) + abs(int(1.0)) )) )),in1) )) \\ge in2 ) or True ) ) or res0 != ( abs(divInt(in1,max(( in0 + res0 ), ( res0 + ( i0 + min(abs(in0), in0) ) )))) - abs(int(5.0)) ) ):{:\\nin0 *= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 60, 60, 7, 2, 5, 16, 7, 9, 3, 3, 81, 3, 291, 76, 77, 33, 45]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [2, 1, 2], [3, 0], [0], [0], [0, 0, 0, 1, 1], [0, 0], [3, 2, 2], [], [], [6, 3, 5, 6], [], [1, 3, 2, 2, 0, 0, 2, 0, 1, 1, 3, 0], [1, 1, 0], [2, 2], [0], [0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not not int(2.0) \\ge abs(divInt(mod(res0,in0),( in2 + int(1.0) ))) and int(2.0) \\l abs(res0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 2, 1, 1, 5, 2, 3, 0, 0, 4, 0, 12, 3, 2, 1, 2]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 0, 2, 0, 0], [1, 0], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 3, 9, 3, 9, 9, 1, 4, 0, 8, 2, 0, 5, 4, 1, 3, 6, 0, 8, 1, 3, 0, 7, 9, 9, 7, 5, 8], [3, 2, 4, 4], [2, 0], [], [0, 0, 1, 1, 1, 1], [0, 0, 0, 0], [2, 2], [], [1], [1, 0, 0, 1, 5, 3, 5, 6, 2, 4, 6, 0, 5, 5, 6, 5, 0, 6, 1, 2], [1], [0, 1, 2, 3, 2, 3, 3, 2, 3, 0, 3, 0, 1, 1, 1, 1, 0, 2, 3, 0, 2, 0, 2, 3, 1, 3, 3, 3, 1, 2, 1, 2, 1, 0, 2, 0, 3, 0, 1, 3, 1, 2, 2, 2, 1, 3, 1, 0, 2, 2, 2, 3, 2, 1, 0, 3, 1, 3, 0, 1, 0, 1, 2, 0, 1, 3, 3, 1, 2, 0, 3, 1, 3, 1, 1, 1, 2, 2, 3, 3, 0, 0, 2, 1, 3, 1, 2, 3, 1, 3, 0, 1, 1, 3, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [2, 2, 1, 2, 2, 2, 0, 0, 0, 1, 1, 0, 1, 0, 2, 0, 0, 2, 2, 1, 1, 1, 2, 0, 0, 1], [0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not i1 \\ge int(6.0):{:\\ni0 += ( abs(divInt(abs(max(divInt(abs(i0),abs(i1)), int(6.0))),int(3.0))) * int(9.0) )\\nif int(3.0) == in2:{:\\nb2 = ( abs(in0) * divInt(in2,( min(int(9.0), min(min(max(int(9.0), divInt(int(1.0),( int(4.0) * res0 ))), divInt(i2,max(in1, int(0.0)))), min(int(8.0), ( divInt(( int(2.0) - max(int(0.0), res0) ),mod(( ( min(mod(int(5.0),i0), abs(int(4.0))) - min(in2, int(1.0)) ) * in2 ),int(3.0))) + divInt(res0,int(6.0)) )))) + min(abs(int(0.0)), ( in2 + abs(int(8.0)) )) )) ) \\le max(int(1.0), int(3.0))\\n:}else:{:\\nb0 = int(0.0) \\le ( ( max(max(i0, res0), ( int(7.0) + abs(int(9.0)) )) - mod(min(int(9.0), min(i1, int(7.0))),int(5.0)) ) + max(i2, int(8.0)) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 29, 29, 4, 2, 0, 6, 4, 2, 0, 1, 20, 1, 96, 22, 26, 13, 10]}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 2, 1], [0, 1], [0, 0], [1, 1, 1, 1, 1], [9, 0, 6, 0, 0], [3, 4], [0, 2, 1, 1], [], [1, 0, 1, 0], [0, 0], [0, 0], [], [1], [6, 0, 2, 0, 1, 0, 2], [], [2, 0, 0, 0, 0, 3, 2, 1, 3, 3, 1, 3, 1, 3, 0, 3, 0, 1, 3, 2, 1, 0], [0, 0, 0], [2, 0, 0, 0, 1, 1, 2], [2, 1, 0], []], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( res0 * i0 ) \\ge i2:{:\\nb0 = b2\\n:}else:{:\\nloopBreak% = 0\\nwhile i0 \\le abs(( int(9.0) - min(min(int(0.0), min(int(6.0), max(i1, max(i0, int(0.0))))), abs(( int(0.0) + i2 ))) )):{:\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 5, 5, 2, 4, 0, 4, 2, 2, 0, 1, 7, 0, 22, 3, 7, 3, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 0, 8, 4, 3, 3, 4, 4, 1, 6, 1, 5, 7, 6, 3, 3, 8, 8, 4, 1, 1, 9, 2], [2, 1, 3, 5, 5, 1], [0, 0, 0], [0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0], [2, 3, 3, 1, 2, 1, 3, 1, 0], [1, 1, 0], [1, 1, 0, 0, 1], [3, 0, 1, 4, 0, 2, 0, 5, 2, 1, 5, 3, 2, 5, 6, 4, 2, 4, 2, 3, 5, 4], [1, 0, 1], [1, 1, 2, 1, 2, 2, 3, 0, 1, 1, 2, 3, 1, 2, 3, 0, 0, 1, 1, 3, 0, 0, 0, 0, 2, 2, 0, 3, 2, 3, 1, 2, 3, 1, 1, 1, 0, 3, 2, 2, 0, 2, 2, 1, 3, 2, 3, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1, 3, 3, 0, 2, 1, 3, 0, 0, 1, 1, 3, 3, 0, 2, 2, 3, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [2, 0, 1, 0, 2, 2, 2, 1, 0, 1, 0, 0, 2, 2, 1, 1], [1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( ( int(6.0) == int(7.0) and False ) and divInt(int(0.0),divInt(( abs(in0) - int(8.0) ),int(4.0))) \\g ( min(int(3.0), ( max(i0, i1) + int(3.0) )) - int(4.0) ) ):{:\\nif not min(in1, i0) \\ge i2:{:\\ni0 -= in2\\n:}else:{:\\nb0 = False\\n:}\\n:}else:{:\\nif ( True or divInt(divInt(i2,abs(mod(abs(int(4.0)),( abs(int(1.0)) + int(6.0) )))),int(1.0)) != i1 ):{:\\nif max(divInt(divInt(in2,mod(mod(int(5.0),min(mod(max(in0, int(7.0)),i2), int(6.0))),int(3.0))),divInt(int(3.0),int(8.0))), in2) != int(8.0):{:\\nif b0:{:\\nres0 = min(min(in1, mod(int(4.0),abs(i2))), in1)\\n:}else:{:\\ni2 -= int(1.0)\\n:}\\n:}\\n:}\\n:}\\nb0 = int(1.0) \\g abs(max(in0, divInt(( max(in2, int(9.0)) + int(2.0) ),in1)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 24, 24, 6, 3, 3, 15, 6, 9, 3, 5, 22, 3, 77, 18, 16, 7, 13]}][{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [8, 7, 0, 5, 8, 3, 6, 2, 2, 0, 7, 9, 9, 4, 2, 2, 5, 5, 0, 2, 2, 5, 2, 5, 8, 0, 5, 9, 3, 4, 6, 6, 4, 8, 5, 4, 5, 2, 6, 7, 9, 0, 4, 3, 6, 5, 8, 0, 1, 1, 0, 3, 1, 1, 9, 8, 0, 7, 5, 8, 7, 5, 5, 0, 6, 5, 4, 5, 2, 5, 9, 2, 5, 1, 4, 4, 6, 9, 2, 9, 9, 0, 9, 6, 7, 1, 2, 1, 8, 5, 1, 8, 5, 3, 1, 4, 8, 4, 8, 7, 6, 7, 4, 2, 8, 9, 5, 9, 5, 2, 4, 7, 2, 6, 8, 3, 6, 9, 9, 1, 0, 6, 5, 7, 4, 1, 2, 0, 0, 4, 0, 1, 9, 7, 4, 0, 2, 2, 3, 0, 3, 0, 5, 9, 5, 4, 5, 9, 3, 0, 1], [3, 3, 4, 4, 1, 4, 2, 4, 2, 1], [2, 2, 2, 0], [1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 2, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [6, 5, 3, 4, 5, 3, 1, 5, 4, 5, 2, 4, 0, 3, 4, 1, 0, 0, 0, 0, 1, 3, 3, 0, 6, 3, 0, 3, 3, 1, 3, 6, 1, 4, 2, 1, 2, 5, 2, 6, 4, 2, 1, 1, 0, 0, 3, 6, 0, 5, 0, 6, 5, 2, 3, 2, 5, 6, 0, 2, 5, 2, 0, 3, 1, 6, 1, 4, 1, 4, 3, 2, 0, 1, 4, 4, 0, 6, 0, 5, 6, 5, 2, 2, 6, 4, 3, 2, 4, 0, 5, 1, 3, 6, 1, 0, 5, 5, 6, 2, 1, 0, 5, 6, 6, 2, 1, 3, 1, 6, 6, 5, 4, 0, 0, 1, 5, 5], [0, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 3, 2, 2, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 3, 1, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 3, 0, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 3, 2, 2, 2, 0, 0, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 2, 3, 1, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 2, 0, 2, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 2, 2, 0, 0, 3, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 3, 1, 2, 1, 0, 2, 3, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 0, "tree_depth": 154, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(max(min(in2, in0), in1), max(in2, in0))\\nif not i1 \\ge max(int(8.0), min(( int(7.0) + mod(mod(int(0.0),int(5.0)),in2) ), divInt(( int(8.0) - min(mod(min(divInt(int(3.0),int(6.0)), in1),( int(2.0) + int(2.0) )), in2) ),abs(( mod(( ( i2 - int(0.0) ) - in1 ),max(i0, divInt(divInt(max(( int(7.0) - divInt(in0,in1) ), min(abs(( abs(int(9.0)) * i1 )), abs(divInt(int(9.0),i0)))),int(4.0)),( i0 * i0 )))) + divInt(mod(int(2.0),max(divInt(max(abs(int(2.0)), i0),i1), in0)),int(5.0)) ))))):{:\\nif mod(in0,i0) \\ge min(min(res0, max(( max(abs(in0), int(5.0)) + mod(i0,max(( max(mod(divInt(mod(min(int(0.0), abs(int(2.0))),in0),int(2.0)),int(5.0)), in0) + ( min(int(2.0), i1) + max(int(5.0), ( int(8.0) - min(min(int(059.0), int(3.0)), ( int(4.0) + divInt(int(6.0),( mod(abs(int(6.0)),in0) * res0 )) )) )) ) ), int(4.0))) ), max(max(divInt(i1,( in1 - min(i2, max(int(8.0), int(5.0))) )), max(int(4.0), min(abs(i1), max(min(int(5.0), ( min(abs(int(2.0)), min(i2, divInt(in2,mod(min(abs(int(6.0)), min(( max(( i2 - ( ( divInt(res0,max(max(( ( in1 + int(7.0) ) - ( divInt(i2,min(( divInt(( i1 * i1 ),i0) * min(min(int(9.0), i0), abs(int(0.0))) ), in0)) + abs(int(4.0)) ) ), abs(res0)), ( int(3.0) * ( mod(abs(int(6.0)),divInt(mod(int(5.0),( max(( divInt(min(abs(mod(abs(abs(i0)),int(8.0))), int(0.0)),in2) - i0 ), min(( ( max(divInt(divInt(max(( min(( res0 - max(in2, int(1.0)) ), mod(divInt(int(1.0),int(0.0)),int(3.0))) * ( abs(i2) - in0 ) ), int(1.0)),i2),divInt(abs(in2),int(1.0))), min(min(min(mod(res0,abs(mod(int(9.0),( ( int(8.0) + int(0.0) ) * abs(int(7.0)) )))), abs(abs(i0))), max(max(min(int(5.0), abs(i2)), ( divInt(abs(int(8.0)),mod(in2,mod(int(7.0),abs(mod(min(max(int(5.0), max(( max(int(5.0), i2) + abs(int(0.0)) ), max(max(i0, divInt(divInt(int(6.0),int(5.0)),in0)), min(max(i1, int(4.0)), max(( int(5.0) + max(mod(res0,( min(abs(int(2.0)), min(max(int(5.0), i1), ( min(in1, i1) + in1 ))) * min(divInt(( int(9.0) - in0 ),divInt(min(( ( max(int(2.0), mod(int(5.0),( ( ( int(1.0) - i2 ) - min(abs(mod(int(4.0),i0)), int(4.0)) ) + int(6.0) ))) + i1 ) - mod(max(int(9.0), int(2.0)),min(( int(9.0) - ( in1 - ( ( int(9.0) + max(( int(0.0) - max(int(9.0), mod(in1,divInt(int(6.0),int(7.0)))) ), i0) ) - divInt(int(1.0),int(2.0)) ) ) ), abs(abs(res0)))) ), max(int(1.0), int(8.0))),abs(int(5.0)))), int(1.0)) )), abs(mod(i0,( in2 - res0 )))) ), in2))))), int(8.0)),int(5.0)))))) - abs(int(3.0)) )), abs(mod(int(1.0),i2)))), min(( mod(i2,res0) * abs(mod(mod(abs(in1),max(in0, ( int(4.0) - min(( i2 + in1 ), i0) ))),in2)) ), int(8.0)))) + i1 ) + int(4.0) ), int(8.0))) - int(7.0) )),mod(divInt(int(6.0),in0),int(7.0)))) * res0 ) ))) + i1 ) * int(4.0) ) ), max(i0, int(2.0))) + in2 ), max(int(8.0), divInt(( abs(in2) - int(9.0) ),int(5.0))))),int(9.0))))) - ( ( abs(max(abs(( abs(res0) * int(5.0) )), i2)) + min(( int(2.0) - i1 ), min(int(4.0), max(int(7.0), mod(int(2.0),i0)))) ) + divInt(abs(abs(abs(in2))),res0) ) )), divInt(int(6.0),res0))))), mod(int(8.0),i2)))), i1):{:\\nif int(36.0) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile ( ( int(9.0) * divInt(max(( in0 + min(int(1.0), int(06.0)) ), int(5.0)),i1) ) \\le int(7.0) or not True ):{:\\nif not res0 \\g max(res0, in2):{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n:}else:{:\\nb0 = True\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 0, "mapping_values": [1, 9, 9, 5, 4, 124, 124, 5, 4, 1, 13, 5, 8, 3, 4, 112, 1, 496, 130, 135, 64, 66]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 2], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1], [1, 2, 1, 2, 1, 2, 0], [1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 9, 4, 2, 5, 0, 8, 5, 7, 7, 5, 9, 1, 2, 2, 7, 8, 2, 3, 6, 5, 7, 0, 0, 9, 5, 7, 7, 7, 1, 7, 3, 7, 3, 9, 7, 3, 9, 5, 8, 4, 2, 4, 7, 4, 4, 7, 6, 1, 0, 3, 9, 0, 1, 9, 0], [1, 2, 4, 0, 4, 1], [0, 1, 0, 0, 0], [1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 2], [], [0], [4, 2, 4, 2, 2, 6, 0, 0, 3, 3, 3, 1, 1, 6, 1, 1, 0, 2, 5, 1, 3, 4, 6, 6, 5, 1, 0, 5, 4, 0, 2, 2, 4, 3, 5, 3, 3, 1, 6, 2, 0, 6, 5, 2, 3, 1, 2, 6, 4, 5, 6, 6, 6, 6, 2], [0], [3, 2, 3, 0, 1, 2, 2, 0, 0, 3, 1, 2, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 2, 2, 1, 2, 1, 3, 3, 3, 3, 2, 0, 1, 0, 3, 0, 2, 0, 3, 2, 0, 1, 2, 2, 1, 1, 3, 0, 3, 2, 2, 0, 2, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 3, 2, 3, 3, 1, 0, 2, 1, 2, 3, 0, 0, 1, 3, 3, 1, 1, 1, 0, 2, 3, 1, 3, 3, 3, 2, 3, 0, 0, 3, 0, 2, 1, 3, 2, 3, 1, 3, 0, 2, 1, 3, 2, 1, 2, 3, 2, 3, 0, 0, 3, 2, 0, 3, 3, 1, 3, 1, 3, 1, 2, 1, 0, 3, 3, 3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 0, 3, 3, 3, 2, 2, 0, 3, 1, 2, 1, 0, 1, 0, 3, 1, 1, 3, 3, 2, 0, 3, 0, 3, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 0, 2, 1, 1, 1, 3, 2, 2, 2, 0, 0, 1, 1, 0, 2, 3, 0, 2, 0, 0, 3, 1, 1, 1, 3, 3, 0, 1, 1, 2, 2, 0, 2, 1, 1, 3, 3, 0, 1, 1, 2, 1, 0, 0, 3, 2, 1, 0, 0, 2, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 2, 1, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 2, 1, 2, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 2, 1, 2, 2, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 1], [1, 0, 2, 0, 1, 0, 1, 2, 1, 1, 2, 0, 0, 1, 0, 1, 2, 2, 0, 0, 2, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 90, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(divInt(min(in1, int(2.0)),( mod(i2,in1) - min(int(2.0), divInt(i2,int(9.0))) )), i2) \\g mod(int(4.0),res0)\\nloopBreak% = 0\\nwhile b1:{:\\ni0 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(5.0) == i0:{:\\nb0 = min(divInt(( int(0.0) + divInt(int(8.0),max(abs(max(min(mod(in0,int(5.0)), in0), abs(in0))), ( i1 * max(mod(i1,int(7.0)), ( ( int(7.0) + int(5.0) ) - min(res0, abs(( ( i1 + ( i1 - ( i0 * min(( mod(int(9.0),max(i2, divInt(divInt(abs(divInt(min(min(int(1.0), in2), ( int(2.0) - mod(min(i1, in0),int(2.0)) )),abs(abs(int(7.0))))),int(8.0)),int(2.0)))) - in1 ), ( max(int(3.0), max(max(max(( max(res0, res0) * min(in2, ( int(6.0) + min(( max(int(5.0), min(i1, ( int(7.0) + abs(divInt(int(0.0),( abs(( max(i0, in2) - abs(divInt(in1,max(min(int(0.0), abs(int(9.0))), min(int(5.0), mod(int(7.0),i0))))) )) + max(min(min(abs(i2), int(7.0)), i2), ( in1 - int(7.0) )) ))) ))) * min(min(in0, min(min(abs(( mod(in2,max(int(1.0), ( int(7.0) * in0 ))) + int(3.0) )), in0), abs(int(7.0)))), int(3.0)) ), abs(min(( i1 + max(res0, abs(( int(9.0) * mod(( int(7.0) + int(3.0) ),divInt(divInt(int(9.0),int(5.0)),i2)) ))) ), i0))) )) ), ( int(8.0) - int(4.0) )), int(2.0)), min(( ( ( res0 + in2 ) + int(4.0) ) * int(7.0) ), i2))) - mod(abs(in0),divInt(i1,i2)) )) ) ) ) + min(int(4.0), int(4.0)) ))) )) ))) ),int(7.0)), max(abs(res0), int(6.0))) \\le int(1.0)\\nloopBreak% = 0\\nwhile ( ( ( ( in1 - mod(int(0.0),int(3.0)) ) + abs(min(in2, int(9.0))) ) \\l int(0.0) or b0 ) or not ( int(1.0) + res0 ) \\le res0 ):{:\\nb0 = max(( int(9.0) - res0 ), res0) \\g mod(i2,int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 57, 57, 6, 5, 2, 11, 6, 5, 0, 1, 55, 1, 227, 56, 60, 32, 24]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [], [0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 8, 9, 4, 2, 9, 1, 3, 5, 0, 7, 8, 0, 7, 0, 9], [1], [1, 1, 0], [], [0, 1, 0], [0], [1, 1], [0, 0], [], [5, 1, 3, 1, 5, 3, 1, 1, 1, 2, 1, 1, 2, 4, 6, 3, 5, 2, 5, 0, 0, 2, 1, 5, 6, 6], [1, 0, 1, 1], [3, 2, 0, 3, 1, 3, 3, 3, 3, 1, 0, 2, 1, 0, 2, 2, 0, 0, 1, 2, 2, 3, 3, 0, 2, 3, 2, 0, 0, 0, 2, 0, 2, 1, 2, 1, 3, 2, 0, 3, 1, 2, 2, 3, 3, 0, 3, 3, 0, 1, 1, 0, 0, 2, 2, 0, 3, 0, 3, 1, 3, 2, 1, 2, 0, 3, 2, 3, 1, 3, 0, 1, 3, 1, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 2, 2, 1, 2, 0, 2, 1, 0, 0, 1, 0, 2, 0, 1, 2, 2, 1, 2, 2, 0], [0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2], [1, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nb1 = min(mod(in2,max(int(6.0), abs(abs(max(abs(int(8.0)), i1))))), ( int(9.0) + in0 )) \\g divInt(( i1 + in2 ),int(4.0))\\nin0 += ( ( min(abs(i1), ( max(divInt(i1,i1), i2) * ( i1 * ( int(2.0) * ( int(9.0) * min(( i1 - min(int(1.0), ( mod(max(min(i2, abs(min(in1, int(3.0)))), int(5.0)),res0) - in0 )) ), ( ( in2 - max(i2, abs(int(0.0))) ) - abs(mod(int(7.0),divInt(in2,max(divInt(abs(int(8.0)),abs(i0)), int(0.0))))) )) ) ) ) )) - min(int(7.0), int(0.0)) ) * int(9.0) )\\ni0 = i2\\nb0 = True\\ni1 *= in2\\nres0 *= res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 0, 7, 16, 16, 1, 3, 0, 3, 1, 2, 2, 0, 26, 4, 79, 19, 22, 15, 7]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 2, 0, 2, 0, 2, 0, 2, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 3, 5, 4, 0, 8, 6, 9, 7, 3, 3, 8, 9, 0, 2, 2, 3, 7, 4, 5, 1, 3, 3, 9], [3, 0, 1, 3, 4, 4, 0], [2, 1, 2], [0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [3, 2, 3, 1, 0, 3, 1], [1, 0], [], [0, 6, 4, 5, 5, 4, 2, 2, 1, 2, 4, 1, 2, 5, 3, 4, 4, 1, 3, 4, 4, 2, 5, 0, 1, 1, 5], [0, 0, 0], [0, 1, 0, 1, 2, 2, 3, 2, 1, 2, 2, 1, 0, 0, 1, 2, 3, 0, 2, 1, 2, 2, 0, 1, 3, 2, 1, 3, 3, 2, 3, 3, 2, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0, 3, 1, 2, 2, 1, 0, 2, 2, 1, 1, 0, 3, 0, 0, 0, 3, 3, 2, 1, 1, 0, 3, 0, 0, 1, 0, 1, 1, 3, 0, 2, 1, 3, 3, 3, 1, 2, 1, 0, 0, 3, 0, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1], [1, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\ge int(94.0):{:\\nloopBreak% = 0\\nwhile ( res0 \\l int(3.0) and not divInt(divInt(max(mod(int(5.0),( mod(int(4.0),in1) - in2 )), int(0.0)),divInt(min(in2, divInt(int(8.0),mod(( in1 + int(6.0) ),max(( int(9.0) * abs(max(( abs(min(divInt(i2,int(7.0)), mod(( int(3.0) - ( i2 - int(3.0) ) ),i1))) * i2 ), abs(int(8.0)))) ), ( mod(int(9.0),in1) - ( divInt(int(0.0),int(2.0)) + i1 ) ))))),abs(i2))),in2) \\g in0 ):{:\\nin1 = max(min(mod(int(2.0),int(3.0)), in1), abs(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in0 \\ge int(7.0):{:\\nb2 = ( False and b1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in1 \\le int(4.0):{:\\nb2 = ( int(5.0) \\le abs(in1) and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(1.0) + min(abs(abs(int(3.0))), ( int(3.0) + i2 )) ) \\l in2:{:\\ni0 = max(i1, int(9.0))\\ni1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 25, 25, 7, 3, 3, 14, 7, 7, 2, 0, 27, 3, 87, 22, 17, 10, 12]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 0, 1, 2, 0, 2, 1, 2, 1, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 0, 4, 3, 3, 0, 5, 1, 9, 7, 2, 1, 1, 3, 8, 4, 2, 4, 8, 4, 0, 7, 2, 1, 7, 2, 1, 1, 5, 7, 0, 5, 7, 4, 1, 6, 6, 3, 3, 8, 5, 1, 4], [3, 1, 0, 0, 3, 0, 4, 5], [1, 0, 0, 2, 2, 0], [], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 1], [1, 1, 1], [0, 1], [6, 1, 3, 5, 2, 5, 5, 6, 0, 1, 3, 3, 0, 3, 2, 3, 1, 1, 4, 0, 0, 0, 0, 1, 6, 5, 2, 2, 4, 2, 6, 6, 3, 5, 5, 1, 3, 1, 5, 5, 6, 1, 3, 5, 4, 4, 2, 5, 2, 1, 0, 2, 6, 6, 6, 2, 0], [1, 0, 0], [3, 3, 3, 2, 3, 1, 0, 3, 3, 2, 1, 1, 3, 0, 3, 2, 2, 1, 3, 2, 0, 3, 1, 1, 3, 2, 3, 2, 3, 1, 0, 3, 3, 1, 3, 2, 2, 3, 3, 2, 3, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 3, 1, 1, 0, 1, 2, 0, 3, 1, 3, 3, 0, 3, 0, 3, 0, 2, 0, 2, 3, 2, 2, 1, 3, 0, 2, 1, 1, 3, 1, 0, 0, 1, 3, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2, 1, 1, 3, 0, 3, 2, 1, 1, 3, 0, 2, 0, 1, 0, 0, 1, 2, 2, 0, 0, 2, 3, 1, 0, 0, 2, 2, 0, 0, 2, 0, 3, 1, 2, 3, 2, 0, 2, 3, 1, 2, 3, 3, 3, 3, 3, 0, 1, 3, 0, 0, 2, 0, 1, 0, 3, 1, 2, 1, 2, 3, 0, 3, 1, 2, 1, 1, 3, 0, 2, 0, 0, 3, 1, 3, 3, 0, 1, 1, 3, 1, 2, 0, 1, 1, 3, 3, 3, 1, 2, 3, 3, 0, 1, 3, 0, 0, 3, 0, 2, 0, 0, 2, 2, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0], [2, 1, 0, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 1, 2, 2, 0, 2, 2, 1, 2, 2, 0, 2, 2, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1], [1, 0, 2, 2, 1, 1, 1, 1, 0, 1, 2, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(max(min(( abs(int(0.0)) - res0 ), max(max(mod(int(3.0),int(0.0)), min(i1, max(( ( int(4.0) + abs(mod(in0,min(int(3.0), int(3.0)))) ) * max(mod(abs(divInt(min(int(0.0), in2),max(max(int(5.0), abs(( divInt(abs(min(mod(abs(i2),in2), in2)),int(1.0)) * res0 ))), i0))),i1), ( divInt(( abs(int(9.0)) - int(7.0) ),in0) - int(2.0) )) ), divInt(in0,max(int(1.0), abs(abs(i0))))))), min(in0, abs(i2)))), ( in0 - divInt(abs(divInt(mod(int(1.0),min(i1, ( int(3.0) - int(8.0) ))),max(int(4.0), i1))),in1) ))) \\ge int(2.0):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = abs(int(4.0)) \\g int(8.0)\\nloopBreak% = 0\\nwhile not divInt(divInt(i0,i0),( divInt(divInt(divInt(int(4.0),int(0.0)),abs(i0)),abs(divInt(int(7.0),int(2.0)))) + abs(i0) )) \\l ( i1 - int(1.0) ):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile res0 \\l in2:{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(7.0) \\ge mod(( i2 * i2 ),( abs(int(2.0)) * in1 )):{:\\ni2 -= res0\\nb2 = mod(divInt(res0,in0),mod(in2,max(int(1.0), mod(abs(mod(in2,( abs(int(1.0)) * divInt(abs(max(abs(max(min(i1, int(5.0)), abs(in0))), i1)),divInt(in2,int(7.0))) ))),in2)))) \\l min(int(0.0), ( int(5.0) - mod(abs(res0),min(int(7.0), divInt(int(4.0),int(1.0)))) ))\\nb0 = min(i1, divInt(in0,in2)) \\le max(int(6.0), min(abs(in1), int(6.0)))\\nif int(3.0) != min(int(3.0), ( in1 * int(8.0) )):{:\\ni2 = int(5.0)\\n:}else:{:\\nin2 = max(max(min(int(1.0), divInt(abs(min(i2, int(4.0))),max(i1, i0))), max(i2, ( res0 + res0 ))), mod(( res0 + i2 ),i0))\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 5, 9, 44, 44, 8, 6, 0, 12, 8, 4, 3, 2, 57, 3, 202, 47, 57, 18, 30]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 9, 5, 9, 1, 8, 9, 7, 0, 9], [5, 3], [0], [1], [0, 1, 1], [0, 0], [3], [], [], [1, 2, 4, 0, 5, 4, 1, 0, 3, 5, 1, 4, 0, 5, 0], [1], [1, 2, 1, 0, 2, 0, 3, 2, 1, 3, 2, 1, 2, 3, 1, 3, 2, 3, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 1, 3, 1, 0, 0, 0, 3, 0, 2, 3, 1, 0, 1, 2, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 0, 0, 1, 0, 1, 2, 2], [2, 2, 1, 0, 2, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(1.0) != mod(int(4.0),i1) or divInt(i2,min(mod(int(9.0),abs(( int(5.0) * ( min(int(9.0), min(mod(max(in1, i0),( mod(divInt(( divInt(( in2 * min(int(1.0), max(int(8.0), in1)) ),i1) - i0 ),abs(in0)),( abs(int(9.0)) + in2 )) * int(7.0) )), divInt(int(0.0),int(9.0)))) - i1 ) ))), in1)) \\ge i0 )\\nin2 -= i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 11, 11, 2, 1, 1, 3, 2, 1, 0, 0, 15, 1, 48, 14, 9, 7, 8]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 3, 1, 0, 4, 6, 3, 2, 0, 0, 5, 3, 7, 6, 4, 7, 5, 0, 2, 3, 3, 6, 5, 8, 2, 8, 9, 0, 7, 5, 4, 6, 6, 5, 0, 1, 2, 9, 0, 1, 3], [5, 0, 0, 4, 5, 2], [0], [], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [2, 1], [0], [0, 0, 0, 0, 1, 0], [2, 0, 2, 1, 3, 5, 0, 4, 5, 2, 0, 6, 0, 2, 4, 0, 4, 0, 0, 6, 4, 2, 2, 1, 3, 0, 3, 3, 2, 5, 1, 5, 0, 5, 2, 4, 3, 5], [1, 1, 1, 1, 1], [2, 3, 1, 2, 1, 0, 0, 3, 1, 0, 3, 0, 1, 2, 1, 2, 3, 1, 2, 1, 2, 0, 1, 1, 1, 0, 3, 0, 3, 3, 3, 3, 0, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 3, 2, 1, 1, 1, 3, 3, 0, 2, 1, 1, 2, 2, 2, 3, 1, 3, 2, 0, 1, 2, 0, 0, 2, 2, 2, 0, 3, 1, 1, 3, 2, 3, 2, 0, 3, 0, 0, 3, 3, 3, 0, 2, 0, 2, 1, 1, 2, 0, 1, 0, 1, 3, 1, 0, 3, 3, 1, 2, 1, 1, 2, 3, 2, 1, 0, 3, 1, 1, 2, 1, 0, 3, 2, 1, 1, 2, 3, 1, 3, 0, 0, 0, 3, 3, 3, 2, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 2, 2, 1, 1, 1, 2, 0, 2, 1, 1, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 1, 1, 2, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(abs(int(5.0)),( int(4.0) - i2 )) != i0:{:\\nif not abs(int(3.0)) \\l i2:{:\\nif min(i1, int(1.0)) \\l mod(int(0.0),( min(int(4.0), ( int(6.0) + ( in0 - int(3.0) ) )) - int(2.0) )):{:\\nif True:{:\\nin2 -= int(0.0)\\n:}\\n:}\\n:}\\n:}\\nif i0 \\le abs(in1):{:\\nin2 -= max(min(min(min(i2, min(mod(max(int(0.0), abs(int(5.0))),abs(int(3.0))), max(int(7.0), mod(mod(i0,res0),i0)))), mod(int(6.0),int(4.0))), i2), divInt(in1,max(( int(7.0) - int(5.0) ), int(0.0))))\\n:}else:{:\\ni0 += max(abs(in1), mod(int(2.0),int(3.0)))\\n:}\\nif mod(( mod(min(int(3.0), abs(mod(i0,int(6.0)))),( i0 - res0 )) * ( ( mod(in1,max(int(5.0), int(8.0))) * max(( abs(( i2 + abs(i2) )) * i1 ), max(abs(max(in0, divInt(i0,( int(2.0) * int(8.0) )))), ( in0 * int(9.0) ))) ) + in0 ) ),int(0.0)) != max(int(7.0), i2):{:\\nin2 -= min(max(int(5.0), divInt(int(4.0),int(6.0))), ( abs(( int(6.0) * i1 )) + min(int(5.0), int(0.0)) ))\\n:}\\nb0 = ( int(1.0) - in2 ) == min(( int(2.0) - int(9.0) ), divInt(min(int(0.0), min(i0, in2)),i2))\\nin1 *= abs(min(min(( int(1.0) + in0 ), in2), int(3.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 42, 42, 6, 1, 0, 8, 6, 2, 1, 6, 38, 5, 145, 33, 37, 23, 15]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 1, 1, 1, 0], [0, 0, 0], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [9, 7, 1, 5, 6], [5, 2, 4], [2], [], [0, 0, 1, 1, 1], [0, 0, 0], [1, 2], [0], [1, 1, 1], [6, 1, 5, 0, 6, 1, 1, 6, 6, 5, 5, 5, 1, 4, 5, 4, 4, 2], [0, 1, 0, 1], [1, 2, 0, 0, 0, 0, 1, 1, 0, 0, 2, 3, 2, 0, 2, 0, 1, 0, 3, 0, 1, 2, 3, 0, 3, 3, 0, 0, 0], [1, 1, 0, 1, 0], [1, 0, 0, 2, 1], [2, 1, 0, 2], [1, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb2 = not int(9.0) != mod(res0,i1)\\n:}else:{:\\nif in2 == i0:{:\\nif int(7.0) \\le int(1.0):{:\\nres0 = i1\\n:}else:{:\\ni1 *= res0\\n:}\\n:}else:{:\\nres0 = mod(max(( in2 - divInt(in2,int(5.0)) ), in2),min(i1, int(6.0)))\\n:}\\n:}\\nin1 += ( min(in2, abs(max(in1, in1))) * i2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 5, 5, 3, 1, 0, 5, 3, 2, 1, 3, 18, 4, 29, 5, 5, 4, 3]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1], [1, 1, 2, 1, 1, 0], [1], [0, 0, 0, 1, 1], [1, 1], [9, 2], [0], [0, 2, 2, 0, 2], [], [1, 0, 0, 0, 0], [0], [0, 0, 2, 1], [1], [], [2, 5, 2, 0], [1, 0], [1, 1, 0, 0], [], [], [2], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(9.0) \\l int(2.0)\\nb2 = b2\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = not False\\ni2 *= in2\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 2, 2, 1, 5, 0, 5, 1, 4, 1, 0, 4, 2, 4, 0, 0, 1, 0]}][{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [8, 7, 0, 5, 8, 3, 6, 2, 2, 0, 7, 9, 9, 4, 2, 2, 5, 5, 0, 2, 2, 5, 2, 5, 8, 0, 5, 9, 3, 4, 6, 6, 4, 8, 5, 4, 5, 2, 6, 7, 9, 0, 4, 3, 6, 5, 8, 0, 1, 1, 0, 3, 1, 1, 9, 8, 0, 7, 5, 8, 7, 5, 5, 0, 6, 5, 4, 5, 2, 5, 9, 2, 5, 1, 4, 4, 6, 9, 2, 9, 9, 0, 9, 6, 7, 1, 2, 1, 8, 5, 1, 8, 5, 3, 1, 4, 8, 4, 8, 7, 6, 7, 4, 2, 8, 9, 5, 9, 5, 2, 4, 7, 2, 6, 8, 3, 6, 9, 9, 1, 0, 6, 5, 7, 4, 1, 2, 0, 0, 4, 0, 1, 9, 7, 4, 0, 2, 2, 3, 0, 3, 0, 5, 9, 5, 4, 5, 9, 3, 0, 1], [3, 3, 4, 4, 1, 4, 2, 4, 2, 1], [2, 2, 2, 0], [1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 2, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [6, 5, 3, 4, 5, 3, 1, 5, 4, 5, 2, 4, 0, 3, 4, 1, 0, 0, 0, 0, 1, 3, 3, 0, 6, 3, 0, 3, 3, 1, 3, 6, 1, 4, 2, 1, 2, 5, 2, 6, 4, 2, 1, 1, 0, 0, 3, 6, 0, 5, 0, 6, 5, 2, 3, 2, 5, 6, 0, 2, 5, 2, 0, 3, 1, 6, 1, 4, 1, 4, 3, 2, 0, 1, 4, 4, 0, 6, 0, 5, 6, 5, 2, 2, 6, 4, 3, 2, 4, 0, 5, 1, 3, 6, 1, 0, 5, 5, 6, 2, 1, 0, 5, 6, 6, 2, 1, 3, 1, 6, 6, 5, 4, 0, 0, 1, 5, 5], [0, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 3, 2, 2, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 2, 0, 0, 3, 3, 2, 3, 1, 0, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 3, 1, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 3, 0, 2, 0, 2, 3, 3, 1, 3, 2, 3, 2, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 3, 2, 2, 2, 0, 0, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 3, 3, 0, 1, 1, 0, 0, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 0, 3, 0, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 2, 3, 1, 2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 2, 3, 1, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 3, 2, 1, 2, 0, 2, 2, 1, 3, 2, 1, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 2, 2, 0, 0, 3, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 3, 0, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 3, 1, 2, 1, 0, 2, 3, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 3, 0, 0, 3, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 0, "tree_depth": 154, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(max(min(in2, in0), in1), max(in2, in0))\\nif not i1 \\ge max(int(8.0), min(( int(7.0) + mod(mod(int(0.0),int(5.0)),in2) ), divInt(( int(8.0) - min(mod(min(divInt(int(3.0),int(6.0)), in1),( int(2.0) + int(2.0) )), in2) ),abs(( mod(( ( i2 - int(0.0) ) - in1 ),max(i0, divInt(divInt(max(( int(7.0) - divInt(in0,in1) ), min(abs(( abs(int(9.0)) * i1 )), abs(divInt(int(9.0),i0)))),int(4.0)),( i0 * i0 )))) + divInt(mod(int(2.0),max(divInt(max(abs(int(2.0)), i0),i1), in0)),int(5.0)) ))))):{:\\nif mod(in0,i0) \\ge min(min(res0, max(( max(abs(in0), int(5.0)) + mod(i0,max(( max(mod(divInt(mod(min(int(0.0), abs(int(2.0))),in0),int(2.0)),int(5.0)), in0) + ( min(int(2.0), i1) + max(int(5.0), ( int(8.0) - min(min(int(059.0), int(3.0)), ( int(4.0) + divInt(int(6.0),( mod(abs(int(6.0)),in0) * res0 )) )) )) ) ), int(4.0))) ), max(max(divInt(i1,( in1 - min(i2, max(int(8.0), int(5.0))) )), max(int(4.0), min(abs(i1), max(min(int(5.0), ( min(abs(int(2.0)), min(i2, divInt(in2,mod(min(abs(int(6.0)), min(( max(( i2 - ( ( divInt(res0,max(max(( ( in1 + int(7.0) ) - ( divInt(i2,min(( divInt(( i1 * i1 ),i0) * min(min(int(9.0), i0), abs(int(0.0))) ), in0)) + abs(int(4.0)) ) ), abs(res0)), ( int(3.0) * ( mod(abs(int(6.0)),divInt(mod(int(5.0),( max(( divInt(min(abs(mod(abs(abs(i0)),int(8.0))), int(0.0)),in2) - i0 ), min(( ( max(divInt(divInt(max(( min(( res0 - max(in2, int(1.0)) ), mod(divInt(int(1.0),int(0.0)),int(3.0))) * ( abs(i2) - in0 ) ), int(1.0)),i2),divInt(abs(in2),int(1.0))), min(min(min(mod(res0,abs(mod(int(9.0),( ( int(8.0) + int(0.0) ) * abs(int(7.0)) )))), abs(abs(i0))), max(max(min(int(5.0), abs(i2)), ( divInt(abs(int(8.0)),mod(in2,mod(int(7.0),abs(mod(min(max(int(5.0), max(( max(int(5.0), i2) + abs(int(0.0)) ), max(max(i0, divInt(divInt(int(6.0),int(5.0)),in0)), min(max(i1, int(4.0)), max(( int(5.0) + max(mod(res0,( min(abs(int(2.0)), min(max(int(5.0), i1), ( min(in1, i1) + in1 ))) * min(divInt(( int(9.0) - in0 ),divInt(min(( ( max(int(2.0), mod(int(5.0),( ( ( int(1.0) - i2 ) - min(abs(mod(int(4.0),i0)), int(4.0)) ) + int(6.0) ))) + i1 ) - mod(max(int(9.0), int(2.0)),min(( int(9.0) - ( in1 - ( ( int(9.0) + max(( int(0.0) - max(int(9.0), mod(in1,divInt(int(6.0),int(7.0)))) ), i0) ) - divInt(int(1.0),int(2.0)) ) ) ), abs(abs(res0)))) ), max(int(1.0), int(8.0))),abs(int(5.0)))), int(1.0)) )), abs(mod(i0,( in2 - res0 )))) ), in2))))), int(8.0)),int(5.0)))))) - abs(int(3.0)) )), abs(mod(int(1.0),i2)))), min(( mod(i2,res0) * abs(mod(mod(abs(in1),max(in0, ( int(4.0) - min(( i2 + in1 ), i0) ))),in2)) ), int(8.0)))) + i1 ) + int(4.0) ), int(8.0))) - int(7.0) )),mod(divInt(int(6.0),in0),int(7.0)))) * res0 ) ))) + i1 ) * int(4.0) ) ), max(i0, int(2.0))) + in2 ), max(int(8.0), divInt(( abs(in2) - int(9.0) ),int(5.0))))),int(9.0))))) - ( ( abs(max(abs(( abs(res0) * int(5.0) )), i2)) + min(( int(2.0) - i1 ), min(int(4.0), max(int(7.0), mod(int(2.0),i0)))) ) + divInt(abs(abs(abs(in2))),res0) ) )), divInt(int(6.0),res0))))), mod(int(8.0),i2)))), i1):{:\\nif int(36.0) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile ( ( int(9.0) * divInt(max(( in0 + min(int(1.0), int(06.0)) ), int(5.0)),i1) ) \\le int(7.0) or not True ):{:\\nif not res0 \\g max(res0, in2):{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n:}else:{:\\nb0 = True\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 0, "mapping_values": [1, 9, 9, 5, 4, 124, 124, 5, 4, 1, 13, 5, 8, 3, 4, 112, 1, 496, 130, 135, 64, 66]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1], [2, 1, 5, 8, 2, 3], [5, 3, 3], [2], [1, 0], [0, 1, 0, 0, 0, 1, 1], [0, 0, 0], [3, 3, 2, 2], [], [], [0, 0, 5, 1, 4, 3], [], [0, 2, 1, 1, 3, 1, 0, 3, 1, 1, 2, 2, 0, 2, 1, 0, 0, 0], [0, 1, 0, 1], [0, 0], [2, 0], [0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( i0 != ( int(2.0) * int(1.0) ) or ( not not min(int(5.0), i0) \\ge min(int(8.0), int(2.0)) and divInt(( in2 + divInt(int(3.0),i1) ),in1) \\ge in0 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 3, 1, 2, 7, 3, 4, 0, 0, 6, 0, 18, 4, 2, 2, 2]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [0], [1, 1], [1, 1, 1, 1], [8, 4, 0, 3], [1], [], [], [1], [0], [], [], [0], [1, 2, 2, 5, 5], [0, 0], [3, 3, 1, 3, 0, 1, 0, 1, 1, 0], [], [0, 1, 0], [], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(max(int(8.0), min(i1, int(4.0))), i2) \\g int(0.0):{:\\ni2 = int(3.0)\\n:}\\nin2 = in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 1, 0, 0, 1, 1, 0, 0, 1, 5, 2, 10, 0, 3, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 1, 0], [1], [0, 0, 0], [1, 1, 1], [3, 5, 8], [0, 3, 5], [2, 1, 0, 2], [1], [1, 1, 0, 1, 0, 0, 0], [0, 0, 0], [3, 0, 2, 1], [1], [], [5, 4, 1, 5], [], [1, 1, 3, 0, 0, 0, 2, 1, 0], [0], [2], [0], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(3.0) \\l int(5.0)\\nloopBreak% = 0\\nwhile abs(in2) \\ge in1:{:\\nb1 = ( i1 != ( int(8.0) + in2 ) or b0 )\\nb2 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 3, 3, 3, 4, 1, 7, 3, 4, 1, 0, 4, 0, 9, 1, 1, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 2, 0], [1, 0, 1, 1, 1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 8, 8, 8, 1, 7, 4, 8, 1, 3, 4, 9, 8, 1, 5], [5, 5, 2, 5], [0, 1, 2, 1], [], [1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0], [2, 1, 0, 0], [0], [0], [2, 5, 5, 6, 2, 0, 0, 2, 3, 6, 1, 1, 2, 4, 2], [], [0, 2, 1, 3, 0, 2, 2, 3, 2, 2, 0, 1, 2, 3, 0, 2, 0, 2, 2, 1, 0, 0, 3, 0, 1, 1, 3, 0, 0, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 1, 3, 3, 0, 2, 3, 3, 1, 0, 2, 1, 3, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 2, 1, 1, 2, 2, 0, 1, 1, 0, 1, 2], [0, 1, 2, 2, 0, 0, 1], [1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i2 != ( int(5.0) + max(in2, ( ( min(( mod(in2,int(7.0)) - ( max(res0, ( i2 * divInt(mod(int(8.0),i0),i0) )) * abs(i2) ) ), int(8.0)) + int(8.0) ) + max(in0, res0) )) ):{:\\nif max(int(1.0), int(7.0)) != abs(divInt(int(4.0),abs(int(8.0)))):{:\\nb0 = not True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(int(1.0),min(int(3.0), max(max(i1, ( min(max(int(4.0), i1), mod(int(9.0),abs(i2))) - int(8.0) )), int(1.0)))) == in1:{:\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile i2 != int(5.0):{:\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 5, 2, 16, 16, 4, 4, 0, 8, 4, 4, 1, 1, 15, 0, 58, 13, 14, 7, 6]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [2, 8, 2], [5], [2], [], [1], [0], [], [], [], [1, 5], [], [3, 1, 2, 1, 2, 1, 0, 0], [0, 1], [0], [2], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(int(2.0), ( int(8.0) * mod(int(2.0),i1) )) != in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 8, 2, 1, 1, 1]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1], [6, 7], [], [], [], [], [], [], [], [], [5, 0, 6], [1, 0], [2, 1, 1, 0], [1], [], [2], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= mod(int(6.0),int(7.0))\\ni0 = res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 4, 1, 0, 1, 1]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [0, 1], [9, 2], [3, 0, 2], [2], [1], [1, 0, 1, 1], [0, 0, 0], [3], [], [], [5, 6, 1, 5, 2, 1], [], [1, 0, 0, 0, 0, 2, 0, 0], [1], [], [], [0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(92.0) \\ge in2:{:\\nb2 = ( res0 \\l i1 or in2 == divInt(i2,i1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 3, 1, 1, 4, 3, 1, 0, 0, 6, 0, 8, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1], [2, 0, 0, 1, 0], [1], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 3, 0, 5, 7, 9, 1, 4, 5, 6, 0, 4, 6, 5, 5, 0, 5, 6, 9, 4, 5, 1, 6, 2, 6, 1, 4, 0, 2, 2, 9, 9, 4, 6, 8, 5, 6, 0, 1, 3, 5, 6, 2], [4, 3, 0, 5], [1, 0, 1], [1, 1], [0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0], [3, 3, 0], [], [], [0, 2, 5, 3, 2, 3, 4, 3, 5, 6, 1, 1, 2, 1, 6, 6, 2, 2, 0, 0, 4, 3, 2, 2, 0, 4, 6, 6, 3, 1, 6, 0, 2, 0, 2, 6, 6, 0, 1, 4, 1, 1, 2, 4, 6, 3, 3], [1, 1], [2, 2, 0, 3, 3, 0, 1, 0, 0, 3, 1, 2, 2, 3, 1, 3, 2, 3, 0, 3, 1, 3, 0, 2, 0, 3, 0, 1, 1, 2, 2, 3, 3, 0, 2, 1, 2, 1, 3, 2, 3, 3, 2, 0, 1, 1, 2, 2, 3, 2, 2, 2, 0, 0, 3, 2, 0, 3, 3, 3, 2, 0, 0, 1, 3, 0, 0, 1, 3, 2, 0, 1, 3, 3, 2, 0, 2, 3, 2, 2, 0, 2, 2, 2, 0, 1, 0, 0, 2, 0, 2, 1, 3, 1, 2, 2, 0, 1, 1, 1, 0, 1, 3, 3, 1, 2, 2, 1, 2, 3, 0, 3, 0, 1, 1, 2, 2, 1, 3, 3, 1, 0, 1, 3, 1, 0, 3, 3, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1, 3, 1, 3, 1, 2, 0, 2, 1, 3, 0, 3, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0, 2, 3, 0, 3, 3, 1, 0, 0, 3, 1, 0, 2, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 2, 0, 0, 2, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 1, 1, 2, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 2, 0, 0, 0, 2, 0, 1, 1, 1], [1, 2, 0, 0, 1, 0, 1, 1, 2, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 0, 2, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( ( i0 - abs(min(i2, int(3.0))) ) * in2 ) \\le in0 or abs(int(8.0)) \\ge ( ( abs(int(3.0)) + min(( min(i2, abs(int(0.0))) + min(in0, mod(in1,min(in0, int(5.0)))) ), int(7.0)) ) - ( ( abs(max(in2, ( int(9.0) + divInt(int(1.0),min(mod(max(max(divInt(res0,int(4.0)), int(5.0)), mod(divInt(max(divInt(( mod(i1,i1) - min(( i2 - min(max(max(( i1 * res0 ), int(6.0)), abs(res0)), i2) ), int(0.0)) ),max(mod(i2,int(4.0)), abs(abs(mod(i0,mod(abs(divInt(mod(i0,( divInt(( in1 * int(6.0) ),in0) + i2 )),mod(i2,mod(int(5.0),min(int(5.0), mod(( i0 - int(0.0) ),int(5.0))))))),int(6.0))))))), in1),int(9.0)),min(min(int(4.0), ( divInt(int(5.0),( min(res0, min(res0, int(1.0))) + int(6.0) )) * mod(( int(2.0) + min(min(int(6.0), in0), int(1.0)) ),abs(int(4.0))) )), i1))),max(abs(int(0.0)), divInt(( divInt(int(2.0),( ( int(2.0) * ( int(9.0) + int(9.0) ) ) - abs(( int(4.0) * int(6.0) )) )) + abs(( int(8.0) * min(int(5.0), min(int(6.0), ( res0 - divInt(int(0.0),min(i0, abs(i2))) ))) )) ),divInt(i0,i2)))), res0)) ))) - res0 ) + int(1.0) ) ) ):{:\\ni0 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i1 \\l in1\\ni1 -= divInt(min(i1, max(max(int(5.0), i2), in1)),max(int(6.0), res0))\\nb0 = ( b1 or divInt(in0,in0) != int(2.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 44, 44, 4, 3, 2, 7, 4, 3, 0, 0, 47, 2, 182, 49, 44, 26, 25]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1], [6, 5, 1, 0, 7], [4], [2], [], [1], [0], [], [], [], [1, 6, 0, 5, 0], [], [0, 3, 2, 2, 1, 0, 2, 0, 3, 2, 1, 2, 1, 3, 1, 1, 2, 0, 0], [0, 1, 0, 0, 0, 0], [1, 1, 2], [1, 0, 2, 0, 2], [1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i1 \\le max(( mod(int(6.0),res0) - ( i0 + max(( int(5.0) * ( int(1.0) + abs(int(0.0)) ) ), int(7.0)) ) ), ( in2 * i0 ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 19, 6, 3, 5, 1]}][{"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 1, 1, 0, 2, 2, 0, 1, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 8, 5, 0, 8, 3, 8, 1, 5, 5, 7, 1, 5, 0, 3, 5, 1, 0, 2, 5, 6, 8, 9, 2, 2, 1, 1, 5, 3, 2, 6, 3, 8, 5, 2, 9, 9, 4, 6, 2], [2, 4, 0, 4, 3, 3, 0], [0, 0, 1], [1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [3, 1, 0, 3, 2, 0], [0], [1, 1, 1, 0, 1, 1], [6, 2, 1, 2, 6, 0, 4, 6, 4, 2, 2, 0, 3, 6, 6, 2, 2, 3, 3, 3, 1, 4, 1, 6, 4, 0, 0, 2, 6, 4, 4, 4, 0, 3, 3, 1, 1, 3, 4, 6, 5, 6, 2, 2, 3, 2, 4, 2, 1, 3, 2, 5, 1, 0, 1, 1, 1, 4], [0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 2, 0, 3, 2, 2, 2, 1, 3, 1, 2, 3, 2, 3, 2, 0, 0, 0, 2, 2, 1, 3, 2, 2, 0, 3, 0, 0, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 1, 3, 2, 2, 0, 0, 3, 0, 3, 1, 1, 3, 1, 1, 3, 2, 0, 1, 0, 1, 2, 0, 3, 2, 0, 1, 1, 2, 1, 2, 0, 2, 3, 0, 3, 3, 0, 2, 3, 0, 3, 0, 2, 1, 3, 0, 1, 3, 3, 0, 0, 0, 3, 3, 0, 2, 1, 2, 3, 2, 2, 3, 0, 2, 2, 3, 3, 1, 2, 3, 1, 1, 2, 2, 2, 0, 1, 3, 0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 1, 1, 3, 1, 0, 1, 0, 3, 0, 0, 3, 2, 0, 1, 1, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1, 0, 3, 1, 2, 0, 0, 0, 3, 1, 3, 2, 3, 2, 0, 1, 1, 3, 0, 0, 2, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 1, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 0, 1, 2, 1, 1, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 0, 2, 1, 2], [0, 0, 1, 0, 1, 2, 2, 0, 2, 0, 1, 2, 1, 1, 2, 0, 2, 2, 2, 2], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(2.0) == ( mod(res0,abs(mod(divInt(divInt(int(7.0),max(int(8.0), divInt(abs(mod(abs(divInt(i2,i1)),i2)),divInt(mod(int(5.0),min(divInt(( res0 + min(i0, in1) ),abs(int(0.0))), max(res0, mod(( mod(int(8.0),in1) + ( abs(max(int(3.0), abs(( divInt(i2,i2) - abs(i0) )))) + max(int(8.0), int(1.0)) ) ),max(int(5.0), int(5.0)))))),min(mod(in0,int(7.0)), res0))))),int(1.0)),( res0 - abs(( i2 * int(5.0) )) )))) * int(0.0) ):{:\\nif ( ( int(3.0) + ( i2 * divInt(max(in0, min(max(in0, ( abs(in0) + max(i1, ( int(5.0) - max(in1, int(1.0)) )) )), abs(abs(i1)))),res0) ) ) \\le in1 or True ):{:\\ni0 = abs(min(i0, mod(int(0.0),mod(min(divInt(( min(i2, ( ( abs(min(int(2.0), mod(min(int(5.0), int(6.0)),divInt(divInt(( res0 * int(8.0) ),min(in1, in1)),int(9.0))))) - in1 ) - int(2.0) )) * ( int(2.0) + i0 ) ),in0), int(1.0)),int(1.0)))))\\n:}else:{:\\nif int(5.0) \\l abs(int(3.0)):{:\\nin0 = i1\\n:}else:{:\\ni1 *= int(2.0)\\n:}\\n:}\\nin0 = in1\\nif b0:{:\\nif ( max(res0, in2) \\le max(( res0 * int(6.0) ), int(3.0)) or i2 \\ge divInt(( ( i2 * in0 ) * divInt(i2,int(8.0)) ),int(5.0)) ):{:\\nin1 = i2\\n:}else:{:\\ni1 = abs(int(2.0))\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile not divInt(in0,i2) \\ge in2:{:\\nif min(int(9.0), abs(divInt(max(mod(i1,int(9.0)), int(4.0)),abs(i0)))) \\l i1:{:\\nb0 = b1\\n:}else:{:\\ni1 = mod(int(6.0),int(2.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 7, 9, 41, 41, 7, 3, 2, 13, 7, 6, 1, 6, 58, 8, 177, 46, 40, 20, 27]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [5, 0, 3], [1], [3, 2, 1, 3, 0, 3, 0], [1], [2, 0, 2], [0], [0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += abs(divInt(int(8.0),min(i0, abs(in0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 7, 1, 3, 1, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [1, 2], [0], [3, 1, 0], [], [0], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = min(int(3.0), i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 2], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [5, 0], [], [], [], [], [], [], [], [], [3], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= int(50.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [1, 1], [0, 1, 1, 1, 1, 1], [0, 7, 9, 3, 8, 3], [4], [], [], [1], [0], [], [], [], [3, 3, 0, 3, 2], [1, 0], [1, 2, 0, 2, 3, 1, 2, 0, 1, 2, 1, 3, 0, 1], [0, 1, 1, 1], [2, 2], [0, 1], [1, 1, 0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(07.0) \\le ( in0 + mod(abs(int(9.0)),mod(in0,int(3.0))) ):{:\\ni0 -= divInt(int(8.0),abs(in0))\\ni2 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 1, 0, 0, 1, 1, 0, 0, 0, 5, 2, 14, 4, 2, 2, 3]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 2, 0, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 3, 8, 4, 7, 8, 3, 5, 1, 1, 7, 9, 2, 2, 3, 2, 1, 1, 2, 6, 3], [1, 0, 4, 4, 3, 3], [1, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0], [], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 2, 1, 1], [1, 0], [1, 0, 1, 1], [0, 3, 6, 5, 2, 4, 5, 4, 6, 4, 3, 1, 2, 6, 2, 4, 5, 1, 6, 5, 6, 4, 3, 6, 6, 3, 1, 1, 2, 5, 3, 1, 6], [0, 0, 0, 1], [2, 1, 2, 2, 0, 3, 3, 3, 1, 1, 1, 2, 3, 0, 3, 3, 1, 1, 3, 0, 0, 2, 1, 0, 1, 3, 0, 1, 0, 3, 2, 3, 0, 2, 3, 0, 1, 3, 0, 3, 3, 2, 3, 3, 1, 0, 0, 3, 1, 2, 2, 2, 1, 1, 0, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 1, 0, 2, 0, 0, 3, 3, 0, 3, 2, 1, 2, 0, 1, 3, 0, 2, 3, 3, 2, 0, 0, 1, 0, 0, 3, 0, 1, 0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 2, 1, 0, 0, 1, 2, 2, 2, 0, 2, 1, 2, 1, 1, 1, 2, 0, 2, 2], [0, 1, 2, 2, 0, 2, 0, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(int(0.0),( ( i0 + max(max(max(int(4.0), int(3.0)), int(8.0)), mod(min(in0, min(abs(int(4.0)), int(7.0))),max(res0, in2))) ) - divInt(int(8.0),i2) )) \\g int(3.0)\\nif not not b0:{:\\nb0 = min(in1, int(5.0)) \\l in2\\nif b0:{:\\nb2 = b0\\n:}\\nb0 = min(divInt(max(in1, divInt(abs(res0),int(1.0))),abs(in1)), abs(min(mod(abs(max(int(1.0), in0)),i1), abs(int(7.0))))) \\le ( divInt(( int(9.0) * int(2.0) ),i2) * ( mod(mod(int(2.0),res0),i2) + in1 ) )\\n:}else:{:\\nin2 = i1\\n:}\\nif b0:{:\\nif mod(int(3.0),int(2.0)) \\le int(1.0):{:\\nres0 = in2\\n:}else:{:\\nloopBreak% = 0\\nwhile not False:{:\\nb2 = ( res0 * in1 ) \\ge max(max(in0, max(( int(1.0) + ( res0 * int(2.0) ) ), abs(res0))), ( min(abs(( in0 + i1 )), int(6.0)) - i1 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb1 = True\\ni2 = in2\\nb0 = abs(in0) \\ge int(3.0)\\ni1 -= res0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 5, 11, 22, 22, 6, 11, 0, 15, 6, 9, 2, 4, 33, 4, 95, 20, 24, 11, 10]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [1], [1, 1], [1, 0, 1, 1, 1], [6, 5, 8, 9, 3], [5], [], [], [1], [0], [], [], [], [5, 1, 6], [0, 1], [3, 1, 1, 3, 0, 1, 1], [], [2, 0], [1], []], "fitness": 100, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = abs(int(6.0))\\nloopBreak% = 0\\nwhile int(58.0) != min(i1, int(9.0)):{:\\nres0 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 5, 5, 1, 0, 0, 1, 1, 0, 0, 0, 3, 2, 7, 0, 2, 1, 0]}][{"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [0, 1], [8, 8], [], [], [], [], [], [], [], [], [0, 5, 1], [0, 0], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(88.0)\\nin2 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [], [1], [2], [], [1], [0], [], [], [], [1, 5, 3, 6], [1], [0, 0, 0], [], [], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i1 \\g in2\\nin0 += res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 0, 0, 2, 1, 1, 2, 2, 1, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 4, 5, 9, 3, 7, 4, 7, 8, 0, 3, 9, 1, 6, 7, 0, 2, 5, 5, 4, 2, 9, 3, 0, 8, 4, 7, 8, 2, 3, 4, 0, 4], [1, 5, 2, 2, 0], [2, 2, 1, 2, 1, 1], [], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0], [2, 1, 2, 1, 0, 1], [1, 0, 1], [1], [3, 2, 6, 6, 2, 6, 0, 5, 0, 3, 2, 2, 6, 6, 6, 2, 3, 2, 6, 3, 3, 5, 1, 1, 3, 0, 0, 3, 4, 2, 1, 5, 3, 6, 0, 0, 0, 4, 1, 3, 3, 3, 6, 0, 0, 3, 2, 6, 2, 4, 4, 6, 5], [0, 0, 0], [3, 0, 3, 2, 2, 0, 1, 0, 2, 2, 0, 3, 0, 1, 3, 3, 1, 0, 2, 3, 3, 3, 0, 2, 1, 3, 2, 0, 3, 2, 0, 1, 2, 0, 3, 1, 1, 2, 0, 2, 2, 2, 0, 3, 3, 2, 1, 0, 3, 1, 2, 2, 2, 0, 1, 3, 1, 2, 1, 2, 3, 0, 2, 0, 0, 3, 3, 2, 0, 1, 2, 2, 2, 3, 1, 3, 0, 3, 0, 3, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 2, 0, 1, 0, 1, 0, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 0, 1, 3, 2, 0, 0, 3, 0, 1, 3, 3, 1, 3, 3, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 3, 3, 0, 2, 3, 3, 3, 2, 0, 3, 1, 3, 1, 0, 0, 1, 2, 1, 0, 2, 0, 1, 0, 0, 0, 1, 2, 1, 3, 3, 1, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 2, 1, 1, 2, 0, 0, 1, 0, 2, 0, 2, 0, 0, 1, 0, 2, 1, 0, 2, 2, 1, 2, 2, 2, 0], [1, 1, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 2], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 78, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not False:{:\\nb2 = not max(in0, min(divInt(divInt(i2,int(9.0)),res0), ( divInt(res0,max(i2, int(1.0))) - max(min(int(4.0), res0), mod(min(min(max(i0, mod(int(5.0),min(( in2 - min(mod(i0,int(9.0)), ( in0 - abs(int(3.0)) )) ), int(7.0)))), ( i2 * divInt(mod(divInt(i2,min(max(( int(4.0) * res0 ), min(int(7.0), ( ( ( res0 + int(8.0) ) * min(int(0.0), ( int(3.0) - divInt(min(res0, divInt(i2,in0)),abs(min(( i2 * int(9.0) ), ( divInt(( max(int(1.0), min(res0, max(in0, abs(( in0 * divInt(in2,i1) ))))) - ( i1 + divInt(in0,i0) ) ),i0) * in0 )))) )) ) - int(6.0) ))), divInt(in1,int(7.0)))),i2),int(0.0)) )), i1),max(max(abs(min(min(max(int(2.0), int(5.0)), min(abs(min(in2, int(5.0))), abs(mod(in0,res0)))), min(i0, int(4.0)))), min(max(int(2.0), min(abs(divInt(mod(i0,int(9.0)),i0)), in1)), i1)), in0))) ))) \\g int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\nif int(0.0) != max(min(res0, ( abs(abs(max(mod(i0,abs(int(8.0))), abs(int(4.0))))) + i0 )), in0):{:\\ni2 = int(7.0)\\n:}else:{:\\nb2 = ( int(8.0) * res0 ) == mod(i2,int(2.0))\\n:}\\nloopBreak% = 0\\nwhile in1 == in1:{:\\nloopBreak% = 0\\nwhile res0 \\l int(3.0):{:\\nin2 = ( int(4.0) * abs(min(int(0.0), int(4.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b1\\nb1 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 34, 34, 5, 6, 0, 11, 5, 6, 3, 1, 53, 3, 167, 37, 46, 17, 20]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1], [0, 1, 2, 0, 1, 1, 0], [0], [1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 2, 9, 2, 5, 7, 6, 5, 1, 5, 3, 9, 5, 6, 3, 1, 2, 7, 7, 2, 3], [4, 3, 0], [0, 2], [], [1, 1, 1], [0, 0, 0], [], [], [0], [5, 0, 4, 0, 5, 6, 2, 6, 3, 5, 0, 0, 4, 5, 2, 2, 3, 4, 5, 6, 6], [1, 1, 1, 0], [2, 3, 0, 1, 1, 0, 2, 1, 0, 0, 2, 1, 2, 1, 3, 3, 2, 2, 3, 3, 2, 1, 1, 3, 1, 2, 1, 3, 1, 1, 0, 3, 1, 1, 1, 0, 2, 2, 3, 3, 0, 2, 2, 1, 0, 2, 3, 0, 3, 3, 3, 3, 1, 0, 0, 0, 3, 2, 3, 1, 0, 1, 3, 2, 2, 1, 3, 3, 0, 0, 1, 0, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 2, 2, 0], [0, 0, 2, 2, 2, 1, 0, 2, 1, 0, 1, 2, 2], [1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += mod(min(i0, int(7.0)),int(5.0))\\nin1 += i0\\nif ( int(2.0) * in2 ) \\le res0:{:\\ni2 *= ( int(9.0) * divInt(int(2.0),abs(max(divInt(( abs(min(divInt(int(5.0),int(7.0)), min(int(6.0), ( int(5.0) - min(int(1.0), int(5.0)) )))) + res0 ),min(int(3.0), int(9.0))), int(5.0)))) )\\nb0 = in0 \\ge ( ( min(max(in2, ( divInt(int(6.0),i0) * mod(abs(i0),max(abs(min(abs(int(3.0)), in1)), in2)) )), i2) - max(( abs(int(1.0)) + i2 ), int(2.0)) ) - abs(divInt(( int(7.0) * abs(min(in0, in1)) ),int(7.0))) )\\nb2 = in2 \\l ( int(2.0) * res0 )\\nres0 = int(3.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 7, 7, 1, 6, 22, 22, 3, 2, 0, 3, 3, 0, 0, 1, 21, 4, 76, 17, 20, 13, 7]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [9, 0, 7, 8, 2, 3, 5, 6, 4, 6, 9, 3, 7, 5, 0, 0, 8, 8, 7, 7, 9, 9, 6, 8, 6, 7, 4, 8, 5], [4, 2, 2], [1, 1], [1], [0, 0, 1, 1, 1], [0, 0, 0], [2, 3], [], [], [2, 1, 6, 5, 6, 0, 0, 5, 0, 0, 6, 5, 1, 1, 0, 3, 0, 0, 6, 3, 1, 4, 1, 3, 2, 6, 2, 2, 1, 6, 1, 5, 4, 6, 4], [], [1, 0, 3, 1, 2, 1, 3, 2, 3, 2, 0, 2, 0, 3, 0, 2, 0, 2, 3, 2, 3, 1, 2, 1, 0, 0, 1, 0, 3, 3, 0, 2, 3, 3, 3, 3, 0, 2, 0, 3, 1, 2, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 0, 0, 3, 2, 1, 3, 2, 2, 3, 3, 3, 2, 3, 2, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1, 3, 3, 0, 2, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 1, 3, 2, 2, 2, 0, 2, 1, 0, 2, 0, 2, 0, 3, 1, 0, 3, 1, 2, 3, 0, 2, 1, 1, 0, 0, 1, 0, 1, 3, 0, 1, 0, 1, 3, 1, 3, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [2, 2, 1, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0, 1, 2, 2, 2, 2, 2, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 2, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 2, 2], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not ( int(9.0) \\le i2 or abs(int(0.0)) == ( int(7.0) - abs(mod(max(( i1 - mod(res0,abs(in2)) ), divInt(res0,( min(mod(min(int(8.0), divInt(int(2.0),i0)),i0), int(3.0)) * in2 ))),abs(max(i0, divInt(min(max(min(abs(i0), mod(res0,min(int(5.0), ( ( max(( in2 + ( min(i1, int(6.0)) + i1 ) ), divInt(i0,in0)) - min(( int(4.0) * max(mod(mod(abs(abs(abs(( abs(divInt(( ( ( divInt(int(6.0),( int(9.0) + i0 )) - int(3.0) ) + int(7.0) ) + abs(min(i0, divInt(( ( ( int(5.0) + res0 ) * in0 ) + int(0.0) ),i1))) ),in1)) + i1 )))),int(0.0)),max(( ( ( in0 - divInt(int(8.0),i2) ) - ( res0 + ( i2 + max(int(8.0), i2) ) ) ) * min(int(7.0), mod(min(i1, divInt(int(7.0),int(9.0))),res0)) ), i1)), int(9.0)) ), in2) ) * int(6.0) )))), max(in1, int(8.0))), res0),int(6.0)))))) ) )\\nb1 = min(int(7.0), min(int(4.0), in1)) == int(85.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 29, 29, 3, 2, 1, 5, 3, 2, 0, 0, 35, 0, 130, 37, 30, 21, 16]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 2, 0, 0, 1, 0, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 8, 9, 7, 7, 7, 6, 1, 1, 2, 1, 6, 9, 7, 2, 3, 5, 2, 9, 4, 6, 5, 6, 7, 9, 2], [3, 0, 4, 0, 0, 2, 1], [2, 0, 2, 0, 2, 2, 2, 1], [1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [2, 0, 1, 3, 0, 0, 2, 1, 3, 3], [0, 0], [1], [1, 0, 6, 6, 4, 6, 6, 1, 1, 6, 6, 1, 0, 6, 2, 0, 6, 5, 5, 2, 5, 3, 6, 4, 5, 2, 4], [0, 1, 1, 1], [1, 3, 2, 3, 0, 3, 2, 1, 1, 1, 1, 0, 2, 3, 1, 3, 0, 2, 2, 1, 0, 0, 0, 0, 2, 2, 1, 2, 1, 2, 2, 3, 1, 0, 1, 2, 1, 3, 3, 3, 1, 0, 2, 1, 1, 3, 2, 0, 2, 2, 2, 0, 1, 0, 3, 1, 3, 0, 1, 1, 2, 1, 2, 2, 0, 3, 1, 3, 0, 0, 3, 1, 0, 0, 3, 0, 2, 3, 1, 1, 0, 1, 1, 3, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [2, 0, 1, 0, 2, 1, 0, 0, 0, 1, 2, 0, 1, 2, 0, 2, 2, 0], [2, 1, 1, 1, 0, 0, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not b2:{:\\nloopBreak% = 0\\nwhile True:{:\\nb0 = ( b2 or b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not True\\ni1 = int(4.0)\\n:}else:{:\\nb2 = abs(( min(i0, max(( int(5.0) * int(8.0) ), int(9.0))) - int(7.0) )) \\ge res0\\nres0 -= divInt(min(int(7.0), abs(in1)),mod(mod(int(7.0),res0),res0))\\nb2 = i1 \\l i1\\n:}\\nloopBreak% = 0\\nwhile divInt(( int(6.0) - mod(int(1.0),( divInt(max(int(1.0), res0),int(2.0)) + divInt(int(1.0),min(min(min(int(6.0), res0), divInt(int(9.0),int(7.0))), max(( i1 + ( mod(( i0 - int(2.0) ),res0) * abs(int(3.0)) ) ), min(i2, int(5.0))))) )) ),int(2.0)) \\le divInt(int(9.0),( ( i0 + max(int(4.0), abs(res0)) ) * in2 )):{:\\nin2 += min(int(6.0), i2)\\nloopBreak% = 0\\nwhile in2 \\l abs(in0):{:\\nres0 -= divInt(abs(int(5.0)),int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( in1 \\l int(7.0) or ( int(9.0) == min(int(2.0), in2) or i2 \\g in1 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 4, 9, 27, 27, 7, 8, 3, 17, 7, 10, 2, 1, 27, 4, 88, 20, 18, 12, 11]}, {"genotype": [[0], [1], [1], [], [1], [1], [0], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(0.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1], [8], [4], [2], [1], [0, 1, 0], [0], [3, 0], [], [], [0, 1, 4], [1], [0, 1, 0], [], [], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( i0 \\le int(8.0) or b2 ):{:\\ni1 *= in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 0, 0, 3, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 1, 0, 2, 1], [0, 1], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 7, 4, 4, 4, 2, 0, 1, 9, 5, 7, 9, 5, 0, 9, 3, 8, 0, 2, 8, 9, 3, 0, 1, 5, 4, 6, 8, 5, 8, 1, 2, 2, 8], [0, 5, 4, 2, 0], [2, 2], [0], [1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0], [2, 3, 2], [], [1], [6, 1, 2, 6, 5, 0, 2, 4, 1, 0, 6, 6, 2, 1, 6, 5, 2, 2, 5, 6, 5, 6, 6, 3, 5, 3, 5, 5, 3, 0, 6], [1], [3, 0, 2, 1, 3, 2, 1, 3, 1, 3, 1, 1, 1, 2, 1, 3, 1, 1, 0, 0, 3, 1, 0, 3, 1, 0, 3, 2, 3, 2, 3, 0, 2, 3, 1, 2, 1, 3, 3, 2, 3, 0, 2, 1, 0, 3, 2, 3, 0, 1, 2, 2, 2, 0, 3, 0, 2, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 0, 2, 3, 0, 1, 1, 2, 3, 1, 1, 1, 0, 0, 1, 3, 1, 2, 2, 1, 2, 2, 2, 2, 3, 0, 1, 1, 2, 2, 2, 0, 3, 3, 1, 3, 0, 1, 0, 1, 0, 0, 1, 3, 1, 2, 2, 3, 0, 3, 0, 0, 3, 2, 3, 2, 1, 1, 0, 0, 2, 3, 2, 1, 2, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 2, 2, 1, 2, 1, 0, 2, 0, 0, 1, 1, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 2, 2], [0, 0, 2, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(res0, ( int(5.0) + max(( int(3.0) + abs(int(7.0)) ), abs(int(4.0))) )) \\l int(4.0):{:\\nb2 = int(4.0) != ( int(2.0) * max(int(0.0), int(1.0)) )\\n:}else:{:\\nb2 = not ( not i1 \\le i2 and abs(int(9.0)) == res0 )\\n:}\\nloopBreak% = 0\\nwhile max(int(5.0), in2) \\l min(( abs(( min(i0, divInt(min(int(7.0), divInt(int(9.0),max(max(mod(abs(i2),divInt(int(5.0),in1)), min(divInt(max(i1, int(0.0)),mod(( mod(i0,min(res0, divInt(res0,int(9.0)))) * int(3.0) ),( mod(max(abs(abs(( ( i2 - ( min(i1, int(8.0)) - int(0.0) ) ) + ( abs(int(2.0)) * int(8.0) ) ))), int(9.0)),res0) * in2 ))), int(3.0))), abs(int(0.0))))),divInt(( int(1.0) - ( ( mod(( abs(i2) + int(5.0) ),int(4.0)) * divInt(mod(mod(i2,max(abs(int(6.0)), abs(in2))),int(8.0)),res0) ) * int(5.0) ) ),in2))) - res0 )) - int(8.0) ), min(int(1.0), divInt(mod(abs(res0),max(in0, in2)),max(mod(abs(( int(2.0) + int(2.0) )),in0), in2)))):{:\\nin2 *= ( abs(divInt(int(8.0),( in0 - i0 ))) - res0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 35, 35, 5, 2, 1, 8, 5, 3, 0, 1, 31, 1, 134, 36, 33, 19, 18]}][{"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 9, 0, 0, 5, 5, 9, 2, 9, 6, 3, 8, 1, 9, 2, 6, 5, 6, 6, 7, 4, 1, 5, 4, 6, 9, 2, 5, 0, 4, 5, 9, 6, 7, 3, 7, 1, 1, 1, 7, 8, 3, 7, 5, 3, 0, 8, 2, 5, 2, 3], [5, 0], [0, 2], [], [0, 1, 1], [0, 0], [2], [], [], [2, 4, 6, 1, 3, 0, 3, 0, 3, 6, 0, 6, 5, 3, 3, 0, 1, 6, 4, 0, 0, 1, 1, 5, 2, 5, 5, 0, 6, 1, 6, 4, 2, 5, 2, 2, 2, 4, 0, 1, 2, 0, 0, 1, 2, 5, 0, 5, 6, 6, 4, 6, 3, 5, 5, 0, 2, 5, 0, 4, 3, 4, 4, 6, 2, 3, 0], [], [3, 1, 2, 2, 1, 2, 3, 3, 0, 3, 2, 2, 0, 3, 2, 3, 2, 3, 1, 0, 0, 3, 0, 2, 0, 0, 0, 0, 3, 0, 2, 0, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 3, 2, 3, 3, 0, 2, 1, 2, 0, 2, 1, 0, 0, 0, 2, 2, 3, 3, 0, 1, 2, 3, 0, 3, 2, 3, 3, 2, 0, 2, 0, 3, 3, 1, 2, 1, 0, 0, 3, 3, 3, 3, 1, 0, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 2, 1, 1, 0, 2, 2, 3, 2, 0, 2, 2, 2, 0, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 2, 3, 3, 0, 0, 0, 2, 0, 2, 0, 1, 3, 2, 0, 3, 3, 1, 3, 2, 3, 2, 3, 1, 1, 1, 3, 0, 1, 3, 3, 2, 0, 2, 3, 3, 3, 0, 1, 0, 3, 0, 2, 2, 2, 1, 2, 1, 1, 3, 2, 1, 0, 0, 3, 2, 3, 1, 3, 2, 0, 0, 1, 1, 1, 3, 0, 2, 3, 1, 3, 3, 2, 2, 1, 3, 3, 1, 2, 0, 3, 1, 2, 1, 2, 3, 3, 1, 2, 3, 1, 2, 2, 2, 1, 0, 0, 0, 3, 1, 0, 0, 2, 0, 3, 0, 3, 2, 2, 2, 3, 2, 3, 3, 1, 3, 3, 1, 1, 3, 0, 1, 3, 0, 2, 0, 1, 1, 3, 2, 1, 0, 0, 1, 3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 0, 1, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1, 0, 1, 1, 0, 1, 2, 1, 0, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 0, 2, 2, 2, 1, 2, 0, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 1, 2, 0, 1, 0, 0, 2, 2, 1, 1, 1, 1], [0, 2, 0, 2, 2, 1, 2, 1, 2, 1, 0, 2, 0, 2, 2, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 1, 0, 0, 0, 1, 2, 2, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not min(int(5.0), ( ( int(9.0) + divInt(abs(abs(i2)),max(mod(( in1 * abs(( abs(( abs(int(9.0)) + res0 )) * i1 )) ),abs(in0)), ( i0 * in0 ))) ) - i0 )) != in0\\nb2 = min(res0, divInt(i0,abs(mod(res0,in2)))) \\l divInt(( ( min(int(0.0), int(0.0)) * max(( min(abs(in0), ( int(5.0) - ( in0 * ( int(5.0) - i0 ) ) )) + i1 ), res0) ) * ( ( min(min(in1, int(9.0)), divInt(min(i0, max(( max(abs(( i0 + mod(i1,min(min(int(2.0), mod(int(9.0),i1)), in2)) )), max(min(max(max(int(6.0), i2), min(( max(in2, ( abs(max(in2, i0)) * int(3.0) )) * ( int(8.0) - int(1.0) ) ), res0)), divInt(( min(( i1 + ( ( divInt(res0,( ( int(9.0) * in1 ) + int(2.0) )) + ( i2 - int(6.0) ) ) + in2 ) ), i2) * mod(min(abs(i2), i2),in1) ),mod(i0,( i1 + int(5.0) )))), abs(divInt(i2,abs(min(int(6.0), abs(( max(( min(int(6.0), int(7.0)) - int(4.0) ), max(i0, int(1.0))) + abs(abs(mod(i0,mod(max(min(abs(i1), int(5.0)), i2),min(in2, divInt(mod(( int(4.0) * ( int(6.0) + int(9.0) ) ),abs(( int(2.0) + i0 ))),in2)))))) )))))))) + abs(( abs(int(5.0)) * max(( res0 + res0 ), int(0.0)) )) ), int(4.0))),int(5.0))) - abs(in1) ) + mod(min(int(9.0), abs(abs(( mod(int(6.0),min(max(int(7.0), ( res0 * abs(int(3.0)) )), divInt(int(7.0),( abs(max(int(1.0), ( abs(int(1.0)) - ( ( divInt(int(1.0),in0) + in2 ) - in2 ) ))) + min(int(7.0), i0) )))) + i2 )))),( in2 + min(i0, max(( ( ( abs(mod(min(max(int(8.0), min(min(int(3.0), int(7.0)), abs(in1))), int(5.0)),abs(in0))) - divInt(in1,int(3.0)) ) * int(0.0) ) * max(divInt(int(8.0),in1), res0) ), int(2.0))) )) ) ),max(max(( i2 - max(in0, int(5.0)) ), divInt(int(2.0),i0)), int(3.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 52, 52, 2, 2, 0, 3, 2, 1, 0, 0, 67, 0, 263, 70, 74, 45, 25]}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 1, 2, 0, 1], [1], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 7, 1, 2, 6, 8, 7, 8, 4, 2, 3, 5, 1, 5, 7, 5, 5, 9, 8, 2, 8, 2, 8, 4, 7, 0, 6, 9, 3, 5, 1, 1, 9], [4, 0, 3, 1], [0, 0, 2, 0, 1], [], [1, 1, 0, 1, 1, 0], [0, 0, 0, 0], [2, 0], [], [], [1, 4, 4, 5, 4, 3, 1, 0, 4, 2, 6, 5, 0, 6, 1, 1, 5, 6, 4, 4, 4, 5, 6, 3, 3, 6, 6, 5, 3, 0, 2, 4, 1, 0, 3, 0], [], [3, 3, 3, 3, 1, 2, 3, 0, 2, 0, 2, 0, 2, 1, 2, 3, 1, 3, 1, 1, 0, 3, 0, 0, 0, 2, 0, 2, 2, 3, 2, 2, 2, 2, 2, 0, 0, 1, 2, 2, 0, 3, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 3, 0, 3, 3, 3, 3, 0, 1, 0, 2, 0, 1, 2, 3, 1, 0, 2, 2, 0, 1, 2, 2, 3, 3, 0, 2, 1, 0, 1, 2, 2, 0, 3, 1, 0, 0, 3, 2, 3, 2, 3, 3, 3, 0, 3, 1, 0, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 3, 1, 1, 3, 3, 2, 1, 0, 0, 3, 0, 2, 1, 2, 1, 1, 1, 0, 3, 3, 1, 3, 1, 3, 0, 1, 3, 0, 3, 3, 0, 3, 2, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 0, 2, 0, 1, 2, 2, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 1, 0, 2, 2, 1, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2], [2, 0, 1, 1, 1, 0, 0, 2, 1, 0, 2, 0, 1, 1, 2, 2, 2, 1, 1, 2, 2, 0, 2], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(min(min(abs(int(6.0)), ( min(i1, ( in1 * ( in1 + ( int(1.0) - ( max(int(7.0), abs(int(1.0))) - int(2.0) ) ) ) )) - in2 )), abs(in1))) \\le in0\\nb0 = i1 \\l divInt(i0,mod(( abs(divInt(( divInt(( ( in1 + i2 ) + int(6.0) ),( ( res0 * max(abs(in2), mod(i0,( int(8.0) - int(7.0) ))) ) + ( int(8.0) * res0 ) )) + mod(i1,i1) ),min(in2, max(abs(min(abs(res0), int(4.0))), in1)))) - ( in1 - int(2.0) ) ),( max(int(3.0), in1) * mod(( in2 * int(5.0) ),divInt(( min(min(res0, mod(int(1.0),in0)), int(5.0)) * ( mod(in0,max(int(7.0), res0)) - res0 ) ),min(mod(max(divInt(min(abs(max(in2, min(int(5.0), in0))), int(5.0)),int(9.0)), ( mod(divInt(int(8.0),mod(( mod(int(2.0),abs(int(8.0))) - abs(int(2.0)) ),int(8.0))),max(max(( int(4.0) * i0 ), i2), max(in1, ( int(7.0) * ( int(0.0) + int(6.0) ) )))) * int(9.0) )),i1), abs(abs(int(3.0)))))) )))\\nloopBreak% = 0\\nwhile not min(int(5.0), min(i0, int(1.0))) \\ge abs(in0):{:\\nb2 = abs(abs(i0)) \\g abs(mod(int(1.0),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 34, 34, 4, 5, 0, 6, 4, 2, 0, 0, 36, 0, 149, 40, 39, 23, 17]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1, 1, 1, 1, 1, 0, 1], [9, 8, 3, 6, 8, 0, 1], [5], [2], [], [1], [0], [], [], [], [4, 2, 6, 6, 3, 2, 1], [1], [2, 2, 1, 3, 3, 2, 2, 0, 3, 1, 2, 3, 3, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0], [2, 0, 2, 1, 1], [2, 2, 1, 2, 0, 2], [1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= ( ( int(9.0) * abs(min(( mod(i2,abs(int(8.0))) - ( max(max(res0, res0), int(3.0)) * int(6.0) ) ), ( int(8.0) + in0 ))) ) * i2 )\\nb2 = i1 != int(01.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 7, 1, 23, 6, 5, 6, 1]}, {"genotype": [[0], [1], [1], [], [1], [1], [7], [], [], [], [], [], [], [], [], [3, 4], [0], [3, 0, 1], [], [1], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = max(in1, int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1], [8, 8, 2, 6], [0], [0], [], [1], [0], [], [], [], [3, 0, 0], [], [2, 3, 0, 2, 3, 1, 3, 0, 1, 3, 1, 2, 1, 0], [1, 0, 0], [1, 1, 2, 2], [0, 0], [1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = mod(max(in0, ( max(int(8.0), abs(i0)) + int(8.0) )),abs(int(2.0))) \\l ( int(6.0) + i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 14, 3, 4, 2, 1]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [4, 2], [], [], [], [], [], [], [], [], [4, 1, 2, 0, 6, 1], [1], [2, 3, 0, 2, 1, 0, 3, 0, 3, 3, 0, 0, 1], [0, 0], [0, 0, 0, 0], [0, 0, 1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += ( min(i1, ( int(4.0) + i2 )) - min(i0, min(min(res0, i1), int(2.0))) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 13, 2, 4, 3, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 0, 0, 1], [5, 6, 8, 4, 6], [], [], [], [], [], [], [], [], [6, 2, 3, 4], [1, 0], [2, 0, 2, 2, 1, 1, 0, 1], [0, 0, 0], [], [2, 0, 1, 0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= ( i2 + ( ( int(5.0) - int(6.0) ) + in0 ) )\\nin1 = int(846.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 8, 3, 0, 4, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 0, 2, 1, 6, 5, 2, 8, 6, 2, 5, 0, 9, 1, 8, 8, 9, 9, 8, 8, 5, 0, 3, 5, 9, 6, 8, 4, 1, 0, 1, 8, 5, 2, 1, 4, 7], [0, 3], [1, 2], [], [0, 1, 1], [0, 0], [2], [], [], [3, 6, 5, 2, 2, 4, 5, 3, 2, 4, 4, 6, 6, 4, 2, 0, 2, 1, 0, 4, 3, 4, 0, 0, 0, 0, 5, 5, 4, 2, 6, 0, 5, 1, 5, 5, 2, 3], [], [1, 2, 1, 1, 2, 3, 2, 2, 0, 3, 3, 3, 1, 3, 1, 2, 3, 3, 1, 0, 1, 1, 0, 2, 0, 0, 1, 2, 1, 3, 2, 0, 2, 0, 2, 3, 1, 0, 2, 3, 3, 2, 2, 3, 3, 0, 1, 3, 1, 0, 0, 2, 0, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 1, 2, 0, 2, 1, 0, 3, 0, 0, 3, 2, 3, 0, 1, 2, 2, 1, 3, 0, 3, 3, 2, 3, 0, 2, 2, 0, 2, 3, 1, 0, 2, 1, 1, 2, 1, 0, 0, 0, 1, 3, 3, 1, 2, 3, 2, 2, 0, 3, 0, 1, 0, 2, 0, 3, 3, 0, 0, 2, 3, 2, 3, 0, 1, 1, 3, 3, 2, 2, 2, 2, 3, 0, 2, 0, 1, 0, 1, 0, 3, 1, 2, 1, 2, 1, 3, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 1, 2, 1, 1, 0, 0, 1, 1, 2, 0, 2, 0, 2, 1, 2, 2], [2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 1, 2, 1, 1, 1, 0, 2, 1, 2, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not int(8.0) \\l mod(int(0.0),int(2.0))\\nb2 = ( min(divInt(( in0 * abs(max(min(int(1.0), min(int(6.0), divInt(min(min(int(5.0), res0), int(2.0)),int(8.0)))), in2)) ),( i2 - i2 )), int(6.0)) + ( int(2.0) - min(( in1 - ( in2 - mod(max(int(5.0), in0),( max(max(mod(( min(abs(i2), int(0.0)) + max(int(9.0), in1) ),in1), ( res0 * ( int(1.0) - int(8.0) ) )), mod(( res0 + in1 ),max(mod(min(int(8.0), ( i2 - ( int(9.0) + i0 ) )),min(i2, i1)), max(divInt(min(i0, int(9.0)),( mod(int(8.0),max(in1, abs(max(mod(abs(in0),divInt(divInt(in1,( max(int(8.0), i0) - ( int(5.0) * int(0.0) ) )),( int(3.0) - i0 ))), i0)))) - i0 )), int(5.0))))) - max(min(int(9.0), mod(min(mod(divInt(in2,max(in2, int(6.0))),in1), divInt(i2,max(abs(res0), i0))),( min(( abs(in2) + int(8.0) ), int(4.0)) * min(abs(( divInt(( ( max(i1, divInt(in2,int(1.0))) - in2 ) * int(0.0) ),i2) - abs(int(1.0)) )), ( int(8.0) + divInt(int(5.0),abs(int(2.0))) )) ))), in0) )) ) ), int(1.0)) ) ) \\ge int(47.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 37, 37, 2, 2, 0, 3, 2, 1, 0, 0, 38, 0, 153, 42, 37, 23, 19]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [0, 1], [1, 1], [2, 8], [2], [0, 2], [], [1, 0], [0], [0], [], [0], [2, 0], [1], [1, 0, 1], [], [], [2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(2.0) == i2\\nif b2:{:\\ni0 *= int(8.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 1, 2, 0, 2, 1, 1, 0, 1, 2, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 9, 3, 6, 4, 4, 7, 3, 3, 5, 3, 4, 6], [4, 3], [2], [1], [0, 0, 1, 1], [0, 0], [3, 2], [], [], [1, 1, 5, 0, 6, 5, 1, 6, 5, 3, 5, 3, 1, 5], [1], [3, 1, 0, 2, 3, 1, 2, 1, 3, 2, 1, 0, 0, 2, 2, 0, 0, 3, 3, 1, 3, 3, 1, 2, 2, 0, 1, 0, 2, 1, 2, 3, 2, 1, 3, 2, 0, 2, 3, 3, 1, 3, 0, 3, 1, 0, 1, 3, 3, 3, 3, 0, 1, 1, 0, 3, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [2, 2, 0, 2, 1, 2, 0, 0, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2], [1, 2, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0]], "fitness": 100, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( not abs(int(4.0)) \\le i1 or divInt(abs(int(4.0)),mod(int(9.0),min(( int(3.0) - i1 ), in2))) \\ge mod(mod(i0,res0),abs(max(int(6.0), abs(min(int(4.0), ( ( in2 * int(4.0) ) - i1 )))))) )\\nres0 += divInt(int(7.0),divInt(min(divInt(int(3.0),abs(( in2 + ( abs(max(int(3.0), max(in0, max(int(5.0), in2)))) - int(3.0) ) ))), max(abs(max(max(in0, int(4.0)), int(6.0))), i1)),abs(in2)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 993, "mapping_values": [1, 2, 2, 0, 2, 14, 14, 2, 1, 1, 4, 2, 2, 0, 0, 14, 1, 57, 12, 18, 6, 7]}][{"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [1, 1], [3, 4], [0, 4], [1], [], [1, 1], [0, 0], [], [], [0], [3, 1], [], [1, 0, 1, 0], [], [], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(3.0) \\l in0:{:\\nb1 = int(4.0) \\le i1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 2, 1, 0, 2, 2, 0, 0, 1, 2, 0, 4, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 1, 1, 1, 2, 0, 2, 1, 1, 2, 2, 0, 0], [0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 4, 4, 9, 9, 0, 3, 5, 8, 0, 5, 2, 2], [3, 4, 0, 1, 1, 5, 0], [0, 2, 2, 2, 2], [0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 2, 3, 1, 0, 2, 3, 3, 2, 1, 1], [0, 0, 0, 0], [1, 1, 0], [6, 2, 5, 3, 4, 6, 2, 5, 3, 2, 0, 0, 2, 3, 2, 6, 0, 4, 0, 1, 5], [1, 0, 0, 0], [3, 0, 3, 0, 1, 3, 2, 1, 2, 3, 1, 3, 1, 0, 1, 2, 0, 0, 2, 0, 0, 1, 2, 3, 1, 3, 0, 0, 1, 0, 1, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 3, 2, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 2, 0, 2, 1, 1, 0, 2], [0, 1, 0, 2, 1, 0, 2], [1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(res0, max(i2, int(2.0))) \\ge min(( int(6.0) + ( abs(int(9.0)) - min(int(4.0), in2) ) ), int(4.0)):{:\\nin0 += ( in1 * res0 )\\nb0 = True\\ni2 = ( in2 - in0 )\\n:}else:{:\\nloopBreak% = 0\\nwhile int(9.0) \\le ( abs(int(9.0)) + max(i2, i0) ):{:\\ni0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i2 \\l int(3.0):{:\\nb2 = not ( True and b2 )\\n:}else:{:\\nin0 = max(int(5.0), int(8.0))\\n:}\\nloopBreak% = 0\\nwhile not ( ( not i2 \\g res0 and min(int(0.0), i0) \\g int(5.0) ) and True ):{:\\nif int(2.0) != abs(mod(int(2.0),( in1 * i0 ))):{:\\nb2 = i1 \\l in2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 5, 8, 15, 15, 7, 5, 3, 18, 7, 11, 4, 3, 21, 4, 49, 7, 10, 7, 1]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1], [1], [3], [2], [], [1], [0], [], [], [], [3, 5, 6, 2], [], [2, 2, 3, 0, 0, 3, 1, 3, 0, 0], [0, 0], [2, 2, 0], [1, 0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( abs(in0) - in2 ) + abs(int(1.0)) ) \\ge min(res0, i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 10, 2, 3, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 5], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1], [2, 0, 2, 2, 1, 0, 0, 0], [1, 1, 1], [0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 9, 2, 3, 4, 3, 5, 4, 6, 0, 8, 4, 4, 5, 1, 2, 0, 3, 9], [1, 4, 5, 1, 2, 1], [2, 1, 0, 2], [], [1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [2, 1], [0], [], [3, 6, 2, 1, 0, 0, 0, 3, 0, 5, 6, 3, 4, 2, 2, 1, 2, 4], [1], [2, 3, 1, 1, 2, 2, 0, 2, 1, 1, 1, 1, 1, 2, 3, 1, 2, 0, 3, 1, 0, 3, 1, 1, 0, 1, 2, 2, 0, 2, 2, 2, 3, 2, 3, 0, 0, 2, 0, 2, 3, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 1, 1, 1, 0, 3, 2, 1, 2, 1, 0, 3, 0], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 1, 2, 2, 0, 0, 0, 2], [2, 0, 0, 0, 2, 0, 2, 1, 2], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(max(int(7.0), int(7.0)),( mod(in0,mod(int(9.0),int(2.0))) * int(3.0) )) \\g int(4.0):{:\\nb2 = int(3.0) \\le divInt(abs(int(5.0)),( res0 + max(int(4.0), i2) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile abs(int(6.0)) != int(08.0):{:\\nloopBreak% = 0\\nwhile i1 \\g int(4.0):{:\\nb1 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = mod(( i0 + ( ( ( abs(( min(i0, i0) + ( in0 * divInt(min(i0, in2),res0) ) )) + divInt(int(4.0),int(5.0)) ) * mod(in0,in1) ) - i2 ) ),int(1.0)) == int(2.0)\\ni2 *= int(0.0)\\nb2 = i1 \\g min(mod(int(3.0),divInt(int(9.0),i2)), abs(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 20, 20, 6, 4, 0, 8, 6, 2, 1, 0, 18, 1, 63, 18, 9, 9, 10]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 2, 0, 2, 2, 1, 2, 0, 1], [1, 1, 1, 0], [0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 3, 5, 8, 8, 3, 6, 3, 9, 3, 0, 4, 6, 2, 3, 5, 8, 0, 6, 2, 5, 3, 3, 3, 9, 2, 7, 8, 8, 0, 3, 1, 8, 0, 3, 1, 0, 5, 8, 9, 6, 1, 4, 5, 5, 6, 6, 0, 4, 5, 7, 0, 3, 7, 0, 2, 3, 2, 9, 2, 4, 3, 7, 7, 2, 3, 7, 6, 3, 6, 5, 1, 9, 1, 2, 5, 2, 4, 0, 1, 7, 5, 4, 8, 7, 1, 0, 4, 9, 1, 4, 7, 6, 3, 5, 9, 5, 0, 4, 8, 2, 7, 0, 6, 3, 6, 7, 3, 1, 5, 8, 0, 6, 8, 4, 2, 7, 8, 1, 6, 5, 3, 7, 9, 0, 3, 9, 8, 3, 2, 4, 8, 8, 8, 1, 6, 7, 0, 6, 8, 1, 6], [5, 4, 1, 5, 3, 2], [2, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 1, 3, 3, 3, 1, 0, 3, 2, 3, 0, 2, 0], [0, 1], [1], [1, 3, 1, 0, 1, 2, 1, 6, 6, 6, 5, 6, 6, 6, 4, 0, 5, 4, 2, 3, 5, 6, 3, 6, 4, 1, 2, 5, 4, 5, 2, 0, 0, 3, 6, 0, 1, 0, 5, 1, 2, 2, 6, 1, 0, 2, 0, 2, 5, 1, 5, 1, 0, 6, 4, 6, 1, 6, 2, 4, 0, 5, 4, 0, 2, 6, 6, 4, 3, 5, 0, 3, 3, 0, 1, 1, 3, 1, 4, 5, 2, 1, 4, 2, 0, 6, 5, 4, 4, 2, 2, 3, 5, 0, 1, 2, 5, 2, 2, 3, 4, 1, 3, 4, 4, 5, 1, 2, 2, 3, 0, 1, 1, 4, 5, 6, 6, 4, 3, 3, 5, 5, 6, 3, 2, 1, 0, 0, 4, 0, 3, 0, 5, 6, 3, 0, 1, 3, 1, 6, 0, 1, 0, 5, 5, 4, 4, 1, 0, 3, 3, 3, 3, 5, 4, 2, 0, 1, 6, 4, 2, 1, 3, 1, 0, 0], [0, 0, 1], [2, 3, 3, 1, 3, 3, 2, 0, 0, 2, 0, 0, 1, 2, 1, 3, 3, 0, 1, 2, 3, 2, 0, 2, 3, 1, 0, 2, 0, 2, 3, 0, 3, 2, 0, 0, 1, 1, 0, 1, 2, 3, 3, 2, 0, 3, 3, 2, 0, 2, 1, 0, 3, 2, 0, 1, 0, 1, 0, 2, 0, 3, 3, 3, 1, 0, 1, 3, 1, 0, 1, 2, 2, 1, 1, 3, 3, 0, 0, 2, 0, 2, 3, 0, 1, 2, 2, 3, 2, 3, 1, 0, 0, 0, 0, 2, 3, 1, 0, 3, 0, 1, 2, 2, 2, 2, 2, 0, 2, 1, 0, 0, 3, 2, 2, 3, 0, 0, 3, 0, 0, 2, 0, 2, 1, 3, 3, 3, 0, 2, 3, 1, 1, 2, 2, 2, 2, 0, 1, 2, 0, 0, 2, 2, 1, 2, 3, 2, 2, 1, 3, 1, 3, 0, 0, 0, 3, 1, 2, 0, 1, 3, 2, 0, 2, 1, 2, 0, 1, 2, 0, 2, 1, 2, 3, 2, 2, 3, 2, 0, 1, 3, 3, 0, 1, 0, 1, 0, 3, 2, 2, 2, 2, 3, 3, 1, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 2, 3, 0, 3, 3, 1, 2, 2, 3, 3, 2, 1, 0, 3, 0, 1, 2, 3, 0, 1, 0, 2, 1, 3, 3, 0, 3, 2, 2, 1, 2, 0, 1, 2, 2, 2, 1, 2, 3, 2, 0, 1, 0, 3, 3, 1, 1, 2, 1, 2, 1, 3, 0, 3, 1, 3, 2, 0, 0, 2, 0, 0, 1, 2, 1, 2, 2, 0, 0, 1, 3, 3, 2, 3, 3, 0, 1, 3, 1, 2, 2, 0, 3, 1, 1, 3, 0, 0, 1, 0, 1, 0, 1, 3, 3, 3, 3, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 3, 3, 3, 3, 1, 1, 3, 3, 1, 0, 3, 2, 2, 1, 0, 0, 2, 1, 3, 2, 1, 3, 2, 0, 1, 0, 2, 2, 1, 0, 1, 1, 1, 3, 2, 2, 0, 1, 2, 1, 1, 2, 0, 3, 0, 0, 2, 0, 2, 1, 2, 1, 1, 2, 2, 0, 3, 2, 2, 1, 3, 3, 3, 2, 0, 0, 1, 3, 1, 0, 3, 0, 1, 2, 2, 1, 0, 3, 2, 0, 3, 3, 2, 1, 2, 2, 1, 2, 2, 2, 2, 3, 1, 2, 2, 3, 3, 3, 1, 0, 0, 0, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 1, 0, 2, 0, 2, 1, 3, 0, 0, 2, 2, 2, 2, 0, 2, 3, 3, 3, 3, 2, 0, 2, 1, 0, 3, 2, 3, 2, 3, 2, 0, 0, 2, 1, 3, 3, 0, 2, 0, 2, 2, 1, 2, 0, 3, 1, 2, 1, 0, 3, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 3, 1, 1, 2, 2, 0, 2, 2, 1, 3, 3, 1, 3, 0, 1, 1, 0, 0, 1, 3, 2, 1, 1, 2, 2, 3, 2, 0, 2, 0, 3, 2, 2, 1, 2, 3, 2, 1, 3, 1, 3, 0, 1, 1, 3, 2, 1, 0, 0, 1, 2, 1, 0, 1, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 2, 0, 1, 2, 0, 2, 3, 3, 0, 0, 3, 0, 1, 2, 3, 1, 1, 3, 0, 2, 1, 2, 2, 3, 1, 0, 0, 1, 0, 1, 1, 2, 3, 3, 1, 3, 3, 3, 1, 3, 0, 2, 3, 0, 3, 2, 3, 2, 2, 2, 2, 1, 1, 3, 1, 1, 0, 0, 3, 3, 0, 3, 0, 0, 3, 1, 1, 3, 0, 3, 3, 0, 3, 2, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 0, 1, 1, 3, 0, 3, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 2, 0, 0, 0, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 0, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 0, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 0, 1, 2, 0, 2, 0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 2, 1, 2, 1, 2, 2, 0, 2, 0, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 2, 0, 2, 0, 1, 2, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0, 2, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 0, 2], [1, 1, 0, 1, 2, 0, 0, 1, 0, 0, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 0, 1, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 0, 1, 0, 2, 0, 2, 1, 2, 2, 0, 2, 1, 0, 1, 1, 1, 2, 0, 1, 0, 0, 1, 0, 1, 0, 2, 0, 2, 2, 2, 2, 2, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1, 0, 0, 1, 2, 0, 2, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 104, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( min(min(int(5.0), abs(min(divInt(i1,in0), divInt(i1,i0)))), int(2.0)) - mod(int(3.0),min(min(i1, int(5.0)), ( max(( i2 - divInt(max(int(8.0), i1),( res0 + ( abs(res0) - abs(mod(res0,in2)) ) )) ), int(8.0)) * int(3.0) ))) ) != res0\\nb1 = b0\\nloopBreak% = 0\\nwhile int(6.0) \\le ( max(min(divInt(res0,max(min(( res0 + divInt(int(3.0),in1) ), abs(divInt(i0,int(9.0)))), in2)), int(3.0)), in1) + ( i2 - min(min(abs(int(0.0)), in0), int(4.0)) ) ):{:\\nin2 = abs(int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile res0 \\g int(2.0):{:\\nloopBreak% = 0\\nwhile True:{:\\nin0 = divInt(divInt(int(3.0),int(5.0)),max(max(res0, in1), ( i1 + ( min(i2, int(8.0)) + divInt(( min(( max(int(0.0), in2) * in1 ), in2) - i2 ),( max(int(6.0), i0) + max(i0, int(2.0)) )) ) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( mod(divInt(mod(( ( in0 * mod(int(5.0),res0) ) * i0 ),max(( divInt(min(i1, i0),max(in2, i1)) * mod(i2,divInt(int(3.0),min(abs(max(i2, ( min(int(3.0), int(3.0)) * mod(divInt(( mod(res0,int(9.0)) - ( i1 + i0 ) ),mod(divInt(int(2.0),( abs(mod(( int(7.0) + max(int(8.0), abs(i2)) ),i0)) + i2 )),min(int(8.0), mod(in2,int(0.0))))),max(mod(i1,mod(int(3.0),( in2 - int(1.0) ))), divInt(i1,( int(8.0) * ( min(divInt(( min(divInt(i0,int(0.0)), max(min(res0, int(3.0)), in1)) + int(1.0) ),res0), min(( ( mod(divInt(max(abs(int(0.0)), min(( int(5.0) + mod(mod(min(( int(8.0) * ( ( ( max(i1, abs(min(int(9.0), mod(mod(abs(min(mod(int(6.0),res0), min(i2, int(1.0)))),( abs(in1) + int(4.0) )),i0)))) * ( int(5.0) * max(min(in2, min(mod(( int(5.0) + divInt(in1,int(6.0)) ),( ( divInt(int(6.0),( max(divInt(i0,int(0.0)), i2) + max(abs(int(4.0)), int(5.0)) )) * ( int(7.0) * divInt(int(0.0),min(res0, max(int(3.0), max(( res0 - in1 ), ( in0 * in2 ))))) ) ) + int(7.0) )), ( int(0.0) - ( mod(i0,in0) + int(2.0) ) ))), min(min(divInt(min(abs(in0), int(3.0)),max(int(2.0), divInt(( i0 * abs(int(9.0)) ),int(2.0)))), max(i1, i1)), int(4.0))) ) ) + in0 ) * int(3.0) ) ), i1),int(7.0)),abs(abs(min(abs(divInt(int(7.0),mod(in1,in2))), ( i2 - i1 ))))) ), in1)),( ( int(2.0) * i2 ) * min(i0, int(3.0)) )),max(min(max(max(int(7.0), int(6.0)), abs(min(int(3.0), res0))), min(divInt(( int(6.0) + in2 ),in1), ( int(5.0) * min(mod(int(1.0),min(( in1 - int(9.0) ), i2)), mod(divInt(int(1.0),i2),int(2.0))) ))), int(5.0))) + int(2.0) ) - min(mod(( in0 - int(4.0) ),mod(int(0.0),int(1.0))), divInt(in2,min(i0, i1))) ), divInt(i2,( int(7.0) - ( int(5.0) * int(4.0) ) )))) + ( mod(in2,min(divInt(( int(8.0) - abs(abs(max(( i2 + i2 ), int(7.0)))) ),max(int(1.0), in0)), abs(in1))) + int(0.0) ) ) )))) ))), divInt(( int(4.0) - i1 ),abs(( in0 + min(abs(( int(9.0) - ( mod(int(1.0),divInt(divInt(( ( min(int(4.0), mod(( max(abs(max(int(7.0), in1)), in1) + in2 ),min(max(max(i1, ( i2 * i2 )), in0), min(max(int(6.0), i0), ( i1 + mod(int(3.0),max(i1, in1)) ))))) * ( divInt(( divInt(in2,mod(min(max(min(max(mod(res0,divInt(int(5.0),res0)), abs(divInt(min(( abs(( in1 * in0 )) * ( int(9.0) * max(abs(in0), mod(in2,( ( int(5.0) * ( in2 + abs(int(0.0)) ) ) + ( int(4.0) - res0 ) ))) ) ), min(divInt(( mod(( int(8.0) + in0 ),int(2.0)) + i2 ),( ( abs(int(7.0)) * int(0.0) ) - divInt(divInt(i1,( mod(int(6.0),min(abs(int(3.0)), min(i0, int(6.0)))) - int(7.0) )),i0) )), in1)),int(3.0)))), max(( int(1.0) * int(5.0) ), mod(( abs(mod(i0,( in0 - max(( divInt(int(8.0),( abs(( int(0.0) + min(int(6.0), min(i0, int(8.0))) )) * int(4.0) )) * abs(( int(2.0) - in2 )) ), res0) ))) * int(7.0) ),( int(8.0) + in0 )))), int(1.0)), abs(i0)),max(i1, ( in0 + i1 )))) - int(6.0) ),int(5.0)) + int(3.0) ) ) + ( res0 - int(7.0) ) ),( i0 * ( abs(abs(i1)) + i0 ) )),abs(in2))) * int(9.0) ) )), ( max(int(0.0), int(3.0)) - max(in2, mod(int(9.0),mod(( abs(int(8.0)) + in1 ),in1))) )) )))))) ), int(3.0))),i1),int(2.0)) != int(4.0) or mod(abs(abs(int(8.0))),max(max(min(int(8.0), abs(i0)), ( min(in0, min(( min(( divInt(divInt(mod(int(8.0),int(1.0)),max(int(6.0), int(7.0))),in0) + in0 ), min(min(in0, min(in2, in1)), abs(int(0.0)))) + int(6.0) ), min(i2, min(max(i0, abs(( abs(abs(i1)) + mod(res0,in1) ))), i2)))) + abs(abs(abs(i1))) )), int(8.0))) \\ge int(1.0) ):{:\\nb1 = ( ( False and b1 ) or ( not ( min(in0, abs(i1)) == int(6.0) and b0 ) or not b1 ) )\\n:}else:{:\\ni0 -= i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 143, 143, 6, 7, 5, 19, 6, 13, 2, 1, 166, 3, 648, 182, 160, 98, 85]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [1, 0, 2, 2, 0, 0], [0, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 3, 3, 2, 7, 9, 9, 3, 6, 3, 3, 0, 4, 6], [0, 1], [], [], [1, 0, 1], [0, 0], [2], [], [0], [6, 6, 6, 0, 5, 2, 2, 6, 3, 3, 4, 5, 2, 3, 1, 5, 5, 2, 0, 5], [0, 0, 0, 0], [0, 2, 3, 2, 3, 2, 1, 3, 0, 2, 1, 1, 3, 3, 3, 2, 2, 1, 3, 2, 0, 1, 1, 0, 1, 3, 2, 0, 1, 2, 0, 3, 1, 1, 1, 3, 0, 0, 3, 3, 3, 2, 3, 0, 1, 0, 2, 0, 3, 0, 3, 1, 0, 0, 2, 0, 0, 1, 3, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [1, 2, 2, 2, 1, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 2], [2, 2, 1, 1, 0, 2, 0], [0, 0, 0, 0, 1]], "fitness": 100, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = res0\\nres0 = ( max(divInt(abs(( int(2.0) * abs(i0) )),( int(6.0) * int(3.0) )), abs(max(abs(( divInt(int(3.0),min(( in2 - int(2.0) ), int(7.0))) - i2 )), int(9.0)))) + min(divInt(i2,int(9.0)), divInt(res0,max(int(3.0), int(6.0)))) )\\nif int(3.0) \\l min(in0, in0):{:\\nloopBreak% = 0\\nwhile not abs(min(min(( min(in1, int(3.0)) * in2 ), ( i2 + max(in0, min(int(0.0), i1)) )), in2)) \\g mod(in2,i2):{:\\ni0 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 = abs(int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 989, "mapping_values": [1, 6, 6, 2, 4, 15, 15, 2, 0, 0, 3, 2, 1, 0, 1, 20, 4, 60, 12, 17, 7, 5]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1], [8, 7, 3], [], [], [], [], [], [], [], [], [6, 4, 0, 2, 1, 4, 2, 0], [1], [3, 2, 1, 2, 0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 3, 3, 3, 1, 0, 1], [0, 1, 1, 0, 1], [0, 1, 2, 1, 0], [1, 2, 2], [0, 1, 1]], "fitness": 100, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= min(( int(8.0) * divInt(in1,max(i0, i2)) ), mod(i1,( mod(in1,i2) * abs(max(min(int(7.0), i0), int(3.0))) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 20, 5, 5, 3, 3]}][{"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 1, 0], [0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 0, 5, 1, 5, 5, 0, 1, 9, 4, 4, 0], [5, 4, 4, 0, 3, 4], [2, 2, 1, 0, 0], [0], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 2, 0, 2, 0, 0, 1], [1], [1, 1, 1, 0, 1], [1, 2, 6, 3, 5, 0, 5, 1, 2, 4, 5, 1, 2, 6, 0, 6, 0, 0, 1, 0, 1, 4, 3, 1, 4, 6, 3], [0, 1, 1, 0], [3, 0, 2, 1, 3, 0, 1, 0, 2, 0, 0, 0, 1, 2, 2, 1, 1, 3, 2, 1, 2, 0, 3, 0, 0, 0, 2, 1, 0, 1, 0, 3, 0, 2, 0, 1, 0, 3, 0, 3, 0, 2, 3, 1, 3, 0, 1, 3, 0, 3, 2, 3, 0, 1, 2, 2, 0, 1, 3, 0, 0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1, 0, 1, 2, 2, 1, 2, 0, 0, 2, 1, 0], [0, 2, 0, 2, 0, 2], [1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 53, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(i1) != mod(int(1.0),max(i2, int(7.0))):{:\\nres0 = in0\\nb2 = divInt(in2,i0) \\le in2\\n:}else:{:\\nif ( not int(0.0) \\le mod(mod(int(5.0),int(1.0)),min(( int(5.0) + divInt(i1,max(i2, in1)) ), in2)) and ( int(5.0) * i1 ) \\l int(0.0) ):{:\\ni2 += res0\\n:}else:{:\\nif abs(i0) \\ge ( res0 * int(1.0) ):{:\\nif b2:{:\\ni0 += i0\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile abs(i1) \\le max(i0, ( abs(int(9.0)) * min(i1, int(4.0)) )):{:\\nloopBreak% = 0\\nwhile not b1:{:\\nif b0:{:\\nb0 = False\\n:}else:{:\\nin1 = min(in0, abs(divInt(max(i1, int(4.0)),divInt(divInt(in1,int(0.0)),min(res0, in0)))))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0], "other_info": {}, "test_fitness": 499, "mapping_values": [1, 13, 13, 7, 6, 13, 13, 6, 5, 1, 13, 6, 7, 1, 5, 27, 4, 61, 12, 13, 6, 8]}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [1, 1], [1], [0], [], [], [], [0], [], [1], [0], [], [0, 3, 2], [1, 1], [0, 3, 1], [], [2], [0, 1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += in0\\nloopBreak% = 0\\nwhile True:{:\\ni2 -= abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 3, 2, 3, 0, 1, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1], [7, 4, 6, 3, 9], [2], [0], [], [1], [0], [], [], [], [3, 2, 2, 0, 5], [], [2, 3, 2, 0, 2, 1, 0, 1, 3, 0, 2, 3, 2, 1, 2, 0, 0, 3, 3, 1, 1], [1, 1, 1, 1, 0, 0], [0, 2, 2, 1, 2], [0, 2], [0, 0, 1, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = divInt(min(divInt(in0,mod(int(7.0),i2)), int(4.0)),abs(i2)) == mod(abs(( int(6.0) + ( i0 * in2 ) )),max(abs(int(3.0)), int(9.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 21, 6, 5, 2, 4]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 2, 0, 1, 2, 2, 2, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 3, 8, 7, 5, 8, 3, 0, 7, 2, 6, 3, 3, 1, 7, 9, 4, 2, 5, 3, 7, 2, 6, 1, 7, 5, 9, 4, 7, 8, 1, 9, 7, 7, 9, 2, 9, 5, 9, 1, 3, 4], [1, 3, 0, 2, 0, 4], [2, 1, 1, 2], [], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [2, 0, 2, 1], [0], [1], [5, 4, 5, 2, 3, 5, 0, 6, 0, 0, 6, 2, 0, 4, 4, 4, 3, 2, 0, 1, 4, 5, 2, 5, 4, 0, 0, 6, 1, 0, 0, 0, 6, 1, 2, 6, 2, 0, 1, 2, 5, 4, 5, 6, 1], [1], [2, 1, 3, 3, 2, 1, 2, 0, 3, 2, 1, 0, 3, 2, 3, 0, 3, 3, 0, 2, 3, 1, 3, 3, 2, 2, 2, 0, 1, 3, 3, 1, 2, 2, 3, 0, 2, 3, 2, 1, 2, 0, 2, 2, 1, 0, 1, 0, 2, 3, 3, 2, 2, 1, 3, 2, 2, 3, 0, 0, 1, 3, 3, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 1, 2, 3, 1, 2, 3, 2, 1, 0, 3, 3, 0, 3, 1, 3, 0, 1, 2, 1, 2, 1, 1, 0, 2, 1, 2, 3, 2, 0, 2, 3, 1, 2, 0, 0, 2, 3, 2, 0, 0, 1, 3, 0, 2, 1, 3, 3, 0, 2, 3, 2, 1, 3, 1, 3, 1, 3, 3, 1, 0, 1, 1, 3, 3, 1, 3, 3, 1, 0, 0, 0, 1, 2, 3, 0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 3, 2, 1, 1, 0, 2, 0, 0, 0, 0, 1, 3, 3, 1, 3, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 1, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 2, 1, 1, 1, 1, 0, 1, 2, 1, 0, 2, 0, 0, 1, 0, 0, 1, 2, 2, 0], [0, 2, 2, 2, 1, 1, 1, 0, 2, 0, 0, 1, 1, 2, 2, 0, 1, 1, 2, 0], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not b2:{:\\nloopBreak% = 0\\nwhile mod(int(5.0),min(abs(mod(int(0.0),( in2 + max(mod(int(3.0),in1), abs(divInt(abs(in2),max(min(i2, ( min(int(8.0), max(min(( ( ( in0 * int(7.0) ) * min(min(int(5.0), mod(( min(in2, ( max(divInt(int(8.0),mod(i0,mod(( int(3.0) * res0 ),int(0.0)))), i0) - mod(min(abs(mod(( int(7.0) - min(mod(divInt(abs(i0),res0),int(2.0)), min(max(i2, i0), ( in1 - int(6.0) ))) ),in1)), int(3.0)),in1) )) + in0 ),i2)), int(3.0)) ) * ( abs(int(1.0)) + ( min(divInt(int(7.0),i0), abs(max(i1, min(int(9.0), abs(in1))))) + int(4.0) ) ) ), mod(int(2.0),mod(int(5.0),int(3.0)))), in2)) - ( int(7.0) - ( abs(( i2 * ( max(int(2.0), ( in2 * in1 )) + mod(max(( i0 - i0 ), int(6.0)),max(res0, mod(int(1.0),max(min(i1, mod(max(divInt(int(7.0),abs(int(5.0))), max(int(9.0), min(abs(int(4.0)), i0))),int(7.0))), int(8.0))))) ) )) - min(min(int(1.0), max(min(int(9.0), i0), i0)), res0) ) ) )), int(7.0))))) ))), divInt(min(i1, int(7.0)),int(9.0)))) \\g int(2.0):{:\\nb1 = not i2 \\ge res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = True\\nif i2 \\l int(9.0):{:\\nloopBreak% = 0\\nwhile ( int(5.0) * max(mod(int(9.0),int(1.0)), i0) ) == mod(i1,i2):{:\\nloopBreak% = 0\\nwhile in2 \\l in1:{:\\nb2 = int(3.0) \\le abs(abs(int(4.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 += min(res0, i1)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 43, 43, 6, 4, 0, 10, 6, 4, 1, 1, 45, 1, 174, 41, 46, 20, 22]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1], [0, 2, 0, 1, 0, 0], [0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 8, 4, 7, 3, 5, 4, 6, 3, 2, 6, 8, 5, 3, 5], [2, 4, 5, 3, 5], [0, 0, 0, 2], [1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [3, 3, 2, 1, 1], [1, 0], [0], [2, 6, 2, 0, 3, 1, 6, 5, 5, 5, 0, 2, 0, 2, 3, 2, 3, 1, 3, 2, 5], [0], [0, 2, 1, 3, 0, 1, 0, 1, 2, 1, 3, 2, 0, 3, 3, 1, 2, 1, 0, 3, 0, 0, 1, 3, 0, 3, 1, 2, 1, 3, 2, 0, 0, 2, 0, 2, 2, 1, 2, 3, 2, 1, 1, 2, 1, 0, 3, 0, 2, 3, 2, 2, 1, 2, 2, 3, 0, 0, 0, 0, 1, 0, 2, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 2], [2, 2, 1, 0, 1, 1, 1, 2, 2, 1, 0, 2], [0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = res0\\nif ( int(3.0) * max(i2, int(2.0)) ) == i0:{:\\nb0 = ( ( not False or int(8.0) \\le ( int(4.0) * abs(divInt(in0,abs(max(int(7.0), mod(int(3.0),i1))))) ) ) and max(res0, in2) != int(5.0) )\\nb0 = True\\nb0 = max(in2, min(int(4.0), ( int(6.0) - max(( in2 + i0 ), divInt(i2,divInt(( int(3.0) - ( min(divInt(int(2.0),int(6.0)), ( int(8.0) - i0 )) - abs(i2) ) ),( abs(mod(( int(5.0) * ( ( abs(in0) * i2 ) - in0 ) ),i1)) + int(3.0) )))) ))) \\ge in0\\nb2 = ( int(5.0) * i2 ) != in2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 16, 16, 5, 4, 2, 10, 5, 5, 2, 1, 21, 1, 66, 18, 12, 12, 6]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 2, 2, 4, 4, 0, 4, 1, 5, 1, 4, 7, 3, 4, 5], [2], [0, 2, 1], [], [0, 1], [0], [0], [], [], [4, 3, 4, 6, 6, 6, 5, 2, 3, 6, 4, 6, 3, 6, 4, 2, 1], [0], [3, 2, 3, 3, 0, 2, 3, 2, 2, 3, 3, 3, 0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 3, 3, 3, 2, 1, 0, 3, 1, 2, 1, 0, 1, 0, 0, 2, 1, 1, 1, 1, 3, 3, 2, 2, 2, 3, 3, 1, 2, 1, 0, 1, 2, 3, 2, 0, 0, 1, 0, 0, 3, 0, 3, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 2, 2, 2, 1, 1, 0, 1, 1, 2, 0, 2, 2, 0, 0, 0, 1, 2], [0, 2, 1, 0, 2, 0], [0, 1, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\nin1 = max(divInt(max(max(in0, mod(max(mod(( abs(abs(abs(in1))) + max(max(divInt(( res0 * int(1.0) ),res0), res0), min(max(max(abs(( int(6.0) - in2 )), min(int(2.0), ( int(2.0) + i2 ))), int(4.0)), in0)) ),res0), mod(int(4.0),int(0.0))),int(4.0))), int(1.0)),abs(abs(( divInt(divInt(min(min(int(5.0), divInt(int(1.0),in1)), int(4.0)),( min(mod(res0,in0), int(7.0)) * res0 )),in1) + max(i2, abs(int(3.0))) )))), i1)\\nb1 = int(4.0) == int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 16, 16, 1, 3, 0, 2, 1, 1, 0, 0, 17, 1, 68, 15, 21, 6, 9]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1, 1], [6, 8, 0, 9], [4], [2], [], [1], [0], [], [], [], [], [], [1, 2, 1, 1], [0], [], [0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(68.0) \\le ( int(0.0) + int(9.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 1], [1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 2, 1, 4, 8, 4, 7, 4, 7, 6, 9, 0, 4, 5, 1, 6, 3, 8, 2, 0, 7, 0, 3, 9, 5, 4], [2, 0, 0, 1, 3, 3], [0, 1, 1, 2, 1, 0, 2], [1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [2, 2, 3, 0, 0, 0], [], [0, 1, 0], [0, 1, 1, 0, 0, 1, 5, 6, 3, 1, 4, 5, 4, 3, 5, 6, 5, 6, 2, 5, 2, 3, 2, 5, 5, 6, 6, 6, 1, 2, 4, 0, 0, 0, 3, 3, 5, 1, 5, 4, 3], [1, 1, 1, 1, 0], [2, 1, 1, 0, 1, 0, 2, 3, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 3, 1, 2, 1, 3, 0, 2, 1, 0, 3, 3, 1, 2, 2, 0, 3, 1, 3, 1, 0, 3, 2, 0, 2, 2, 3, 0, 2, 3, 3, 3, 3, 3, 2, 1, 0, 1, 3, 0, 0, 3, 3, 0, 0, 1, 0, 0, 1, 3, 2, 1, 3, 2, 1, 0, 1, 3, 3, 3, 0, 0, 1, 2, 0, 2, 0, 0, 2, 0, 2, 0, 1, 3, 3, 3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 2, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 1, 2, 2, 0, 0, 2, 1, 2, 0, 1, 2, 2, 2, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 2, 2, 2, 0, 2, 2, 2, 0, 1], [1, 1, 2, 1, 0, 1, 1, 0, 1, 1, 2, 0, 1, 0, 0, 2], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= divInt(int(3.0),int(2.0))\\nloopBreak% = 0\\nwhile i1 == int(1.0):{:\\nb0 = not i1 \\l ( max(int(4.0), ( int(8.0) - mod(int(4.0),( i0 * i0 )) )) - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in2 \\l min(int(7.0), divInt(int(4.0),max(res0, divInt(int(7.0),in0)))):{:\\nif not ( b1 or b1 ):{:\\nb2 = abs(abs(int(6.0))) \\g mod(mod(i1,min(int(9.0), min(int(0.0), in1))),abs(( in2 + ( mod(max(in1, ( abs(min(max(abs(abs(( int(4.0) - in0 ))), int(5.0)), abs(in2))) - res0 )),max(min(in2, res0), int(1.0))) + i2 ) )))\\n:}else:{:\\nin2 -= i2\\n:}\\n:}\\nif int(6.0) \\ge max(divInt(int(3.0),min(( int(8.0) - in0 ), int(2.0))), min(min(min(i2, in2), int(0.0)), ( in2 * mod(res0,res0) ))):{:\\nb1 = ( res0 + divInt(i1,int(7.0)) ) \\ge abs(max(max(int(0.0), mod(int(3.0),( abs(divInt(abs(abs(min(abs(abs(abs(min(i2, in1)))), i0))),max(i0, ( int(9.0) - i0 )))) + in0 ))), in0))\\n:}\\nb0 = b2\\nin2 += i1\\nin2 *= in1\\nin0 = int(54.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 4, 9, 26, 26, 6, 7, 1, 12, 6, 6, 0, 3, 41, 5, 119, 24, 34, 16, 12]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 4, 1, 6, 1, 4, 8], [0], [0], [], [1], [0], [], [], [], [2, 2, 3], [0], [3, 1, 1, 3, 2, 2, 0, 2, 1, 1, 2, 3, 1, 1, 1, 1, 0], [0, 0, 0, 1], [1, 1, 1], [2, 1, 1], [1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(int(4.0), int(2.0)) \\l max(( ( i2 * ( int(4.0) - int(1.0) ) ) - mod(max(int(6.0), int(1.0)),int(4.0)) ), int(8.0))\\ni2 = in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 8, 8, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 17, 4, 3, 3, 1]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 0, 2, 0], [0, 0, 1], [1, 0], [1, 1, 1], [6, 4, 0], [2], [0, 0], [], [0, 1, 0, 0, 0], [0], [1, 0, 2, 1], [0, 0], [0, 0], [0, 5, 4, 4, 3, 1, 1], [1], [2, 3, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 2, 1, 1, 0, 1], [1, 0, 1, 1, 1], [2, 0, 2], [0, 2], [0, 1, 1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nif divInt(abs(i0),( min(in2, in1) + abs(mod(in1,in0)) )) == mod(divInt(int(6.0),int(4.0)),i1):{:\\ni1 *= int(0.0)\\n:}\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 3, 3, 1, 2, 0, 5, 1, 4, 2, 2, 7, 1, 17, 5, 3, 2, 4]}][{"genotype": [[0], [1], [1], [], [0], [0, 1, 1], [8, 8, 4], [5], [1], [], [1], [0], [], [], [], [6, 5, 4], [], [1, 2, 3, 0, 0, 3, 2, 1, 0], [0, 0], [0, 2], [2, 2], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(88.0) != ( min(res0, in2) * abs(( int(4.0) * in1 )) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 9, 2, 2, 2, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [], [], [], [], [], [0], [], [1], [1], [], [3, 5], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nin0 *= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1], [9, 3, 6], [5], [0], [], [1], [0], [], [], [], [4, 0, 5, 2], [0], [2, 2, 0, 1, 2, 0, 0, 1, 1], [0, 1, 1], [], [1], [0, 0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( divInt(in1,int(9.0)) - divInt(i0,in2) ) != int(3.0)\\ni2 = int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 9, 3, 0, 1, 2]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [2, 1, 0, 1, 2, 1], [1, 0], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 6, 9, 4, 9, 3, 8, 1, 8, 5, 0, 8, 3, 5, 1, 9, 9, 6, 1, 5, 1, 3, 0, 9, 0, 8, 9, 4, 0, 0, 3, 9, 5, 3, 7, 0, 6, 9, 8, 9, 4, 4, 6, 1, 4, 9, 3, 1, 8, 4, 5, 5], [3, 0, 4, 1], [2, 1], [], [1, 0, 1, 1, 1], [0, 0, 0, 0], [2], [], [0], [4, 5, 4, 2, 2, 3, 2, 3, 1, 6, 1, 6, 0, 4, 3, 3, 0, 4, 1, 6, 4, 6, 3, 3, 3, 5, 2, 1, 2, 5, 3, 1, 0, 4, 2, 3, 6, 3, 1, 5, 0, 6, 4, 1, 5, 5, 2, 6, 0, 4, 2, 1, 2, 2, 3, 6, 5, 4, 2, 0, 5, 3, 1, 6, 1, 3, 2, 2, 2, 1], [1, 0], [0, 3, 2, 3, 3, 2, 2, 3, 2, 0, 2, 3, 2, 1, 2, 3, 0, 1, 0, 3, 2, 1, 2, 2, 3, 0, 2, 1, 3, 1, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 3, 3, 3, 2, 3, 1, 1, 2, 3, 2, 0, 0, 1, 1, 0, 0, 2, 3, 3, 1, 0, 3, 2, 2, 2, 2, 1, 2, 0, 0, 1, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 3, 2, 2, 0, 1, 1, 2, 2, 1, 2, 3, 3, 1, 1, 3, 3, 3, 1, 2, 2, 2, 0, 0, 3, 2, 1, 0, 1, 2, 0, 1, 3, 0, 0, 0, 3, 3, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 2, 0, 3, 1, 3, 3, 0, 3, 1, 0, 1, 2, 3, 2, 2, 0, 3, 1, 3, 0, 3, 2, 3, 3, 3, 3, 0, 3, 3, 2, 0, 0, 2, 0, 3, 0, 1, 1, 0, 0, 0, 1, 2, 0, 3, 0, 0, 1, 2, 1, 0, 1, 0, 3, 2, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 0, 2, 2, 0, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3, 0, 3, 2, 0, 2, 0, 0, 2, 3, 0, 0, 3, 2, 0, 1, 3, 0, 1, 3, 1, 1, 2, 3, 3, 0, 3, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 2, 1, 1, 1, 1, 0, 1, 2, 2, 1, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 2, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 2, 2, 0, 1, 2, 2, 0, 1, 1, 0, 0, 1, 2, 2, 2, 2], [0, 2, 2, 0, 1, 2, 2, 1, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 1, 0, 0, 2, 2, 2, 2, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 \\ge min(( abs(abs(( ( max(mod(in2,divInt(max(mod(int(7.0),( max(in1, int(3.0)) + i2 )), max(( int(6.0) * ( ( min(i2, mod(int(9.0),max(int(4.0), int(9.0)))) * mod(( ( in0 + i2 ) - in0 ),divInt(( mod(( i1 * divInt(abs(abs(max(( abs(int(3.0)) * int(8.0) ), divInt(min(divInt(res0,i1), int(1.0)),int(8.0))))),res0) ),i0) - ( abs(max(int(5.0), in1)) * max(mod(divInt(( ( int(0.0) + ( in0 - in0 ) ) + int(8.0) ),i0),divInt(in1,i1)), divInt(( int(3.0) * divInt(int(5.0),( min(( divInt(res0,int(1.0)) * int(9.0) ), mod(mod(int(9.0),mod(max(min(int(6.0), int(1.0)), max(abs(abs(int(5.0))), divInt(( ( in1 - res0 ) * max(( int(1.0) + in0 ), int(3.0)) ),( in0 - int(0.0) )))),min(in0, in2))),i2)) + max(max(int(9.0), i1), i2) )) ),in2)) ) ),( in0 * i1 ))) ) - i0 ) ), in1)),i2)), divInt(( min(in0, int(0.0)) - int(8.0) ),min(max(res0, ( mod(divInt(in0,max(int(9.0), max(min(i1, abs(int(4.0))), in2))),int(0.0)) * mod(min(( ( i0 - abs(int(0.0)) ) + min(res0, max(mod(max(min(min(max(in1, abs(abs(( i1 + in2 )))), ( in2 * min(i2, int(3.0)) )), int(9.0)), res0),i0), in1)) ), int(5.0)),divInt(i2,max(i1, i2))) )), int(3.0)))) * ( int(7.0) * i2 ) ) * int(0.0) ))) + in0 ), abs(( mod(int(6.0),( int(9.0) + int(8.0) )) - ( res0 + in2 ) ))):{:\\nin1 -= mod(int(9.0),i2)\\ni0 = divInt(mod(in2,int(4.0)),abs(( int(4.0) + int(6.0) )))\\nb2 = not int(1.0) \\l int(4.0)\\nif divInt(min(max(in0, max(( i1 - mod(res0,i1) ), ( min(in0, i2) + min(mod(i2,int(9.0)), max(i2, int(3.0))) ))), abs(int(1.0))),int(8.0)) \\le mod(abs(abs(i1)),abs(int(4.0))):{:\\nb1 = int(5.0) \\g int(5.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 53, 53, 4, 2, 0, 5, 4, 1, 0, 1, 70, 2, 250, 71, 58, 38, 34]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 2, 1, 1, 0], [1], [0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 8, 4, 9, 4, 0, 3, 0, 3, 5, 7, 9, 0, 2, 9, 1, 0, 2, 5, 4, 3, 7], [3, 2, 0, 0], [0, 0, 2, 1, 0, 1], [1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0], [3, 1, 2, 3, 0, 2, 1, 1], [0, 0, 0], [], [0, 5, 4, 5, 2, 1, 6, 5, 1, 2, 5, 4, 6, 4, 5, 2, 5, 0, 2, 1, 1, 4, 2, 1, 0, 5, 4], [0], [0, 2, 2, 2, 1, 1, 0, 2, 3, 2, 1, 0, 1, 0, 2, 1, 1, 1, 2, 2, 0, 0, 3, 0, 2, 2, 2, 2, 3, 2, 3, 3, 3, 0, 0, 3, 3, 1, 3, 3, 0, 1, 0, 3, 0, 0, 1, 0, 1, 1, 2, 2, 2, 1, 2, 1, 0, 3, 0, 0, 0, 2, 1, 2, 3, 2, 0, 0, 2, 3, 3, 2, 0, 1, 2, 1, 1, 3, 2, 1, 0, 1, 0, 2, 3, 3, 0, 3, 1, 0, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 1, 1, 2, 1, 0, 1, 0, 1, 2, 2, 1, 1, 1, 2, 0, 1, 0, 0], [1, 2, 2, 0, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i0 \\ge divInt(( ( int(2.0) - int(4.0) ) * in2 ),divInt(abs(( int(8.0) * in1 )),int(4.0)))\\nb0 = ( in2 == ( int(9.0) + int(4.0) ) or True )\\nb2 = not int(0.0) \\l ( mod(i2,i1) + max(res0, divInt(mod(mod(( max(( abs(max(min(in2, i1), max(min(int(3.0), max(abs(i2), int(0.0))), in2))) * abs(in1) ), res0) * int(3.0) ),in1),int(5.0)),int(7.0))) )\\nloopBreak% = 0\\nwhile ( b1 or not divInt(( mod(int(9.0),mod(int(0.0),in2)) - max(i2, in2) ),i0) \\l mod(int(2.0),mod(max(divInt(i2,i1), mod(max(abs(divInt(i1,int(9.0))), mod(int(1.0),int(0.0))),min(mod(int(2.0),in1), int(5.0)))),i2)) ):{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( max(min(i0, min(int(4.0), in2)), divInt(int(3.0),in1)) + int(7.0) )\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 23, 23, 4, 6, 2, 12, 4, 8, 3, 0, 27, 1, 94, 26, 19, 9, 17]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 1, 2, 2, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 8, 6, 1, 8, 2, 6, 5, 2, 0, 6, 4, 7], [5, 1, 2, 0, 4, 4, 5, 5], [2, 1, 1, 2, 1, 1, 1, 0], [0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 0, 2, 3, 0, 2, 1, 2, 1, 2], [1, 0], [0, 1, 0, 1, 1], [1, 5, 0, 1, 3, 2, 6, 5, 6, 6, 4, 3, 0, 0], [1, 0, 0], [1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 2, 1, 2, 1, 0], [0, 1, 0, 0], [0], [0, 0, 0, 0], [0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(0.0) != int(8.0):{:\\nb2 = b1\\nb1 = int(6.0) \\g int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(8.0) == ( int(2.0) + int(6.0) ):{:\\nif i1 \\l int(5.0):{:\\nin2 += i0\\n:}else:{:\\nb2 = ( not b1 and not ( divInt(i1,in0) \\le int(2.0) and b1 ) )\\n:}\\n:}\\nif not False:{:\\nif not i2 \\le min(res0, in2):{:\\nb1 = True\\n:}else:{:\\nif res0 != int(0.0):{:\\nb0 = not int(6.0) != res0\\n:}else:{:\\nin1 = in0\\n:}\\n:}\\n:}\\ni0 = ( int(4.0) + ( int(7.0) + i0 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 13, 13, 8, 8, 2, 20, 8, 12, 2, 5, 14, 3, 29, 4, 1, 4, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 2, 0, 1, 2, 0, 0, 1, 0, 0], [0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 8, 6, 7, 3, 0, 6, 6, 2, 3, 9, 0, 7, 3, 5, 8, 5, 8, 4, 8, 2, 8, 3, 0, 4, 8, 5, 0, 2, 7, 1, 5], [2, 1, 5, 3, 1, 2, 4], [0, 0, 2, 2], [], [1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [2], [], [1], [3, 6, 4, 6, 6, 5, 3, 3, 1, 5, 1, 2, 1, 1, 3, 2, 5, 0, 4, 5, 0, 3, 2, 1, 2, 0, 5, 5, 3, 1, 0, 6, 4, 1, 1, 2, 4, 1, 5], [1, 1, 0, 0], [2, 3, 3, 2, 2, 0, 2, 1, 3, 2, 1, 3, 3, 3, 0, 0, 3, 3, 3, 0, 2, 2, 0, 1, 2, 0, 1, 3, 0, 1, 2, 1, 0, 2, 3, 3, 2, 0, 3, 2, 0, 0, 0, 1, 3, 3, 1, 2, 3, 1, 3, 0, 0, 2, 3, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 2, 2, 1, 0, 0, 0, 2, 1, 1, 0, 1, 3, 1, 1, 0, 2, 1, 3, 3, 3, 3, 1, 0, 1, 0, 0, 0, 2, 3, 3, 2, 3, 0, 1, 2, 2, 0, 3, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2], [0, 0, 0, 2, 0, 1, 2, 1, 0, 1, 0, 1, 1, 2], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = divInt(max(max(divInt(( in0 + mod(int(8.0),max(( int(3.0) + min(abs(max(res0, in1)), max(min(min(res0, mod(( res0 + int(8.0) ),divInt(in2,int(6.0)))), min(in0, int(7.0))), ( int(3.0) * in0 ))) ), ( min(max(mod(i1,min(divInt(in2,i1), i2)), int(0.0)), max(max(int(6.0), ( max(int(6.0), min(i1, i1)) + ( min(in0, i2) - ( int(2.0) * in2 ) ) )), i0)) - int(3.0) ))) ),int(9.0)), int(0.0)), in1),divInt(divInt(int(7.0),in2),i0)) == in0\\nif mod(int(3.0),int(5.0)) \\g i2:{:\\nloopBreak% = 0\\nwhile int(8.0) != min(int(5.0), int(8.0)):{:\\nb0 = i1 \\ge ( int(4.0) + min(min(abs(abs(int(8.0))), i2), int(2.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 -= in2\\n:}\\nloopBreak% = 0\\nwhile in2 \\g in0:{:\\ni1 += ( min(min(( min(i0, int(8.0)) - ( divInt(res0,abs(int(3.0))) - in1 ) ), divInt(i1,int(0.0))), int(4.0)) * int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not mod(int(5.0),i1) == i2\\nin1 = i1\\nb2 = int(0.0) \\le int(2.0)\\nin2 = int(715.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 3, 8, 33, 33, 7, 4, 0, 8, 7, 1, 0, 1, 39, 4, 118, 25, 27, 14, 13]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 0, 2, 0, 2, 2, 1, 0, 1, 1], [0, 0, 0, 1], [1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 8, 1, 7, 7, 3, 2, 7, 6, 4, 8, 4], [0, 0, 4, 0], [0, 1, 0], [], [0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0], [1, 0, 2], [1], [1, 1, 0], [4, 4, 5, 2, 0, 6, 5, 1, 2, 6, 1, 0, 0, 4, 3, 3, 6, 5, 1, 6, 3, 3, 5, 4], [0, 1, 1, 1], [0, 3, 1, 2, 3, 2, 1, 2, 1, 3, 0, 0, 0, 0, 3, 0, 3, 1, 3, 2, 0, 2, 2, 3, 0, 1, 2, 1, 2, 0, 2, 3, 1, 3, 0, 0, 2, 3, 0, 0, 0, 3, 3, 1, 3, 0, 3, 1, 0, 3, 2, 1, 0, 0, 1, 0, 2, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 2, 0, 2, 2, 1, 0, 0, 1, 1, 0, 1, 2, 1], [1, 1, 0, 0, 2, 1, 2, 2, 2, 2], [0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nin1 = in1\\n:}else:{:\\nif abs(int(8.0)) \\l ( abs(( int(1.0) - ( int(8.0) - abs(in2) ) )) + i2 ):{:\\ni0 += res0\\n:}else:{:\\nif in2 \\l min(i1, abs(int(1.0))):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni2 *= abs(( res0 - divInt(mod(max(i1, int(7.0)),( int(7.0) * ( i0 * ( min(int(3.0), min(i0, in1)) * divInt(max(in0, in0),res0) ) ) )),max(min(int(2.0), max(in2, abs(int(7.0)))), i1)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nb1 = max(divInt(int(6.0),res0), in0) \\le int(4.0)\\nb0 = not in0 \\l mod(int(8.0),int(4.0))\\n:}\\nin2 *= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 13, 13, 4, 3, 0, 7, 4, 3, 1, 3, 24, 4, 60, 12, 15, 10, 5]}, {"genotype": [[0], [1], [0], [], [0], [1, 0, 1], [6, 0, 1], [5], [2], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(6.0) != int(01.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1], [2, 1, 0, 2, 1, 1, 1], [1, 1], [0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 1, 1, 4, 1, 9, 7, 0, 6, 0, 9, 7, 4, 0, 5, 1, 5, 7, 4, 4, 3, 2, 6, 9, 0, 1, 6, 6, 6, 2, 0, 1, 0, 4, 7], [5, 1, 2, 2, 4], [0, 2, 0, 1, 0], [1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [3, 3, 0, 1, 1], [0, 0], [], [3, 5, 4, 4, 5, 4, 0, 1, 0, 0, 3, 4, 5, 2, 6, 6, 5, 3, 4, 2, 4, 6, 0, 5], [1], [0, 0, 3, 1, 1, 2, 2, 1, 1, 3, 3, 0, 1, 2, 3, 0, 0, 1, 1, 1, 0, 3, 1, 3, 3, 3, 3, 2, 0, 2, 3, 3, 1, 0, 2, 1, 1, 2, 3, 1, 3, 3, 2, 0, 2, 2, 0, 3, 2, 2, 0, 1, 0, 2, 2, 1, 1, 2, 1, 0, 2, 2, 1, 3, 2, 3, 2, 1, 1, 1, 3, 2, 1, 1, 2, 2, 1, 0, 1, 3, 1, 0, 2, 1, 1, 2, 3, 3, 0, 1, 2, 0, 3, 0, 3, 1, 2, 3, 0, 1, 1, 2, 0, 1, 3, 3, 1, 2, 2, 1, 0, 3, 3, 1, 0, 3, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 2, 2, 2, 1, 0, 1, 2, 0, 2], [0, 0, 1, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 2, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( in0 != in2 or max(int(5.0), int(5.0)) \\g mod(( int(1.0) + int(1.0) ),min(max(in1, int(4.0)), mod(min(in1, in2),int(1.0)))) ):{:\\nb0 = int(9.0) == int(7.0)\\nb2 = ( b0 and in1 == max(int(0.0), min(min(abs(min(( i0 + mod(max(max(int(6.0), i1), divInt(int(0.0),int(9.0))),divInt(min(int(7.0), abs(max(( i0 - ( ( i0 * min(( ( in0 + int(4.0) ) * in1 ), ( ( int(0.0) + int(5.0) ) * ( int(1.0) * in2 ) )) ) * divInt(( int(5.0) + abs(divInt(max(( int(7.0) * int(4.0) ), int(4.0)),abs(mod(int(3.0),int(2.0))))) ),divInt(( int(6.0) * i2 ),int(9.0))) ) ), max(int(0.0), res0)))),divInt(int(1.0),int(6.0)))) ), ( abs(abs(res0)) + int(6.0) ))), ( in2 * abs(in0) )), abs(int(6.0)))) )\\nloopBreak% = 0\\nwhile True:{:\\nb1 = ( max(in1, int(2.0)) - int(0.0) ) \\le divInt(i2,int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 -= min(max(int(0.0), ( divInt(int(4.0),res0) - abs(min(int(7.0), i0)) )), abs(in2))\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 36, 36, 5, 5, 2, 10, 5, 5, 2, 0, 24, 1, 117, 29, 29, 18, 12]}][{"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [5, 1, 5, 5], [0, 0], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i1\\nin2 = in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 1, 2, 2, 1], [1, 1, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 4, 1, 1, 0, 7, 6, 6, 0, 9, 3, 7, 5, 2, 8], [2, 1, 0], [2, 1], [1], [0, 1, 0, 1, 0, 1], [0, 0, 0], [3, 1, 0], [0], [0], [0, 6, 2, 4, 5, 0, 0, 5, 0, 1, 3, 0, 5, 4, 0, 6, 6, 1, 2, 3], [0], [2, 1, 3, 3, 3, 0, 3, 0, 1, 2, 0, 3, 2, 1, 3, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 1, 1, 3, 3, 0, 0, 0, 3, 3, 0, 2, 2, 2, 0, 1, 0, 1, 3, 3, 1, 0, 3, 2, 3, 0, 0, 2, 0, 2, 3, 3, 1, 3, 1, 1, 0, 1, 3, 2, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [2, 0, 1, 1, 1, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 1, 2], [0, 2, 0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( divInt(int(5.0),abs(min(max(i0, max(res0, int(7.0))), ( i2 + max(( int(4.0) * min(( mod(in1,int(1.0)) + in2 ), int(1.0)) ), mod(max(i0, i0),( int(0.0) - int(7.0) ))) )))) == int(6.0) or True ):{:\\nb2 = abs(max(in2, i0)) \\g i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nif min(abs(in0), divInt(( mod(i0,int(6.0)) + in2 ),int(0.0))) \\l abs(min(int(9.0), in1)):{:\\ni0 = min(( min(res0, res0) + ( i1 - ( min(min(int(3.0), max(int(7.0), int(5.0))), i2) + int(2.0) ) ) ), abs(( int(8.0) + in0 )))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 16, 16, 3, 2, 1, 6, 3, 3, 1, 1, 20, 1, 68, 14, 19, 9, 5]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 3, 0, 7, 0, 1, 4, 4, 8, 2, 0, 6], [3], [0], [0], [0, 1, 0], [0], [3, 1], [0], [], [4, 5, 5, 6, 4, 6, 0, 6, 4, 5, 1, 4, 0], [1, 0], [0, 0, 2, 2, 3, 2, 2, 3, 1, 3, 2, 0, 2, 1, 2, 0, 0, 0, 3, 3, 2, 0, 1, 1, 2, 1, 2, 2, 1, 2, 3, 0, 1, 2, 2, 1, 1, 3, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 0, 2, 1, 1, 1], [1, 1, 0, 2, 0, 2, 2, 0], [1, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= in2\\nb0 = ( in2 \\ge ( ( max(mod(( max(int(9.0), min(( res0 - ( int(2.0) + mod(in1,res0) ) ), i0)) * abs(max(mod(res0,int(3.0)), int(0.0))) ),divInt(int(7.0),mod(( int(0.0) + mod(max(in1, int(1.0)),divInt(( int(4.0) * int(4.0) ),max(int(8.0), in2))) ),i1))), in1) * int(2.0) ) + int(0.0) ) and True )\\ni0 = int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 13, 13, 1, 1, 1, 3, 1, 2, 1, 0, 13, 2, 45, 14, 7, 8, 7]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 3, 1, 7, 3, 8, 2, 7, 4, 1, 0, 6, 3, 6, 6, 8, 1, 8, 8, 7, 0, 8, 7, 2, 9, 5, 4, 5, 6, 8, 5, 8, 0, 5, 9, 8, 6, 9, 1, 5, 9, 3, 4, 5, 2, 3, 0, 3, 2, 2, 2, 7, 7, 8, 6, 1, 8, 4, 1, 4, 9, 7, 2, 3, 6, 5, 5, 8, 9, 9, 7, 7, 0, 1, 1, 0, 6, 6, 0], [1], [1], [], [1], [0], [], [], [], [5, 2, 6, 6, 5, 6, 6, 4, 3, 4, 4, 4, 3, 5, 0, 6, 1, 6, 5, 3, 1, 5, 3, 4, 5, 4, 1, 1, 6, 5, 2, 2, 1, 1, 4, 0, 4, 2, 6, 0, 1, 2, 6, 5, 1, 6, 0, 3, 0, 2, 0, 6, 6, 5, 3, 6, 3, 4, 0, 0, 3, 2, 6, 2, 1, 1, 3, 0, 5, 1, 5, 5, 3, 2, 3, 2], [], [1, 2, 1, 2, 2, 3, 1, 3, 3, 3, 2, 3, 0, 0, 3, 0, 2, 2, 1, 2, 0, 2, 2, 3, 3, 1, 3, 3, 2, 3, 2, 3, 2, 0, 3, 2, 2, 2, 2, 0, 1, 3, 1, 2, 0, 1, 3, 2, 3, 0, 3, 1, 3, 1, 1, 2, 0, 2, 2, 2, 3, 0, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 0, 2, 3, 2, 3, 1, 1, 2, 0, 3, 2, 2, 3, 2, 0, 0, 1, 2, 3, 3, 1, 1, 3, 3, 3, 0, 1, 1, 1, 3, 2, 1, 1, 1, 2, 2, 1, 2, 1, 0, 2, 1, 0, 3, 2, 3, 1, 3, 2, 3, 0, 1, 0, 3, 0, 3, 2, 3, 3, 2, 2, 3, 2, 0, 1, 2, 1, 1, 3, 3, 3, 0, 2, 2, 3, 3, 1, 1, 1, 3, 2, 1, 2, 2, 0, 3, 2, 3, 0, 1, 0, 2, 3, 1, 2, 2, 2, 2, 0, 1, 0, 0, 2, 3, 1, 0, 2, 0, 3, 3, 3, 1, 2, 1, 2, 3, 0, 3, 0, 3, 1, 1, 2, 3, 1, 1, 1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 0, 3, 1, 1, 3, 0, 1, 2, 3, 1, 3, 3, 3, 3, 1, 2, 0, 2, 0, 3, 2, 1, 0, 2, 0, 1, 0, 0, 2, 2, 0, 3, 0, 1, 2, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 1, 3, 0, 1, 2, 0, 0, 3, 3, 3, 0, 1, 1, 2, 2, 3, 1, 0, 2, 1, 2, 3, 3, 3, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 1, 0, 3, 1, 2, 2, 3, 2, 0, 2, 1, 1, 3, 0, 3, 1, 0, 2, 3, 2, 1, 1, 3, 0, 2, 2, 2, 3, 1, 3, 0, 1, 1, 1, 0, 2, 0, 2, 3, 3, 0, 3, 2, 3, 0, 2, 0, 0, 0, 3, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1], [2, 0, 0, 2, 0, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 0, 1, 2, 0, 2, 0, 1, 1, 1, 1, 1, 2, 0, 1, 2, 1, 0, 1, 1, 2, 2, 0, 0, 1, 0, 2, 2, 1, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 1, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 1, 2, 1, 0, 0, 1, 2, 0, 0, 1, 2, 1, 2, 2, 0, 0, 1, 1, 1, 2, 0, 2], [0, 2, 1, 0, 0, 1, 1, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0, 0, 2, 2, 0, 2, 0, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 102, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(64.0) \\g ( int(3.0) + ( ( abs(int(1.0)) * min(min(abs(mod(min(in2, i2),max(res0, mod(divInt(int(7.0),divInt(res0,mod(( max(min(int(3.0), abs(max(mod(max(divInt(max(mod(in2,abs(( ( divInt(( res0 - int(8.0) ),max(int(2.0), mod(res0,int(7.0)))) + abs(divInt(max(in1, max(int(4.0), abs(int(1.0)))),int(0.0))) ) + mod(in0,mod(mod(( min(in1, int(6.0)) - ( int(3.0) - max(in1, in1) ) ),int(6.0)),in0)) ))), in2),abs(i0)), mod(min(mod(abs(int(6.0)),int(8.0)), ( res0 * min(( ( max(mod(i1,res0), int(1.0)) * ( max(max(int(8.0), int(8.0)), max(max(abs(in2), int(7.0)), int(0.0))) + int(8.0) ) ) * min(( int(7.0) * int(2.0) ), int(9.0)) ), mod(( int(5.0) - ( int(4.0) + in0 ) ),( int(5.0) * i1 ))) )),max(divInt(abs(int(6.0)),max(( min(in2, int(8.0)) - in0 ), max(in1, max(( abs(abs(( ( min(divInt(in2,int(5.0)), divInt(int(8.0),int(0.0))) * min(max(min(in1, ( ( abs(abs(int(5.0))) - int(9.0) ) * int(8.0) )), max(mod(int(6.0),( ( i1 - min(( abs(i1) + int(9.0) ), res0) ) + ( min(int(1.0), mod(( ( divInt(in2,int(5.0)) * i2 ) * i2 ),( min(int(9.0), i1) + ( i1 * min(max(min(int(3.0), divInt(int(4.0),( max(in1, abs(i0)) + max(int(5.0), int(2.0)) ))), divInt(min(int(3.0), int(0.0)),int(3.0))), max(abs(mod(int(2.0),int(2.0))), int(2.0))) ) ))) * in1 ) )), i2)), int(7.0)) ) - res0 ))) * max(int(7.0), int(8.0)) ), min(i0, int(6.0)))))), divInt(abs(int(1.0)),max(min(abs(abs(int(8.0))), ( i1 * mod(i2,abs(( int(4.0) * res0 ))) )), ( in2 * int(1.0) )))))),i1), res0))), divInt(mod(i0,abs(in0)),int(4.0))) - mod(abs(int(9.0)),i0) ),abs(min(abs(min(abs(( max(int(7.0), abs(i2)) * int(2.0) )), mod(i0,res0))), max(min(min(res0, int(3.0)), int(6.0)), divInt(divInt(max(int(5.0), in2),mod(int(5.0),mod(abs(min(min(mod(in0,res0), in0), mod(in1,i0))),i0))),in0))))))),( divInt(i2,int(8.0)) * res0 ))))), max(int(9.0), ( ( abs(( i2 - divInt(int(9.0),int(7.0)) )) - max(i1, abs(int(7.0))) ) * i1 ))), divInt(abs(( int(0.0) - int(1.0) )),min(in0, mod(( ( min(int(1.0), max(i0, int(0.0))) * int(6.0) ) * int(6.0) ),in2)))) ) + divInt(i1,( max(max(in2, abs(( min(in2, divInt(in0,i2)) - in0 ))), abs(i2)) - int(0.0) )) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 80, 80, 1, 1, 0, 1, 1, 0, 0, 0, 76, 0, 341, 90, 96, 45, 45]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 6, 2, 1, 1, 4, 1, 6, 7, 2, 6, 8, 9, 8, 9], [4], [1], [], [1], [0], [], [], [], [2, 2, 1, 3, 4, 6, 4, 3, 0, 6, 1, 2, 0, 2, 0, 6], [], [3, 2, 3, 3, 2, 1, 1, 0, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 2, 0, 2, 0, 1, 1, 2, 3, 2, 2, 1, 2, 0, 1, 0, 3, 0, 0, 1, 3, 1, 3, 0, 1, 1, 3, 0, 3, 2, 0, 0, 1, 2, 0, 2, 1, 0, 0, 1, 0, 1, 2, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 1, 1, 1, 1], [0, 2, 0, 0, 1, 2], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(divInt(max(min(mod(int(1.0),int(1.0)), i2), min(mod(min(max(mod(int(6.0),( ( min(mod(max(mod(i2,divInt(i1,int(2.0))), int(1.0)),divInt(abs(divInt(( int(1.0) + ( in0 * int(4.0) ) ),in1)),max(res0, in1))), int(1.0)) + max(int(6.0), max(in0, int(7.0))) ) + int(2.0) )), max(i0, max(( res0 - i1 ), int(6.0)))), divInt(i2,divInt(int(8.0),i0))),i2), int(9.0))),i0), int(8.0)) \\le ( int(9.0) * res0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 16, 16, 1, 1, 0, 1, 1, 0, 0, 0, 16, 0, 63, 17, 14, 6, 11]}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 1, 0], [0], [1, 0, 0], [1, 1], [6, 4], [1, 5], [2, 2], [], [1, 1, 0], [0, 0], [1], [1], [0], [4, 6, 2, 3, 1], [1], [0, 0, 2, 0, 1, 1, 0], [1], [], [2], [1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= res0\\nif i2 \\g mod(in0,int(6.0)):{:\\nb2 = int(4.0) != i1\\nb2 = False\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 2, 2, 2, 2, 0, 3, 2, 1, 1, 1, 5, 1, 7, 1, 0, 1, 1]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1], [5], [4], [1], [], [1], [0], [], [], [], [1, 1, 1], [1], [0, 1, 0], [], [], [1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= i1\\nb1 = int(5.0) \\le i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 0], [1, 1, 1, 1], [7, 7, 5, 0], [], [1, 1, 0], [], [0, 0], [], [0, 1], [0], [], [1, 0, 5, 3], [0], [3, 3, 0, 2, 2, 1, 0, 3, 2, 1, 2, 0, 1, 1], [1, 0, 0, 0], [2, 1, 0], [1, 0, 2], [0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = abs(max(i0, divInt(( int(7.0) - in2 ),min(( int(7.0) + ( in0 * int(5.0) ) ), int(0.0)))))\\nb1 = b1\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 4, 4, 0, 3, 0, 2, 0, 2, 1, 0, 4, 1, 14, 4, 3, 3, 1]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0], [0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 0, 0, 4, 4, 4, 0, 3, 3, 4, 2, 3, 4, 8, 4, 0, 2, 0, 7, 4, 2, 6, 5, 0, 1, 0, 2, 5, 0, 3, 5, 2, 5, 7, 5, 9, 6, 1, 8, 6, 9, 3, 8, 4, 4, 6], [0, 1, 2, 1, 1, 1, 2, 0, 4, 2, 5], [2, 0, 1, 1, 2, 1], [0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 2, 2, 1, 2, 3, 2, 3, 1, 2], [1, 1, 1], [1, 1, 0, 0], [4, 0, 3, 5, 2, 5, 4, 6, 2, 6, 3, 1, 5, 5, 1, 5, 1, 5, 4, 2, 3, 6, 5, 6, 3, 2, 3, 3, 2, 6, 1, 5, 3, 3, 2, 2, 0, 0, 5, 0, 5, 1, 5, 2, 5, 2, 0, 4, 2, 0, 2, 4], [1, 0], [3, 1, 3, 0, 0, 2, 0, 0, 2, 2, 3, 3, 1, 2, 2, 1, 1, 2, 1, 3, 0, 3, 1, 0, 3, 0, 2, 1, 0, 0, 1, 3, 0, 1, 0, 3, 2, 1, 2, 2, 3, 1, 3, 1, 2, 0, 2, 1, 0, 0, 1, 1, 3, 2, 1, 1, 0, 3, 0, 0, 3, 0, 2, 0, 0, 3, 2, 3, 0, 3, 3, 3, 1, 3, 3, 0, 1, 0, 2, 3, 2, 2, 1, 1, 1, 2, 1, 1, 0, 0, 3, 2, 0, 1, 1, 0, 1, 2, 0, 1, 1, 3, 3, 2, 1, 3, 3, 1, 2, 3, 0, 2, 2, 2, 1, 0, 3, 3, 3, 0, 3, 0, 3, 1, 0, 1, 0, 1, 3, 2, 2, 3, 3, 2, 0, 2, 2, 1, 3, 3, 3, 2, 1, 0, 0, 2, 1, 3, 1, 2, 2, 3, 1, 0, 3, 2, 0, 2, 0, 0, 1, 0, 2, 1, 2, 2, 0, 2, 0, 1, 2, 1, 2, 3, 3, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 2, 0, 2, 2, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 1, 2, 2, 1, 1, 0, 2, 1, 2, 0, 0, 1, 0, 0, 2, 1, 2, 2, 2, 1, 2, 0, 1, 0, 2, 1, 0, 0], [2, 1, 0, 0, 2, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]], "fitness": 100, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(int(8.0), abs(in1)) \\l i0:{:\\nb2 = False\\nif ( in0 * in2 ) \\g ( divInt(min(abs(int(0.0)), divInt(( int(0.0) - int(4.0) ),mod(int(4.0),abs(i2)))),min(int(4.0), in2)) + min(in1, ( int(0.0) + res0 )) ):{:\\nb0 = b1\\n:}else:{:\\nloopBreak% = 0\\nwhile not not False:{:\\nif not i2 == int(3.0):{:\\nres0 *= max(in0, int(3.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile i1 \\g min(( int(4.0) + ( mod(abs(int(2.0)),min(int(3.0), mod(in2,( int(4.0) + in2 )))) + i1 ) ), int(8.0)):{:\\nb1 = int(4.0) \\g min(mod(int(0.0),int(2.0)), in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile abs(i1) \\g in2:{:\\nb2 = ( not ( min(in1, ( i2 - in0 )) == max(mod(min(res0, max(abs(abs(int(0.0))), max(max(in2, int(7.0)), res0))),divInt(min(mod(( int(4.0) * int(2.0) ),int(6.0)), ( int(5.0) - int(0.0) )),in0)), i2) and abs(divInt(in0,int(1.0))) \\l int(0.0) ) and in0 \\le int(2.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif mod(i2,int(5.0)) == int(0.0):{:\\nres0 = max(abs(mod(int(3.0),min(min(int(5.0), divInt(max(i1, divInt(( divInt(int(2.0),in2) - min(min(abs(in0), max(in0, abs(int(5.0)))), i2) ),int(7.0))),i2)), int(5.0)))), abs(divInt(( abs(max(( i0 - ( divInt(int(9.0),abs(min(max(mod(int(6.0),i0), in2), divInt(int(1.0),min(int(8.0), ( ( abs(int(6.0)) - i0 ) - max(divInt(in2,( i1 + in2 )), int(9.0)) )))))) * i2 ) ), ( int(3.0) - mod(( in2 - ( i2 - int(8.0) ) ),divInt(int(4.0),( min(min(i0, in1), i2) + int(4.0) ))) ))) + int(6.0) ),i0)))\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nb1 = not i2 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 988, "mapping_values": [1, 15, 15, 8, 7, 46, 46, 11, 6, 2, 22, 11, 11, 3, 4, 52, 2, 183, 43, 44, 22, 22]}][{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 2, 1, 1, 2, 1, 1, 2, 0, 2, 1, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 6, 0, 7, 6, 1, 3, 5, 4, 1, 0, 6, 4, 1, 7, 8, 8, 5, 4, 3, 7, 2, 8, 6, 6, 2, 7, 4, 9, 5, 3, 0, 5, 1, 2, 1, 7, 8, 2, 7, 3, 8, 6, 9, 5, 4, 2, 5, 7, 0, 3, 7, 7], [2, 1, 1, 1, 1], [0, 0, 2], [], [1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 2, 1, 2], [0, 1], [1, 0], [2, 4, 6, 5, 0, 6, 1, 1, 3, 1, 3, 5, 2, 5, 2, 0, 1, 5, 3, 3, 0, 6, 6, 0, 2, 0, 6, 4, 1, 6, 2, 4, 5, 0, 3, 5, 5, 4, 5, 0, 2, 5, 0, 2, 0, 5, 6, 5, 5, 6, 3, 4, 1, 2, 5, 1, 2, 1, 1, 0, 5, 4, 0, 4, 3, 3, 5, 6, 0, 2], [1, 1, 0, 1, 0, 1], [1, 0, 2, 0, 3, 3, 3, 0, 0, 3, 3, 1, 1, 2, 1, 3, 2, 2, 0, 0, 0, 3, 1, 2, 1, 2, 1, 0, 2, 0, 2, 3, 0, 2, 3, 3, 1, 3, 2, 2, 2, 0, 0, 1, 0, 1, 3, 3, 0, 1, 3, 3, 0, 0, 2, 2, 3, 2, 1, 1, 0, 2, 2, 3, 2, 0, 1, 1, 0, 3, 0, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 1, 0, 3, 2, 1, 3, 0, 0, 3, 2, 2, 3, 2, 0, 0, 0, 2, 0, 1, 2, 2, 1, 1, 1, 2, 0, 3, 3, 2, 2, 3, 0, 3, 2, 1, 2, 2, 3, 2, 2, 0, 1, 0, 1, 3, 1, 2, 0, 3, 0, 1, 0, 2, 2, 1, 2, 3, 1, 1, 0, 0, 0, 3, 2, 3, 2, 1, 1, 2, 2, 0, 2, 1, 3, 0, 3, 1, 3, 0, 2, 0, 3, 0, 1, 1, 0, 3, 3, 3, 1, 1, 2, 2, 3, 2, 1, 1, 1, 3, 2, 1, 2, 3, 0, 2, 3, 2, 3, 2, 1, 2, 3, 3, 0, 2, 3, 2, 3, 3, 1, 3, 0, 1, 2, 0, 1, 0, 1, 3, 3, 1, 1, 1, 2, 0, 3, 0, 1, 1, 2, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 2, 1, 2, 2, 0, 2, 0, 2, 1, 0, 1, 1, 2, 0, 1, 1, 1, 0, 2, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 2, 0, 2, 0, 2, 1, 0, 2, 0, 2, 2, 2, 0, 0, 2, 0, 1, 0, 1, 2, 2, 0, 2], [0, 2, 1, 2, 2, 2, 2, 2, 0, 0, 1, 2, 0, 2, 2, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 0, 2, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += int(55.0)\\nif in1 == ( res0 * min(max(max(in2, i0), min(min(int(6.0), int(0.0)), ( int(7.0) - abs(mod(divInt(res0,i1),i1)) ))), max(int(6.0), mod(int(1.0),divInt(int(3.0),in0)))) ):{:\\ni1 *= ( in0 * ( abs(in2) * mod(abs(min(int(5.0), abs(divInt(( ( i2 * in2 ) * int(4.0) ),i2)))),int(1.0)) ) )\\ni0 = min(abs(i1), int(0.0))\\nif True:{:\\nin2 += max(min(in0, in0), ( ( max(mod(int(6.0),int(4.0)), i0) + ( ( max(mod(res0,int(1.0)), int(7.0)) - res0 ) * abs(i0) ) ) + i2 ))\\n:}\\ni0 = res0\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 \\g i1:{:\\nb0 = min(( max(int(8.0), res0) * i2 ), int(8.0)) \\g in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not False:{:\\nin2 *= max(( int(5.0) - max(i0, in0) ), min(( ( abs(( in2 - in2 )) - in1 ) - ( in2 - int(4.0) ) ), divInt(( int(3.0) * int(7.0) ),int(2.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not mod(i0,min(min(( mod(max(i2, min(( int(8.0) + mod(( min(( mod(in2,int(6.0)) + i0 ), int(6.0)) * abs(int(2.0)) ),divInt(i2,max(i0, int(7.0)))) ), in2)),( mod(int(4.0),( max(int(9.0), int(5.0)) - res0 )) + in2 )) - in2 ), max(( max(( int(3.0) - int(0.0) ), ( mod(res0,( int(5.0) - abs(in0) )) + min(int(1.0), abs(in1)) )) + divInt(i1,min(i2, int(2.0))) ), int(1.0))), in2)) \\g abs(max(min(int(7.0), int(8.0)), ( mod(abs(divInt(int(2.0),int(7.0))),int(3.0)) * min(divInt(int(8.0),( abs(i1) - ( abs(divInt(abs(divInt(int(6.0),divInt(min(min(i2, mod(abs(divInt(min(max(int(9.0), min(i1, int(5.0))), ( i1 - int(4.0) )),i0)),int(2.0))), max(abs(int(5.0)), int(7.0))),int(0.0)))),( in2 - abs(in1) ))) - int(3.0) ) )), int(7.0)) )))\\nb2 = divInt(i0,in1) \\g divInt(( in0 + in0 ),( min(( in2 * divInt(abs(res0),int(7.0)) ), i0) - i2 ))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 4, 9, 54, 54, 5, 3, 0, 9, 5, 4, 2, 2, 70, 6, 237, 63, 57, 39, 28]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1], [1, 2, 0, 2, 0, 2, 0], [0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 3, 8, 3, 5, 4, 9, 7, 8, 8, 9, 5, 4, 0, 3, 6], [0, 2, 2], [0, 1, 0, 0], [], [1, 1, 1, 0, 0], [0, 0, 0], [0, 0], [], [0, 0, 0], [4, 3, 6, 5, 0, 0, 4, 2, 3, 0, 6], [0, 0], [3, 0, 2, 3, 1, 2, 1, 3, 1, 3, 3, 2, 0, 3, 2, 3, 3, 3, 1, 2, 1, 1, 2, 1, 3, 1, 1, 0, 2, 0, 1, 2, 3, 2, 1, 2, 0, 1, 2, 0, 1, 3, 1, 2, 2, 1, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2, 0], [0, 2, 2, 0, 2], [0, 0, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(in1) \\l divInt(abs(int(2.0)),divInt(int(7.0),abs(int(3.0))))\\nif min(abs(( in0 + abs(mod(min(min(min(int(8.0), ( int(3.0) * int(5.0) )), mod(int(4.0),abs(int(9.0)))), int(7.0)),res0)) )), mod(in2,int(8.0))) == ( abs(divInt(int(8.0),( i0 * int(9.0) ))) + ( i0 * int(5.0) ) ):{:\\nin1 = min(int(4.0), mod(mod(int(0.0),i2),in0))\\nif int(3.0) == i0:{:\\nres0 = int(6.0)\\n:}\\nif b1:{:\\nb0 = b0\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 17, 17, 3, 4, 0, 5, 3, 2, 0, 3, 11, 2, 51, 13, 12, 5, 8]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 0, 1, 2, 1, 2, 1], [0, 0, 0, 1], [0, 0, 1, 0], [1, 1, 1], [6, 2, 3], [0], [1, 1, 0, 1, 0, 0], [], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0], [2, 1, 0, 1, 1, 0, 2, 0], [1, 0, 1], [0, 1, 0], [5, 4, 2, 2], [1], [2, 0, 3, 1, 1, 2, 3, 3, 0, 1, 0], [0, 0], [0, 2, 2], [1, 2, 0], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not False:{:\\nif b1:{:\\nb1 = True\\n:}else:{:\\nb0 = False\\n:}\\nif b1:{:\\nin2 -= ( in1 * min(int(6.0), int(2.0)) )\\n:}\\nloopBreak% = 0\\nwhile not b0:{:\\nb0 = ( abs(abs(i2)) + int(3.0) ) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 3, 3, 1, 6, 0, 9, 1, 8, 3, 3, 4, 1, 11, 2, 3, 3, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 2, 0, 2, 2, 2, 0, 1, 1, 1, 2, 0], [0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 6, 8, 2, 7, 3, 0, 6, 8, 7, 7, 6, 8, 9, 5, 4, 5, 8, 2, 4, 0, 4, 4, 1, 6, 6, 8, 2, 2, 0, 3, 1, 4, 0, 7, 7, 3, 8, 0, 6, 4, 6, 7, 4, 2, 1, 9, 5, 9, 4, 0, 1, 6, 7, 6, 6, 1, 0, 0, 8, 8, 5, 8, 1, 0, 7, 0, 0, 1, 3, 2, 4, 8, 2, 6, 8, 0, 4, 2, 7, 8, 4, 0, 6, 3, 5, 0, 2, 9, 7, 3, 7, 5, 6], [4, 3, 0, 4, 3, 1, 5, 4, 5, 2], [1, 2, 2, 2, 1, 2, 1], [1, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 3, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 1, 0], [1], [1, 0, 1, 0], [2, 6, 6, 6, 6, 0, 1, 3, 5, 4, 1, 0, 3, 1, 3, 5, 4, 5, 6, 5, 6, 0, 4, 4, 2, 3, 1, 0, 2, 4, 1, 2, 4, 0, 1, 1, 2, 4, 0, 4, 6, 3, 2, 0, 0, 3, 5, 1, 3, 1, 0, 5, 5, 2, 5, 5, 6, 6, 6, 6, 2, 0, 5, 5, 4, 2, 4, 2, 3, 2, 1, 5, 2, 4, 5, 6, 2, 2, 5, 2, 4, 0, 3, 1, 2], [0, 0, 1, 0], [0, 2, 1, 2, 2, 0, 3, 1, 0, 3, 0, 1, 3, 2, 2, 1, 2, 1, 0, 2, 3, 3, 3, 0, 3, 1, 0, 3, 1, 2, 3, 3, 2, 2, 2, 2, 1, 3, 3, 2, 0, 3, 3, 2, 1, 2, 3, 2, 3, 0, 3, 1, 1, 2, 2, 3, 3, 3, 0, 2, 3, 3, 0, 3, 0, 0, 0, 0, 1, 1, 3, 0, 0, 1, 3, 3, 0, 3, 3, 1, 3, 0, 3, 0, 2, 0, 3, 2, 1, 0, 1, 0, 3, 1, 1, 1, 0, 3, 0, 2, 0, 1, 1, 3, 3, 2, 1, 1, 3, 0, 1, 2, 0, 2, 1, 0, 0, 2, 0, 0, 2, 2, 0, 3, 3, 2, 3, 3, 2, 2, 1, 2, 1, 0, 2, 3, 1, 3, 1, 0, 1, 0, 3, 0, 3, 3, 3, 0, 3, 3, 3, 1, 2, 2, 2, 0, 0, 3, 1, 0, 2, 3, 3, 1, 1, 1, 0, 1, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 1, 2, 2, 2, 3, 3, 2, 0, 3, 1, 2, 0, 1, 1, 1, 2, 3, 0, 3, 2, 1, 0, 3, 2, 2, 3, 3, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 2, 3, 3, 1, 1, 2, 3, 2, 0, 1, 3, 0, 1, 1, 2, 3, 1, 3, 1, 1, 2, 3, 2, 1, 1, 0, 2, 2, 3, 2, 0, 3, 2, 0, 2, 2, 2, 2, 0, 3, 2, 3, 1, 3, 3, 1, 2, 0, 2, 1, 3, 1, 2, 0, 2, 3, 3, 1, 3, 1, 0, 3, 2, 0, 2, 3, 1, 0, 2, 1, 3, 0, 3, 1, 2, 0, 2, 3, 1, 2, 2, 0, 0, 0, 2, 1, 3, 1, 2, 3, 1, 1, 3, 2, 1, 1, 0, 2, 1, 2, 1, 0, 3, 0, 3, 0, 3, 1, 2, 3, 1, 1, 1, 2, 2, 1, 0, 3, 2, 1, 3, 3, 3, 1, 3, 0, 1, 1, 1, 3, 0, 2, 0, 1, 2, 0, 0, 1, 1, 0, 3, 0, 3, 0, 3, 1, 3, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 1, 2, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 0, 1, 2, 0, 0, 0, 2, 2, 0, 0, 2, 1, 1, 2, 0, 1, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1, 2, 1, 2, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [2, 0, 2, 1, 0, 0, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 1, 2, 1, 2, 1, 0, 2, 0, 0, 2, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 88, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = res0\\nif divInt(int(2.0),mod(( res0 * abs(int(7.0)) ),res0)) \\le min(res0, int(6.0)):{:\\ni0 = min(mod(( int(8.0) + mod(int(2.0),i1) ),mod(min(min(max(in0, max(int(7.0), in2)), max(int(3.0), divInt(max(min(( mod(mod(divInt(int(0.0),abs(abs(divInt(in1,abs(abs(divInt(int(6.0),( abs(mod(min(i1, min(int(8.0), int(7.0))),mod(divInt(max(abs(max(i0, ( abs(max(in0, min(i1, in0))) * in2 ))), in1),int(7.0)),int(6.0)))) - min(in2, res0) )))))))),int(8.0)),min(abs(in2), max(max(int(9.0), max(res0, abs(i0))), ( in1 + min(( int(5.0) + in1 ), int(4.0)) )))) * i2 ), abs(int(5.0))), int(8.0)),int(2.0)))), in0),abs(i1))), divInt(i0,int(4.0)))\\nif ( ( int(0.0) \\ge abs(min(( int(4.0) + int(4.0) ), min(i2, int(1.0)))) or not ( in1 + ( int(6.0) * i1 ) ) \\l i2 ) or ( ( in1 - i0 ) \\le ( ( i1 + abs(max(( abs(max(divInt(divInt(int(6.0),( int(8.0) - i1 )),( abs(int(2.0)) + max(int(2.0), i2) )), int(0.0))) * in1 ), min(i0, max(abs(min(in1, abs(max(min(int(3.0), mod(mod(( res0 + in0 ),min(int(1.0), i2)),mod(max(abs(int(4.0)), int(0.0)),int(7.0)))), i0)))), int(7.0))))) ) - i0 ) and not b1 ) ):{:\\nif int(3.0) \\ge int(8.0):{:\\nif b2:{:\\nb2 = min(int(0.0), int(6.0)) \\g int(4.0)\\n:}\\n:}else:{:\\nb2 = not not b1\\n:}\\n:}\\nin0 *= in2\\n:}else:{:\\nb2 = ( ( ( i1 != int(6.0) or ( int(7.0) \\le ( ( ( min(min(mod(in0,abs(int(4.0))), divInt(i1,int(2.0))), int(1.0)) * int(9.0) ) - ( abs(i0) + min(divInt(int(5.0),in2), min(mod(mod(abs(max(int(9.0), divInt(in2,( mod(( int(4.0) - i2 ),int(0.0)) - divInt(divInt(max(abs(int(1.0)), int(6.0)),( min(divInt(in2,int(7.0)), max(in2, int(6.0))) + int(6.0) )),divInt(max(int(1.0), abs(int(0.0))),int(0.0))) )))),( abs(( int(8.0) - int(8.0) )) * res0 )),divInt(mod(abs(mod(res0,abs(mod(res0,( mod(mod(( res0 * abs(( min(int(5.0), max(max(int(8.0), ( i2 + divInt(int(1.0),max(int(0.0), divInt(i0,mod(abs(max(int(7.0), abs(int(0.0)))),in2)))) )), max(( in2 + ( min(int(0.0), in1) + ( int(1.0) * max(i2, max(int(3.0), mod(in1,mod(max(int(2.0), divInt(( i2 - in0 ),i2)),( int(4.0) * min(int(8.0), ( max(int(2.0), int(6.0)) - min(( int(8.0) * int(0.0) ), i1) )) ))))) ) ) ), ( int(4.0) - ( int(2.0) + in2 ) )))) * min(i2, min(in1, abs(int(7.0)))) )) ),( max(int(8.0), int(4.0)) + int(0.0) )),mod(( int(6.0) + in2 ),min(divInt(int(3.0),abs(abs(abs(int(5.0))))), max(res0, int(0.0))))) * int(2.0) ))))),int(9.0)),abs(i2))), mod(i2,int(7.0)))) ) ) - divInt(in2,i2) ) or int(3.0) != int(7.0) ) ) or in1 == max(i0, abs(in0)) ) and False )\\nloopBreak% = 0\\nwhile b1:{:\\ni1 = min(int(5.0), min(i2, int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 95, 95, 10, 7, 7, 26, 10, 16, 1, 4, 85, 4, 364, 88, 100, 42, 47]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 6, 8, 5, 4, 5, 5, 5, 0, 6, 3, 2, 0, 3, 8, 8, 6], [], [], [], [], [], [], [], [], [2, 0, 1, 2, 3, 2, 1, 2, 6, 2, 3, 6, 5, 0, 1], [1], [3, 2, 1, 2, 3, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 3, 1, 0, 3, 0, 1, 2, 3, 2, 1, 2, 1, 2, 0, 0, 2, 0, 2, 2, 2, 1, 1, 3, 2, 1, 3, 2, 3, 0, 3, 2, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 3, 3, 1, 3, 1, 0, 0, 3, 3, 0, 0, 3, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 2, 2, 2], [2, 1, 0, 2, 2, 0, 0, 2, 2, 1, 1, 2, 0, 2, 2], [0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= max(divInt(int(0.0),( max(int(4.0), ( max(i0, int(6.0)) - ( i1 + int(8.0) ) )) * ( min(abs(int(5.0)), i2) * max(in0, int(4.0)) ) )), ( min(( int(5.0) + ( int(5.0) + ( i2 * i1 ) ) ), ( i2 * ( ( ( int(5.0) - int(0.0) ) - max(mod(int(6.0),abs(mod(min(res0, max(( mod(int(3.0),mod(i2,int(2.0))) * int(0.0) ), ( int(3.0) + mod(in0,abs(max(int(8.0), max(int(8.0), res0)))) ))),in2))), abs(abs(i0))) ) * i1 ) )) * abs(int(6.0)) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 15, 1, 69, 20, 17, 15, 6]}, {"genotype": [[0], [1], [1], [], [0], [0, 1], [3, 6], [4], [2], [], [1], [0], [], [], [], [4], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in1 \\le int(36.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 1, 0], [1, 1], [3, 4], [0, 3], [0, 1], [], [1, 1], [0, 0], [], [], [], [5, 4, 0, 3], [1], [1, 1, 0, 0, 0], [], [], [0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(3.0) \\l int(4.0)\\nin2 += in1\\nb1 = i0 \\ge in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 4, 1, 5, 0, 0, 1, 0]}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 2, 2, 1, 2, 0], [1, 1, 0, 0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 8, 1, 3, 0, 0, 1, 0, 2, 8, 0, 6, 8], [0], [1, 0, 0], [0], [0, 0, 0, 0, 0, 1], [0], [0, 3, 1, 0, 0], [0], [0, 0], [4, 2, 3, 5, 1, 6, 3, 6, 5, 4, 3, 2, 4], [0, 0], [1, 2, 2, 3, 0, 2, 1, 2, 0, 3, 3, 3, 3, 3, 1, 2, 0, 1, 1, 1, 2, 3, 3, 0, 2, 3, 1, 1, 0, 2, 3, 0, 0, 2, 1, 1, 2, 2, 0, 3, 3, 3, 0, 1, 0, 0, 3, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 2, 0, 0, 1, 1, 0, 2, 2, 2, 0, 1, 0], [0, 0, 2, 2], [0, 0, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile ( True and b0 ):{:\\nif b0:{:\\nin1 = int(3.0)\\n:}\\nif divInt(divInt(max(i2, mod(int(0.0),mod(in0,max(abs(min(min(max(int(8.0), mod(in2,int(1.0))), int(3.0)), int(0.0))), divInt(max(min(i1, ( abs(int(0.0)) + int(1.0) )), res0),( abs(in0) + res0 )))))),( int(0.0) * int(2.0) )),( mod(in2,abs(min(max(in1, int(8.0)), in0))) * i2 )) \\l min(int(0.0), int(6.0)):{:\\nin1 = int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 14, 14, 1, 3, 1, 6, 1, 5, 1, 2, 13, 2, 50, 11, 14, 4, 7]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 2, 2, 0, 0, 1, 2, 0, 2, 1], [0, 1, 0, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 2, 1, 9, 2, 5, 5, 8, 0, 4, 3, 3, 6, 0, 1, 4, 4, 4, 4, 2, 9, 3, 6, 4, 5, 4, 8, 2, 2, 7, 2, 1, 1, 3, 6, 2, 6, 5, 6, 2, 6], [1, 1, 1, 2], [2], [], [0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0], [1, 1, 2], [1, 0], [1, 1], [0, 6, 2, 4, 5, 5, 4, 2, 3, 5, 3, 4, 0, 0, 3, 1, 6, 3, 1, 2, 1, 0, 3, 1, 3, 4, 4, 5, 1, 1, 1, 0, 3, 1, 5, 5, 2, 3, 2, 3, 3, 2, 0, 5, 1, 0, 1, 6, 2, 3, 1, 5, 0], [1, 0, 0, 1], [3, 1, 2, 2, 2, 3, 3, 1, 1, 2, 0, 3, 2, 0, 3, 1, 2, 1, 3, 3, 3, 1, 1, 1, 3, 0, 3, 1, 2, 2, 0, 2, 3, 3, 1, 3, 3, 3, 2, 3, 3, 1, 0, 3, 2, 2, 0, 0, 3, 3, 3, 0, 3, 2, 2, 2, 3, 2, 2, 0, 3, 0, 1, 2, 1, 1, 0, 0, 2, 1, 0, 3, 1, 0, 2, 3, 3, 0, 0, 0, 0, 1, 2, 0, 3, 3, 3, 0, 0, 2, 3, 2, 2, 0, 0, 3, 3, 2, 0, 1, 2, 2, 3, 2, 0, 1, 0, 0, 0, 2, 3, 1, 0, 3, 0, 1, 1, 0, 2, 2, 2, 3, 1, 0, 3, 1, 0, 1, 2, 0, 1, 3, 2, 1, 2, 3, 1, 0, 1, 0, 1, 0, 3, 3, 0, 1, 2, 2, 3, 3, 0, 2, 0, 1, 3, 3, 1, 1, 1, 1, 3, 2, 0, 0, 2, 3, 3, 1, 3, 1, 1, 0, 2, 0, 1, 0, 3, 3, 2, 1, 0, 2, 0, 1, 3, 3, 0, 3, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 2, 0, 0, 2, 2, 1, 2, 2, 0, 0, 1, 0, 2, 0, 1, 0, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 0, 0, 2, 1, 2, 2, 1, 1, 0, 2, 2], [0, 2, 1, 2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 1, 2], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nloopBreak% = 0\\nwhile True:{:\\nif max(int(4.0), ( divInt(mod(min(min(int(4.0), int(2.0)), divInt(i0,abs(divInt(res0,min(int(1.0), ( int(9.0) + min(abs(abs(int(2.0))), int(5.0)) )))))),int(5.0)),max(i2, abs(int(8.0)))) * mod(( in1 - divInt(abs(min(int(0.0), min(max(min(divInt(abs(min(int(4.0), in2)),max(mod(( in2 * in1 ),min(max(min(i2, abs(divInt(divInt(( abs(( mod(in0,min(in2, int(3.0))) + mod(int(3.0),int(6.0)) )) - in0 ),in1),( int(0.0) * i0 )))), max(int(1.0), i0)), mod(abs(max(in0, i1)),res0))), in0)), int(4.0)), mod(i1,max(abs(max(i2, i1)), ( max(( divInt(i0,in0) + abs(min(( i1 + int(4.0) ), divInt(mod(min(( in0 * int(4.0) ), in1),in1),in2))) ), divInt(max(int(4.0), i1),max(i1, int(2.0)))) + int(9.0) )))), i1))),divInt(divInt(( abs(int(3.0)) * i0 ),max(int(6.0), in0)),int(4.0))) ),divInt(i1,int(5.0))) )) \\g max(mod(int(4.0),( max(int(8.0), in2) + int(2.0) )), in2):{:\\nb2 = int(2.0) \\g i2\\n:}else:{:\\nin0 += max(max(i2, int(7.0)), ( ( abs(abs(in0)) + ( in0 * int(2.0) ) ) + min(min(int(1.0), int(1.0)), int(3.0)) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = int(6.0)\\nloopBreak% = 0\\nwhile not abs(mod(i0,in2)) \\g divInt(max(abs(int(2.0)), abs(int(6.0))),int(5.0)):{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile divInt(i1,int(6.0)) == res0:{:\\ni2 *= max(max(( int(2.0) - in0 ), ( i1 * int(6.0) )), min(abs(in2), abs(i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 42, 42, 4, 1, 0, 7, 4, 3, 2, 2, 53, 4, 189, 43, 55, 20, 25]}][{"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 2, 0, 1, 2, 2, 0, 2, 1, 1, 2, 0, 1], [1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 8, 0, 1, 1, 9, 7, 8, 9, 7, 0, 8, 2, 7, 7, 3, 2, 1, 5, 2, 2, 6, 2, 2, 4, 0, 2, 8, 2, 8, 7, 2, 1, 0, 3, 7, 2, 1, 5, 4, 6, 2, 5, 9, 8, 6, 3, 2, 0, 0, 9, 9, 4, 7, 7, 6, 0, 1, 6, 4, 7, 7], [1, 4, 3, 5, 3, 0, 1, 2, 3], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 2, 1, 3, 2, 1, 3, 0, 3, 3, 0, 1], [1, 0, 0, 0], [0, 1], [2, 1, 0, 4, 3, 6, 1, 4, 0, 3, 6, 0, 5, 6, 6, 1, 1, 6, 0, 5, 2, 2, 5, 2, 6, 0, 4, 6, 5, 6, 2, 0, 0, 0, 6, 4, 1, 1, 5, 6, 1, 3, 1, 4, 3, 2, 5, 6, 1, 2, 2, 3, 3, 2, 6, 0, 1, 6, 0, 1, 6, 0, 1, 6, 5, 2, 4, 1, 5, 5, 0, 0, 0], [0, 1, 0, 1, 0], [3, 1, 2, 1, 2, 3, 2, 0, 1, 0, 3, 2, 2, 2, 0, 1, 3, 2, 2, 0, 2, 3, 1, 2, 1, 3, 3, 1, 0, 1, 0, 0, 2, 1, 1, 1, 3, 0, 2, 1, 2, 1, 1, 2, 0, 2, 1, 1, 1, 1, 2, 2, 1, 0, 0, 3, 3, 1, 0, 2, 3, 2, 1, 0, 2, 1, 1, 2, 3, 0, 0, 0, 1, 3, 0, 0, 1, 3, 1, 2, 3, 1, 3, 3, 3, 2, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 3, 2, 3, 1, 0, 0, 0, 2, 0, 3, 2, 3, 0, 2, 1, 0, 0, 3, 0, 2, 0, 0, 3, 3, 0, 1, 3, 3, 0, 3, 2, 3, 2, 2, 0, 2, 0, 0, 1, 0, 2, 3, 2, 2, 0, 1, 3, 3, 0, 1, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 3, 2, 3, 0, 3, 3, 2, 1, 0, 2, 2, 0, 2, 3, 0, 0, 0, 1, 0, 1, 3, 0, 2, 1, 0, 1, 0, 0, 3, 0, 3, 3, 0, 0, 0, 0, 2, 1, 1, 0, 2, 2, 0, 3, 1, 2, 2, 2, 3, 1, 0, 1, 1, 3, 1, 2, 0, 3, 3, 1, 2, 2, 2, 2, 2, 3, 0, 3, 1, 2, 0, 1, 3, 1, 3, 1, 0, 1, 2, 1, 0, 3, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 2, 3, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 1, 2, 0, 0, 2, 0, 2, 1, 0, 2, 0, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 1, 2, 0, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2], [1, 2, 0, 0, 0, 2, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 2, 1, 2, 2], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(int(4.0))\\nloopBreak% = 0\\nwhile divInt(int(9.0),( min(divInt(i1,int(8.0)), i0) - max(( ( ( in1 * int(0.0) ) + min(( mod(in0,( abs(int(1.0)) + ( int(1.0) + max(max(int(9.0), res0), int(7.0)) ) )) * i1 ), in1) ) + ( int(8.0) * int(9.0) ) ), int(7.0)) )) \\g min(i0, mod(int(0.0),mod(int(8.0),int(2.0)))):{:\\nloopBreak% = 0\\nwhile ( in0 + ( int(7.0) * int(7.0) ) ) \\le int(3.0):{:\\nres0 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( ( False and mod(mod(int(1.0),i0),in2) \\ge max(min(int(5.0), res0), divInt(max(mod(int(2.0),res0), ( int(2.0) - int(6.0) )),divInt(max(i1, i1),res0))) ) and int(2.0) != abs(i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not True:{:\\nloopBreak% = 0\\nwhile ( not in2 \\ge int(2.0) and True ):{:\\ni2 = min(int(4.0), mod(min(int(0.0), abs(min(abs(mod(int(2.0),mod(( mod(int(8.0),i2) - ( in2 - mod(i2,mod(max(( min(int(2.0), res0) - i0 ), in1),divInt(res0,abs(mod(min(in2, ( int(8.0) - res0 )),i2))))) ) ),max(i0, ( i0 - i0 ))))), max(max(res0, int(7.0)), max(min(in1, abs(( max(mod(divInt(i1,( i1 - in2 )),int(2.0)), res0) + ( max(( ( i1 - int(1.0) ) + max(min(in0, int(0.0)), ( mod(( i1 * mod(int(3.0),divInt(in1,in0)) ),int(7.0)) + ( abs(( max(i2, max(max(( int(2.0) * in2 ), divInt(divInt(res0,divInt(max(i1, i2),i2)),int(1.0))), in0)) + int(5.0) )) + abs(in0) ) )) ), mod(int(4.0),i2)) - int(6.0) ) ))), res0))))),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif max(i1, abs(min(res0, i0))) \\l i1:{:\\nres0 *= i0\\n:}else:{:\\ni1 = divInt(int(2.0),int(5.0))\\n:}\\nloopBreak% = 0\\nwhile res0 \\g divInt(( in2 * abs(int(9.0)) ),( mod(( max(int(8.0), i2) * int(6.0) ),int(3.0)) + max(int(2.0), ( in1 * max(max(int(0.0), mod(divInt(mod(( mod(max(i1, abs(int(0.0))),divInt(in2,int(9.0))) - abs(int(9.0)) ),max(int(4.0), in2)),int(7.0)),mod(int(7.0),i0))), abs(int(6.0))) )) )):{:\\nb1 = ( b0 or ( ( int(0.0) * ( mod(int(1.0),abs(int(6.0))) * int(4.0) ) ) == int(7.0) and ( b1 or True ) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = mod(abs(int(7.0)),i0) \\ge i0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 989, "mapping_values": [1, 14, 14, 6, 8, 63, 63, 9, 5, 6, 23, 9, 14, 4, 2, 73, 5, 255, 71, 53, 35, 38]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 1, 0, 1, 0], [1], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 6, 3, 8, 9, 2, 9, 7, 3, 4], [0, 4, 4, 3, 5], [1, 2, 2, 2, 0], [0], [0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2, 3, 0], [], [], [2, 4, 2, 4, 0, 4, 2, 5, 4, 0, 2, 0, 4, 2, 4], [], [1, 1, 3, 0, 3, 0, 1, 2, 2, 2, 3, 1, 1, 0, 2, 0, 0, 2, 0, 0, 0, 3, 2, 0, 0, 3, 1, 1, 1, 0, 0, 2, 3, 3, 2, 1, 3, 0, 0, 2, 2, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 2, 2], [1, 1, 1, 2, 2, 1, 0], [0, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not ( b1 and int(8.0) \\l int(1.0) ):{:\\nb2 = min(i2, min(in1, int(6.0))) \\le ( ( ( max(int(3.0), int(8.0)) - i2 ) - divInt(in1,i0) ) - ( in1 * i2 ) )\\nb2 = in2 \\le min(( in1 * i0 ), max(int(9.0), int(2.0)))\\nb2 = int(9.0) \\ge i2\\nb0 = i0 != divInt(max(abs(( int(7.0) - abs(in1) )), i2),mod(( int(3.0) + int(4.0) ),in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 11, 11, 5, 5, 1, 8, 5, 3, 0, 0, 15, 0, 44, 10, 8, 7, 3]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 0, 0], [1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 0, 6, 8, 4, 3, 8, 9, 1, 6, 9, 3, 5, 8, 4, 4], [], [2, 0, 1], [], [0, 0], [], [0, 0], [], [], [1, 3, 5, 0, 4, 2, 6, 3, 1, 2, 0, 3, 2, 3, 1, 3, 0], [0, 0], [3, 2, 2, 3, 1, 0, 2, 2, 1, 3, 2, 0, 1, 2, 0, 2, 2, 0, 1, 3, 2, 2, 0, 1, 2, 1, 0, 3, 3, 1, 1, 3, 3, 2, 0, 2, 0, 2, 3, 3, 2, 2, 0, 3, 2, 3, 0, 3, 2, 1, 1, 3, 0, 3, 1, 0, 3, 0, 1, 0, 1, 3, 0, 2, 1, 1, 2, 1, 3, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 2, 0, 2, 2, 1, 2, 2, 2, 2, 1, 0, 2], [2, 2, 1, 0, 0, 0, 0, 2, 2, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\ni1 = max(mod(( min(int(3.0), in0) * ( mod(int(8.0),min(( in2 * int(0.0) ), divInt(i0,divInt(( in1 - int(6.0) ),min(mod(( i2 + int(8.0) ),( int(4.0) + res0 )), max(max(int(3.0), int(8.0)), abs(min(divInt(in0,divInt(i1,mod(abs(abs(( ( i2 + max(( abs(i0) + abs(divInt(int(9.0),int(1.0))) ), abs(in0)) ) * abs(int(6.0)) ))),i2))), max(in0, int(9.0)))))))))) * i1 ) ),int(3.0)), min(in0, ( int(5.0) - int(8.0) )))\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(int(4.0),abs(int(4.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 17, 17, 0, 3, 0, 2, 0, 2, 0, 0, 17, 2, 70, 20, 18, 10, 10]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 0, 0, 1], [5, 5, 5, 5], [4], [1], [], [1], [0], [], [], [], [2, 3, 0, 5], [1], [0, 2, 0, 3, 3, 1, 3, 0, 1], [1], [0, 2, 2], [0], [1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i2 \\le mod(in0,min(abs(int(5.0)), abs(i0)))\\nin2 += int(555.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 9, 1, 3, 1, 1]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [0, 0, 1], [1, 1, 1], [8, 4, 8], [4], [1, 1], [], [0, 1], [0], [1], [1], [], [0, 2, 5, 1], [1], [1, 2, 1, 2, 2, 1, 3, 0, 0, 0], [0, 1, 1], [2], [0, 0], [1, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nb1 = int(8.0) \\le ( int(4.0) + mod(divInt(int(8.0),abs(i0)),i2) )\\nin2 += i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 1, 2, 0, 2, 1, 1, 1, 0, 4, 1, 10, 3, 1, 2, 2]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [9, 5, 2], [4], [2], [], [0, 1], [0], [2], [], [], [], [], [1, 2, 1, 1], [0], [], [0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not int(9.0) \\le ( int(5.0) + int(2.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 2, 2, 3, 1, 6, 5], [5], [2], [1], [0, 1, 0], [0], [3, 1], [0], [], [2, 0, 6, 6, 2, 1, 3], [0], [3, 0, 3, 1, 2, 3, 2, 2, 0, 3, 2, 1, 2, 3, 1, 1, 3, 0, 1, 3, 1, 0, 1, 1, 2, 0, 0], [0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 1, 2], [1, 1, 0], [0, 0, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = min(i0, max(int(9.0), ( abs(( ( res0 - min(divInt(int(3.0),divInt(max(int(2.0), int(2.0)),max(res0, int(3.0)))), abs(int(1.0))) ) - i2 )) + int(6.0) )))\\nb2 = ( int(5.0) != mod(i1,in0) or True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 8, 8, 1, 1, 1, 3, 1, 2, 1, 0, 7, 1, 27, 6, 7, 3, 3]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 2, 0], [0, 1, 0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 9, 7, 8, 2, 5, 5, 5, 0, 9, 9, 3, 1, 1, 0, 0, 1, 8, 7, 3, 6, 4, 3, 9, 3, 8, 8, 1, 6, 4, 8, 6, 9, 2, 2, 0, 1, 8, 4, 7, 2, 1, 3, 6, 1, 2, 7, 9, 2, 9, 6, 9, 6], [1, 3, 1, 1, 5], [1], [0], [1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 3, 2], [1], [0, 1], [0, 0, 4, 5, 5, 4, 1, 3, 3, 0, 3, 5, 1, 1, 3, 4, 5, 6, 0, 0, 3, 5, 5, 6, 1, 5, 0, 2, 3, 0, 4, 2, 3, 4, 2, 5, 2, 3, 5, 5, 6, 1, 4, 3, 5, 2, 2, 4, 5, 4, 5, 4, 5, 6, 0, 2, 0], [0], [1, 3, 2, 3, 2, 1, 1, 2, 2, 0, 1, 2, 0, 3, 1, 0, 2, 3, 2, 0, 3, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 1, 2, 0, 2, 3, 2, 0, 2, 2, 2, 1, 3, 1, 1, 3, 1, 0, 1, 0, 2, 2, 0, 3, 3, 0, 2, 1, 0, 3, 0, 0, 1, 1, 2, 3, 2, 3, 1, 2, 3, 0, 3, 0, 3, 0, 1, 1, 3, 1, 2, 3, 1, 0, 0, 1, 0, 0, 3, 0, 3, 2, 3, 2, 3, 1, 2, 0, 0, 2, 0, 0, 3, 3, 3, 1, 3, 3, 3, 1, 2, 2, 2, 0, 1, 2, 1, 0, 1, 3, 2, 0, 0, 3, 3, 2, 0, 2, 1, 1, 1, 0, 2, 3, 3, 1, 3, 3, 0, 2, 2, 3, 0, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 1, 3, 1, 0, 1, 1, 2, 2, 3, 1, 3, 3, 1, 0, 3, 2, 3, 0, 3, 2, 2, 3, 3, 3, 0, 1, 0, 0, 2, 3, 2, 3, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0, 0, 1, 3, 1, 2, 1, 1, 0, 1, 1, 2, 3, 1, 3, 2, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [1, 2, 0, 1, 0, 0, 2, 2, 0, 1, 1, 1, 2, 2, 1, 1, 0, 0, 1, 0, 1, 2, 0, 1, 1, 2, 0, 1, 0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 2, 0, 1, 1, 0, 1, 0, 2, 1, 0, 2, 2], [0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) \\g max(divInt(abs(( int(3.0) + int(9.0) )),( divInt(i0,int(7.0)) - ( i0 * min(int(8.0), in1) ) )), ( max(( in2 - min(mod(int(2.0),int(5.0)), ( mod(( mod(( int(5.0) * int(5.0) ),in2) + divInt(mod(( ( min(int(0.0), ( int(9.0) + abs(( int(9.0) + mod(in1,mod(abs(( i1 + mod(( mod(int(3.0),min(int(1.0), int(1.0))) + max(int(0.0), in0) ),int(0.0)) )),in0)) )) )) + ( mod(i0,max(max(in0, ( int(1.0) - in2 )), abs(i1))) + i1 ) ) - int(8.0) ),int(7.0)),( abs(( max(int(3.0), ( max(in0, min(in1, min(in2, int(6.0)))) - int(4.0) )) * max(int(3.0), divInt(min(int(9.0), res0),i0)) )) * int(3.0) )) ),i0) - in0 )) ), max(in2, abs(( min(( max(int(8.0), mod(in2,res0)) + divInt(i1,in2) ), max(abs(min(int(8.0), max(min(max(int(1.0), ( ( divInt(i0,int(6.0)) + divInt(int(4.0),i2) ) + int(8.0) )), min(mod(in0,i0), min(min(divInt(in1,divInt(int(6.0),int(9.0))), int(2.0)), i2))), mod(abs(abs(int(2.0))),min(max(in0, divInt(divInt(abs(in1),int(0.0)),i2)), in2))))), ( i2 + int(1.0) ))) * in0 )))) * in2 )):{:\\nloopBreak% = 0\\nwhile False:{:\\nif min(in2, res0) \\ge int(8.0):{:\\ni1 = abs(int(4.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 \\g int(7.0):{:\\nb1 = ( not int(2.0) \\g ( ( min(int(1.0), min(abs(int(3.0)), in0)) - min(( max(in2, max(( ( min(max(min(i2, int(6.0)), i2), in1) + ( abs(divInt(max(in2, in1),int(1.0))) - in2 ) ) + mod(in1,divInt(in2,divInt(res0,i0))) ), int(2.0))) * min(int(7.0), divInt(int(9.0),int(2.0))) ), i2) ) * int(9.0) ) and int(6.0) != mod(abs(int(9.0)),abs(( i0 - int(6.0) ))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 54, 54, 5, 1, 1, 8, 5, 3, 1, 2, 57, 1, 224, 60, 54, 31, 29]}][{"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 2, 3], [1], [3, 0, 0], [], [0], [0], []], "fitness": 73, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += min(i2, in0)\\n", "test_case_results": [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0], "other_info": {}, "test_fitness": 718, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 1, 2, 0, 1, 2, 2, 2, 0], [0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 0, 3, 6, 8, 5, 7, 8, 1, 0, 1, 3, 8, 6, 0, 0, 4], [2, 2, 4, 3, 3, 1, 3], [0, 2], [], [1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [2, 1], [0], [0, 1, 0], [3, 3, 3, 5, 4, 5, 1, 3, 5, 4, 6, 0, 0, 3, 6, 0, 1, 3, 3, 6, 5, 1, 3], [1, 0, 0], [3, 0, 1, 0, 2, 0, 3, 3, 2, 3, 1, 1, 3, 2, 0, 2, 1, 0, 2, 3, 1, 3, 0, 0, 3, 0, 1, 1, 0, 1, 2, 0, 1, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 0, 1, 1, 0, 3, 3, 1, 1, 2, 0, 3, 2, 2, 0, 1, 3, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 1, 0], [2, 0, 2, 1, 0, 2, 1, 2, 2, 2], [1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif abs(in0) == int(1.0):{:\\nin0 *= in0\\nif ( in2 + abs(min(( abs(int(2.0)) * int(0.0) ), abs(( in1 - ( int(0.0) + in2 ) )))) ) == ( min(int(3.0), min(i1, in0)) * max(in2, int(6.0)) ):{:\\nb0 = int(8.0) \\le in1\\n:}else:{:\\nloopBreak% = 0\\nwhile int(5.0) \\ge ( res0 - int(7.0) ):{:\\ni0 = mod(divInt(mod(i0,( in0 * res0 )),mod(mod(int(8.0),i0),int(1.0))),int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = i1 \\ge abs(max(int(1.0), int(3.0)))\\n:}\\nloopBreak% = 0\\nwhile not ( in0 * max(( mod(in0,int(8.0)) * min(int(6.0), res0) ), in2) ) \\g int(0.0):{:\\nloopBreak% = 0\\nwhile True:{:\\nif int(0.0) \\ge i1:{:\\nin0 = int(4.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 6, 5, 19, 19, 7, 2, 0, 9, 7, 2, 1, 3, 23, 3, 66, 15, 12, 10, 6]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1], [9, 6, 9, 4], [], [], [], [], [], [], [], [], [3, 4, 4, 6, 0, 4, 6, 5, 1, 3, 4, 5, 6, 4, 6, 6, 4, 6, 6], [0], [3, 2, 0, 0, 2, 2, 2, 0, 1, 0, 3, 3, 0, 3, 0, 3, 2, 0, 2, 3, 0, 2, 0, 0, 2, 1, 2, 0, 3, 1, 0, 0, 2, 3, 2, 0, 3, 2, 0, 2, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 2, 0], [1, 0, 2, 2, 1, 0, 0, 1], [1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = min(( in1 - in1 ), ( mod(( res0 + int(9.0) ),i0) * min(min(in1, min(res0, max(( in2 * ( max(i1, mod(in0,in1)) - ( int(6.0) + ( in2 + min(int(9.0), res0) ) ) ) ), in1))), mod(abs(( res0 - min(mod(res0,mod(in1,res0)), res0) )),int(4.0))) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 44, 13, 9, 8, 5]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [0], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [4], [1], [1], [0, 1, 0, 0], [0], [3, 2, 1], [1], [], [1, 0], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( i1 \\le i0 or not False )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 4, 1, 3, 1, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [3], [2], [], [1], [0], [], [], [], [5, 0], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in2 \\ge i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 0, 7, 1, 0, 1, 9, 3, 9, 1, 2, 9, 0, 5, 7, 4, 4, 9, 3, 8, 5, 1, 5, 5, 5, 3, 5, 1, 5, 5, 1, 9, 6, 9, 9, 1, 3, 4, 6, 0, 3, 1, 7, 5, 5, 5, 9, 4, 4, 7, 0, 2, 2, 4, 9, 6, 5, 8, 6, 2, 8, 3, 2, 2, 7, 0, 0, 2, 9, 1, 3, 8, 5, 0, 4, 9, 3, 2, 9, 8, 9, 7, 5, 0, 7, 4, 0, 9, 0, 2, 6, 8, 1, 6, 5, 7, 2, 5, 0, 8, 8, 3, 3, 5, 0, 3, 8, 7, 1, 9, 3, 9, 2, 0, 8, 7, 3, 7, 1, 2, 3, 6, 1, 1, 4, 4, 1, 9, 8, 0, 8, 2, 4, 6, 8, 9, 4, 2, 6, 7, 6, 5, 0, 1, 2, 8, 9, 3, 2, 0, 7, 1, 6, 5, 0, 6, 7, 1, 2, 3, 8, 5, 3, 4, 9, 6, 9, 7, 7, 1, 0, 1, 3, 0, 1, 9, 0, 2, 3, 2, 4, 3, 5, 1, 6, 9, 5, 6, 2, 4, 0, 9, 9, 2, 1, 9, 7, 2, 6, 8, 4, 8, 6, 8, 8, 0, 3, 8, 2, 4, 9, 7, 6, 4, 5, 8, 9, 7, 3, 5, 9, 4, 6, 2, 8, 9, 7, 8, 4, 1, 2, 7, 9, 0, 7, 0, 1, 7, 7, 0], [2, 0, 1], [1, 0, 2], [], [1, 1, 1], [0, 0, 0], [], [], [], [4, 1, 2, 2, 1, 5, 6, 0, 5, 5, 6, 6, 5, 5, 4, 6, 0, 6, 5, 5, 0, 1, 0, 6, 2, 3, 3, 0, 6, 3, 2, 1, 2, 4, 2, 0, 6, 5, 3, 2, 4, 4, 4, 2, 2, 5, 2, 0, 5, 5, 1, 4, 3, 0, 4, 1, 3, 2, 3, 5, 4, 3, 0, 4, 6, 4, 0, 6, 0, 0, 1, 6, 2, 1, 0, 6, 2, 4, 6, 6, 0, 5, 6, 6, 1, 4, 6, 4, 3, 1, 0, 5, 0, 0, 6, 5, 0, 2, 1, 1, 5, 5, 6, 4, 2, 2, 3, 0, 6, 2, 2, 5, 4, 2, 1, 5, 6, 5, 3, 4, 3, 6, 2, 5, 3, 1, 3, 3, 0, 1, 3, 5, 1, 0, 2, 2, 0, 5, 4, 0, 5, 2, 0, 5, 6, 1, 4, 1, 0, 1, 0, 0, 1, 2, 2, 1, 4, 5, 1, 1, 1, 5, 2, 3, 6, 4, 6, 3, 3, 2, 1, 4, 3, 4, 2, 0, 6, 6, 4, 1, 3, 4, 2, 0, 1, 2, 0, 3, 3, 4, 0, 3, 3, 4, 0, 2, 3, 1, 4, 1, 6, 1, 3, 5, 1, 2, 2, 3, 0, 4, 6, 6, 4, 5, 0, 5, 2, 3, 0, 1, 3, 3, 1, 3, 2, 2, 5, 5, 4, 4, 6, 6, 3, 2, 1, 5, 1, 3, 5, 4, 4, 3, 4, 6, 2, 3, 4, 6, 5, 5, 5], [], [2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 0, 2, 3, 3, 3, 1, 3, 1, 3, 0, 2, 3, 2, 3, 0, 2, 3, 2, 3, 1, 1, 1, 0, 3, 2, 2, 2, 2, 3, 2, 2, 1, 3, 2, 1, 0, 2, 1, 2, 0, 0, 2, 1, 2, 1, 3, 0, 3, 2, 3, 3, 0, 0, 0, 2, 1, 0, 1, 0, 3, 2, 1, 2, 3, 2, 1, 3, 3, 0, 3, 2, 2, 3, 1, 0, 3, 2, 2, 1, 0, 0, 3, 3, 1, 3, 2, 1, 1, 0, 3, 2, 2, 1, 0, 3, 1, 1, 3, 3, 2, 1, 2, 1, 1, 0, 2, 2, 0, 3, 1, 1, 3, 3, 1, 2, 0, 3, 2, 3, 0, 1, 3, 0, 3, 2, 0, 0, 3, 1, 2, 2, 3, 0, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 3, 1, 0, 0, 3, 0, 1, 2, 0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 2, 2, 2, 2, 3, 3, 0, 1, 1, 3, 0, 3, 3, 2, 0, 2, 0, 1, 3, 1, 3, 3, 0, 0, 1, 2, 3, 1, 2, 3, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 0, 1, 0, 0, 3, 1, 0, 0, 1, 2, 1, 0, 3, 3, 3, 0, 3, 2, 2, 2, 3, 3, 3, 2, 3, 2, 1, 1, 1, 3, 1, 0, 0, 1, 2, 3, 1, 0, 3, 3, 3, 2, 0, 2, 2, 3, 0, 2, 3, 0, 3, 0, 2, 2, 2, 1, 3, 0, 1, 0, 2, 0, 0, 3, 2, 2, 2, 1, 3, 3, 0, 2, 0, 3, 2, 2, 3, 1, 0, 3, 1, 2, 2, 0, 2, 2, 0, 2, 0, 0, 1, 0, 3, 0, 0, 2, 3, 2, 2, 0, 2, 2, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 1, 0, 1, 2, 2, 1, 3, 2, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 3, 3, 1, 1, 1, 2, 0, 2, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 0, 1, 3, 0, 1, 1, 2, 3, 0, 0, 2, 3, 3, 1, 1, 1, 2, 1, 0, 2, 2, 0, 2, 3, 2, 0, 2, 2, 2, 0, 3, 1, 0, 2, 1, 3, 3, 2, 1, 3, 1, 1, 1, 0, 3, 0, 2, 2, 2, 2, 1, 3, 0, 2, 3, 0, 2, 0, 2, 3, 3, 3, 1, 1, 2, 1, 0, 3, 3, 1, 0, 2, 2, 3, 0, 0, 1, 3, 0, 2, 3, 3, 1, 1, 1, 3, 3, 2, 0, 0, 0, 2, 0, 3, 3, 1, 2, 3, 2, 3, 3, 1, 3, 3, 0, 2, 3, 0, 2, 3, 2, 1, 2, 0, 3, 1, 1, 0, 2, 2, 0, 2, 0, 0, 3, 0, 0, 2, 2, 1, 0, 3, 1, 3, 3, 0, 0, 3, 3, 3, 2, 2, 3, 2, 2, 2, 2, 1, 2, 2, 1, 3, 3, 3, 2, 0, 2, 2, 3, 0, 1, 0, 1, 3, 3, 3, 2, 2, 0, 1, 3, 0, 1, 0, 0, 2, 2, 0, 0, 0, 1, 3, 2, 2, 3, 1, 3, 3, 0, 3, 0, 2, 3, 0, 2, 3, 3, 3, 3, 3, 2, 1, 3, 3, 0, 3, 0, 1, 1, 0, 1, 0, 2, 3, 0, 2, 3, 1, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 2, 3, 2, 3, 2, 2, 2, 1, 0, 0, 3, 2, 2, 2, 0, 3, 0, 2, 2, 0, 3, 1, 3, 0, 2, 3, 3, 1, 0, 0, 0, 3, 3, 1, 2, 2, 0, 3, 1, 3, 0, 2, 3, 1, 1, 3, 1, 1, 0, 0, 3, 3, 2, 0, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2, 2, 0, 3, 2, 2, 2, 0, 3, 1, 3, 3, 3, 1, 2, 0, 0, 2, 2, 1, 0, 2, 2, 1, 2, 2, 3, 3, 1, 3, 1, 3, 2, 3, 2, 3, 0, 3, 1, 1, 0, 1, 3, 0, 1, 0, 1, 0, 3, 0, 1, 0, 3, 1, 1, 1, 3, 2, 0, 0, 2, 3, 2, 0, 0, 0, 1, 1, 1, 2, 2, 0, 1, 1, 0, 2, 2, 1, 2, 2, 2, 3, 1, 2, 0, 2, 1, 2, 2, 2, 0, 2, 3, 3, 2, 3, 2, 0, 2, 0, 2, 1, 2, 1, 3, 1, 2, 1, 1, 2, 0, 0, 3, 0, 1, 0, 1, 1, 2, 2, 3, 3, 1, 2, 3, 0, 1, 2, 0, 1, 3, 0, 2, 1, 1, 3, 2, 3, 2, 1, 3, 1, 2, 2, 2, 2, 1, 3, 1, 0, 0, 1, 0, 3, 2, 3, 3, 3, 0, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 0, 2, 2, 0, 0, 0, 1, 1, 0, 0, 1, 3, 0, 2, 3, 2, 2, 2, 1, 0, 3, 3, 0, 1, 3, 3, 3, 1, 0, 1, 2, 0, 3, 3, 0, 1, 0, 2, 3, 1, 3, 3, 3, 0, 2, 0, 1, 0, 3, 0, 3, 3, 2, 2, 2, 3, 3, 1, 2, 3, 0, 2, 3, 3, 0, 2, 1, 1, 1, 0, 2, 1, 1, 0, 2, 3, 3, 0, 1, 0, 0, 3, 3, 1, 3, 1, 0, 2, 2, 0, 1, 3, 3, 2, 1, 0, 1, 0, 2, 0, 2, 0, 1, 1, 2, 0, 3, 2, 3, 2, 1, 0, 0, 1, 2, 2, 2, 2, 0, 1, 0, 3, 3, 3, 2, 0, 2, 3, 3, 2, 2, 3, 3, 2, 2, 0, 1, 2, 0, 2, 2, 1, 0, 0, 0, 1, 3, 3, 1, 3, 2, 1, 0, 2, 3, 0, 0, 2, 0, 3, 2, 3, 1, 2, 1, 1, 1, 3, 3, 2, 1, 3, 2, 2, 3, 0, 1, 2, 1, 2, 2, 1, 2, 0, 0, 2, 3, 1, 0, 0, 3, 1, 0, 2, 3, 1, 0, 3, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 3, 3, 0, 1, 2, 2, 1, 0, 1, 3, 2, 1, 0, 3, 3, 1, 0, 2, 2, 3, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [2, 1, 1, 1, 1, 0, 2, 2, 0, 0, 1, 2, 0, 0, 2, 2, 0, 1, 1, 0, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 2, 1, 0, 2, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0, 2, 2, 0, 2, 2, 1, 1, 0, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 0, 1, 0, 0, 0, 2, 0, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 0, 2, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 2, 2, 1, 2, 0, 1, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 0, 0, 0, 1, 2, 0, 2, 1, 2, 2, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 2, 1, 2, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 2, 1, 2, 0, 1, 1, 1, 0, 2, 0, 1, 2, 1, 0, 0, 2, 1, 0, 1, 2, 1, 1, 0, 1, 1, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 2, 1, 1, 0, 2, 1, 2, 0, 2, 2, 2, 0], [1, 1, 0, 2, 0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 2, 0, 2, 2, 1, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 2, 1, 0, 0, 1, 2, 0, 2, 1, 0, 2, 2, 1, 1, 2, 0, 1, 1, 1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 2, 1, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 0, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 1, 2, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 0, 1, 2, 1, 2, 1, 2, 1, 2, 2], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 89, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(abs(divInt(max(in1, ( i1 - i2 )),i2)),int(8.0)) == i1\\nb0 = divInt(max(max(max(int(3.0), min(int(0.0), abs(in2))), ( abs(( min(res0, divInt(min(( max(int(7.0), int(1.0)) - int(0.0) ), i0),abs(( ( ( ( min(( ( int(1.0) + min(( int(9.0) * in2 ), ( int(3.0) + ( in2 - res0 ) )) ) * ( int(9.0) + divInt(int(1.0),abs(res0)) ) ), abs(( min(max(in2, in2), in1) - divInt(int(2.0),res0) ))) * int(9.0) ) - i0 ) - max(( int(0.0) + divInt(min(mod(int(5.0),abs(max(res0, max(mod(mod(max(int(7.0), in2),min(divInt(( int(4.0) - in2 ),i0), min(abs(int(4.0)), min(( int(9.0) - int(3.0) ), i1)))),max(( mod(int(8.0),i0) + min(int(5.0), int(1.0)) ), max(max(( int(5.0) - mod(int(5.0),int(5.0)) ), res0), mod(mod(i2,abs(int(3.0))),int(5.0))))), min(min(int(1.0), ( in0 + min(divInt(min(in0, int(5.0)),min(i0, min(divInt(res0,in0), min(int(5.0), ( divInt(max(i2, int(1.0)),max(abs(max(int(9.0), max(abs(int(6.0)), max(( min(int(9.0), i1) + i2 ), abs(in1))))), int(9.0))) - divInt(i2,int(1.0)) ))))), i0) )), int(3.0)))))), res0),int(4.0)) ), in2) ) + mod(int(6.0),int(0.0)) )))) - ( mod(divInt(mod(abs(min(in0, int(3.0))),int(1.0)),max(i2, min(min(mod(in1,( in1 - int(7.0) )), max(int(5.0), min(min(in1, i2), int(5.0)))), ( max(int(5.0), divInt(min(int(9.0), int(4.0)),int(4.0))) - int(7.0) )))),int(0.0)) * abs(( ( int(2.0) + mod(i2,int(2.0)) ) * in2 )) ) )) * i2 )), min(int(4.0), i0)),in2) \\l int(9.0)\\nb2 = mod(int(6.0),in2) \\g max(min(abs(i1), abs(( ( mod(min(abs(abs(( max(divInt(int(5.0),int(8.0)), int(6.0)) - max(int(2.0), in1) ))), in0),int(8.0)) * ( min(int(3.0), i0) - abs(abs(abs(mod(in1,( divInt(max(i1, ( abs(in0) + max(i2, ( mod(( int(2.0) + min(in0, int(2.0)) ),in2) * divInt(in1,in0) )) )),abs(( divInt(( int(7.0) - min(abs(i0), ( in1 + max(divInt(( max(int(0.0), res0) + max(int(0.0), divInt(( in1 * divInt(divInt(i0,( res0 - i0 )),int(2.0)) ),i0)) ),max(i1, res0)), mod(max(( ( i2 * ( divInt(int(9.0),int(1.0)) - i1 ) ) + i0 ), ( int(3.0) + abs(max(max(res0, ( int(8.0) - i2 )), int(5.0))) )),( ( int(0.0) * max(( divInt(( mod(int(4.0),int(9.0)) + ( int(3.0) * in1 ) ),mod(res0,abs(min(int(2.0), int(9.0))))) - int(8.0) ), ( res0 + ( max(int(9.0), int(7.0)) * min(mod(( i0 * min(int(5.0), int(0.0)) ),in2), int(7.0)) ) )) ) - min(res0, int(4.0)) ))) )) ),int(0.0)) - mod(abs(res0),i1) ))) * ( min(abs(int(9.0)), int(0.0)) + int(2.0) ) ))))) ) ) - ( int(6.0) - in1 ) ))), ( divInt(res0,( abs(mod(in1,mod(( ( in0 - max(int(8.0), i1) ) * ( int(1.0) * max(max(( int(6.0) + max(int(5.0), int(7.0)) ), int(2.0)), i0) ) ),max(in2, ( mod(mod(divInt(int(5.0),abs(i0)),mod(abs(i0),( res0 * mod(max(abs(abs(int(0.0))), int(8.0)),mod(int(8.0),in2)) ))),max(max(int(3.0), i0), divInt(mod(abs(i2),i1),int(3.0)))) + abs(i1) ))))) - ( abs(max(int(5.0), int(0.0))) + int(3.0) ) )) + max(min(divInt(in2,in2), res0), ( in1 - max(abs(int(8.0)), ( min(mod(max(min(int(7.0), max(min(i2, ( min(i2, mod(min(( int(1.0) + mod(in0,min(int(9.0), int(3.0))) ), i0),divInt(( res0 + ( i2 - i2 ) ),max(in2, in1)))) * mod(mod(int(9.0),i2),abs(int(2.0))) )), min(abs(i1), in2))), min(min(max(( mod(max(( ( divInt(mod(int(0.0),divInt(( int(8.0) - max(min(min(( res0 - ( ( max(in2, int(7.0)) + in0 ) * int(3.0) ) ), min(max(abs(( divInt(in1,int(7.0)) * max(in0, int(1.0)) )), res0), i2)), divInt(mod(in2,in0),i1)), int(2.0)) ),min(divInt(mod(max(int(3.0), min(abs(in0), max(in0, mod(abs(i0),( max(abs(min(abs(abs(mod(int(6.0),max(abs(i1), min(in0, int(1.0)))))), int(1.0))), in2) - int(4.0) ))))),i1),( max(i0, mod(min(int(4.0), ( int(1.0) + int(9.0) )),( i2 - i2 ))) * max(i0, in2) )), int(8.0)))),in1) - divInt(abs(divInt(min(divInt(divInt(( int(0.0) + i0 ),in2),min(divInt(mod(( i2 + max(i0, mod(( in2 - abs(int(8.0)) ),abs(res0))) ),( min(min(int(2.0), i1), in1) * i1 )),abs(abs(int(4.0)))), mod(divInt(i0,min(int(6.0), min(i1, ( min(int(8.0), int(9.0)) - max(int(4.0), int(2.0)) )))),i0))), i0),abs(min(( i1 * int(6.0) ), abs(int(7.0)))))),int(6.0)) ) + max(abs(( int(5.0) + int(0.0) )), mod(mod(i2,abs(( ( mod(i2,min(int(1.0), max(min(max(int(2.0), ( i1 + in1 )), ( divInt(int(8.0),in2) * divInt(( int(9.0) * ( divInt(max(max(int(3.0), min(int(2.0), max(( min(( min(i1, min(int(0.0), int(7.0))) + i1 ), int(1.0)) - max(i1, int(6.0)) ), in2))), int(5.0)),i2) - min(in0, int(0.0)) ) ),res0) )), abs(int(6.0))))) - int(7.0) ) * int(1.0) ))),abs(mod(in1,res0)))) ), ( max(divInt(in0,in0), i2) - int(2.0) )),int(3.0)) * int(8.0) ), mod(mod(i1,int(5.0)),int(3.0))), in1), ( divInt(int(4.0),divInt(( ( abs(int(9.0)) * ( in0 * divInt(int(6.0),mod(divInt(mod(in1,( max(max(mod(abs(( i2 * ( i0 - divInt(int(9.0),mod(int(7.0),max(int(7.0), divInt(int(1.0),int(0.0))))) ) )),mod(res0,res0)), min(in1, int(1.0))), i1) + int(3.0) )),int(0.0)),mod(( min(min(int(1.0), ( max(in0, int(9.0)) * divInt(in1,int(0.0)) )), max(i2, ( int(2.0) * int(3.0) ))) + max(divInt(max(divInt(int(2.0),min(int(4.0), divInt(divInt(mod(( int(3.0) - min(int(5.0), i0) ),i1),int(1.0)),i2))), max(( max(abs(max(i0, ( ( in0 - mod(int(6.0),int(9.0)) ) - divInt(int(5.0),( int(6.0) - in0 )) ))), mod(( in1 * i0 ),in0)) * int(2.0) ), int(4.0))),in0), in1) ),int(0.0)))) ) ) * abs(i0) ),( min(( ( divInt(int(9.0),i2) * max(max(in0, int(9.0)), max(min(abs(int(2.0)), i1), int(1.0))) ) - divInt(in1,min(max(i1, int(9.0)), res0)) ), ( abs(int(7.0)) * max(min(min(i1, mod(in0,int(2.0))), in2), abs(i1)) )) - max(min(mod(( ( max(abs(int(6.0)), divInt(max(i2, divInt(max(min(i2, mod(int(8.0),int(4.0))), int(8.0)),in0)),( int(6.0) + int(8.0) ))) + i0 ) - ( max(max(in1, int(8.0)), res0) * res0 ) ),abs(max(int(0.0), min(int(3.0), in1)))), mod(( in2 + int(8.0) ),abs(max(mod(int(2.0),i0), int(4.0))))), in2) ))) * ( i2 + divInt(in0,int(9.0)) ) ))),int(7.0)), mod(i0,max(mod(min(mod(int(6.0),i1), in0),int(4.0)), divInt(( ( ( in0 - int(5.0) ) - i1 ) + max(max(min(( in0 * ( min(max(divInt(mod(abs(max(( ( i2 + int(8.0) ) - mod(i2,( ( int(9.0) - in2 ) * in2 )) ), in1)),int(7.0)),max(max(int(3.0), min(mod(int(5.0),in1), divInt(abs(res0),res0))), ( in0 * max(( abs(int(9.0)) + ( int(4.0) + int(6.0) ) ), int(2.0)) ))), abs(abs(( int(8.0) - abs(( mod(max(i2, int(9.0)),mod(int(7.0),mod(mod(int(8.0),mod(i1,in2)),( max(int(4.0), i1) - in0 )))) * min(int(1.0), in2) )) )))), mod(abs(int(2.0)),in1)) + max(( ( ( in1 - int(7.0) ) * ( ( in0 - in1 ) * res0 ) ) - ( i2 * abs(min(in0, int(9.0))) ) ), mod(divInt(int(0.0),in1),int(7.0))) ) ), abs(( int(0.0) - res0 ))), abs(abs(int(1.0)))), in2) ),( mod(min(int(7.0), in2),in2) * int(7.0) ))))) * int(0.0) )) )) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 241, 241, 3, 3, 0, 3, 3, 0, 0, 0, 251, 0, 1056, 292, 272, 149, 143]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 2, 2, 0, 2, 1, 1, 2, 0, 2, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 3, 5, 2, 7, 5, 8, 0, 6, 6, 3, 2, 1, 0, 9, 3, 8, 7, 8, 3, 9, 9, 6], [2, 4, 0, 2, 1, 3, 0, 1], [0, 2], [1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 1, 2, 1, 3, 2], [0, 1], [0, 1, 1, 1, 0], [5, 4, 1, 0, 4, 1, 2, 3, 1, 5, 0, 6, 5, 1, 6, 5, 2, 2, 6, 1, 2, 3, 0, 3, 5, 3, 4, 1, 2, 4, 5, 2, 3, 6, 5, 3, 4, 3, 4, 5, 2, 4, 4, 4], [1, 1, 1, 1, 1], [0, 3, 1, 2, 0, 0, 0, 0, 1, 3, 1, 2, 0, 3, 3, 2, 1, 2, 3, 0, 0, 1, 0, 1, 2, 2, 3, 2, 3, 0, 3, 1, 3, 2, 1, 0, 0, 2, 0, 3, 2, 3, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 3, 2, 1, 1, 0, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 2, 1, 1, 0, 2, 0, 2, 3, 2, 2, 3, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 1, 3, 1, 1, 2, 3, 2, 3, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 1, 0, 0, 1, 1, 0, 1, 1, 2, 1, 0, 1, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 2], [2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= in1\\ni1 += abs(int(1.0))\\nif ( divInt(i0,in1) == i1 or ( not True and not i2 \\le int(2.0) ) ):{:\\nif False:{:\\nb0 = max(int(8.0), mod(in0,min(min(divInt(int(1.0),divInt(max(i1, in2),int(3.0))), i0), int(5.0)))) \\l ( ( max(divInt(min(res0, max(int(2.0), max(( int(7.0) * in2 ), i1))),( res0 + abs(( max(min(in2, int(5.0)), i2) * i2 )) )), max(res0, int(8.0))) + int(0.0) ) + i1 )\\n:}else:{:\\nif i2 == int(6.0):{:\\nin0 += i0\\n:}else:{:\\nin0 += abs(( int(6.0) * int(3.0) ))\\n:}\\n:}\\n:}\\nif ( in2 \\g divInt(abs(in0),int(2.0)) or int(1.0) \\ge mod(max(in1, mod(min(( i1 + ( int(0.0) + i2 ) ), in1),divInt(int(9.0),int(3.0)))),in2) ):{:\\nb2 = not mod(int(8.0),int(7.0)) \\l i2\\n:}else:{:\\nif ( in0 * mod(min(mod(divInt(max(res0, in2),divInt(in0,in1)),in0), min(in1, in2)),i2) ) \\g min(int(8.0), min(int(3.0), int(9.0))):{:\\nin1 += divInt(min(divInt(abs(int(9.0)),int(6.0)), in1),in1)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 26, 26, 8, 2, 3, 16, 8, 8, 2, 5, 44, 5, 114, 25, 24, 14, 16]}, {"genotype": [[0], [0, 1, 0, 1, 1], [1, 2, 1, 0, 1], [0], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 5, 8, 9, 7, 7, 4, 5, 1, 7], [0, 4, 0, 4], [0, 2, 1], [1], [0, 0, 1, 1, 1, 1], [0, 0, 0, 0], [1, 3], [1], [1], [3, 5, 1, 5, 6, 5, 4, 5, 2, 4, 2, 6, 1, 4], [1], [2, 0, 0, 2, 2, 0, 2, 1, 2, 2, 0, 2, 3, 1, 1, 3, 0, 0, 0, 3, 0, 2, 0, 3, 1, 0, 2, 1, 3, 3, 1, 1, 2, 3, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 2, 2, 1], [0, 2, 2, 0, 1], [1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\nif ( ( in0 + in2 ) \\l mod(divInt(i1,mod(int(9.0),divInt(divInt(in2,( max(int(3.0), int(5.0)) * min(res0, in2) )),in1))),min(in2, ( i2 * max(int(8.0), in1) ))) or ( int(9.0) + abs(abs(int(7.0))) ) \\le int(7.0) ):{:\\ni2 -= divInt(max(int(4.0), int(5.0)),int(1.0))\\nb2 = res0 \\l int(7.0)\\n:}else:{:\\nb1 = i1 \\le in1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 11, 11, 4, 3, 1, 6, 4, 2, 1, 1, 14, 1, 41, 10, 7, 5, 6]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [2, 3, 1], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(231.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}][{"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 0, 2, 1, 1], [0, 1], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 8, 2, 9, 4, 1, 9, 7, 9, 1, 4, 8, 4, 0, 9, 6, 1, 9, 1, 5, 1, 2, 6, 6, 3], [4, 5, 5], [1, 0], [0], [0, 1, 0, 1, 0, 1], [0, 0, 0], [1, 3, 1], [1, 0], [0], [1, 4, 1, 2, 5, 1, 1, 6, 4, 2, 5, 4, 1, 3, 2, 3, 6, 2, 5], [1], [3, 1, 2, 3, 0, 3, 1, 3, 1, 2, 3, 1, 2, 2, 1, 0, 1, 1, 2, 0, 2, 0, 0, 2, 3, 1, 2, 2, 0, 0, 3, 1, 2, 1, 0, 3, 3, 3, 2, 2, 1, 2, 2, 1, 2, 2, 0, 3, 1, 2, 0, 1, 0, 1, 1, 2, 3, 2, 2, 0, 1, 0, 0, 2, 1, 2, 0, 0, 2, 1, 2, 3, 2, 0, 2, 1, 1, 0, 1, 2, 1, 2, 3, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [2, 1, 1, 0, 0, 1, 2, 0, 2, 2, 1, 1, 2, 1], [2, 2, 0, 1, 2, 0, 1, 2, 2, 1, 1, 1, 0, 2, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nb1 = abs(int(8.0)) \\le divInt(max(i1, max(int(3.0), min(int(8.0), ( min(int(2.0), divInt(mod(int(9.0),in1),int(4.0))) * int(1.0) )))),divInt(i1,( i2 * in2 )))\\nloopBreak% = 0\\nwhile ( ( max(int(9.0), mod(mod(i1,i1),abs(int(7.0)))) + ( int(9.0) - res0 ) ) != min(abs(abs(( ( int(1.0) * mod(( int(4.0) + ( mod(in1,max(int(8.0), ( i2 - int(4.0) ))) * in2 ) ),int(0.0)) ) * int(9.0) ))), mod(max(( ( in1 - int(6.0) ) - i1 ), in0),divInt(int(1.0),mod(i2,in0)))) and True ):{:\\nb0 = ( int(9.0) - ( abs(divInt(res0,divInt(int(1.0),int(5.0)))) + i2 ) ) != int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 *= ( int(2.0) + divInt(max(int(6.0), int(6.0)),int(3.0)) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 26, 26, 3, 2, 1, 6, 3, 3, 2, 1, 19, 1, 86, 28, 14, 15, 14]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 0, 0, 2, 1, 1, 0, 2, 2, 1, 1], [0, 0, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 8, 7, 8, 7, 2, 9, 2, 6, 9, 3, 9, 5, 1, 8, 0, 7], [3, 1, 2, 4, 2], [0, 2, 0, 2], [1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 2, 3, 1, 3, 1, 3, 1, 0], [0, 1, 1, 0], [1, 0, 0], [3, 6, 0, 4, 3, 4, 0, 2, 1, 1, 1, 1, 3, 5, 2, 2, 5, 3, 0, 3, 5, 0, 6, 3, 0, 4, 3, 2, 5, 5, 6, 6, 6, 0, 1, 4, 0, 1], [0, 1, 1, 1, 1], [2, 0, 2, 2, 2, 1, 0, 2, 0, 2, 1, 3, 2, 0, 3, 0, 0, 0, 1, 0, 3, 1, 0, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 1, 1, 2, 2, 0, 0, 3, 1, 0, 1, 3, 1, 3, 0, 2, 3, 0, 0, 2, 1, 1, 0, 3, 0, 1, 2, 0, 0, 2, 0, 2, 1, 0, 2, 0, 1, 0, 2, 3, 0, 3, 3, 0, 3, 3, 0, 2, 0, 2, 0, 3, 0, 3, 2, 2, 3, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [0, 2, 1, 2, 0, 2, 2, 1, 0, 2, 0, 1, 2, 1, 2, 1, 2, 0], [0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 2, 2, 0, 2, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( res0 + ( divInt(( int(5.0) * i0 ),mod(in1,( int(0.0) + min(( in0 * abs(in1) ), i0) ))) + i2 ) )\\nif int(8.0) \\ge i1:{:\\ni1 += max(int(7.0), i1)\\nb0 = True\\nif not ( abs(mod(divInt(min(int(8.0), mod(int(7.0),mod(divInt(int(2.0),int(9.0)),divInt(divInt(i1,in0),abs(int(2.0)))))),in2),int(6.0))) - abs(int(9.0)) ) \\g max(i2, mod(min(i2, in2),( int(3.0) + int(9.0) ))):{:\\nb2 = ( False or in0 == abs(i0) )\\n:}\\n:}else:{:\\nin0 -= int(5.0)\\nin2 += divInt(i0,res0)\\n:}\\nif ( divInt(in0,( int(1.0) - i0 )) \\le ( in1 * int(8.0) ) or False ):{:\\nloopBreak% = 0\\nwhile ( in0 == ( min(i2, max(abs(in2), max(abs(in2), mod(res0,( res0 * max(res0, abs(divInt(( min(i0, i1) + int(0.0) ),int(7.0)))) ))))) * in1 ) or True ):{:\\ni0 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 18, 18, 5, 4, 3, 14, 5, 9, 4, 3, 38, 5, 95, 26, 18, 16, 14]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 5, 3, 9, 2, 6, 7, 8, 9, 1, 0, 2], [0], [0, 1, 0, 2], [1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0], [3, 3, 0, 3, 0, 0], [], [], [0, 6, 4, 1, 2, 3, 5, 0, 0, 1, 0, 2, 4, 3, 5, 1], [], [3, 2, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 1, 0, 0, 1, 2, 2, 0, 3, 3, 1, 3, 2, 0, 3, 0, 2, 1, 0, 3, 2, 1, 2, 0, 3, 2, 0, 0, 0, 2, 0, 2, 1, 2, 1, 0, 0, 3, 2, 3, 1, 1, 0, 1, 3, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 2, 1, 2], [0, 1, 2, 2, 2, 1, 0, 0, 0], [1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( ( b1 or ( b0 and max(mod(mod(mod(max(i0, max(min(int(9.0), min(( res0 + int(2.0) ), in1)), i1)),int(5.0)),( ( i2 - min(max(int(3.0), max(( in0 * min(in2, mod(int(9.0),i0)) ), max(( int(2.0) * ( i0 * max(( i1 - i0 ), i2) ) ), ( in1 + divInt(int(6.0),mod(int(7.0),in0)) )))), in2) ) + abs(( max(int(8.0), int(9.0)) + i1 )) )),int(1.0)), abs(int(0.0))) \\l int(2.0) ) ) and b2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 13, 13, 1, 4, 3, 7, 1, 6, 0, 0, 16, 0, 58, 15, 14, 9, 6]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 5, 2, 1, 7, 5, 0, 9, 1, 9, 6, 7, 4, 2], [2, 0], [1, 0, 1], [0], [0, 1, 1, 0], [0, 0], [3, 0], [], [], [4, 4, 4, 0, 3, 2, 6, 6, 6, 2, 6, 2, 3, 6], [], [2, 0, 2, 3, 3, 1, 3, 0, 2, 0, 3, 0, 1, 1, 0, 3, 1, 2, 0, 1, 1, 2, 0, 2, 2, 2, 1, 3, 2, 2, 3, 0, 3, 3, 3, 3, 2, 0, 1, 2, 1, 0, 1, 0, 1, 1, 0, 3, 0, 3, 2, 3, 3, 2, 1, 0, 2, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 2, 2, 2], [0, 2, 1, 2, 1, 2, 0], [1, 1, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( in1 + mod(max(max(int(4.0), min(in1, mod(in1,max(i0, int(7.0))))), int(5.0)),in0) ) == max(int(2.0), mod(i2,int(1.0))) and int(7.0) \\l ( res0 * mod(( ( int(5.0) - abs(divInt(mod(abs(res0),max(max(max(max(divInt(res0,int(0.0)), ( int(9.0) * i2 )), int(1.0)), res0), int(9.0))),int(6.0))) ) - i2 ),min(in0, abs(divInt(abs(abs(( int(7.0) * res0 ))),( int(4.0) + int(2.0) ))))) ) )\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 15, 15, 2, 3, 1, 4, 2, 2, 0, 0, 14, 0, 59, 15, 15, 7, 8]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [2, 4, 6], [4], [0], [], [1], [0], [], [], [], [0], [], [2, 1, 1, 2, 1, 0], [0, 1], [], [1], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(2.0) - int(4.0) ) \\le mod(int(6.0),i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 6, 2, 0, 1, 1]}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 0, 0, 2, 0, 0], [0, 0], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 8, 5, 8, 7, 3, 0, 5, 0, 3, 6, 6, 2, 2, 9, 2, 9, 1, 3, 5, 7, 8, 6, 5, 3, 0, 2, 5, 8, 8, 1, 1, 6, 5, 2, 7, 4, 4, 6, 5, 9, 6, 0, 2, 8, 1, 9, 8, 8, 2, 9, 4, 8, 7, 8, 5, 2, 2, 7, 5, 3, 6, 8, 2, 1, 0, 8, 0, 4, 6, 5, 2, 4, 4, 0, 2, 9, 9, 2, 6, 7, 8, 6, 6, 1, 4, 0, 8, 5, 8, 4, 8, 5, 3, 2, 4, 0, 9, 1, 5, 3, 5, 5, 1, 2, 7, 3, 6, 5, 3, 3, 6], [3], [1], [], [0, 0, 1, 0], [0], [1, 2, 1], [0, 1], [1, 1], [5, 4, 5, 6, 3, 3, 5, 6, 3, 0, 2, 1, 1, 6, 2, 4, 6, 6, 0, 6, 0, 5, 2, 6, 2, 0, 5, 0, 1, 4, 3, 2, 6, 1, 1, 4, 0, 0, 6, 3, 2, 3, 4, 0, 0, 5, 0, 1, 1, 3, 5, 1, 4, 4, 6, 3, 5, 6, 2, 4, 3, 4, 4, 3, 4, 2, 2, 2, 4, 6, 5, 5, 4, 3, 0, 5, 1, 0, 3, 4, 2, 4, 4, 3, 4, 0, 3, 1, 3, 3, 2, 1, 3, 6, 1, 1, 1, 3, 5, 5, 6, 2, 3, 0, 1, 1, 5, 1, 1, 3, 3, 2, 2, 0, 6, 0, 0, 5, 2, 3, 1, 2, 2, 4, 2, 1, 5, 2, 6, 4, 4, 4, 1, 5, 6, 1, 0, 0], [0, 0, 0], [1, 3, 2, 2, 0, 2, 2, 0, 2, 0, 1, 3, 3, 3, 2, 0, 1, 2, 1, 1, 3, 3, 1, 0, 1, 3, 0, 3, 1, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 1, 3, 1, 3, 0, 1, 0, 2, 0, 1, 0, 3, 0, 3, 3, 3, 1, 1, 2, 0, 1, 3, 2, 3, 0, 2, 3, 2, 2, 2, 3, 0, 3, 2, 1, 1, 2, 2, 0, 1, 3, 3, 2, 2, 1, 2, 0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 3, 2, 3, 3, 2, 2, 0, 1, 1, 0, 2, 0, 0, 1, 1, 0, 1, 1, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 3, 1, 0, 3, 3, 2, 1, 3, 1, 3, 2, 2, 2, 3, 3, 2, 3, 3, 1, 2, 3, 2, 2, 3, 3, 0, 3, 3, 1, 2, 0, 1, 3, 3, 2, 3, 0, 2, 2, 3, 1, 0, 0, 2, 0, 2, 2, 2, 3, 0, 3, 1, 1, 2, 0, 0, 3, 2, 2, 3, 2, 0, 1, 0, 3, 1, 3, 0, 2, 3, 0, 2, 1, 0, 3, 0, 0, 2, 3, 1, 1, 1, 0, 1, 0, 2, 0, 2, 3, 2, 2, 0, 3, 3, 0, 3, 1, 1, 0, 1, 1, 3, 1, 3, 3, 1, 3, 2, 3, 1, 0, 3, 0, 1, 0, 3, 0, 2, 0, 0, 2, 1, 2, 0, 0, 3, 3, 0, 1, 2, 3, 3, 1, 3, 3, 0, 1, 0, 3, 0, 0, 0, 2, 2, 2, 3, 2, 3, 1, 3, 2, 0, 2, 1, 3, 0, 2, 2, 1, 1, 0, 0, 1, 0, 1, 3, 1, 1, 0, 3, 2, 2, 3, 0, 0, 0, 3, 0, 1, 3, 2, 0, 2, 0, 2, 1, 1, 2, 2, 3, 0, 2, 0, 3, 3, 1, 3, 2, 0, 1, 1, 3, 3, 0, 2, 3, 3, 0, 3, 2, 1, 2, 0, 2, 0, 0, 3, 3, 2, 0, 3, 2, 0, 3, 1, 3, 3, 0, 2, 2, 1, 1, 2, 0, 2, 3, 0, 2, 0, 0, 2, 1, 1, 3, 2, 2, 0, 2, 3, 0, 3, 3, 0, 0, 0, 2, 1, 3, 2, 0, 1, 0, 1, 0, 3, 0, 2, 1, 2, 1, 2, 3, 2, 3, 0, 0, 3, 3, 1, 0, 0, 0, 3, 0, 0, 2, 3, 1, 1, 3, 1, 3, 0, 2, 0, 3, 2, 0, 0, 2, 1, 0, 3, 1, 2, 0, 1, 2, 1, 1, 2, 2, 1, 1, 2, 3, 3, 3, 1, 0, 3, 3, 3, 3, 2, 0, 1, 0, 3, 3, 3, 2, 2, 2, 1, 0, 3, 1, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 3, 0, 1, 0, 2, 3, 0, 1, 2, 0, 2, 1, 2, 0, 2, 2, 2, 3, 2, 2, 0, 1, 1, 2, 1, 3, 2, 0, 0, 0, 1, 0, 1, 3, 3, 1, 2, 0, 3, 2, 1, 2, 3, 0, 1, 2, 1, 0, 2, 3, 3, 0, 1, 2, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 2, 1, 0, 1, 0, 2, 0, 2, 1, 0, 0, 2, 1, 0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 1, 2, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 1, 0, 1, 1, 0, 2, 1, 0, 2, 0, 2, 0, 2, 1, 1, 2, 2, 1, 1, 0, 2, 1, 2, 0, 1, 0, 2, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 2, 2, 1, 2, 2, 0, 2, 0, 1, 1, 0, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 1, 0, 0, 1, 2, 1, 1, 0, 0, 1, 2, 2, 1, 2, 2, 0, 1, 1, 1, 0, 2, 0, 2, 0, 1, 2], [0, 0, 1, 1, 2, 2, 2, 1, 0, 2, 1, 0, 2, 0, 2, 0, 1, 0, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 1, 2, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 100, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin2 = int(1.0)\\n:}else:{:\\nin1 = min(( ( in2 + ( divInt(res0,divInt(in0,int(7.0))) + min(abs(max(divInt(in0,int(8.0)), ( int(5.0) - int(8.0) ))), min(max(int(7.0), in2), int(3.0))) ) ) - min(res0, abs(int(0.0))) ), mod(( in0 * i0 ),divInt(( ( mod(i2,mod(int(5.0),min(int(0.0), abs(i1)))) * int(3.0) ) * i1 ),( res0 - int(6.0) ))))\\nif not i2 \\ge max(in1, min(min(abs(int(6.0)), int(2.0)), ( res0 + int(2.0) ))):{:\\nb1 = False\\n:}else:{:\\nres0 = max(( min(i0, ( abs(( divInt(mod(min(res0, min(mod(int(9.0),int(2.0)), ( divInt(i0,int(9.0)) * max(abs(mod(( int(1.0) - ( in2 + i2 ) ),( mod(res0,( divInt(i2,( ( min(mod(min(max(mod(( i0 * int(3.0) ),int(5.0)), in2), ( i0 + i1 )),int(7.0)), int(8.0)) * in1 ) + int(6.0) )) - int(5.0) )) + min(( in0 * int(3.0) ), int(0.0)) ))), i2) ))),mod(divInt(( max(abs(int(2.0)), res0) - max(abs(divInt(int(5.0),min(int(8.0), max(( ( divInt(min(min(divInt(min(min(int(8.0), mod(max(( mod(min(min(i1, abs(max(int(1.0), ( i1 + int(1.0) )))), max(max(divInt(min(in1, mod(( max(int(6.0), i0) + i0 ),mod(res0,( ( ( max(in0, min(int(5.0), int(2.0))) * mod(i2,in0) ) - abs(( mod(max(( in1 - int(7.0) ), i0),min(int(4.0), abs(i0))) - ( min(in2, mod(int(4.0),i0)) * abs(i1) ) )) ) * i1 )))),mod(min(int(6.0), int(5.0)),int(9.0))), in0), int(6.0))),in2) + ( i1 + divInt(abs(mod(mod(in1,max(max(in1, abs(int(0.0))), int(2.0))),res0)),int(8.0)) ) ), int(1.0)),abs(int(9.0)))), max(max(int(8.0), min(mod(abs(int(8.0)),in0), max(in2, int(2.0)))), res0)),abs(i2)), ( in1 + in0 )), divInt(int(9.0),mod(in1,in1))),min(max(in0, int(4.0)), ( min(abs(int(8.0)), max(max(in1, int(7.0)), i2)) + max(i2, i2) ))) + in1 ) + mod(( ( min(mod(max(int(8.0), min(( res0 + mod(int(5.0),min(in2, mod(( int(2.0) - int(2.0) ),in2))) ), in1)),int(7.0)), in0) - int(5.0) ) - max(int(3.0), int(6.0)) ),i0) ), max(( ( min(in2, i1) + i0 ) + abs(in0) ), int(8.0)))))), abs(divInt(in1,divInt(i2,( int(2.0) - int(1.0) ))))) ),( ( max(in1, ( in1 + abs(abs(int(0.0))) )) - min(( in0 + int(8.0) ), int(0.0)) ) + abs(min(in1, divInt(max(max(i0, min(mod(int(4.0),( in0 * ( i1 - in0 ) )), min(abs(( in0 + abs(( i2 - min(int(6.0), max(max(i1, ( mod(int(5.0),int(2.0)) + ( in0 + divInt(max(res0, ( i1 + i1 )),divInt(int(4.0),int(4.0))) ) )), min(mod(( i1 + divInt(abs(in0),max(min(in2, in2), res0)) ),( int(0.0) - min(( i2 * int(2.0) ), in0) )), int(9.0)))) )) )), i0))), max(i1, mod(int(9.0),mod(int(2.0),divInt(max(( max(i1, in2) * max(max(int(6.0), i1), i1) ), in0),abs(in0)))))),i2))) )),( abs(int(7.0)) * int(8.0) ))),max(int(6.0), min(i2, ( i0 - min(( res0 + i0 ), divInt(int(6.0),i0)) )))) + max(int(1.0), divInt(in2,int(4.0))) )) * divInt(int(0.0),int(8.0)) )) + ( divInt(int(5.0),int(8.0)) * ( abs(max(max(int(4.0), i2), min(min(max(abs(( in0 + int(8.0) )), i1), abs(max(abs(( ( mod(int(5.0),i2) + abs(int(3.0)) ) - int(2.0) )), i2))), ( int(4.0) - mod(int(0.0),divInt(int(9.0),min(divInt(max(in1, int(1.0)),i2), divInt(max(i1, int(5.0)),mod(in2,mod(int(3.0),( i2 + divInt(mod(( max(( ( res0 - int(5.0) ) * int(5.0) ), mod(int(1.0),min(mod(in1,in1), in1))) - int(2.0) ),i1),int(7.0)) ))))))) )))) + abs(min(int(3.0), ( in2 + abs(divInt(int(6.0),mod(min(res0, int(5.0)),divInt(int(3.0),i1)))) ))) ) ) ), mod(max(abs(i0), int(3.0)),mod(int(6.0),i0)))\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 113, 113, 1, 1, 0, 4, 1, 3, 2, 2, 138, 3, 527, 145, 134, 73, 72]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 1, 2, 8, 0, 7, 9, 4, 8, 9, 4, 0, 6, 2, 6, 3, 4, 7, 3, 0, 3, 5, 9], [0, 5], [1, 0, 2], [0, 0], [0, 0, 0, 0, 1, 1], [0, 0], [3, 0, 1, 3], [0], [], [5, 1, 5, 1, 6, 6, 2, 0, 6, 5, 1, 5, 3, 0, 4, 2, 6, 1, 1], [], [3, 1, 0, 2, 2, 2, 2, 2, 3, 1, 1, 0, 3, 1, 2, 3, 2, 0, 3, 2, 2, 3, 3, 2, 1, 2, 2, 0, 3, 2, 0, 2, 2, 1, 3, 3, 0, 2, 1, 3, 3, 0, 2, 0, 2, 1, 1, 1, 1, 3, 2, 2, 3, 3, 0, 0, 3, 3, 3, 1, 0, 0, 1, 3, 0, 3, 1, 3, 1, 2, 1, 2, 3, 0, 3, 0, 0, 1, 3, 3, 1, 1, 0, 1, 2, 1, 1, 3, 2, 1, 2, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [2, 0, 2, 2, 0, 1, 2, 1, 2, 2, 2, 0, 0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2, 1, 2, 0], [0, 1, 2, 1, 2, 1, 0, 1, 2, 1, 1, 2, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b0 and True )\\nb2 = ( abs(int(1.0)) \\l in2 and ( ( mod(( ( min(int(6.0), int(3.0)) + i1 ) - abs(int(1.0)) ),divInt(abs(mod(in2,min(divInt(( max(abs(( int(2.0) * divInt(( i1 - max(mod(res0,mod(( int(8.0) * abs(abs(res0)) ),divInt(int(0.0),abs(min(i2, mod(i0,( int(7.0) - int(9.0) ))))))), int(4.0)) ),int(8.0)) )), min(( ( abs(min(res0, in2)) + min(max(abs(int(9.0)), i1), in2) ) - int(4.0) ), max(in0, min(int(0.0), min(int(6.0), ( int(2.0) * mod(min(i0, abs(in1)),i2) )))))) - int(6.0) ),max(abs(int(3.0)), int(4.0))), res0))),int(7.0))) - ( int(3.0) * int(0.0) ) ) - min(mod(int(3.0),divInt(int(5.0),i1)), int(9.0)) ) != i1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 25, 25, 2, 3, 2, 6, 2, 4, 1, 0, 19, 0, 95, 25, 26, 13, 12]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1], [1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 0, 1, 3, 0, 3, 1, 9, 1, 5, 2, 2, 1, 7, 0, 9, 4, 2, 0, 7, 0, 4, 8, 6, 8, 7, 6, 5, 7, 4, 2], [0, 5, 3, 5, 0, 4, 3, 5, 4], [1, 2, 2, 1, 1, 1], [0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 3, 1, 3, 2, 2, 3, 3, 0], [1, 1], [1], [3, 0, 4, 2, 6, 4, 5, 2, 0, 4, 0, 5, 3, 5, 1, 0, 6, 4, 3, 2], [0, 1], [3, 1, 1, 0, 1, 2, 2, 1, 3, 1, 1, 0, 3, 3, 3, 2, 3, 0, 1, 2, 3, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 3, 0, 0, 2, 1, 1, 1, 3, 3, 2, 3, 0, 2, 0, 0, 3, 2, 2, 2, 2, 1, 1, 1, 1, 3, 1, 2, 0, 2, 2, 0, 1, 0, 1, 1, 2, 2, 2, 3, 3, 2, 0, 3, 2, 3, 0, 2, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 1, 2, 2, 1, 2, 1, 2, 0, 2, 2, 1, 1, 2, 1, 2, 1], [1, 0, 2, 2, 1, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not False\\nin0 = max(int(9.0), int(8.0))\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile i0 \\l int(0.0):{:\\nif b2:{:\\nloopBreak% = 0\\nwhile divInt(( int(1.0) - max(int(3.0), int(0.0)) ),in1) != abs(abs(max(mod(abs(i2),int(3.0)), divInt(max(int(1.0), res0),mod(int(9.0),int(1.0)))))):{:\\nb1 = ( in1 \\ge int(5.0) and False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(2.0) != in2:{:\\nloopBreak% = 0\\nwhile ( i2 \\l int(2.0) or not not i0 \\le int(1.0) ):{:\\nloopBreak% = 0\\nwhile abs(in1) \\ge i0:{:\\nin2 += ( int(7.0) * int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = ( int(9.0) != min(abs(mod(abs(in0),mod(in2,i1))), max(( divInt(( mod(int(4.0),int(2.0)) * int(0.0) ),int(7.0)) - max(int(0.0), ( i0 - mod(divInt(res0,int(4.0)),in1) )) ), int(8.0))) and ( int(6.0) \\le divInt(( divInt(abs(max(( in0 + abs(( max(i2, divInt(int(8.0),int(7.0))) + int(6.0) )) ), int(5.0))),int(7.0)) + int(4.0) ),int(2.0)) and b1 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 7, 5, 32, 32, 9, 6, 4, 21, 9, 12, 2, 1, 20, 2, 88, 21, 17, 9, 13]}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 1, 1], [], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 5, 5, 9, 4, 7, 3, 7, 7, 7, 6, 6, 5, 7, 5, 8, 2, 3, 2, 8, 0, 6, 3, 5, 1, 5, 1, 3, 1, 6, 8, 4, 5, 2, 5, 2, 6, 3, 8, 2, 2, 7, 4, 6, 7, 7, 9, 1, 2, 2, 6, 4, 4, 4, 6, 2, 7, 0, 2, 2, 8, 8, 8, 5, 4, 9, 5, 1, 1, 0, 2, 8, 0, 4, 5, 8, 8, 6, 5, 0, 5, 9, 4, 2, 3, 9, 5, 6, 9, 7, 4, 3, 7, 2, 3, 5, 2, 3, 1, 5, 5, 4, 6, 1, 6, 5, 8, 8, 5, 1, 6, 5], [5, 2], [1, 1], [], [0, 1, 1], [0, 0], [2], [], [], [3, 4, 6, 2, 1, 6, 5, 4, 1, 3, 6, 5, 0, 0, 6, 2, 3, 5, 6, 2, 4, 4, 2, 3, 3, 3, 2, 5, 0, 4, 6, 3, 1, 6, 6, 6, 3, 0, 3, 2, 6, 0, 0, 6, 1, 5, 6, 2, 4, 1, 2, 3, 5, 6, 6, 2, 3, 3, 0, 1, 0, 1, 0, 5, 3, 6, 2, 3, 1, 2, 1, 2, 5, 5, 4, 3, 2, 1, 1, 5, 5, 3, 1, 1, 6, 0, 4, 0, 4, 4, 4, 5, 4, 6, 0, 5, 4, 6, 6, 0, 6, 2, 4, 5, 0, 5, 0, 5, 1, 6, 6, 5, 2, 5, 2, 1, 4, 1, 3, 5, 3, 1, 6, 2, 1, 1, 5, 3, 1, 5, 5, 3, 0, 1, 1, 1], [1, 1], [3, 0, 3, 3, 0, 3, 3, 1, 2, 2, 2, 3, 3, 0, 1, 3, 3, 3, 2, 0, 1, 2, 3, 0, 1, 3, 2, 2, 3, 2, 3, 0, 0, 0, 1, 0, 3, 3, 3, 2, 3, 1, 1, 0, 0, 2, 3, 0, 0, 1, 2, 0, 2, 3, 2, 1, 3, 2, 3, 2, 3, 2, 1, 3, 1, 0, 2, 2, 1, 3, 3, 2, 0, 3, 0, 1, 1, 1, 3, 1, 3, 2, 2, 1, 3, 0, 2, 0, 2, 1, 2, 0, 2, 3, 2, 1, 0, 0, 2, 0, 3, 1, 1, 3, 3, 0, 0, 1, 1, 2, 3, 3, 0, 2, 0, 3, 1, 1, 1, 3, 1, 2, 3, 1, 0, 1, 0, 3, 0, 3, 2, 3, 2, 3, 3, 3, 2, 1, 1, 0, 2, 1, 0, 1, 3, 0, 2, 3, 3, 2, 3, 3, 0, 3, 3, 2, 2, 2, 3, 3, 1, 2, 3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 2, 1, 3, 1, 0, 2, 0, 0, 0, 1, 0, 1, 3, 1, 2, 3, 3, 3, 3, 0, 1, 2, 1, 2, 2, 2, 3, 0, 2, 3, 2, 3, 1, 0, 3, 2, 2, 3, 3, 2, 3, 0, 0, 0, 0, 0, 3, 1, 2, 2, 2, 0, 1, 3, 2, 1, 3, 0, 3, 3, 0, 3, 1, 2, 0, 1, 1, 3, 1, 3, 2, 2, 0, 2, 2, 0, 1, 0, 2, 2, 0, 3, 1, 3, 2, 1, 3, 0, 2, 2, 0, 3, 2, 2, 0, 1, 3, 1, 3, 2, 3, 2, 1, 2, 0, 0, 3, 3, 3, 3, 0, 0, 2, 1, 2, 0, 2, 2, 0, 3, 1, 1, 2, 2, 2, 1, 1, 0, 2, 1, 3, 0, 1, 2, 3, 0, 1, 3, 0, 0, 3, 0, 0, 1, 0, 1, 3, 2, 0, 2, 1, 0, 2, 0, 3, 3, 1, 0, 3, 3, 3, 2, 3, 0, 0, 2, 3, 2, 1, 2, 2, 1, 3, 1, 3, 3, 2, 1, 0, 3, 3, 0, 3, 2, 0, 0, 0, 0, 3, 0, 1, 0, 0, 1, 2, 0, 2, 2, 0, 0, 3, 2, 2, 0, 2, 2, 1, 2, 2, 3, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 0, 0, 1, 3, 1, 0, 2, 3, 3, 0, 2, 0, 2, 1, 3, 1, 3, 3, 2, 3, 3, 2, 2, 3, 2, 0, 0, 1, 1, 3, 1, 0, 1, 3, 2, 1, 2, 2, 2, 2, 3, 1, 1, 0, 2, 0, 3, 0, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 2, 0, 3, 1, 0, 0, 0, 2, 3, 2, 1, 2, 0, 0, 0, 1, 3, 1, 0, 3, 0, 3, 2, 0, 2, 1, 0, 2, 2, 0, 3, 0, 2, 1, 1, 1, 0, 1, 2, 1, 2, 1, 2, 2, 2, 1, 3, 0, 1, 3, 2, 3, 3, 2, 2, 2, 1, 0, 3, 0, 2, 2, 0, 2, 2, 1, 1, 0, 3, 1, 0, 0, 3, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 2, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 2, 1, 2, 1, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 0, 1, 0, 2, 2, 1, 1, 0, 1, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 2, 2, 0, 0, 1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 0, 1, 1, 2, 1, 0, 0, 1, 2, 2, 0, 2, 2, 2, 1, 2, 1, 1, 2, 0, 2, 1, 2, 1, 0, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1], [1, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 2, 2, 1, 1, 2, 1, 0, 2, 2, 2, 1, 1, 1, 0, 1, 0, 0, 1, 0, 2, 2, 2, 0, 0, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 0, 2, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not max(in0, min(abs(in1), max(min(int(5.0), ( ( ( min(min(res0, int(0.0)), min(abs(abs(( i2 - int(5.0) ))), ( max(i1, int(5.0)) * min(( ( abs(( abs(res0) * in2 )) * in1 ) + int(9.0) ), i1) ))) * max(abs(max(divInt(min(int(4.0), int(7.0)),in0), res0)), divInt(abs(in2),i0)) ) + int(3.0) ) * mod(i0,( min(mod(int(7.0),abs(( abs(( min(divInt(int(7.0),min(int(7.0), res0)), divInt(divInt(int(6.0),max(max(divInt(i2,abs(in0)), int(6.0)), int(5.0))),int(7.0))) + abs(int(5.0)) )) + min(mod(mod(int(8.0),max(in2, divInt(res0,mod(int(2.0),divInt(i2,mod(min(( int(3.0) + in1 ), in1),( i2 - abs(int(2.0)) ))))))),int(8.0)), abs(max(in0, in0))) ))), int(0.0)) - int(6.0) )) )), ( max(min(in0, divInt(i2,max(int(3.0), int(5.0)))), int(1.0)) + abs(int(5.0)) )))) != mod(min(int(1.0), in2),int(3.0))\\nb1 = i0 == abs(in1)\\nres0 *= abs(( min(( min(abs(abs(mod(int(1.0),int(6.0)))), in0) + divInt(int(8.0),i1) ), int(4.0)) * max(res0, divInt(abs(abs(( abs(min(res0, min(max(divInt(( mod(abs(max(int(5.0), ( max(( int(2.0) + res0 ), int(5.0)) + in0 ))),( ( i0 + divInt(( int(2.0) + min(int(6.0), in0) ),mod(i2,res0)) ) + i0 )) - int(3.0) ),i0), int(8.0)), abs(int(2.0))))) - divInt(max(max(abs(abs(res0)), int(2.0)), mod(int(7.0),( mod(mod(min(i1, ( max(mod(max(int(4.0), in2),abs(( ( max(min(( min(res0, i2) + in1 ), i1), i2) - max(int(6.0), divInt(mod(( in0 * int(7.0) ),abs(mod(int(7.0),abs(in2)))),min(abs(res0), abs(int(9.0))))) ) - divInt(res0,int(1.0)) ))), int(2.0)) - abs(int(2.0)) )),max(divInt(mod(i2,mod(mod(in0,int(6.0)),in0)),mod(( i0 + abs(int(4.0)) ),max(( int(4.0) * max(i1, ( divInt(i0,abs(( mod(i1,int(4.0)) + min(int(6.0), abs(( max(divInt(int(2.0),divInt(i0,in2)), abs(max(min(abs(in0), res0), mod(int(7.0),( i2 - mod(mod(in0,max(int(0.0), int(2.0))),divInt(( ( int(2.0) - int(8.0) ) * i1 ),divInt(int(8.0),min(i2, int(8.0))))) ))))) - mod(max(i1, int(5.0)),max(i2, in2)) ))) ))) + min(in2, in1) )) ), int(4.0)))), in0)),int(9.0)) - min(( i2 * divInt(int(5.0),i1) ), ( i1 * min(min(int(1.0), in2), max(max(max(( min(in2, in0) - ( abs(( int(1.0) - mod(( int(0.0) * min(int(2.0), max(max(( int(8.0) - i1 ), max(min(i1, max(mod(res0,i0), in1)), i0)), max(in1, int(0.0)))) ),in1) )) + in1 ) ), int(4.0)), divInt(in2,( ( in1 * res0 ) * max(( ( i0 * ( ( int(5.0) - mod(mod(min(in2, in1),divInt(( ( ( ( res0 - int(8.0) ) - mod(( int(8.0) + ( mod(( int(6.0) - divInt(int(5.0),int(0.0)) ),res0) + i0 ) ),int(5.0)) ) + min(int(9.0), res0) ) - divInt(abs(abs(i2)),( in1 + divInt(int(4.0),abs(int(2.0))) )) ),min(min(mod(abs(max(( mod(min(divInt(in2,i0), int(3.0)),int(9.0)) * abs(int(5.0)) ), in2)),int(6.0)), min(( int(9.0) * mod(( divInt(( max(int(7.0), int(4.0)) * i0 ),( in2 + abs(i1) )) + int(3.0) ),mod(mod(( res0 - ( int(7.0) - res0 ) ),int(2.0)),max(divInt(in2,abs(int(3.0))), i2))) ), in2)), i2))),divInt(min(( int(5.0) - ( i1 * in1 ) ), i1),int(2.0))) ) - abs(int(3.0)) ) ) - in0 ), min(in2, abs(mod(in0,( int(1.0) * i1 ))))) ))), mod(( res0 - max(i2, ( int(5.0) - int(5.0) )) ),int(4.0)))) )) ))),i1) ))),int(6.0))) ))\\ni1 -= divInt(int(1.0),mod(int(6.0),divInt(( ( int(5.0) * max(in2, int(8.0)) ) * abs(mod(abs(max(mod(( ( int(8.0) * in0 ) + max(i1, ( ( in2 * divInt(( int(5.0) + int(1.0) ),in2) ) + max(int(6.0), in0) )) ),i0), max(i1, i1))),i1)) ),int(5.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 113, 113, 2, 2, 0, 3, 2, 1, 0, 0, 136, 2, 536, 153, 136, 79, 76]}][{"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 3, 5, 5, 9, 6, 4, 2, 7], [5, 0, 5], [2], [0, 1], [0, 1, 0, 1, 1], [0, 0, 0], [3, 3], [], [], [6, 6, 4, 0, 1, 4, 4, 0, 6, 2], [0], [3, 3, 0, 3, 0, 0, 2, 1, 2, 2, 3, 1, 1, 0, 2, 0, 2, 3, 2, 1, 2, 1, 1, 1, 1, 3, 0, 2, 0, 1, 3, 0, 3, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0], [2, 1, 2, 2, 1, 0, 2, 0], [1, 2, 2], [1, 1, 1, 1, 1]], "fitness": 76, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = abs(max(res0, abs(in1)))\\nb2 = ( i0 != mod(int(1.0),( mod(abs(int(4.0)),int(3.0)) - i1 )) and ( mod(in1,mod(max(mod(int(5.0),( int(5.0) * int(9.0) )), int(6.0)),int(4.0))) \\l min(in1, ( i0 * int(2.0) )) or abs(res0) != min(int(7.0), i2) ) )\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 750, "mapping_values": [1, 2, 2, 0, 2, 10, 10, 3, 1, 2, 5, 3, 2, 0, 0, 10, 1, 35, 8, 8, 3, 5]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 1, 2, 0, 2, 2, 0, 0, 1], [1, 1, 0, 1], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 8, 1, 1, 1, 3, 5, 6, 7, 3, 2, 8], [4, 2, 1], [2, 1, 0], [0], [0, 0, 1, 0, 1, 0, 1], [0, 0, 0], [0, 3, 1, 0], [0], [0], [1, 1, 3, 6, 1, 5, 4, 6, 4, 5], [1, 1, 1, 0], [3, 1, 3, 1, 3, 3, 3, 0, 3, 1, 1, 3, 2, 2, 1, 0, 3, 1, 0, 0, 1, 3, 2, 1, 1, 3, 1, 1, 0, 1, 0, 3, 1], [1, 1, 1], [2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 2], [0, 0, 2], [1, 1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\ni1 += abs(int(3.0))\\nloopBreak% = 0\\nwhile ( abs(int(0.0)) \\le max(max(abs(i1), max(int(8.0), int(1.0))), min(mod(mod(int(1.0),in0),max(int(1.0), res0)), i1)) and True ):{:\\nb1 = int(3.0) == abs(mod(int(5.0),int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b0:{:\\nloopBreak% = 0\\nwhile max(int(7.0), int(3.0)) \\g in2:{:\\nin1 += int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nres0 *= in1\\nin2 = abs(int(8.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 13, 13, 3, 3, 1, 7, 3, 4, 1, 1, 10, 4, 33, 3, 11, 3, 3]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1], [2, 1, 1, 0, 0, 1, 1, 1], [1], [1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 4, 6, 6, 7, 0, 4], [2, 4, 5], [2, 2], [], [1, 1, 1], [0, 0, 0], [], [], [], [2, 4, 6, 3, 3, 2, 3, 6, 4, 0, 4, 3, 6, 6, 3, 2, 2, 0, 4, 2, 0, 5], [0, 0, 1, 0, 0], [2, 1, 3, 3, 1, 2, 0, 1, 2, 1, 3, 1, 3, 0, 1, 0, 2, 2, 0, 2, 1, 3, 0, 3, 2, 2, 0, 0, 0, 1, 0, 2, 0, 0, 3, 0, 0, 0, 3, 0, 3, 3, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 2, 0, 0, 2, 2, 2, 2], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(4.0) + max(min(int(9.0), ( i2 - int(4.0) )), ( int(6.0) + max(int(6.0), abs(in1)) )) ) == int(7.0):{:\\nres0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = divInt(( i2 + divInt(int(0.0),min(in0, min(( ( res0 + in1 ) + i0 ), int(4.0)))) ),in1)\\nin0 += mod(res0,res0)\\nin0 = abs(i2)\\nb2 = i2 \\le i0\\nb2 = abs(in1) != abs(abs(i2))\\ni0 = in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 1, 7, 8, 8, 3, 2, 0, 3, 3, 0, 0, 0, 22, 5, 44, 9, 10, 7, 3]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 2, 2, 1, 2, 1, 0, 0, 0], [1, 0, 1], [1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 0, 3, 3, 1, 4, 9, 6, 6, 3, 5, 6, 7, 4, 8, 7, 9, 5, 6, 9, 0, 0, 7, 5, 7, 9, 7, 1, 6, 9, 4, 7, 3, 1, 8, 5, 9, 0, 4, 5, 0, 3, 2, 1, 4, 7, 7, 9, 2], [5, 1, 0, 0], [1, 0, 0, 1, 2], [], [1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 2], [], [1], [6, 2, 5, 2, 1, 1, 2, 1, 6, 3, 0, 3, 1, 2, 6, 3, 0, 5, 3, 5, 5, 5, 2, 5, 6, 1, 3, 3, 2, 5, 2, 0, 2, 1, 2, 2, 4, 1, 3, 0, 2], [1, 0, 0], [1, 0, 2, 2, 1, 1, 3, 3, 2, 1, 2, 1, 2, 3, 1, 2, 3, 1, 1, 3, 1, 2, 3, 1, 2, 3, 0, 0, 3, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 3, 1, 1, 2, 0, 1, 3, 2, 0, 1, 3, 0, 0, 0, 1, 3, 0, 2, 0, 1, 1, 3, 1, 3, 2, 2, 0, 0, 0, 1, 2, 1, 3, 2, 2, 3, 3, 3, 1, 0, 1, 1, 0, 3, 1, 3, 2, 2, 3, 1, 0, 0, 2, 2, 3, 0, 2, 2, 0, 0, 3, 3, 3, 2, 2, 1, 0, 3, 1, 3, 2, 0, 1, 3, 3, 0, 1, 0, 1, 0, 3, 0, 0, 0, 3, 1, 3, 1, 3, 2, 1, 1, 2, 3, 2, 1, 2, 1, 2, 0, 3, 1, 1, 3, 3, 3, 3, 1, 2, 1, 3, 2, 2, 3, 0, 1, 2, 1, 1, 3, 1, 3, 3, 0, 0, 2, 0, 2, 0, 0, 3, 1, 0, 3, 1, 3, 3, 1, 0, 2, 3, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 2, 2, 2, 1, 2, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 0, 2, 2, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 0, 2, 1, 0, 0, 1, 0, 2], [0, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 0, 0, 0, 2, 2, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(3.0)\\nloopBreak% = 0\\nwhile i2 != ( ( int(7.0) - int(0.0) ) * min(abs(mod(int(3.0),( int(3.0) * ( abs(int(1.0)) * mod(abs(int(4.0)),int(9.0)) ) ))), max(int(6.0), divInt(abs(int(6.0)),( min(in2, i2) - min(divInt(min(mod(divInt(int(3.0),mod(int(5.0),mod(divInt(divInt(max(int(6.0), int(7.0)),divInt(i1,int(4.0))),abs(mod(i1,int(8.0)))),max(i2, i1)))),res0), int(7.0)),max(in0, ( i0 * int(9.0) ))), int(5.0)) )))) ):{:\\nif min(int(6.0), min(( mod(in0,i1) - i2 ), int(9.0))) \\g mod(int(0.0),min(( mod(max(max(max(int(0.0), res0), int(7.0)), int(5.0)),in0) - min(int(7.0), abs(( divInt(min(int(9.0), i0),in2) * ( divInt(min(in0, mod(mod(in2,in2),max(max(min(divInt(divInt(int(7.0),in2),abs(int(1.0))), abs(( i2 - int(6.0) ))), min(abs(in2), int(9.0))), res0))),int(4.0)) * i1 ) ))) ), abs(in0))):{:\\nb1 = b0\\n:}else:{:\\nloopBreak% = 0\\nwhile in0 \\l i2:{:\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = not max(int(7.0), min(int(3.0), max(( int(1.0) + int(8.0) ), divInt(abs(mod(int(5.0),mod(int(9.0),( in2 + abs(int(0.0)) )))),int(4.0))))) \\l max(min(abs(abs(int(5.0))), divInt(int(0.0),abs(( divInt(min(i2, int(3.0)),( int(2.0) + int(1.0) )) * min(int(4.0), abs(max(i0, i2))) )))), divInt(i1,( i2 * i2 )))\\nin1 = min(int(7.0), i1)\\nin0 = min(int(7.0), max(min(int(9.0), i0), ( abs(i2) - int(2.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 990, "mapping_values": [1, 9, 9, 3, 6, 50, 50, 4, 5, 0, 7, 4, 3, 0, 1, 41, 3, 182, 44, 50, 18, 27]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1], [2, 1, 2, 0, 2, 1, 0, 0], [0, 1, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 3, 2, 2, 9, 7, 0, 9, 7, 5, 1, 2, 4, 1, 8, 2, 8, 8, 5, 6, 1, 2, 3, 9, 0, 8, 8, 0, 6, 6, 4, 0, 7, 4, 2, 6, 0, 2, 0], [0, 5, 5], [1, 0, 0, 1], [0], [0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0], [1, 2, 0, 3, 2, 0], [1], [0], [2, 0, 6, 1, 0, 5, 5, 5, 0, 2, 3, 6, 0, 2, 2, 3, 2, 0, 6, 3, 2, 0, 4, 0, 4, 0, 1, 4, 3, 3, 4, 4, 0, 6, 3, 4, 5, 1, 0, 2, 2, 4, 4, 4, 0, 5, 6, 1, 2, 2], [1, 0, 1], [2, 2, 3, 3, 0, 1, 0, 2, 2, 3, 0, 0, 2, 0, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 0, 1, 1, 1, 2, 2, 0, 3, 0, 0, 0, 0, 3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 2, 1, 0, 1, 2, 2, 0, 3, 1, 2, 0, 3, 0, 3, 3, 2, 3, 0, 2, 3, 0, 2, 2, 3, 3, 2, 3, 1, 3, 1, 0, 2, 0, 3, 2, 1, 0, 2, 0, 0, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 3, 2, 1, 2, 3, 1, 2, 2, 0, 1, 2, 3, 3, 1, 2, 2, 2, 1, 0, 0, 3, 2, 3, 1, 1, 0, 2, 3, 0, 0, 1, 1, 2, 3, 0, 1, 0, 0, 2, 1, 3, 1, 2, 3, 2, 2, 2, 1, 1, 0, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 3, 3, 3, 3, 0, 3, 1, 0, 1, 2, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0], [2, 1, 2, 2, 0, 1, 0, 1, 2, 1, 0, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 1, 0, 2, 1, 2, 0, 2, 2, 1, 0, 0, 2, 0, 0, 1, 1], [1, 0, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 1, 1, 0, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\ni2 -= ( ( abs(max(i0, int(4.0))) + res0 ) - ( divInt(abs(i1),i0) * ( in2 + abs(min(( max(min(max(divInt(abs(max(min(in2, int(1.0)), int(3.0))),int(2.0)), mod(mod(in2,abs(i0)),i2)), in0), res0) + abs(abs(max(int(2.0), int(9.0)))) ), int(7.0))) ) ) )\\n:}\\nloopBreak% = 0\\nwhile not b1:{:\\ni0 = max(abs(i2), ( max(mod(int(0.0),i2), int(9.0)) + divInt(( in0 + max(int(7.0), ( i2 - abs(i0) )) ),max(min(divInt(max(res0, divInt(min(in0, divInt(( min(max(divInt(max(int(5.0), min(int(1.0), i2)),( i0 * min(divInt(int(2.0),in1), ( i0 * in1 )) )), abs(int(4.0))), ( i0 * ( int(1.0) - int(8.0) ) )) * i1 ),( int(2.0) - int(8.0) ))),abs(mod(int(8.0),( max(int(5.0), mod(mod(in1,int(6.0)),( max(max(int(1.0), ( ( ( int(2.0) + in0 ) - in0 ) - min(mod(abs(int(3.0)),int(9.0)), in1) )), ( max(in1, i0) + int(0.0) )) - int(8.0) ))) * mod(abs(res0),int(8.0)) ))))),in0), in1), mod(int(0.0),min(int(6.0), mod(abs(mod(divInt(( int(6.0) + int(4.0) ),in2),i1)),int(0.0)))))) ))\\nloopBreak% = 0\\nwhile int(7.0) \\l divInt(abs(max(i0, i2)),i2):{:\\nb0 = ( not in1 != int(4.0) and min(in1, int(2.0)) != mod(min(in1, i0),( abs(min(min(max(in2, max(int(6.0), res0)), int(0.0)), ( i1 * int(2.0) ))) - int(0.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b1\\ni2 -= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 40, 40, 3, 4, 1, 9, 3, 6, 1, 1, 50, 3, 181, 45, 49, 25, 22]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [2], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [1, 9, 3], [], [], [], [], [], [], [], [], [1, 3, 0, 4], [0], [3, 3, 2, 2, 0, 3, 2, 0, 1, 0, 1, 1], [0, 0, 0], [1, 1, 2], [1, 0, 0], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = max(max(( ( in0 - abs(( i0 + int(1.0) )) ) + in1 ), int(9.0)), int(3.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 3, 3, 3, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [4, 3, 1], [2], [0], [1], [0, 1, 0], [0], [3, 1], [0], [], [1], [], [2, 3, 0, 1, 3, 3, 1, 1], [0], [2, 0, 2], [1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( ( abs(i1) - int(4.0) ) == min(abs(int(3.0)), int(1.0)) or True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 1, 3, 1, 2, 1, 0, 1, 0, 8, 1, 3, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [7, 2], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [0], []], "fitness": 100, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(72.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}][{"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 1], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 9, 6, 9, 6, 9, 5, 5, 4, 9, 5, 0, 4, 1, 5, 7, 2, 6, 0, 7, 1, 6, 1, 1, 0, 2, 2, 8, 5, 3, 7, 6, 0, 3, 5, 4, 5, 0, 1, 3, 1, 1, 1, 4, 2, 4, 1, 8, 6, 4, 1, 7, 8, 1, 5, 7, 6, 0], [4, 3, 5, 5, 0, 4, 0, 2, 4, 4, 2, 5, 3], [2, 1, 1, 0, 1, 0, 0, 2, 2], [0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 0, 2, 2, 3, 1, 1, 0, 3, 3, 0, 0], [1, 0], [1, 0, 1, 1, 0, 0], [2, 5, 4, 3, 3, 6, 3, 0, 0, 6, 4, 4, 2, 5, 1, 5, 0, 1, 2, 1, 2, 3, 0, 2, 6, 2, 6, 3, 0, 4, 0, 6, 0, 6, 2, 1, 1, 2, 0, 0, 2, 3, 4, 4, 2, 4, 4, 3, 0], [0, 1], [3, 0, 3, 2, 1, 3, 0, 0, 1, 2, 1, 2, 3, 1, 3, 2, 3, 0, 2, 1, 2, 1, 3, 1, 3, 0, 1, 1, 0, 3, 1, 2, 0, 0, 1, 2, 0, 2, 2, 3, 3, 0, 0, 0, 3, 2, 1, 1, 3, 1, 0, 1, 2, 1, 3, 3, 0, 3, 3, 2, 3, 2, 1, 3, 3, 0, 1, 1, 0, 3, 2, 0, 0, 0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 0, 1, 3, 1, 0, 1, 1, 2, 2, 0, 1, 3, 1, 2, 2, 2, 1, 1, 3, 0, 0, 1, 2, 2, 1, 0, 0, 0, 2, 3, 3, 2, 1, 1, 2, 1, 2, 3, 0, 3, 2, 3, 3, 2, 2, 3, 3, 0, 3, 0, 3, 0, 1, 0, 3, 1, 1, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 3, 0, 2, 3, 1, 3, 1, 3, 0, 3, 2, 3, 0, 0, 3, 0, 3, 2, 2, 2, 3, 2, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [2, 2, 1, 2, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 2, 2], [2, 0, 1, 2, 0, 0, 1, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 1, 2, 2, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(in2)\\nloopBreak% = 0\\nwhile b2:{:\\nif abs(( int(7.0) * max(in1, in0) )) \\le int(4.0):{:\\nb1 = ( mod(int(3.0),( abs(int(9.0)) + min(( min(in0, ( int(6.0) - ( int(9.0) * min(int(6.0), max(res0, int(9.0))) ) )) + int(5.0) ), in0) )) \\ge min(int(5.0), ( i0 + i0 )) and not b1 )\\n:}else:{:\\nif not int(4.0) != ( res0 - ( mod(min(max(in1, in1), i2),max(mod(int(9.0),int(5.0)), min(int(0.0), in2))) + int(4.0) ) ):{:\\nb0 = ( int(1.0) - min(min(i1, abs(abs(mod(abs(( int(5.0) + min(min(in2, int(7.0)), int(2.0)) )),i0)))), abs(divInt(i1,i2))) ) != i1\\n:}\\n:}\\nif not ( False or min(i2, int(6.0)) \\l abs(mod(in0,int(0.0))) ):{:\\nloopBreak% = 0\\nwhile mod(int(7.0),mod(int(1.0),( int(6.0) * i0 ))) \\le int(1.0):{:\\nloopBreak% = 0\\nwhile i2 \\l res0:{:\\nloopBreak% = 0\\nwhile True:{:\\nif b1:{:\\ni2 *= int(1.0)\\n:}else:{:\\nif ( ( b0 or min(int(0.0), res0) == int(2.0) ) and int(2.0) \\le mod(( in0 - int(8.0) ),max(int(5.0), ( divInt(divInt(int(3.0),int(7.0)),min(i0, in1)) + int(6.0) ))) ):{:\\nloopBreak% = 0\\nwhile divInt(( int(0.0) + i0 ),res0) \\le i0:{:\\nb0 = ( abs(abs(( int(3.0) * int(5.0) ))) + ( int(4.0) * ( max(res0, max(mod(min(abs(mod(( max(max(i2, min(i1, max(i1, int(5.0)))), i2) + min(int(0.0), int(1.0)) ),min(max(mod(int(3.0),( mod(int(1.0),i0) + int(1.0) )), ( ( int(1.0) + int(4.0) ) + divInt(int(2.0),int(4.0)) )), int(1.0)))), int(8.0)),int(6.0)), int(4.0))) * int(1.0) ) ) ) == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(7.0) != int(8.0):{:\\nif max(i2, ( max(int(1.0), min(int(5.0), abs(in0))) - max(mod(min(in1, in1),min(i2, abs(( divInt(( abs(( in1 * int(7.0) )) * in1 ),int(6.0)) + int(0.0) )))), in0) )) \\ge i0:{:\\nb2 = b2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 12, 6, 60, 60, 13, 9, 4, 27, 13, 14, 2, 6, 49, 2, 200, 45, 48, 27, 19]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [3], [1], [], [1], [0], [], [], [], [4, 5], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in1 \\ge in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [], [], [], [2, 0], [], [0, 0], [], [1, 0], [0], [0], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb2 = b0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 2, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [4, 9, 1], [4], [1], [], [1], [0], [], [], [], [5, 4, 2], [], [3, 2, 1, 0, 3, 3, 2, 1, 1, 0, 0], [1, 1], [0, 2, 1], [], [0, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(divInt(int(4.0),in2), abs(max(mod(int(9.0),int(1.0)), in1))) \\le i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 11, 2, 3, 0, 2]}, {"genotype": [[0], [1], [0], [], [0], [1], [3], [2], [0], [], [0, 1], [0], [2], [], [], [3], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not in0 == int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [0], [], [], [], [], [], [], [], [], [1], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= int(0.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1], [0, 2, 0, 1, 1, 1, 1], [1], [0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 0, 6, 3, 8, 5, 8, 1, 4, 7, 8, 8], [0], [2, 2, 0, 2], [], [0, 1, 0], [0], [0, 0], [], [], [5, 3, 3, 0, 0, 2, 4, 0, 3, 5, 1, 3, 0, 4, 6, 3, 5, 5], [1, 1, 0, 1], [1, 0, 3, 2, 3, 1, 3, 3, 2, 2, 0, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 0, 3, 0, 3, 1, 2, 0, 1, 0, 2, 1, 2, 2, 3, 2, 0, 0, 0, 3, 0, 0, 2, 1, 3, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 0, 1], [2, 0, 1, 0, 0, 0, 0, 1, 2, 2], [1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\nloopBreak% = 0\\nwhile int(86.0) \\l in2:{:\\nin0 *= max(mod(max(int(0.0), abs(abs(divInt(( in0 + ( ( int(6.0) - max(int(3.0), i0) ) + ( max(abs(i0), i2) + max(in1, abs(int(8.0))) ) ) ),( i0 + int(5.0) ))))),in0), divInt(int(8.0),( ( max(mod(in2,i1), in0) + min(i0, in1) ) - mod(int(1.0),max(res0, int(4.0))) )))\\nb0 = b2\\nin0 *= int(7.0)\\nin2 = int(8.0)\\nin2 *= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 13, 13, 1, 4, 0, 3, 1, 2, 0, 0, 18, 4, 50, 12, 12, 10, 5]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}][{"genotype": [[0], [1], [0], [], [0], [0, 1, 1, 1], [8, 4, 6, 5], [4], [0], [], [1], [0], [], [], [], [], [], [1, 2, 1, 1], [0], [], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(84.0) \\le ( int(6.0) * int(5.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 6, 2, 0, 4, 7, 2, 5, 4, 6, 0, 5, 3, 9, 5, 8, 6, 3, 1, 3, 5, 7, 4, 8, 1, 1, 0, 2, 9, 8, 2, 4, 3, 0, 3, 0, 6, 7, 7, 2, 3, 2, 8, 5, 7, 8, 0, 9, 0, 2, 4, 1, 7, 4, 4, 5, 5, 5], [2], [1], [], [1], [0], [], [], [], [1, 4, 0, 1, 3, 0, 2, 0, 2, 0, 4, 0, 5, 1, 5, 6, 6, 6, 0, 5, 5, 6, 0, 1, 1, 4, 1, 3, 1, 3, 1, 6, 6, 0, 2, 3, 3, 2, 6, 6, 1, 4, 5, 6, 0, 5, 5, 4, 2, 3, 1, 5, 5, 0, 0, 4, 4, 0, 4, 3, 2, 0, 4, 0, 3, 5, 2, 1, 2, 4, 1], [], [3, 0, 1, 3, 2, 3, 0, 1, 2, 3, 3, 2, 3, 2, 0, 2, 0, 3, 3, 0, 2, 0, 0, 1, 0, 3, 2, 0, 3, 2, 2, 2, 2, 0, 0, 2, 1, 3, 2, 1, 0, 1, 1, 1, 3, 3, 0, 3, 3, 2, 0, 1, 0, 0, 1, 2, 3, 1, 0, 1, 2, 0, 0, 2, 2, 2, 2, 0, 3, 2, 0, 2, 3, 1, 0, 3, 1, 2, 2, 3, 3, 0, 0, 3, 3, 1, 1, 3, 0, 1, 2, 0, 1, 1, 0, 3, 3, 2, 0, 2, 3, 2, 0, 1, 0, 3, 2, 2, 2, 3, 3, 2, 3, 1, 3, 0, 3, 0, 2, 3, 1, 3, 3, 2, 0, 3, 3, 3, 0, 3, 0, 1, 3, 2, 2, 3, 0, 2, 3, 0, 1, 0, 2, 1, 2, 1, 1, 3, 1, 3, 0, 2, 3, 2, 3, 0, 0, 1, 2, 0, 1, 1, 2, 2, 0, 0, 3, 3, 2, 0, 1, 3, 2, 1, 1, 3, 2, 2, 0, 0, 1, 0, 3, 0, 2, 0, 1, 3, 2, 3, 1, 0, 3, 1, 2, 3, 3, 3, 1, 3, 1, 3, 0, 1, 0, 2, 2, 3, 3, 3, 3, 3, 1, 0, 3, 2, 2, 0, 1, 0, 1, 3, 1, 0, 3, 2, 1, 2, 3, 2, 3, 0, 2, 1, 0, 1, 1, 0, 1, 2, 1, 3, 1, 2, 0, 1, 3, 1, 2, 2, 2, 3, 0, 1, 0, 2, 1, 3, 0, 3, 2, 0, 3, 3, 3, 0, 2, 0, 1, 2, 0, 2, 3, 1, 1, 1, 2, 3, 0, 0, 3, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 2, 1, 0, 0, 0, 1, 0, 0, 1, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 1, 0, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 0, 1, 0, 0, 2, 1, 2, 0, 2, 0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 2, 2, 1, 2, 1, 2, 2, 0, 1, 2], [0, 2, 2, 1, 0, 0, 2, 0, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 1, 0, 2, 0, 0, 1, 2, 2, 0, 2, 2, 1, 1, 0, 2, 2, 0, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(i1, int(3.0)) == min(mod(max(in1, int(7.0)),mod(abs(max(mod(min(divInt(i0,( i1 + min(min(in0, ( i0 * i2 )), int(4.0)) )), i0),max(mod(i2,min(( ( ( ( i0 * in1 ) - ( int(6.0) + min(mod(int(2.0),i0), int(0.0)) ) ) + int(4.0) ) * int(7.0) ), max(abs(in2), max(min(( i1 + int(2.0) ), in2), res0)))), int(5.0))), divInt(max(int(4.0), res0),int(6.0)))),( res0 * i0 ))), ( ( ( ( in2 - min(( in2 + ( min(int(0.0), res0) - max(int(5.0), divInt(divInt(abs(abs(i0)),i1),max(max(int(3.0), int(9.0)), min(i1, int(5.0))))) ) ), ( in1 + int(8.0) )) ) + int(6.0) ) + i1 ) * abs(max(divInt(in0,( abs(mod(i1,int(3.0))) * in0 )), abs(divInt(( ( abs(max(( min(int(1.0), max(i1, abs(res0))) + divInt(min(int(3.0), max(max(( res0 - max(min(abs(i0), max(i2, int(5.0))), max(divInt(divInt(max(in0, mod(abs(in0),int(7.0))),i2),mod(int(4.0),( int(8.0) + int(1.0) ))), max(int(1.0), abs(res0)))) ), divInt(min(divInt(max(res0, i1),int(0.0)), ( in1 * int(2.0) )),int(9.0))), ( ( in2 + res0 ) + min(min(divInt(i0,int(8.0)), abs(mod(int(2.0),int(4.0)))), max(divInt(mod(in2,in2),int(3.0)), in1)) ))),abs(i2)) ), ( in0 - int(0.0) ))) * min(divInt(abs(int(3.0)),i1), min(int(0.0), ( max(min(abs(int(6.0)), min(int(7.0), min(in2, int(7.0)))), in2) * mod(( max(max(max(min(min(int(2.0), i0), max(mod(( i0 + int(3.0) ),in1), int(2.0))), min(int(8.0), in1)), max(( int(5.0) * ( max(( min(i0, divInt(int(7.0),in1)) * int(8.0) ), int(0.0)) - in0 ) ), int(9.0))), divInt(int(0.0),max(int(2.0), ( i2 - int(4.0) )))) + abs(int(1.0)) ),divInt(divInt(( abs(i0) * int(7.0) ),in1),( int(4.0) * max(i0, abs(mod(in0,max(abs(abs(in2)), divInt(i2,int(4.0)))))) ))) ))) ) + ( i1 + ( min(int(5.0), int(5.0)) - int(5.0) ) ) ),divInt(max(i2, in1),abs(i1)))))) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 60, 60, 1, 1, 0, 1, 1, 0, 0, 0, 71, 0, 282, 70, 81, 37, 33]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1], [1, 2, 1, 1, 1, 0, 1], [1], [0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 0, 5, 0, 3, 3, 6, 4, 1, 1, 1, 2, 2, 4, 9, 3, 9, 3, 8, 1, 8, 9, 7, 4, 9, 0, 4, 1, 0, 0, 9, 7, 8, 0, 2, 0, 3, 5, 0, 0, 9, 2, 9, 4, 5, 3, 2, 1, 4, 4, 9, 1, 7, 6, 7, 1, 7, 3, 3, 7, 0, 8, 2, 8, 6, 3, 8, 8, 8, 1, 1, 1, 1, 3, 3, 9, 7, 9, 9, 1, 5, 6, 2, 5, 4, 9], [1, 2, 3, 2, 1], [1, 0, 1, 1, 1], [1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 3, 3], [0], [], [4, 4, 1, 5, 2, 4, 4, 3, 4, 3, 1, 5, 1, 4, 6, 3, 0, 4, 0, 5, 3, 0, 1, 0, 2, 1, 3, 0, 2, 6, 0, 2, 6, 2, 4, 6, 3, 1, 4, 5, 0, 6, 6, 2, 3, 3, 5, 3, 6, 5, 6, 1, 2, 5, 3, 2, 1, 4, 3, 5, 0, 5, 3, 1, 5, 2, 5, 0, 0, 5, 6, 1, 1, 4], [0, 0], [1, 3, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 3, 3, 2, 2, 2, 2, 1, 3, 0, 2, 0, 3, 1, 3, 2, 1, 1, 1, 3, 3, 0, 1, 1, 2, 2, 1, 2, 0, 2, 0, 2, 2, 0, 1, 3, 2, 0, 1, 0, 2, 0, 0, 2, 3, 2, 1, 2, 2, 3, 3, 1, 1, 1, 1, 0, 3, 3, 0, 3, 2, 0, 3, 0, 3, 3, 1, 3, 2, 0, 2, 1, 2, 3, 3, 0, 1, 2, 0, 3, 0, 3, 2, 1, 0, 3, 2, 2, 0, 0, 0, 2, 2, 3, 1, 2, 0, 2, 0, 2, 2, 2, 3, 0, 0, 0, 2, 3, 3, 1, 0, 1, 0, 0, 0, 2, 2, 3, 0, 1, 2, 3, 1, 2, 1, 1, 3, 3, 1, 3, 1, 1, 1, 3, 0, 3, 3, 1, 3, 2, 2, 1, 1, 3, 2, 2, 2, 1, 3, 1, 1, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 1, 2, 0, 2, 2, 3, 3, 2, 2, 3, 0, 1, 2, 3, 1, 2, 0, 1, 1, 3, 1, 3, 2, 0, 1, 0, 1, 2, 1, 3, 1, 1, 1, 1, 3, 3, 0, 3, 0, 0, 0, 2, 2, 2, 3, 1, 0, 0, 2, 0, 1, 3, 2, 1, 2, 0, 0, 1, 0, 1, 3, 2, 0, 3, 3, 1, 0, 1, 2, 3, 1, 2, 0, 1, 3, 3, 2, 2, 2, 2, 3, 3, 0, 1, 3, 3, 0, 2, 0, 2, 1, 1, 3, 1, 1, 2, 2, 1, 3, 1, 1, 3, 0, 1, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 0, 1, 2, 0, 3, 3, 1, 3, 0, 1, 2, 0, 3, 0, 3, 1, 2, 1, 0, 3, 0, 2, 2, 1, 3, 1, 1, 1, 3, 2, 1, 3, 1, 3, 0, 0, 2, 1, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 2, 2, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 1, 1, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 0, 2, 0, 0, 2, 2, 0, 1, 0, 2, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 0, 2, 1, 1, 0, 0, 1, 0, 2], [1, 1, 1, 1, 0, 0, 0, 2, 0, 2, 2, 1, 0, 2, 2, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 0, 1, 1, 0, 2, 2, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 74, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(0.0) \\g max(in1, ( divInt(mod(in1,i1),in2) - i2 ))\\nloopBreak% = 0\\nwhile True:{:\\nin1 = divInt(mod(in1,in0),int(7.0))\\nin1 = min(max(( ( ( divInt(int(0.0),max(in0, divInt(i1,abs(int(5.0))))) - abs(divInt(int(0.0),int(3.0))) ) - int(3.0) ) - min(min(in2, int(6.0)), int(4.0)) ), divInt(divInt(int(1.0),( i1 + mod(in1,mod(mod(res0,int(1.0)),abs(divInt(in0,int(1.0))))) )),i0)), divInt(in1,i0))\\nb0 = ( max(divInt(int(2.0),( divInt(min(max(int(2.0), int(4.0)), int(9.0)),int(3.0)) + in2 )), max(max(in0, min(divInt(i0,min(i1, max(min(int(9.0), min(( i0 + mod(int(3.0),mod(min(abs(i2), int(8.0)),mod(i1,abs(in0)))) ), min(( int(1.0) * i0 ), max(divInt(( i2 + res0 ),i0), ( ( max(int(8.0), mod(i2,mod(res0,divInt(( ( min(i2, in1) * res0 ) * ( max(max(int(9.0), in0), int(7.0)) - i1 ) ),in1)))) + in2 ) * ( mod(min(i0, int(4.0)),( min(int(9.0), divInt(int(0.0),int(4.0))) * min(abs(int(1.0)), abs(int(0.0))) )) - int(0.0) ) ))))), int(9.0)))), min(res0, min(max(int(7.0), abs(( divInt(int(8.0),int(0.0)) * abs(divInt(( divInt(int(2.0),max(int(0.0), int(3.0))) * ( max(int(5.0), divInt(min(int(0.0), min(( ( abs(int(0.0)) - mod(res0,divInt(( max(max(mod(( max(i2, int(9.0)) + ( min(int(2.0), ( in0 - int(9.0) )) - int(4.0) ) ),max(int(5.0), max(( in0 + int(3.0) ), in2))), int(2.0)), mod(int(1.0),max(int(4.0), int(4.0)))) - int(9.0) ),int(1.0))) ) - min(abs(in0), min(res0, in2)) ), res0)),divInt(( divInt(min(int(7.0), i1),i2) - mod(in2,int(6.0)) ),abs(mod(int(7.0),divInt(in0,i2)))))) * int(1.0) ) ),i1)) ))), int(7.0))))), abs(divInt(in1,min(max(int(3.0), in0), int(3.0)))))) + ( min(int(7.0), ( in2 + int(0.0) )) + abs(min(mod(divInt(divInt(( abs(abs(i0)) - int(8.0) ),abs(max(in2, ( in0 - ( int(2.0) + int(8.0) ) )))),max(int(6.0), int(3.0))),mod(mod(int(8.0),abs(int(8.0))),int(8.0))), max(i1, int(1.0)))) ) ) == divInt(int(1.0),int(1.0))\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( abs(( max(abs(abs(int(1.0))), divInt(( in2 * int(3.0) ),divInt(i2,abs(min(int(3.0), abs(in2)))))) * int(9.0) )) \\ge divInt(i0,max(i0, max(int(7.0), ( int(9.0) + in2 )))) or ( min(res0, divInt(mod(int(9.0),min(int(1.0), int(5.0))),int(6.0))) == max(divInt(int(2.0),min(int(5.0), abs(i1))), i1) and mod(int(4.0),int(9.0)) \\g in1 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 87, 87, 5, 5, 2, 9, 5, 4, 1, 0, 74, 2, 330, 89, 82, 36, 53]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1, 1, 1], [7, 2, 2, 9, 5, 8], [4], [2, 1, 0], [], [0, 0, 1], [0], [0, 2], [], [], [0, 6], [], [1, 2, 3, 0, 3, 2, 1, 2, 2, 1, 3, 1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 2], [1, 1], [1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\nb0 = not int(7.0) \\le ( max(i0, min(( int(2.0) - mod(mod(int(2.0),abs(int(9.0))),int(5.0)) ), res0)) - int(8.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 1, 3, 0, 3, 1, 2, 0, 0, 2, 0, 15, 4, 3, 2, 2]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 2, 7, 8, 7, 4, 8, 6, 7, 5, 2, 7, 1], [], [], [], [], [], [], [], [], [2, 4, 2, 6, 5, 6, 6, 0, 2, 6, 0, 5, 3, 2, 4], [0, 1], [2, 2, 2, 0, 2, 2, 2, 0, 0, 1, 2, 2, 2, 0, 0, 3, 3, 0, 2, 3, 3, 3, 2, 2, 1, 2, 3, 0, 1, 0, 1, 0, 3, 1, 3, 0, 0, 1, 2, 3, 0, 3, 1, 1, 1, 3, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 2, 2, 2, 1], [2, 2, 2, 1, 2, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = ( mod(( in1 * mod(( ( i2 * res0 ) * int(0.0) ),divInt(( divInt(in2,res0) - min(max(res0, divInt(min(min(max(mod(mod(int(2.0),mod(min(i0, int(7.0)),i2)),int(8.0)), res0), max(int(7.0), abs(i0))), in2),int(4.0))), mod(abs(in0),abs(int(8.0)))) ),int(6.0))) ),int(7.0)) * max(int(5.0), i2) )\\nin1 += int(271.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 15, 2, 49, 14, 11, 6, 9]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 0], [], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 3, 2, 9, 5, 0, 0, 1, 5, 4], [4], [2, 0, 1], [], [1, 0], [0], [0], [], [], [5, 3, 5, 5, 0, 1, 2, 1, 0, 0, 1, 5], [0, 0], [1, 2, 2, 1, 3, 2, 0, 2, 2, 2, 3, 3, 0, 0, 2, 3, 0, 0, 1, 0, 1, 3, 3, 2, 1, 2, 1, 2, 1, 3, 3, 0, 1, 1, 3, 2, 0, 0, 3, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 2, 1, 0, 0, 0, 2, 2, 0, 2], [1, 2, 2, 2, 1, 0], [1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(8.0)\\nin0 = mod(divInt(int(7.0),min(mod(in2,( ( divInt(abs(max(in2, i0)),( min(i1, i2) - int(3.0) )) * i1 ) * int(2.0) )), min(min(( int(9.0) * ( int(5.0) - ( int(0.0) + abs(abs(i0)) ) ) ), int(0.0)), int(1.0)))),min(mod(i0,i1), abs(int(5.0))))\\nb2 = in2 \\le int(4.0)\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 11, 11, 1, 3, 0, 2, 1, 1, 0, 0, 12, 2, 42, 11, 10, 6, 5]}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 1], [0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 2, 1, 3, 6, 5, 2, 8, 5, 5, 8], [5, 5], [2], [], [1, 1], [0, 0], [], [], [1], [6, 2, 0, 4, 1, 3, 3, 3, 2, 0, 2], [0, 0], [1, 0, 0, 2, 0, 0, 2, 0, 0, 3, 2, 3, 3, 3, 1, 3, 2, 1, 2, 1, 2, 1, 3, 3, 1, 3, 1, 0, 3, 1, 0, 1, 2, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 2, 1], [1, 1, 1, 0, 0], [1, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(5.0) != res0:{:\\ni2 = i0\\n:}else:{:\\nin1 = ( i1 - in0 )\\n:}\\nb2 = ( in0 - in0 ) != max(mod(min(min(min(int(1.0), max(( int(2.0) - ( int(1.0) + ( int(3.0) + min(min(int(6.0), abs(int(5.0))), i2) ) ) ), max(int(2.0), i0))), int(8.0)), mod(i2,int(5.0))),int(5.0)), int(8.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 12, 12, 2, 1, 0, 2, 2, 0, 0, 1, 11, 2, 37, 7, 9, 5, 2]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1], [0, 2, 2, 0, 0, 0, 1], [1, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 4, 7, 3, 8, 5, 8, 2, 5, 2, 4, 4, 1, 2, 4, 4, 9, 8, 8, 4, 9, 5, 4, 4, 9, 4, 1, 3, 0, 3, 1, 1, 7, 6, 6], [2, 2], [1, 2, 0], [], [0, 0, 0, 1, 1], [0, 0], [0, 1, 2], [1], [], [3, 3, 2, 4, 6, 0, 0, 1, 2, 2, 4, 0, 3, 3, 1, 5, 0, 1, 2, 3, 5, 4, 6, 1, 0, 2, 3, 6, 0, 4, 1, 1, 1, 0, 1, 0, 5, 0, 0, 2, 1, 6, 2, 6, 3], [1, 0, 1], [2, 2, 1, 1, 3, 1, 3, 2, 0, 3, 0, 2, 2, 3, 3, 0, 2, 3, 3, 3, 3, 0, 0, 1, 3, 3, 1, 2, 0, 3, 1, 2, 1, 0, 3, 3, 2, 1, 3, 2, 1, 0, 0, 2, 1, 2, 3, 3, 2, 1, 0, 2, 1, 2, 3, 1, 2, 2, 0, 1, 0, 1, 0, 3, 0, 2, 3, 0, 2, 2, 1, 3, 0, 2, 1, 2, 2, 0, 1, 0, 0, 0, 2, 3, 0, 1, 2, 0, 1, 0, 2, 0, 0, 3, 2, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 3, 0, 3, 1, 1, 1, 0, 3, 3, 1, 0, 3, 1, 2, 1, 0, 3, 1, 2, 2, 3, 3, 3, 1, 3, 0, 3, 3, 1, 1, 0, 2, 2, 3, 0, 3, 3, 3, 1, 0, 0, 3, 0, 1, 0, 3, 3, 2, 1, 0, 3, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 2, 0, 2, 1, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 0, 2], [0, 0, 1, 1, 1, 2, 1, 1, 2, 1, 0, 2, 0, 2, 2, 2, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0]], "fitness": 100, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += ( ( int(2.0) + int(8.0) ) - min(int(4.0), min(divInt(in0,abs(i2)), ( mod(abs(max(in1, ( abs(max(max(min(res0, i0), int(7.0)), max(abs(int(3.0)), ( i0 - min(int(8.0), mod(int(5.0),i1)) )))) - min(max(mod(int(8.0),min(( int(2.0) * i2 ), i2)), mod(int(5.0),divInt(min(max(mod(int(2.0),in1), mod(int(4.0),( max(int(4.0), divInt(divInt(i0,int(1.0)),in0)) - int(2.0) ))), in0),abs(i1)))), ( max(in2, ( divInt(int(4.0),min(i0, ( int(4.0) - mod(mod(i1,int(9.0)),i2) ))) * in0 )) - in2 )) ))),( max(in1, int(8.0)) + ( res0 * int(8.0) ) )) + i1 ))) )\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile False:{:\\ni0 = ( i2 * in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not min(divInt(max(res0, abs(i0)),min(in1, i1)), mod(abs(max(max(i1, max(int(4.0), int(9.0))), int(5.0))),i1)) == max(abs(int(4.0)), i0)\\nb0 = min(int(4.0), mod(int(9.0),i1)) == max(int(4.0), ( ( max(max(min(int(1.0), max(i0, max(max(int(3.0), int(0.0)), in2))), ( divInt(min(i0, abs(min(abs(int(3.0)), i0))),i2) * max(i1, int(1.0)) )), res0) * min(min(( int(1.0) + i2 ), abs(int(7.0))), int(6.0)) ) + int(6.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 += in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 7, 7, 2, 5, 36, 36, 2, 3, 0, 5, 2, 3, 1, 0, 45, 3, 160, 34, 48, 19, 17]}][{"genotype": [[0], [1, 0, 1, 1], [2, 2, 1, 1], [1, 0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 3, 5, 5, 0, 6, 8, 5, 4, 1, 5], [3, 2, 3, 0], [2, 2, 1], [0], [0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0], [2, 3, 0], [], [0], [3, 2, 2, 6, 2, 3, 0, 1, 0, 6, 0], [], [1, 3, 3, 0, 2, 0, 3, 0, 1, 0, 2, 3, 1, 0, 0, 1, 2, 2, 1, 1, 0, 3, 1, 2, 3, 3, 2, 0, 3, 1, 0, 3, 3, 1, 3, 1, 2, 1, 2, 0, 3, 3, 2, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 2, 2, 0, 0, 0, 0, 2, 2, 2, 1, 2, 2], [2, 1, 1, 2], [1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not int(5.0) \\ge max(abs(in0), ( i2 * abs(i2) )):{:\\nif int(7.0) == res0:{:\\nb2 = ( ( min(int(3.0), i2) - in0 ) \\ge int(5.0) and b2 )\\n:}\\nb1 = mod(( int(5.0) - int(0.0) ),i0) \\l min(int(6.0), mod(min(min(divInt(i1,abs(int(8.0))), i0), abs(abs(int(5.0)))),max(int(4.0), mod(int(1.0),( res0 * abs(abs(divInt(i0,int(5.0)))) )))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 12, 12, 4, 3, 1, 7, 4, 3, 0, 1, 11, 0, 45, 9, 13, 4, 5]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 2, 0], [0, 1, 0, 1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 2, 2, 2, 3, 7, 1, 8, 2, 9, 3], [5, 0, 4, 1, 5], [1, 2, 1, 0], [1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 3, 2], [], [1, 0], [1, 4, 5, 1, 3, 4, 6, 6, 1, 4, 0, 5, 4], [], [2, 1, 0, 1, 0, 3, 1, 3, 3, 0, 2, 2, 2, 1, 1, 0, 1, 2, 2, 2, 3, 1, 1, 2, 1, 0, 0, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0, 0, 0, 3, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 2], [0, 1, 0, 1, 2, 0, 2], [1, 0, 0, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not b1:{:\\nloopBreak% = 0\\nwhile not ( int(9.0) + i1 ) != int(9.0):{:\\nif not in1 \\l max(int(2.0), max(max(in2, mod(( ( int(2.0) - int(2.0) ) + i1 ),int(3.0))), ( ( ( max(int(7.0), int(1.0)) - ( int(8.0) * in0 ) ) + in1 ) * int(2.0) ))):{:\\nb2 = res0 \\le divInt(divInt(res0,i1),in1)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = ( divInt(int(9.0),i0) \\g in2 or not in1 != abs(int(3.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 12, 12, 5, 4, 1, 12, 5, 7, 0, 2, 13, 0, 41, 11, 5, 7, 4]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 0, 4], [0], [2, 0, 0], [0], [], [1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( i0 - in1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [1, 1], [0, 1, 1, 1, 1], [9, 6, 1, 2, 8], [3, 0], [], [0], [0, 0, 1, 1], [0, 0], [3, 2], [], [0], [4, 0, 4, 6, 4], [1, 0], [1, 1, 1, 1, 3, 2, 0, 0, 0], [0], [2], [0, 2], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += int(96.0)\\nif ( not int(1.0) \\ge int(2.0) and int(8.0) \\l abs(( i0 * in1 )) ):{:\\nres0 = in1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 5, 5, 2, 0, 1, 4, 2, 2, 0, 1, 5, 2, 9, 1, 1, 2, 0]}, {"genotype": [[0], [1], [1], [], [0], [1], [3], [0], [2, 1], [1, 0], [0, 0, 0, 0, 0, 0, 1], [0], [3, 1, 2, 2, 3, 0], [1], [], [6, 0], [], [2, 0, 0, 1], [0], [], [1], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( False or not not ( b1 and ( res0 - i0 ) \\l int(3.0) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 2, 2, 7, 1, 6, 1, 0, 2, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [3, 5], [1], [2], [], [1], [0], [], [], [], [6], [], [2, 1, 1, 0], [1], [], [], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = divInt(int(3.0),int(5.0)) \\g res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 0, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 3, 8, 4, 0, 5, 5, 9, 0, 6, 3, 6, 1, 9, 2, 7, 5], [0, 3, 5, 1, 2, 1, 1, 5], [1, 0, 1, 1, 0, 0], [0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 1, 3, 2, 1, 2, 1], [1, 0, 0], [1, 1], [4, 3, 1, 0, 0, 5, 5, 5, 5, 6, 5, 5, 5, 0, 6, 2, 6, 2, 6, 3, 6, 0, 0, 4, 6, 0, 6], [0, 0, 1, 1], [0, 2, 1, 1, 3, 0, 1, 3, 3, 1, 2, 0, 1, 1, 0, 3, 3, 0, 0, 1, 3, 2, 0, 2, 0, 0, 0, 2, 2, 1, 2, 2, 3, 2, 3, 0, 0, 3, 3, 0, 1, 0, 0, 1, 0, 0, 1, 1, 2, 0, 3, 0, 1, 3, 0, 0, 1, 1, 1, 2, 0, 2, 1, 2, 3, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 2, 0, 1, 2, 1, 0, 2, 1, 1, 0, 2], [2, 0, 2, 2, 1, 1, 2], [1, 1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nin1 = in0\\ni1 = ( int(1.0) * int(7.0) )\\nloopBreak% = 0\\nwhile not min(i0, int(3.0)) \\l abs(abs(int(8.0))):{:\\nb0 = mod(i0,int(4.0)) \\ge int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not not in2 != min(max(in2, in2), int(5.0)):{:\\nloopBreak% = 0\\nwhile abs(mod(in2,( res0 + in2 ))) \\g in2:{:\\nif ( mod(int(5.0),mod(mod(max(( min(in2, i0) * abs(max(res0, int(9.0))) ), i2),res0),int(0.0))) * i2 ) == res0:{:\\nin0 -= int(6.0)\\n:}else:{:\\nb1 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(3.0) \\g mod(res0,max(i0, int(6.0))):{:\\ni0 -= min(in1, res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( int(1.0) \\g int(9.0) and not int(2.0) != ( i0 * divInt(int(7.0),mod(abs(int(5.0)),res0)) ) )\\n:}else:{:\\nb0 = True\\n:}\\nb0 = not True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 6, 9, 18, 18, 8, 6, 1, 18, 8, 10, 3, 2, 27, 4, 67, 13, 13, 7, 8]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 1, 1, 2, 2, 0, 2, 2, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 6, 8, 2, 2, 7, 8, 5, 2, 4, 9, 7, 6, 4, 0, 8, 4, 8, 9, 5, 9, 1, 5, 9, 9, 3, 9, 5, 6, 9, 8, 1, 4, 2, 5, 3, 0, 9, 8, 5, 6, 4, 0, 8, 5, 9, 8, 6, 8, 6, 7, 5, 2, 7, 2, 3, 7, 5, 5, 2, 5, 3], [3, 5, 3, 0, 3, 3, 4, 0], [1, 2, 2], [], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 2], [], [0, 1], [6, 5, 6, 3, 6, 3, 3, 6, 2, 2, 2, 4, 4, 3, 2, 1, 4, 0, 1, 5, 2, 0, 6, 0, 0, 6, 0, 0, 3, 6, 2, 6, 6, 4, 0, 5, 4, 1, 6, 4, 1, 0, 2, 2, 3, 1, 5, 6, 1, 5, 3, 6, 6, 6, 3, 1, 4, 2, 5, 2, 5, 2, 0, 4, 6, 6, 2, 3, 1, 4, 1, 5, 2], [0, 0, 0, 0, 0], [1, 0, 1, 1, 2, 1, 1, 0, 0, 3, 0, 0, 0, 1, 0, 2, 1, 3, 0, 2, 2, 0, 1, 0, 0, 3, 2, 3, 3, 3, 3, 1, 3, 2, 2, 0, 3, 3, 0, 0, 2, 0, 3, 0, 1, 1, 3, 0, 1, 2, 3, 3, 2, 2, 0, 2, 2, 2, 3, 3, 0, 2, 0, 2, 0, 3, 2, 2, 2, 3, 0, 2, 3, 2, 2, 3, 1, 1, 2, 1, 3, 0, 2, 3, 1, 0, 1, 2, 2, 1, 3, 1, 3, 1, 3, 2, 2, 0, 3, 1, 3, 0, 3, 0, 3, 2, 0, 0, 3, 2, 3, 3, 2, 3, 3, 0, 2, 3, 2, 1, 0, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 0, 1, 3, 0, 0, 3, 3, 3, 1, 1, 0, 2, 2, 0, 1, 2, 3, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 1, 0, 1, 1, 0, 2, 3, 1, 1, 2, 3, 0, 1, 1, 1, 0, 0, 1, 2, 3, 2, 0, 3, 2, 3, 3, 2, 0, 3, 1, 1, 1, 1, 2, 1, 0, 1, 2, 1, 3, 0, 1, 2, 1, 3, 3, 0, 3, 0, 1, 3, 0, 0, 2, 3, 2, 2, 0, 2, 0, 3, 3, 3, 0, 1, 0, 0, 2, 3, 0, 1, 3, 1, 2, 0, 1, 3, 0, 1, 3, 0, 1, 3, 1, 2, 1, 3, 1, 1, 3, 2, 3, 1, 2, 3, 2, 0, 3, 1, 3, 1, 1, 0, 2, 3, 3, 1, 1, 2, 0, 2, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 2, 1, 2, 0, 0, 0, 0, 2, 1, 1, 1, 0, 1, 2, 1, 0, 0, 2, 0, 0, 1, 1, 1, 0, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 0, 2, 2, 0, 0, 0, 1, 1, 1, 0, 1, 2, 1, 2, 1, 1, 2, 1, 0, 0, 0, 2, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 0, 1, 1, 2, 0, 2, 2, 0, 2, 1, 2], [2, 2, 2, 1, 1, 1, 2, 2, 0, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 1, 2, 2, 2, 0, 1, 2, 0, 2, 0, 1, 2, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 92, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not int(9.0) \\ge res0:{:\\nin2 = int(8.0)\\nb1 = int(6.0) != ( int(8.0) * int(2.0) )\\nif res0 \\ge in0:{:\\nloopBreak% = 0\\nwhile min(res0, in0) \\l in0:{:\\nres0 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i2 \\ge divInt(int(7.0),abs(i2)):{:\\nloopBreak% = 0\\nwhile not ( ( i2 * int(8.0) ) * in1 ) \\ge in1:{:\\nin0 = max(divInt(abs(min(min(min(int(5.0), min(( mod(i2,abs(max(i1, in1))) - divInt(i0,max(i1, int(2.0))) ), int(4.0))), max(in2, int(9.0))), divInt(min(max(divInt(( i2 - ( ( divInt(abs(max(i0, divInt(res0,( i0 - min(mod(( mod(min(i0, mod(abs(mod(( min(int(7.0), int(6.0)) * ( int(4.0) * min(res0, divInt(max(int(0.0), i0),int(8.0))) ) ),( ( int(4.0) + max(int(8.0), max(int(9.0), min(( mod(i0,max(int(5.0), abs(in0))) * max(res0, abs(( i2 - res0 ))) ), abs(( max(abs(mod(abs(abs(res0)),( abs(divInt(int(9.0),in1)) - i0 ))), ( in2 - max(in1, i1) )) - min(abs(abs(res0)), in1) ))))) ) * int(1.0) ))),min(i1, i0))),min(min(max(int(5.0), int(9.0)), i2), divInt(divInt(i2,int(9.0)),( max(in0, int(3.0)) + ( mod(max(min(max(abs(max(abs(int(9.0)), i1)), int(5.0)), int(6.0)), in2),( max(int(9.0), int(8.0)) + ( max(res0, int(1.0)) - int(4.0) ) )) - int(2.0) ) )))) + i1 ),in2), int(5.0)) )))),( abs(( in0 - max(mod(min(min(mod(res0,min(int(3.0), int(0.0))), int(9.0)), int(8.0)),mod(int(5.0),res0)), int(6.0)) )) * ( int(4.0) * abs(res0) ) )) * int(0.0) ) + ( int(8.0) - abs(max(in0, abs(i1))) ) ) ),int(5.0)), min(in1, i2)), ( abs(mod(mod(in2,mod(i2,max(abs(abs(in2)), int(9.0)))),i2)) * i0 )),( abs(in1) + int(8.0) )))),abs(int(6.0))), ( res0 * int(8.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = min(res0, int(6.0)) \\le max(i2, int(7.0))\\nin0 = max(int(5.0), mod(int(2.0),abs(int(7.0))))\\n:}else:{:\\ni1 = int(2.0)\\n:}\\nb2 = min(( abs(int(3.0)) + mod(abs(( in1 - min(int(7.0), abs(int(5.0))) )),int(5.0)) ), i1) \\l mod(max(abs(int(2.0)), int(5.0)),( in2 * ( i2 - int(3.0) ) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 5, 8, 63, 63, 8, 3, 0, 10, 8, 2, 0, 2, 73, 5, 271, 61, 79, 33, 28]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [], [], [0], [0, 0], [], [0, 0, 1], [0], [2, 0], [], [0], [3, 5], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not b0:{:\\nb0 = in0 \\l in2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 1, 2, 0, 3, 1, 2, 0, 1, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 0, 2, 0, 2, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 5, 9, 4, 4, 9, 5, 9, 6, 8, 9, 2, 9, 8, 3, 5, 9, 7, 0, 3, 4, 4, 9, 5, 3, 1, 3, 0, 0, 4, 1, 2, 7, 5], [5, 2, 0, 1, 1, 1, 1, 3], [0], [1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 3, 2], [], [], [6, 1, 4, 6, 5, 4, 3, 6, 6, 3, 2, 5, 6, 3, 2, 3, 2, 3, 5, 6, 4, 6, 2, 6, 2, 4, 4, 0, 3, 4, 1, 0, 6, 0, 0, 0, 0, 6, 4, 4, 4, 0], [1, 0, 0, 1, 1], [0, 1, 3, 0, 0, 2, 0, 3, 0, 3, 3, 1, 1, 1, 3, 2, 1, 3, 0, 2, 3, 3, 3, 2, 0, 2, 0, 3, 1, 1, 3, 2, 1, 0, 1, 3, 3, 3, 3, 1, 3, 2, 3, 2, 2, 3, 3, 3, 0, 1, 3, 2, 1, 1, 2, 1, 2, 2, 0, 3, 1, 2, 1, 2, 2, 3, 3, 0, 3, 0, 1, 0, 1, 3, 0, 3, 2, 2, 3, 1, 1, 1, 2, 1, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 2, 2, 1, 1, 2, 3, 1, 0, 2, 0, 3, 1, 0, 2, 3, 1, 1, 2, 3, 2, 0, 2, 0, 3, 1, 0, 3, 1, 3, 2, 1, 0, 1, 3, 1, 0, 2, 1, 0, 0, 1, 2, 1, 0, 2, 2, 0, 2, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 2, 2, 0, 1, 2, 0, 2, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1], [0, 2, 0, 1, 2, 2, 2, 2, 1, 2, 2, 0, 1, 1, 2, 1, 0, 2, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0]], "fitness": 100, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += i1\\nloopBreak% = 0\\nwhile int(3.0) != min(in1, res0):{:\\nloopBreak% = 0\\nwhile ( in2 * min(in1, abs(abs(int(7.0)))) ) == int(4.0):{:\\nin0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = min(mod(int(9.0),max(res0, mod(abs(min(abs(( res0 + ( in0 - abs(int(4.0)) ) )), int(4.0))),abs(( int(9.0) * i2 ))))), int(5.0)) \\l min(min(abs(max(int(9.0), abs(( max(divInt(divInt(abs(abs(abs(in2))),int(6.0)),abs(mod(int(8.0),int(9.0)))), mod(int(2.0),( mod(res0,abs(int(9.0))) * divInt(int(8.0),( ( min(abs(in0), abs(i2)) * int(3.0) ) * in0 )) ))) - int(5.0) )))), max(i2, abs(divInt(divInt(max(int(9.0), int(7.0)),int(0.0)),mod(int(3.0),in0))))), ( ( in2 * max(max(res0, in1), res0) ) * i2 ))\\nloopBreak% = 0\\nwhile not not not ( abs(max(res0, divInt(mod(int(4.0),int(4.0)),( abs(int(9.0)) + i2 )))) \\g ( in1 - abs(int(5.0)) ) or in1 \\g ( abs(int(3.0)) - int(1.0) ) ):{:\\ni0 = ( abs(( in0 * mod(in1,abs(int(3.0))) )) - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not abs(int(0.0)) \\g max(divInt(int(0.0),i0), int(4.0)):{:\\nres0 += max(int(1.0), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(int(2.0),i0) \\g i0:{:\\nloopBreak% = 0\\nwhile int(7.0) \\ge ( int(5.0) * i0 ):{:\\nres0 += ( ( in1 + ( in1 - in1 ) ) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 997, "mapping_values": [1, 12, 12, 6, 6, 36, 36, 8, 1, 1, 13, 8, 5, 0, 0, 42, 5, 148, 35, 40, 22, 16]}][{"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [9, 6, 2], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(962.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 2, 1, 0, 2, 0, 0, 0], [0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 7, 0, 2, 7, 4, 0, 2, 8, 9, 7, 1, 4, 6, 4, 9, 5, 9, 2, 2, 6, 3, 9, 0, 6, 9], [1, 4, 3, 3, 5, 4, 5, 5], [1, 0, 2, 2, 2], [1, 1, 0], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 2, 0], [], [1, 1], [4, 6, 0, 4, 4, 4, 5, 2, 2, 0, 0, 5, 2, 6, 2, 1, 1, 6, 0, 0, 6, 3, 0, 3, 3, 1], [0, 0, 1, 1, 0], [3, 1, 2, 1, 3, 3, 2, 1, 1, 2, 2, 1, 1, 3, 3, 1, 3, 0, 1, 1, 0, 1, 1, 1, 3, 1, 1, 2, 2, 0, 3, 3, 1, 2, 0, 0, 0, 0, 0, 3, 0, 3, 2, 0, 0, 0, 1, 2, 1, 3, 0, 1, 3, 0, 1, 3, 1, 2, 1, 3, 0, 2, 0, 3, 1, 2, 0, 2, 3, 1, 0, 0, 1, 0, 2, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 2, 1, 0, 0, 2, 0, 0, 0, 2, 2, 0, 1, 0, 1, 0, 0], [2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 1, 2], [0, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(int(4.0), ( int(1.0) * abs(max(divInt(int(7.0),int(0.0)), ( ( int(2.0) + int(7.0) ) * min(min(int(4.0), abs(in1)), int(0.0)) ))) )) \\g int(2.0)\\nb0 = res0 \\le int(8.0)\\ni0 = int(9.0)\\nin1 = int(7.0)\\nif min(int(1.0), int(4.0)) \\ge ( ( in1 + min(min(int(6.0), ( in1 + in2 )), i2) ) + i2 ):{:\\nb2 = ( i0 \\ge abs(i0) or ( ( abs(( in2 + i2 )) != res0 or int(4.0) \\le ( int(9.0) + min(i2, int(5.0)) ) ) and not max(i1, int(9.0)) != min(int(2.0), ( int(2.0) + max(i1, ( res0 * min(int(6.0), divInt(i0,( min(int(3.0), i0) * res0 ))) )) )) ) )\\n:}else:{:\\nin0 -= int(9.0)\\nif b2:{:\\ni0 *= in0\\n:}else:{:\\nin0 = mod(i1,int(0.0))\\n:}\\n:}\\nb2 = int(6.0) != int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 2, 9, 27, 27, 8, 5, 3, 13, 8, 5, 0, 2, 26, 5, 79, 14, 17, 13, 3]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 1, 0], [1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 4, 5, 6, 5, 7, 6, 2, 4, 8, 5, 4, 7, 0, 6, 7, 7, 8, 8, 8, 5, 7], [2, 2], [0, 0], [1], [0, 1, 1, 0], [0, 0], [3, 0], [], [], [6, 0, 4, 6, 5, 6, 1, 5, 3, 0, 4, 2, 1, 6, 2, 0, 3, 6, 1, 2, 3, 0, 3, 0, 1, 6, 5, 2, 3], [0, 0], [1, 2, 2, 0, 2, 3, 3, 0, 0, 1, 3, 1, 2, 2, 2, 3, 3, 0, 1, 3, 2, 2, 3, 1, 2, 2, 2, 1, 0, 3, 3, 0, 3, 3, 3, 0, 3, 2, 1, 0, 2, 3, 0, 0, 0, 1, 2, 3, 1, 3, 2, 3, 0, 2, 2, 0, 2, 1, 3, 2, 0, 3, 0, 1, 3, 1, 2, 1, 2, 0, 0, 3, 1, 0, 3, 1, 2, 3, 3, 0, 2, 1, 2, 2, 3, 3, 0, 1, 3, 1, 0, 0, 0, 1, 0, 3, 1, 3, 0, 1, 1, 1, 1, 3, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 0, 2, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 2, 1, 0, 1, 0, 2, 2], [1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(1.0) == ( divInt(res0,mod(max(max(i0, in1), int(1.0)),max(int(9.0), mod(( divInt(max(max(res0, int(4.0)), abs(divInt(( abs(int(5.0)) - mod(divInt(( int(6.0) - in2 ),min(max(res0, min(abs(min(i1, abs(( int(5.0) - in2 )))), ( max(in0, i0) + in1 ))), int(7.0))),( max(int(6.0), max(( max(i2, divInt(( i1 + divInt(int(2.0),abs(( res0 - max(i2, int(4.0)) ))) ),abs(int(8.0)))) - ( int(5.0) * divInt(i0,in0) ) ), abs(int(4.0)))) - res0 )) ),min(int(7.0), ( max(abs(i1), ( int(0.0) - mod(divInt(max(min(i2, int(6.0)), max(int(7.0), in0)),i0),in0) )) + int(7.0) ))))),i0) * min(int(8.0), abs(i1)) ),int(8.0))))) + int(8.0) ) or int(5.0) == int(7.0) )\\nloopBreak% = 0\\nwhile b0:{:\\nres0 = abs(in2)\\ni2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 24, 24, 2, 2, 1, 4, 2, 2, 0, 0, 29, 2, 106, 25, 30, 13, 12]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 2, 8, 7, 3, 0, 9, 4, 8, 3, 2, 4, 0, 6, 6, 3, 1, 4, 8, 7, 2, 3, 5, 5, 6, 3, 9, 3, 8, 5, 4, 4, 2, 7, 0, 5], [4], [0], [0], [0, 1, 0, 0], [0], [3, 2, 1], [0], [], [5, 1, 6, 2, 1, 1, 6, 3, 5, 6, 2, 4, 1, 2, 1, 5, 1, 1, 0, 0, 2, 6, 0, 0, 2, 0, 1, 1, 4, 0, 2, 5, 2, 1, 0, 2, 0, 3, 2, 0, 6], [0], [3, 0, 1, 3, 0, 2, 2, 3, 3, 0, 2, 2, 3, 3, 2, 1, 1, 1, 2, 1, 0, 0, 3, 1, 3, 2, 2, 3, 3, 2, 2, 1, 3, 2, 1, 0, 1, 3, 3, 2, 2, 0, 1, 0, 2, 2, 3, 0, 1, 2, 0, 3, 0, 1, 0, 0, 0, 2, 2, 3, 2, 3, 1, 1, 2, 3, 3, 0, 0, 1, 0, 2, 3, 3, 2, 2, 2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 2, 2, 3, 3, 3, 0, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 3, 3, 1, 3, 3, 2, 2, 3, 1, 3, 1, 1, 3, 0, 2, 0, 2, 3, 0, 3, 1, 2, 2, 2, 2, 2, 1, 1, 3, 0, 0, 2, 0, 0, 2, 1, 3, 3, 1, 0, 1, 2, 2, 1, 3, 2, 0, 1, 1, 1, 2, 2, 2, 1, 3, 1, 3, 0, 3, 1, 2, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 1, 2, 2, 1, 0, 1, 1, 0, 2, 2, 0, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 0, 2, 2, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 2, 0, 1, 0, 2, 2, 0, 0, 2], [2, 1, 0, 2, 1, 2, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 2, 1, 2], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = max(i1, int(8.0))\\nb0 = ( max(res0, mod(mod(abs(abs(i2)),( mod(max(min(divInt(int(7.0),int(2.0)), int(8.0)), ( int(7.0) * i1 )),i1) - max(int(3.0), max(divInt(divInt(min(abs(divInt(( int(0.0) + abs(( int(9.0) * res0 )) ),int(4.0))), min(max(( ( in0 - int(8.0) ) * in2 ), ( ( abs(res0) - int(3.0) ) - divInt(i2,abs(in1)) )), int(2.0))),i1),i2), i1)) )),( mod(max(( max(int(4.0), int(0.0)) - divInt(max(max(in2, i1), int(6.0)),i1) ), ( max(abs(( divInt(mod(i0,int(6.0)),divInt(i0,int(3.0))) + abs(min(i2, res0)) )), mod(( abs(abs(max(i0, max(i0, abs(i2))))) + ( i0 - i1 ) ),int(1.0))) + i1 )),int(4.0)) - abs(max(int(8.0), max(min(( ( min(int(7.0), max(int(2.0), int(3.0))) - max(in1, mod(i0,( abs(i2) + min(int(5.0), divInt(mod(mod(divInt(( int(5.0) + int(6.0) ),max(in2, i2)),mod(i1,i0)),( int(3.0) - min(abs(int(9.0)), i2) )),int(3.0))) ))) ) - ( divInt(int(8.0),abs(mod(i0,int(5.0)))) - int(4.0) ) ), int(4.0)), ( ( ( int(2.0) * min(int(7.0), min(in0, abs(int(0.0)))) ) - divInt(int(5.0),i2) ) * i0 )))) ))) \\le res0 and not True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 37, 37, 1, 1, 1, 4, 1, 3, 1, 0, 41, 1, 167, 46, 44, 23, 23]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1, 1, 1], [8, 3, 0], [1], [1], [], [0, 1], [0], [1], [1], [0], [3], [], [2, 3, 3, 0, 3, 3, 1, 1, 1], [1], [2, 1, 2, 2], [], [1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nb1 = mod(abs(max(in0, abs(abs(int(8.0))))),int(3.0)) \\g int(0.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 9, 1, 4, 0, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1], [8, 3, 7, 4, 4, 2], [0], [0], [0], [0, 1, 0], [0], [3, 1], [0], [], [3, 0, 6, 4], [], [3, 1, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 1, 0, 3, 1, 3, 0, 0, 1, 0], [0, 1, 0], [1, 2, 2, 2, 0, 1, 1, 1], [2, 1], [0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( max(int(8.0), ( divInt(( int(3.0) * int(7.0) ),abs(abs(abs(min(max(int(4.0), in0), max(int(4.0), max(i0, res0))))))) - int(2.0) )) \\l in1 and True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 1, 1, 1, 3, 1, 2, 1, 0, 4, 0, 21, 3, 8, 2, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 6, 3, 9, 2, 2, 6, 9, 8, 1, 1, 0, 6], [3, 4, 5], [0, 0], [1], [1, 0, 1, 1], [0, 0, 0], [3], [], [], [3, 6, 2, 5, 4, 3, 0, 4, 6, 5, 4, 2, 1, 0, 4, 3, 2, 1, 1, 5, 5, 3, 2, 0, 4, 3, 3, 6, 1], [], [3, 3, 3, 1, 2, 3, 0, 0, 1, 3, 0, 3, 1, 2, 0, 3, 3, 1, 3, 2, 2, 3, 2, 0, 2, 0, 0, 2, 1, 1, 3, 2, 0, 0, 2, 0, 1, 0, 1, 3, 3, 2, 1, 3, 2, 3, 2, 0, 0, 3, 2, 0, 3, 2, 0, 0, 0, 0, 0, 2, 3, 0, 3, 3, 2, 0, 3, 3, 0, 3, 3, 1, 2, 0, 3, 3, 0, 3, 2, 1, 0, 0, 0, 2, 1, 1, 3, 3, 3, 0, 0, 3, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [2, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 2, 2, 2, 2, 0, 2], [0, 1, 2, 2, 2, 0, 0, 0, 2], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(min(abs(int(2.0)), divInt(min(in0, res0),int(4.0)))) \\ge abs(i2)\\nb0 = ( min(int(6.0), divInt(in2,max(max(int(3.0), min(( ( max(mod(in1,mod(in0,i0)), mod(int(9.0),int(2.0))) + min(divInt(in1,res0), ( in2 - int(2.0) )) ) * in1 ), int(6.0))), abs(abs(( int(9.0) * max(( max(( i2 * i1 ), abs(divInt(i0,min(( in1 + in0 ), i2)))) + i1 ), i1) )))))) \\le divInt(max(in2, max(abs(( in2 + min(abs(in0), max(max(int(8.0), divInt(i2,max(abs(i0), abs(mod(int(1.0),in1))))), in0)) )), in0)),( int(1.0) * int(0.0) )) or abs(abs(min(res0, i1))) != abs(int(6.0)) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 14, 14, 3, 2, 1, 4, 3, 1, 0, 0, 29, 0, 93, 19, 31, 9, 10]}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [], [1, 0, 1, 0, 1], [1, 1, 1], [8, 6, 4], [], [2, 2], [], [0, 0, 0], [], [2, 1, 1], [0, 0], [], [6, 0, 3, 2, 0], [1, 0, 0], [3, 2, 1, 1, 3, 1, 3, 0, 0], [0], [2, 0, 2], [0, 2], []], "fitness": 100, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += abs(( int(8.0) * int(6.0) ))\\nb2 = not True\\ni0 = min(int(4.0), abs(in0))\\nb2 = True\\ni2 = i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 993, "mapping_values": [1, 5, 5, 0, 5, 3, 3, 0, 2, 0, 3, 0, 3, 2, 0, 5, 3, 9, 1, 3, 2, 0]}][{"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 0, 0, 1], [1, 0], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 7, 6, 3, 2, 0, 1, 4, 7, 2, 6, 6], [4, 5, 1], [0, 0], [], [0, 0, 1, 1, 1], [0, 0, 0], [2, 1], [0], [1], [2, 5, 4, 0, 2, 0, 2, 1, 0, 0, 1, 1], [0], [3, 2, 1, 2, 3, 3, 2, 0, 1, 1, 0, 1, 0, 3, 2, 0, 0, 3, 1, 3, 0, 1, 1, 3, 1, 3, 0, 1, 2, 2, 0, 0, 0, 3, 1, 3, 2, 1, 3, 0, 2, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 2, 0, 1, 1, 0, 1, 2], [0, 2, 0, 1], [1, 1, 0, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not True:{:\\nif max(( int(6.0) + mod(min(min(( i2 * int(0.0) ), int(7.0)), in2),int(6.0)) ), in1) \\le max(( i0 + i2 ), abs(int(3.0))):{:\\ni0 = min(i2, int(2.0))\\n:}else:{:\\nb0 = int(0.0) != max(int(1.0), max(i1, int(4.0)))\\n:}\\nb0 = ( mod(i0,i0) - i1 ) \\g min(int(7.0), max(divInt(int(2.0),abs(i1)), mod(int(6.0),int(6.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 13, 13, 3, 2, 0, 5, 3, 2, 1, 1, 12, 1, 43, 8, 11, 4, 4]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [], [], [1], [], [0], [], [1], [0], [], [1, 0], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\ni1 = i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 9, 2, 8, 3, 1, 1, 5, 2, 7, 5, 5, 9, 4, 3, 6, 8], [3, 3, 3, 5, 5, 0, 2, 4, 1, 3, 0], [0], [1, 0], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0], [], [1, 1], [0, 4, 4, 4, 1, 1, 2, 4, 5, 3, 6, 5, 6, 3, 3, 2, 6, 2, 2, 6, 4, 4, 0, 6, 1, 2, 0, 5, 3, 3, 0, 5], [1, 0, 1, 1, 1], [3, 0, 0, 3, 0, 1, 0, 0, 2, 3, 1, 2, 3, 2, 2, 2, 0, 1, 1, 1, 3, 0, 2, 1, 0, 0, 1, 2, 1, 1, 0, 1, 1, 0, 3, 3, 1, 0, 0, 3, 0, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 1, 3, 0, 1, 0, 2, 2, 0, 0, 2, 1, 0, 2, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 2, 0, 2, 1, 2], [1, 0, 1, 0, 2, 1, 1, 2, 1], [0, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(i0, in1) \\ge min(in1, int(3.0)):{:\\nif in1 \\ge i1:{:\\nloopBreak% = 0\\nwhile divInt(max(int(0.0), ( max(divInt(( ( i1 - int(9.0) ) + int(2.0) ),int(8.0)), abs(i2)) - mod(int(3.0),in1) )),in2) \\ge int(1.0):{:\\nloopBreak% = 0\\nwhile ( mod(int(1.0),int(5.0)) != in0 or ( int(2.0) != int(7.0) and res0 \\l min(abs(int(5.0)), in2) ) ):{:\\nloopBreak% = 0\\nwhile res0 == max(in0, int(5.0)):{:\\nloopBreak% = 0\\nwhile in0 \\le i2:{:\\nloopBreak% = 0\\nwhile res0 \\g i2:{:\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile int(9.0) \\ge int(4.0):{:\\ni2 += res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif divInt(in1,int(3.0)) \\l abs(in1):{:\\ni0 = int(6.0)\\n:}else:{:\\nres0 *= i1\\n:}\\n:}\\ni2 -= ( divInt(i0,in2) - ( int(8.0) * in0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 -= mod(i0,in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 10, 5, 18, 18, 11, 1, 2, 14, 11, 3, 0, 2, 32, 5, 66, 12, 9, 9, 7]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [5, 5, 1, 2], [0, 1], [3, 0, 3, 0], [], [2, 2], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = abs(in2)\\ni1 *= abs(i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 4, 0, 2, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 0, 0, 2, 2, 1], [1, 0, 1, 0, 1], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 0, 6, 5, 3, 9, 3, 3, 2, 9, 4], [0, 0, 3, 2, 4, 5], [0, 1], [], [1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [2, 1], [0], [1, 0], [1, 6, 2, 2, 1, 1, 2, 3, 3, 0, 6, 3, 3, 6], [1, 1], [1, 2, 2, 1, 2, 2, 1, 3, 1, 1, 0, 2, 3, 0, 2, 1, 0, 1, 0, 0, 3, 0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 0], [2, 2, 2], [2, 0, 2, 1, 2, 1], [0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(6.0) \\l ( divInt(int(2.0),divInt(( int(0.0) * abs(int(6.0)) ),int(5.0))) + i1 )\\nloopBreak% = 0\\nwhile mod(abs(res0),divInt(int(3.0),i2)) \\l int(9.0):{:\\nif not i2 \\ge i1:{:\\nloopBreak% = 0\\nwhile abs(i1) == i2:{:\\nin0 *= in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 -= int(3.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nloopBreak% = 0\\nwhile res0 \\le mod(int(3.0),int(2.0)):{:\\nb1 = divInt(in0,in0) != ( int(9.0) * ( res0 - int(4.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 12, 12, 6, 2, 0, 8, 6, 2, 1, 2, 14, 2, 37, 10, 3, 6, 6]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [0, 1, 0, 0, 1], [1, 8, 8, 5, 2], [], [], [], [], [], [], [], [], [5, 4], [1, 1], [1, 1], [], [], [2, 2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= int(18.0)\\nin1 *= int(852.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [8], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 992, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [0, 1], [9, 9], [0], [2], [], [1], [0], [], [], [], [4, 4, 0], [0], [0, 0, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = in1\\nb2 = i0 \\l int(99.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 0, 1], [6, 5, 6], [3], [2], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(6.0) \\ge int(56.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 0, 0, 0, 2, 0, 2, 2, 1, 1, 2, 1], [0, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 4, 6, 6, 5, 6, 9, 2, 2, 6, 5, 1, 6, 0, 0, 6, 9, 1, 6, 6, 8, 8, 7, 0, 9, 0, 4, 1, 3, 0, 1, 6, 3, 4, 1, 5, 4, 0, 5, 3, 4, 3, 1, 7, 7, 9, 1, 8, 0, 0, 2, 7, 9, 1, 2, 1, 0, 4, 6, 6, 8, 3, 0, 0, 7, 7, 3, 0, 0, 4, 6, 2, 1, 2, 3, 0, 5, 4, 5, 7, 5, 2, 4, 9, 5, 1, 8, 3, 0, 6, 8, 3, 3, 2, 7, 4, 4, 5, 2, 0, 0, 6, 7, 4, 0, 5, 1, 7, 8, 8, 0, 4, 9, 3, 2, 0, 2, 6, 9, 7, 3, 7, 5, 4, 9, 1, 3, 2, 0, 3, 6, 9, 8, 4, 7, 2, 6, 8, 6, 4, 1, 4, 2, 6], [4, 1, 1, 5, 4, 1, 2, 2, 2], [1, 1, 2, 0], [0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 0, 3, 2, 3, 1, 3, 2], [0, 0], [1, 1], [6, 3, 1, 0, 1, 6, 1, 3, 5, 1, 2, 2, 5, 1, 5, 5, 0, 1, 2, 6, 5, 0, 4, 6, 6, 4, 1, 4, 1, 0, 3, 6, 1, 0, 0, 3, 0, 5, 1, 5, 0, 0, 0, 0, 3, 3, 5, 2, 1, 2, 6, 5, 0, 3, 4, 5, 5, 6, 2, 4, 4, 0, 0, 3, 5, 5, 2, 4, 0, 5, 4, 1, 4, 6, 0, 2, 2, 6, 3, 1, 2, 0, 5, 2, 6, 0, 1, 1, 0, 0, 5, 1, 0, 1, 6, 4, 1, 1, 3, 2, 5, 6, 3, 5, 1, 4, 1, 6, 1, 6, 6, 4, 2, 0, 5, 0, 0, 1], [0, 0, 1, 0], [1, 2, 2, 2, 2, 0, 1, 0, 2, 0, 1, 1, 3, 1, 3, 1, 3, 1, 2, 2, 3, 1, 0, 3, 0, 3, 0, 1, 0, 3, 2, 2, 0, 0, 1, 1, 2, 3, 1, 2, 3, 1, 2, 2, 3, 3, 1, 3, 1, 1, 0, 2, 3, 1, 2, 1, 0, 1, 1, 2, 3, 1, 2, 1, 0, 2, 0, 1, 1, 0, 0, 1, 3, 3, 2, 0, 0, 2, 3, 1, 3, 2, 3, 1, 0, 0, 3, 1, 1, 1, 3, 0, 2, 3, 0, 2, 1, 2, 2, 2, 3, 0, 0, 3, 3, 0, 3, 3, 1, 1, 2, 2, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 1, 3, 2, 3, 1, 3, 0, 1, 1, 3, 1, 2, 2, 3, 3, 3, 2, 2, 1, 2, 1, 0, 0, 1, 2, 1, 1, 3, 2, 2, 1, 0, 1, 1, 0, 2, 3, 1, 3, 2, 0, 0, 2, 3, 2, 0, 1, 1, 3, 2, 2, 0, 0, 2, 1, 3, 3, 1, 2, 1, 3, 1, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 2, 2, 3, 2, 2, 0, 0, 3, 2, 2, 3, 2, 0, 2, 1, 2, 2, 2, 1, 2, 1, 2, 3, 0, 2, 3, 0, 2, 0, 3, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 3, 3, 3, 3, 2, 1, 2, 0, 1, 2, 0, 3, 0, 3, 1, 3, 3, 3, 0, 3, 2, 2, 3, 1, 2, 2, 1, 2, 2, 2, 3, 1, 1, 2, 1, 2, 3, 3, 1, 1, 3, 2, 3, 2, 1, 3, 2, 0, 1, 3, 2, 3, 0, 3, 2, 2, 1, 1, 2, 3, 3, 1, 3, 3, 3, 2, 2, 3, 0, 1, 3, 0, 1, 2, 3, 2, 1, 1, 3, 0, 3, 3, 3, 2, 2, 1, 1, 1, 1, 3, 2, 1, 3, 1, 2, 2, 2, 1, 2, 0, 1, 1, 1, 0, 1, 0, 3, 2, 3, 3, 2, 3, 3, 1, 0, 2, 0, 3, 2, 0, 3, 3, 1, 1, 3, 3, 2, 3, 0, 3, 1, 1, 0, 2, 0, 2, 2, 3, 0, 3, 3, 1, 3, 1, 2, 1, 3, 3, 2, 0, 3, 2, 2, 1, 0, 0, 2, 3, 0, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 0, 3, 2, 2, 2, 1, 3, 3, 2, 1, 1, 3, 1, 2, 1, 0, 0, 1, 2, 0, 1, 1, 0, 0, 3, 0, 0, 1, 2, 1, 1, 2, 1, 1, 2, 3, 2, 0, 3, 2, 0, 3, 2, 3, 0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2, 2, 3, 2, 3, 0, 1, 2, 3, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 3, 1, 2, 3, 2, 0, 0, 2, 1, 3, 1, 1, 1, 0, 2, 1, 1, 0, 2, 3, 0, 2, 2, 3, 2, 3, 0, 2, 2, 3, 0, 0, 0, 1, 1, 3, 0, 3, 0, 2, 0, 0, 3, 3, 2, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 2, 0, 1, 2, 0, 1, 1, 0, 0, 2, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 1, 1, 2, 2, 0, 1, 0, 0, 0, 2, 1, 1, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 2, 0, 0, 1, 1, 1, 1, 0, 2, 1, 2, 1, 0, 1, 0, 1, 2, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 2, 0, 1, 0, 2, 2, 0, 2, 2, 2, 1, 0, 0, 2, 1, 2, 2, 2, 1, 2, 2, 1, 0, 1, 0, 1, 2, 0, 2, 2, 0, 0, 1], [2, 0, 2, 0, 1, 2, 0, 2, 2, 1, 1, 1, 0, 2, 1, 1, 1, 2, 2, 2, 0, 1, 2, 2, 1, 2, 1, 0, 2, 2, 0, 2, 2, 2, 1, 0, 1, 2, 1, 2, 0, 2, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 2, 2, 1, 1, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]], "fitness": 100, "tree_depth": 128, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nres0 = int(7.0)\\n:}else:{:\\nin0 = mod(( mod(mod(i1,int(1.0)),i0) * divInt(i1,int(4.0)) ),int(6.0))\\nres0 += max(int(6.0), max(int(5.0), min(int(6.0), divInt(( abs(int(9.0)) * i1 ),min(in0, max(in2, int(2.0)))))))\\nloopBreak% = 0\\nwhile i1 \\le abs(mod(divInt(i2,i2),int(2.0))):{:\\nb1 = ( int(6.0) \\g mod(min(int(5.0), mod(max(int(1.0), ( ( max(min(int(6.0), min(int(0.0), int(0.0))), in2) + ( abs(int(6.0)) - ( int(9.0) * i1 ) ) ) + int(1.0) )),int(6.0))),mod(min(int(6.0), mod(int(8.0),in2)),divInt(in2,int(8.0)))) and int(7.0) \\g i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif b1:{:\\nloopBreak% = 0\\nwhile i1 != int(0.0):{:\\nb2 = ( not max(max(divInt(i2,res0), ( min(int(9.0), max(divInt(min(int(0.0), in2),i0), min(int(4.0), int(1.0)))) * int(3.0) )), max(in1, mod(min(res0, mod(int(0.0),divInt(mod(( min(res0, in1) * max(abs(i1), min(max(int(1.0), int(6.0)), ( ( max(int(3.0), int(4.0)) - mod(abs(int(1.0)),abs(int(5.0))) ) - mod(in1,i1) ))) ),min(int(4.0), max(( min(int(0.0), min(i0, int(5.0))) - int(3.0) ), min(int(4.0), ( mod(abs(max(max(( ( int(3.0) + divInt(int(1.0),in0) ) * res0 ), int(7.0)), ( int(7.0) - int(9.0) ))),abs(divInt(( int(1.0) - i1 ),int(8.0)))) - int(0.0) ))))),i0))),divInt(min(int(0.0), abs(( i0 * in0 ))),divInt(min(divInt(i0,int(2.0)), int(7.0)),min(mod(divInt(in2,i1),( int(9.0) * min(abs(int(1.0)), divInt(int(2.0),min(int(1.0), ( int(0.0) * ( in2 + i0 ) )))) )), int(4.0))))))) \\le int(6.0) and ( True or i0 \\g abs(min(divInt(divInt(min(( divInt(i0,i0) - min(mod(mod(abs(( in0 * divInt(int(6.0),mod(( ( int(8.0) * ( int(3.0) - divInt(min(in0, ( min(in2, ( i2 * min(int(0.0), i1) )) - ( i2 + int(0.0) ) )),res0) ) ) * in2 ),int(7.0))) )),i0),in0), min(max(max(abs(mod(int(7.0),divInt(in1,int(3.0)))), mod(in2,max(in2, abs(int(0.0))))), abs(min(min(res0, min(mod(( min(int(0.0), divInt(mod(int(4.0),divInt(divInt(mod(min(int(6.0), int(2.0)),( int(1.0) * ( abs(min(int(2.0), int(3.0))) + abs(( max(( int(0.0) * min(( i2 * int(5.0) ), abs(( min(in1, min(divInt(( int(4.0) * int(5.0) ),mod(max(max(int(7.0), max(max(min(divInt(divInt(abs(in1),int(5.0)),max(i0, int(2.0))), mod(abs(divInt(int(4.0),int(9.0))),max(i0, min(max(min(divInt(divInt(int(5.0),int(1.0)),int(8.0)), int(3.0)), max(( int(0.0) - abs(int(6.0)) ), ( ( mod(int(8.0),divInt(in0,int(3.0))) + int(3.0) ) - int(2.0) ))), in2)))), int(7.0)), in2)), abs(mod(min(abs(mod(min(max(int(4.0), i2), mod(in1,max(divInt(i0,max(abs(int(4.0)), int(5.0))), max(max(( abs(in2) * min(int(2.0), int(0.0)) ), in1), divInt(i1,( ( max(in1, min(abs(int(0.0)), abs(int(6.0)))) - ( int(7.0) * min(abs(( res0 + abs(( divInt(int(4.0),i0) * i2 )) )), ( abs(i2) - int(0.0) )) ) ) * divInt(int(5.0),res0) )))))),in0)), i1),int(1.0)))),i2)), int(7.0))) * i0 ))) ), int(8.0)) + int(8.0) )) ) )),in2),divInt(i2,max(mod(mod(mod(int(0.0),min(min(mod(int(4.0),int(9.0)), abs(int(3.0))), ( int(2.0) + res0 ))),i0),int(0.0)), ( i1 + int(2.0) ))))),int(6.0))) + i1 ),i0), max(i0, in2))), int(9.0)))), divInt(int(7.0),int(3.0)))) ), ( int(7.0) - int(5.0) )),divInt(abs(mod(i1,abs(( i0 - abs(mod(max(i1, int(4.0)),int(9.0))) )))),int(1.0))),res0), in1)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 = i1\\nloopBreak% = 0\\nwhile int(3.0) == divInt(int(2.0),divInt(int(0.0),int(3.0))):{:\\nb0 = ( not divInt(( ( abs(divInt(abs(in0),int(6.0))) + mod(max(( int(9.0) - i2 ), in2),int(8.0)) ) + mod(mod(mod(res0,in0),min(int(4.0), ( max(( in2 * i1 ), ( int(7.0) * min(int(2.0), int(6.0)) )) * int(8.0) ))),in1) ),( int(6.0) - int(4.0) )) == i1 and mod(max(res0, ( ( abs(mod(min(i1, ( ( abs(res0) - res0 ) * in1 )),int(1.0))) + int(4.0) ) - abs(i2) )),min(i0, mod(in2,i0))) == min(max(mod(i0,int(2.0)), i1), int(6.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 993, "mapping_values": [1, 12, 12, 5, 7, 145, 145, 9, 4, 4, 18, 9, 9, 2, 2, 118, 4, 535, 145, 131, 62, 84]}][{"genotype": [[0], [1], [1], [], [0], [], [], [], [0], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1], [5], [1], [2], [], [0, 1], [0], [2], [], [], [2], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not int(5.0) \\g i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 1, 0], [1, 1, 1], [4, 0, 4], [], [0], [], [0], [], [1], [1], [], [5, 0, 5, 5], [1, 0], [3, 0, 1, 3, 3, 0, 3, 1, 1], [], [1, 0, 2, 1], [2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= max(i0, int(4.0))\\nin2 = min(abs(in2), max(int(0.0), int(4.0)))\\nb0 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 0, 1, 0, 1, 0, 1, 1, 0, 4, 2, 9, 0, 4, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [3], [], [], [], [], [], [], [], [], [4, 3], [0], [3, 1, 0], [], [1], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = max(int(3.0), in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [0], [1, 0], [1, 1, 1, 1], [3, 1, 1, 8], [2, 4], [0], [], [1, 1], [0, 0], [], [], [0], [2, 6, 4, 5], [0], [3, 1, 0, 3, 3, 1, 0, 1, 0, 1], [], [1, 2, 1], [], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(int(3.0), i2) == abs(max(int(1.0), res0)):{:\\nin1 = int(1.0)\\nb0 = in2 \\le int(8.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 2, 1, 0, 2, 2, 0, 0, 1, 4, 1, 10, 0, 3, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 1], [0, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 3, 1, 4, 7, 3, 8, 9, 8, 9, 9, 2, 4, 9, 1, 0, 2, 6, 9, 9, 0, 9, 8, 1, 7, 4, 8, 1, 1, 6, 3, 4, 1, 4, 6, 6, 1, 1, 9, 3, 2, 0, 8, 0, 4, 3, 1, 3, 9, 0, 5, 2, 3, 5, 9, 9, 6, 0, 8, 2, 7, 3, 4, 6, 2, 6, 0, 2, 5, 1, 4, 7, 5, 5, 9, 2, 8, 6, 0, 3, 9, 1, 6, 3, 1, 8, 4, 6, 4, 5, 8, 3, 7, 1, 7, 3, 2, 3, 8, 7, 8, 2, 3, 6, 5, 1, 2, 0, 3, 8, 3, 2, 8, 3, 5, 8, 2, 5, 1, 6, 7, 2, 1, 3, 4, 5, 0, 3, 4, 6, 3, 1, 9, 5, 7, 7, 5, 6, 6, 5, 2, 3, 2, 9, 0, 2, 3, 1, 1, 4, 5, 8, 6, 1, 3, 9, 8, 0, 8, 9, 4], [1, 1, 3, 2, 3, 3], [2, 2, 2, 2], [0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [0, 1, 3, 3, 0, 1, 2, 2], [1, 1], [0, 0], [5, 6, 3, 2, 3, 2, 4, 6, 6, 3, 1, 5, 3, 3, 6, 4, 3, 5, 0, 2, 5, 3, 1, 4, 6, 5, 4, 5, 2, 3, 6, 0, 5, 0, 0, 5, 4, 0, 5, 1, 1, 4, 0, 3, 5, 2, 6, 0, 4, 1, 2, 6, 3, 1, 5, 1, 5, 4, 1, 6, 1, 2, 2, 0, 1, 2, 5, 4, 5, 1, 0, 5, 2, 3, 2, 3, 4, 4, 2, 2, 4, 5, 3, 2, 4, 5, 0, 6, 0, 4, 1, 2, 6, 3, 0, 5, 4, 6, 1, 5, 3, 2, 4, 2, 1, 6, 4, 1, 2, 4, 0, 5, 2, 6, 2, 3, 0, 5, 4, 5, 5, 3, 3, 3, 0, 2, 6, 6, 2, 1, 2, 2, 1, 1, 5, 5, 0, 6, 4, 5, 0, 4, 5, 4, 0, 2, 2, 5, 0, 2, 2, 2, 3, 0, 2, 6, 3, 0, 3, 0, 2, 0, 1, 2, 2], [0, 1, 0, 1], [1, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 3, 1, 2, 1, 3, 2, 1, 3, 3, 1, 2, 3, 2, 0, 1, 3, 2, 3, 3, 2, 0, 2, 0, 2, 0, 0, 3, 1, 0, 3, 0, 2, 3, 1, 0, 3, 3, 1, 2, 1, 1, 2, 1, 3, 2, 0, 2, 0, 3, 2, 2, 3, 1, 3, 2, 0, 2, 2, 1, 2, 2, 3, 0, 3, 2, 1, 0, 3, 2, 1, 1, 0, 3, 2, 3, 3, 1, 2, 2, 0, 0, 3, 2, 3, 1, 2, 1, 0, 0, 1, 1, 0, 3, 1, 2, 0, 2, 1, 3, 2, 0, 0, 2, 1, 0, 0, 0, 0, 3, 3, 0, 2, 3, 1, 2, 3, 3, 2, 1, 2, 0, 3, 0, 0, 2, 3, 1, 1, 3, 3, 2, 1, 1, 3, 2, 1, 1, 3, 0, 0, 3, 1, 3, 1, 0, 1, 2, 3, 3, 3, 0, 1, 2, 1, 2, 3, 0, 0, 3, 0, 0, 2, 2, 3, 2, 3, 2, 0, 0, 3, 1, 1, 2, 3, 0, 1, 2, 3, 0, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 2, 1, 2, 1, 3, 0, 0, 3, 0, 0, 2, 0, 2, 0, 3, 3, 1, 0, 1, 1, 2, 1, 2, 0, 2, 0, 3, 2, 0, 2, 3, 2, 0, 1, 1, 2, 2, 0, 0, 1, 2, 3, 0, 2, 2, 3, 0, 3, 3, 2, 0, 2, 3, 3, 3, 1, 2, 0, 0, 1, 2, 0, 3, 0, 3, 3, 0, 2, 0, 3, 0, 2, 3, 1, 2, 1, 2, 0, 2, 1, 1, 2, 3, 3, 0, 0, 1, 0, 1, 0, 3, 0, 2, 3, 1, 0, 2, 0, 3, 2, 1, 2, 2, 0, 2, 2, 1, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 2, 0, 3, 2, 2, 2, 3, 1, 2, 0, 3, 1, 3, 3, 3, 2, 0, 1, 2, 1, 2, 3, 2, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 3, 0, 0, 3, 2, 1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 3, 2, 3, 0, 3, 0, 0, 2, 1, 0, 3, 0, 3, 3, 1, 2, 3, 3, 0, 1, 0, 0, 1, 3, 2, 0, 2, 3, 2, 2, 3, 1, 0, 3, 3, 2, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 3, 1, 0, 3, 2, 0, 3, 3, 2, 0, 0, 3, 2, 1, 3, 2, 0, 0, 3, 0, 0, 1, 3, 3, 1, 0, 1, 3, 3, 2, 2, 0, 3, 0, 0, 0, 1, 2, 0, 3, 1, 2, 3, 2, 3, 3, 2, 1, 1, 0, 1, 2, 0, 0, 3, 0, 0, 2, 0, 1, 1, 2, 2, 0, 2, 3, 1, 1, 1, 2, 0, 1, 0, 2, 3, 0, 2, 3, 2, 0, 0, 3, 3, 3, 2, 1, 2, 1, 3, 1, 1, 0, 2, 0, 0, 3, 2, 3, 0, 2, 1, 2, 2, 1, 3, 1, 1, 3, 3, 2, 3, 2, 1, 1, 0, 0, 3, 2, 3, 3, 3, 1, 3, 1, 2, 2, 1, 3, 3, 1, 3, 0, 0, 0, 2, 2, 2, 2, 1, 3, 2, 0, 1, 2, 2, 2, 3, 0, 3, 1, 1, 1, 2, 2, 3, 0, 3, 1, 2, 3, 2, 0, 3, 3, 0, 3, 0, 0, 2, 2, 1, 2, 0, 2, 1, 1, 3, 2, 1, 2, 2, 1, 3, 3, 1, 1, 2, 3, 2, 1, 1, 1, 0, 3, 1, 2, 1, 0, 0, 1, 2, 2, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 0, 3, 2, 2, 3, 3, 1, 1, 2, 3, 0, 3, 1, 1, 3, 0, 1, 3, 0, 2, 1, 3, 0, 0, 1, 0, 2, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 2, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 2, 0, 2, 0, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 0, 1, 2, 0, 1, 1, 2, 2, 0, 1, 1, 2, 0, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 1, 0, 0, 1, 2, 0, 0, 1, 2, 2, 0, 1, 1, 0, 0, 2, 2, 2, 0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 2, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 0, 2, 1, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 1, 2, 2, 1, 0, 2, 2], [0, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1, 2, 2, 2, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 1, 2, 0, 0, 2, 0, 2, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 1, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 1, 1, 0, 2, 2, 1, 0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 97, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(3.0)\\nif res0 \\g int(0.0):{:\\nb2 = abs(divInt(max(int(3.0), in0),i2)) \\g in0\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile ( max(abs(int(1.0)), ( int(4.0) + max(mod(int(7.0),max(max(int(3.0), ( abs(( i2 - int(8.0) )) + max(( max(max(mod(in1,divInt(res0,( res0 - in0 ))), min(int(9.0), i1)), min(in2, divInt(max(int(8.0), in0),max(max(int(9.0), divInt(int(9.0),int(2.0))), divInt(int(4.0),min(divInt(in0,mod(res0,min(divInt(( min(int(9.0), max(( in1 - divInt(mod(int(1.0),( mod(min(in0, min(( int(0.0) + in2 ), max(mod(int(2.0),int(6.0)), i0))),abs(divInt(max(min(int(9.0), mod(( i2 - in2 ),min(( min(int(9.0), divInt(int(0.0),in0)) * i1 ), int(9.0)))), int(8.0)),in1))) - abs(int(1.0)) )),divInt(res0,( int(7.0) + max(divInt(in2,in1), divInt(int(4.0),in2)) ))) ), i2)) - in0 ),res0), abs(min(i0, ( max(int(8.0), divInt(min(min(( int(1.0) * divInt(in2,min(i0, i0)) ), divInt(abs(int(1.0)),int(6.0))), min(abs(( int(3.0) * int(4.0) )), min(( int(1.0) * int(4.0) ), max(in2, in1)))),abs(int(6.0)))) - max(int(6.0), i0) )))))), int(1.0))))))) + ( max(max(abs(in2), int(1.0)), ( int(9.0) - divInt(abs(i1),i1) )) - max(in1, i0) ) ), mod(( abs(( max(( in0 - in2 ), max(int(3.0), int(2.0))) + divInt(max(i2, int(0.0)),mod(min(res0, divInt(mod(int(8.0),( ( int(0.0) + int(4.0) ) - divInt(int(3.0),int(1.0)) )),mod(( int(3.0) + int(9.0) ),int(0.0)))),int(5.0))) )) + i0 ),( int(2.0) + mod(int(3.0),max(in1, i1)) ))) )), abs(i2))), res0) )) \\ge ( in0 + divInt(i1,min(max(int(5.0), in2), int(9.0))) ) and int(9.0) == mod(int(6.0),( i1 + mod(in2,max(mod(in1,divInt(abs(mod(i1,int(0.0))),int(8.0))), ( ( res0 * i1 ) * int(2.0) ))) )) ):{:\\ni2 += ( abs(i2) - mod(( min(i0, max(max(( i1 * ( abs(min(min(int(7.0), ( i2 + in2 )), int(3.0))) + mod(in1,abs(in2)) ) ), abs(abs(i1))), divInt(i0,abs(in2)))) * ( max(int(4.0), ( int(6.0) + ( i2 * divInt(int(2.0),int(6.0)) ) )) * ( max(min(in0, i2), int(0.0)) * in0 ) ) ),int(2.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( b2 and False ):{:\\nif not in1 \\ge max(in1, divInt(min(int(5.0), i2),( i2 * min(( int(1.0) - divInt(( in1 - ( ( int(4.0) + in2 ) * int(7.0) ) ),int(5.0)) ), int(5.0)) ))):{:\\nin0 = int(9.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not int(2.0) \\ge ( ( divInt(divInt(abs(mod(( i2 + max(divInt(divInt(( min(int(8.0), divInt(in1,max(int(6.0), max(max(abs(mod(in2,int(0.0))), divInt(int(3.0),( min(divInt(max(min(min(max(abs(min(int(9.0), int(1.0))), int(6.0)), int(3.0)), i0), ( ( int(1.0) + ( res0 + min(i0, in1) ) ) - max(divInt(int(8.0),int(4.0)), ( i1 - ( ( mod(int(6.0),( divInt(abs(mod(abs(i2),min(res0, in0))),( int(4.0) * i0 )) * max(in2, max(min(int(5.0), ( min(abs(in1), int(8.0)) + res0 )), i1)) )) - int(3.0) ) - abs(( in2 * ( abs(mod(divInt(min(int(7.0), in0),abs(min(mod(min(mod(abs(abs(( int(1.0) * ( mod(int(7.0),i2) * int(3.0) ) ))),int(2.0)), int(3.0)),( abs(int(8.0)) - in1 )), min(( i2 + max(abs(( i1 + res0 )), max(mod(int(7.0),min(( in1 + i1 ), min(i2, in1))), int(8.0))) ), max(max(int(2.0), i0), int(3.0)))))),min(min(( ( in2 + max(i2, res0) ) - i2 ), int(6.0)), divInt(in0,max(int(5.0), mod(max(( max(max(( int(1.0) - int(2.0) ), i0), int(0.0)) * ( in2 + in1 ) ), min(in2, in2)),( in0 * int(3.0) ))))))) - int(8.0) ) )) ) )) )),( ( in0 - mod(min(int(3.0), int(2.0)),int(8.0)) ) - divInt(in0,int(3.0)) )), i0) + divInt(abs(i2),mod(min(divInt(res0,res0), abs(max(min(mod(int(5.0),divInt(int(8.0),abs(int(2.0)))), int(5.0)), i2))),( i1 - i2 ))) ))), max(( max(i2, divInt(int(1.0),divInt(mod(int(6.0),max(int(7.0), int(2.0))),max(max(divInt(abs(mod(int(1.0),int(3.0))),i1), i1), max(mod(max(abs(min(int(4.0), abs(int(5.0)))), ( mod(int(0.0),max(min(int(3.0), min(in2, in2)), i0)) - mod(( mod(( int(4.0) + abs(divInt(res0,int(6.0))) ),mod(( mod(abs(in1),min(int(3.0), int(1.0))) * int(9.0) ),( divInt(abs(in2),abs(int(5.0))) * ( min(mod(i0,min(min(in1, max(in2, in1)), ( divInt(int(7.0),mod(i0,mod(int(7.0),int(5.0)))) - min(( int(6.0) + mod(divInt(int(6.0),min(abs(int(5.0)), int(2.0))),divInt(abs(mod(int(3.0),int(2.0))),int(9.0))) ), i2) ))), min(int(0.0), ( int(2.0) * i2 ))) + in2 ) ))) + int(3.0) ),mod(( i0 - i2 ),int(1.0))) )),i2), i2))))) * in0 ), divInt(i0,int(1.0))))))) - i2 ),( int(4.0) + res0 )),in0), min(mod(mod(max(abs(int(5.0)), int(8.0)),divInt(abs(i0),max(int(6.0), int(1.0)))),min(in0, int(3.0))), abs(i0))) ),( int(9.0) + abs(i2) ))),i0),int(8.0)) + i1 ) + mod(int(0.0),i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(894.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 162, 162, 6, 4, 2, 14, 6, 8, 2, 2, 165, 4, 675, 186, 168, 89, 99]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [2, 2, 0, 2, 1, 1, 2, 1, 2, 1], [1, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 5, 6, 4, 7, 6, 7, 9, 5, 8, 9, 1, 9, 6, 7, 4, 9, 6, 5, 1, 4, 8, 8, 0, 3, 3, 4, 0, 8, 9, 9, 7, 4, 6], [5, 3, 3, 0, 4, 3], [0, 0, 1, 0, 0, 1], [1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 1, 2, 2, 2, 0], [1], [0, 0], [0, 5, 4, 0, 0, 1, 3, 2, 3, 2, 5, 1, 3, 3, 2, 5, 2, 3, 1, 2, 5, 4, 1, 5, 1, 6, 1, 3, 4, 3, 4, 4, 0, 0, 5], [1, 1], [1, 3, 1, 2, 1, 0, 2, 0, 1, 2, 2, 0, 3, 2, 3, 0, 3, 2, 1, 3, 3, 2, 3, 3, 2, 0, 2, 2, 1, 0, 1, 1, 1, 3, 1, 1, 1, 3, 0, 2, 1, 3, 3, 3, 3, 2, 0, 3, 0, 2, 0, 3, 2, 3, 2, 1, 3, 1, 0, 1, 0, 1, 3, 0, 3, 2, 2, 0, 3, 0, 0, 0, 2, 1, 3, 2, 2, 3, 2, 1, 0, 3, 1, 1, 3, 3, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 2, 0, 2, 3, 0, 1, 0, 2, 1, 1, 3, 1, 2, 1, 1, 0, 3, 2, 0, 2, 2, 2, 0, 0, 2, 1, 3, 0, 1, 0, 2, 0, 1, 1, 2, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [1, 1, 2, 1, 0, 1, 1, 1, 2, 0, 2, 0, 0, 1, 2, 1, 1, 2, 1, 1, 0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 0, 2], [2, 0, 2, 1, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile int(6.0) != max(int(9.0), ( int(5.0) * i0 )):{:\\nb0 = ( in2 + int(6.0) ) \\ge ( ( in1 * max(( abs(i0) - max(( int(4.0) * min(max(divInt(max(max(( i0 + mod(divInt(int(7.0),i1),int(6.0)) ), int(7.0)), int(9.0)),abs(int(5.0))), int(8.0)), int(9.0)) ), min(in0, mod(int(1.0),abs(min(min(max(divInt(i2,abs(in0)), ( i2 - max(( max(( int(9.0) * abs(int(6.0)) ), in2) - int(7.0) ), i1) )), int(4.0)), max(in0, max(( mod(in0,min(i2, in2)) - i2 ), mod(int(9.0),min(divInt(( abs(( int(6.0) + in0 )) + abs(int(5.0)) ),int(1.0)), min(abs(i1), i2)))))))))) ), int(4.0)) ) * ( abs(min(in2, in1)) * int(8.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(8.0) \\ge ( i1 + mod(min(in2, int(0.0)),i1) ) or ( ( int(3.0) + int(3.0) ) \\l abs(int(4.0)) and b1 ) ):{:\\nb0 = False\\nres0 += ( int(0.0) - int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i1 \\le min(divInt(in0,mod(divInt(( in1 - in0 ),divInt(int(9.0),abs(in1))),int(9.0))), in1):{:\\ni0 -= divInt(i0,int(7.0))\\nif int(4.0) \\ge ( in2 - int(6.0) ):{:\\nb0 = not not not b1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 35, 35, 6, 6, 2, 15, 6, 9, 1, 2, 35, 2, 133, 33, 32, 21, 14]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [0, 6, 2], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= int(062.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [1, 2, 2, 1, 1, 1], [0, 1], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 5, 9, 6, 8, 0, 1, 5, 8, 0, 3, 7, 8, 4, 2, 8], [5, 3, 0], [1, 0, 1], [], [1, 0, 1, 1, 0], [0, 0, 0], [1, 1], [1, 0], [0], [1, 1, 4, 1, 3, 2, 4, 1, 4, 1, 5, 1, 6, 0, 1, 6, 2, 3], [0], [2, 2, 2, 1, 3, 3, 1, 3, 3, 2, 1, 0, 1, 2, 3, 0, 0, 1, 1, 3, 1, 3, 3, 1, 3, 1, 2, 2, 0, 3, 1, 2, 0, 0, 2, 0, 2, 1, 0, 0, 0, 2, 1, 2, 2, 1, 2, 3, 3, 1, 3, 0, 2, 3, 3, 3, 0, 3, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 2, 2, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 1, 0, 2, 0], [0, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = divInt(( ( int(6.0) + max(min(int(9.0), max(min(mod(int(5.0),i1), int(9.0)), divInt(abs(in1),i1))), int(6.0)) ) * int(8.0) ),abs(int(0.0)))\\nif abs(abs(int(1.0))) != abs(int(5.0)):{:\\nloopBreak% = 0\\nwhile False:{:\\nb1 = ( divInt(in0,min(int(8.0), divInt(i2,in1))) + ( i1 + ( int(0.0) - in1 ) ) ) \\ge i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = in2 \\l ( int(3.0) + ( mod(int(7.0),mod(max(max(int(8.0), min(i1, ( min(min(min(res0, min(int(4.0), int(2.0))), i0), i1) * res0 ))), i2),int(8.0))) + in0 ) )\\nb1 = True\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 17, 17, 3, 3, 0, 5, 3, 2, 2, 1, 18, 1, 66, 15, 17, 8, 7]}][{"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 1], [1], [1, 1, 1, 1, 1], [1, 4, 3, 4, 5], [2, 5], [], [], [1, 1], [0, 0], [], [], [], [6, 4, 1, 4, 0, 6], [0], [3, 1, 2, 1, 3, 3, 0, 1, 0, 3, 1, 2, 0, 3, 0, 0, 1], [0, 0], [0, 1, 2, 2, 1], [0, 1], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(1.0), ( int(4.0) + max(abs(res0), int(3.0)) )) == in1:{:\\nloopBreak% = 0\\nwhile abs(int(4.0)) != ( i1 - max(in1, i0) ):{:\\nres0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 5, 5, 2, 0, 0, 2, 2, 0, 0, 0, 6, 1, 17, 2, 5, 2, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [2, 0, 0, 1, 1, 1, 2, 1, 0, 1], [0, 1], [1, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 5, 1, 3, 2, 2, 5, 1, 7, 1, 6, 5, 5, 5, 8, 1, 1, 4, 5, 5, 8, 3, 3, 2, 9, 5, 0, 7, 6, 0, 1, 8, 6, 9, 9, 8, 3, 2, 7, 5, 1, 1], [4, 0, 2, 2, 1, 3, 4], [1, 0, 0, 2, 2, 2, 2, 0], [1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 0], [], [1], [6, 5, 0, 4, 4, 3, 1, 5, 0, 3, 6, 3, 1, 5, 2, 4, 2, 1, 6, 4, 5, 3, 0, 1, 2, 6, 3, 2, 4, 5, 3, 5, 4, 2, 6, 4, 2, 6, 2, 3, 3, 5, 3, 0, 0, 3, 0, 1, 4, 0], [1, 0], [2, 0, 0, 0, 0, 1, 3, 3, 3, 3, 2, 1, 3, 1, 3, 3, 3, 2, 3, 2, 2, 2, 0, 2, 2, 2, 3, 1, 3, 3, 0, 3, 3, 0, 0, 1, 1, 2, 0, 3, 2, 2, 1, 3, 2, 1, 0, 2, 3, 3, 2, 3, 3, 0, 0, 1, 0, 2, 1, 2, 0, 3, 0, 1, 2, 0, 2, 2, 0, 1, 0, 2, 2, 0, 1, 1, 2, 0, 3, 1, 3, 0, 3, 0, 0, 3, 0, 3, 2, 0, 0, 2, 0, 3, 1, 1, 3, 2, 0, 0, 2, 2, 2, 2, 3, 0, 2, 0, 2, 1, 0, 2, 1, 1, 1, 3, 0, 1, 3, 1, 1, 0, 1, 0, 0, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 3, 1, 0, 0, 0, 0, 3, 2, 2, 1, 2, 1, 3, 3, 1, 1, 0, 1, 2, 3, 2, 1, 0, 3, 3, 2, 0, 0, 1, 1, 1, 1, 3, 3, 2, 0, 1, 1, 3, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 0, 0, 0, 1, 0, 1, 0, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0, 0, 0, 1, 2, 2, 0, 0, 1, 1, 1, 2, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nres0 += ( in2 + i0 )\\nb0 = ( in1 \\le in1 or not int(0.0) \\l min(abs(min(min(mod(int(5.0),min(int(1.0), max(min(max(( min(mod(( ( in0 * mod(( ( abs(int(3.0)) * abs(max(i1, abs(max(in2, i0)))) ) - int(2.0) ),int(2.0)) ) - mod(in0,abs(mod(mod(int(5.0),abs(( int(1.0) + res0 ))),mod(abs(max(mod(max(min(in0, i1), int(7.0)),in2), ( int(1.0) - ( i2 * min(in1, int(6.0)) ) ))),mod(i2,divInt(divInt(i1,int(5.0)),res0)))))) ),( divInt(in1,int(5.0)) + int(5.0) )), divInt(in2,min(int(8.0), abs(in0)))) - min(i0, i1) ), min(i2, min(( res0 * in0 ), mod(i2,max(int(1.0), int(1.0)))))), abs(( in1 + in2 ))), mod(divInt(mod(( abs(in0) + divInt(in2,( int(4.0) - in1 )) ),( int(5.0) + int(5.0) )),int(8.0)),min(i2, int(3.0)))))), min(int(3.0), int(2.0))), res0)), int(9.0)) )\\n:}else:{:\\nb0 = in1 == i2\\nb2 = max(( res0 + ( ( ( int(5.0) + i2 ) - ( max(max(int(0.0), in0), in0) * in2 ) ) * in0 ) ), abs(mod(( int(7.0) * mod(int(6.0),min(abs(int(0.0)), int(1.0))) ),i0))) == int(8.0)\\n:}\\nb2 = divInt(abs(( int(6.0) * i0 )),abs(abs(mod(in0,i0)))) \\g int(9.0)\\nloopBreak% = 0\\nwhile int(98.0) \\ge int(32.0):{:\\ni1 = int(7.0)\\nb2 = b2\\nb0 = abs(min(( in1 - int(5.0) ), int(1.0))) \\le min(int(1.0), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 2, 8, 42, 42, 7, 8, 1, 11, 7, 4, 0, 1, 50, 2, 176, 45, 43, 24, 22]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [0, 1], [4], [2], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(0.0) \\le int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [1, 0, 1], [1], [2], [1], [2], [], [1], [0], [], [], [], [0, 4, 3, 2, 2, 3], [1, 0], [0, 2, 0, 3, 0, 1, 3, 0], [0], [2, 2], [0, 1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += in1\\nb2 = ( in0 - abs(i2) ) \\g int(2.0)\\ni2 = abs(in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 6, 2, 8, 1, 2, 2, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [0, 1, 1], [8, 8, 3], [4], [2], [], [1], [0], [], [], [], [5, 2, 0], [1], [1, 0, 2, 1, 0], [1], [], [1], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= int(88.0)\\nb2 = i2 \\le divInt(int(3.0),i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 5, 1, 0, 1, 1]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 2, 0, 0, 1], [0, 0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 3, 3, 2, 0, 3, 3, 2, 1, 8, 1], [1, 3, 5], [1, 1], [], [1, 1, 0, 1], [0, 0, 0], [1], [1], [0, 0], [0, 4, 4, 5, 2, 6, 1, 5, 2, 6, 0, 0, 3, 2], [1], [1, 0, 2, 1, 0, 3, 0, 1, 3, 1, 3, 2, 1, 0, 1, 1, 3, 2, 3, 3, 2, 2, 3, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0, 3, 0, 3, 1, 2, 1, 3, 0, 2, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 2, 0, 0, 2], [0, 0, 0, 1, 1, 2, 2, 1], [0, 1, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) \\g i0:{:\\nif ( int(6.0) + in1 ) \\ge max(in1, int(3.0)):{:\\nb1 = False\\n:}\\nb1 = min(int(3.0), max(divInt(int(2.0),in2), int(0.0))) != int(3.0)\\ni2 += max(( min(max(( mod(abs(res0),i1) + ( mod(int(3.0),int(2.0)) - ( in2 - int(1.0) ) ) ), i2), min(res0, min(int(8.0), ( int(1.0) * abs(i0) )))) * ( i0 - in0 ) ), i2)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 12, 12, 3, 2, 0, 4, 3, 1, 1, 2, 14, 1, 45, 10, 10, 8, 3]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 1, 1, 1, 1, 1], [0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 7, 6, 7, 3, 4, 6, 2, 9, 7, 6, 4, 0, 5, 4, 8, 2, 1, 9, 8, 2, 1, 2, 0, 4, 3, 1, 8, 6, 2, 2, 8, 4, 6, 5, 9, 1, 5, 8, 2, 9, 3, 5, 4, 6, 6, 6, 6, 8, 8, 5], [2, 4, 5, 4, 3, 5], [0, 2, 1, 0, 2, 0, 2], [0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 1, 3, 3, 1, 3, 0, 3, 3, 0, 2, 0], [0, 0], [1], [5, 5, 4, 3, 2, 1, 1, 0, 1, 4, 3, 4, 2, 6, 2, 2, 2, 3, 0, 5, 0, 4, 4, 5, 1, 1, 1, 6, 1, 0, 6, 3, 2, 6, 0, 5, 4, 1, 0, 5, 5, 2, 2, 6, 5, 1, 3, 0, 1, 1, 3, 0, 5, 5, 5, 3, 4, 3], [0], [0, 0, 2, 2, 0, 2, 3, 1, 0, 0, 0, 2, 2, 3, 0, 0, 2, 1, 1, 2, 3, 2, 2, 3, 3, 1, 3, 2, 2, 1, 3, 1, 1, 2, 1, 2, 0, 3, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 2, 0, 0, 1, 0, 2, 2, 3, 3, 2, 1, 0, 2, 2, 2, 3, 1, 2, 3, 3, 0, 0, 1, 0, 0, 2, 3, 0, 1, 1, 3, 2, 1, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 2, 0, 3, 0, 0, 0, 3, 0, 3, 0, 2, 1, 1, 1, 2, 1, 0, 2, 0, 1, 3, 0, 0, 3, 0, 2, 2, 3, 2, 0, 2, 3, 1, 2, 2, 1, 3, 2, 2, 2, 1, 0, 2, 3, 1, 2, 1, 3, 2, 3, 1, 3, 0, 1, 3, 1, 0, 3, 3, 3, 2, 2, 3, 0, 2, 2, 0, 1, 3, 2, 0, 2, 0, 2, 1, 0, 1, 1, 0, 1, 2, 3, 1, 2, 1, 3, 1, 0, 1, 2, 2, 0, 1, 0, 0, 2, 1, 2, 0, 0, 1, 3, 2, 0, 0, 1, 1, 3, 0, 2, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 2, 0, 0, 0, 1, 2, 0, 0, 2, 1, 0, 0, 1, 1, 1, 2, 0, 0, 1, 1, 2, 2, 2, 2, 0, 2, 1, 1, 1, 2, 0, 0, 1, 1, 0, 0, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 0, 2], [1, 0, 2, 1, 1, 2, 2, 2, 2, 1, 0, 0, 1, 2, 2, 1, 1, 2, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 2, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 == in2:{:\\nin1 = divInt(mod(in0,divInt(max(int(2.0), i2),i1)),i1)\\n:}else:{:\\nb0 = ( mod(abs(i0),i1) - ( int(5.0) + int(7.0) ) ) \\le mod(min(mod(( min(min(int(6.0), max(( mod(int(7.0),abs(int(3.0))) * int(4.0) ), divInt(int(6.0),( in1 - min(in0, min(in1, ( abs(max(int(2.0), i2)) - min(min(max(max(res0, i2), i2), max(abs(int(9.0)), int(7.0))), int(6.0)) ))) )))), int(4.0)) * divInt(int(0.0),min(int(5.0), int(4.0))) ),( int(8.0) * ( i2 * in0 ) )), int(2.0)),i0)\\nb2 = ( True and ( ( True or ( ( ( min(max(divInt(int(1.0),in2), mod(divInt(divInt(max(int(9.0), mod(abs(abs(i0)),in1)),int(8.0)),in1),in2)), divInt(abs(i1),int(2.0))) * int(1.0) ) - abs(( int(2.0) + ( divInt(int(0.0),i1) + mod(min(mod(( abs(max(max(divInt(mod(i1,max(res0, i1)),i0), abs(res0)), min(in0, divInt(int(4.0),int(3.0))))) - int(1.0) ),( int(8.0) * i2 )), mod(res0,int(6.0))),min(i0, in2)) ) )) ) != max(in1, ( ( max(mod(i1,( min(int(2.0), ( ( int(2.0) * min(divInt(( ( int(8.0) - i0 ) - ( max(int(4.0), ( int(6.0) * abs(divInt(abs(int(5.0)),max(in2, int(9.0)))) )) + abs(int(1.0)) ) ),in2), abs(max(max(( divInt(max(i2, mod(divInt(i2,int(5.0)),abs(( res0 - mod(in2,( int(8.0) + i1 )) )))),int(2.0)) - int(9.0) ), in0), int(3.0)))) ) - ( abs(int(5.0)) - ( int(4.0) + abs(int(6.0)) ) ) )) + i0 )), int(6.0)) - divInt(( i1 - int(6.0) ),i1) ) * in0 )) and b1 ) ) or ( int(6.0) - mod(i0,in2) ) \\le int(8.0) ) )\\nb0 = ( ( min(divInt(in2,in2), int(8.0)) \\ge int(5.0) and abs(in0) != ( in1 + in0 ) ) and b2 )\\n:}\\nb0 = not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 52, 52, 6, 7, 6, 18, 6, 12, 2, 1, 58, 1, 223, 63, 51, 31, 32]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1, 1, 1, 1], [7, 0, 6, 1, 1, 2], [5, 1, 2], [2], [1, 1], [0, 0, 1, 0, 1, 1], [0, 0, 0], [3, 2, 3], [], [], [3, 6, 0, 6, 2, 0], [1], [2, 1, 1, 0, 1, 0, 1, 2, 0, 3, 3, 1, 0, 2, 1, 0], [0, 0, 0], [1, 2], [0, 2, 1, 2], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += ( int(7.0) * int(0.0) )\\nb2 = ( not res0 != int(6.0) or ( i0 \\g int(1.0) or ( res0 - max(abs(int(1.0)), i2) ) == ( int(2.0) * i0 ) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 3, 1, 2, 6, 3, 3, 0, 0, 6, 1, 16, 3, 2, 4, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 0, 1], [5, 1, 9], [1], [1], [], [1], [0], [], [], [], [], [], [3, 1, 1], [], [2], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = abs(int(5.0)) \\g int(19.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1], [6, 8, 5, 2], [3], [0, 2], [0], [0, 0, 1, 0], [0], [3, 2, 0], [], [], [4, 2, 1, 3, 4, 0], [], [2, 2, 2, 1, 2, 0, 2, 2, 3, 0, 3, 2, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0], [2, 0], [1, 2, 0, 1], [1, 0, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not mod(( divInt(int(6.0),divInt(in1,( ( abs(i2) - min(( i1 * int(8.0) ), int(5.0)) ) + in0 ))) - int(2.0) ),in1) \\ge i0 and b2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 2, 1, 4, 1, 3, 0, 0, 6, 0, 19, 7, 2, 4, 3]}][{"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 1, 2, 0, 0, 0, 0, 1], [1, 0, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 7, 5, 2, 2, 7, 9, 4, 2, 6, 4, 5, 3, 6, 7, 2, 3, 9, 4, 9, 7, 5, 5, 1, 3, 2, 9, 3, 8, 7, 2, 9, 6, 7, 4, 3, 3, 4, 7, 5, 4, 3, 4, 0, 2], [1, 2, 2, 3, 2], [1, 1, 0, 2, 0], [], [1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0], [2, 2, 1, 0], [1], [1], [6, 6, 2, 2, 6, 5, 0, 2, 4, 1, 2, 6, 0, 2, 2, 2, 1, 4, 6, 6, 6, 4, 6, 0, 6, 1, 4, 4, 4, 0, 1, 3, 5, 4, 1, 6, 5, 0, 6, 4, 6, 5, 2, 4, 2, 3, 2, 5, 4, 0, 6, 3, 6, 4], [0, 1], [1, 2, 3, 2, 2, 3, 2, 1, 3, 2, 3, 1, 1, 1, 3, 2, 1, 0, 2, 0, 3, 3, 1, 0, 3, 3, 3, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 3, 0, 0, 1, 0, 2, 0, 1, 1, 2, 3, 1, 2, 1, 0, 3, 0, 3, 3, 0, 3, 2, 1, 3, 1, 2, 3, 3, 3, 3, 3, 1, 0, 1, 0, 3, 1, 3, 0, 0, 1, 2, 2, 1, 2, 1, 0, 2, 3, 3, 1, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 0, 3, 0, 1, 2, 0, 1, 0, 2, 1, 2, 1, 1, 2, 3, 2, 1, 1, 0, 3, 2, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 0, 2, 0, 0, 2, 0, 2, 1, 3, 1, 1, 2, 0, 0, 3, 2, 2, 2, 3, 0, 2, 2, 0, 0, 0, 2, 0, 1, 3, 1, 2, 2, 0, 3, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 1, 3, 2, 2, 0, 2, 3, 1, 0, 3, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [1, 2, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 1, 1, 2, 0, 1, 0, 2, 0, 1, 1, 2, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1], [0, 1, 2, 1, 0, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 2, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1]], "fitness": 43, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(7.0) \\g ( max(mod(mod(abs(mod(int(5.0),abs(( abs(int(7.0)) + int(5.0) )))),int(2.0)),abs(mod(int(2.0),res0))), divInt(res0,min(min(int(7.0), i2), max(min(abs(i2), res0), ( ( max(int(9.0), max(in2, i0)) - ( i2 * max(in1, i1) ) ) - int(4.0) ))))) + i2 ):{:\\nif divInt(res0,int(2.0)) == int(6.0):{:\\ni0 = divInt(max(int(4.0), ( int(5.0) - i2 )),abs(i2))\\n:}else:{:\\nloopBreak% = 0\\nwhile min(max(i2, min(( int(3.0) - abs(int(6.0)) ), ( min(max(max(abs(min(int(7.0), i1)), int(2.0)), in1), abs(int(3.0))) - abs(res0) ))), res0) == int(9.0):{:\\nb1 = not ( ( int(4.0) - ( int(9.0) * res0 ) ) * mod(abs(abs(int(7.0))),divInt(in1,int(5.0))) ) \\ge mod(mod(max(min(divInt(divInt(divInt(res0,min(min(( mod(i0,int(5.0)) - divInt(res0,min(i1, int(1.0))) ), ( in1 * int(3.0) )), in1)),divInt(int(2.0),divInt(int(9.0),int(3.0)))),divInt(min(( int(8.0) - int(7.0) ), in1),max(( int(2.0) - mod(i0,i1) ), in0))), int(9.0)), max(min(min(( min(in2, ( in1 + i1 )) - divInt(res0,divInt(int(6.0),max(int(7.0), int(4.0)))) ), divInt(in2,i0)), abs(divInt(mod(( max(res0, ( divInt(in1,res0) * in2 )) - ( i2 + int(3.0) ) ),max(int(3.0), mod(( in1 - abs(int(4.0)) ),int(7.0)))),int(5.0)))), int(4.0))),i2),( in0 * i2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = not divInt(in2,int(3.0)) == max(mod(( in1 + ( max(int(4.0), i0) - max(res0, int(0.0)) ) ),int(2.0)), in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\nres0 += in1\\nb2 = b0\\n", "test_case_results": [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 460, "mapping_values": [1, 9, 9, 3, 6, 46, 46, 5, 5, 0, 9, 5, 4, 1, 1, 54, 2, 198, 53, 47, 25, 29]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [1, 3, 6, 4, 0, 1], [1, 0, 0], [0, 0, 0], [], [], [1], []], "fitness": 43, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= in0\\nres0 = in1\\ni0 = i1\\n", "test_case_results": [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 460, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 3, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 1, 1, 1], [7, 8, 2, 2, 8], [4], [0], [], [1], [0], [], [], [], [6, 0, 5, 6, 4], [0], [3, 0, 2, 3, 3, 3, 1, 1, 1, 2, 2, 1, 0, 0, 1, 0], [1, 0, 0], [2, 0, 1, 0], [2, 2], [0]], "fitness": 43, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(res0) \\le divInt(min(max(min(int(7.0), int(8.0)), int(2.0)), ( ( int(2.0) * i0 ) * in2 )),int(8.0))\\nres0 = in1\\n", "test_case_results": [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 460, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 5, 1, 16, 3, 4, 2, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 5], [0], [0], [], [], [], []], "fitness": 53, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = in2\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 535, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 2, 2, 2, 0, 1, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 5, 7, 3, 6, 9, 2, 8, 4, 1, 5, 0, 2, 7, 5, 5, 5, 7, 2, 9, 9, 1, 8, 0, 8, 7, 4, 9, 9, 4, 4, 8, 7, 8, 4, 2, 6, 0, 4, 8, 4, 3, 1, 7, 1, 6, 6, 3, 3, 3, 9, 4, 0, 0, 2, 0, 4, 2, 1, 4], [0, 5, 4, 4, 3, 4, 1, 3, 2, 4, 4, 5, 3], [1, 0, 2, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 0, 0, 0, 0], [3, 4, 4, 6, 1, 3, 1, 3, 5, 5, 3, 0, 5, 1, 1, 6, 6, 0, 6, 1, 1, 2, 1, 6, 5, 6, 5, 1, 4, 1, 6, 0, 2, 0, 2, 5, 4, 4, 6, 6, 4, 3, 2, 3, 1, 5, 5, 6, 6, 2, 6, 0, 6, 0, 1, 2, 0, 2], [0, 1, 0, 1], [2, 1, 1, 2, 1, 2, 2, 3, 0, 3, 0, 2, 1, 0, 1, 3, 2, 0, 1, 3, 3, 1, 2, 1, 0, 1, 3, 3, 0, 2, 3, 1, 2, 0, 2, 3, 3, 1, 1, 0, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0, 1, 3, 2, 3, 0, 0, 2, 1, 3, 1, 2, 1, 3, 2, 3, 0, 0, 1, 0, 2, 2, 0, 0, 3, 1, 0, 1, 2, 3, 1, 1, 3, 1, 2, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 0, 2, 1, 1, 0, 2, 1, 3, 3, 0, 3, 1, 1, 3, 0, 2, 3, 0, 3, 3, 1, 2, 1, 0, 2, 0, 1, 1, 2, 3, 2, 0, 3, 2, 0, 0, 1, 2, 2, 3, 2, 0, 1, 3, 0, 1, 2, 2, 1, 2, 0, 2, 2, 1, 1, 3, 2, 3, 0, 3, 3, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 1, 3, 1, 2, 2, 1, 2, 1, 3, 0, 0, 3, 3, 2, 0, 3, 3, 0, 2, 1, 2, 1, 2, 2, 0, 3, 0, 3, 3, 1, 1, 3, 1, 3, 0, 2, 1, 2, 0, 1, 1, 2, 1, 2, 3, 3, 1, 1, 1, 2, 3, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 0, 1, 2, 1, 2, 2, 0, 0, 2, 2, 1, 1, 0, 0, 0, 1, 2, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0, 1, 2, 2, 0, 2, 2, 1, 2, 0, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 0], [1, 2, 1, 0, 0, 1, 1, 1, 2, 2, 1, 1, 2, 2, 0, 0, 0, 1, 1, 1, 2, 1, 1, 0, 2, 2, 1, 2, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1]], "fitness": 53, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(int(3.0),int(3.0)) \\l ( int(5.0) - divInt(( max(in0, min(in1, divInt(int(7.0),in1))) * int(3.0) ),max(divInt(res0,int(6.0)), abs(max(int(9.0), mod(int(2.0),i1))))) )\\nb0 = int(8.0) != abs(abs(in0))\\nloopBreak% = 0\\nwhile ( min(int(4.0), ( i1 - divInt(min(abs(int(1.0)), int(5.0)),in0) )) + ( ( ( int(0.0) + int(2.0) ) - in2 ) - in2 ) ) \\le in0:{:\\nif divInt(i0,int(7.0)) \\le abs(( max(in2, i1) - divInt(int(5.0),max(int(5.0), divInt(int(5.0),min(( min(i1, res0) * int(7.0) ), res0)))) )):{:\\nloopBreak% = 0\\nwhile mod(( i0 * res0 ),min(int(2.0), i1)) \\ge int(9.0):{:\\nb2 = divInt(max(int(9.0), int(1.0)),abs(int(8.0))) \\le mod(int(0.0),int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = divInt(( i1 - i2 ),i1) \\g int(7.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( in2 - res0 )\\nif ( int(4.0) * int(9.0) ) \\ge in2:{:\\nif divInt(int(9.0),max(max(i1, min(int(4.0), int(4.0))), min(in1, divInt(abs(i1),abs(abs(int(8.0))))))) == ( int(7.0) * res0 ):{:\\nif mod(i0,int(8.0)) \\le int(4.0):{:\\nif mod(abs(mod(i2,min(divInt(i0,i2), int(2.0)))),mod(mod(min(( in2 + int(6.0) ), max(in1, int(0.0))),divInt(mod(int(4.0),( in1 + divInt(( int(8.0) + int(4.0) ),abs(( abs(res0) - min(abs(int(3.0)), int(1.0)) ))) )),res0)),int(7.0))) \\le in1:{:\\nin0 -= i2\\n:}\\n:}\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( in0 - i1 ) != abs(int(1.0)):{:\\nloopBreak% = 0\\nwhile max(int(6.0), ( ( int(6.0) * ( int(3.0) - abs(in2) ) ) - in2 )) \\ge min(max(( res0 + abs(max(res0, divInt(int(3.0),mod(int(3.0),( ( i2 * max(res0, max(abs(int(9.0)), int(4.0))) ) * abs(int(0.0)) ))))) ), max(i0, ( int(0.0) - mod(res0,int(2.0)) ))), int(0.0)):{:\\ni0 = ( int(4.0) * divInt(max(abs(int(2.0)), int(1.0)),int(4.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= mod(min(i2, i0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 535, "mapping_values": [1, 17, 17, 9, 8, 61, 61, 13, 4, 0, 13, 13, 0, 0, 5, 58, 4, 219, 56, 48, 29, 29]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 0, 0, 2, 1, 1, 1, 1], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 4, 9, 9, 8, 2, 6, 6, 8, 7, 9, 5, 1], [1, 0, 4, 1], [2, 0, 1], [], [0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0], [2, 1, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1], [1, 5, 5, 3, 2, 5, 5, 3, 5, 2, 6, 3, 6, 4, 3], [0, 0, 0], [0, 2, 2, 2, 1, 3, 1, 2, 3, 2, 2, 0, 1, 3, 3, 0, 0, 3, 1, 1, 0, 2, 1, 3, 1, 2, 3, 3, 2, 0, 0, 1, 1, 2, 1, 2, 2, 3, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [2, 2, 2, 2, 2, 2, 2, 0, 1], [2, 0, 2, 1, 1, 2], [1, 0, 1, 0, 1, 1, 0]], "fitness": 67, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not i1 \\g mod(( divInt(int(8.0),abs(int(7.0))) * ( abs(mod(( in2 + int(4.0) ),abs(abs(in2)))) * in0 ) ),abs(int(9.0))):{:\\nloopBreak% = 0\\nwhile int(9.0) \\l i2:{:\\nif divInt(int(8.0),abs(int(2.0))) \\le mod(abs(min(( in2 - in2 ), int(6.0))),int(6.0)):{:\\nloopBreak% = 0\\nwhile True:{:\\nin0 = mod(int(8.0),( ( max(in2, int(7.0)) - i2 ) * int(9.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = int(5.0) \\g int(1.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\nb0 = False\\n:}else:{:\\nb1 = False\\n:}\\n:}\\nres0 = in0\\nres0 = divInt(in1,in0)\\n", "test_case_results": [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], "other_info": {}, "test_fitness": 711, "mapping_values": [1, 11, 11, 5, 6, 14, 14, 4, 3, 0, 9, 4, 5, 4, 3, 15, 3, 48, 13, 9, 6, 7]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 1, 1], [0, 1], [5, 2], [], [], [], [], [], [], [], [], [6, 4, 3, 0, 0], [1, 0, 1], [3, 0, 0, 1], [], [2], [1, 0], []], "fitness": 67, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= abs(in1)\\nin0 = i0\\ni0 += int(52.0)\\n", "test_case_results": [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 704, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 1, 2, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 2, 1, 0, 2, 0, 2, 1, 1], [0, 0, 1], [0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 3, 0, 4, 8, 0, 7, 6, 8, 3, 6, 1, 4, 1, 7, 9, 5, 5, 9, 5, 1, 7, 3, 1, 5, 5, 7, 4, 0, 6, 1, 2, 3, 8, 6, 3, 5, 4, 6, 1, 7, 3, 3, 0, 5, 8, 6, 4, 2, 2, 7, 2, 6, 9, 4, 0, 8, 2, 2, 3, 8, 0, 1, 7, 3, 3, 9, 4, 3, 1, 1, 9, 5, 8, 8, 0, 8, 6, 1, 9, 3, 3, 5, 6, 7, 0, 9, 5, 4, 3, 5, 1, 3, 2, 2, 3, 4, 8, 8, 6, 4, 2, 0, 4, 3, 7, 4, 4, 9, 9, 6, 8, 8, 1, 6, 1, 1, 2, 3, 7, 4, 7, 2, 8, 0, 3, 5, 2, 5, 0, 0], [1, 5, 4, 4, 4, 1, 4, 2], [1, 2, 2], [1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 1, 2, 3], [1], [0, 1], [1, 0, 2, 4, 0, 3, 4, 6, 3, 4, 5, 0, 4, 3, 1, 2, 6, 4, 2, 1, 2, 2, 6, 2, 2, 6, 3, 3, 6, 0, 5, 2, 6, 2, 0, 6, 4, 0, 6, 6, 1, 5, 6, 0, 5, 3, 4, 1, 1, 6, 4, 3, 6, 3, 5, 6, 3, 1, 4, 2, 0, 1, 6, 0, 2, 5, 1, 0, 5, 4, 0, 5, 1, 4, 6, 2, 5, 6, 4, 3, 3, 6, 3, 6, 6, 2, 3, 4, 5, 2, 6, 2, 1, 0, 3, 0, 1, 1, 5, 1, 0, 1, 3, 3, 3, 5, 3, 3, 6, 4, 5, 0, 4, 1, 6, 2, 4, 0, 5, 1, 2, 1, 6, 5, 5, 2, 1, 5, 1, 0, 1, 4, 5, 0, 6, 2, 3, 3], [0, 1, 1], [0, 3, 1, 2, 3, 2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 1, 0, 3, 2, 2, 0, 2, 3, 0, 3, 0, 3, 0, 3, 2, 1, 3, 2, 1, 2, 2, 2, 3, 0, 1, 3, 0, 0, 3, 3, 3, 1, 1, 0, 2, 0, 2, 2, 3, 2, 0, 2, 3, 1, 1, 1, 0, 1, 3, 3, 1, 2, 2, 0, 1, 1, 1, 1, 3, 1, 2, 2, 3, 0, 0, 2, 0, 0, 2, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 2, 1, 0, 3, 3, 2, 3, 2, 2, 1, 0, 0, 0, 1, 1, 2, 2, 1, 2, 1, 0, 2, 2, 1, 0, 2, 1, 2, 2, 2, 0, 2, 2, 2, 1, 1, 3, 0, 2, 2, 0, 1, 0, 3, 3, 0, 0, 0, 1, 1, 0, 3, 1, 3, 0, 1, 0, 0, 0, 2, 3, 3, 1, 2, 3, 2, 1, 2, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 3, 3, 2, 1, 3, 3, 2, 2, 3, 3, 2, 0, 3, 2, 3, 3, 3, 2, 2, 0, 0, 1, 1, 2, 0, 3, 0, 3, 2, 3, 0, 3, 0, 3, 0, 0, 0, 3, 3, 3, 0, 0, 1, 0, 3, 0, 0, 1, 0, 3, 0, 0, 0, 2, 1, 3, 2, 1, 0, 2, 1, 0, 0, 3, 3, 0, 1, 2, 1, 1, 2, 3, 0, 2, 0, 1, 3, 1, 1, 2, 2, 2, 3, 2, 3, 2, 0, 0, 1, 3, 0, 0, 3, 2, 3, 0, 2, 1, 1, 0, 0, 2, 0, 3, 3, 2, 1, 0, 0, 3, 3, 0, 1, 3, 0, 0, 2, 3, 0, 3, 1, 0, 0, 3, 1, 3, 3, 2, 0, 3, 2, 2, 3, 2, 2, 1, 2, 3, 0, 3, 3, 3, 1, 3, 1, 3, 0, 2, 0, 2, 3, 1, 0, 1, 2, 0, 2, 2, 2, 3, 1, 0, 2, 3, 2, 2, 0, 0, 3, 3, 3, 1, 2, 1, 1, 3, 2, 0, 0, 2, 2, 0, 0, 1, 3, 1, 2, 2, 3, 0, 3, 1, 1, 3, 1, 3, 0, 2, 1, 3, 2, 1, 2, 2, 2, 0, 2, 2, 2, 3, 0, 0, 1, 2, 1, 2, 2, 3, 3, 0, 2, 2, 0, 2, 2, 1, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 3, 0, 1, 3, 2, 3, 3, 3, 3, 1, 3, 3, 2, 1, 2, 2, 1, 2, 2, 3, 3, 1, 2, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 2, 2, 1, 3, 0, 0, 0, 3, 1, 1, 1, 0, 0, 0, 1, 0, 1, 2, 3, 1, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 3, 1, 3, 3, 0, 3, 1, 2, 1, 0, 1, 0, 1, 1, 3, 0, 2, 0, 1, 3, 2, 3, 1, 1, 0, 3, 3, 2, 1, 1, 2, 3, 2, 2, 0, 1, 2, 0, 1, 2, 0, 3, 2, 2, 3, 2, 0, 0, 1, 2, 3, 2, 0, 3, 3, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 3, 3, 1, 2, 2, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [2, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1, 2, 0, 0, 0, 1, 2, 0, 2, 2, 0, 1, 0, 2, 0, 0, 0, 0, 1, 2, 1, 0, 1, 2, 0, 1, 1, 2, 2, 1, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 0, 1, 2, 0, 1, 2, 1, 2, 2, 1, 2, 0, 1, 1, 1, 2, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 2, 2, 2, 0, 1, 1, 2, 0, 2, 2], [2, 1, 1, 1, 0, 1, 0, 1, 2, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 0, 2, 2, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 0, 1, 2, 1, 1, 0, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1]], "fitness": 67, "tree_depth": 124, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( i1 \\g abs(int(1.0)) or ( max(mod(int(1.0),mod(min(int(3.0), ( max(mod(int(0.0),mod(int(4.0),i0)), max(mod(( i2 * mod(min(in1, min(i0, abs(in0))),max(divInt(int(8.0),min(divInt(int(0.0),divInt(( ( max(in1, int(7.0)) - abs(res0) ) - in0 ),min(min(min(int(6.0), int(8.0)), in1), ( in2 - mod(( max(( i0 + mod(abs(int(3.0)),int(6.0)) ), int(1.0)) - in1 ),int(4.0)) )))), min(abs(int(1.0)), mod(divInt(in0,int(7.0)),int(9.0))))), int(5.0))) ),int(5.0)), abs(int(9.0)))) + ( mod(min(i1, i2),( res0 - in1 )) * ( i2 * max(min(int(5.0), ( int(1.0) - int(7.0) )), int(3.0)) ) ) )),i1)), int(1.0)) - i2 ) != int(5.0) ) or i2 \\le ( int(5.0) - res0 ) )\\nif abs(min(mod(min(divInt(( int(7.0) + i2 ),i2), res0),int(4.0)), int(0.0))) \\le ( mod(int(6.0),divInt(int(1.0),in0)) - mod(( int(2.0) * in0 ),divInt(int(3.0),( divInt(( res0 + ( divInt(divInt(int(8.0),int(6.0)),min(i0, ( ( in2 * int(3.0) ) * i2 ))) + min(max(res0, i2), i0) ) ),int(5.0)) * int(4.0) ))) ):{:\\nres0 = in1\\ni0 *= abs(int(6.0))\\nif not False:{:\\nb2 = not ( max(res0, int(1.0)) \\le res0 or i1 \\g in2 )\\n:}else:{:\\nloopBreak% = 0\\nwhile ( min(max(int(7.0), divInt(abs(( int(3.0) - ( res0 + int(3.0) ) )),mod(divInt(i0,int(0.0)),( int(5.0) + min(in2, mod(( divInt(( max(max(( int(8.0) - abs(abs(( ( max(abs(( in0 + max(( min(abs(abs(divInt(mod(in1,i1),int(6.0)))), int(4.0)) - divInt(i1,max(res0, max(( min(in1, min(in0, min(res0, in0))) - in2 ), min(abs(min(res0, in0)), int(2.0))))) ), i1) )), min(in1, i2)) + int(2.0) ) - i0 ))) ), min(i1, res0)), i0) + ( int(7.0) * max(mod(int(2.0),i2), ( int(6.0) - in2 )) ) ),i1) - min(max(i0, int(9.0)), mod(int(4.0),int(0.0))) ),( max(in2, mod(in1,int(8.0))) - max(int(2.0), int(2.0)) ))) )))), mod(mod(( min(mod(abs(divInt(i0,in2)),int(3.0)), min(i1, in1)) * min(( min(res0, mod(int(8.0),int(0.0))) * i2 ), in2) ),divInt(res0,max(min(( int(1.0) * in1 ), in0), max(max(in0, int(7.0)), abs(res0))))),in0)) - ( min(res0, abs(int(3.0))) - res0 ) ) \\le i2:{:\\nb2 = max(int(3.0), max(max(( in0 * min(mod(( min(divInt(( int(9.0) - mod(max(in1, abs(min(max(int(4.0), abs(int(3.0))), max(in2, ( i2 * ( abs(int(1.0)) + res0 ) ))))),int(1.0)) ),( i2 - ( divInt(( abs(int(9.0)) * i1 ),( max(divInt(divInt(i0,in0),abs(min(max(int(5.0), mod(int(8.0),int(8.0))), max(mod(i0,i1), divInt(divInt(i1,in2),int(0.0)))))), max(int(8.0), ( ( abs(i1) - abs(int(6.0)) ) - int(1.0) ))) + abs(int(9.0)) )) * min(i0, divInt(int(3.0),abs(divInt(int(3.0),( divInt(mod(i1,divInt(divInt(( abs(in0) * in0 ),int(5.0)),( int(6.0) - ( mod(max(min(in0, mod(mod(in2,( mod(int(7.0),int(0.0)) + int(9.0) )),( divInt(in0,in0) + ( ( divInt(( res0 + in1 ),abs(in2)) + int(5.0) ) + max(divInt(abs(min(max(max(int(4.0), min(abs(mod(int(3.0),mod(( int(5.0) - divInt(mod(min(min(int(1.0), ( mod(( mod(int(3.0),i0) - mod(( int(2.0) - mod(int(2.0),abs(divInt(( int(3.0) * abs(in1) ),i1))) ),res0) ),min(int(4.0), int(8.0))) + int(8.0) )), i2),in1),i0) ),int(6.0)))), in2)), int(4.0)), ( min(int(2.0), min(int(0.0), divInt(int(4.0),int(3.0)))) * int(7.0) ))),i1), int(4.0)) ) ))), i2),( ( int(4.0) + min(int(9.0), min(min(i1, abs(int(9.0))), mod(int(6.0),res0))) ) + int(8.0) )) - in2 ) ))),int(8.0)) + int(1.0) ))))) ) )), abs(in2)) + divInt(i2,int(6.0)) ),max(divInt(min(int(1.0), int(1.0)),i1), min(abs(divInt(int(2.0),int(3.0))), ( abs(mod(( in2 + int(7.0) ),mod(i1,int(4.0)))) - ( i0 - abs(( divInt(min(mod(i1,in1), int(7.0)),( max(( in2 + max(abs(int(2.0)), int(8.0)) ), int(0.0)) - int(3.0) )) * i0 )) ) )))), min(res0, int(5.0))) ), int(2.0)), int(5.0))) == abs(abs(int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 += ( ( int(0.0) + in0 ) + in0 )\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], "other_info": {}, "test_fitness": 646, "mapping_values": [1, 9, 9, 3, 6, 132, 132, 8, 3, 3, 14, 8, 6, 1, 2, 138, 3, 556, 157, 132, 78, 81]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [6, 3], [0], [3, 1, 0], [], [0], [], []], "fitness": 71, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(int(3.0), in0)\\n", "test_case_results": [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0], "other_info": {}, "test_fitness": 710, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 2, 1, 2, 2, 1, 1, 0, 0, 1, 0], [0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 1, 0, 6, 0, 7, 7, 3, 1, 9, 7, 3, 4, 4, 2, 5, 1, 3, 3, 9, 7, 0, 9, 6, 7, 7, 0, 7, 2, 5, 3, 3, 4, 8, 1, 6, 4, 4, 2, 9, 1, 1], [3, 2, 0, 5, 5, 3, 5, 0, 5, 2], [1, 2, 1, 2, 2, 1, 2, 1], [1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 2], [], [1, 1, 0], [4, 2, 5, 6, 0, 5, 1, 0, 4, 3, 2, 0, 3, 6, 2, 5, 6, 0, 1, 6, 6, 1, 3, 3, 1, 4, 5, 5, 5, 2, 2, 4, 6, 6, 2, 2, 6, 5, 6, 0, 6, 3, 3, 3, 5, 2, 6, 0, 2, 6, 6, 1, 3, 2, 1, 0, 0, 3, 3, 2, 0, 4, 1, 0, 3, 6, 4, 1], [0], [1, 2, 2, 2, 3, 1, 0, 2, 3, 1, 1, 1, 0, 2, 0, 0, 3, 3, 1, 0, 3, 1, 2, 0, 0, 1, 2, 3, 0, 1, 2, 0, 0, 3, 0, 3, 1, 3, 3, 3, 0, 2, 0, 1, 2, 0, 0, 3, 1, 1, 2, 2, 3, 3, 1, 3, 2, 1, 0, 2, 3, 0, 2, 3, 3, 2, 1, 1, 1, 1, 3, 3, 0, 2, 2, 0, 1, 0, 3, 0, 1, 2, 0, 3, 1, 0, 0, 0, 1, 2, 2, 0, 2, 2, 3, 0, 2, 2, 0, 2, 3, 1, 0, 0, 0, 3, 0, 2, 3, 2, 0, 2, 2, 3, 0, 0, 3, 1, 2, 0, 3, 0, 2, 1, 1, 1, 2, 3, 1, 0, 2, 0, 3, 2, 3, 0, 1, 3, 3, 3, 1, 3, 2, 3, 3, 0, 0, 2, 2, 0, 0, 3, 0, 2, 3, 1, 3, 2, 1, 0, 2, 0, 0, 1, 1, 3, 0, 2, 3, 2, 2, 0, 0, 2, 3, 2, 0, 3, 3, 2, 3, 3, 2, 1, 3, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 1, 0, 1, 2, 0, 3, 0, 1, 2, 3, 0, 0, 3, 2, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 2, 0, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 2, 0, 0, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0, 0, 2, 1, 2, 0, 1, 1, 0], [1, 1, 0, 1, 0, 2, 1, 1, 1, 2, 0, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0]], "fitness": 72, "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b2 or int(7.0) \\ge ( mod(divInt(abs(int(4.0)),in1),( max(int(3.0), int(1.0)) - int(0.0) )) - i2 ) )\\nif divInt(in2,res0) == abs(abs(int(6.0))):{:\\nb1 = i0 \\l abs(int(0.0))\\nif ( in2 + i1 ) != int(7.0):{:\\nif divInt(abs(i0),int(7.0)) != divInt(in1,in0):{:\\nb2 = min(i2, max(int(3.0), max(max(max(i0, ( in0 - int(1.0) )), divInt(res0,i2)), abs(int(9.0))))) \\ge int(7.0)\\n:}\\n:}else:{:\\nb2 = ( ( abs(min(int(3.0), max(( int(4.0) + in2 ), mod(min(res0, ( min(max(divInt(int(4.0),int(2.0)), int(5.0)), int(1.0)) * max(max(i0, divInt(mod(i1,int(3.0)),res0)), abs(res0)) )),int(3.0))))) - divInt(i1,min(int(9.0), in0)) ) - in0 ) != i1\\n:}\\n:}else:{:\\nb1 = not int(7.0) \\l ( ( in1 - divInt(( abs(in2) * ( mod(in2,divInt(max(int(0.0), in2),i2)) + i2 ) ),min(in1, mod(abs(mod(res0,( ( min(res0, i2) * min(int(9.0), divInt(i2,max(res0, divInt(int(6.0),int(7.0))))) ) - int(7.0) ))),( max(int(0.0), in2) * divInt(res0,max(( min(i0, int(7.0)) + abs(abs(max(int(2.0), min(( abs(min(res0, in0)) + mod(mod(in0,in0),max(in2, ( min(int(5.0), abs(( int(3.0) - i2 ))) + divInt(res0,i0) ))) ), int(3.0))))) ), int(4.0))) )))) ) - abs(i2) )\\nres0 = divInt(min(( ( res0 + i1 ) - ( max(( in0 + min(min(( abs(max(( int(8.0) - abs(mod(divInt(( i2 * i1 ),i0),int(1.0))) ), i0)) - in0 ), in0), i2) ), i0) - in1 ) ), int(6.0)),i1)\\nb2 = min(int(4.0), i0) != int(4.0)\\n:}\\nb1 = mod(in0,max(res0, int(2.0))) == divInt(max(in1, i1),min(divInt(int(9.0),int(1.0)), int(1.0)))\\n", "test_case_results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], "other_info": {}, "test_fitness": 780, "mapping_values": [1, 11, 11, 3, 8, 44, 44, 10, 8, 1, 13, 10, 3, 0, 3, 68, 1, 218, 54, 53, 26, 28]}, {"genotype": [[0], [0, 1, 1, 1, 1], [1, 2, 0, 2, 1], [0, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 9, 3, 9, 3, 2, 6, 8, 0, 9, 3, 0, 9, 9, 5, 4, 0, 1, 3, 2, 8, 7, 1, 5, 8, 8, 7, 2, 8, 5, 6, 1, 4, 3, 5, 6, 8, 6, 7, 4, 3, 3, 4, 1, 3, 5, 8, 7, 5, 2, 6, 1, 4, 2, 7, 6, 8, 3, 8, 5, 4, 0, 0, 1, 5, 1, 4, 5, 8, 0, 8, 4, 0, 0, 8, 7, 5, 2, 7, 4, 6, 4, 4, 4, 6, 4, 5, 2, 9, 2, 9, 2, 3, 7, 1, 7, 8, 6, 7, 0, 5, 5, 6, 7, 1, 1, 8, 5, 0, 3, 0, 3, 8, 1, 2, 9, 8, 3, 7, 0, 7, 2, 8, 3, 8, 2, 1, 7, 7, 3, 6, 6, 4, 1, 8, 9, 7, 1, 6, 7, 9, 7, 1, 3, 3], [3], [2], [], [1, 0], [0], [0], [], [1], [4, 5, 3, 2, 2, 1, 2, 1, 3, 0, 4, 6, 5, 1, 3, 5, 1, 3, 3, 1, 5, 6, 3, 4, 3, 4, 2, 0, 0, 3, 1, 4, 0, 3, 3, 2, 1, 6, 3, 1, 5, 5, 6, 1, 5, 0, 1, 0, 2, 3, 3, 6, 5, 6, 0, 2, 4, 5, 4, 5, 0, 6, 3, 3, 4, 6, 6, 1, 4, 1, 4, 3, 4, 5, 1, 2, 1, 4, 2, 5, 4, 6, 2, 1, 5, 1, 5, 3, 3, 6, 3, 0, 4, 4, 2, 4, 1, 5, 6, 3, 3, 0, 4, 4, 1, 5, 3, 0, 0, 1, 0, 1, 4, 1, 5, 5, 4, 0, 6, 3, 1, 4, 0, 3, 4, 0, 6, 2, 4, 0, 5, 5, 2, 4, 2, 3, 4, 1, 2, 0, 3, 2, 0, 3, 2, 4, 1, 4, 1, 1, 0, 3, 3, 5, 6, 5, 3], [1, 0, 0], [0, 2, 2, 1, 2, 1, 1, 3, 3, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 3, 2, 2, 0, 3, 1, 3, 3, 0, 2, 3, 2, 2, 1, 1, 3, 3, 1, 0, 0, 2, 3, 0, 3, 3, 3, 3, 0, 2, 2, 0, 3, 3, 2, 1, 3, 3, 2, 2, 0, 1, 3, 2, 2, 3, 0, 3, 2, 2, 1, 0, 0, 2, 3, 3, 2, 2, 1, 1, 3, 0, 1, 1, 2, 3, 3, 3, 2, 3, 2, 2, 2, 0, 3, 2, 2, 1, 2, 1, 2, 2, 2, 2, 0, 0, 3, 0, 3, 2, 2, 3, 2, 1, 2, 3, 0, 2, 3, 0, 3, 2, 2, 3, 3, 1, 0, 3, 2, 1, 0, 3, 0, 1, 0, 2, 1, 1, 0, 2, 3, 2, 2, 3, 0, 3, 0, 1, 2, 0, 1, 3, 3, 3, 0, 2, 3, 3, 2, 0, 2, 2, 2, 3, 0, 2, 1, 1, 0, 1, 3, 2, 0, 1, 0, 1, 2, 2, 2, 3, 2, 0, 2, 0, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 0, 0, 0, 2, 0, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0, 0, 1, 0, 2, 2, 1, 2, 3, 0, 1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 1, 1, 2, 2, 3, 0, 3, 3, 3, 3, 1, 2, 3, 1, 0, 0, 1, 0, 1, 3, 3, 3, 3, 1, 0, 2, 1, 2, 1, 1, 3, 3, 3, 0, 3, 3, 0, 1, 1, 3, 2, 0, 2, 2, 0, 3, 0, 2, 1, 2, 3, 3, 1, 2, 2, 2, 2, 3, 1, 1, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 3, 2, 3, 0, 0, 1, 2, 3, 1, 0, 3, 3, 3, 0, 3, 1, 0, 2, 3, 2, 2, 0, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 0, 3, 3, 2, 0, 1, 0, 3, 2, 0, 0, 3, 2, 0, 2, 2, 3, 0, 0, 1, 2, 1, 3, 3, 2, 2, 0, 0, 2, 3, 2, 1, 3, 2, 1, 0, 1, 2, 2, 1, 0, 2, 0, 2, 0, 3, 2, 1, 2, 1, 0, 1, 2, 0, 2, 3, 1, 1, 2, 0, 0, 1, 2, 0, 1, 3, 3, 0, 3, 1, 2, 2, 2, 3, 0, 1, 2, 3, 3, 0, 3, 1, 0, 2, 1, 0, 3, 0, 2, 2, 2, 1, 3, 0, 3, 2, 2, 2, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 0, 0, 1, 1, 0, 1, 3, 0, 1, 1, 2, 3, 2, 0, 3, 2, 2, 1, 3, 0, 2, 0, 1, 3, 3, 1, 2, 1, 3, 0, 2, 3, 2, 0, 0, 1, 2, 1, 1, 1, 2, 3, 2, 3, 1, 1, 1, 3, 3, 3, 2, 0, 0, 2, 1, 3, 2, 3, 1, 3, 1, 2, 0, 3, 3, 1, 3, 2, 0, 1, 1, 1, 3, 0, 0, 2, 1, 0, 0, 0, 2, 0, 1, 1, 1, 3, 2, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 3, 0, 0, 1, 1, 3, 2, 2, 3, 0, 2, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 3, 2, 0, 0, 1, 3, 1, 1, 0, 0, 2, 3, 3, 2, 1, 3, 0, 0, 1, 1, 2, 0, 2, 3, 2, 1, 3, 2, 0, 3, 0, 1, 2, 1, 0, 2, 1, 3, 3, 0, 2, 1, 0, 3, 2, 2, 1, 0, 2, 2, 1, 3, 2, 2, 2, 2, 1, 1, 1, 3, 2, 2, 3, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 1, 1, 3, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 2, 0, 0, 2, 0, 0, 0, 2, 0, 1, 2, 0, 1, 2, 2, 1, 1, 2, 0, 0, 0, 2, 0, 1, 0, 2, 1, 2, 2, 0, 0, 0, 1, 2, 0, 0, 1, 2, 0, 2, 2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 1, 2, 2, 0, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 2, 1, 0, 0, 0, 2, 2, 2, 0, 2, 0, 1, 1, 2, 2, 0, 1, 0, 0, 0, 0, 2, 0, 1, 1, 2, 0, 2, 1, 0, 2, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 2, 2, 1, 1, 0, 0], [1, 1, 1, 2, 0, 0, 2, 0, 0, 2, 0, 0, 1, 2, 0, 0, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 0, 2, 0, 2, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 0, 1, 1, 0, 1, 0, 2, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0, 2, 1, 1, 0, 1, 2, 1, 1, 0, 2, 2, 0, 2, 1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 2, 2, 0, 1, 2, 1, 2, 2, 2, 0, 2, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0]], "fitness": 74, "tree_depth": 166, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= in2\\nif divInt(( int(1.0) - divInt(int(3.0),int(9.0)) ),min(max(( mod(int(3.0),( ( int(9.0) - mod(int(3.0),mod(mod(int(2.0),abs(mod(mod(in0,min(int(6.0), min(abs(i2), ( min(( ( int(8.0) * int(0.0) ) + min(min(int(9.0), i2), i1) ), ( abs(i2) + min(max(abs(min(i1, ( divInt(in0,max(abs(divInt(int(3.0),abs(max(( ( i0 * int(0.0) ) + max(mod(( abs(in1) + min(divInt(( int(9.0) * res0 ),in2), ( min(min(( ( int(9.0) + int(5.0) ) + abs(i1) ), int(4.0)), int(0.0)) - divInt(min(max(min(mod(abs(( mod(( in0 * max(divInt(( int(1.0) + ( int(3.0) + divInt(( ( mod(in2,i1) * abs(in0) ) - abs(( divInt(min(( int(2.0) - mod(min(in0, ( min(i1, max(mod(( abs(min(int(8.0), in2)) * min(( int(7.0) * res0 ), max(in0, int(1.0))) ),in1), divInt(int(5.0),int(8.0)))) - in0 )),( abs(( divInt(min(in1, abs(i2)),int(8.0)) * ( i0 - int(7.0) ) )) * abs(min(abs(i0), divInt(max(abs(( in0 - ( ( mod(min(i1, ( int(2.0) - int(8.0) )),in1) + int(5.0) ) * max(( i0 + int(6.0) ), in0) ) )), int(1.0)),divInt(divInt(( min(mod(in0,divInt(i2,max(int(4.0), min(max(int(3.0), abs(abs(int(5.0)))), min(abs(i1), res0))))), in0) * ( i1 + ( ( ( in2 * max(max(in2, res0), i1) ) - in2 ) * i0 ) ) ),int(6.0)),i1)))) )) ), mod(mod(int(8.0),( max(i0, int(6.0)) - int(7.0) )),( int(4.0) - i2 ))),divInt(( int(3.0) + ( int(3.0) + abs(in0) ) ),int(4.0))) * int(1.0) )) ),( ( abs(in0) * max(abs(max(max(int(3.0), divInt(max(int(5.0), res0),in2)), int(8.0))), res0) ) - int(7.0) )) ) ),abs(max(max(min(int(5.0), i0), ( int(2.0) + divInt(int(6.0),int(1.0)) )), abs(min(min(i2, min(min(in1, int(4.0)), int(2.0))), min(mod(in2,divInt(mod(in1,min(in2, divInt(int(7.0),mod(max(abs(int(6.0)), mod(divInt(divInt(mod(min(int(8.0), int(3.0)),divInt(i0,res0)),in0),in0),divInt(( ( ( in1 + res0 ) - max(( abs(res0) - i1 ), int(8.0)) ) + divInt(abs(int(5.0)),in1) ),max(min(min(i1, min(int(4.0), in1)), ( abs(( ( in0 - divInt(int(0.0),int(0.0)) ) + abs(int(1.0)) )) * in1 )), abs(mod(( min(in2, abs(min(divInt(i1,int(5.0)), i2))) * max(( i1 * in1 ), max(( i2 - ( ( abs(in2) - in1 ) * int(1.0) ) ), ( int(4.0) * abs(min(( ( res0 + i2 ) + ( max(mod(int(5.0),min(( int(8.0) + i1 ), int(0.0))), mod(( int(8.0) + in2 ),( i1 * mod(in2,min(mod(int(4.0),( int(0.0) - in0 )), int(0.0))) ))) - divInt(in0,divInt(min(int(8.0), int(7.0)),mod(res0,in0))) ) ), int(5.0))) ))) ),( i0 + int(2.0) ))))))),min(abs(in1), min(int(7.0), ( divInt(( max(in1, int(4.0)) - divInt(max(abs(i2), min(int(6.0), in1)),mod(int(4.0),i1)) ),abs(in2)) * mod(( mod(int(4.0),max(res0, min(( ( ( int(4.0) - in0 ) - int(6.0) ) + int(4.0) ), in0))) * divInt(( int(5.0) * abs(i0) ),in1) ),in1) ))))))),int(2.0))), int(9.0))))))), i1) ),int(2.0)) + min(in2, int(9.0)) )),int(2.0)), ( abs(( in0 * abs(mod(( int(3.0) - max(i0, ( i0 * int(7.0) )) ),min(abs(int(1.0)), divInt(int(7.0),min(i1, ( max(divInt(i0,i1), int(8.0)) * ( int(6.0) + int(7.0) ) )))))) )) * int(0.0) )), divInt(min(mod(max(int(5.0), int(5.0)),int(6.0)), min(max(max(( in1 - i1 ), ( int(7.0) * abs(( abs(int(1.0)) - max(int(1.0), ( in2 * min(min(int(8.0), min(mod(in2,int(5.0)), int(0.0))), int(3.0)) )) )) )), abs(in1)), i0)),( int(0.0) * res0 ))), in0),i1) )) ),( in1 + int(3.0) )), int(8.0)) ), int(1.0))))), min(( max(divInt(i0,int(2.0)), abs(min(in0, int(9.0)))) + divInt(mod(mod(divInt(divInt(int(8.0),in1),i0),res0),min(i2, in1)),int(3.0)) ), int(7.0)))) + min(( ( abs(i0) + ( int(0.0) * in2 ) ) * in2 ), int(7.0)) ))), int(2.0)), int(8.0)) )) + mod(i2,( int(3.0) - abs(divInt(in1,i2)) )) )))),int(8.0)))),abs(int(2.0)))) ) * int(1.0) )) - in0 ), in1), ( min(abs(( int(7.0) * min(i1, i2) )), int(7.0)) * int(3.0) ))) \\ge ( i0 * ( min(mod(int(6.0),min(( in0 + abs(i2) ), int(6.0))), divInt(int(4.0),i0)) * mod(int(1.0),max(min(in0, ( int(8.0) - i2 )), min(( divInt(int(9.0),in1) - divInt(( int(7.0) - abs(mod(divInt(mod(mod(int(1.0),int(6.0)),int(7.0)),min(divInt(mod(abs(abs(max(divInt(int(9.0),i1), in1))),i1),i1), i0)),in0)) ),max(in0, in2)) ), min(int(7.0), int(1.0))))) ) ):{:\\nres0 = min(int(3.0), in2)\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nin0 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 748, "mapping_values": [1, 5, 5, 2, 3, 146, 146, 1, 1, 0, 2, 1, 1, 0, 1, 157, 3, 648, 188, 160, 101, 88]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [1, 0, 0], [1, 1, 1], [6, 4, 3], [4], [0, 2], [], [1, 0], [0], [1], [1], [], [6, 5, 5, 3], [0], [3, 0, 2, 2, 3, 3, 1, 0, 1, 0, 1], [1, 1], [2, 2, 1], [], [1, 0]], "fitness": 78, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = abs(in2)\\nb0 = mod(divInt(abs(max(int(6.0), in2)),int(4.0)),in0) \\le int(3.0)\\nb2 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 767, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 1, 2, 0, 2, 1, 1, 1, 0, 4, 1, 11, 2, 3, 0, 2]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [2, 0, 1, 0, 1, 0], [0], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 2, 3, 3, 2, 6, 2, 3, 6, 7, 3, 7, 3, 6, 1, 1, 4, 2, 0, 2, 7, 1, 4, 3, 6, 2, 5, 7, 3, 0], [0, 4], [0, 1, 2], [], [0, 1, 1, 0], [0, 0], [2, 0], [], [0], [3, 3, 6, 5, 0, 3, 4, 1, 5, 4, 5, 3, 6, 2, 0, 0, 6, 3, 5, 5, 3, 6, 4, 5, 5, 3, 6, 3, 5, 0, 1, 4, 3, 4, 0, 0], [0, 0, 1], [0, 3, 1, 0, 3, 0, 2, 3, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 3, 2, 3, 3, 1, 0, 3, 2, 0, 3, 2, 2, 1, 1, 2, 2, 0, 1, 0, 3, 3, 1, 2, 2, 3, 2, 1, 0, 3, 1, 3, 2, 0, 3, 1, 0, 0, 3, 1, 0, 1, 2, 3, 3, 1, 2, 0, 1, 2, 1, 0, 0, 2, 1, 2, 2, 0, 1, 0, 0, 3, 2, 2, 1, 3, 2, 0, 1, 3, 3, 3, 0, 0, 1, 3, 3, 3, 3, 1, 1, 0, 0, 2, 2, 2, 0, 3, 1, 3, 2, 0, 1, 2, 3, 2, 1, 2, 1, 0, 2, 1, 3, 0, 1, 3, 3, 2, 1, 0, 2, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 0, 2, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 0, 1, 2, 1, 0, 1, 2, 2, 2, 1], [1, 2, 1, 1, 0, 0, 1, 2, 2, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1]], "fitness": 78, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not in0 \\l min(int(8.0), in0):{:\\nres0 = abs(in2)\\n:}\\ni0 = divInt(min(mod(int(4.0),divInt(( ( int(2.0) - in0 ) * int(3.0) ),divInt(in1,abs(mod(max(min(int(3.0), i1), abs(( in2 - min(( ( int(2.0) - int(6.0) ) + ( divInt(in1,int(2.0)) + in2 ) ), max(min(int(3.0), ( ( max(( int(6.0) - in0 ), min(int(7.0), max(mod(res0,min(int(3.0), i2)), i0))) * abs(int(7.0)) ) * i0 )), int(3.0))) ))),divInt(abs(max(int(6.0), mod(res0,int(1.0)))),divInt(int(1.0),in0))))))), in2),( int(4.0) + divInt(( in2 + int(2.0) ),in0) ))\\nb0 = res0 \\le min(( ( int(0.0) + abs(( in1 - int(2.0) )) ) * min(max(min(in2, in2), int(7.0)), min(max(abs(max(int(1.0), int(4.0))), in0), res0)) ), ( ( mod(in0,min(int(3.0), max(( in2 - int(6.0) ), ( abs(divInt(int(2.0),mod(int(5.0),i0))) * ( int(7.0) - abs(i1) ) )))) * int(3.0) ) - abs(max(mod(int(0.0),in1), ( in0 * in1 ))) ))\\nb1 = b2\\ni0 += i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 767, "mapping_values": [1, 6, 6, 1, 5, 31, 31, 2, 3, 0, 4, 2, 2, 0, 1, 36, 3, 131, 35, 32, 21, 15]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 1], [], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 0, 7, 0, 6, 7, 9, 9, 6, 2, 0, 5, 0, 8, 4, 5, 8, 1, 1, 6, 8, 5, 7, 6, 8, 7, 7, 9, 5, 4, 7, 1, 7, 6, 9, 3, 7, 5, 0, 3, 8, 0], [0], [2, 2, 1], [], [1, 0], [0], [0], [], [], [1, 6, 5, 1, 4, 3, 2, 2, 5, 5, 0, 0, 6, 5, 4, 2, 0, 6, 2, 4, 6, 0, 4, 0, 1, 0, 5, 3, 5, 3, 2], [1, 0], [1, 2, 3, 3, 1, 0, 0, 3, 2, 2, 2, 0, 2, 2, 3, 3, 1, 1, 0, 3, 2, 3, 0, 3, 1, 0, 3, 3, 1, 1, 1, 3, 2, 1, 0, 1, 2, 1, 3, 2, 1, 1, 3, 3, 3, 1, 0, 1, 2, 3, 2, 1, 1, 1, 3, 2, 1, 2, 2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 0, 3, 2, 0, 2, 3, 1, 2, 0, 2, 3, 2, 3, 0, 1, 3, 0, 1, 1, 3, 3, 3, 3, 0, 1, 3, 2, 1, 2, 1, 2, 0, 1, 1, 2, 3, 3, 1, 0, 3, 1, 3, 1, 2, 2, 2, 1, 1, 3, 3, 2, 2, 3, 3, 2, 2, 3, 1, 0, 0, 1, 2, 3, 0, 0, 1, 3, 1, 0, 3, 2, 2, 0, 2, 0, 3, 0, 0, 2, 3, 0, 2, 1, 1, 0, 3, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 1, 0, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1, 1, 1, 2, 1, 0, 2, 2, 0, 2, 2], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0]], "fitness": 79, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= int(1.0)\\nres0 = divInt(abs(max(int(8.0), in2)),i1)\\nb2 = min(mod(( divInt(in1,( mod(max(max(int(0.0), int(7.0)), in0),max(( max(i2, max(int(0.0), i2)) + abs(abs(int(6.0))) ), int(7.0))) - int(9.0) )) + max(( int(9.0) - in2 ), int(6.0)) ),divInt(int(2.0),min(mod(int(0.0),int(5.0)), max(max(max(int(0.0), in2), int(8.0)), ( min(mod(int(4.0),int(5.0)), int(8.0)) - abs(( int(1.0) - divInt(( ( divInt(int(1.0),int(6.0)) - int(8.0) ) * abs(min(max(abs(i0), max(( i0 - divInt(abs(int(5.0)),mod(res0,( abs(divInt(max(in2, int(7.0)),max(in1, int(6.0)))) + int(8.0) ))) ), abs(max(min(max(i2, int(7.0)), min(divInt(int(7.0),mod(int(9.0),mod(i0,int(5.0)))), int(4.0))), ( abs(abs(int(7.0))) * res0 ))))), abs(int(1.0)))) ),abs(int(7.0))) )) ))))), ( divInt(mod(int(6.0),int(9.0)),max(max(divInt(( abs(abs(( divInt(abs(int(3.0)),i2) * in1 ))) + int(7.0) ),divInt(abs(res0),i0)), int(5.0)), max(int(0.0), in1))) * min(mod(( i0 * divInt(i1,min(i0, in2)) ),divInt(max(in0, divInt(int(3.0),int(8.0))),in2)), min(in0, i2)) )) \\l int(0.0)\\nb2 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 798, "mapping_values": [1, 4, 4, 0, 4, 43, 43, 1, 3, 0, 2, 1, 1, 0, 0, 31, 2, 157, 39, 46, 16, 24]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 2, 2, 1, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 0, 1, 2, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 9, 9, 5, 3, 8, 1, 8, 5, 5, 4, 1, 7, 6, 7, 5, 7, 8, 1, 6, 7, 9, 9, 6, 1, 8, 1, 5, 5, 2, 5, 4, 9, 3, 1, 2, 6, 3, 9, 9, 6, 6, 0, 4, 0, 9, 6, 2, 7, 6, 0, 5, 1, 7, 2, 4, 8, 2, 1, 5, 2, 3, 4, 1, 9, 3, 3, 5, 6, 9, 4, 3, 7, 2, 9, 8, 7, 7, 2, 0, 9, 3, 8, 9, 8, 0, 3, 2, 5, 7, 2, 3, 0, 3, 1, 0, 2, 6, 5, 3], [2, 4, 3, 0, 3, 5, 4, 5, 5, 2, 5, 0, 3, 4], [1, 2, 1, 0, 0, 0, 1, 0, 2, 0], [0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 2, 3, 2, 2, 1, 2, 0], [0], [1, 1, 1, 1, 1], [3, 6, 5, 5, 6, 1, 6, 0, 5, 2, 1, 3, 0, 0, 0, 2, 6, 1, 6, 1, 6, 5, 5, 1, 5, 5, 5, 2, 3, 6, 4, 5, 5, 0, 1, 0, 0, 1, 3, 4, 2, 6, 4, 6, 3, 1, 4, 2, 1, 6, 0, 4, 3, 2, 1, 0, 2, 6, 1, 1, 2, 6, 4, 4, 0, 2, 6, 6, 0, 2, 3, 6, 2, 3, 0, 0, 4, 1, 1, 4, 5, 6, 5, 2, 2, 3, 3, 4, 0, 2, 0, 0, 1, 3, 5, 0, 5, 1, 5, 0, 4, 0, 2, 4, 6, 2, 5, 5, 1, 6, 0, 5, 1, 3, 6, 3, 5], [1, 1, 1, 0, 1, 0], [2, 0, 3, 2, 1, 0, 0, 3, 2, 2, 2, 1, 3, 2, 1, 3, 1, 1, 2, 3, 0, 1, 2, 0, 0, 1, 2, 0, 1, 3, 3, 3, 3, 3, 2, 1, 2, 3, 2, 3, 2, 3, 0, 0, 3, 0, 0, 3, 3, 0, 2, 1, 2, 2, 3, 2, 3, 2, 1, 2, 0, 3, 0, 1, 1, 2, 1, 0, 0, 0, 2, 3, 1, 0, 0, 2, 2, 0, 1, 0, 2, 1, 3, 1, 0, 2, 0, 0, 2, 2, 1, 3, 2, 3, 2, 2, 0, 2, 2, 2, 2, 3, 2, 3, 2, 3, 3, 3, 0, 0, 0, 2, 3, 0, 1, 1, 1, 2, 0, 2, 2, 3, 0, 2, 0, 0, 3, 1, 2, 1, 3, 3, 1, 2, 3, 1, 0, 3, 0, 2, 0, 1, 1, 3, 0, 3, 0, 2, 3, 0, 1, 3, 0, 3, 1, 3, 3, 3, 1, 0, 1, 0, 1, 0, 3, 0, 0, 1, 2, 1, 1, 1, 1, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 0, 2, 2, 0, 0, 2, 3, 1, 0, 3, 1, 1, 0, 1, 2, 1, 2, 1, 0, 2, 3, 2, 1, 3, 2, 0, 3, 2, 3, 0, 0, 1, 1, 1, 3, 2, 2, 2, 3, 2, 3, 0, 3, 1, 0, 2, 0, 3, 0, 1, 1, 3, 1, 0, 0, 2, 3, 1, 3, 2, 3, 0, 0, 1, 1, 3, 2, 0, 0, 1, 1, 3, 1, 3, 1, 1, 2, 2, 3, 1, 2, 2, 0, 0, 2, 1, 3, 3, 1, 0, 3, 2, 0, 0, 0, 0, 1, 1, 2, 0, 1, 3, 3, 2, 2, 1, 2, 2, 0, 1, 0, 0, 1, 3, 2, 3, 0, 1, 1, 1, 2, 1, 0, 3, 2, 3, 3, 2, 0, 1, 3, 2, 3, 0, 3, 0, 2, 3, 0, 2, 1, 2, 1, 3, 0, 1, 2, 2, 0, 3, 3, 1, 2, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 0, 1, 2, 2, 3, 1, 2, 2, 2, 0, 0, 3, 3, 0, 2, 1, 1, 1, 0, 0, 3, 1, 3, 1, 1, 1, 0, 1, 3, 1, 1, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 1, 1, 1, 3, 0, 3, 1, 3, 2, 1, 3, 0, 2, 3, 0, 3, 0, 0, 3, 0, 2, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1, 2, 1, 2, 0, 1, 2, 1, 1, 2, 0, 0, 2, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 0, 1, 0, 2, 2, 1, 1, 2, 0, 0, 1, 2, 0, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 2, 1], [0, 0, 1, 1, 2, 0, 2, 2, 1, 1, 0, 0, 2, 0, 2, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 2, 1, 1, 1, 0, 1, 1, 2, 0, 0, 2, 2, 0, 0, 0, 2, 1], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]], "fitness": 79, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( in0 + max(mod(int(1.0),res0), in2) ) == min(( ( divInt(int(4.0),min(( int(9.0) + min(int(9.0), int(5.0)) ), ( min(in2, int(3.0)) - mod(res0,i1) ))) - int(8.0) ) * ( res0 + int(1.0) ) ), min(max(abs(abs(max(mod(int(8.0),mod(max(mod(abs(divInt(abs(i0),in2)),max(i2, i1)), max(abs(in0), mod(int(5.0),divInt(( min(mod(min(( int(5.0) * ( i0 * max(i0, int(4.0)) ) ), int(1.0)),mod(int(7.0),i0)), i2) - res0 ),( abs(int(6.0)) - i1 ))))),res0)), ( divInt(i1,int(7.0)) + res0 )))), ( int(5.0) + max(int(7.0), in2) )), ( in2 * i1 ))) and ( ( int(8.0) + abs(divInt(min(mod(mod(in2,divInt(divInt(( ( max(mod(abs(( max(max(abs(in2), in2), i2) * ( min(in0, int(1.0)) * int(6.0) ) )),int(7.0)), mod(res0,( ( min(in1, ( in2 - in2 )) * abs(int(9.0)) ) - divInt(int(9.0),max(abs(int(6.0)), mod(max(int(1.0), i0),abs(i1)))) ))) * ( i0 + int(8.0) ) ) + int(1.0) ),max(i0, max(i1, mod(max(in0, int(5.0)),min(in1, min(int(5.0), max(min(abs(int(2.0)), i2), int(5.0)))))))),res0)),int(4.0)), in1),min(res0, in0))) ) + int(9.0) ) \\le ( int(3.0) + int(1.0) ) )\\nif int(2.0) \\ge int(6.0):{:\\nif abs(i1) \\l in1:{:\\ni2 += mod(( i1 - int(3.0) ),( ( min(res0, ( ( i0 * in1 ) * mod(abs(int(9.0)),in0) )) - min(int(9.0), int(6.0)) ) + i2 ))\\n:}else:{:\\ni1 += int(6.0)\\n:}\\n:}else:{:\\nb2 = divInt(int(0.0),( int(4.0) * i0 )) \\ge ( abs(( int(0.0) * max(( i2 - min(( min(res0, i1) + int(9.0) ), int(6.0)) ), int(2.0)) )) + max(divInt(( mod(min(( abs(i1) - abs(int(7.0)) ), i2),mod(res0,max(in1, int(6.0)))) - int(0.0) ),max(int(5.0), in1)), i0) )\\ni2 *= divInt(abs(int(1.0)),min(divInt(min(res0, res0),int(7.0)), int(2.0)))\\ni0 = max(mod(i2,in0), int(4.0))\\n:}\\nif b1:{:\\nif not int(8.0) != abs(int(2.0)):{:\\nloopBreak% = 0\\nwhile min(int(1.0), int(5.0)) \\le mod(( max(int(2.0), ( mod(res0,i2) - mod(int(3.0),max(abs(int(4.0)), in0)) )) + abs(divInt(i0,i0)) ),in1):{:\\nb0 = ( not not i1 != int(1.0) or int(9.0) != divInt(i1,int(3.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = max(max(mod(divInt(int(3.0),( divInt(in1,int(5.0)) - in2 )),res0), int(6.0)), abs(( abs(in2) + int(9.0) ))) == int(4.0)\\n:}\\nb0 = int(3.0) != ( int(7.0) * i2 )\\ni2 -= abs(( max(min(( in0 - int(2.0) ), min(( min(in0, min(in1, ( min(i0, divInt(int(9.0),mod(int(8.0),max(i2, int(7.0))))) - divInt(( i0 + min(max(int(7.0), divInt(divInt(int(2.0),i0),( int(0.0) - i1 ))), divInt(in0,divInt(divInt(divInt(( abs(int(9.0)) - in2 ),int(3.0)),mod(divInt(abs(int(8.0)),divInt(( ( i0 * in2 ) + min(abs(i1), ( int(9.0) + int(8.0) )) ),int(0.0))),in2)),i0))) ),max(int(3.0), max(int(2.0), int(5.0)))) ))) * int(7.0) ), in1)), int(2.0)) * max(int(3.0), int(0.0)) ))\\nif True:{:\\nb1 = not ( mod(max(i0, i2),max(in1, res0)) + i2 ) \\l in2\\n:}else:{:\\nb0 = ( ( ( in2 + i1 ) + int(3.0) ) * int(1.0) ) \\ge int(0.0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(2.0) \\le max(res0, min(int(6.0), min(( int(5.0) - abs(i0) ), divInt(max(in2, abs(i1)),in0)))):{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = max(in0, mod(in2,int(3.0)))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 773, "mapping_values": [1, 21, 21, 7, 14, 101, 101, 14, 10, 2, 23, 14, 9, 1, 5, 117, 6, 420, 110, 98, 60, 54]}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1], [0, 2, 1, 0, 1, 1, 0, 1], [0], [0, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 2, 1, 4, 9, 3, 2, 9, 5, 5, 7, 8, 9, 1, 5, 3, 6, 5, 8, 0, 1], [4, 4, 0, 3], [2, 0, 1], [], [1, 1, 1, 1], [0, 0, 0, 0], [], [], [1], [0, 3, 1, 6, 0, 6, 3, 3, 2, 0, 4, 3, 6, 1, 5, 4, 0, 2, 4, 4], [1, 0, 0, 0], [3, 0, 2, 1, 0, 0, 1, 3, 0, 1, 1, 3, 0, 2, 1, 3, 3, 2, 0, 3, 3, 1, 2, 2, 2, 0, 2, 2, 1, 1, 1, 2, 3, 3, 1, 1, 1, 1, 0, 1, 2, 1, 3, 0, 3, 3, 3, 3, 3, 1, 2, 0, 0, 2, 2, 2, 1, 1, 0, 1, 2, 2, 0, 1, 1, 0, 3, 0, 2, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 0, 1, 0, 2, 1], [2, 2, 1, 1, 1, 0, 2], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1]], "fitness": 79, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(i0, ( int(6.0) * in0 )) \\le i1\\nif int(1.0) \\le max(res0, int(2.0)):{:\\ni0 *= int(1.0)\\nres0 = abs(in0)\\nin0 = mod(int(4.0),abs(abs(divInt(i2,max(abs(int(9.0)), ( mod(( i0 - mod(divInt(int(3.0),int(2.0)),int(9.0)) ),divInt(max(abs(int(5.0)), int(5.0)),int(7.0))) - int(8.0) ))))))\\n:}else:{:\\nb0 = in1 \\l int(9.0)\\nb1 = divInt(int(1.0),abs(in0)) \\ge max(min(max(min(abs(int(5.0)), divInt(res0,i1)), ( ( mod(int(3.0),int(6.0)) - in2 ) + int(5.0) )), mod(mod(in1,int(8.0)),int(0.0))), i0)\\ni2 = max(in1, ( in1 * int(1.0) ))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 772, "mapping_values": [1, 8, 8, 1, 7, 22, 22, 4, 3, 0, 4, 4, 0, 0, 1, 20, 4, 71, 17, 16, 7, 11]}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 0, 2, 0, 2, 2, 0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 7, 5, 2, 7, 0, 4, 5, 6, 6, 3, 9, 4, 9, 9, 5, 8, 3, 6, 4, 6, 4, 8, 3, 9, 2, 6, 6, 4, 2, 8, 5, 2, 5, 6, 1, 9, 3, 7, 6, 7, 5, 7, 5, 3, 6, 1, 0, 1, 0, 0, 5, 4, 0, 2, 8, 8, 7, 3, 4, 9, 4, 1, 1, 1, 5, 8, 2, 4, 2, 1, 6], [3, 4, 1, 0, 1, 1], [0, 1, 2, 2], [1, 1], [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [3, 3, 1, 0, 1], [0, 0], [0, 0, 0, 0], [2, 4, 3, 4, 1, 2, 0, 2, 6, 6, 2, 1, 3, 2, 6, 1, 0, 3, 5, 0, 1, 5, 2, 5, 3, 4, 0, 4, 4, 0, 4, 0, 4, 0, 1, 4, 1, 0, 5, 1, 3, 0, 2, 4, 2, 5, 6, 4, 3, 4, 5, 5, 1, 1, 5, 5, 4, 0, 0, 1, 6, 2, 6, 1, 4, 3, 6, 2, 1], [0, 0, 0], [1, 3, 2, 3, 2, 1, 3, 1, 2, 1, 1, 1, 2, 3, 2, 2, 2, 3, 0, 1, 3, 0, 0, 1, 2, 1, 0, 1, 3, 2, 2, 0, 0, 0, 3, 1, 1, 2, 1, 1, 2, 0, 1, 3, 2, 0, 3, 3, 2, 2, 1, 3, 0, 1, 2, 1, 3, 3, 0, 3, 3, 1, 3, 3, 0, 3, 3, 2, 3, 2, 3, 0, 3, 1, 1, 1, 1, 2, 3, 2, 2, 3, 3, 2, 3, 2, 1, 2, 2, 1, 0, 0, 3, 1, 2, 1, 1, 1, 0, 3, 3, 2, 0, 1, 3, 1, 2, 3, 0, 3, 1, 2, 2, 2, 3, 1, 1, 3, 3, 1, 2, 0, 0, 3, 0, 1, 0, 0, 2, 3, 3, 3, 1, 0, 3, 1, 3, 3, 2, 1, 3, 2, 1, 3, 3, 0, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 3, 2, 0, 3, 1, 1, 2, 3, 2, 3, 0, 1, 3, 0, 2, 0, 0, 1, 3, 2, 3, 1, 2, 2, 3, 0, 3, 3, 0, 3, 2, 0, 3, 0, 3, 0, 1, 1, 3, 0, 0, 2, 0, 1, 2, 1, 0, 2, 2, 2, 0, 3, 0, 0, 2, 0, 0, 3, 1, 0, 1, 3, 2, 1, 3, 1, 3, 2, 0, 0, 0, 2, 1, 1, 3, 2, 0, 0, 1, 3, 3, 2, 0, 0, 0, 0, 3, 1, 2, 2, 2, 3, 1, 3, 1, 1, 2, 3, 1, 3, 2, 0, 0, 1, 0, 0, 0, 2, 2, 2, 3, 0, 2, 3, 0, 1, 0, 3, 2, 1, 0, 3, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 0, 0, 2, 2, 1, 2, 0, 0, 1, 1, 1, 2, 0, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 1, 1, 2, 1, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 2, 0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1], [2, 0, 0, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 2, 2, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 93, "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(4.0) \\ge min(mod(abs(mod(int(9.0),max(int(7.0), divInt(int(5.0),int(2.0))))),int(7.0)), ( max(divInt(( ( max(i2, int(0.0)) * min(in1, in0) ) + int(4.0) ),( int(5.0) + in1 )), int(6.0)) - min(( ( i1 - i2 ) - i0 ), min(int(6.0), int(3.0))) )) or divInt(int(9.0),int(4.0)) \\le divInt(i2,int(9.0)) ):{:\\nres0 = min(( res0 + min(min(mod(divInt(int(9.0),abs(i2)),int(5.0)), mod(int(8.0),max(abs(i1), abs(min(int(3.0), min(abs(in0), abs(max(( abs(mod(min(i2, min(int(6.0), int(4.0))),int(6.0))) + int(4.0) ), divInt(max(( ( max(max(divInt(abs(mod(int(8.0),( divInt(int(3.0),res0) * i1 ))),min(int(9.0), ( int(2.0) - int(6.0) ))), int(6.0)), i0) + min(max(mod(in0,int(4.0)), max(int(2.0), ( min(in2, abs(int(8.0))) + ( mod(mod(max(int(5.0), int(2.0)),min(abs(int(5.0)), mod(i0,i1))),max(in2, int(6.0))) + i2 ) ))), in2) ) * divInt(min(min(abs(int(1.0)), in0), max(int(9.0), max(abs(( int(3.0) + max(( int(7.0) * max(abs(in1), ( abs(( min(( ( int(6.0) * i0 ) * int(7.0) ), int(5.0)) + max(mod(in1,min(int(7.0), int(5.0))), ( max(divInt(abs(in1),int(3.0)), abs(i0)) * ( in1 + i0 ) )) )) - int(6.0) )) ), min(mod(min(int(1.0), ( divInt(abs(in1),min(max(i0, max(( i1 + max(in1, abs(i1)) ), int(0.0))), int(1.0))) - min(i0, in2) )),( i1 + int(0.0) )), ( int(0.0) + in0 ))) )), divInt(mod(( i0 - abs(i2) ),in1),divInt(i2,in2))))),max(int(5.0), res0)) ), int(4.0)),min(mod(int(0.0),abs(int(2.0))), abs(( in1 - in0 )))))))))))), in1) ), mod(int(8.0),int(8.0)))\\nif ( True or min(( in2 * in2 ), int(7.0)) \\g abs(min(( i1 - i1 ), in2)) ):{:\\nb0 = in2 \\l min(int(3.0), divInt(mod(( min(int(4.0), max(int(9.0), int(4.0))) * mod(min(int(1.0), min(divInt(in1,i0), int(1.0))),i0) ),i1),res0))\\n:}\\n:}\\nif divInt(( divInt(abs(i2),( min(res0, int(1.0)) * i1 )) + min(divInt(int(5.0),in1), max(int(8.0), int(2.0))) ),int(4.0)) \\g in0:{:\\nif b1:{:\\nb2 = True\\n:}\\nres0 = int(2.0)\\ni2 = int(1.0)\\nb2 = i1 \\g int(6.0)\\n:}\\n", "test_case_results": [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 920, "mapping_values": [1, 10, 10, 4, 6, 73, 73, 6, 4, 2, 11, 6, 5, 2, 4, 69, 3, 286, 68, 79, 33, 35]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 1, 0], [1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 6, 3, 7, 5, 1, 7, 3, 7, 5, 8, 3, 5, 6, 2, 2, 6, 6, 3, 5, 9, 9, 7, 9], [0, 4, 2, 5], [2, 2], [0], [0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0], [2, 3, 2], [], [], [0, 5, 0, 1, 2, 2, 2, 4, 4, 6, 3, 4, 4, 5, 5, 3, 6, 3, 2, 6, 5, 0], [0], [3, 2, 3, 2, 1, 1, 2, 0, 0, 3, 2, 1, 3, 0, 0, 0, 3, 1, 1, 0, 2, 0, 2, 1, 3, 0, 3, 3, 0, 3, 2, 2, 1, 0, 2, 0, 1, 0, 0, 2, 0, 3, 0, 1, 3, 3, 0, 1, 1, 3, 3, 2, 3, 0, 3, 2, 3, 1, 2, 1, 3, 3, 1, 0, 2, 1, 3, 3, 3, 1, 1, 1, 0, 0, 1, 1, 1, 3, 1, 2, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 2, 0, 2, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 2, 2, 2, 2, 2], [1, 0, 1, 1, 0, 1]], "fitness": 96, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not ( max(( max(mod(int(1.0),int(6.0)), ( i0 - in2 )) - max(( int(3.0) - max(i0, i1) ), i2) ), min(int(7.0), int(5.0))) \\l i2 and ( i2 + ( int(1.0) * max(in1, max(min(in1, max(( ( int(7.0) * res0 ) * ( in0 * int(3.0) ) ), in1)), in1)) ) ) \\le divInt(in2,min(in2, int(7.0))) )\\nloopBreak% = 0\\nwhile not abs(min(in0, int(5.0))) == int(8.0):{:\\nres0 = max(max(mod(abs(in0),min(mod(abs(int(3.0)),divInt(int(5.0),min(max(int(6.0), i2), ( int(2.0) * min(max(max(int(2.0), int(6.0)), int(6.0)), res0) )))), in2)), int(3.0)), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(99.0) != max(int(7.0), mod(i0,int(9.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 946, "mapping_values": [1, 4, 4, 1, 3, 24, 24, 4, 2, 1, 7, 4, 3, 0, 0, 22, 1, 82, 15, 23, 9, 6]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [1, 0], [1, 1, 1, 1, 0, 1], [5, 0, 6, 4, 5, 9], [1, 5], [0], [], [1, 1], [0, 0], [], [], [], [2, 6, 6, 5, 6, 5, 3, 4], [0], [3, 3, 0, 3, 0, 2, 1, 2, 3, 0, 3, 1, 0, 1, 3, 2, 0, 0, 1, 1, 0], [0, 0, 1], [2, 0, 0, 2, 1, 0], [1, 0], [0]], "fitness": 98, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(min(i2, min(res0, ( int(5.0) - ( abs(res0) + max(int(0.0), in2) ) )))) \\g int(6.0):{:\\nres0 = min(divInt(in2,in0), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(59.0) != in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 2, 1, 0, 2, 2, 0, 0, 0, 8, 1, 21, 3, 6, 2, 1]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 1, 0, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 4, 4, 5, 0, 4, 9, 0, 7, 6, 8, 0, 1, 0, 5, 5, 0, 7, 7, 7, 8, 4, 5, 5, 3, 2, 2, 9, 1, 8, 1, 3, 8, 7, 4, 7, 6, 0, 4, 8, 7, 2, 4, 1, 0, 2, 1, 1], [2, 5, 0, 2, 3, 5, 2, 4, 0], [0, 0, 2, 2, 1, 0, 2], [], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1], [0], [1, 1], [1, 1, 0, 3, 3, 6, 3, 6, 0, 0, 5, 6, 4, 2, 1, 6, 0, 6, 3, 0, 5, 4, 1, 1, 6, 1, 0, 6, 5, 6, 5, 6, 5, 4, 6, 3, 3, 4, 6, 0, 4], [0, 0, 1, 0], [3, 2, 3, 3, 1, 2, 1, 0, 2, 0, 1, 2, 0, 3, 1, 3, 0, 3, 2, 2, 2, 2, 3, 1, 0, 0, 0, 1, 0, 3, 3, 0, 3, 2, 3, 3, 3, 0, 0, 2, 3, 0, 1, 0, 1, 2, 3, 2, 1, 1, 3, 1, 3, 2, 3, 3, 0, 2, 1, 0, 1, 0, 0, 1, 2, 0, 0, 1, 2, 1, 0, 1, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 0, 2, 3, 1, 3, 1, 2, 1, 0, 1, 3, 0, 1, 0, 2, 2, 1, 2, 0, 1, 3, 1, 2, 1, 1, 2, 3, 1, 1, 0, 1, 0, 2, 2, 1, 0, 2, 2, 3, 3, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 1, 0, 3, 0, 3, 3, 2, 1, 0, 3, 3, 1, 1, 3, 2, 3, 1, 0, 1, 0, 2, 2, 3, 2, 1, 0, 0, 3, 1, 3, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 2, 2, 1, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 2, 1, 0, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 2], [1, 1, 0, 0, 2, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2, 0, 0, 1, 2, 1, 2, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1]], "fitness": 98, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(mod(min(abs(int(1.0)), ( int(0.0) - i1 )),divInt(i1,int(0.0))), ( i0 - abs(int(4.0)) )) == max(in0, min(( ( mod(( abs(int(4.0)) + in0 ),res0) + in0 ) * int(5.0) ), res0)):{:\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = min(min(i0, min(( abs(min(abs(i0), in2)) * divInt(min(res0, int(0.0)),in1) ), int(4.0))), divInt(min(( int(9.0) + int(0.0) ), abs(int(7.0))),max(( min(min(i2, divInt(int(6.0),i1)), int(8.0)) - res0 ), i0))) != int(0.0)\\nloopBreak% = 0\\nwhile ( res0 + in0 ) \\l int(1.0):{:\\ni0 = mod(int(0.0),in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(5.0) == max(( ( int(5.0) + max(mod(divInt(int(0.0),( int(7.0) - in1 )),divInt(abs(int(7.0)),abs(int(7.0)))), divInt(int(8.0),i1)) ) - int(4.0) ), max(i1, int(5.0))):{:\\nres0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nif ( ( int(5.0) + ( i0 * int(3.0) ) ) * min(int(2.0), mod(int(2.0),int(9.0))) ) \\ge ( min(int(1.0), int(8.0)) + res0 ):{:\\nif int(1.0) != in2:{:\\nb1 = ( ( int(3.0) + res0 ) - ( ( min(min(int(8.0), divInt(in2,int(7.0))), int(4.0)) * int(7.0) ) - int(6.0) ) ) == int(0.0)\\n:}else:{:\\nb0 = res0 \\le ( int(4.0) * in2 )\\n:}\\n:}else:{:\\nb2 = max(in1, min(max(divInt(int(8.0),res0), abs(abs(int(7.0)))), int(2.0))) \\l abs(mod(max(int(4.0), in0),int(1.0)))\\n:}\\nin0 += in1\\nres0 = divInt(mod(max(mod(int(0.0),i0), in1),max(int(2.0), abs(int(1.0)))),int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 990, "mapping_values": [1, 16, 16, 7, 9, 50, 50, 9, 7, 0, 12, 9, 3, 1, 2, 41, 4, 164, 39, 38, 22, 18]}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 1, 1, 2, 2, 0, 2, 2, 2, 2, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 2, 2, 2, 7, 6, 0, 3, 1, 2, 0, 5, 3, 6, 5, 1, 7, 7, 8, 9, 5, 2, 1, 5, 7, 9, 3, 7, 8, 7, 8, 4, 1, 4, 3, 7, 9, 9, 8, 9, 5, 8, 3, 0, 9, 7, 9, 4, 1, 2, 5, 6, 2, 1, 8, 9, 3, 7, 1, 4, 2, 4, 3, 3, 1, 7, 8, 4, 6, 6, 3, 0, 7, 8, 9, 1, 5, 3, 5, 2, 0, 7, 1, 9, 0, 3, 7, 1, 4, 9, 4, 9, 4, 9, 7, 1, 8, 4, 3, 5, 1, 1, 4, 8, 2, 7, 4, 5, 9, 8, 0, 1, 6, 0, 7, 2, 9, 0, 1, 3, 8, 8, 4, 5, 5, 5, 9, 8, 1, 3, 0, 7, 2, 0, 4, 8, 6, 9, 9, 2, 0, 2, 1, 1, 7, 1, 2, 1, 6, 0, 5, 9, 0, 7, 9, 4, 0, 6, 9, 4, 5, 5, 4, 4, 7, 6, 3, 1, 3, 9, 0, 7, 0, 9, 2, 0, 0, 6, 6, 7, 4, 8, 4, 9, 8, 9, 9, 7, 8], [1, 4, 1, 5, 5, 2, 5, 1], [1, 1, 2, 0], [0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 2, 0], [], [1, 0, 1, 0], [2, 0, 1, 2, 4, 4, 3, 2, 2, 0, 0, 6, 5, 1, 4, 1, 1, 0, 2, 2, 1, 5, 1, 3, 1, 5, 2, 2, 2, 5, 3, 3, 5, 6, 1, 4, 4, 4, 6, 4, 0, 5, 0, 6, 5, 6, 3, 0, 0, 6, 5, 4, 6, 6, 1, 4, 4, 4, 5, 4, 3, 2, 1, 5, 1, 2, 4, 4, 4, 3, 4, 3, 5, 5, 1, 1, 1, 0, 6, 0, 0, 2, 0, 1, 6, 3, 1, 3, 5, 0, 3, 6, 5, 0, 5, 4, 2, 5, 6, 6, 5, 2, 4, 2, 2, 6, 4, 3, 5, 4, 5, 6, 2, 5, 1, 0, 6, 3, 1, 6, 4, 0, 1, 2, 3, 4, 2, 5, 6, 6, 6, 0, 3, 0, 2, 1, 3, 5, 3, 2, 0, 2, 1, 4, 4, 2, 0, 2, 6, 2, 2, 6, 1, 5, 4, 1, 6, 5, 1, 6, 5, 5, 4, 2, 4, 4, 3, 6, 5, 0, 0, 3, 0, 4, 5, 6, 2, 4, 4, 2, 6, 6, 1, 0, 1, 3, 1, 3, 6, 0, 6, 4, 3, 1, 3, 5, 4], [0, 1, 0, 1], [2, 2, 1, 0, 3, 2, 0, 3, 3, 3, 3, 2, 3, 0, 2, 1, 1, 3, 3, 2, 1, 0, 3, 3, 0, 0, 2, 1, 2, 0, 2, 3, 3, 1, 0, 0, 0, 2, 0, 0, 3, 1, 2, 1, 0, 2, 2, 2, 2, 1, 2, 3, 0, 2, 3, 2, 2, 3, 0, 1, 3, 0, 1, 3, 3, 0, 3, 0, 3, 3, 3, 3, 0, 3, 2, 2, 2, 3, 0, 2, 1, 0, 1, 2, 1, 3, 3, 3, 1, 3, 3, 2, 3, 3, 0, 0, 3, 0, 3, 3, 2, 0, 0, 3, 3, 1, 2, 0, 1, 3, 1, 2, 0, 0, 1, 1, 0, 2, 2, 2, 1, 2, 1, 2, 1, 3, 2, 3, 1, 2, 2, 0, 0, 1, 1, 3, 3, 0, 1, 2, 3, 1, 1, 3, 3, 3, 0, 0, 1, 3, 3, 1, 3, 2, 2, 1, 2, 1, 2, 2, 1, 0, 1, 3, 0, 0, 0, 1, 3, 2, 1, 3, 1, 3, 0, 3, 3, 2, 1, 2, 3, 0, 3, 2, 0, 1, 3, 3, 2, 2, 0, 1, 0, 2, 0, 0, 0, 2, 3, 2, 3, 2, 1, 3, 3, 3, 2, 1, 0, 2, 2, 3, 3, 0, 1, 1, 3, 0, 3, 3, 0, 3, 1, 3, 1, 0, 2, 1, 2, 2, 2, 0, 2, 0, 3, 2, 1, 2, 3, 3, 1, 2, 2, 2, 2, 3, 3, 1, 1, 0, 1, 2, 1, 1, 0, 2, 1, 1, 3, 3, 3, 1, 0, 2, 1, 2, 1, 0, 1, 0, 1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 1, 0, 1, 3, 2, 2, 0, 3, 3, 3, 2, 3, 1, 2, 0, 3, 1, 0, 2, 0, 1, 0, 2, 3, 1, 1, 1, 2, 3, 3, 3, 1, 0, 0, 1, 0, 0, 0, 3, 0, 2, 3, 0, 1, 1, 1, 3, 3, 1, 1, 0, 3, 3, 2, 1, 0, 2, 3, 2, 1, 2, 3, 0, 2, 2, 3, 3, 3, 0, 1, 1, 3, 2, 3, 0, 1, 1, 3, 0, 2, 3, 3, 2, 1, 2, 2, 0, 2, 3, 2, 2, 2, 3, 2, 1, 2, 1, 3, 2, 2, 1, 1, 2, 3, 1, 1, 3, 3, 2, 2, 0, 3, 0, 0, 3, 2, 0, 0, 2, 2, 1, 3, 1, 1, 0, 0, 3, 2, 2, 3, 1, 2, 1, 1, 1, 3, 3, 1, 3, 2, 1, 1, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 1, 0, 1, 0, 2, 3, 0, 2, 2, 1, 3, 2, 2, 3, 1, 2, 3, 0, 2, 1, 0, 3, 1, 1, 2, 1, 3, 0, 1, 2, 3, 2, 1, 0, 3, 1, 2, 2, 3, 0, 3, 2, 1, 1, 0, 0, 0, 1, 1, 3, 3, 3, 2, 3, 2, 0, 0, 2, 1, 2, 2, 3, 1, 1, 0, 3, 3, 2, 3, 1, 2, 3, 3, 0, 1, 0, 3, 3, 3, 3, 0, 3, 1, 2, 1, 1, 0, 3, 2, 0, 2, 0, 2, 0, 2, 2, 0, 3, 3, 3, 0, 1, 0, 1, 2, 0, 1, 2, 2, 3, 2, 1, 0, 0, 1, 0, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 2, 0, 1, 2, 0, 1, 3, 0, 3, 1, 3, 2, 3, 2, 1, 3, 0, 2, 2, 0, 2, 1, 2, 2, 2, 1, 2, 3, 3, 0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 3, 0, 0, 2, 1, 0, 3, 2, 2, 0, 0, 0, 0, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 2, 3, 0, 0, 0, 0, 2, 3, 3, 1, 2, 1, 1, 2, 3, 1, 3, 1, 0, 2, 3, 2, 2, 0, 0, 1, 0, 3, 0, 1, 3, 2, 1, 3, 1, 2, 0, 2, 2, 2, 1, 0, 0, 3, 0, 1, 3, 0, 1, 2, 3, 3, 1, 2, 0, 2, 1, 2, 0, 3, 1, 3, 0, 2, 1, 0, 0, 1, 1, 0, 1, 3, 3, 1, 0, 1, 2, 0, 3, 1, 1, 3, 0, 0, 3, 1, 3, 1, 2, 2, 0, 1, 1, 2, 3, 1, 2, 3, 3, 1, 1, 3, 2, 0, 3, 3, 2, 1, 2, 3, 2, 0, 2, 2, 0, 0, 3, 3, 0, 1, 0, 3, 1, 0, 0, 0, 0, 1, 2, 3, 1, 0, 1, 2, 3, 0, 1, 3, 1, 1, 3, 3, 2, 0, 3, 3, 0, 0, 3, 3, 3, 0, 0, 2, 1, 3, 1, 3, 2, 3, 1, 2, 2, 0, 1, 1, 3, 1, 1, 0, 0, 0, 1, 2, 1, 3, 3, 2, 0, 0, 3, 0, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1, 2, 2, 0, 0, 1, 1, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 1, 1, 2, 1, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 2, 2, 0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0, 2, 0, 1, 0, 1, 0, 1, 1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 2, 1, 2, 0, 2, 2, 1, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0, 2, 0, 2, 0, 1, 0, 1, 2, 2, 0, 1, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 1, 0, 0, 2, 0, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 0, 2, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0], [2, 1, 1, 2, 0, 0, 0, 0, 1, 2, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 2, 0, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 1, 2, 0, 1, 0, 2, 1, 1, 2, 0, 2, 0, 2, 0, 1, 0, 1, 1, 1, 2, 0, 2, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 2, 1, 0, 1, 1, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 2, 1, 1, 2, 2, 2, 0, 1, 2, 2, 2, 1, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0]], "fitness": 98, "tree_depth": 100, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(( int(0.0) * i2 ),min(divInt(i0,max(abs(abs(abs(( max(i1, ( int(6.0) - int(2.0) )) - min(min(divInt(int(2.0),i2), min(min(in1, in1), ( int(2.0) * divInt(in0,divInt(max(abs(int(7.0)), i2),i2)) ))), i0) )))), divInt(i0,res0))), min(int(6.0), mod(int(0.0),in2)))) \\g mod(( divInt(( int(3.0) + ( min(i1, mod(min(( divInt(max(in1, int(1.0)),max(i1, int(2.0))) + abs(min(i1, min(i0, max(abs(abs(min(i2, min(divInt(( divInt(max(i2, divInt(int(0.0),i1)),int(5.0)) + ( int(3.0) + max(min(abs(int(6.0)), min(abs(( abs(min(in2, i1)) - abs(in0) )), min(abs(( i1 * in2 )), abs(max(int(5.0), ( i2 + int(1.0) )))))), max(int(7.0), ( i2 * i2 ))) ) ),int(7.0)), int(8.0))))), in2)))) ), divInt(( ( int(9.0) * ( int(5.0) + ( int(2.0) * abs(( max(int(1.0), mod(divInt(in0,in0),int(5.0))) + int(7.0) )) ) ) ) + min(min(in2, int(9.0)), ( max(int(3.0), int(7.0)) * min(min(abs(res0), i1), int(8.0)) )) ),max(max(int(7.0), abs(mod(( int(8.0) - ( int(4.0) * divInt(mod(int(1.0),in1),int(4.0)) ) ),max(in1, in1)))), res0))),int(3.0))) - min(mod(int(7.0),max(int(9.0), min(in1, min(min(divInt(int(9.0),( min(i0, min(( in2 + int(8.0) ), max(max(( divInt(i0,int(9.0)) - res0 ), mod(in2,res0)), in0))) * divInt(min(( abs(( int(5.0) + max(min(max(mod(int(8.0),i0), ( divInt(min(max(i0, int(3.0)), int(0.0)),max(res0, min(min(in2, max(int(9.0), max(int(7.0), in1))), ( int(9.0) + divInt(( mod(res0,mod(res0,max(mod(int(4.0),divInt(min(min(int(1.0), ( mod(( mod(min(max(int(2.0), int(5.0)), i1),int(6.0)) * divInt(int(2.0),int(1.0)) ),in1) + mod(int(8.0),int(9.0)) )), max(abs(max(int(3.0), in1)), ( int(7.0) * ( int(1.0) + in1 ) ))),int(4.0))), in2))) * int(2.0) ),max(mod(max(max(min(max(divInt(int(4.0),in1), min(int(3.0), in0)), int(3.0)), min(mod(mod(i2,min(max(abs(divInt(abs(int(1.0)),divInt(i1,min(int(7.0), in2)))), mod(i1,int(8.0))), i2)),( min(int(4.0), int(6.0)) + int(6.0) )), ( abs(abs(min(int(3.0), in1))) - in1 ))), int(0.0)),in1), in0)) )))) + in1 )), min(in0, ( max(in2, int(7.0)) + int(8.0) ))), int(9.0)) )) - max(max(int(1.0), int(5.0)), in2) ), max(abs(divInt(int(3.0),i1)), ( max(mod(int(5.0),( abs(i1) * mod(( min(min(min(i1, int(2.0)), int(0.0)), max(( abs(i0) + int(7.0) ), int(1.0))) - min(res0, ( abs(min(( int(9.0) + divInt(divInt(i0,( max(divInt(divInt(( min(( int(0.0) * ( int(3.0) - max(( divInt(int(7.0),int(1.0)) - divInt(min(int(4.0), int(9.0)),max(max(( mod(i0,abs(i2)) * i0 ), abs(( i1 + res0 ))), divInt(mod(int(4.0),min(int(9.0), int(4.0))),in0))) ), i1) ) ), abs(( ( min(int(9.0), ( int(7.0) * int(1.0) )) + int(8.0) ) * max(min(int(4.0), min(( int(3.0) + int(5.0) ), in0)), abs(in2)) ))) - divInt(i0,max(in0, mod(res0,max(int(1.0), in2)))) ),int(1.0)),i0), mod(max(in2, mod(( int(4.0) + max(( ( max(int(8.0), mod(abs(in1),divInt(int(2.0),i2))) - min(int(7.0), int(4.0)) ) - ( int(5.0) - min(in2, int(9.0)) ) ), divInt(abs(( int(8.0) * res0 )),min(int(0.0), divInt(( min(res0, min(mod(int(1.0),int(6.0)), in2)) + i2 ),in1)))) ),int(0.0))),int(7.0))) * min(abs(abs(mod(min(( i2 - i2 ), ( int(2.0) + ( divInt(abs(int(9.0)),int(0.0)) + res0 ) )),max(abs(mod(min(int(1.0), divInt(abs(abs(in1)),int(3.0))),in0)), max(min(abs(min(in2, min(int(8.0), ( int(8.0) - int(4.0) )))), in1), max(( in2 + ( res0 + ( i2 * ( mod(in2,max(min(max(i1, int(5.0)), i0), int(5.0))) - mod(res0,int(5.0)) ) ) ) ), ( mod(min(( int(9.0) - in0 ), i1),int(8.0)) + res0 ))))))), in1) )),( int(1.0) * i0 )) ), ( min(( i1 - mod(abs(int(3.0)),divInt(i2,int(0.0))) ), ( in0 + int(7.0) )) - min(in1, abs(int(2.0))) ))) - min(( max(divInt(int(0.0),min(i2, divInt(( in2 + ( int(4.0) * mod(divInt(divInt(int(8.0),divInt(max(abs(res0), res0),abs(res0))),min(i0, int(6.0))),in0) ) ),i0))), i2) * max(i1, in0) ), divInt(int(9.0),in2)) )) ),min(mod(mod(in0,i2),i0), i2)) )), abs(( mod(divInt(int(9.0),abs(abs(mod(mod(int(2.0),max(divInt(abs(i1),in1), in1)),i2)))),( abs(min(int(0.0), divInt(int(2.0),int(1.0)))) - divInt(min(int(1.0), min(int(7.0), i0)),mod(min(( ( i2 - res0 ) * int(1.0) ), i2),abs(i2))) )) - int(2.0) ))) + min(divInt(int(1.0),min(int(6.0), divInt(res0,mod(divInt(mod(int(0.0),i1),in2),min(in1, int(5.0)))))), min(i1, int(9.0))) ))),( max(max(int(0.0), ( res0 - divInt(int(7.0),mod(in2,max(int(9.0), min(i1, mod(int(4.0),res0))))) )), in2) * int(0.0) )) )), int(6.0)), in2)))), int(9.0)) ) ),abs(min(int(4.0), in1))) - int(5.0) ),( i2 * min(int(5.0), int(4.0)) )):{:\\nb1 = max(in1, in1) \\le min(int(4.0), min(int(7.0), mod(divInt(in0,int(6.0)),int(3.0))))\\nres0 = ( abs(int(1.0)) - divInt(min(abs(int(3.0)), int(9.0)),max(divInt(in2,max(abs(( int(0.0) - mod(abs(( i0 * ( ( i0 * in0 ) * abs(abs(i0)) ) )),int(7.0)) )), in1)), abs(int(0.0)))) )\\nb1 = in2 \\g res0\\n:}else:{:\\nif ( i2 != in1 and int(9.0) != ( max(int(2.0), in1) + int(0.0) ) ):{:\\nloopBreak% = 0\\nwhile b2:{:\\ni2 -= ( max(res0, int(0.0)) * max(int(6.0), int(6.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile not b0:{:\\nloopBreak% = 0\\nwhile min(abs(( res0 * min(abs(i1), i0) )), abs(max(abs(i1), in0))) == divInt(int(7.0),min(int(4.0), min(divInt(min(int(8.0), ( divInt(i1,int(4.0)) * int(9.0) )),min(int(8.0), int(9.0))), in0))):{:\\nif res0 != i0:{:\\nif int(9.0) \\g ( int(7.0) - max(abs(divInt(res0,in1)), min(in0, int(8.0))) ):{:\\ni1 = in0\\n:}\\n:}else:{:\\nin2 += in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 13, 13, 7, 6, 190, 190, 8, 4, 1, 12, 8, 4, 0, 4, 197, 4, 808, 201, 224, 96, 107]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1], [1, 0, 1], [], [], [], [], [], [], [], [], [1, 6, 6, 1], [0], [3, 2, 2, 0, 3, 1, 2, 2, 3, 0, 0, 1, 1], [0, 1, 0, 1], [1, 2, 2], [2, 2], [1, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = max(( mod(res0,abs(int(1.0))) * ( mod(abs(res0),i1) * int(0.0) ) ), int(1.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 13, 4, 3, 2, 2]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 2, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 0, 8, 7, 0, 3, 7, 2, 9, 4, 8, 9, 0, 3, 1, 1, 3, 2, 5, 1, 9, 9, 2, 4, 9, 9, 6, 5, 3, 3, 2, 3, 9, 8, 8, 0, 0, 0, 4, 1], [2, 5, 3, 1, 2, 0, 5, 0, 0, 0, 5, 0], [0, 1, 0, 2, 2, 2, 2, 1, 2, 2, 2], [1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 1, 0, 1, 3, 3, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0], [0, 0, 0, 0, 1], [5, 1, 2, 5, 5, 5, 1, 6, 5, 3, 6, 0, 4, 2, 1, 2, 3, 5, 4, 4, 0, 3, 3, 1, 3, 1, 0, 1, 1, 4, 4, 5, 3, 5, 0, 1, 0, 0, 1, 6], [1], [3, 2, 0, 0, 0, 3, 0, 2, 0, 2, 2, 2, 3, 1, 0, 0, 0, 2, 2, 0, 1, 1, 2, 3, 3, 1, 0, 1, 2, 0, 0, 2, 3, 1, 0, 1, 0, 2, 0, 2, 3, 2, 1, 3, 1, 1, 3, 0, 3, 3, 3, 2, 1, 2, 3, 2, 2, 3, 0, 0, 2, 0, 2, 2, 1, 1, 3, 2, 3, 2, 0, 3, 3, 3, 2, 1, 0, 0, 1, 1, 3, 3, 2, 3, 1, 3, 0, 1, 2, 3, 1, 3, 0, 0, 1, 0, 2, 0, 1, 3, 1, 3, 3, 1, 2, 2, 3, 1, 1, 1, 0, 0, 3, 1, 1, 1, 3, 3, 2, 0, 3, 1, 1, 0, 1, 3, 1, 1, 3, 0, 3, 3, 1, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 3, 3, 2, 1, 3, 0, 3, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [2, 2, 2, 0, 2, 2, 0, 2, 1, 1, 0, 2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 1, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 1, 0, 2, 2, 1, 1, 2], [2, 0, 0, 1, 0, 1, 2, 0, 1, 2, 2, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( b0 or ( abs(( in2 * i1 )) == i2 and False ) ):{:\\nloopBreak% = 0\\nwhile abs(in2) != ( in2 + divInt(mod(( abs(int(9.0)) + in2 ),i1),res0) ):{:\\nif b1:{:\\nb0 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( divInt(( in2 - int(8.0) ),int(0.0)) \\ge divInt(min(abs(int(8.0)), in0),int(7.0)) and ( res0 + i0 ) \\g divInt(abs(int(0.0)),in1) ):{:\\nloopBreak% = 0\\nwhile int(3.0) == i2:{:\\nif mod(i1,mod(min(mod(int(7.0),abs(int(2.0))), int(9.0)),max(i2, max(min(abs(divInt(int(4.0),divInt(abs(( mod(min(in0, in2),mod(in1,( mod(int(8.0),int(9.0)) - min(mod(max(( in1 * abs(max(abs(( int(0.0) + i0 )), in0)) ), int(3.0)),int(1.0)), min(min(divInt(abs(int(1.0)),max(in0, int(3.0))), divInt(abs(int(2.0)),min(i1, in0))), int(5.0))) ))) - i1 )),divInt(i0,int(1.0))))), min(int(9.0), abs(min(int(9.0), mod(divInt(min(int(2.0), int(4.0)),int(9.0)),i1))))), i1)))) \\l abs(int(9.0)):{:\\nb2 = ( int(6.0) != int(5.0) or True )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif b2:{:\\nloopBreak% = 0\\nwhile min(abs(( in1 * min(int(3.0), int(3.0)) )), in1) \\l int(2.0):{:\\nb2 = min(int(3.0), int(9.0)) \\l max(in2, min(abs(int(8.0)), int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif int(0.0) \\l mod(in0,in2):{:\\nloopBreak% = 0\\nwhile True:{:\\ni0 *= ( int(0.0) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b1\\nb2 = True\\n:}else:{:\\nb2 = i0 != i0\\n:}\\nb2 = i1 \\l abs(max(divInt(int(0.0),max(res0, abs(int(4.0)))), int(1.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 10, 8, 41, 41, 12, 11, 4, 25, 12, 13, 5, 5, 40, 1, 153, 32, 41, 12, 21]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 3], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1], [0, 1, 1, 0, 1], [], [0, 1, 0, 0, 0], [1, 1, 1, 1, 1], [2, 8, 1, 6, 6], [3, 3, 4], [0, 0, 2, 2, 1], [0], [1, 0, 0, 0, 1, 1], [0, 0, 0], [0, 3, 1], [1], [], [0, 6, 2, 2, 3, 3, 2, 5, 4, 4, 5], [1], [3, 3, 1, 2, 1, 2, 2, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 2, 0, 3, 2, 3, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0], [2, 0, 1, 2, 2, 1], [1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(abs(int(2.0)), mod(int(8.0),( ( i0 * res0 ) + ( i2 - i2 ) ))) \\ge int(1.0)\\nin0 *= in0\\nb0 = b2\\nb2 = ( False and abs(i2) \\ge in2 )\\nb1 = ( in1 * abs(( min(in1, int(6.0)) - in2 )) ) \\le int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 0, 5, 5, 5, 3, 5, 1, 6, 3, 3, 1, 0, 11, 1, 26, 6, 5, 6, 1]}, {"genotype": [[0], [1], [1], [], [1], [1], [2], [], [], [], [], [], [], [], [], [1, 4], [1], [3, 0, 1], [], [0], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= min(in1, int(2.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 2, 1, 0, 1, 0], [1, 0], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 4, 6, 2, 0, 0, 4, 5, 2, 0, 8], [5, 4, 0], [2, 1, 0], [], [1, 1, 0, 1, 0], [0, 0, 0], [2, 0], [], [1], [2, 2, 0, 6, 5, 3, 3, 3, 2, 0, 2, 5, 2, 2, 3], [0, 1], [1, 0, 0, 0, 3, 2, 1, 2, 3, 0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 3, 2, 1, 2, 0, 1, 3, 2, 0, 2, 1, 1, 3, 3, 1, 0, 3, 2, 1, 2, 1, 3, 1, 3, 0, 0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [2, 1, 0, 0, 0, 1, 2, 0, 2], [2, 1, 0, 2, 0, 2, 1], [1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(9.0) != i2:{:\\nif i2 \\le i0:{:\\nb2 = not abs(mod(int(6.0),( max(res0, int(4.0)) * in2 ))) \\l in0\\n:}else:{:\\nin0 = in0\\n:}\\ni2 -= ( ( i0 + int(6.0) ) * ( min(mod(int(2.0),divInt(i2,int(0.0))), min(divInt(in2,( int(0.0) + int(4.0) )), min(max(int(5.0), i2), abs(mod(int(2.0),( int(0.0) * min(int(8.0), abs(i2)) )))))) - in0 ) )\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 12, 12, 3, 3, 0, 5, 3, 2, 0, 1, 15, 2, 45, 11, 9, 7, 5]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 0, 1], [1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 2, 9, 5, 1, 8, 5, 9, 1, 7, 9, 6, 1, 6, 4, 0, 1, 3, 8, 0, 2, 0, 1, 9, 2, 2, 8, 2, 1, 1, 7, 8], [1, 2, 0, 1, 4, 1, 0, 4], [1, 0, 0, 0], [0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 0, 2, 1, 3], [1, 0], [1, 0, 1], [3, 4, 5, 3, 0, 0, 1, 2, 0, 3, 1, 0, 3, 3, 1, 5, 2, 2, 1, 3, 5, 4, 1, 2, 5, 2, 6, 4, 2, 1, 6, 5, 4, 4, 1, 0, 2, 6, 0, 3, 1, 3, 3, 2, 0, 2, 0, 3], [0, 1, 0, 0, 0], [1, 1, 2, 2, 1, 0, 3, 0, 1, 0, 3, 3, 0, 3, 1, 0, 3, 1, 2, 2, 3, 1, 1, 0, 2, 0, 3, 2, 3, 2, 1, 0, 1, 3, 2, 1, 1, 3, 0, 2, 0, 0, 2, 1, 3, 2, 2, 1, 3, 1, 0, 0, 1, 0, 0, 3, 2, 2, 0, 3, 0, 0, 0, 2, 1, 1, 2, 0, 2, 3, 2, 3, 3, 3, 3, 0, 1, 0, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 1, 2, 2, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 3, 1, 0, 3, 0, 2, 1, 2, 0, 2, 0, 3, 1, 0, 1, 3, 1, 0, 0, 1, 3, 2, 0, 0, 1, 3, 0, 1, 3, 0, 2, 0, 3, 0, 0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 2, 1, 0, 0, 1, 1, 0, 2], [0, 1, 0, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 2, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nif ( b1 and not int(2.0) \\g int(5.0) ):{:\\nin0 = divInt(( int(2.0) + in1 ),max(in2, int(9.0)))\\n:}else:{:\\nif in0 == min(max(i0, max(int(5.0), i0)), min(int(1.0), mod(mod(min(int(8.0), int(5.0)),i1),( i2 - abs(( min(mod(int(9.0),i0), int(1.0)) + min(( int(7.0) * int(9.0) ), min(in0, ( i1 * i0 ))) )) )))):{:\\nin0 += mod(int(6.0),min(( ( int(1.0) * min(int(6.0), in0) ) - i1 ), int(4.0)))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = i2\\nif i2 \\l max(divInt(divInt(i1,min(in0, in2)),in1), mod(int(0.0),int(1.0))):{:\\nb0 = True\\ni1 = ( i2 * ( max(( min(abs(min(abs(in2), int(3.0))), i2) * int(8.0) ), int(0.0)) + mod(int(2.0),res0) ) )\\nin1 = mod(divInt(i2,i1),divInt(int(0.0),divInt(( divInt(int(1.0),res0) + int(9.0) ),in2)))\\n:}else:{:\\nloopBreak% = 0\\nwhile ( in1 \\g in1 and ( ( ( abs(int(2.0)) + i1 ) * max(i0, mod(int(2.0),divInt(i2,( res0 - min(int(8.0), i0) )))) ) - int(2.0) ) \\le min(int(1.0), in0) ):{:\\nloopBreak% = 0\\nwhile i1 \\g int(1.0):{:\\nb0 = max(( in0 - in0 ), int(7.0)) \\l max(i2, int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = min(i0, mod(i2,abs(i0))) \\le in0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 33, 33, 8, 4, 2, 14, 8, 6, 2, 3, 48, 5, 136, 33, 27, 17, 17]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 2, 2, 2, 0, 1, 0, 1, 1, 2, 2, 0, 2, 1], [0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 3, 0, 5, 8, 5, 1, 3, 6, 0, 5, 3, 2, 2, 4, 3, 3, 8, 7, 3, 5, 2, 2, 8, 5, 5, 0, 5, 4, 1, 3, 1, 0, 5, 4, 9, 9, 0, 3, 6, 6, 4, 2, 7, 8, 9], [5, 0, 4, 3, 5, 2, 5], [1, 2, 1, 1, 0, 2], [1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 0, 1], [1, 0], [1, 1, 0, 0, 0], [1, 4, 4, 3, 1, 6, 5, 5, 4, 1, 2, 3, 2, 0, 6, 1, 0, 4, 4, 2, 3, 3, 1, 2, 4, 3, 6, 1, 2, 2, 3, 5, 5, 3, 3, 0, 0, 6, 4, 5, 0, 6, 6, 2, 4, 5, 5, 5, 2, 3, 6, 1, 2, 3], [0, 0, 0, 1, 0, 1], [0, 2, 0, 0, 2, 2, 0, 2, 1, 1, 0, 0, 1, 3, 3, 1, 3, 3, 0, 1, 0, 3, 3, 2, 3, 0, 0, 0, 0, 1, 1, 1, 2, 0, 2, 2, 3, 0, 0, 1, 2, 0, 1, 3, 3, 1, 0, 3, 1, 3, 3, 0, 2, 0, 0, 1, 2, 0, 2, 2, 3, 1, 3, 1, 0, 0, 2, 3, 2, 0, 2, 3, 2, 0, 3, 1, 1, 0, 0, 3, 2, 2, 2, 0, 1, 0, 2, 2, 3, 3, 1, 1, 0, 0, 0, 0, 2, 1, 3, 1, 2, 3, 0, 3, 3, 0, 1, 1, 1, 1, 1, 3, 2, 2, 3, 3, 0, 3, 1, 3, 1, 3, 3, 0, 2, 0, 1, 0, 3, 3, 3, 2, 2, 0, 1, 3, 3, 2, 3, 0, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 0, 1, 3, 1, 1, 2, 3, 3, 2, 0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 3, 1, 1, 3, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 2], [2, 2, 0, 1, 0, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = in1\\nb1 = b2\\nin1 = mod(in0,i1)\\nif mod(( res0 * mod(int(2.0),int(6.0)) ),in2) != in2:{:\\nif int(3.0) \\l max(min(int(0.0), max(max(in1, int(5.0)), i1)), max(min(( min(i2, in0) * i2 ), i0), int(8.0))):{:\\nif int(5.0) \\le int(1.0):{:\\nres0 = mod(i1,( ( min(i0, in1) + int(3.0) ) - ( in1 + int(6.0) ) ))\\n:}\\n:}else:{:\\ni2 -= abs(min(int(0.0), in0))\\n:}\\nin0 = min(int(5.0), min(max(i1, ( i2 - in1 )), int(3.0)))\\n:}else:{:\\nb1 = False\\n:}\\nb1 = not ( in0 - ( ( max(int(2.0), max(int(2.0), res0)) - i1 ) + divInt(max(mod(i2,( abs(( i2 * abs(int(4.0)) )) - int(3.0) )), in0),in2) ) ) \\ge max(( divInt(mod(in2,int(3.0)),in0) - ( ( min(abs(int(8.0)), int(7.0)) + in0 ) - i0 ) ), i0)\\nif res0 != ( int(3.0) + max(int(5.0), ( min(in1, abs(max(in2, int(2.0)))) - int(2.0) )) ):{:\\nloopBreak% = 0\\nwhile ( b0 or int(8.0) == int(5.0) ):{:\\ni0 *= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nb2 = min(( ( max(max(res0, max(int(0.0), max(int(5.0), min(max(res0, ( i2 + int(4.0) )), in1)))), min(min(max(( divInt(in2,int(1.0)) * min(min(( max(in2, int(3.0)) - int(1.0) ), mod(min(mod(int(0.0),int(5.0)), int(4.0)),int(9.0))), int(9.0)) ), int(0.0)), in2), int(3.0))) * min(int(6.0), int(6.0)) ) + mod(abs(abs(divInt(i2,in0))),int(4.0)) ), int(2.0)) != divInt(divInt(mod(( mod(int(7.0),res0) - min(int(8.0), int(9.0)) ),abs(i1)),i2),in0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 6, 10, 47, 47, 7, 6, 1, 13, 7, 6, 2, 5, 54, 6, 178, 39, 44, 24, 17]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 0, 1, 0, 1], [0], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 5, 5, 0, 4, 8, 6], [0, 1], [0, 1, 2], [], [1, 1, 0, 0], [0, 0], [2, 0], [], [1], [0, 3, 0, 0], [0, 1], [1, 1, 0, 1, 3, 2, 1, 1, 1, 3, 2, 0, 1, 1], [0, 1], [1, 1], [0, 1], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(0.0) \\l int(3.0):{:\\nb0 = i0 \\g int(5.0)\\nin0 = max(( int(5.0) + int(0.0) ), int(4.0))\\ni0 -= max(divInt(i0,int(8.0)), int(6.0))\\n:}else:{:\\nb1 = not b2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 8, 8, 2, 3, 0, 4, 2, 2, 0, 1, 4, 2, 14, 2, 2, 2, 1]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 4], [1], [3, 0], [], [2], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += abs(in1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 1, 2, 2, 2, 2, 2, 0, 1], [0, 1, 1, 0, 0, 0, 1], [0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 5, 9, 5, 9, 4, 6, 0, 5, 7, 2, 7, 7, 9, 6, 2], [5, 3, 2, 0, 2, 4, 3, 1], [0, 1, 1], [1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 3, 1, 3, 3, 2, 3, 3, 1, 0, 2, 1], [1, 1, 1, 0, 0], [0, 0, 0, 1], [6, 4, 2, 4, 6, 4, 3, 1, 1, 2, 5, 2, 0], [1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 2, 0, 3, 1, 1, 0, 3, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 2, 0, 0, 1, 2, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(2.0) != res0:{:\\nloopBreak% = 0\\nwhile in1 \\ge int(7.0):{:\\nb0 = i2 == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nres0 += int(59.0)\\nloopBreak% = 0\\nwhile False:{:\\nif in1 \\l int(5.0):{:\\nif False:{:\\nif ( False or ( divInt(in0,min(int(9.0), int(4.0))) == i1 or ( not ( ( True and min(mod(mod(int(6.0),int(0.0)),int(5.0)), divInt(int(7.0),max(int(2.0), int(7.0)))) \\le ( i1 + i2 ) ) or int(7.0) \\ge divInt(in2,int(9.0)) ) and b1 ) ) ):{:\\nloopBreak% = 0\\nwhile not int(6.0) \\g int(2.0):{:\\ni2 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = True\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 997, "mapping_values": [1, 11, 11, 7, 4, 17, 17, 8, 3, 5, 21, 8, 13, 5, 4, 13, 2, 36, 6, 3, 3, 5]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1], [0, 2, 0, 0, 1, 1], [1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 7, 1, 4, 3, 3, 9, 2, 7, 9, 6, 7, 0, 0, 7, 7], [4, 4], [1], [], [1, 1], [0, 0], [], [], [], [3, 4, 6, 5, 6, 3, 1, 5, 0, 1, 5, 1, 4], [0, 0, 0, 0], [1, 0, 2, 2, 1, 1, 3, 0, 0, 3, 1, 3, 2, 0, 1, 1, 3, 3, 0, 1, 3, 1, 3, 1, 2, 1, 2, 0, 1, 2, 2, 1, 2, 3, 1, 1, 3, 2, 0, 2, 3, 3, 2, 0, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 2, 2, 1, 0, 2, 1, 2], [0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(6.0)\\nloopBreak% = 0\\nwhile in1 \\le ( divInt(int(3.0),int(7.0)) + max(res0, in2) ):{:\\nres0 = min(int(1.0), max(divInt(in0,int(4.0)), int(3.0)))\\ni1 = max(abs(in2), int(3.0))\\nb1 = abs(int(9.0)) \\le max(int(2.0), divInt(int(7.0),divInt(i0,int(9.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = mod(divInt(int(6.0),divInt(min(int(7.0), int(0.0)),abs(( in2 - divInt(max(abs(divInt(i1,int(0.0))), int(7.0)),int(7.0)) )))),in1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 6, 6, 1, 5, 17, 17, 2, 1, 0, 2, 2, 0, 0, 0, 13, 4, 48, 11, 11, 2, 9]}, {"genotype": [[0], [1], [0], [], [1], [1], [6], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 7, 6, 5, 0, 4, 6, 1, 1, 6, 3, 3, 9, 6, 8, 6, 5, 6, 5, 6, 0, 0, 1, 2, 8, 2, 3, 6], [4], [0, 2, 2], [], [1, 0], [0], [0], [], [], [1, 6, 2, 4, 0, 6, 4, 3, 5, 2, 2, 3, 4, 1, 6, 3, 3, 1, 6, 5, 4, 3, 3, 5, 5, 1, 0, 0, 4, 6, 0, 6, 0, 1, 1, 5, 2, 2, 3, 3, 1, 2, 1, 3, 0, 5, 1, 4, 4], [0], [2, 0, 0, 2, 2, 3, 3, 2, 3, 0, 0, 0, 2, 2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1, 0, 2, 1, 2, 0, 2, 0, 2, 2, 2, 3, 0, 1, 3, 2, 2, 1, 2, 1, 1, 0, 2, 2, 0, 2, 3, 3, 2, 3, 0, 3, 0, 2, 1, 2, 3, 3, 3, 0, 2, 3, 3, 3, 0, 3, 2, 0, 0, 0, 3, 3, 2, 1, 0, 1, 2, 0, 0, 1, 3, 1, 0, 3, 1, 0, 1, 3, 3, 2, 0, 3, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 3, 0, 1, 0, 0, 2, 2, 3, 3, 3, 2, 1, 0, 2, 3, 3, 0, 0, 2, 0, 0, 2, 1, 2, 3, 0, 1, 0, 1, 1, 2, 1, 0, 1, 3, 3, 0, 3, 0, 3, 0, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 0, 0, 1, 0, 2, 0, 2, 1, 2, 1, 1, 1, 0, 2, 0, 1, 0, 2, 1, 2, 0, 2, 2, 0, 2], [1, 1, 1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0, 2, 2], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 78, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = ( res0 - i2 )\\nb0 = mod(( abs(abs(divInt(max(in1, i0),res0))) - divInt(mod(int(5.0),divInt(mod(( max(min(mod(divInt(( mod(min(mod(( ( ( int(0.0) - in1 ) + ( int(7.0) * in0 ) ) - ( in2 * i2 ) ),int(6.0)), i2),mod(int(5.0),( in0 - divInt(in1,mod(divInt(( min(i1, int(0.0)) * abs(( mod(int(4.0),( int(6.0) - int(1.0) )) - res0 )) ),divInt(divInt(in0,divInt(min(max(( min(in0, abs(i1)) * mod(int(1.0),( abs(min(abs(res0), divInt(min(min(max(in2, min(( in1 + in0 ), in0)), abs(min(( int(6.0) + in2 ), int(3.0)))), ( in2 - i1 )),int(3.0)))) + abs(int(9.0)) )) ), i0), max(int(6.0), i0)),int(8.0))),abs(max(divInt(in1,max(divInt(int(6.0),max(( res0 + i0 ), min(int(5.0), abs(res0)))), min(i0, int(6.0)))), i1)))),i1)) ))) * mod(mod(max(min(abs(( int(5.0) + in2 )), ( max(abs(i2), i2) - ( in0 * in0 ) )), ( int(6.0) + ( min(i1, int(0.0)) + i2 ) )),int(0.0)),int(1.0)) ),( int(2.0) * i1 )),int(8.0)), abs(abs(in0))), min(i0, abs(in2))) * i1 ),in1),int(2.0))),int(3.0)) ),int(6.0)) \\le in1\\nb2 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 29, 29, 1, 3, 0, 2, 1, 1, 0, 0, 49, 1, 166, 49, 40, 25, 24]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 1], [], [1, 1, 1, 1], [1, 1, 1], [2, 5, 7], [], [], [], [], [], [], [], [], [5, 2, 1, 1, 0, 5, 4, 5], [1, 1, 1, 1], [3, 3, 1, 0, 3, 2, 2, 1, 0, 0, 0, 3, 1], [1, 1], [2, 2, 1, 2], [1, 2, 1, 1], [0, 1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= abs(abs(int(2.0)))\\ni2 *= i1\\ni1 -= max(divInt(mod(int(5.0),i0),in2), in1)\\nin2 -= abs(int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 13, 2, 4, 4, 2]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1, 1, 1, 1], [4, 8, 4, 2], [2, 1], [1, 2], [1, 0], [0, 0, 1, 0, 1, 0], [0, 0], [3, 1, 3, 0], [1], [], [1, 6, 4, 1], [], [3, 3, 2, 1, 1, 3, 0, 3, 1, 0, 0, 2, 0, 1], [1, 1], [2, 1, 2, 1], [], [1, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( False or abs(max(mod(int(4.0),int(8.0)), abs(i1))) == max(int(4.0), res0) ):{:\\nb1 = ( in1 \\g divInt(i1,int(2.0)) and b2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 4, 4, 2, 2, 2, 6, 2, 4, 1, 0, 4, 0, 14, 2, 4, 0, 2]}, {"genotype": [[0], [1], [1], [], [1], [1], [4], [], [], [], [], [], [], [], [], [0], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += int(4.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 3, 5, 4, 4, 1, 1, 6, 2, 2, 8, 5, 5, 0, 0, 2, 2, 4, 6, 7, 7, 5, 2, 8, 4, 5, 3, 5, 6], [], [1, 0], [], [0], [], [0], [], [], [4, 0, 6, 3, 4, 1, 4, 2, 5, 4, 3, 3, 3, 1, 4, 6, 3, 6, 1, 2, 1, 5, 4, 1, 6], [0], [2, 3, 2, 1, 3, 2, 1, 2, 0, 1, 2, 2, 1, 3, 0, 2, 3, 1, 1, 0, 2, 2, 3, 1, 3, 1, 2, 2, 1, 2, 0, 1, 1, 3, 3, 0, 2, 0, 3, 1, 1, 1, 3, 3, 2, 1, 2, 0, 2, 3, 2, 2, 2, 0, 0, 0, 0, 2, 3, 2, 2, 3, 3, 2, 0, 0, 1, 3, 3, 0, 1, 3, 1, 0, 0, 1, 2, 2, 3, 3, 3, 0, 2, 1, 1, 0, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 3, 3, 0, 2, 0, 0, 3, 2, 0, 3, 1, 1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 2, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0, 2, 0, 2, 1, 2, 0], [0, 1, 1, 1, 1, 2, 2, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = mod(min(mod(int(8.0),min(divInt(int(9.0),mod(i0,int(3.0))), divInt(divInt(int(5.0),max(res0, mod(min(int(4.0), int(4.0)),in0))),divInt(mod(abs(int(1.0)),max(int(1.0), divInt(divInt(int(6.0),( in1 + int(2.0) )),int(2.0)))),max(min(i1, ( in1 - max(int(8.0), int(5.0)) )), int(5.0)))))), max(min(divInt(int(0.0),( i2 - ( min(( mod(mod(in2,in1),in0) - in0 ), divInt(abs(mod(( min(max(( in0 - i1 ), int(0.0)), abs(max(in1, int(2.0)))) * min(int(2.0), res0) ),in0)),int(4.0))) * divInt(( abs(max(abs(res0), divInt(int(6.0),int(7.0)))) + i1 ),int(7.0)) ) )), max(mod(int(5.0),min(int(2.0), divInt(int(8.0),abs(min(abs(max(i2, divInt(i1,in2))), abs(divInt(in1,min(int(4.0), int(5.0))))))))), int(3.0))), i1)),divInt(( res0 - int(5.0) ),int(6.0)))\\nb1 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 30, 30, 0, 2, 0, 1, 0, 1, 0, 0, 25, 1, 115, 32, 29, 9, 23]}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [1, 1], [4, 3], [2], [], [], [1], [0], [], [], [], [3, 5, 0, 0, 3, 0], [1, 0], [3, 3, 0, 2, 3, 0, 1, 0, 1, 0], [1], [2, 2, 1], [0], [0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(abs(in0)) == divInt(max(in2, int(4.0)),i0):{:\\ni0 += int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 6, 2, 10, 1, 3, 1, 1]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [2, 2, 0, 0, 0, 1], [1, 0], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 5, 3, 0, 6, 7, 1, 0, 3, 7, 6, 6, 9, 6, 4, 0, 1, 3, 4, 9, 8, 0, 1, 6, 5, 0, 4, 9, 0, 6, 7, 9, 2, 1], [3, 2], [2, 0], [], [1, 1, 0, 0, 0], [0, 0], [2, 1, 1], [1, 1], [1], [6, 6, 2, 5, 0, 2, 0, 2, 3, 0, 1, 1, 3, 1, 3, 6, 0, 2, 5, 6, 2, 2, 4, 2, 2, 3, 2, 0, 3, 4, 1, 2, 3, 4, 1, 4, 4, 1, 0, 4, 5, 2, 4, 2, 2], [1, 1], [0, 3, 1, 0, 1, 2, 3, 2, 0, 0, 3, 1, 2, 3, 3, 1, 1, 2, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 3, 3, 1, 0, 3, 3, 3, 3, 3, 0, 3, 2, 0, 1, 2, 3, 0, 0, 3, 2, 0, 2, 2, 1, 0, 0, 0, 3, 1, 2, 2, 2, 1, 3, 2, 2, 3, 1, 1, 2, 1, 3, 2, 1, 0, 2, 0, 3, 0, 1, 3, 2, 0, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 3, 2, 1, 3, 0, 1, 1, 0, 0, 2, 2, 2, 1, 3, 3, 3, 3, 2, 1, 3, 1, 3, 0, 2, 2, 1, 0, 3, 0, 3, 0, 3, 3, 3, 1, 0, 0, 3, 1, 0, 1, 3, 0, 3, 1, 2, 2, 3, 3, 3, 0, 1, 0, 3, 2, 2, 3, 2, 0, 0, 3, 1, 1, 0, 2, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 1, 1, 1, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 2, 0, 0, 2, 2, 1, 2, 0, 1, 2, 1, 0, 1, 0, 0], [0, 2, 1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile res0 \\ge min(int(9.0), res0):{:\\nif int(0.0) == mod(min(mod(i2,in2), max(int(5.0), ( min(abs(int(3.0)), int(0.0)) + mod(( i0 * i2 ),max(i0, int(6.0))) ))),min(i2, in0)):{:\\ni0 -= int(7.0)\\n:}else:{:\\ni1 *= max(min(int(1.0), i1), max(min(min(min(min(in0, min(( i1 * int(0.0) ), divInt(max(in0, res0),min(mod(i0,divInt(( int(3.0) + i2 ),in2)), res0)))), abs(int(7.0))), mod(mod(mod(int(6.0),max(divInt(( max(int(6.0), int(9.0)) * ( int(6.0) + max(divInt(int(4.0),i2), divInt(i2,min(in1, int(0.0)))) ) ),max(mod(i2,( i2 + in0 )), i2)), abs(mod(( i0 + mod(mod(abs(mod(int(1.0),max(in0, int(3.0)))),int(4.0)),in1) ),i1)))),( mod(( int(9.0) * min(min(abs(abs(mod(int(8.0),max(int(0.0), abs(i2))))), divInt(mod(int(1.0),in0),min(in1, min(i1, abs(abs(max(int(6.0), in1))))))), in1) ),abs(int(5.0))) + i1 )),int(0.0))), min(i0, max(int(4.0), ( ( abs(max(min(in1, int(9.0)), in2)) * max(mod(( min(mod(i2,in1), min(int(0.0), int(6.0))) + i2 ),mod(i2,int(7.0))), int(9.0)) ) + int(2.0) )))), int(1.0)))\\n:}\\nb2 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 35, 35, 2, 2, 0, 5, 2, 3, 2, 1, 45, 2, 161, 37, 46, 15, 24]}, {"genotype": [[0], [1], [0], [], [0], [1], [1], [3], [2], [], [1], [0], [], [], [], [5], [], [1, 3, 0], [], [2], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(1.0) \\ge abs(in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 1, 3, 0, 7, 8, 3, 4, 5, 9, 0, 2, 8, 1, 6, 4, 0, 4, 4, 8, 2, 3, 0, 5, 7, 3, 7, 8, 3], [0], [1], [], [1], [0], [], [], [], [6, 1, 5, 0, 6, 6, 4, 6, 4, 2, 2, 3, 4, 5, 2, 3, 1, 1, 2, 6, 0, 4, 3], [], [0, 2, 1, 2, 2, 3, 3, 1, 3, 2, 1, 1, 2, 3, 3, 2, 2, 3, 3, 1, 3, 1, 3, 0, 2, 1, 3, 2, 2, 2, 2, 1, 0, 3, 0, 1, 3, 3, 2, 0, 1, 1, 0, 1, 2, 3, 0, 0, 0, 0, 2, 3, 2, 1, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 0, 2, 1, 1, 3, 3, 0, 1, 1, 1, 3, 2, 2, 1, 1, 2, 1, 3, 0, 0, 2, 1, 1, 2, 0, 1, 3, 1, 2, 2, 0, 1, 2, 1, 0, 0, 3, 3, 0, 3, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 2, 2, 0, 2, 2, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0], [2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 0, 2, 0, 0, 2, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = res0 \\l ( int(5.0) * ( ( min(max(int(4.0), min(mod(int(1.0),int(3.0)), divInt(min(max(( ( max(max(int(0.0), min(int(7.0), max(i1, ( int(8.0) + abs(( ( divInt(( int(3.0) - in2 ),abs(i0)) * int(4.0) ) - min(abs(( res0 * int(5.0) )), int(9.0)) )) )))), res0) + int(0.0) ) * divInt(abs(in1),res0) ), in1), i2),( max(( int(2.0) * mod(mod(abs(i2),divInt(min(( in0 * mod(in1,mod(in2,mod(int(8.0),int(1.0)))) ), max(max(i2, int(6.0)), int(4.0))),int(0.0))),max(( ( int(4.0) + int(4.0) ) * mod(int(8.0),max(in0, i1)) ), mod(int(2.0),int(3.0)))) ), divInt(i1,int(0.0))) + max(int(5.0), mod(divInt(i2,int(7.0)),( int(3.0) + res0 ))) )))), i0) * min(max(in1, min(in0, int(7.0))), int(8.0)) ) - int(3.0) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 30, 30, 1, 1, 0, 1, 1, 0, 0, 0, 23, 0, 109, 31, 25, 16, 15]}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 0, 1, 0, 1, 1, 2, 2, 1], [0, 1, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 3, 4, 8, 5, 2, 7, 8, 2, 5, 2, 8, 6, 8, 1, 4, 4, 9, 5, 3, 3, 7, 4, 0, 9, 0, 2, 9, 1, 7, 0, 1, 1, 3, 2, 7, 3, 6, 3, 2, 5, 0, 1, 0, 8, 6, 4, 4, 5, 0, 3, 6, 1, 8, 7, 4, 9, 9, 8, 6, 0, 2, 8], [4, 4, 1, 2, 5], [1, 2, 2, 0, 2, 2, 0], [1], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 2, 3, 0, 0], [], [1], [5, 4, 0, 0, 6, 1, 2, 3, 4, 6, 1, 3, 5, 4, 5, 3, 6, 6, 4, 5, 0, 2, 0, 2, 5, 2, 1, 2, 1, 5, 5, 2, 5, 3, 5, 4, 6, 5, 1, 6, 3, 5, 3, 3, 3, 2, 4, 5, 1, 3, 6, 2, 0, 6, 5, 2, 5, 2], [0, 1], [0, 1, 2, 2, 1, 0, 0, 1, 1, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 1, 0, 1, 1, 1, 2, 2, 0, 3, 2, 0, 0, 2, 1, 2, 1, 2, 3, 2, 0, 2, 2, 0, 1, 2, 0, 3, 2, 2, 0, 3, 3, 2, 1, 0, 1, 0, 3, 2, 2, 2, 1, 1, 0, 2, 2, 0, 0, 0, 3, 1, 3, 1, 2, 1, 3, 1, 1, 3, 1, 2, 3, 2, 3, 1, 1, 1, 3, 1, 0, 1, 3, 2, 3, 3, 2, 1, 3, 0, 1, 0, 2, 2, 2, 3, 0, 0, 0, 0, 0, 3, 2, 3, 2, 0, 3, 3, 3, 2, 3, 3, 3, 2, 1, 2, 0, 1, 3, 1, 3, 1, 3, 2, 3, 2, 0, 0, 3, 3, 1, 2, 0, 0, 3, 2, 1, 2, 1, 1, 3, 0, 0, 1, 0, 2, 0, 0, 3, 1, 2, 1, 3, 3, 2, 3, 0, 3, 0, 0, 2, 1, 2, 0, 0, 2, 3, 0, 3, 1, 2, 3, 1, 1, 1, 1, 1, 1, 2, 3, 2, 3, 1, 3, 3, 2, 3, 2, 3, 1, 1, 2, 3, 0, 3, 1, 0, 3, 3, 0, 0, 2, 0, 3, 1, 3, 3, 0, 0, 0, 1, 2, 3, 1, 2, 2, 1, 2, 2, 0, 2, 1, 3, 0, 2, 1, 0, 3, 1, 2, 1, 0, 0, 2, 2, 0, 1, 2, 1, 2, 1, 3, 3, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [2, 2, 2, 2, 0, 1, 2, 0, 0, 1, 2, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 2, 2], [0, 1, 2, 1, 1, 0, 2, 2, 0, 0, 2, 2, 1, 1, 0, 2, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 2, 0, 1, 2, 2, 1], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 \\le int(0.0):{:\\nin1 = divInt(( int(0.0) + i0 ),i0)\\nb1 = b2\\nb2 = not int(3.0) \\le int(4.0)\\n:}else:{:\\nb0 = abs(abs(abs(abs(min(int(8.0), mod(divInt(max(abs(min(min(int(5.0), res0), int(2.0))), int(7.0)),int(8.0)),mod(mod(i1,max(( i2 - in0 ), ( int(2.0) * ( int(5.0) - ( abs(( in1 - ( ( res0 + int(2.0) ) * divInt(i1,max(mod(mod(in0,abs(min(( int(8.0) * in2 ), int(6.0)))),in1), min(( ( ( int(8.0) + int(1.0) ) + in2 ) * divInt(( in0 * res0 ),res0) ), max(int(4.0), max(int(4.0), ( int(9.0) - max(int(5.0), int(3.0)) )))))) ) )) - abs(int(3.0)) ) ) ))),( abs(divInt(min(int(7.0), int(4.0)),int(0.0))) + max(int(9.0), in1) )))))))) \\g int(0.0)\\nin2 *= min(divInt(abs(min(mod(int(2.0),max(i0, int(9.0))), i2)),( divInt(( abs(i0) + i2 ),in2) + i2 )), i1)\\nloopBreak% = 0\\nwhile max(mod(min(( i2 - max(max(min(divInt(min(min(max(divInt(int(1.0),mod(i1,int(7.0))), min(int(0.0), abs(int(1.0)))), max(mod(max(( in2 + in2 ), abs(min(int(1.0), ( i2 * in2 )))),abs(mod(int(3.0),divInt(int(2.0),int(7.0))))), abs(in0))), in2),int(3.0)), in1), divInt(res0,in2)), abs(int(6.0))) ), ( int(3.0) + max(min(divInt(abs(i1),abs(res0)), in0), ( int(2.0) + ( in2 * in0 ) )) )),mod(max(in0, min(int(5.0), mod(abs(int(0.0)),int(1.0)))),int(0.0))), int(8.0)) == int(6.0):{:\\nloopBreak% = 0\\nwhile ( b2 or b2 ):{:\\nb0 = int(4.0) != divInt(abs(( abs(int(4.0)) + max(abs(( max(( max(int(5.0), int(0.0)) + mod(min(in0, abs(int(3.0))),i2) ), min(min(in1, in2), divInt(i1,min(int(6.0), min(abs(in0), res0))))) * i2 )), int(1.0)) )),divInt(min(int(8.0), divInt(divInt(int(7.0),divInt(( i0 + ( int(4.0) - max(res0, ( int(9.0) * in2 )) ) ),max(int(9.0), divInt(int(8.0),i2)))),in2)),mod(( i2 * int(6.0) ),( int(0.0) - mod(int(2.0),abs(abs(int(8.0)))) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 64, 64, 5, 7, 1, 10, 5, 5, 0, 1, 58, 2, 254, 65, 69, 32, 34]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 2, 1, 1, 1, 0], [0], [1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 2, 0, 1, 5, 5, 0, 3, 1, 4, 3, 5, 2, 3, 0, 3, 8, 0, 9, 1, 0, 6, 1, 1, 3, 0, 9, 0, 5, 5, 5, 4, 1, 3, 1, 4, 5, 6, 9, 0, 2, 0, 2, 3, 5, 0, 2, 8, 5, 5, 6, 3, 0, 5, 9, 5, 2, 6, 1, 5, 1, 9, 6, 4, 5, 6, 9, 6, 5, 3, 8, 4, 8, 6, 1, 8, 7, 5, 3, 4, 8, 2, 1, 9, 1, 9, 5, 4, 0, 1, 3, 0, 2, 1, 2, 0, 7, 4, 3, 1, 8, 9, 8, 5, 5, 8, 0, 7, 8, 4, 5, 9, 2, 8, 0, 0, 1, 8, 1, 6, 5, 9, 6, 4, 0, 1, 2], [1, 0, 3, 4], [2, 0, 2, 1, 2, 0, 0, 0, 2], [1], [0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0], [1, 0, 3, 0, 0], [1], [0], [2, 1, 3, 3, 1, 3, 2, 0, 3, 0, 4, 0, 1, 3, 3, 3, 3, 2, 5, 5, 6, 2, 3, 3, 1, 5, 1, 0, 1, 5, 5, 5, 6, 2, 1, 4, 5, 3, 1, 3, 5, 2, 4, 3, 5, 2, 5, 5, 0, 5, 2, 6, 1, 5, 4, 0, 5, 6, 4, 3, 3, 0, 5, 5, 2, 1, 2, 4, 0, 6, 6, 0, 2, 5, 3, 5, 4, 3, 0, 1, 1, 4, 6, 3, 0, 6, 3, 2, 4, 0, 1, 5, 4, 4, 6, 2, 5, 0, 1, 4, 6, 4, 1, 6, 3, 2, 0, 4, 5, 0, 0, 6, 0, 4, 6, 4, 2, 0, 2, 5, 6, 4, 0, 1, 6, 5, 2, 0, 5, 0, 3, 0, 2, 3, 1, 5, 3], [1, 0], [2, 0, 0, 0, 2, 3, 3, 2, 1, 3, 2, 3, 1, 0, 3, 0, 1, 3, 2, 0, 3, 0, 3, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 1, 2, 0, 1, 3, 2, 1, 2, 2, 2, 1, 0, 3, 2, 2, 0, 0, 1, 3, 0, 3, 1, 2, 2, 2, 2, 3, 2, 1, 3, 3, 1, 2, 2, 2, 1, 3, 0, 3, 0, 0, 2, 3, 2, 0, 2, 0, 0, 0, 3, 3, 1, 3, 2, 1, 2, 3, 3, 2, 0, 3, 1, 3, 1, 3, 3, 0, 1, 0, 2, 2, 0, 3, 2, 1, 3, 0, 0, 0, 3, 2, 3, 3, 3, 1, 0, 0, 0, 3, 1, 3, 3, 1, 1, 2, 3, 0, 0, 3, 3, 2, 2, 2, 1, 0, 2, 1, 3, 1, 1, 3, 1, 1, 1, 3, 0, 2, 3, 2, 0, 1, 1, 1, 1, 1, 3, 3, 1, 0, 0, 0, 2, 3, 2, 2, 3, 2, 3, 2, 3, 1, 2, 2, 1, 1, 3, 0, 1, 2, 1, 0, 2, 2, 3, 2, 1, 2, 3, 3, 3, 2, 2, 0, 3, 2, 0, 2, 0, 0, 3, 0, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 3, 0, 3, 2, 2, 2, 1, 2, 1, 2, 2, 0, 2, 3, 2, 1, 0, 2, 2, 1, 3, 2, 0, 0, 2, 0, 3, 0, 0, 0, 3, 0, 3, 2, 3, 0, 0, 1, 3, 3, 2, 3, 1, 3, 1, 2, 2, 2, 0, 2, 2, 0, 2, 0, 1, 1, 3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 0, 3, 2, 3, 2, 1, 0, 2, 2, 1, 0, 3, 1, 0, 0, 0, 3, 2, 3, 2, 0, 3, 3, 2, 3, 3, 3, 2, 3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 0, 3, 3, 3, 1, 0, 0, 2, 2, 3, 2, 2, 3, 2, 1, 1, 0, 0, 0, 1, 0, 3, 0, 1, 0, 3, 2, 2, 3, 3, 1, 2, 1, 3, 0, 1, 0, 0, 0, 1, 3, 0, 0, 3, 3, 3, 1, 2, 3, 3, 3, 3, 2, 2, 1, 2, 0, 0, 0, 0, 2, 0, 3, 2, 3, 2, 2, 3, 3, 0, 2, 3, 1, 0, 3, 1, 3, 2, 0, 2, 3, 0, 1, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 2, 1, 3, 3, 2, 3, 2, 2, 0, 2, 1, 1, 3, 1, 2, 3, 0, 0, 0, 1, 1, 2, 0, 3, 1, 3, 2, 3, 0, 0, 3, 3, 3, 1, 2, 0, 1, 1, 2, 0, 2, 3, 1, 0, 0, 3, 2, 3, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 3, 2, 1, 0, 2, 2, 0, 1, 2, 1, 2, 0, 1, 1, 3, 2, 2, 1, 0, 0, 0, 3, 0, 1, 2, 3, 3, 0, 2, 1, 0, 3, 0, 0, 1, 1, 1, 2, 2, 3, 2, 1, 1, 0, 2, 1, 2, 2, 3, 0, 3, 1, 1, 2, 0, 0, 2, 0, 2, 0, 0, 1, 1, 1, 2, 1, 2, 3, 1, 1, 2, 1, 1, 0, 0, 1, 0, 3, 0, 2, 1, 0, 1, 1, 2, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 0, 0, 2, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 2, 0, 2, 1, 1, 0, 1, 2, 1, 1, 0, 1, 2, 1, 0, 2, 0, 0, 1, 2, 1, 0, 1, 0, 2, 2, 2, 0, 0, 1, 2, 2, 1, 0, 0, 1, 0, 0, 0, 1, 2, 1, 0, 2, 0, 2, 1, 2, 1, 1, 2, 2, 1, 1, 0, 0, 0, 1, 0, 1, 1, 2, 0, 2, 2, 2, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 2, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 1, 2, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0, 2, 2, 1, 2, 1, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 2, 0, 1, 2, 2, 1], [0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 1, 2, 0, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 0, 1, 1, 1, 2, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 113, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += ( i1 + in0 )\\nin0 = i1\\nb2 = False\\nb0 = divInt(abs(min(mod(int(1.0),min(mod(abs(int(3.0)),in0), abs(i2))), int(2.0))),min(mod(i0,min(in0, min(divInt(int(0.0),( int(1.0) * divInt(int(5.0),( int(5.0) - divInt(abs(int(0.0)),( i0 + int(3.0) )) )) )), max(( int(1.0) + divInt(( ( int(4.0) + in1 ) + max(( ( i0 * i1 ) + int(3.0) ), max(in0, min(int(5.0), ( ( divInt(divInt(min(( int(2.0) - min(max(int(3.0), ( ( mod(int(0.0),min(in0, min(in0, in0))) * mod(max(divInt(i2,mod(in2,in2)), res0),abs(min(int(3.0), abs(( int(8.0) + ( max(max(divInt(i2,min(int(0.0), max(int(9.0), abs(max(in0, int(1.0)))))), in0), mod(mod(i1,max(( int(0.0) - min(in2, i1) ), i0)),max(divInt(abs(max(min(int(6.0), i1), in2)),in2), abs(int(1.0))))) * min(min(int(1.0), int(3.0)), divInt(max(in2, res0),abs(max(( mod(( int(0.0) * i2 ),divInt(int(9.0),min(int(0.0), int(5.0)))) * max(int(5.0), int(5.0)) ), int(4.0))))) ) ))))) ) - min(i1, mod(abs(mod(in1,int(1.0))),int(3.0))) )), int(1.0)) ), int(4.0)),int(5.0)),abs(abs(int(6.0)))) - in2 ) * in0 )))) ),i1) ), ( min(( ( min(divInt(max(( abs(int(9.0)) - ( ( int(0.0) * int(2.0) ) * abs(in0) ) ), int(0.0)),mod(int(2.0),in2)), ( mod(max(( int(3.0) * mod(min(min(max(( ( i2 * min(mod(in1,divInt(in0,in2)), min(i2, min(max(abs(in2), ( ( divInt(mod(( ( max(in2, min(divInt(mod(mod(int(5.0),( int(0.0) + divInt(( i0 - ( abs(( int(2.0) - in2 )) - divInt(mod(int(8.0),min(( i2 * res0 ), ( i1 - abs(in2) ))),in1) ) ),i0) )),max(in2, abs(mod(max(res0, in1),int(5.0))))),max(abs(( abs(int(5.0)) + max(int(6.0), divInt(( divInt(in0,divInt(( in0 + ( i0 - int(3.0) ) ),int(0.0))) + max(min(in2, int(5.0)), min(min(in2, int(9.0)), mod(int(5.0),i2))) ),max(mod(min(( int(2.0) * i1 ), ( mod(int(6.0),i2) + max(int(1.0), in1) )),i0), res0))) )), max(divInt(abs(mod(res0,min(abs(divInt(abs(abs(min(divInt(max(int(5.0), ( int(1.0) + int(9.0) )),int(6.0)), ( int(4.0) + max(int(5.0), i0) )))),max(min(min(int(6.0), i2), in2), ( mod(max(mod(( max(( int(9.0) + int(6.0) ), in0) - in2 ),in1), int(5.0)),in0) * min(i0, int(3.0)) )))), i1))),max(mod(mod(abs(abs(int(8.0))),( int(4.0) - abs(i1) )),int(8.0)), in1)), res0))), in0)) - int(6.0) ) + max(i0, res0) ),min(min(max(int(1.0), mod(max(min(min(min(mod(( int(8.0) + ( in0 - i2 ) ),in1), i0), divInt(i1,max(divInt(abs(mod(( abs(min(in2, ( min(int(7.0), in1) - abs(int(5.0)) ))) * max(mod(in1,divInt(min(res0, int(3.0)),( i2 + ( in2 * i0 ) ))), ( i1 * int(4.0) )) ),in1)),res0), int(8.0)))), ( int(2.0) + min(max(( max(( ( in1 * mod(int(1.0),int(9.0)) ) + min(int(1.0), divInt(abs(i1),res0)) ), in0) + int(9.0) ), int(5.0)), divInt(i2,abs(int(4.0)))) )), max(mod(abs(i0),in1), max(abs(abs(int(0.0))), ( in2 * int(1.0) )))),int(3.0))), ( i0 * divInt(max(int(0.0), i0),res0) )), min(divInt(abs(int(2.0)),mod(int(1.0),( ( i0 - int(2.0) ) - int(0.0) ))), int(7.0)))),int(4.0)) + min(mod(int(3.0),in1), mod(( res0 + int(1.0) ),( int(8.0) * ( in1 * int(9.0) ) ))) ) + int(8.0) )), max(divInt(mod(int(5.0),i2),i0), i2)))) ) + min(in2, int(5.0)) ), ( max(abs(res0), divInt(int(8.0),in1)) + abs(i0) )), i1), int(0.0)),int(7.0)) ), int(8.0)),mod(mod(min(mod(int(4.0),int(5.0)), res0),( int(9.0) - mod(mod(max(in2, abs(int(2.0))),int(8.0)),divInt(i2,i0)) )),( in2 * ( i0 * in0 ) ))) + int(0.0) )) + int(0.0) ) * int(1.0) ), ( int(8.0) * ( abs(int(1.0)) * int(6.0) ) )) * ( int(5.0) * int(9.0) ) ))))), i0)) \\g i2\\nif b2:{:\\nb1 = ( b2 or int(6.0) \\l in0 )\\n:}\\nb0 = max(i1, ( int(4.0) - in2 )) \\ge int(0.0)\\nb0 = int(1.0) \\le divInt(in0,int(2.0))\\nb0 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 1, 8, 128, 128, 4, 9, 1, 9, 4, 5, 1, 1, 137, 2, 557, 155, 139, 78, 78]}, {"genotype": [[0], [1], [0], [], [0], [1], [8], [0], [0], [], [1], [0], [], [], [], [0], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i0 \\l int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [0], [0, 0], [1, 1, 1, 1, 1, 1, 1], [4, 3, 6, 3, 6, 3, 2], [4, 3, 5], [0, 0], [], [1, 1, 1], [0, 0, 0], [], [], [1], [4, 4, 5, 3, 2, 0, 6, 3], [], [2, 3, 2, 2, 0, 0, 1, 3, 3, 2, 0, 0, 0, 3, 1, 2, 1, 2, 3, 1, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0], [2, 2, 1, 1, 0], [0, 1, 1], [1, 0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( abs(mod(divInt(in1,in1),int(4.0))) + abs(max(( in2 - in0 ), i2)) ) \\le max(int(3.0), mod(int(6.0),( min(int(3.0), i0) - int(6.0) ))):{:\\nb0 = res0 \\ge in0\\n:}else:{:\\nb0 = int(3.0) != int(2.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 7, 7, 3, 2, 0, 3, 3, 0, 0, 1, 8, 0, 26, 6, 5, 3, 3]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 9, 5, 0, 2, 6, 0, 5, 9], [1], [2], [], [1], [0], [], [], [], [3, 4, 1, 0], [0, 0], [3, 1, 2, 1, 2, 3, 1, 2, 1, 3, 2, 0, 2, 1, 1, 0, 2, 1, 1, 2, 3, 1, 1], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2, 2], [0, 0, 0, 0], [1, 1, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = abs(int(3.0))\\nb2 = mod(int(5.0),( max(int(9.0), mod(int(5.0),abs(( in1 + ( int(0.0) + int(2.0) ) )))) + i1 )) \\g mod(int(6.0),int(0.0))\\ni0 = ( abs(int(5.0)) + int(9.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 10, 10, 1, 1, 0, 1, 1, 0, 0, 0, 4, 2, 23, 7, 4, 4, 3]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 2, 1, 0, 0, 1, 2, 2, 0], [0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 8, 8, 5, 0, 3, 2, 2, 8, 8, 9, 2, 5, 1, 3, 9, 6, 4, 0, 9, 2, 0, 5, 8, 8, 0, 5, 1, 9, 5, 5, 6, 8, 6, 5, 1, 6, 5, 5, 9, 8, 1, 5, 1, 1, 1], [1, 5, 5, 3, 4], [1, 2, 2], [], [1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [1], [0], [1, 0], [6, 4, 3, 1, 3, 6, 1, 1, 3, 6, 0, 4, 4, 2, 5, 2, 1, 3, 0, 1, 6, 2, 5, 0, 4, 5, 2, 0, 5, 0, 3, 2, 4, 6, 1, 0, 6, 4, 2, 0, 4, 4, 3, 5, 5, 5, 1, 2, 4, 4, 6, 0, 3, 3, 4, 2, 4, 5, 3, 2, 5, 2, 4], [0, 0, 1, 1], [1, 0, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 0, 2, 2, 3, 2, 2, 3, 0, 2, 2, 0, 2, 0, 1, 0, 1, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 0, 3, 0, 2, 0, 0, 1, 0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 2, 1, 3, 2, 0, 1, 3, 3, 1, 1, 3, 2, 0, 3, 2, 2, 3, 3, 0, 1, 2, 1, 1, 2, 2, 2, 2, 0, 1, 3, 3, 2, 3, 0, 0, 2, 1, 1, 1, 0, 0, 3, 2, 1, 3, 1, 2, 0, 1, 3, 0, 3, 3, 1, 3, 0, 0, 3, 2, 0, 1, 3, 0, 0, 0, 3, 1, 0, 1, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 0, 0, 2, 3, 2, 1, 1, 3, 2, 0, 2, 0, 0, 0, 1, 3, 1, 2, 1, 1, 1, 0, 0, 0, 1, 0, 2, 2, 1, 3, 2, 2, 2, 3, 1, 1, 2, 0, 3, 3, 0, 1, 2, 3, 0, 2, 1, 0, 3, 1, 1, 3, 0, 2, 1, 3, 3, 0, 0, 2, 3, 3, 3, 1, 0, 2, 1, 0, 1, 1, 1, 3, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0], [2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 2, 1, 1, 2, 1, 0, 0, 1, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 0, 2, 1, 1, 2, 2, 0, 0, 1, 0, 1, 2, 0, 2, 0, 1, 1, 2, 1, 2, 1, 1, 2], [1, 0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 2, 0, 1, 1, 0, 2, 1, 2, 2, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(2.0)\\nb1 = in1 \\g abs(min(mod(in0,i1), min(( divInt(min(in0, min(mod(int(2.0),res0), divInt(( abs(( ( max(i1, ( ( i1 - divInt(in0,int(8.0)) ) + res0 )) + int(8.0) ) * ( mod(( ( i0 - min(min(min(max(abs(( max(( max(in1, abs(in1)) - mod(i2,in2) ), int(5.0)) * i2 )), i1), ( ( int(0.0) - max(min(in0, min(i0, mod(int(3.0),max(( i1 - int(2.0) ), max(abs(int(2.0)), int(8.0)))))), abs(( res0 * max(divInt(( max(max(i2, int(8.0)), ( int(9.0) + int(2.0) )) - mod(( mod(( in2 * int(5.0) ),min(min(( abs(i0) + in1 ), ( int(1.0) + int(3.0) )), int(9.0))) * in2 ),i2) ),min(( int(6.0) + abs(int(4.0)) ), ( i0 - int(0.0) ))), min(in2, min(abs(int(9.0)), max(i0, in0)))) ))) ) - max(( i2 + int(2.0) ), abs(in1)) )), res0), i1) ) * abs(int(0.0)) ),i0) - int(5.0) ) )) * ( res0 * int(8.0) ) ),divInt(in1,min(i2, mod(i0,in1)))))),in1) - in0 ), mod(min(( int(8.0) - int(0.0) ), max(( in2 + mod(in2,in2) ), i1)),int(5.0)))))\\nif min(int(1.0), divInt(int(9.0),int(5.0))) != int(5.0):{:\\ni2 = in1\\n:}else:{:\\nb2 = in1 != res0\\ni0 -= int(6.0)\\nb2 = in0 \\ge ( divInt(int(8.0),max(mod(( divInt(abs(int(6.0)),int(5.0)) - divInt(in0,min(abs(in1), int(1.0))) ),( min(i2, ( int(6.0) * in1 )) * max(int(5.0), int(5.0)) )), max(in2, ( int(9.0) * abs(max(in0, i2)) )))) - divInt(abs(max(max(int(8.0), in2), ( int(1.0) - i2 ))),int(5.0)) )\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nif int(1.0) \\le int(1.0):{:\\nin1 -= abs(int(1.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 47, 47, 5, 3, 0, 6, 5, 1, 1, 2, 63, 4, 214, 54, 54, 35, 21]}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 2, 0], [0, 1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 6, 9, 0, 9, 6, 4, 0, 2, 1, 7, 0, 4, 5], [0, 0, 1], [0, 0], [], [0, 1, 1, 0, 1], [0, 0, 0], [2, 1], [0], [0], [2, 5, 6, 1, 1, 4, 1], [], [1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 3, 2, 2, 3, 2, 1, 1, 1, 2, 1, 2, 1, 0, 3, 0, 0, 3, 1, 0, 2, 3, 1, 3, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 1, 2, 2, 1, 0], [2, 2, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not int(2.0) \\l mod(int(1.0),mod(mod(int(6.0),( ( i2 * divInt(min(divInt(mod(max(mod(int(9.0),int(0.0)), int(9.0)),mod(int(6.0),( int(4.0) * in2 ))),abs(res0)), i1),abs(int(0.0))) ) - i1 )),divInt(max(int(2.0), min(in1, int(1.0))),i1))):{:\\nb0 = int(7.0) \\l int(0.0)\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nb0 = int(4.0) \\g int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 15, 15, 3, 2, 0, 5, 3, 2, 1, 1, 7, 0, 40, 12, 6, 3, 9]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 0, 1, 1, 0, 2, 2, 0, 0, 2, 1, 0], [1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 9, 0, 2, 8, 2, 7, 0, 6, 3, 5, 6, 0, 7, 8, 3, 5, 9, 4, 7, 6, 7, 3, 6, 8, 1, 9, 0, 1, 5, 1, 3, 2, 5, 8, 1], [5, 0, 2, 2, 1, 5, 4, 2, 0, 4, 0], [2, 2, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 3, 2, 3, 2, 3, 3, 3, 2, 0], [0], [1, 0], [4, 6, 4, 6, 2, 5, 6, 3, 5, 1, 3, 4, 6, 4, 3, 1, 5, 5, 1, 3, 2, 1, 6, 4, 0, 5, 1, 1, 0, 4, 2, 6, 6, 1, 5, 2, 0, 0, 6, 6, 1, 2], [1, 1, 0], [1, 0, 1, 2, 2, 3, 2, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1, 3, 1, 2, 3, 0, 2, 0, 0, 3, 0, 1, 3, 1, 3, 3, 2, 2, 1, 0, 2, 0, 1, 3, 2, 2, 1, 3, 2, 1, 0, 1, 0, 0, 0, 2, 1, 3, 3, 2, 2, 0, 3, 1, 0, 2, 3, 2, 1, 1, 2, 1, 1, 0, 0, 3, 0, 3, 0, 0, 0, 1, 0, 3, 1, 2, 0, 3, 1, 2, 1, 0, 1, 3, 1, 1, 3, 3, 2, 3, 3, 1, 0, 0, 1, 2, 0, 3, 3, 0, 2, 2, 3, 0, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 2, 0, 2, 1, 2, 1, 0, 2, 3, 3, 1, 2, 3, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 2, 0, 2, 0, 1, 1, 2, 1, 0, 1, 2, 1, 1, 2, 0, 2, 2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 2, 0, 2], [1, 1, 1, 0, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 0, 2], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nb2 = int(2.0) != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(2.0) \\l ( divInt(min(( int(0.0) - int(9.0) ), int(0.0)),res0) - int(2.0) )\\nb1 = b1\\nin1 -= res0\\nif max(int(8.0), ( int(2.0) + min(int(7.0), mod(abs(i2),divInt(in2,res0))) )) == min(in0, int(0.0)):{:\\nloopBreak% = 0\\nwhile abs(int(6.0)) == min(max(( mod(int(3.0),in2) * divInt(i1,int(5.0)) ), max(( ( int(6.0) * abs(divInt(int(0.0),in0)) ) * int(7.0) ), in1)), res0):{:\\nin1 -= in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( not ( not ( ( ( int(8.0) * max(min(divInt(mod(i1,max(int(3.0), in2)),( abs(mod(int(5.0),int(9.0))) - mod(int(4.0),int(7.0)) )), in2), i1) ) \\g max(in0, max(i2, i1)) or ( res0 != int(6.0) or in1 \\le abs(int(7.0)) ) ) and ( i0 - min(int(3.0), divInt(int(6.0),in2)) ) == int(8.0) ) or abs(int(1.0)) \\l int(9.0) ) or not abs(min(divInt(min(abs(int(0.0)), i1),i1), int(1.0))) \\le ( i0 * abs(min(in1, ( ( min(i2, int(5.0)) * int(1.0) ) * max(( res0 + mod(abs(divInt(res0,max(divInt(i1,divInt(int(3.0),mod(int(2.0),in2))), ( abs(min(int(5.0), mod(abs(int(8.0)),i2))) * i0 )))),i0) ), res0) ))) ) )\\nif int(1.0) \\l res0:{:\\nb1 = b0\\n:}\\n:}else:{:\\ni1 = i2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 38, 38, 11, 7, 5, 22, 11, 11, 1, 2, 42, 3, 141, 32, 32, 16, 18]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [2, 1, 0, 0, 2, 0], [1, 1], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 8, 3, 0, 5, 5, 9, 0, 2, 4, 6, 6, 5, 2, 0, 8, 0, 9, 3, 3, 1, 7, 6, 2, 9, 7, 2, 8], [4, 3, 1, 1, 2], [2, 2, 2, 1], [0], [0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 3], [], [], [6, 3, 3, 3, 4, 3, 3, 5, 5, 0, 1, 6, 1, 6, 2, 2, 2, 0, 5, 1, 6, 1, 6, 5, 3, 4, 4, 0], [0], [3, 1, 2, 2, 2, 0, 2, 3, 2, 3, 3, 1, 0, 2, 2, 3, 1, 3, 1, 2, 2, 1, 3, 0, 3, 2, 0, 1, 3, 1, 2, 0, 0, 3, 0, 2, 1, 3, 3, 1, 3, 2, 3, 3, 3, 0, 2, 2, 1, 3, 2, 0, 3, 1, 1, 2, 0, 2, 0, 1, 1, 1, 2, 1, 0, 1, 3, 2, 2, 3, 0, 0, 1, 0, 0, 1, 1, 1, 3, 1, 0, 0, 3, 3, 0, 0, 2, 1, 0, 3, 1, 0, 0, 2, 1, 1, 1, 3, 2, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [2, 1, 0, 1, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 2, 0, 0, 2, 2], [1, 2, 2, 1, 0, 1, 1, 0, 2, 2, 2, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = abs(int(5.0))\\nb2 = ( ( mod(in0,divInt(max(divInt(min(max(int(1.0), in0), ( ( abs(int(8.0)) - abs(int(3.0)) ) * ( ( int(0.0) * max(in0, max(( in1 - int(5.0) ), abs(int(5.0)))) ) + divInt(in0,in0) ) )),max(in2, ( int(9.0) - min(min(int(0.0), min(divInt(min(min(min(in2, divInt(( int(2.0) - abs(divInt(i0,min(int(4.0), int(6.0)))) ),divInt(i1,mod(res0,int(6.0))))), int(5.0)), int(2.0)),( int(0.0) + i1 )), int(8.0))), max(mod(divInt(max(res0, i2),int(0.0)),i2), i2)) ))), int(9.0)),int(3.0))) * int(3.0) ) * abs(int(1.0)) ) \\le i0\\nb2 = in2 \\ge min(min(i1, res0), mod(int(7.0),i1))\\nloopBreak% = 0\\nwhile abs(int(6.0)) \\g res0:{:\\nb1 = ( in2 \\g ( int(2.0) * int(9.0) ) and int(7.0) == abs(( ( ( in0 + int(2.0) ) + ( in1 - mod(in1,i0) ) ) - int(8.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 29, 29, 5, 4, 1, 7, 5, 2, 0, 0, 28, 1, 109, 28, 25, 15, 13]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1], [1, 0, 3, 4], [5], [0], [], [1], [0], [], [], [], [5, 4, 3, 3, 0], [], [3, 1, 0, 3, 1, 2, 0, 2, 3, 1, 1, 2, 2, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0], [0, 2, 1], [0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(1.0), in2) != min(int(0.0), divInt(in1,( min(int(3.0), int(4.0)) + ( ( in0 * in0 ) - i0 ) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 16, 4, 3, 3, 1]}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 0, 0], [0], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 3, 6, 5, 9, 2, 6, 6, 8, 5, 8, 3, 6, 3, 5, 5, 2, 8, 9, 9, 6, 7, 8, 7, 2, 5, 9, 9, 6, 2, 0, 0, 3, 3, 6, 3, 7, 2], [1, 0], [2], [0], [0, 0, 0, 0, 0, 1, 1], [0, 0], [2, 3, 2, 1, 2], [1], [0], [3, 2, 2, 3, 5, 1, 3, 3, 2, 6, 2, 3, 0, 3, 5, 6, 1, 2, 5, 4, 4, 2, 0, 6, 0, 6, 1, 2, 6, 3, 5, 5], [0, 1], [3, 1, 0, 3, 2, 0, 3, 2, 0, 0, 2, 1, 1, 3, 2, 1, 0, 2, 1, 1, 3, 3, 0, 2, 1, 2, 0, 3, 0, 2, 2, 2, 2, 2, 3, 3, 3, 0, 1, 1, 0, 3, 1, 1, 3, 1, 2, 2, 3, 0, 0, 1, 0, 3, 3, 3, 0, 0, 3, 1, 2, 0, 2, 2, 3, 3, 3, 2, 2, 1, 1, 3, 3, 1, 2, 3, 3, 2, 1, 1, 1, 3, 3, 3, 1, 0, 3, 1, 2, 3, 1, 1, 1, 2, 1, 0, 2, 1, 1, 3, 0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 0, 2, 1, 2, 0, 3, 0, 2, 1, 2, 2, 0, 3, 1, 2, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 2, 2, 1, 0, 1, 1, 2, 2, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 2, 1, 0, 2, 2, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( not False and not max(int(7.0), in0) \\g max(mod(i2,min(( i2 * in0 ), ( int(9.0) - int(3.0) ))), max(mod(int(6.0),in2), divInt(int(5.0),int(9.0)))) ):{:\\nb2 = abs(abs(i1)) \\l mod(int(2.0),mod(in0,max(in0, ( ( ( mod(( min(max(max(i2, int(6.0)), int(6.0)), res0) * abs(int(8.0)) ),int(5.0)) - abs(int(8.0)) ) + ( ( min(i2, in0) * int(3.0) ) - i0 ) ) - max(max(min(in0, in2), max(int(6.0), mod(res0,mod(( abs(min(min(mod(mod(int(3.0),int(5.0)),max(min(int(5.0), mod(max(max(divInt(int(2.0),int(8.0)), int(9.0)), max(max(max(int(9.0), i1), max(int(6.0), divInt(max(int(7.0), int(8.0)),int(7.0)))), divInt(int(2.0),i2))),divInt(int(5.0),int(9.0)))), min(in2, in1))), int(9.0)), in1)) * int(6.0) ),i2)))), ( divInt(i0,( res0 + ( int(2.0) * mod(i0,max(res0, mod(int(0.0),( divInt(i1,max(int(0.0), ( int(3.0) - abs(( divInt(i2,min(int(3.0), int(6.0))) + int(3.0) )) ))) * res0 )))) ) )) * int(7.0) )) ))))\\nin0 = int(2.0)\\n:}\\nin2 -= in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 39, 39, 2, 1, 1, 7, 2, 5, 1, 1, 32, 2, 138, 35, 34, 16, 20]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 0, 1], [], [], [], [1], [], [0], [], [1], [0], [], [4, 5, 4, 4], [1, 1], [0, 0], [], [], [0, 2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += in2\\nb1 = True\\nin1 *= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 4, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [2, 0, 2, 1, 1, 0], [0, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 2, 7, 8, 3, 0, 0, 3, 0, 1, 7, 1, 8, 6, 4, 5, 8, 7, 3, 2, 3, 9, 5], [0, 1, 5, 3, 0], [0, 2, 0], [0], [1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [3, 1], [0], [0], [1, 5, 6, 2, 3, 4, 4, 4, 5, 1, 5, 3, 6, 4, 0, 3, 4, 0, 1, 0, 0, 4, 1, 2], [0], [1, 1, 2, 1, 3, 3, 0, 0, 2, 3, 0, 0, 0, 3, 0, 1, 2, 2, 1, 2, 3, 0, 1, 1, 3, 0, 3, 3, 3, 2, 3, 1, 1, 2, 3, 3, 1, 1, 1, 0, 2, 1, 0, 2, 3, 2, 3, 2, 0, 3, 2, 1, 2, 3, 1, 0, 3, 0, 2, 1, 0, 0, 3, 1, 3, 3, 0, 0, 0, 3, 0, 1, 1, 0, 2, 1, 3, 0, 2, 0, 3, 0, 2, 2, 3, 2, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 2, 2, 1, 2, 0, 0, 2, 0, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 2, 2], [2, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(3.0) \\l int(5.0):{:\\nb0 = ( True and ( int(2.0) * min(max(i1, in2), ( min(res0, i2) - in0 )) ) \\g min(in1, int(7.0)) )\\nloopBreak% = 0\\nwhile ( ( int(8.0) - divInt(abs(in1),int(3.0)) ) + int(0.0) ) != abs(in1):{:\\nin2 = max(abs(min(divInt(min(int(0.0), int(3.0)),mod(abs(min(int(0.0), int(1.0))),int(7.0))), i1)), ( int(1.0) - in2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = ( min(mod(max(( in0 - max(divInt(int(8.0),mod(max(int(6.0), res0),min(in1, divInt(int(4.0),i0)))), in0) ), max(int(5.0), abs(min(in1, i0)))),i1), max(i0, int(8.0))) + int(7.0) ) \\ge i0\\nb0 = divInt(int(3.0),max(in1, mod(i1,abs(i2)))) \\l mod(divInt(abs(divInt(int(2.0),int(3.0))),int(9.0)),int(5.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 24, 24, 5, 3, 1, 7, 5, 2, 1, 1, 24, 1, 90, 19, 24, 7, 12]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [0, 1, 0, 0, 1], [9, 6, 5, 1, 5], [], [], [], [], [], [], [], [], [1, 5], [1, 1], [1, 1], [], [], [1, 2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= int(96.0)\\nin2 *= int(515.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 1, 0], [], [1, 0, 1, 0], [1, 1], [2, 0], [5], [0, 1], [], [1, 0], [0], [1], [0], [], [1, 5, 0, 4, 2], [1, 0], [3, 0, 1, 1, 0, 0], [], [0], [1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= min(in2, int(2.0))\\nb0 = int(0.0) != i0\\nin1 = i2\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 2, 2, 1, 2, 0, 2, 1, 1, 1, 0, 5, 2, 6, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 0, 0], [0], [1, 0, 1, 0], [0, 1], [9, 3], [1], [0, 1, 1], [], [0, 0, 1], [0], [1, 0], [1], [0], [4, 1, 0, 5, 6, 2, 1], [1, 1], [0, 2, 0, 0, 2, 0, 0, 1], [0, 0], [], [0, 0, 2, 2], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nin1 += i1\\nb0 = b1\\ni0 += ( in2 * res0 )\\n:}\\nb1 = ( i2 * i1 ) \\g int(93.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 2, 2, 1, 3, 0, 3, 1, 2, 1, 1, 7, 2, 8, 2, 0, 4, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [4, 1], [4], [0], [], [0, 1], [0], [2], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not int(4.0) \\le int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 0, 3], [1], [2, 0, 0], [1], [], [1], [0]], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= divInt(i0,in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [9, 5, 1], [], [], [], [], [], [], [], [], [1], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += int(951.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 2, 1, 2, 1, 1, 0], [1, 1], [1, 0, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 9, 0, 9, 1, 9, 0, 1, 5, 8, 6, 5, 1, 9, 8, 0, 2, 2, 7, 6, 9, 9, 4, 2, 9, 6, 5, 4, 5, 9, 7, 8, 5, 6, 4, 7, 3, 9, 7, 3, 5, 3, 8, 0, 8, 2, 5, 4, 1, 6, 3, 9, 3, 8, 0, 8, 8, 3, 4, 8, 0, 1, 6, 0, 1, 0, 5, 8, 1, 6, 5, 1, 4, 0, 7, 0, 8, 8, 0, 2, 3, 2, 2, 2, 1, 7, 0, 5, 7, 3, 5, 3, 6, 8, 2, 5, 1, 2, 6, 7, 5, 4, 5, 0, 5, 0, 2, 3, 1, 4], [3, 3, 5, 2, 4], [2, 0, 1], [], [0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2], [], [], [4, 5, 6, 0, 4, 1, 2, 3, 1, 0, 5, 3, 3, 5, 4, 1, 1, 6, 4, 2, 4, 3, 1, 3, 5, 2, 4, 4, 3, 5, 5, 0, 2, 0, 5, 2, 6, 5, 4, 3, 4, 4, 4, 2, 4, 2, 3, 5, 0, 0, 4, 0, 3, 0, 6, 3, 6, 6, 0, 5, 6, 5, 2, 2, 3, 5, 5, 1, 0, 0, 1, 3, 3, 6, 4, 1, 1, 0, 6, 6, 4, 3, 5, 6, 2, 5, 4, 6, 0, 5, 4, 1, 0, 5, 2, 6, 4, 6, 4, 3, 4, 2, 1, 5, 4], [1, 0, 1, 0, 1], [2, 1, 1, 1, 3, 2, 1, 0, 2, 0, 0, 3, 3, 2, 0, 0, 3, 3, 3, 2, 2, 2, 1, 1, 3, 0, 2, 3, 0, 2, 1, 3, 2, 0, 0, 1, 0, 2, 3, 1, 0, 3, 2, 0, 0, 3, 1, 3, 3, 3, 1, 1, 1, 2, 2, 0, 0, 2, 0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 2, 0, 0, 2, 2, 1, 2, 1, 1, 2, 0, 3, 0, 2, 2, 3, 3, 1, 2, 1, 3, 3, 1, 2, 2, 3, 1, 3, 3, 1, 1, 3, 2, 0, 2, 2, 2, 3, 3, 1, 2, 2, 2, 3, 3, 2, 0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 1, 0, 2, 2, 1, 2, 2, 1, 1, 1, 2, 3, 2, 1, 2, 2, 3, 1, 1, 0, 2, 0, 2, 1, 0, 3, 3, 1, 2, 0, 2, 1, 2, 2, 3, 1, 1, 0, 3, 3, 0, 2, 3, 1, 1, 3, 1, 2, 3, 2, 2, 1, 2, 1, 2, 0, 2, 1, 2, 3, 2, 3, 1, 1, 3, 2, 0, 3, 3, 3, 2, 0, 1, 0, 3, 0, 1, 0, 1, 1, 2, 1, 2, 3, 2, 2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 0, 1, 0, 3, 3, 1, 3, 3, 0, 1, 3, 3, 3, 0, 1, 2, 0, 3, 3, 1, 1, 0, 0, 1, 1, 3, 3, 1, 2, 2, 1, 3, 3, 2, 1, 1, 0, 2, 3, 0, 3, 0, 0, 0, 1, 1, 2, 2, 3, 0, 2, 0, 1, 0, 0, 1, 0, 0, 3, 0, 1, 2, 2, 2, 0, 0, 1, 3, 3, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 0, 3, 3, 1, 0, 3, 2, 3, 2, 1, 0, 0, 2, 2, 3, 1, 1, 2, 3, 1, 1, 2, 3, 1, 1, 0, 3, 3, 2, 2, 1, 3, 2, 0, 0, 1, 2, 1, 0, 1, 0, 0, 3, 1, 2, 2, 3, 3, 0, 2, 3, 3, 2, 3, 2, 0, 3, 3, 1, 1, 1, 3, 2, 1, 0, 0, 2, 2, 0, 2, 3, 0, 2, 2, 3, 3, 3, 1, 0, 3, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1, 3, 0, 1, 2, 0, 3, 2, 0, 0, 0, 0, 3, 3, 2, 1, 0, 3, 2, 2, 3, 2, 1, 2, 0, 1, 1, 1, 1, 2, 3, 3, 2, 1, 1, 0, 1, 0, 2, 0, 0, 3, 0, 3, 0, 0, 3, 1, 0, 3, 3, 3, 0, 0, 2, 0, 0, 3, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [2, 0, 2, 2, 1, 2, 0, 0, 1, 0, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 2, 0, 2, 1, 0, 1, 1, 2, 2, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 2, 2, 1, 1, 1, 0, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 2, 0, 1, 0, 1, 2, 1, 1, 0, 1, 2, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 2, 2], [1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 0, 2, 2, 0, 2, 1, 1, 0, 0, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 0, 2, 1, 0, 2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 0, 2, 2, 1, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 118, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= mod(int(1.0),int(5.0))\\nb2 = not int(9.0) \\ge abs(( int(0.0) - in2 ))\\nres0 = divInt(i0,in1)\\nb0 = min(abs(( i1 * i2 )), abs(max(abs(divInt(( ( int(9.0) + int(1.0) ) * min(in0, ( min(i1, ( int(9.0) - max(( i0 + in2 ), int(0.0)) )) - in0 )) ),divInt(min(int(1.0), in0),abs(( in2 + in1 ))))), abs(int(5.0))))) \\ge abs(abs(max(int(8.0), int(6.0))))\\nloopBreak% = 0\\nwhile int(5.0) != ( divInt(i1,i1) * divInt(res0,( abs(abs(abs(abs(abs(abs(abs(mod(divInt(int(1.0),mod(in1,i2)),mod(( int(9.0) + divInt(int(8.0),int(0.0)) ),( in1 - min(in0, ( ( min(abs(int(2.0)), divInt(int(2.0),min(abs(int(7.0)), ( ( min(int(6.0), abs(max(int(9.0), int(9.0)))) * min(( i1 * ( ( divInt(max(max(int(4.0), ( divInt(( abs(abs(mod(in0,in2))) + ( mod(int(2.0),min(max(i2, min(in1, int(9.0))), in1)) * divInt(mod(int(6.0),mod(divInt(int(5.0),int(4.0)),int(5.0))),divInt(min(( int(9.0) * ( ( max(int(7.0), int(8.0)) + in0 ) * divInt(in2,divInt(int(5.0),in2)) ) ), min(max(int(6.0), divInt(i0,( int(4.0) - ( divInt(abs(int(7.0)),int(3.0)) - i2 ) ))), min(min(i0, ( max(int(9.0), int(7.0)) + abs(int(3.0)) )), ( abs(( divInt(int(5.0),divInt(int(3.0),mod(in2,( int(8.0) + ( max(mod(max(int(0.0), int(8.0)),max(( i2 * min(abs(min(mod(res0,int(2.0)), in2)), min(in1, int(5.0))) ), in0)), int(4.0)) - int(1.0) ) )))) - mod(int(6.0),mod(max(( divInt(divInt(int(3.0),in1),mod(mod(int(9.0),( in1 - divInt(in1,int(3.0)) )),i2)) * max(min(int(8.0), min(min(in1, int(0.0)), min(min(abs(i2), int(8.0)), ( in0 - abs(min(int(8.0), int(3.0))) )))), in2) ), i0),int(4.0))) )) - int(8.0) )))),abs(abs(int(0.0))))) ) ),( ( int(1.0) - abs(min(mod(int(6.0),int(0.0)), i0)) ) * divInt(abs(in1),min(i0, in0)) )) * i0 )), int(1.0)),int(0.0)) * mod(divInt(max(res0, mod(in0,int(5.0))),res0),res0) ) - int(8.0) ) ), i0) ) - in2 )))) - min(res0, int(1.0)) ) + divInt(( ( in2 + i2 ) + int(6.0) ),max(abs(( int(5.0) * divInt(mod(( int(1.0) - ( divInt(mod(int(4.0),i2),max(max(int(0.0), in0), min(( max(( int(7.0) + in2 ), in2) * ( mod(abs(int(0.0)),int(8.0)) - ( abs(int(8.0)) - int(0.0) ) ) ), ( min(int(2.0), int(3.0)) - i1 )))) + max(abs(divInt(( int(2.0) * max(mod(i0,i0), int(2.0)) ),( int(2.0) * i1 ))), int(1.0)) ) ),in0),in0) )), abs(int(7.0)))) )) )))))))))) + mod(divInt(max(abs(res0), ( min(max(divInt(min(mod(in1,min(abs(int(0.0)), int(5.0))), int(7.0)),min(( int(3.0) - i1 ), i1)), ( mod(i0,( min(res0, mod(( max(abs(min(int(5.0), res0)), min(int(3.0), int(6.0))) - in1 ),int(8.0))) - int(2.0) )) + in0 )), mod(int(5.0),int(1.0))) + int(2.0) )),max(in2, int(6.0))),divInt(res0,abs(( i2 * in2 )))) )) ):{:\\nin1 *= res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i0 == min(max(mod(int(7.0),in2), max(( divInt(max(mod(int(5.0),divInt(in1,int(4.0))), int(5.0)),int(0.0)) - int(5.0) ), mod(min(min(mod(int(0.0),int(2.0)), i1), int(3.0)),i0))), mod(in2,i2)):{:\\nres0 = max(in1, min(res0, in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = max(int(1.0), in0) \\le max(min(abs(in1), i2), ( i1 * in2 ))\\nin1 *= abs(int(4.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 2, 8, 111, 111, 5, 3, 0, 6, 5, 1, 0, 0, 105, 5, 448, 123, 114, 61, 65]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1], [8], [], [], [], [], [], [], [], [], [6, 4, 5, 2], [1, 1], [3, 1, 0, 0], [], [1], [2, 1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= max(int(8.0), in1)\\nin2 -= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 4, 0, 1, 2, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 1, 2, 0, 0, 0, 2, 1, 0], [0, 1, 1], [0, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [3, 2, 2, 5, 5, 2, 7, 9, 5, 8], [4, 2, 5, 0, 0], [0, 1, 0, 1, 0, 1], [1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [3, 0, 3, 1, 1, 0], [1, 0], [0], [1, 3, 3, 1, 6, 3, 2, 2, 5, 6, 5, 1], [1, 1], [0, 1, 0, 3, 1, 1, 1, 3, 1, 3, 3, 3, 3, 3, 1, 1, 0, 2, 2, 2, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 2, 2, 2, 2], [2, 1, 2, 0], [0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( b0 or i1 \\le int(3.0) ):{:\\nb1 = in0 == max(int(2.0), int(2.0))\\n:}\\nloopBreak% = 0\\nwhile int(55.0) != min(int(2.0), min(abs(abs(abs(abs(int(7.0))))), int(9.0))):{:\\nb0 = ( False and True )\\nin0 *= i1\\nb1 = ( divInt(( res0 - in0 ),i2) * mod(int(5.0),int(8.0)) ) \\l i2\\nloopBreak% = 0\\nwhile in2 \\l res0:{:\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 10, 10, 5, 6, 2, 11, 5, 6, 2, 1, 12, 2, 30, 4, 7, 4, 2]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 1, 2, 0], [0, 0, 1, 1], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1], [7, 0, 1, 0, 2, 3, 2], [1, 3, 1], [2, 1, 2, 2, 1], [1], [0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0], [0, 0, 2, 1, 3, 0], [1], [1, 1], [4, 3, 4, 0, 2], [1], [1, 3, 1, 3, 1, 1, 1, 1, 0, 2, 1, 3, 3, 0, 2, 0, 0], [1, 1], [2, 1, 1, 2], [1], [1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nin1 -= int(7.0)\\n:}else:{:\\nif b1:{:\\nloopBreak% = 0\\nwhile not False:{:\\nb2 = abs(int(0.0)) \\g max(int(1.0), int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( int(2.0) \\ge int(3.0) or in0 \\g mod(int(2.0),max(abs(in1), divInt(i0,i2))) ):{:\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 7, 7, 3, 5, 1, 9, 3, 6, 1, 2, 5, 1, 17, 2, 4, 1, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1], [2], [2], [0, 2], [], [0, 1], [0], [1], [1], [], [6], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\nb2 = int(2.0) == res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 1, 1, 0], [1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1], [7, 3, 6, 0, 2, 0], [5], [1], [], [0, 1, 0, 0], [0], [1, 2, 1], [1, 1], [], [0, 5, 6, 1, 4, 3, 5, 5, 5], [0, 0], [0, 3, 3, 3, 3, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 2, 1, 0, 0, 3, 1, 2, 1, 1], [0, 0, 0, 1, 1, 0], [2, 0, 1, 1, 2], [2, 2, 1, 1], [1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile i0 != abs(min(max(max(( in2 * int(7.0) ), ( res0 * i1 )), int(3.0)), ( mod(in1,divInt(int(6.0),in0)) - in2 ))):{:\\nin2 = abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = ( int(2.0) - int(0.0) )\\nb1 = not False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 6, 6, 1, 1, 0, 4, 1, 3, 2, 0, 9, 2, 24, 6, 5, 4, 2]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1], [4, 2, 6, 9], [1, 1], [1, 2], [0, 1], [0, 1, 0, 1, 0], [0, 0], [3, 3, 0], [], [], [3, 5, 5, 3], [], [0, 2, 1, 2, 1, 3, 1, 0, 0, 2, 0, 1], [1, 1, 1], [1], [], [1, 1, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( in0 \\g mod(int(4.0),mod(int(2.0),max(int(6.0), in2))) and ( in2 \\g divInt(in0,int(9.0)) or b2 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 2, 2, 2, 5, 2, 3, 0, 0, 4, 0, 12, 3, 1, 0, 3]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1], [4, 2, 3, 4, 1, 7], [2, 4], [2], [0], [0, 1, 0, 1], [0, 0], [3, 2], [], [], [3, 2, 0, 4, 5], [], [2, 0, 1, 3, 2, 3, 1, 0, 0, 2, 1, 0, 3, 1, 1, 2, 1, 0], [0, 0, 1, 0], [0, 0, 1], [1, 2, 1], [1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( in0 - int(4.0) ) == min(( min(int(2.0), i2) * i0 ), mod(int(3.0),in1)) and not max(int(4.0), int(1.0)) \\le ( int(7.0) - in2 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 2, 1, 1, 4, 2, 2, 0, 0, 5, 0, 18, 4, 3, 3, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1], [8], [], [0, 0], [], [0], [], [0], [], [], [5], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= int(8.0)\\nb0 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 0, 1], [1], [1, 0, 0], [1], [4], [], [1, 2, 1, 2, 2], [], [0, 0, 0, 0], [], [0, 2, 0, 0], [], [], [6], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(4.0)\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = not b1\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 992, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 5, 0, 4, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [6, 7], [1], [0], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(6.0) \\g int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [1, 2, 2, 0, 0, 0], [1, 0], [0, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 9, 4, 2, 6, 9, 1, 0, 2, 9, 7], [4, 3, 3, 1], [1, 2, 0], [], [1, 1, 1, 0, 1], [0, 0, 0, 0], [1], [1], [1], [0, 2, 5, 0, 4, 3, 5, 0, 5, 3, 5, 4, 4, 5], [1], [2, 0, 1, 0, 3, 3, 3, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 3, 1, 0, 0, 2, 3, 0, 3, 3, 2, 3, 3, 2, 3, 1, 3, 3, 0, 1, 2, 0, 1, 2, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 2, 2, 0, 2, 1, 2, 1], [1, 1, 0, 2, 1, 0, 0, 0], [1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(i0,int(5.0)) \\le i2\\nloopBreak% = 0\\nwhile min(max(abs(in2), ( int(5.0) - int(9.0) )), i0) \\ge int(42.0):{:\\nif in1 \\ge int(6.0):{:\\nb2 = False\\n:}else:{:\\nb0 = in0 \\g ( min(int(9.0), in2) - i0 )\\n:}\\nin2 += ( min(in0, abs(abs(( min(abs(( max(int(1.0), abs(max(in2, int(0.0)))) * ( in1 - int(2.0) ) )), ( in1 + in2 )) + int(9.0) )))) + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 12, 12, 4, 3, 0, 5, 4, 1, 1, 1, 14, 1, 44, 8, 12, 8, 1]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 1, 1], [0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 7, 2, 7, 3, 8, 2, 1, 8, 5, 1, 7, 7], [5], [0, 1, 0, 2, 2, 1], [], [0, 0, 0, 0, 0, 0, 1], [0], [0, 1, 0, 0, 0, 2], [1], [1, 1, 1], [1, 0, 4, 2, 4, 3, 5, 4, 6, 1, 0, 1, 2, 3, 6, 1, 5], [0, 1, 0, 0, 1, 1], [1, 1, 3, 0, 2, 2, 2, 3, 3, 1, 3, 1, 3, 0, 2, 2, 1, 1, 0, 1, 1, 3, 3, 2, 0, 1, 0, 2, 3, 3, 2, 0, 1, 2, 0, 1, 0, 1, 3, 1, 0, 2, 3, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 1, 1, 0, 0, 1, 0, 2, 2, 2, 0], [0, 2, 0, 1, 2, 2, 0, 1], [1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nloopBreak% = 0\\nwhile False:{:\\ni1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = b0\\n:}\\nif b2:{:\\ni0 += int(3.0)\\n:}else:{:\\nin1 = abs(i2)\\nif b2:{:\\nin1 = mod(( ( max(max(int(7.0), min(int(2.0), min(in0, ( divInt(int(7.0),int(3.0)) * in2 )))), int(8.0)) + int(2.0) ) - max(min(( in1 * int(1.0) ), res0), mod(abs(abs(( i1 * int(8.0) ))),mod(i0,int(5.0)))) ),i1)\\n:}else:{:\\nb1 = not int(1.0) != abs(int(7.0))\\n:}\\ni2 += in0\\n:}\\nres0 -= mod(min(i1, int(7.0)),in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 14, 14, 1, 6, 0, 7, 1, 6, 1, 3, 17, 6, 46, 10, 11, 8, 5]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1], [2, 8, 6, 5, 6, 3, 6], [4, 4], [2], [0], [0, 1, 0, 1], [0, 0], [3, 2], [], [], [6, 2, 6], [], [1, 3, 2, 2, 1, 0, 0, 2, 1, 3, 3, 1, 1, 0, 1, 1], [1, 0, 1], [0, 0, 1], [1], [0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( int(2.0) \\le min(divInt(( int(8.0) - res0 ),i2), divInt(int(6.0),min(max(int(5.0), int(6.0)), res0))) and not int(3.0) \\le int(6.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 2, 1, 1, 4, 2, 2, 0, 0, 3, 0, 16, 3, 3, 1, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 2, 1, 0, 0], [1, 0], [1, 0, 0], [1, 1, 1, 1, 1], [4, 8, 7, 9, 2], [4, 5, 3], [0, 2, 1], [], [1, 0, 0, 1, 0, 1], [0, 0, 0], [0, 2, 2], [], [0], [0, 5, 1, 1, 3, 4, 1, 6, 4], [0], [1, 3, 0, 2, 3, 3, 1, 3, 1, 0, 0, 3, 0, 3, 0, 0, 0, 1, 0, 1], [1], [1, 0, 2, 1, 1, 1], [], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(4.0) \\le max(i0, divInt(min(abs(int(8.0)), max(int(7.0), in2)),i1)):{:\\nif b0:{:\\ni1 = max(in0, max(in1, i1))\\n:}\\nb2 = not res0 != int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not in1 \\ge int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 5, 5, 3, 3, 0, 6, 3, 3, 0, 1, 9, 1, 20, 1, 6, 0, 1]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 0, 1], [4, 2, 6], [], [], [], [], [], [], [], [], [3, 5, 2, 4, 3, 4, 5], [0, 1], [2, 0, 3, 2, 0, 3, 3, 2, 0, 1, 2, 0, 0, 1], [0, 1, 0, 0], [2, 1, 2], [0, 0, 0, 1], [1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( in2 + abs(mod(i2,max(abs(( in1 + int(4.0) )), ( in0 + in1 )))) )\\nin2 -= int(26.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 14, 4, 3, 4, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [7], [], [], [], [], [], [], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 1], [2, 0, 2, 2, 2, 2, 1, 1, 0], [0, 0, 1, 1, 0], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 0, 8, 6, 8, 3, 0, 4, 7, 3, 5, 1, 4, 5, 1, 5], [4, 1, 5, 0, 0], [0, 0, 0, 2, 1], [], [0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [1, 2, 0, 0], [1], [0, 1, 0], [4, 4, 4, 1, 3, 5, 5, 5, 6, 6, 5, 6, 6, 4, 5, 3, 3, 0, 0, 1, 1, 2], [0], [2, 2, 1, 3, 3, 0, 3, 2, 0, 0, 0, 1, 0, 2, 3, 0, 1, 2, 1, 1, 2, 1, 0, 2, 1, 0, 0, 3, 1, 2, 2, 3, 1, 0, 2, 3, 3, 0, 2, 2, 0, 3, 3, 1, 2, 0, 3, 3, 1, 3, 1, 0, 3, 3, 0, 1, 2, 1, 0, 0, 2, 1, 2, 0, 0, 2, 0, 3, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 0, 2, 2, 2, 1, 2, 0, 1, 2, 1, 1, 0, 0, 0], [0, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2], [1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nin1 = ( ( int(8.0) + min(abs(in1), min(mod(in1,i1), in0)) ) - int(1.0) )\\n:}\\nif in2 \\le ( abs(in2) * int(0.0) ):{:\\nloopBreak% = 0\\nwhile not b0:{:\\nloopBreak% = 0\\nwhile mod(int(8.0),int(6.0)) \\g ( int(8.0) - in2 ):{:\\nif ( int(3.0) * res0 ) != res0:{:\\nb0 = abs(int(0.0)) \\l ( ( abs(int(4.0)) - in2 ) - ( max(abs(res0), ( divInt(res0,min(max(int(7.0), ( in1 * abs(max(int(3.0), max(int(5.0), in2))) )), min(min(in0, int(1.0)), divInt(int(4.0),in0)))) - i0 )) - divInt(int(5.0),( i0 * i1 )) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = b2\\nb1 = mod(i1,min(i2, int(1.0))) \\l int(5.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 17, 17, 5, 5, 0, 9, 5, 4, 1, 3, 22, 1, 71, 17, 16, 11, 6]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 1, 2, 0, 2, 1, 1, 2, 1, 0, 0], [0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 9, 9, 4, 8, 0, 6, 3, 1, 8, 2, 8, 7, 9, 7, 5, 8, 4, 2, 3, 9, 9, 1, 2, 4, 2, 6, 0, 1, 8, 1, 2, 7, 0, 7, 4, 5, 4, 4, 9, 1, 5, 8, 0, 6, 2, 1, 7, 4, 8, 3, 0, 2, 1, 0, 3, 3, 5, 7, 3, 3, 4, 5, 5, 2, 4, 2, 6, 5, 0, 4, 8, 2, 3, 0, 2, 5, 8, 5, 7, 3, 1, 2, 0, 8, 7, 9, 2, 6, 3, 2, 0, 9, 0, 6, 9, 4, 3, 9, 8, 2, 9, 9, 7, 4, 4, 8, 9, 7, 7, 8, 8, 9, 3, 6, 2, 7, 2, 5, 7, 2, 7, 3, 7, 2, 1, 3, 8, 6, 4, 0, 6], [2, 1, 5, 3, 3, 5, 1, 0, 0, 1, 1], [2, 1, 1, 1], [1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 3, 2, 1, 2, 1, 2, 3], [1, 1, 1], [0, 1, 1], [3, 4, 2, 3, 5, 0, 5, 3, 1, 0, 4, 5, 4, 4, 4, 0, 3, 4, 2, 3, 1, 0, 6, 2, 1, 6, 2, 2, 1, 5, 2, 1, 0, 6, 2, 3, 2, 2, 4, 3, 3, 1, 5, 5, 3, 5, 3, 5, 2, 3, 4, 4, 4, 4, 5, 5, 2, 4, 5, 6, 1, 3, 4, 0, 3, 3, 0, 6, 0, 1, 2, 5, 1, 0, 0, 3, 4, 0, 3, 2, 3, 3, 5, 3, 0, 0, 0, 4, 4, 4, 3, 2, 0, 3, 4, 4, 4, 5, 1, 3, 2, 1, 6, 4, 6, 2, 4, 3, 6, 0, 2, 6, 2, 2, 1, 0, 1, 6, 3, 6, 5, 3, 3, 2, 2, 6, 4, 6, 5, 1], [1, 1, 0], [2, 0, 0, 2, 1, 0, 2, 0, 1, 2, 3, 2, 1, 2, 1, 1, 1, 2, 3, 1, 3, 0, 0, 2, 2, 2, 2, 1, 1, 3, 1, 2, 0, 2, 2, 2, 1, 3, 0, 0, 3, 2, 3, 1, 3, 2, 1, 2, 1, 0, 0, 3, 3, 2, 1, 0, 1, 2, 3, 0, 3, 0, 3, 1, 1, 1, 0, 3, 2, 2, 2, 0, 3, 2, 2, 0, 1, 3, 2, 2, 2, 3, 1, 0, 3, 3, 0, 3, 2, 3, 2, 2, 2, 2, 1, 1, 0, 0, 0, 3, 3, 1, 1, 1, 0, 1, 3, 3, 0, 2, 0, 3, 1, 0, 3, 0, 0, 0, 0, 2, 0, 0, 2, 1, 3, 1, 2, 2, 0, 3, 3, 1, 0, 3, 2, 0, 1, 0, 2, 2, 2, 2, 2, 0, 0, 3, 0, 2, 0, 0, 0, 3, 0, 2, 0, 3, 1, 0, 2, 2, 2, 2, 0, 1, 2, 3, 1, 0, 1, 0, 1, 1, 2, 2, 0, 2, 0, 3, 0, 1, 0, 0, 3, 1, 2, 0, 3, 0, 1, 2, 3, 3, 1, 1, 3, 3, 2, 3, 3, 2, 1, 2, 1, 0, 1, 2, 3, 1, 2, 1, 2, 2, 2, 2, 0, 0, 3, 2, 2, 2, 2, 2, 3, 3, 0, 0, 3, 0, 3, 2, 2, 3, 3, 0, 2, 3, 1, 2, 3, 1, 3, 2, 3, 0, 1, 0, 1, 3, 2, 2, 2, 0, 3, 3, 2, 2, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 2, 0, 1, 3, 1, 3, 1, 3, 3, 3, 1, 1, 2, 1, 2, 1, 2, 1, 3, 3, 1, 0, 2, 1, 2, 0, 1, 3, 1, 0, 1, 2, 1, 1, 2, 3, 1, 0, 2, 3, 2, 2, 0, 0, 2, 2, 3, 2, 2, 0, 2, 1, 2, 3, 1, 0, 1, 3, 1, 3, 2, 3, 1, 1, 1, 3, 2, 1, 1, 3, 0, 1, 2, 1, 3, 1, 1, 1, 2, 3, 2, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 0, 2, 3, 2, 3, 3, 0, 1, 0, 3, 3, 2, 3, 0, 2, 2, 1, 1, 3, 2, 3, 3, 3, 0, 0, 3, 0, 2, 3, 2, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0, 1, 1, 2, 0, 1, 0, 1, 3, 3, 3, 0, 1, 3, 0, 2, 0, 3, 1, 1, 3, 2, 3, 3, 2, 2, 1, 1, 0, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 3, 0, 2, 3, 3, 0, 1, 1, 3, 1, 2, 2, 1, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 2, 3, 0, 0, 3, 2, 2, 3, 0, 1, 3, 0, 0, 2, 0, 2, 2, 1, 0, 1, 1, 0, 0, 0, 3, 0, 3, 3, 0, 3, 1, 3, 1, 3, 3, 0, 2, 3, 0, 3, 0, 1, 2, 1, 3, 1, 0, 1, 3, 3, 1, 1, 3, 3, 3, 1, 2, 1, 1, 3, 3, 1, 1, 3, 1, 0, 0, 0, 0, 2, 3, 0, 3, 2, 2, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 2, 2, 0, 0, 2, 1, 2, 2, 0, 1, 2, 0, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 2, 1, 0, 2, 0, 2, 0, 1, 0, 0, 2, 0, 2, 2, 1, 0, 0, 2, 2, 0, 1, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 0, 0, 2, 2, 1, 1, 1, 2, 2, 2, 0, 2, 0, 1, 1, 0, 0, 0, 2, 1, 2, 2, 0, 1, 0, 1, 0, 2, 2, 1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 2, 2, 2], [2, 2, 2, 0, 2, 1, 1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 1, 2, 0, 2, 1, 1, 0, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 1, 2, 0, 1, 2, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 91, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( mod(in0,in1) == mod(int(7.0),i2) or ( ( in0 * int(4.0) ) \\g mod(max(divInt(int(9.0),( int(9.0) * int(4.0) )), int(8.0)),divInt(min(int(0.0), min(in2, i0)),( ( mod(divInt(int(6.0),int(3.0)),abs(int(1.0))) * mod(in2,divInt(divInt(( int(8.0) + abs(in0) ),i1),min(( min(int(2.0), abs(mod(int(8.0),( int(7.0) * i0 )))) - in1 ), max(abs(mod(int(9.0),in2)), int(7.0))))) ) - ( abs(in1) * min(in1, max(int(5.0), int(8.0))) ) ))) and False ) ):{:\\nloopBreak% = 0\\nwhile ( not int(4.0) != in1 and False ):{:\\nloopBreak% = 0\\nwhile abs(divInt(mod(mod(i0,min(( divInt(in0,int(2.0)) * max(( divInt(mod(abs(int(3.0)),in1),min(min(i2, min(mod(max(divInt(( ( ( int(9.0) + int(9.0) ) + in0 ) * i1 ),i0), max(min(int(1.0), int(2.0)), int(4.0))),res0), int(2.0))), min(min(i2, divInt(i1,min(int(6.0), res0))), min(i2, i2)))) + i1 ), in2) ), ( i2 - i1 ))),( int(0.0) - max(int(1.0), ( ( i0 - max(min(int(8.0), res0), min(( i2 + int(1.0) ), in0)) ) * divInt(( ( divInt(mod(i2,i2),max(in1, ( in0 + in0 ))) + i1 ) - min(in2, mod(in2,min(int(2.0), in0))) ),( ( divInt(divInt(in2,int(7.0)),mod(abs(int(0.0)),in0)) - int(7.0) ) * in2 )) )) )),int(4.0))) \\ge int(5.0):{:\\ni2 -= ( ( in0 - ( in1 + min(in1, int(4.0)) ) ) + in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif not False:{:\\nin1 -= in2\\n:}else:{:\\nif not ( min(int(4.0), ( in2 * min(i2, int(9.0)) )) \\ge ( abs(max(int(1.0), int(5.0))) + max(min(( abs(min(( int(8.0) * ( int(0.0) - in1 ) ), int(6.0))) - ( abs(int(2.0)) + divInt(int(1.0),divInt(( mod(( in2 * res0 ),min(( ( divInt(( ( max(abs(i1), in0) - abs(in1) ) - max(( mod(abs(max(i0, divInt(abs(int(7.0)),mod(abs(int(4.0)),min(mod(abs(in0),int(8.0)), in0))))),int(3.0)) - min(( mod(divInt(i0,min(min(( mod(int(0.0),max(int(2.0), ( ( mod(int(1.0),min(int(0.0), abs(divInt(res0,int(3.0))))) + max(int(3.0), min(int(5.0), abs(min(abs(int(7.0)), int(3.0))))) ) + ( int(3.0) * divInt(int(4.0),( int(5.0) + min(max(int(5.0), i0), mod(int(2.0),( i1 - int(4.0) ))) )) ) ))) + min(int(2.0), i2) ), int(6.0)), mod(int(5.0),int(0.0)))),divInt(min(int(4.0), in2),( abs(( divInt(i1,i0) - mod(mod(min(mod(mod(i0,( int(8.0) * ( abs(int(2.0)) + in0 ) )),int(3.0)), abs(int(0.0))),max(( min(int(2.0), int(5.0)) - int(8.0) ), min(( int(5.0) * int(7.0) ), abs(in1)))),int(3.0)) )) - ( int(1.0) - abs(int(2.0)) ) ))) - int(0.0) ), int(8.0)) ), ( min(( mod(i0,in0) - i2 ), int(7.0)) + max(( max(( int(9.0) * in0 ), mod(abs(( min(abs(in0), int(2.0)) * in2 )),max(abs(( min(in0, divInt(( int(6.0) - int(3.0) ),abs(mod(max(abs(min(i0, i0)), min(i0, divInt(min(mod(in1,divInt(in1,divInt(( in1 * int(2.0) ),in0))), ( i2 + int(0.0) )),int(9.0)))),( i0 - int(0.0) ))))) - in0 )), int(6.0)))) * abs(abs(max(in1, int(9.0)))) ), max(in1, divInt(in1,max(int(4.0), int(3.0))))) )) ),abs(( abs(abs(divInt(( int(9.0) * int(8.0) ),in2))) * divInt(( i1 - in0 ),int(2.0)) ))) * int(9.0) ) - mod(( i2 - i1 ),int(9.0)) ), min(res0, ( abs(min(in1, int(7.0))) - int(4.0) )))) * max(int(4.0), ( ( int(8.0) * int(9.0) ) - max(min(min(res0, ( divInt(divInt(int(7.0),i2),int(7.0)) * in1 )), mod(min(int(8.0), in0),( abs(res0) + i0 ))), max(( divInt(abs(i2),int(8.0)) + abs(res0) ), i2)) )) ),( i2 + ( ( int(9.0) + i1 ) + int(3.0) ) ))) ) ), int(6.0)), i0) ) and i1 != res0 ):{:\\nb2 = min(in0, max(min(res0, max(int(2.0), min(int(7.0), abs(abs(in2))))), ( max(in0, abs(in0)) - int(2.0) ))) \\g mod(int(5.0),abs(int(7.0)))\\n:}else:{:\\ni2 = i2\\n:}\\nloopBreak% = 0\\nwhile int(2.0) \\l max(abs(int(7.0)), int(3.0)):{:\\nb1 = min(max(abs(int(7.0)), divInt(int(2.0),int(1.0))), min(min(int(3.0), int(8.0)), abs(int(6.0)))) \\l res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in1 \\g res0\\nb1 = in2 \\g mod(abs(i1),abs(( ( int(4.0) * int(0.0) ) + int(6.0) )))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 133, 133, 11, 4, 4, 21, 11, 10, 3, 3, 130, 3, 543, 148, 135, 81, 69]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1], [5, 5, 0, 7, 7], [4, 5], [0, 1], [1], [1, 0, 0, 0, 1], [0, 0], [3, 1, 2], [0], [], [3, 0, 5, 1, 2, 2, 3], [], [2, 2, 2, 0, 2, 0, 1, 0, 0, 3, 3, 1, 2, 1, 0, 3, 0, 3, 3, 1, 1, 0], [1, 1, 0, 0, 0], [2, 2, 1, 1, 0], [0, 1, 2], [0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = divInt(divInt(( in0 + ( i0 - int(5.0) ) ),in2),i1) \\le abs(abs(int(5.0)))\\nb1 = ( True or not ( int(0.0) * i2 ) != max(i2, max(min(int(7.0), int(7.0)), in0)) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 2, 2, 1, 5, 2, 3, 1, 0, 7, 0, 22, 5, 5, 3, 2]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [2, 2, 2, 0, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 3, 1, 6, 5, 1, 2, 5, 7, 2, 3, 1, 6, 0, 9, 0, 3, 2, 2], [2, 3, 5], [1, 0], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0], [1, 2, 3, 0], [0], [0, 0], [2, 3, 6, 6, 1, 3, 6, 1, 5, 1, 1, 4, 6, 0, 6, 1, 0, 5, 6, 0, 5, 1, 4, 2, 4, 6, 5, 6, 1, 0, 5, 5], [0, 0], [0, 3, 0, 2, 1, 3, 0, 3, 1, 2, 3, 2, 3, 1, 3, 2, 0, 0, 1, 0, 2, 0, 3, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 2, 0, 2, 3, 2, 1, 2, 3, 3, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 0, 2, 0, 1, 2, 1, 2, 2, 0, 2, 2, 0, 3, 3, 0, 2, 2, 0, 0, 0, 1, 0, 2, 2, 1, 3, 1, 0, 2, 0, 1, 3, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 1, 2, 2, 0, 0, 0, 0, 0], [2, 0, 0, 2, 2, 1, 2, 2, 0, 0, 1, 2, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nif not ( b1 and i2 == abs(in0) ):{:\\nloopBreak% = 0\\nwhile mod(int(5.0),min(res0, max(int(0.0), mod(min(( max(int(3.0), min(mod(res0,i1), int(1.0))) * in0 ), mod(res0,max(i1, mod(( divInt(in2,i1) + divInt(( i1 + in1 ),mod(res0,max(int(6.0), int(5.0)))) ),( max(abs(int(1.0)), divInt(i0,( max(mod(int(2.0),( abs(abs(int(5.0))) * mod(int(7.0),min(res0, i1)) )), int(2.0)) * int(3.0) ))) - int(1.0) ))))),int(6.0))))) \\ge i0:{:\\nin2 = mod(res0,int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = ( int(9.0) * divInt(( i0 * ( ( in2 + min(min(i1, mod(( in1 + i2 ),in1)), int(0.0)) ) - res0 ) ),mod(( int(3.0) * min(int(2.0), in2) ),( res0 - int(2.0) ))) ) != min(i1, i0)\\n:}\\nin2 = in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 20, 20, 3, 2, 1, 7, 3, 4, 1, 2, 32, 2, 96, 28, 18, 13, 15]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [0, 1], [3, 8], [], [0, 0], [], [0], [], [0], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b0\\ni2 = int(38.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 2, 1, 2, 0, 2, 0, 2, 2, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 1, 6, 1, 2, 3, 2, 7, 7, 3, 7, 5, 0, 9, 7, 0, 6, 2, 4, 2, 1, 2, 1, 8, 1, 3, 2, 5, 4, 4, 5, 7, 7, 1, 5, 8, 3, 5, 4, 3, 0, 4, 2, 8, 3, 3, 7, 6, 8, 2, 9, 3, 3, 4, 2, 0, 9, 2, 8, 2, 2, 6, 5, 1, 6, 8, 0, 9, 3, 0, 0, 6, 2, 6, 2, 4, 4, 5, 1, 6, 0, 6, 7, 9, 0, 0, 3, 4, 8, 0, 4, 4, 9, 6, 5, 1, 1, 9, 5, 3, 1, 6, 3, 1, 4, 3, 1, 8, 2, 8, 9, 8, 0, 9, 6, 1, 0, 6, 6, 1, 2, 6, 7, 6, 4, 0, 4, 8, 6, 1, 4, 9, 3, 8, 4, 8, 0, 7, 6, 9, 6, 9, 2, 2, 7, 7, 1, 7, 0, 6, 9, 3, 7, 4, 9, 3, 6, 9, 6, 2, 2, 2, 6, 5, 8, 9, 7, 1, 3, 8, 0, 1, 6, 7, 7, 5, 3, 1, 3, 3, 4, 0, 8, 1, 0, 6, 7, 1, 4, 9, 1, 7, 0, 5, 9, 9, 3, 8, 7, 2, 8, 6, 4, 6, 7, 5, 2, 7, 0, 5, 5, 6, 3, 5, 8, 5, 6, 8, 2, 7, 8, 1], [0, 2, 0, 1, 0, 1, 0, 1, 1, 0], [2, 1, 0, 2, 2, 2, 2, 0], [1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 1, 2, 0, 3, 1, 3, 2, 0, 2, 2], [0, 1, 0], [0, 1], [3, 3, 4, 3, 3, 4, 5, 6, 2, 2, 4, 5, 3, 4, 2, 6, 0, 3, 1, 5, 4, 1, 1, 4, 6, 5, 0, 4, 6, 2, 3, 6, 4, 3, 1, 6, 6, 4, 2, 5, 0, 4, 0, 6, 5, 5, 1, 0, 6, 2, 4, 2, 3, 3, 3, 3, 2, 5, 6, 6, 2, 0, 3, 3, 0, 0, 0, 5, 2, 6, 2, 2, 4, 2, 0, 2, 2, 2, 3, 6, 1, 2, 6, 2, 3, 0, 2, 5, 0, 4, 3, 5, 4, 3, 4, 3, 6, 5, 6, 3, 3, 0, 3, 4, 1, 0, 0, 1, 5, 6, 3, 3, 4, 6, 4, 0, 2, 5, 1, 1, 6, 4, 6, 4, 3, 1, 5, 2, 4, 1, 4, 0, 5, 0, 1, 2, 4, 2, 3, 6, 0, 4, 1, 2, 3, 0, 2, 1, 1, 0, 5, 0, 5, 5, 3, 1, 2, 6, 1, 5, 2, 3, 2, 1, 2, 2, 4, 2, 2, 3, 2, 0, 5, 5, 2, 6, 5, 6, 0, 6, 1, 5, 6, 1, 3, 0, 6, 3, 3, 3, 2, 3, 5, 0, 6, 0, 5, 3, 6, 2, 1, 2, 1, 5, 2, 3], [0, 1], [3, 1, 2, 0, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 1, 3, 0, 3, 2, 3, 2, 1, 2, 3, 3, 0, 3, 1, 2, 3, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2, 3, 1, 1, 2, 0, 2, 1, 0, 1, 0, 0, 0, 1, 2, 1, 2, 0, 1, 2, 3, 3, 0, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 1, 2, 3, 2, 2, 0, 0, 3, 0, 3, 2, 2, 2, 2, 2, 0, 2, 2, 1, 2, 3, 1, 2, 2, 1, 3, 3, 1, 2, 2, 1, 0, 2, 0, 1, 3, 3, 2, 3, 0, 3, 3, 3, 2, 0, 0, 3, 3, 1, 1, 2, 2, 3, 1, 2, 2, 1, 0, 3, 0, 2, 3, 3, 2, 1, 1, 3, 0, 2, 1, 2, 3, 3, 0, 2, 3, 0, 0, 1, 3, 2, 3, 0, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 3, 3, 2, 1, 2, 0, 3, 2, 2, 0, 2, 1, 1, 2, 3, 0, 2, 2, 2, 0, 2, 0, 2, 1, 3, 0, 1, 2, 0, 3, 1, 2, 3, 3, 2, 2, 3, 0, 1, 1, 0, 2, 0, 1, 3, 3, 1, 0, 0, 3, 2, 3, 1, 1, 1, 3, 1, 0, 3, 3, 2, 2, 3, 2, 2, 0, 3, 2, 2, 1, 0, 3, 2, 3, 0, 3, 3, 3, 1, 0, 1, 2, 1, 3, 2, 0, 3, 0, 2, 0, 1, 2, 2, 1, 1, 0, 2, 3, 0, 2, 2, 0, 2, 1, 0, 0, 0, 2, 0, 0, 1, 2, 2, 3, 0, 1, 2, 0, 1, 0, 0, 1, 3, 3, 2, 2, 0, 2, 3, 0, 0, 0, 1, 3, 3, 2, 1, 1, 3, 2, 1, 3, 1, 1, 3, 2, 1, 2, 3, 2, 3, 2, 2, 3, 1, 2, 1, 0, 0, 3, 0, 1, 3, 2, 1, 1, 1, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 0, 3, 2, 2, 2, 0, 1, 1, 0, 2, 0, 3, 0, 3, 3, 1, 1, 2, 3, 3, 3, 2, 0, 3, 2, 2, 2, 3, 2, 1, 3, 1, 3, 2, 1, 3, 1, 3, 0, 1, 0, 3, 2, 0, 3, 2, 3, 1, 3, 0, 0, 3, 1, 2, 3, 1, 2, 2, 0, 0, 2, 2, 1, 2, 3, 1, 3, 1, 3, 0, 1, 2, 2, 3, 1, 2, 3, 2, 2, 3, 2, 3, 3, 1, 1, 0, 0, 3, 0, 2, 2, 3, 0, 0, 1, 2, 0, 2, 3, 1, 3, 2, 2, 0, 2, 2, 0, 2, 3, 3, 2, 1, 1, 0, 2, 3, 1, 2, 1, 0, 2, 1, 1, 0, 2, 3, 0, 2, 3, 3, 3, 3, 2, 2, 1, 0, 2, 2, 0, 0, 0, 2, 2, 2, 3, 1, 3, 3, 3, 0, 2, 3, 2, 3, 3, 2, 3, 3, 0, 2, 0, 3, 3, 3, 1, 2, 0, 1, 3, 1, 2, 1, 2, 1, 3, 0, 0, 3, 0, 0, 2, 0, 1, 1, 1, 2, 0, 1, 2, 0, 3, 2, 1, 2, 0, 0, 1, 3, 0, 2, 2, 3, 2, 0, 0, 3, 1, 1, 1, 2, 2, 3, 1, 2, 2, 0, 2, 3, 1, 0, 3, 0, 1, 3, 0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 2, 2, 2, 3, 2, 2, 3, 1, 3, 3, 2, 2, 0, 3, 3, 2, 2, 1, 1, 2, 0, 1, 3, 2, 1, 3, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 1, 0, 1, 2, 2, 2, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 0, 0, 3, 2, 3, 3, 3, 0, 2, 3, 2, 2, 2, 1, 1, 3, 0, 1, 1, 2, 2, 1, 3, 3, 1, 0, 2, 0, 3, 2, 0, 0, 1, 3, 0, 1, 3, 3, 3, 3, 3, 1, 0, 3, 2, 3, 0, 1, 1, 2, 0, 1, 1, 0, 0, 3, 2, 1, 1, 1, 2, 0, 1, 2, 0, 0, 3, 0, 2, 3, 3, 3, 2, 0, 1, 3, 1, 0, 3, 2, 2, 0, 0, 2, 3, 2, 1, 0, 2, 1, 0, 2, 3, 0, 3, 0, 0, 1, 1, 3, 1, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 3, 2, 3, 1, 1, 0, 1, 1, 0, 2, 2, 1, 0, 0, 2, 3, 3, 0, 0, 0, 3, 2, 1, 0, 2, 0, 3, 0, 1, 1, 3, 3, 3, 1, 1, 2, 3, 0, 1, 1, 3, 0, 0, 0, 3, 1, 3, 2, 1, 0, 3, 2, 3, 3, 2, 1, 0, 3, 3, 3, 3, 1, 0, 1, 1, 0, 1, 2, 2, 1, 0, 3, 0, 3, 1, 3, 0, 1, 1, 0, 2, 3, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 0, 3, 0, 0, 1, 0, 0, 2, 0, 3, 1, 3, 1, 2, 3, 3, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 0, 1, 0, 0, 0, 2, 2, 0, 0, 1, 0, 1, 1, 1, 0, 2, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 1, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 2, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 1, 2, 0, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 2, 1, 2, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 0, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 1, 2, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 2, 1, 1, 1, 0, 0, 0, 0, 1, 2, 0, 0, 2, 1, 2, 0, 0, 1, 2, 1, 2, 1, 1, 2, 1, 2, 0, 1, 0, 1, 2, 0, 0, 0, 2, 1, 2, 1, 1, 1, 2, 0, 2], [0, 0, 1, 0, 2, 0, 1, 0, 1, 2, 0, 0, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 0, 1, 2, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 1, 1, 0, 2, 2, 1, 0, 0, 1, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 0, 0, 2, 0, 2, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 2, 1, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 2, 0, 1, 2, 2, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 179, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = abs(int(5.0))\\nb2 = divInt(in0,min(( max(min(divInt(min(min(abs(( mod(int(1.0),abs(in1)) + min(( min(divInt(int(6.0),mod(max(min(in0, max(int(1.0), divInt(max(in0, in1),( divInt(mod(mod(int(2.0),int(3.0)),int(2.0)),( max(int(7.0), int(7.0)) + mod(in2,mod(int(3.0),res0)) )) - int(7.0) )))), i2),i2)), in1) + int(5.0) ), mod(int(0.0),mod(in2,int(9.0)))) )), divInt(min(abs(in0), ( mod(int(7.0),int(0.0)) * int(6.0) )),in1)), i2),( res0 + int(2.0) )), int(4.0)), ( abs(divInt(( i0 - in0 ),max(i1, min(( divInt(mod(( ( in2 + divInt(( int(2.0) - ( abs(int(1.0)) * ( ( int(2.0) + abs(min(int(1.0), divInt(mod(int(8.0),in1),divInt(i1,int(1.0))))) ) + min(min(( abs(i1) * min(max(abs(( in1 * res0 )), abs(min(int(3.0), int(2.0)))), divInt(mod(abs(int(5.0)),divInt(divInt(int(4.0),in2),min(i0, divInt(abs(min(mod(int(4.0),int(5.0)), min(in1, ( int(7.0) * ( abs(max(res0, ( abs(i2) * in0 ))) - int(7.0) ) )))),max(divInt(max(res0, ( ( int(1.0) - int(5.0) ) * int(8.0) )),int(3.0)), divInt(mod(divInt(int(5.0),mod(max(abs(divInt(int(4.0),divInt(in1,min(mod(( in0 * ( int(3.0) - int(0.0) ) ),mod(min(i1, ( mod(mod(res0,mod(res0,( int(4.0) - abs(in1) ))),int(2.0)) + mod(i2,max(int(8.0), ( min(abs(divInt(( abs(in2) * int(3.0) ),int(3.0))), i0) + ( in1 - int(7.0) ) ))) )),min(min(int(6.0), i0), res0))), min(mod(abs(int(8.0)),int(2.0)), int(9.0)))))), max(int(3.0), in2)),abs(min(( divInt(abs(mod(( in2 + abs(mod(( int(3.0) * i1 ),max(( min(i0, abs(min(max(int(4.0), res0), int(2.0)))) + ( int(0.0) - max(( i2 * abs(in1) ), divInt(i2,int(9.0))) ) ), ( ( int(2.0) - int(8.0) ) * in0 )))) ),mod(abs(in0),divInt(( in0 * ( int(2.0) - in0 ) ),i2)))),in2) * divInt(res0,res0) ), int(2.0))))),mod(( abs(i2) + int(6.0) ),mod(i0,int(5.0)))),in0)))))),in0)) ), int(1.0)), min(min(( ( i0 + ( max(i0, i0) + in2 ) ) + int(6.0) ), max(min(( int(8.0) + int(0.0) ), abs(( int(9.0) - max(int(3.0), int(0.0)) ))), min(divInt(int(0.0),( max(( max(( divInt(abs(int(6.0)),mod(int(2.0),i2)) * res0 ), min(i2, int(6.0))) + max(divInt(int(2.0),int(4.0)), int(4.0)) ), ( int(5.0) + i2 )) + mod(max(( in1 - ( max(int(1.0), i2) + max(divInt(( ( i0 + int(6.0) ) + int(0.0) ),i2), ( i2 + min(i2, abs(abs(int(6.0)))) )) ) ), int(7.0)),mod(max(abs(min(( in0 + min(mod(divInt(( max(( int(9.0) - abs(int(0.0)) ), min(( int(0.0) * abs(int(3.0)) ), max(res0, int(4.0)))) - i1 ),max(mod(i2,abs(mod(min(int(8.0), min(res0, i2)),min(int(0.0), mod(min(int(4.0), ( ( in0 - i0 ) + ( ( int(4.0) * ( max(int(9.0), max(int(6.0), max(i2, int(5.0)))) * ( mod(abs(int(1.0)),divInt(min(( ( min(( min(abs(int(1.0)), int(9.0)) - in2 ), i0) + max(in1, ( mod(min(in0, in2),int(5.0)) + mod(in1,( min(int(3.0), max(( ( in0 - ( ( in1 * mod(min(min(divInt(int(1.0),int(6.0)), in0), ( min(int(3.0), ( int(1.0) + res0 )) + divInt(int(4.0),int(3.0)) )),in2) ) - divInt(abs(res0),divInt(max(abs(max(max(mod(mod(int(1.0),in0),divInt(( in0 - i0 ),in0)), mod(divInt(mod(abs(int(8.0)),min(min(max(in1, mod(min(divInt(abs(max(( abs(min(i1, divInt(i0,abs(abs(abs(int(2.0))))))) * mod(i0,int(8.0)) ), min(int(9.0), ( int(8.0) + mod(int(0.0),max(i1, in2)) )))),min(res0, in0)), mod(in0,int(9.0))),int(6.0))), int(1.0)), ( in1 + int(0.0) ))),( res0 * min(mod(int(6.0),mod(in1,i0)), int(6.0)) )),min(i2, mod(mod(min(( in2 * i1 ), min(int(1.0), int(2.0))),int(6.0)),( divInt(min(int(7.0), ( ( i1 + mod(min(int(6.0), res0),min(in1, int(4.0))) ) * min(res0, in1) )),in0) * i1 ))))), ( in2 + int(0.0) ))), i2),divInt(int(4.0),int(8.0)))) ) ) + ( mod(divInt(abs(( mod(max(int(6.0), min(abs(( mod(in1,min(max(divInt(( int(1.0) * int(4.0) ),mod(i1,int(9.0))), max(mod(int(3.0),abs(min(in1, divInt(i0,in2)))), int(8.0))), i0)) - divInt(max(mod(i1,mod(int(4.0),i2)), int(8.0)),( mod(divInt(( int(0.0) * in1 ),abs(min(max(int(7.0), int(6.0)), int(9.0)))),abs(i2)) - ( int(6.0) + int(9.0) ) )) )), ( int(2.0) + int(2.0) ))),int(7.0)) * ( mod(( int(7.0) + int(1.0) ),( in0 * res0 )) - abs(( min(max(max(i0, ( abs(( mod(mod(int(7.0),int(0.0)),abs(in1)) + int(6.0) )) - int(9.0) )), divInt(divInt(int(3.0),min(max(int(7.0), i1), divInt(i2,min(mod(in0,i0), int(4.0))))),abs(i2))), int(9.0)) + min(abs(min(max(abs(int(3.0)), i1), max(( abs(i1) + int(6.0) ), int(9.0)))), ( i0 + int(6.0) )) )) ) )),int(2.0)),in2) - i0 ) ), max(divInt(int(2.0),int(2.0)), int(6.0)))) - divInt(in2,int(5.0)) )) )) ) + divInt(in2,in0) ), max(i1, ( max(min(min(( i2 + int(8.0) ), min(int(9.0), res0)), min(( ( i1 + in2 ) * mod(max(( int(7.0) * i2 ), ( int(1.0) - in0 )),( abs(i2) * min(i1, i2) )) ), int(3.0))), int(8.0)) + min(int(0.0), ( divInt(mod(int(1.0),i2),( in1 - i2 )) + i2 )) ))),int(6.0))) - abs(( max(int(7.0), int(7.0)) + in0 )) ) ) ) + int(5.0) ) )),int(3.0)))))), i2)),divInt(divInt(int(1.0),i0),in2)), divInt(abs(min(in2, i2)),res0)) ), min(mod(int(3.0),in2), ( res0 - max(i0, int(3.0)) )))), int(4.0)),abs(max(abs(int(0.0)), int(8.0))))) )), mod(max(res0, int(1.0)),int(0.0))))), max(i1, in2))) ) ) ),res0) ) + abs(int(6.0)) ),max(mod(int(7.0),i1), abs(( min(max(( int(1.0) - in0 ), min(max(abs(min(int(4.0), i0)), int(9.0)), int(1.0))), res0) * int(7.0) )))),mod(divInt(int(0.0),in0),min(in0, min(int(5.0), abs(in0))))) + int(9.0) ), int(9.0))))) - i2 )) * divInt(max(mod(mod(( int(3.0) * divInt(int(8.0),int(7.0)) ),int(2.0)),int(8.0)), int(6.0)),in0) ), abs(in2))) \\l i0\\nloopBreak% = 0\\nwhile True:{:\\nb1 = ( False or not b0 )\\nloopBreak% = 0\\nwhile int(4.0) == res0:{:\\nb2 = i0 \\l ( in2 - max(int(6.0), max(int(7.0), mod(max(abs(int(5.0)), in0),divInt(int(2.0),int(7.0))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(0.0) \\g res0 and int(5.0) \\l int(5.0) ):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( not int(6.0) \\g int(3.0) or divInt(i2,int(5.0)) \\l i1 ):{:\\nif i2 \\g mod(i1,int(8.0)):{:\\nb2 = int(5.0) \\g min(int(6.0), int(8.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = not not abs(int(2.0)) \\l mod(in2,i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 += int(781.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 222, 222, 10, 8, 3, 22, 10, 12, 3, 2, 206, 2, 894, 252, 218, 118, 135]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1], [2, 2, 2, 1, 1, 1, 2, 0, 1], [1, 1, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 7, 1, 5, 9, 8, 9, 8, 0, 0, 7, 2, 7, 4, 7, 7, 1, 7, 5, 1, 3, 0, 0, 4, 9, 7, 7, 6, 0], [2, 0, 2, 4, 1, 3], [2, 2, 2, 1, 1, 2], [], [1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [0, 0], [], [1], [0, 1, 6, 4, 6, 4, 0, 6, 4, 5, 5, 0, 3, 4, 5, 1, 2, 2, 6, 1, 0, 2, 5, 4, 0, 6, 0, 4, 2, 5, 5, 0, 2, 3, 6, 0, 3, 0, 5, 2, 5, 0, 0, 3, 5, 3, 5], [0], [0, 2, 1, 0, 0, 0, 2, 3, 0, 2, 2, 0, 2, 1, 1, 3, 0, 3, 0, 3, 1, 3, 2, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 3, 2, 3, 3, 2, 3, 3, 0, 0, 0, 1, 0, 1, 2, 1, 2, 3, 0, 0, 2, 0, 1, 1, 2, 1, 2, 0, 3, 3, 0, 1, 3, 3, 1, 0, 3, 1, 2, 3, 0, 1, 0, 2, 1, 2, 1, 1, 1, 1, 3, 2, 0, 1, 3, 3, 3, 0, 2, 2, 0, 3, 1, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 0, 0, 2, 3, 2, 3, 2, 0, 2, 0, 0, 0, 2, 0, 0, 2, 1, 0, 3, 0, 3, 3, 3, 0, 1, 0, 0, 0, 1, 3, 0, 1, 0, 0, 3, 3, 0, 0, 3, 2, 0, 3, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 2, 0, 2, 2, 0, 2, 0, 0, 1, 1, 2, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 2, 2, 1, 0, 0, 1, 0, 2, 0], [0, 1, 0, 0, 2, 2, 0, 1, 2, 0, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 == ( int(2.0) + i1 ):{:\\nloopBreak% = 0\\nwhile res0 \\l in1:{:\\nif mod(max(res0, divInt(( in1 - divInt(int(3.0),int(7.0)) ),abs(i0))),min(res0, abs(int(1.0)))) == abs(( min(( abs(in1) + ( ( ( int(5.0) + int(9.0) ) * divInt(min(mod(min(max(( max(abs(in2), in2) * i0 ), int(8.0)), in0),int(9.0)), ( int(8.0) + ( min(in1, in2) - ( i1 * int(0.0) ) ) )),int(0.0)) ) + divInt(int(7.0),( i2 - max(max(i2, int(2.0)), min(min(int(7.0), res0), max(int(4.0), ( min(i1, int(7.0)) + i0 )))) )) ) ), ( int(7.0) * ( int(1.0) + int(7.0) ) )) - int(5.0) )):{:\\nb2 = int(1.0) \\le max(( i2 - int(3.0) ), min(max(min(in2, mod(( in1 - min(int(0.0), abs(( ( i0 - mod(divInt(divInt(int(0.0),res0),( i0 - in1 )),( min(divInt(abs(( i2 - ( in2 - in2 ) )),i0), divInt(i2,in0)) * divInt(int(4.0),res0) )) ) - abs(i0) ))) ),abs(max(min(in0, int(9.0)), i0)))), in2), i2))\\n:}else:{:\\nb2 = int(7.0) \\g min(in2, int(7.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b1\\nloopBreak% = 0\\nwhile i0 \\ge i0:{:\\nb1 = b2\\nin0 = max(min(in2, in0), abs(mod(in2,min(int(6.0), int(0.0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 30, 30, 6, 6, 0, 8, 6, 2, 0, 1, 47, 1, 149, 37, 36, 23, 14]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 0], [], [1, 0, 1, 1], [1, 1], [0, 6], [], [1, 0], [], [0], [], [0], [], [], [0, 5, 1, 2, 3, 2], [0, 0, 1], [3, 3, 1, 0, 3, 1, 0, 0], [], [0, 0, 2], [0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = min(min(int(0.0), in2), abs(int(6.0)))\\nb1 = b0\\ni1 = i2\\nin0 += i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 6, 3, 8, 0, 3, 1, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 2, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 1], [1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 0, 2, 9, 2, 3, 1, 6, 4, 9, 1, 3, 5, 4, 0, 3, 8, 0, 9, 9, 6, 4, 9, 0, 9, 6, 7, 9, 4, 9, 8, 0, 5, 3, 6, 0, 2, 9, 5, 6, 8, 7], [4, 1, 4, 1, 0, 4, 2, 3], [0, 0, 0, 2, 2, 0, 2, 2, 2], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2], [0, 1], [1], [3, 3, 6, 1, 2, 6, 3, 6, 0, 4, 2, 2, 1, 3, 6, 6, 1, 2, 1, 3, 6, 6, 4, 0, 3, 6, 3, 0, 0, 2, 3, 1, 3, 3, 6, 5, 5, 6, 2, 3, 4, 1, 4, 6, 4], [0, 0], [1, 1, 1, 2, 2, 3, 0, 0, 3, 2, 1, 1, 1, 0, 1, 3, 0, 3, 1, 3, 0, 2, 3, 1, 3, 2, 3, 0, 2, 2, 2, 1, 2, 1, 1, 3, 2, 3, 0, 2, 0, 0, 2, 1, 0, 0, 2, 3, 1, 2, 1, 3, 3, 0, 0, 3, 2, 1, 0, 3, 2, 0, 2, 1, 3, 0, 3, 3, 1, 0, 3, 1, 0, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 0, 2, 0, 2, 1, 1, 2, 2, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 2, 2, 3, 1, 2, 1, 1, 0, 3, 1, 1, 3, 1, 2, 0, 0, 3, 0, 3, 3, 1, 3, 0, 0, 0, 3, 3, 0, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 0, 0, 2, 0, 3, 3, 1, 3, 1, 3, 0, 1, 2, 1, 2, 3, 2, 3, 0, 0, 0, 1, 2, 0, 3, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 1, 2, 2, 1, 0, 1, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 1, 2, 1], [0, 2, 1, 0, 1, 1, 0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(5.0) \\le int(4.0)\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = int(0.0) \\g ( divInt(abs(in0),in0) + abs(mod(int(2.0),int(9.0))) )\\nb2 = int(2.0) \\le res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(31.0)\\nif max(i2, abs(int(6.0))) \\g abs(res0):{:\\nin0 = mod(max(int(4.0), min(mod(max(res0, divInt(( ( int(9.0) * ( int(1.0) - int(3.0) ) ) + abs(divInt(min(i0, ( in1 - i2 )),divInt(int(5.0),i2))) ),i1)),mod(max(int(4.0), ( int(0.0) - max(max(in0, res0), abs(( int(3.0) + res0 ))) )),min(( i1 + ( int(8.0) - min(i2, abs(abs(int(0.0)))) ) ), i1))), min(int(9.0), in0))),int(9.0))\\nloopBreak% = 0\\nwhile ( res0 - abs(max(int(6.0), int(4.0))) ) \\l int(9.0):{:\\nb2 = ( max(res0, ( in1 + ( int(0.0) * int(9.0) ) )) * ( divInt(mod(( i0 * abs(( ( ( in0 * res0 ) + ( ( ( divInt(min(int(6.0), ( int(7.0) * int(9.0) )),in0) * min(int(4.0), int(9.0)) ) * abs(int(8.0)) ) + ( i0 - i0 ) ) ) * abs(i2) )) ),max(min(int(0.0), abs(in0)), i1)),in0) - abs(max(in0, int(5.0))) ) ) \\le divInt(( int(3.0) * res0 ),int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = True\\nb2 = ( ( int(0.0) + int(2.0) ) - in2 ) == in2\\n:}else:{:\\nb2 = False\\nb2 = not ( res0 * min(max(int(9.0), max(int(5.0), min(i2, int(6.0)))), ( int(8.0) + divInt(max(divInt(abs(in0),in1), i1),int(7.0)) )) ) \\ge mod(in1,max(res0, in1))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 3, 10, 43, 43, 8, 9, 0, 12, 8, 4, 2, 1, 45, 2, 167, 43, 39, 28, 15]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [2, 2], [], [], [], [], [], [], [], [], [5, 1], [0], [2, 2, 1, 1, 0], [0, 1], [], [1], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( divInt(int(2.0),int(2.0)) - i1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 5, 2, 0, 1, 1]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 6, 8, 8, 0, 9, 1, 5, 5], [5], [1], [], [1], [0], [], [], [], [6, 5], [], [2, 2, 1, 3, 3, 3, 2, 3, 2, 1, 3, 3, 1, 0, 0, 1, 1, 2, 1, 3, 1, 1], [1, 1, 0, 1, 1], [2, 1, 2, 0, 1, 2, 2], [1], [0, 1, 1, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(mod(int(1.0),abs(max(abs(( min(mod(int(6.0),max(abs(int(8.0)), res0)), in2) - int(8.0) )), int(0.0)))),divInt(int(9.0),abs(int(1.0)))) != int(55.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 9, 9, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 22, 5, 7, 1, 4]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 1, 1], [1], [1, 0, 0], [1, 1], [2, 7], [3, 1], [1, 0], [], [1, 0, 1], [0, 0], [1], [1], [], [0, 2, 0, 6], [0], [1, 0, 0, 0, 3, 3, 3, 1], [], [2, 2, 2], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(2.0)\\nloopBreak% = 0\\nwhile i2 \\ge i0:{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = res0 \\g abs(abs(abs(int(7.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 4, 1, 8, 0, 3, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1], [6], [3], [2], [], [0, 1], [0], [2], [], [], [3, 1, 6, 4], [0], [2, 1, 0, 3, 0, 0], [0], [2], [1], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( int(6.0) - i1 )\\nb2 = not abs(res0) \\ge in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 4, 1, 6, 1, 1, 1, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [1, 0], [1, 1, 1, 1], [7, 7, 9, 8], [4, 4], [1, 1, 1], [0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0], [3, 2, 3, 0, 2, 3, 1, 0], [0], [], [4, 4, 0], [0], [3, 0, 1, 3, 1, 1, 1, 0], [], [1, 2], [], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(in1, int(7.0)) \\le abs(int(7.0)):{:\\nin1 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( not ( b1 and not ( int(8.0) \\le i0 and True ) ) or b1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 2, 3, 3, 10, 2, 8, 1, 0, 3, 1, 8, 0, 2, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 1, 0], [0], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 5, 2, 7, 9, 9, 5, 1, 5, 8, 6, 1, 2, 1, 1, 1, 0], [2], [1], [], [1, 0], [0], [1], [0], [0], [2, 0, 5, 0, 3, 5, 1, 3, 2, 5, 0, 4, 5, 3, 5, 4, 1, 6, 0, 3, 4, 6, 0, 4, 0], [0, 0], [0, 2, 3, 2, 2, 3, 0, 2, 2, 0, 0, 3, 3, 0, 0, 1, 1, 2, 3, 2, 0, 0, 1, 3, 1, 2, 2, 3, 2, 3, 1, 3, 1, 2, 3, 2, 0, 3, 1, 0, 2, 3, 3, 1, 3, 1, 0, 3, 0, 3, 3, 2, 2, 0, 0, 1, 3, 1, 2, 2, 0, 0, 2, 2, 3, 3, 0, 3, 0, 3, 1, 1, 1, 0, 3, 0, 2, 0, 1, 1, 2, 1, 0, 3, 0, 3, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [1, 2, 0, 1, 0, 1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 2], [2, 0, 2, 2, 2, 0, 2, 1, 0, 0, 2, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i2 == ( max(divInt(( abs(i0) * ( divInt(in2,i0) + min(max(in0, in2), int(3.0)) ) ),int(1.0)), ( min(mod(i1,in0), int(5.0)) * max(int(2.0), ( ( min(( abs(int(7.0)) * abs(int(9.0)) ), mod(max(( i2 * abs(int(9.0)) ), in2),divInt(min(min(int(5.0), min(int(1.0), i0)), abs(in1)),min(abs(( mod(in2,in0) + int(5.0) )), max(int(8.0), ( mod(in2,in1) * ( divInt(abs(abs(i1)),max(res0, min(int(6.0), int(1.0)))) - int(2.0) ) )))))) + i0 ) + min(in0, ( in1 * int(1.0) )) )) )) - int(1.0) ):{:\\nres0 = ( int(1.0) + i0 )\\nb1 = True\\nin1 = min(i0, abs(int(0.0)))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 18, 18, 1, 1, 0, 2, 1, 1, 1, 1, 25, 2, 87, 21, 25, 13, 8]}, {"genotype": [[0], [1], [0], [], [1], [1], [5], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1], [4, 8, 9, 1, 8, 7], [0], [2], [], [1], [0], [], [], [], [2, 4], [], [2, 3, 1, 3, 1, 2, 2, 1, 3, 1, 1, 1, 0, 0], [1, 1, 1], [0, 0, 0], [], [1, 0, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(min(int(4.0), min(int(8.0), divInt(divInt(int(9.0),min(int(1.0), int(8.0))),int(7.0)))),i2) \\l in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 14, 3, 3, 0, 3]}, {"genotype": [[0], [1], [1], [], [0], [1], [8], [1], [0], [], [1], [0], [], [], [], [2, 4, 1, 5], [], [0, 3, 2, 0, 3, 0, 1, 0], [1], [0, 1], [], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i2 \\g min(mod(in1,max(i1, int(8.0))), in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 8, 1, 2, 0, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 5, 1, 6, 0, 9, 8, 6, 0, 5, 7, 9, 8, 7, 9, 5, 6, 1, 2, 4, 7, 8, 1, 3], [3, 0, 3, 0, 2, 0, 1, 5], [0, 2, 1, 0, 1, 0], [0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 2, 3, 1, 3, 2, 0, 0, 1, 3, 2, 2, 1, 1, 1], [1, 0, 0, 1, 1, 1], [0, 0, 1], [3, 5, 0, 6, 4, 4, 6, 6, 5, 4, 0, 1, 0, 0, 1, 4, 2, 3, 0, 1, 4, 3, 1, 4, 2, 1, 0, 3, 5, 6, 0, 1, 1, 5, 2, 2, 4, 4, 0, 6], [0, 1, 1, 1, 1, 1], [2, 1, 1, 3, 1, 0, 2, 3, 1, 2, 0, 0, 0, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 0, 2, 2, 3, 0, 2, 2, 0, 1, 1, 3, 3, 3, 3, 0, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 3, 1, 2, 2, 0, 1, 3, 0, 1, 0, 0, 3, 2, 1, 1, 3, 0, 0, 3, 3, 1, 1, 0, 0, 3, 0, 1, 0, 3, 1, 2, 3, 0, 0, 1, 2, 0, 2, 2, 2, 0, 3, 0, 3, 3, 3, 1, 0, 2, 1, 3, 1, 3, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [2, 1, 0, 0, 0, 1, 1, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 2, 2, 1, 1, 2, 2, 2], [0, 1, 0, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 0, 2, 2, 0], [1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( int(2.0) + int(7.0) )\\nloopBreak% = 0\\nwhile not False:{:\\nin2 -= abs(int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i0 \\ge ( max(int(1.0), ( res0 + in1 )) - in1 ):{:\\nloopBreak% = 0\\nwhile res0 \\l int(6.0):{:\\nloopBreak% = 0\\nwhile not ( True and ( not b0 or b2 ) ):{:\\nres0 -= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 -= mod(int(0.0),min(i0, i1))\\nloopBreak% = 0\\nwhile True:{:\\nb1 = ( not int(9.0) \\ge min(i0, divInt(( min(i0, ( ( i1 * int(8.0) ) - int(6.0) )) * max(max(abs(abs(in1)), i2), max(max(max(int(0.0), int(5.0)), int(7.0)), min(in0, i0))) ),max(int(9.0), ( ( i1 * int(8.0) ) - min(in1, int(7.0)) )))) or in0 \\l i1 )\\nloopBreak% = 0\\nwhile max(( int(9.0) - int(5.0) ), min(in1, i2)) == min(max(int(6.0), int(1.0)), i1):{:\\nb0 = i0 \\l min(in0, int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in2 \\g min(int(4.0), divInt(abs(res0),i0)):{:\\nif not False:{:\\ni1 -= int(7.0)\\n:}\\n:}\\nb1 = False\\nif False:{:\\ni1 += divInt(in2,( ( ( i2 * abs(i2) ) * max(max(abs(int(8.0)), in1), mod(int(1.0),abs(int(3.0)))) ) + abs(in1) ))\\n:}else:{:\\nb0 = i0 != res0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 19, 19, 9, 10, 25, 25, 8, 6, 3, 24, 8, 16, 6, 3, 40, 6, 104, 17, 28, 17, 5]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 8, 6, 6, 1, 9, 8], [5], [1], [], [0, 1], [0], [2], [], [], [0, 4, 6], [], [2, 3, 2, 2, 3, 1, 3, 1, 0, 3, 3, 3, 0, 1, 2, 1, 1, 3, 1, 1, 1, 0], [1, 0, 0, 1], [1, 0, 1, 2, 1, 1, 2], [0, 1], [1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not mod(max(( ( min(int(0.0), max(int(5.0), i0)) + abs(max(max(in1, int(8.0)), mod(int(6.0),int(6.0)))) ) - abs(int(1.0)) ), int(9.0)),int(8.0)) != res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 8, 8, 1, 1, 0, 2, 1, 1, 0, 0, 3, 0, 22, 4, 7, 2, 2]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1], [1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 1, 2, 5, 7, 3, 6, 8, 4, 5, 4, 9, 1, 0, 5, 8, 3, 7, 9, 5, 0, 4, 3, 8, 8, 8, 3, 5, 0, 1, 6, 8, 1, 1, 1, 6, 6, 5, 1, 9, 0, 9, 1, 9, 2, 8, 9, 2, 2, 4, 4, 8, 9, 9, 5, 0, 5], [5, 5, 1, 3, 2], [0, 2, 2], [1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [3, 3, 0, 1], [0], [0], [2, 0, 3, 5, 1, 0, 6, 6, 3, 0, 3, 5, 3, 0, 2, 5, 5, 2, 5, 5, 2, 1, 5, 3, 5, 4, 6, 4, 6, 0, 5, 6, 1, 6, 6, 2, 0, 1, 6, 0, 2, 4, 4, 0, 6, 1, 4, 3, 3, 6, 6, 1, 6, 3, 6, 5, 4, 0, 2, 6], [1, 1], [2, 1, 0, 1, 1, 2, 1, 0, 1, 2, 2, 0, 3, 2, 2, 0, 1, 3, 3, 1, 0, 3, 1, 0, 0, 3, 2, 2, 2, 2, 3, 0, 1, 2, 3, 3, 0, 2, 1, 3, 2, 0, 1, 3, 3, 2, 3, 2, 2, 1, 0, 1, 1, 2, 0, 2, 1, 1, 2, 0, 3, 2, 1, 0, 0, 2, 1, 2, 0, 2, 2, 3, 3, 1, 1, 3, 1, 1, 0, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 3, 0, 2, 1, 0, 0, 3, 2, 0, 2, 0, 1, 3, 2, 3, 2, 0, 3, 3, 3, 3, 1, 0, 3, 3, 3, 0, 2, 1, 0, 0, 0, 1, 3, 2, 1, 3, 2, 3, 0, 2, 1, 2, 0, 2, 0, 0, 1, 3, 2, 3, 3, 1, 0, 0, 3, 2, 0, 3, 0, 0, 3, 2, 3, 3, 2, 1, 3, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 2, 2, 2, 3, 1, 2, 1, 3, 2, 3, 1, 0, 3, 0, 3, 0, 3, 3, 0, 1, 1, 2, 3, 1, 1, 2, 1, 1, 2, 0, 1, 3, 2, 1, 0, 3, 3, 2, 0, 3, 2, 2, 0, 0, 0, 3, 2, 3, 1, 0, 3, 1, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 2, 2, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 1, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0], [0, 0, 2, 0, 1, 0, 2, 2, 2, 0, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(0.0) + i2 ) != int(3.0)\\nif ( int(1.0) != ( int(2.0) + i0 ) or int(5.0) \\g divInt(mod(in0,min(mod(divInt(in2,int(7.0)),min(max(int(3.0), i1), abs(int(6.0)))), i0)),res0) ):{:\\nres0 *= max(mod(( ( ( max(in0, int(8.0)) + mod(max(max(i0, ( int(4.0) - min(mod(in0,int(5.0)), min(abs(divInt(abs(( ( int(4.0) + in2 ) * int(9.0) )),int(1.0))), ( in0 * mod(int(0.0),int(5.0)) ))) )), mod(i0,min(divInt(int(8.0),i2), in2))),divInt(int(3.0),divInt(in2,( ( max(max(int(7.0), int(9.0)), min(int(5.0), int(0.0))) * i2 ) + divInt(int(4.0),int(3.0)) )))) ) + in2 ) + int(8.0) ),int(8.0)), in2)\\ni2 -= int(8.0)\\nloopBreak% = 0\\nwhile ( b2 or i1 \\ge min(in2, in0) ):{:\\nloopBreak% = 0\\nwhile mod(max(min(in2, ( int(3.0) - in1 )), res0),min(divInt(in1,mod(res0,int(5.0))), max(mod(min(mod(i0,abs(max(min(max(int(0.0), in2), abs(max(abs(res0), ( int(1.0) + i1 )))), res0))), res0),int(6.0)), max(( int(8.0) + max(mod(max(i2, ( int(1.0) * ( i0 - ( i1 + res0 ) ) )),int(1.0)), min(( min(max(int(1.0), i0), i2) + min(( in1 - abs(in1) ), i0) ), min(( min(abs(divInt(int(6.0),max(max(int(6.0), max(min(int(5.0), abs(int(1.0))), res0)), ( abs(( mod(( max(int(9.0), ( int(0.0) + max(( min(int(9.0), i1) - max(in1, min(in0, min(abs(in0), int(1.0)))) ), int(9.0)) )) + ( min(int(2.0), int(8.0)) + divInt(int(9.0),int(2.0)) ) ),( res0 + int(2.0) )) - abs(divInt(int(4.0),res0)) )) * abs(abs(mod(i1,abs(( ( res0 * in0 ) + res0 ))))) )))), abs(( max(int(4.0), in2) + abs(int(8.0)) ))) - mod(mod(min(int(9.0), int(9.0)),in1),int(5.0)) ), divInt(i0,( int(0.0) - i2 ))))) ), res0)))) == int(5.0):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 58, 58, 5, 3, 2, 9, 5, 4, 1, 1, 60, 2, 237, 59, 62, 33, 28]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1, 1], [2, 9, 9, 2], [1], [0], [], [1], [0], [], [], [], [5, 6, 1, 2], [0], [3, 1, 3, 0, 3, 0, 2, 1, 1, 2, 1, 0], [0, 0], [0, 2, 1], [0, 0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(2.0), abs(in2)) \\g max(res0, ( int(9.0) + int(9.0) ))\\ni1 = ( int(2.0) + i2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 12, 2, 3, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 0, 3, 3, 6, 2, 5, 5, 1, 0, 7, 8, 7, 3, 5, 2, 3, 2, 2, 9, 1, 6, 0, 8, 7, 0, 1, 1, 1, 5, 2, 9, 6, 3, 5, 9, 2, 4, 6, 9, 6, 9, 2, 0, 4, 0, 7, 3, 1, 1, 5, 4, 3, 9, 1, 5, 4, 8, 0, 2], [], [], [], [], [], [], [], [], [4, 4, 6, 4, 1, 4, 4, 2, 2, 0, 2, 4, 5, 2, 1, 2, 5, 5, 2, 1, 2, 5, 6, 3, 0, 5, 1, 3, 6, 2, 5, 3, 6, 2, 6, 1, 4, 2, 3, 2, 4, 3, 4, 2, 1, 0, 0, 4, 4, 2, 1, 0, 3, 4, 0, 1, 3, 0, 0, 0, 6, 4, 6, 5], [1], [2, 3, 0, 2, 2, 2, 3, 2, 1, 1, 1, 1, 1, 2, 3, 3, 3, 0, 2, 0, 2, 0, 3, 3, 2, 3, 3, 3, 3, 2, 1, 1, 3, 0, 1, 3, 3, 2, 0, 3, 0, 3, 2, 3, 2, 1, 3, 0, 0, 0, 3, 1, 3, 3, 3, 1, 1, 1, 3, 3, 2, 2, 2, 3, 2, 3, 3, 1, 0, 1, 3, 3, 2, 1, 0, 0, 1, 1, 1, 0, 0, 2, 0, 2, 1, 0, 2, 2, 2, 2, 2, 3, 1, 3, 0, 2, 1, 2, 2, 3, 0, 3, 3, 1, 3, 3, 3, 1, 0, 1, 2, 0, 2, 3, 0, 3, 0, 3, 3, 0, 0, 0, 1, 1, 3, 1, 1, 3, 0, 2, 2, 3, 0, 2, 2, 2, 1, 2, 0, 3, 3, 2, 3, 1, 1, 2, 3, 3, 2, 3, 3, 1, 3, 0, 2, 3, 0, 1, 0, 2, 2, 3, 3, 0, 2, 0, 0, 1, 3, 0, 1, 3, 0, 2, 1, 1, 3, 1, 2, 2, 1, 2, 0, 1, 2, 3, 1, 3, 2, 1, 2, 3, 0, 3, 2, 1, 1, 1, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 1, 2, 0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 2, 3, 0, 3, 3, 1, 3, 1, 3, 0, 1, 0, 0, 0, 0, 3, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 3, 1, 3, 2, 0, 2, 2, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 2, 2, 2, 0, 2, 0, 2, 1, 2, 1, 1, 1, 2, 0, 0, 0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 0, 2, 0, 0, 2, 2], [2, 1, 1, 1, 2, 0, 0, 0, 1, 0, 2, 2, 0, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 2, 2, 2, 1, 0, 1, 2, 0, 2], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= ( min(in1, ( ( ( min(mod(int(8.0),int(0.0)), int(3.0)) - int(3.0) ) - int(6.0) ) - ( abs(abs(abs(res0))) * ( in1 + ( i1 + min(abs(divInt(min(abs(max(abs(( int(2.0) + int(5.0) )), max(in1, int(5.0)))), max(max(divInt(in1,abs(i2)), min(divInt(min(divInt(int(1.0),min(i2, i0)), i2),abs(int(0.0))), min(min(max(int(7.0), int(8.0)), int(7.0)), abs(max(( mod(( max(( min(min(int(3.0), in1), int(5.0)) - min(max(mod(int(2.0),in2), i2), int(3.0)) ), int(2.0)) + int(2.0) ),i1) * i2 ), divInt(in2,( int(9.0) * in2 ))))))), ( divInt(( ( divInt(min(int(1.0), max(i2, ( int(6.0) + ( mod(min(i1, abs(abs(int(0.0)))),abs(min(max(int(8.0), i2), int(7.0)))) - mod(in2,( max(res0, min(in0, max(abs(i0), in2))) - i1 )) ) ))),int(0.0)) * int(1.0) ) * abs(int(1.0)) ),int(1.0)) - abs(in0) ))),mod(divInt(min(res0, mod(( ( int(5.0) - mod(i2,min(max(divInt(min(int(2.0), int(9.0)),( max(max(( max(max(int(6.0), max(in2, mod(max(in0, int(3.0)),res0))), ( mod(max(max(i2, ( res0 * i1 )), int(5.0)),abs(in1)) * int(9.0) )) - max(i2, ( int(2.0) - int(4.0) )) ), max(int(6.0), ( mod(int(9.0),mod(in0,int(6.0))) + ( max(int(9.0), abs(( int(2.0) * ( max(i2, abs(( int(0.0) - int(4.0) ))) - int(0.0) ) ))) + ( mod(in1,in0) + in1 ) ) ))), int(7.0)) * mod(mod(( int(3.0) - int(1.0) ),( i2 - max(divInt(mod(( mod(int(1.0),divInt(( i1 * ( ( divInt(abs(i0),max(max(int(5.0), abs(int(4.0))), min(i0, int(3.0)))) * in1 ) * in1 ) ),i2)) - i1 ),abs(int(9.0))),( min(int(1.0), i0) + min(int(5.0), in0) )), in1) )),divInt(abs(int(4.0)),abs(( i0 - divInt(( i1 * in0 ),int(8.0)) )))) )), i0), i0)) ) + int(0.0) ),i0)),res0),int(2.0)))), mod(in1,res0)) ) ) ) )) * in2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 60, 60, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 268, 72, 73, 41, 32]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 2, 1, 0, 2, 2, 1, 0, 0], [1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 9, 0, 4, 3, 9, 4, 5, 2, 4, 6, 0, 9, 8, 6, 9, 4, 7, 1, 2, 7, 8, 1, 8, 7, 4, 3, 5, 3, 5, 5, 6], [2, 1, 4, 4], [0, 0, 2, 1, 0, 2, 2], [0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [0, 3, 3, 3, 0, 3, 1, 0, 2, 0, 2, 0, 2, 0], [1], [1, 0, 0], [3, 5, 0, 0, 5, 4, 4, 6, 2, 3, 1, 3, 5, 6, 1, 4, 4, 5, 0, 3, 2, 6], [1, 0, 0, 1, 1], [3, 0, 0, 2, 3, 1, 1, 1, 1, 2, 1, 3, 2, 2, 2, 1, 0, 0, 0, 3, 3, 3, 3, 1, 3, 1, 0, 3, 2, 0, 1, 3, 2, 1, 3, 3, 3, 3, 1, 2, 0, 3, 1, 2, 0, 1, 0, 3, 3, 2, 2, 1, 0, 3, 1, 1, 3, 1, 3, 2, 3, 1, 2, 2, 2, 1, 2, 3, 0, 1, 1, 3, 2, 1, 1, 2, 3, 1, 1, 0, 1, 1, 3, 2, 1, 1, 3, 3, 1, 0, 3, 3, 3, 1, 0, 0, 1, 2, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 1, 1, 0, 2, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 0, 1, 2, 0, 2, 0, 0, 2, 1, 1, 2], [1, 0, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 2, 2], [0, 0, 0, 1, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile ( ( min(in0, in2) == divInt(abs(int(7.0)),int(3.0)) and ( b0 and ( False and b2 ) ) ) and not b1 ):{:\\nif not int(9.0) \\g int(0.0):{:\\ni0 -= ( int(4.0) + max(( ( ( int(3.0) + i0 ) + in2 ) - in1 ), max(min(abs(min(int(9.0), min(int(4.0), in1))), abs(( res0 + int(5.0) ))), abs(divInt(int(2.0),abs(max(abs(abs(int(4.0))), ( i2 * min(int(6.0), divInt(in0,int(0.0))) ))))))) )\\n:}else:{:\\nif b0:{:\\ni1 = in0\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = min(max(mod(( int(9.0) - res0 ),abs(int(8.0))), int(6.0)), abs(int(9.0)))\\nloopBreak% = 0\\nwhile min(( max(int(4.0), ( mod(( int(7.0) * ( abs(i1) - int(1.0) ) ),int(2.0)) * min(mod(int(7.0),int(8.0)), mod(abs(int(1.0)),int(8.0))) )) - in1 ), int(7.0)) \\le int(4.0):{:\\nif not b2:{:\\nin1 *= min(mod(int(3.0),int(5.0)), min(abs(int(3.0)), in2))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = max(max(abs(int(5.0)), i0), in0) \\le int(5.0)\\ni2 *= divInt(res0,int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 33, 33, 4, 7, 4, 18, 4, 14, 1, 3, 22, 5, 100, 20, 30, 14, 9]}, {"genotype": [[0], [0, 1, 1, 0, 1], [0, 2, 2, 0, 0], [1, 1], [0, 0, 1], [1, 1, 1, 1, 1], [1, 4, 6, 6, 6], [1], [1, 2, 0, 0, 1, 0], [1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0], [2, 0, 3, 2, 3, 0, 0, 1, 2, 0], [0], [], [5, 3, 4, 0, 5], [1], [3, 2, 2, 1, 0, 2, 1, 3, 3, 1, 3, 1, 0, 3, 0, 2, 0, 1], [1, 0, 1, 0], [0, 2, 0, 2, 2], [1, 2, 2], [0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not b2\\nloopBreak% = 0\\nwhile ( not ( min(divInt(( int(1.0) - in2 ),divInt(int(4.0),abs(min(int(6.0), abs(int(6.0)))))), in0) \\g abs(in1) or b0 ) or b0 ):{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = not b0\\ni0 *= ( in2 * int(6.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 5, 5, 1, 6, 2, 11, 1, 10, 1, 0, 5, 1, 18, 4, 5, 3, 2]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 1], [], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 6, 2, 6, 6, 3, 6, 2, 2, 4, 0, 9, 2, 1, 9, 2, 4, 8, 3, 4, 7, 6, 7, 1, 4, 1, 6, 0, 5, 5, 7, 3, 5, 9, 0, 4, 3, 4, 7, 0, 0, 6, 5, 1, 3, 7, 8, 3, 6, 7, 9, 3, 6, 6, 6, 0, 2], [1, 2], [2, 0], [], [1, 1], [0, 0], [], [], [], [4, 0, 1, 6, 0, 5, 5, 1, 2, 6, 5, 5, 0, 4, 6, 2, 1, 2, 3, 6, 3, 0, 5, 3, 6, 0, 6, 5, 5, 6, 6, 2, 2, 3, 1, 4, 3, 6, 5, 6, 4, 1, 0, 2, 6, 2, 0, 6, 4, 1, 1, 5, 1, 2], [1, 1], [0, 0, 2, 2, 3, 1, 2, 2, 3, 3, 2, 3, 0, 2, 0, 0, 2, 3, 3, 1, 2, 2, 1, 0, 0, 3, 2, 1, 1, 1, 1, 2, 0, 3, 0, 0, 2, 3, 3, 3, 2, 2, 2, 1, 2, 1, 0, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 0, 0, 3, 0, 1, 2, 2, 3, 0, 1, 1, 0, 2, 3, 2, 1, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 2, 2, 1, 2, 1, 1, 3, 2, 0, 0, 0, 0, 2, 0, 2, 3, 3, 0, 3, 1, 1, 1, 2, 3, 3, 2, 1, 2, 3, 3, 0, 0, 2, 2, 1, 2, 2, 2, 3, 2, 3, 1, 3, 2, 2, 0, 1, 0, 1, 1, 1, 1, 2, 1, 3, 0, 1, 1, 1, 2, 1, 3, 2, 0, 2, 1, 1, 2, 0, 1, 3, 0, 2, 2, 3, 0, 1, 0, 3, 3, 1, 3, 2, 0, 1, 0, 3, 3, 1, 3, 2, 0, 3, 1, 3, 0, 2, 1, 3, 2, 3, 2, 3, 1, 0, 1, 3, 3, 2, 0, 1, 2, 0, 0, 2, 0, 2, 1, 2, 1, 3, 2, 0, 0, 2, 1, 2, 0, 2, 2, 3, 0, 1, 0, 3, 1, 0, 1, 2, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 2, 2, 0, 1, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 2, 1, 0, 2, 0, 2, 0, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 0, 2, 1, 0, 2, 0, 0, 1], [0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 1, 0, 1, 1, 2, 2, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in1 \\g i0\\nb0 = mod(divInt(min(int(4.0), ( mod(min(max(( abs(i1) + divInt(res0,i0) ), ( abs(min(int(2.0), ( mod(int(6.0),in2) - in2 ))) + max(( int(2.0) + int(6.0) ), int(6.0)) )), int(3.0)),mod(i1,min(i2, res0))) + mod(max(abs(min(divInt(divInt(( int(6.0) - divInt(int(2.0),in2) ),int(2.0)),int(4.0)), mod(mod(int(0.0),( int(9.0) * int(2.0) )),int(1.0)))), ( in2 + i0 )),max(in1, int(9.0))) )),( ( max(res0, int(2.0)) * int(4.0) ) + i2 )),mod(max(divInt(int(8.0),i1), mod(mod(min(i2, ( int(3.0) - max(( in0 * res0 ), divInt(( int(4.0) * ( int(7.0) + int(6.0) ) ),abs(divInt(in0,i0)))) )),in2),in0)),divInt(res0,divInt(abs(max(i0, min(int(7.0), int(1.0)))),int(4.0))))) == mod(abs(min(( int(1.0) - mod(abs(min(res0, in2)),mod(( int(6.0) + ( ( ( max(( min(int(0.0), abs(( divInt(in2,int(5.0)) - res0 ))) - int(5.0) ), int(7.0)) * int(3.0) ) * int(5.0) ) + ( int(9.0) + min(res0, int(0.0)) ) ) ),int(4.0))) ), int(3.0))),divInt(int(4.0),min(( i2 - divInt(int(7.0),int(0.0)) ), ( i2 + int(0.0) ))))\\nin0 -= min(i1, divInt(( max(in1, int(6.0)) - in0 ),min(max(int(5.0), min(( res0 + int(1.0) ), in2)), max(min(int(3.0), max(mod(res0,max(int(7.0), abs(in1))), mod(int(8.0),min(( abs(( max(int(3.0), i1) + int(6.0) )) - min(abs(( i0 - int(7.0) )), divInt(i2,res0)) ), ( i2 - ( int(9.0) * divInt(int(3.0),min(mod(i0,res0), ( int(6.0) + divInt(in1,mod(( min(i1, int(6.0)) * i1 ),max(int(6.0), in2))) ))) ) ))))), int(0.0)))))\\ni1 -= divInt(int(2.0),i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 58, 58, 2, 2, 0, 2, 2, 0, 0, 0, 54, 2, 225, 68, 47, 35, 35]}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 0, 0, 1, 2, 2, 2, 0, 1, 1, 2, 1], [0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 2, 8, 8, 7, 2, 1, 3, 4, 7, 5, 9], [2, 5], [1, 0, 2, 0], [1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0], [1, 0, 1, 1, 1, 2, 3, 2, 0], [0, 0, 0, 1], [1, 1, 0], [2, 2, 5, 5, 1, 4, 6, 0, 1, 2, 2, 3, 2, 4, 3, 2, 4, 3, 3], [1, 0, 0, 1, 1], [0, 0, 1, 2, 0, 2, 2, 2, 3, 1, 0, 2, 1, 0, 1, 2, 2, 1, 2, 0, 3, 3, 3, 0, 1, 2, 2, 1, 2, 3, 1, 2, 3, 2, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 1, 3, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 2, 2, 2, 0, 1, 0, 0], [0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb1 = b0\\ni2 += i2\\n:}else:{:\\nin2 = in2\\nif int(3.0) == mod(i1,divInt(mod(( min(int(8.0), in1) + divInt(int(2.0),res0) ),int(8.0)),divInt(divInt(int(8.0),divInt(i0,abs(abs(abs(i1))))),int(7.0)))):{:\\nloopBreak% = 0\\nwhile True:{:\\nif True:{:\\ni2 = mod(mod(int(2.0),mod(min(int(1.0), ( max(mod(int(3.0),i2), in0) + i2 )),in1)),int(4.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = False\\n:}\\nin0 -= min(i2, in1)\\nloopBreak% = 0\\nwhile not ( not int(7.0) != int(5.0) or b0 ):{:\\nin0 += min(in0, int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 13, 13, 2, 4, 1, 11, 2, 9, 4, 3, 19, 5, 48, 13, 8, 5, 11]}, {"genotype": [[0], [1], [0], [], [0], [1], [3], [2], [1], [], [1], [0], [], [], [], [5, 0], [], [0, 2, 0, 1], [1], [], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in2 == mod(i0,int(3.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [0, 1, 1, 1, 0, 1], [2, 1, 0, 2, 1, 1], [0, 1], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 3, 1, 8, 4, 5, 5, 5, 0, 9, 8, 1, 7, 2], [0, 0, 4, 2], [0, 1, 2, 0, 0], [], [0, 1, 1, 0, 1, 1], [0, 0, 0, 0], [1, 0], [0], [1], [2, 0, 6, 3, 1], [], [2, 2, 1, 1, 1, 1, 1, 3, 0, 2, 2, 3, 3, 2, 1, 1, 1, 1, 3, 1, 1, 3, 3, 3, 1, 1, 2, 0, 0, 0, 1, 2, 0, 1], [1, 1, 0, 1, 1, 1, 1], [2, 2, 0, 0, 0, 1, 1], [0], [0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb0 = divInt(divInt(int(3.0),int(5.0)),int(3.0)) \\l int(1.0)\\n:}else:{:\\nb1 = int(8.0) \\l abs(i2)\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = ( divInt(abs(min(divInt(int(4.0),int(5.0)), int(5.0))),int(5.0)) + min(int(0.0), int(9.0)) ) \\le min(max(max(int(8.0), int(1.0)), divInt(i0,res0)), in0)\\nb0 = int(7.0) == mod(i1,int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 15, 15, 4, 5, 0, 6, 4, 2, 1, 1, 5, 0, 34, 7, 7, 1, 6]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1], [6, 6], [2], [], [], [1], [0], [], [], [], [2, 4, 3], [1], [3, 0, 0, 1, 1], [], [0], [1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(i2, in1) == int(6.0):{:\\nin0 -= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 3, 1, 5, 0, 1, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [2, 2, 0, 0, 1, 0], [1, 0], [1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 8, 9, 1, 6, 5, 5, 8, 8, 4, 2, 6, 1, 9, 7, 9, 9, 2, 3, 5, 0, 5, 4, 7, 3, 8, 1, 8, 8, 3, 6, 5, 2, 7, 0, 1, 0, 8, 1, 1, 5, 1, 6, 8, 3, 9, 6, 5, 4, 6, 3, 6, 6, 4, 8, 2, 4, 0, 6, 1, 0, 4, 8, 1, 0, 6, 0, 6, 9, 2, 6, 0, 2, 7, 4, 7], [3, 2, 5], [1, 1, 1, 2, 1], [0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0], [1, 3, 3, 2, 3, 1, 0, 3, 1, 3, 0, 0], [1, 0, 0], [0], [4, 6, 3, 4, 4, 6, 0, 1, 4, 2, 6, 0, 5, 3, 5, 5, 0, 4, 2, 0, 5, 4, 0, 2, 2, 4, 2, 1, 6, 3, 4, 1, 5, 1, 4, 4, 2, 5, 3, 0, 4, 1, 4, 2, 0, 1, 6, 5, 6, 2, 2, 5, 6, 1, 3, 4, 2, 3, 3, 4, 6, 2, 4, 6, 2, 0, 3, 0, 1, 0, 6, 2, 3, 4, 6, 3, 1, 2, 3, 0, 1, 5, 6], [1, 0], [3, 2, 2, 0, 2, 3, 3, 1, 3, 1, 1, 1, 3, 2, 2, 2, 1, 1, 0, 1, 3, 1, 0, 2, 3, 2, 2, 3, 2, 1, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 3, 3, 3, 1, 1, 0, 2, 2, 0, 2, 1, 3, 0, 3, 0, 3, 1, 2, 3, 2, 3, 0, 0, 1, 3, 3, 3, 2, 0, 2, 1, 1, 3, 2, 1, 1, 0, 2, 1, 3, 1, 3, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 2, 2, 3, 0, 1, 0, 0, 1, 1, 0, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 0, 2, 1, 0, 0, 2, 3, 3, 1, 3, 2, 3, 0, 3, 0, 1, 0, 3, 3, 2, 3, 1, 1, 2, 0, 0, 2, 0, 3, 3, 1, 2, 3, 1, 3, 0, 1, 0, 1, 2, 0, 2, 2, 3, 3, 0, 3, 3, 1, 3, 3, 2, 0, 0, 3, 1, 1, 0, 0, 2, 0, 2, 1, 2, 1, 0, 1, 2, 3, 0, 2, 3, 3, 2, 3, 3, 3, 3, 2, 0, 1, 0, 0, 3, 1, 2, 1, 1, 0, 2, 3, 3, 0, 0, 3, 2, 2, 3, 1, 0, 1, 2, 3, 2, 2, 2, 1, 3, 3, 0, 3, 3, 0, 2, 0, 1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 3, 0, 3, 2, 1, 3, 0, 1, 3, 2, 0, 3, 0, 2, 3, 1, 0, 0, 2, 2, 2, 1, 0, 3, 2, 3, 3, 2, 3, 3, 2, 2, 1, 1, 3, 3, 2, 2, 1, 0, 0, 3, 3, 1, 0, 3, 1, 0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 1, 3, 2, 3, 0, 3, 3, 2, 0, 1, 3, 3, 2, 2, 2, 2, 2, 0, 3, 1, 0, 1, 1, 0, 1, 3, 0, 0, 0, 3, 2, 0, 1, 0, 2, 0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 0, 1, 0, 2, 2, 0, 0, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0, 1, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 1, 1, 2, 0, 1, 1, 2, 2, 0, 1, 2, 0, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 0, 1, 2, 1, 1, 2], [0, 1, 1, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 0, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nif max(divInt(( in1 + mod(min(min(int(5.0), max(int(2.0), int(8.0))), int(9.0)),max(( ( divInt(int(1.0),int(6.0)) - res0 ) - int(5.0) ), max(int(5.0), in0))) ),( min(( ( min(mod(int(8.0),abs(mod(int(8.0),( int(4.0) + ( int(2.0) * int(6.0) ) )))), int(1.0)) + int(9.0) ) - in1 ), min(abs(min(int(7.0), int(9.0))), in1)) - mod(divInt(res0,( int(9.0) - max(i0, abs(i1)) )),abs(int(2.0))) )), mod(abs(divInt(min(in1, i2),int(3.0))),abs(min(max(divInt(res0,mod(int(5.0),int(0.0))), min(mod(int(5.0),int(4.0)), i0)), ( int(7.0) + abs(int(3.0)) ))))) \\ge abs(( ( mod(( in2 * mod(divInt(divInt(mod(in0,in2),( ( min(in2, int(8.0)) - i0 ) + in1 )),int(1.0)),int(8.0)) ),i2) + int(8.0) ) * min(min(abs(min(int(3.0), max(min(int(6.0), max(i0, ( int(5.0) * in2 ))), in1))), ( abs(max(int(2.0), min(( max(i0, max(i2, int(7.0))) + i2 ), min(min(mod(abs(int(0.0)),int(1.0)), mod(in1,i2)), ( i1 * abs(abs(int(0.0))) ))))) * ( abs(int(8.0)) + min(res0, int(1.0)) ) )), in0) )):{:\\nin1 *= int(1.0)\\n:}\\nb1 = divInt(i1,mod(( min(max(in2, min(min(int(5.0), abs(abs(divInt(i1,in1)))), abs(int(1.0)))), int(6.0)) - in1 ),i2)) == mod(in2,( int(8.0) * ( int(3.0) - in0 ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( ( not ( True and int(9.0) != ( abs(i0) + ( min(abs(mod(min(abs(min(abs(divInt(in1,int(6.0))), i1)), in1),max(int(5.0), divInt(int(4.0),int(6.0))))), i2) + ( max(abs(i0), i1) - min(( divInt(max(int(3.0), res0),int(6.0)) - ( max(( mod(divInt(int(6.0),abs(abs(in2))),min(max(res0, ( i2 - int(4.0) )), abs(min(( int(8.0) * i2 ), int(2.0))))) - in2 ), res0) * int(4.0) ) ), max(i1, max(( int(0.0) - max(in0, int(6.0)) ), abs(mod(in1,max(i2, divInt(min(int(1.0), in0),in0))))))) ) ) ) ) and b1 ) or ( True and ( b2 and b1 ) ) )\\nin1 = mod(mod(( int(0.0) - res0 ),max(divInt(max(max(( max(max(( divInt(int(4.0),int(8.0)) - max(max(mod(divInt(int(1.0),i2),in1), min(abs(int(0.0)), res0)), max(int(6.0), i2)) ), i0), mod(in0,divInt(i0,( ( i1 * i0 ) - int(0.0) )))) - max(( max(res0, min(min(mod(i2,int(6.0)), max(abs(( divInt(( ( divInt(in0,max(int(9.0), in1)) * int(2.0) ) * int(6.0) ),res0) * int(0.0) )), max(in0, i1))), i2)) - abs(( in0 * int(2.0) )) ), i0) ), divInt(i1,int(7.0))), int(4.0)),in2), res0)),int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 77, 77, 3, 5, 5, 15, 3, 12, 3, 1, 83, 2, 337, 85, 94, 43, 43]}, {"genotype": [[0], [1], [1], [], [1], [1], [8], [], [], [], [], [], [], [], [], [0, 2, 1], [1], [2, 3, 3, 1, 0, 3, 0], [0], [2, 0, 2], [0, 1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += ( abs(min(int(8.0), i2)) - abs(i1) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 7, 1, 3, 2, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 6, 2, 6, 2, 6, 1, 4, 6, 9, 5, 0, 9, 7, 3, 3, 7, 0, 6, 4, 3], [1], [1], [], [1], [0], [], [], [], [0, 5, 6, 4, 1, 6, 0, 6, 2, 3, 1, 6, 0, 4, 2, 4, 2, 1, 3, 5], [], [2, 3, 3, 0, 2, 2, 3, 0, 3, 0, 3, 2, 2, 1, 2, 2, 2, 3, 1, 3, 1, 3, 3, 0, 0, 3, 2, 2, 3, 1, 3, 2, 1, 3, 1, 0, 2, 3, 1, 3, 0, 3, 2, 2, 0, 0, 3, 1, 3, 1, 0, 0, 1, 1, 3, 3, 2, 1, 3, 0, 0, 2, 0, 3, 1, 0, 1, 1, 2, 2, 2, 3, 3, 2, 0, 1, 1, 2, 1, 2, 2, 3, 1, 3, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 2, 1, 2, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 1, 2, 0, 2, 0, 0, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 0, 2, 2, 2], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(min(min(i0, ( ( max(in2, abs(res0)) + max(( ( int(5.0) + mod(( divInt(abs(int(9.0)),abs(int(6.0))) * abs(min(in1, i1)) ),abs(mod(mod(max(int(2.0), max(divInt(int(6.0),min(int(2.0), res0)), ( abs(int(6.0)) - max(i0, min(( ( res0 + i2 ) + max(int(1.0), min(int(4.0), in0)) ), i1)) ))),int(6.0)),int(9.0)))) ) - max(abs(( int(5.0) - min(res0, i0) )), divInt(in1,abs(int(0.0)))) ), i2) ) + int(9.0) )), int(7.0)),mod(( ( min(min(( in1 * int(3.0) ), int(3.0)), mod(int(7.0),divInt(divInt(max(int(0.0), abs(i2)),int(6.0)),int(4.0)))) * i1 ) * in0 ),int(3.0))) \\g in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 22, 22, 1, 1, 0, 1, 1, 0, 0, 0, 20, 0, 91, 23, 26, 12, 11]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1], [1, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 3, 8, 4, 8, 7, 5, 7, 4, 8, 1], [4, 1, 4, 4, 3], [0, 0, 2, 0], [1], [0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 3], [], [1], [2, 5, 0, 6, 6, 6, 4, 5, 0, 2, 3, 1, 4, 1, 0, 3], [1, 1, 0, 0], [2, 1, 1, 2, 1, 1, 0, 1, 3, 1, 0, 0, 1, 0, 1, 3, 0, 1, 3, 3, 1, 0, 2, 0, 2, 2, 3, 2, 0, 0, 3, 3, 3, 3, 0, 1, 3, 0, 0, 1], [0, 1, 1, 0, 1, 1], [0, 2, 0, 2, 1, 2, 2, 2, 0, 2], [0, 2, 2, 1], [0, 0, 0, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += ( int(8.0) * int(6.0) )\\nb0 = b0\\nif divInt(int(3.0),int(8.0)) \\le in2:{:\\ni0 *= int(4.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile ( min(int(8.0), res0) \\g res0 or int(7.0) \\le res0 ):{:\\nin1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = abs(in2) \\le int(7.0)\\ni0 = min(abs(int(4.0)), i2)\\n:}\\nb0 = divInt(in0,( divInt(max(divInt(i1,in1), abs(abs(abs(min(i1, int(8.0)))))),abs(i0)) - in0 )) \\ge int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 2, 7, 12, 12, 5, 4, 1, 7, 5, 2, 0, 1, 16, 4, 40, 6, 10, 4, 4]}, {"genotype": [[0], [1], [0], [], [0], [], [], [2], [0], [], [1], [0], [], [], [], [0, 6], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i0 == res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1], [2, 2, 1, 1, 1, 0, 1], [0, 1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 5, 6, 4, 0, 5, 9, 1, 9, 5, 1, 7, 0, 6, 3, 8, 8, 0, 9, 6], [0, 3, 4, 4, 3, 0], [2, 1], [0, 1, 1], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 3, 1, 3, 2], [0], [1], [5, 0, 1, 3, 2, 2, 6, 3, 5, 2, 1, 0, 3, 6, 6, 4, 4, 2, 6, 5, 5, 1, 3, 3, 3, 5, 3, 5], [0, 1, 1], [3, 1, 3, 1, 1, 0, 0, 0, 3, 0, 3, 0, 2, 1, 1, 3, 0, 0, 2, 2, 3, 0, 2, 0, 2, 3, 0, 0, 1, 3, 1, 3, 3, 3, 3, 1, 0, 0, 0, 2, 2, 2, 1, 2, 2, 1, 1, 0, 1, 2, 0, 2, 3, 3, 3, 0, 3, 1, 1, 3, 2, 2, 1, 1, 2, 2, 0, 0, 0, 3, 3, 1, 2, 2, 1, 3, 1, 2, 2, 1, 1, 0, 0, 0, 2, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 2, 0, 1, 2, 2, 2, 1, 1, 1, 0, 2, 2, 1, 2, 1, 2, 2, 2], [0, 1, 1, 1, 2, 1, 0, 2, 2, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(int(9.0), min(int(1.0), int(5.0))) \\l in2:{:\\nloopBreak% = 0\\nwhile ( ( i0 \\ge i1 and abs(in0) \\le min(i2, divInt(int(6.0),int(4.0))) ) or max(i2, res0) \\le mod(( abs(in0) + divInt(in2,( abs(i2) - i1 )) ),int(0.0)) ):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 = abs(int(5.0))\\n:}\\nin0 -= max(max(max(min(int(9.0), res0), res0), in1), ( mod(mod(int(1.0),( ( int(9.0) - int(5.0) ) * in1 )),int(1.0)) - ( i2 + mod(abs(abs(max(res0, abs(int(7.0))))),int(0.0)) ) ))\\nin2 *= max(divInt(divInt(int(6.0),int(3.0)),divInt(( in2 * i1 ),in0)), abs(abs(int(8.0))))\\nb1 = ( not mod(( int(8.0) - abs(int(0.0)) ),mod(mod(int(9.0),int(6.0)),in0)) \\ge in0 or in2 \\l ( in0 + in2 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 21, 21, 6, 2, 3, 11, 6, 5, 1, 1, 28, 3, 87, 21, 20, 11, 12]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [0, 0, 1], [1, 1, 1, 1, 1], [0, 9, 8, 0, 5], [0], [1, 0, 1], [], [1, 0], [0], [0], [], [], [3, 2], [1], [2, 3, 1, 2, 1, 0, 1, 1, 1], [0, 0], [0], [0, 1, 0], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( min(int(0.0), ( int(9.0) + in0 )) - int(8.0) ) \\l int(0.0)\\nb0 = b1\\ni2 += int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 5, 5, 1, 3, 0, 2, 1, 1, 0, 0, 2, 1, 9, 2, 1, 3, 0]}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1], [2, 0, 2, 0, 2, 1, 0], [0, 0, 0], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 4, 9, 2, 2, 8, 9, 6, 2], [1, 3, 1, 3], [2, 0, 0, 0], [1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0], [3, 2, 1, 3, 2, 2, 0, 0], [0], [1, 0, 1], [6, 3, 0, 3, 1, 2, 6, 0, 3, 4, 5, 0, 0], [1, 0], [2, 3, 1, 3, 2, 2, 0, 0, 3, 3, 1, 1, 3, 0, 2, 2, 1, 0, 1, 2, 2, 3, 3, 2, 1, 0, 0, 3, 1, 0, 0, 1, 1, 0, 1, 0, 3, 0], [1, 1, 0, 1, 0, 1, 0, 1], [2, 1, 2, 1, 2, 1, 2, 2, 2], [2, 1, 2, 1], [0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(abs(int(5.0)),max(mod(( res0 * in0 ),abs(max(int(1.0), int(4.0)))), abs(i0))) \\g divInt(( int(9.0) - in0 ),int(2.0)):{:\\nb2 = ( mod(( max(abs(divInt(int(2.0),i1)), i2) * abs(int(8.0)) ),res0) \\ge i0 or not True )\\n:}else:{:\\nif int(9.0) \\g int(6.0):{:\\nin0 -= in1\\n:}\\nif int(2.0) \\ge in2:{:\\nb0 = ( not not b0 and b0 )\\n:}else:{:\\ni0 = abs(i0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 10, 10, 4, 4, 2, 12, 4, 8, 1, 3, 13, 2, 38, 8, 9, 4, 5]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1], [2, 0, 2, 0, 0, 0, 0], [1, 1], [0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 0, 3, 5, 1, 2, 4, 5, 6, 5, 1, 5, 8, 6, 3, 9, 2, 8, 9, 6, 1, 7, 8, 1], [2, 5, 0], [0, 2, 0], [], [0, 1, 0, 1, 0, 1], [0, 0, 0], [2, 2, 0], [], [], [0, 3, 3, 5, 3, 6, 4, 2, 5, 3, 0, 5, 6, 0, 2, 1, 2, 5, 0, 2, 3, 2], [0, 0, 0], [1, 1, 1, 1, 2, 0, 3, 3, 2, 2, 1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 2, 0, 0, 2, 3, 1, 1, 3, 1, 2, 1, 3, 2, 1, 3, 1, 1, 2, 3, 2, 1, 1, 0, 0, 3, 2, 3, 0, 1, 2, 1, 2, 2, 3, 0, 2, 0, 3, 2, 3, 3, 1, 1, 0, 0, 0, 2, 3, 2, 2, 1, 3, 1, 0, 1, 3, 1, 0, 3, 2, 1, 3, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 2, 0, 2, 0, 0, 1, 0, 2, 0, 2, 0, 2], [0, 0, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2], [0, 0, 1, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not int(7.0) == int(2.0):{:\\nb0 = not int(0.0) != int(3.0)\\nloopBreak% = 0\\nwhile b2:{:\\ni0 = ( in0 + max(min(( ( int(5.0) + in0 ) * int(1.0) ), in2), int(2.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = res0\\nb0 = ( divInt(in1,( ( i2 * in2 ) - divInt(min(int(4.0), int(5.0)),max(int(6.0), mod(int(5.0),min(( int(1.0) * max(int(5.0), int(8.0)) ), divInt(abs(( int(6.0) - int(3.0) )),in0))))) )) * i0 ) \\l min(( abs(in2) * int(9.0) ), ( int(2.0) * mod(( min(res0, ( i0 * min(mod(max(min(int(8.0), int(9.0)), i2),i1), i2) )) - ( abs(divInt(divInt(int(6.0),min(int(1.0), in2)),int(7.0))) * abs(int(8.0)) ) ),i0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = min(( int(1.0) * abs(in0) ), i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 25, 25, 3, 3, 0, 6, 3, 3, 0, 0, 22, 3, 84, 22, 18, 14, 8]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1], [5, 5, 9], [], [], [], [], [], [], [], [], [0, 5, 2, 5], [1, 0], [3, 1, 2, 1, 1, 3, 0, 0], [1], [0, 1], [0], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += min(int(5.0), mod(int(5.0),int(9.0)))\\nin2 = max(i2, in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 8, 1, 2, 1, 1]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 2, 1, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 2, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 6, 0, 7, 0, 8, 0, 3, 3, 6, 2, 8, 6, 1, 2, 7, 8, 7, 7, 4, 9, 8, 3, 5, 5, 8, 4, 5, 3, 8, 8, 7, 9, 9, 0, 3, 9, 6, 1, 2, 0, 2, 1, 6, 1, 2, 6, 0, 0, 5, 3, 4, 2, 4, 9, 8, 9, 1, 6, 3, 6, 4, 7, 0, 5, 5, 8], [4, 0, 5, 2, 0, 4, 4, 0, 0, 5, 1, 0, 5], [0, 2, 1, 2, 1, 0, 1, 1, 2, 2, 1, 2, 1], [0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 3, 0, 0, 0, 3, 1], [1], [1, 1, 0], [3, 0, 3, 0, 0, 3, 5, 1, 6, 4, 5, 4, 0, 3, 1, 1, 6, 5, 4, 0, 4, 1, 5, 5, 4, 3, 5, 5, 5, 4, 5, 3, 3, 3, 5, 6, 4, 1, 1, 3, 4, 0, 0, 4, 6, 4, 5, 1, 3, 5, 6, 0, 0, 5, 2, 5, 1, 2, 6, 3, 1, 1], [1, 1, 1], [1, 0, 2, 3, 2, 3, 0, 1, 0, 2, 3, 3, 2, 1, 2, 1, 0, 1, 2, 3, 3, 1, 1, 3, 1, 3, 0, 0, 1, 1, 2, 3, 3, 3, 1, 1, 3, 3, 2, 0, 1, 1, 3, 2, 2, 3, 3, 1, 3, 1, 2, 2, 2, 1, 2, 0, 3, 1, 3, 0, 3, 3, 2, 0, 1, 1, 2, 1, 3, 0, 0, 0, 3, 3, 3, 3, 2, 1, 3, 2, 1, 0, 3, 0, 1, 2, 2, 0, 3, 3, 2, 0, 2, 1, 1, 3, 2, 1, 0, 0, 1, 3, 1, 3, 2, 1, 0, 2, 2, 1, 0, 2, 3, 2, 2, 2, 3, 1, 2, 2, 2, 0, 0, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 3, 2, 1, 1, 0, 0, 0, 3, 1, 3, 2, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 1, 3, 1, 0, 3, 2, 1, 1, 1, 0, 3, 0, 0, 3, 1, 2, 0, 2, 1, 0, 2, 2, 1, 0, 3, 1, 3, 0, 2, 3, 1, 3, 1, 1, 3, 2, 3, 2, 3, 3, 1, 2, 3, 0, 3, 3, 0, 0, 3, 2, 1, 1, 3, 0, 1, 1, 3, 3, 1, 2, 0, 0, 3, 0, 2, 0, 2, 2, 1, 2, 0, 1, 3, 0, 1, 3, 2, 2, 2, 0, 0, 1, 0, 1, 1, 0, 1, 1, 3, 0, 2, 1, 0, 2, 1, 1, 3, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [2, 2, 0, 0, 1, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 0, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 1, 1, 0, 1, 2, 1, 2, 2, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 2, 0, 0, 2], [2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 2, 1, 0, 2, 1, 2, 2, 1, 1, 2, 2, 0, 1, 2, 2, 2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = int(0.0) \\le in0\\nloopBreak% = 0\\nwhile mod(abs(mod(abs(i0),int(7.0))),in0) \\l divInt(min(min(( int(5.0) * ( int(6.0) * i0 ) ), int(0.0)), ( max(min(int(7.0), int(0.0)), abs(int(8.0))) * abs(i0) )),in0):{:\\nloopBreak% = 0\\nwhile int(0.0) != int(3.0):{:\\nb1 = not divInt(abs(max(abs(int(3.0)), int(6.0))),abs(max(( in2 * int(2.0) ), int(8.0)))) == abs(divInt(( abs(abs(int(6.0))) + abs(int(1.0)) ),mod(( divInt(int(2.0),mod(i1,min(int(7.0), max(res0, abs(min(( in1 - int(8.0) ), int(7.0))))))) - mod(int(7.0),min(in2, in1)) ),i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not not ( abs(min(min(abs(( int(4.0) - max(mod(int(9.0),in0), abs(i1)) )), int(8.0)), divInt(( i1 - abs(max(divInt(res0,( int(3.0) * int(5.0) )), max(mod(int(5.0),in2), in1))) ),int(8.0)))) \\l min(int(4.0), max(( int(5.0) * i0 ), divInt(( int(3.0) - in1 ),( abs(mod(( ( max(int(8.0), divInt(mod(divInt(i1,in2),mod(int(8.0),in2)),int(7.0))) + in1 ) * int(9.0) ),int(9.0))) - in0 )))) and ( ( in2 * abs(( int(0.0) * int(3.0) )) ) - in2 ) \\le in2 ):{:\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile in1 \\le abs(int(9.0)):{:\\nif min(( in2 - in0 ), ( int(6.0) * in0 )) \\l in0:{:\\nin2 *= mod(( min(min(abs(int(1.0)), min(int(2.0), res0)), min(divInt(int(0.0),int(2.0)), int(1.0))) + in1 ),max(i1, i1))\\n:}else:{:\\nin0 -= max(int(6.0), divInt(in1,mod(int(1.0),i0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = mod(divInt(int(2.0),i0),max(int(6.0), min(in1, mod(max(int(0.0), max(int(0.0), int(5.0))),abs(( min(( abs(max(int(3.0), divInt(min(res0, max(min(in1, in2), abs(( int(4.0) * int(2.0) )))),min(i1, int(4.0))))) * int(9.0) ), max(abs(int(8.0)), mod(in0,in2))) * abs(res0) )))))) \\l divInt(i0,( divInt(int(9.0),( i0 - int(1.0) )) + abs(in2) ))\\nb1 = int(6.0) != min(divInt(( ( i2 + in2 ) + int(3.0) ),i1), int(6.0))\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\nb2 = int(4.0) \\g i2\\nb1 = int(7.0) \\l int(0.0)\\n:}else:{:\\nif ( False and min(res0, divInt(int(5.0),in0)) != ( int(5.0) * int(8.0) ) ):{:\\ni1 += abs(i1)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 9, 11, 69, 69, 13, 13, 2, 24, 13, 11, 1, 3, 62, 3, 254, 61, 65, 32, 32]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [2, 0, 1, 2, 0, 0, 1], [1, 1], [0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 2, 5, 0, 4, 5, 7, 1, 5, 7, 2, 1, 6, 0, 2, 4, 6, 3, 5, 2, 5, 0, 6, 8, 8, 1, 8], [2, 0], [1, 2, 1], [], [1, 0, 1, 0, 0], [0, 0], [2, 1, 0], [1], [], [3, 0, 3, 4, 1, 1, 5, 0, 2], [0, 0, 0], [1, 2, 1, 2, 3, 0, 0, 1, 2, 3, 1, 2, 2, 3, 3, 1, 1, 0, 3, 3, 1, 2, 1, 2, 3, 1, 1, 0, 1, 2, 1, 3, 2, 0, 3, 2, 3, 3, 3, 2, 2, 3, 1, 1, 1, 2, 1, 1, 3, 1, 3, 2, 3, 2, 0, 3, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 1, 0, 2, 2, 2, 2, 0, 1, 0, 1, 2, 2, 1, 0, 1, 1, 2], [1, 1, 0, 1, 2], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(7.0) == divInt(int(4.0),( abs(in0) - i0 )):{:\\nb1 = not int(2.0) \\l ( max(int(5.0), mod(( min(abs(int(0.0)), int(4.0)) - in0 ),abs(abs(int(5.0))))) + divInt(int(7.0),mod(abs(int(1.0)),int(5.0))) )\\nin1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\ni1 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b1\\nin2 = mod(int(2.0),min(mod(i0,max(( min(max(abs(( mod(abs(int(1.0)),int(6.0)) - int(0.0) )), mod(int(2.0),int(4.0))), max(int(6.0), min(mod(max(mod(i2,max(int(3.0), abs(int(5.0)))), int(2.0)),int(5.0)), divInt(int(0.0),int(6.0))))) * int(8.0) ), int(8.0))), mod(int(1.0),int(8.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 28, 28, 2, 3, 0, 5, 2, 3, 1, 0, 9, 3, 69, 17, 18, 5, 12]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1], [7, 3], [5], [2, 0, 0], [], [0, 1], [0], [0], [], [], [2, 6, 4, 6, 5, 3, 5, 2], [], [0, 2, 3, 0, 2, 0, 3, 0, 2, 2, 3, 0, 2, 0, 1, 3, 1, 0, 0], [1, 1, 0, 1, 1], [2, 0, 0, 0], [0], [1, 0, 0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\nb0 = i2 != mod(abs(res0),divInt(in1,min(res0, ( divInt(min(in2, divInt(in0,int(7.0))),min(int(3.0), in2)) + i2 ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 3, 0, 2, 1, 1, 0, 0, 8, 0, 19, 5, 4, 1, 4]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 1, 8, 8, 6, 1, 0, 4, 4, 4, 3, 4, 0, 8, 0, 3, 6, 6], [1, 0, 0, 2], [0, 1, 0], [1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0], [0, 2, 3, 3, 2, 3], [], [], [3, 5, 6, 1, 6, 3, 1, 3, 1, 2, 0, 2, 2, 6, 6], [], [1, 0, 1, 2, 2, 3, 2, 0, 2, 1, 2, 0, 1, 2, 3, 2, 2, 1, 1, 0, 3, 3, 2, 0, 2, 1, 0, 1, 0, 0, 0, 2, 1, 2, 3, 3, 0, 3, 3, 0, 2, 3, 1, 3, 1, 1, 2, 3, 1, 0, 0, 2, 1, 1, 3, 2, 1, 2, 0, 3, 3, 1, 1, 0, 3, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 2, 2, 2, 0, 2, 0, 1, 0, 2, 0, 2], [2, 1, 1, 2, 2, 0, 2, 0, 1, 2, 1, 2], [1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\nb0 = not ( int(9.0) \\g in0 or ( not int(4.0) \\l ( mod(max(( in2 * ( int(1.0) - ( res0 - int(8.0) ) ) ), mod(min(( ( int(8.0) * int(6.0) ) * i1 ), min(min(( res0 + ( int(1.0) * in0 ) ), int(0.0)), i1)),in0)),i1) + mod(int(4.0),divInt(abs(abs(i2)),abs(min(i0, ( abs(int(4.0)) - min(int(4.0), int(3.0)) ))))) ) or ( ( max(int(4.0), i2) * i2 ) \\l ( int(0.0) - int(8.0) ) and min(( int(0.0) * mod(res0,abs(min(int(3.0), int(6.0)))) ), res0) == abs(int(6.0)) ) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 19, 19, 4, 3, 3, 10, 4, 6, 0, 0, 15, 0, 66, 17, 15, 12, 5]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1, 1], [5, 7], [0], [0, 2], [], [0, 1], [0], [0], [], [], [1, 6, 1, 5], [], [1, 2, 0, 3, 0, 2, 3, 2, 1, 0, 0], [1, 1, 1], [0, 2], [], [1, 0, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = int(5.0) \\l mod(i1,min(res0, divInt(abs(divInt(int(7.0),i1)),in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 1, 0, 0, 4, 0, 11, 3, 2, 0, 3]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [1, 8, 6], [5], [0], [], [1], [0], [], [], [], [6, 5], [], [1, 3, 0, 2, 0, 2, 1, 1], [0, 0], [1], [1, 0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(1.0) != max(res0, ( in2 - ( int(8.0) + int(6.0) ) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 8, 2, 1, 2, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 0, 1], [4, 5, 3, 9, 5], [1], [2], [], [1], [0], [], [], [], [1, 4, 1, 0], [], [2, 3, 2, 2, 3, 0, 1, 3, 0, 3, 3, 0, 0, 1, 3, 1, 1], [1, 1, 0], [0, 1, 2, 2, 1, 2], [1], [0, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = divInt(min(mod(( max(i1, int(4.0)) - abs(in1) ),abs(max(i1, i0))), int(5.0)),abs(int(3.0))) \\g int(95.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 17, 3, 6, 1, 2]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 0, 2, 2, 0, 2, 0, 1, 1, 2, 2, 0], [1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 3, 7, 9, 3, 1, 1, 7, 9, 6, 8, 9, 6, 5, 9, 4, 7, 9, 2, 2, 7, 8, 1, 5, 1, 8, 4, 1, 5, 0, 0, 7, 7, 3, 3, 4, 0, 6, 2, 1, 7, 4, 1, 8, 2, 5, 0, 5, 0, 1, 8, 5, 1, 0, 0, 3, 9, 7, 4, 1, 6, 3, 9, 0, 9, 8, 9, 6, 6, 5, 2, 4, 4, 2], [3, 2, 0, 0, 5, 2, 1, 4], [2, 2, 2, 0, 1, 2], [], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 1, 0, 0], [0, 1], [1, 1, 0, 1, 0, 0], [5, 3, 3, 6, 2, 5, 1, 1, 6, 2, 5, 2, 1, 2, 5, 6, 6, 6, 4, 5, 3, 3, 0, 6, 3, 1, 5, 2, 0, 4, 5, 2, 5, 0, 1, 0, 1, 2, 2, 6, 0, 4, 0, 6, 5, 4, 5, 2, 1, 0, 1, 2, 6, 1, 5, 3, 2, 4, 6, 6, 3, 6, 4, 0, 1, 2, 2, 0, 5, 5, 5, 5, 6], [0, 1, 0], [0, 1, 2, 0, 2, 3, 2, 1, 1, 3, 1, 2, 1, 2, 2, 2, 3, 1, 1, 2, 1, 3, 1, 0, 0, 2, 3, 0, 2, 0, 2, 1, 1, 3, 0, 1, 2, 0, 0, 1, 0, 1, 2, 3, 2, 3, 1, 1, 2, 2, 0, 3, 2, 3, 2, 2, 2, 3, 0, 3, 0, 0, 3, 3, 0, 2, 0, 3, 1, 0, 1, 0, 2, 0, 2, 0, 3, 1, 3, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 0, 3, 1, 1, 1, 2, 2, 1, 0, 1, 1, 3, 2, 0, 2, 1, 1, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 1, 3, 2, 1, 2, 3, 3, 3, 0, 1, 1, 2, 1, 2, 1, 3, 0, 1, 0, 3, 3, 3, 1, 2, 2, 3, 3, 2, 1, 3, 2, 2, 1, 1, 3, 3, 2, 3, 0, 0, 0, 3, 3, 1, 3, 1, 1, 3, 2, 2, 2, 2, 2, 3, 3, 1, 1, 0, 2, 1, 0, 3, 2, 2, 3, 0, 1, 0, 1, 2, 3, 3, 0, 3, 3, 0, 1, 0, 1, 2, 3, 1, 0, 1, 3, 0, 1, 2, 1, 3, 3, 2, 1, 1, 0, 2, 1, 0, 3, 2, 0, 0, 1, 1, 3, 1, 3, 1, 0, 0, 3, 3, 1, 3, 2, 2, 3, 1, 0, 0, 0, 1, 0, 3, 3, 3, 0, 0, 3, 3, 1, 2, 2, 3, 3, 1, 0, 0, 0, 1, 2, 3, 2, 3, 3, 1, 3, 2, 0, 3, 3, 0, 1, 2, 3, 0, 3, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 2, 2, 1, 1, 0, 0, 2, 2, 1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 1, 2, 0, 0, 0, 1, 2, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2], [2, 1, 2, 1, 0, 2, 0, 2, 1, 2, 1, 0, 1, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 2, 2, 2, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 2], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in2 \\ge int(7.0):{:\\nif divInt(in0,mod(max(( int(1.0) * int(3.0) ), min(int(7.0), ( int(9.0) - divInt(mod(( min(int(3.0), int(1.0)) * mod(int(1.0),max(int(7.0), in0)) ),res0),divInt(max(i2, mod(in2,divInt(int(9.0),int(6.0)))),min(i1, int(8.0)))) ))),mod(i1,res0))) == int(9.0):{:\\nif i2 \\l int(6.0):{:\\nb2 = ( min(mod(min(int(5.0), int(9.0)),( divInt(in2,max(mod(max(( ( mod(min(i2, min(i1, i2)),max(abs(in2), mod(res0,min(int(4.0), res0)))) - int(7.0) ) + res0 ), mod(in1,mod(in2,abs(int(9.0))))),abs(in0)), in0)) * int(2.0) )), ( i0 + divInt(int(2.0),res0) )) * in0 ) \\l ( i1 - max(int(7.0), int(8.0)) )\\n:}else:{:\\nin2 = int(1.0)\\n:}\\n:}else:{:\\nif not mod(mod(int(5.0),i2),int(1.0)) != int(8.0):{:\\nif True:{:\\nb2 = False\\n:}else:{:\\nloopBreak% = 0\\nwhile max(divInt(i0,( int(4.0) * int(1.0) )), in1) == ( divInt(in2,int(5.0)) - int(0.0) ):{:\\ni2 += mod(( ( divInt(int(0.0),( in2 - ( i0 - mod(divInt(int(7.0),min(i1, i0)),( int(7.0) - min(( int(3.0) - mod(abs(abs(max(i1, int(3.0)))),int(4.0)) ), divInt(int(0.0),( int(6.0) - abs(i2) ))) )) ) )) * int(2.0) ) * i2 ),abs(min(abs(int(1.0)), ( ( min(min(divInt(int(7.0),min(mod(( int(4.0) + int(1.0) ),min(max(( max(res0, i0) - in1 ), max(min(int(8.0), abs(int(2.0))), int(5.0))), abs(mod(mod(divInt(( ( max(max(int(0.0), int(5.0)), i0) + ( int(0.0) * res0 ) ) * min(( ( abs(in2) * int(1.0) ) * in1 ), int(8.0)) ),( max(abs(in2), max(min(i2, int(5.0)), i1)) + int(1.0) )),( max(int(0.0), i0) - int(0.0) )),max(i1, int(3.0)))))), mod(int(9.0),max(abs(( int(7.0) * int(4.0) )), i2)))), mod(int(1.0),res0)), min(divInt(i1,in2), int(6.0))) * int(3.0) ) + min(int(9.0), min(int(0.0), in0)) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = in1\\nif b1:{:\\nif max(abs(int(9.0)), min(( ( abs(int(8.0)) - res0 ) + res0 ), in0)) \\g int(9.0):{:\\nb2 = res0 \\le min(min(max(in1, i0), min(max(int(6.0), mod(( max(max(int(6.0), i1), i2) - i2 ),int(5.0))), ( max(( max(abs(int(2.0)), abs(( i0 + max(max(in2, int(4.0)), divInt(abs(in2),abs(int(4.0)))) ))) - in2 ), int(2.0)) * in2 ))), res0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 8, 7, 75, 75, 8, 6, 0, 13, 8, 5, 2, 6, 73, 3, 290, 73, 72, 37, 37]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 1, 2, 1, 2, 2, 0, 0, 1, 0], [1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 1, 8, 5, 9, 8, 2, 1, 2, 7, 3, 3, 4, 5, 1, 6, 0, 9, 5, 2, 2, 6, 2, 2, 4, 2, 1, 6, 1, 4, 6, 9, 9, 4, 3, 0, 5, 1, 8, 1, 3, 8, 8, 3, 5, 6, 7, 7, 9, 9, 5, 1, 3, 5, 3, 6, 9, 7, 3, 8, 1, 9, 4, 2, 0, 3, 2, 0, 9, 7, 6, 3, 1, 6, 6, 7, 4, 8, 2, 4, 9, 1, 2, 7, 3, 7, 0, 6, 0, 5, 4, 0, 1, 1, 4, 1, 3, 0, 2, 9], [1, 3, 4, 4, 2, 5, 2], [1, 2, 0, 0, 2, 0, 1, 2], [1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [3, 2, 0, 0, 2, 3, 1, 0, 3, 1, 3, 0], [1, 1], [1], [1, 6, 3, 3, 3, 5, 5, 3, 6, 6, 4, 1, 6, 1, 5, 0, 3, 1, 5, 6, 1, 5, 3, 4, 0, 3, 3, 3, 5, 2, 2, 1, 0, 3, 0, 5, 3, 4, 3, 6, 2, 4, 5, 0, 4, 1, 1, 1, 2, 3, 3, 2, 6, 6, 6, 1, 4, 3, 2, 6, 2, 4, 0, 1, 2, 0, 5, 1, 3, 2, 1, 2, 3, 1, 1, 6, 3, 4, 0, 1, 0, 3, 1, 5, 3, 5, 1, 2, 0, 3, 2, 3, 6, 4, 5, 3, 5, 5, 5, 1, 4, 4, 0, 0, 1, 6, 1, 2, 4, 1, 2, 3, 5, 6, 1, 5, 4, 1, 6, 6, 3, 3, 0], [1, 1, 0, 0, 0, 0], [3, 3, 2, 2, 0, 2, 3, 2, 2, 3, 3, 1, 1, 2, 3, 0, 2, 2, 1, 2, 3, 0, 1, 3, 3, 2, 3, 1, 2, 1, 0, 2, 2, 3, 2, 3, 2, 0, 2, 0, 1, 3, 0, 3, 3, 3, 3, 3, 0, 0, 1, 0, 0, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 2, 1, 3, 2, 1, 1, 2, 1, 0, 2, 3, 2, 0, 2, 2, 3, 3, 1, 3, 0, 0, 0, 3, 0, 3, 0, 3, 3, 2, 1, 3, 1, 2, 3, 2, 1, 0, 0, 0, 3, 1, 1, 0, 3, 0, 2, 2, 2, 1, 0, 1, 3, 3, 3, 3, 0, 0, 3, 1, 3, 2, 0, 0, 2, 1, 0, 0, 1, 1, 3, 2, 0, 3, 2, 1, 0, 2, 0, 1, 1, 2, 3, 3, 0, 2, 3, 3, 0, 1, 0, 1, 3, 1, 3, 1, 1, 1, 2, 1, 1, 3, 3, 0, 3, 3, 1, 3, 0, 2, 1, 3, 1, 2, 0, 1, 3, 0, 3, 1, 3, 0, 0, 0, 3, 1, 3, 3, 3, 3, 0, 1, 3, 2, 2, 0, 2, 0, 3, 3, 0, 3, 3, 3, 3, 0, 0, 0, 2, 1, 3, 1, 0, 0, 1, 1, 3, 1, 3, 1, 1, 3, 3, 0, 2, 0, 3, 2, 2, 1, 2, 0, 0, 2, 2, 1, 2, 1, 0, 3, 3, 0, 1, 0, 0, 0, 2, 0, 2, 3, 2, 2, 1, 3, 0, 1, 3, 3, 2, 3, 1, 1, 0, 2, 0, 1, 0, 1, 2, 2, 0, 2, 1, 3, 3, 3, 3, 1, 2, 0, 3, 3, 1, 0, 3, 2, 0, 0, 0, 2, 0, 1, 3, 2, 0, 1, 2, 3, 3, 3, 2, 2, 3, 2, 0, 3, 1, 1, 3, 2, 0, 2, 1, 3, 3, 0, 2, 3, 2, 1, 1, 1, 1, 0, 3, 0, 0, 2, 0, 3, 1, 2, 2, 3, 1, 1, 2, 1, 0, 1, 2, 2, 3, 2, 1, 2, 0, 0, 3, 2, 3, 2, 0, 0, 0, 3, 3, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 3, 3, 2, 1, 1, 2, 2, 2, 0, 3, 2, 0, 1, 0, 0, 3, 2, 3, 3, 0, 1, 0, 3, 3, 2, 3, 2, 2, 1, 1, 0, 0, 0, 2, 1, 2, 0, 2, 2, 1, 3, 0, 1, 2, 1, 2, 0, 1, 1, 3, 2, 2, 1, 0, 3, 3, 1, 3, 2, 0, 2, 1, 2, 1, 0, 3, 3, 3, 0, 2, 2, 1, 3, 0, 1, 3, 0, 0, 0, 0, 3, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [2, 1, 2, 0, 1, 2, 2, 1, 0, 1, 1, 2, 0, 2, 0, 2, 0, 2, 2, 1, 0, 0, 1, 2, 1, 2, 0, 0, 1, 0, 1, 2, 1, 1, 0, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 1, 2, 2, 1, 0, 2, 2, 0, 2, 1, 0, 2, 0, 0, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 1, 2, 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 2, 2, 0, 0, 0, 2, 1, 1, 1, 1], [2, 1, 0, 1, 1, 2, 1, 0, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 2, 0, 1, 2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= abs(max(mod(mod(res0,( abs(( divInt(min(max(int(3.0), int(4.0)), divInt(abs(in0),divInt(( int(1.0) - mod(abs(in0),int(8.0)) ),max(min(mod(max(int(5.0), ( int(9.0) + in0 )),divInt(divInt(max(divInt(abs(mod(in2,( in2 - int(8.0) ))),min(in0, abs(min(abs(min(abs(res0), res0)), int(2.0))))), in1),i1),res0)), mod(int(1.0),i1)), int(2.0))))),( int(7.0) - in2 )) * int(3.0) )) - mod(( mod(int(3.0),abs(( int(4.0) + int(5.0) ))) + ( int(1.0) - i0 ) ),( max(mod(in0,mod(divInt(min(min(int(6.0), max(i1, in2)), res0),abs(i1)),max(in2, abs(min(divInt(int(0.0),min(int(9.0), ( max(( int(5.0) - in0 ), in1) * i0 ))), min(int(2.0), int(2.0))))))), in0) - max(in0, mod(( ( int(6.0) - in0 ) - int(2.0) ),abs(max(max(min(in2, i2), max(int(2.0), max(divInt(i2,i1), mod(int(4.0),i0)))), in0)))) )) )),int(2.0)), int(1.0)))\\ni0 *= abs(( in2 * min(mod(int(6.0),in0), ( in1 - int(1.0) )) ))\\nb1 = int(4.0) \\g divInt(abs(max(in0, divInt(min(max(res0, int(6.0)), i2),int(9.0)))),max(int(9.0), max(int(4.0), int(3.0))))\\nloopBreak% = 0\\nwhile ( not int(0.0) \\ge ( int(5.0) - int(1.0) ) or b2 ):{:\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = min(min(in1, abs(min(int(8.0), max(in2, divInt(int(1.0),min(int(3.0), ( i0 - int(8.0) ))))))), max(in1, min(int(8.0), abs(i1)))) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i2\\nloopBreak% = 0\\nwhile min(int(3.0), max(max(max(abs(in0), int(5.0)), min(( ( in0 - divInt(i2,min(min(res0, max(max(min(min(res0, res0), i1), mod(int(6.0),max(int(7.0), in1))), in0)), int(7.0))) ) + int(9.0) ), min(int(9.0), abs(int(5.0))))), int(1.0))) \\le min(abs(i2), ( res0 * max(divInt(divInt(int(3.0),mod(i2,in1)),divInt(divInt(int(5.0),divInt(int(3.0),i0)),max(max(i1, int(6.0)), i2))), i0) )):{:\\nin2 = i1\\nloopBreak% = 0\\nwhile not ( ( in0 + divInt(abs(( mod(int(9.0),min(i2, int(7.0))) - abs(max(( max(int(3.0), int(8.0)) * i1 ), mod(i2,int(1.0)))) )),in0) ) == int(9.0) or False ):{:\\nif b2:{:\\ni1 = mod(divInt(i1,divInt(int(4.0),abs(abs(max(min(int(2.0), ( res0 + abs(abs(int(0.0))) )), in0))))),min(( in1 * i0 ), i1))\\n:}else:{:\\ni0 = divInt(in0,int(3.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = abs(( i1 * int(2.0) )) != divInt(max(min(abs(( ( min(( in2 * min(int(0.0), int(9.0)) ), max(( in0 * divInt(int(7.0),abs(max(in2, ( min(( int(6.0) - int(3.0) ), int(1.0)) - int(6.0) )))) ), i1)) + max(i2, i0) ) - ( in0 - max(int(6.0), divInt(mod(max(int(7.0), int(4.0)),( int(8.0) + i2 )),int(2.0))) ) )), ( mod(max(( int(4.0) - ( in0 + res0 ) ), max(divInt(min(mod(in1,in2), in0),abs(abs(abs(in2)))), ( in2 - max(abs(in2), i1) ))),in1) + min(min(max(( int(9.0) * int(1.0) ), mod(mod(( in1 * max(( i0 + int(2.0) ), i0) ),i1),abs(divInt(min(abs(res0), int(7.0)),i1)))), abs(min(( max(divInt(divInt(int(3.0),int(7.0)),i2), in1) + i1 ), mod(int(0.0),( i2 + mod(( int(6.0) + min(in0, int(0.0)) ),( int(5.0) + ( in2 + int(4.0) ) )) ))))), int(0.0)) )), abs(mod(( int(1.0) * res0 ),abs(min(int(1.0), min(divInt(i1,divInt(int(4.0),divInt(int(1.0),in2))), min(abs(max(in1, mod(( int(3.0) * max(i1, int(0.0)) ),max(res0, res0)))), in0))))))),in0)\\nb1 = ( False and ( max(i0, int(2.0)) == int(9.0) and b2 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 5, 10, 101, 101, 7, 8, 4, 19, 7, 12, 2, 1, 123, 6, 454, 108, 128, 51, 59]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 1], [1], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 6, 7, 0, 1, 2, 6, 2, 1, 6], [3, 3, 4], [2, 0, 0], [], [0, 1, 0, 0, 1, 1], [0, 0, 0], [2, 2, 1], [1], [], [2, 3, 2, 3, 4, 4, 4, 4, 6, 1, 1, 2], [], [0, 3, 1, 1, 0, 3, 0, 0, 3, 3, 3, 3, 2, 1, 0, 2, 0, 1, 0, 2, 3, 2, 0, 0, 1, 2, 2, 2, 1, 1, 2, 1, 2, 0, 1, 3, 2, 3, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 0, 1, 0, 2, 1, 2], [1, 0, 1, 1, 1, 2], [1, 1, 0, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not i2 \\ge max(int(6.0), int(5.0))\\nloopBreak% = 0\\nwhile not False:{:\\nb0 = in0 \\ge max(i2, in0)\\nb0 = max(min(max(min(( int(6.0) - in1 ), mod(in1,int(7.0))), in1), mod(abs(( in1 + res0 )),int(0.0))), ( divInt(( int(1.0) - int(2.0) ),divInt(int(6.0),( i1 - int(2.0) ))) - max(( abs(int(1.0)) * i1 ), i2) )) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 11, 11, 3, 3, 0, 6, 3, 3, 1, 0, 12, 0, 42, 10, 9, 6, 4]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [1, 2, 3, 3], [1, 0], [0, 0], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += i2\\nin0 = in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 5, 5, 2], [0], [2, 0, 2, 0, 0], [0, 0], [], [2, 2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( in2 * ( in2 * i2 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 2, 0, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 3], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [1], [1, 1], [1, 1, 1, 1, 1, 1], [7, 7, 6, 5, 7, 6], [1], [], [], [0, 1], [0], [2], [], [], [6, 5, 6, 4, 1, 5, 4], [1, 1], [3, 3, 0, 0, 2, 1, 0, 1, 3, 2, 1, 2, 0, 0, 1, 2, 1, 1], [1, 0, 0, 1], [1, 1, 0], [0, 0, 0, 1], [0, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not max(max(res0, in2), divInt(int(7.0),res0)) \\g int(7.0):{:\\nin1 += min(( int(6.0) + ( i1 + in2 ) ), int(5.0))\\nin1 -= mod(int(7.0),int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 1, 0, 0, 2, 1, 1, 0, 0, 7, 2, 18, 4, 3, 4, 2]}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 1, 1], [0], [0, 1, 0], [1, 1, 1], [9, 4, 9], [0], [1, 0, 0, 0], [], [1, 0, 0], [0], [0, 0], [], [0], [2, 5, 2], [1], [0, 2, 1, 1, 3, 0, 1], [1], [0], [2], [0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i2 \\l divInt(int(9.0),int(4.0)):{:\\nb1 = b0\\nin2 *= min(i2, int(9.0))\\n:}\\nb0 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 3, 3, 1, 4, 0, 3, 1, 2, 0, 1, 3, 1, 7, 1, 1, 1, 1]}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 1, 1, 2, 0], [1, 0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 7, 7, 3, 0, 9, 1, 4, 7, 9, 5, 3, 3, 3, 8, 8, 2, 1, 8, 6, 7, 4, 9, 7, 6, 1, 0, 9, 7, 3, 1, 3, 5, 4, 7, 5, 7, 8, 0, 8, 8, 7, 8, 9, 7, 5, 0, 7, 2, 1, 5, 8, 1, 2, 6, 7, 9, 5, 0, 5, 1, 1, 1, 8, 1, 3, 7, 5, 6, 9, 3, 6, 1, 2, 7, 9, 1, 3, 7, 5, 4, 8, 1, 5, 6, 3, 9, 7, 0, 3, 8, 0, 1, 7, 8], [3, 3], [0, 2, 1, 1], [1], [1, 0, 0, 1, 0, 0, 0], [0, 0], [3, 1, 2, 0, 0], [1], [0], [4, 3, 5, 5, 1, 5, 1, 4, 4, 1, 1, 0, 4, 3, 6, 0, 1, 5, 5, 2, 1, 2, 2, 1, 3, 6, 6, 6, 4, 5, 1, 0, 0, 4, 6, 1, 1, 2, 1, 1, 5, 1, 0, 6, 4, 6, 0, 4, 4, 6, 5, 4, 3, 3, 1, 2, 1, 0, 6, 4, 1, 4, 6, 3, 2, 0, 2, 6, 6, 4, 3, 4, 6, 6, 4, 1, 6, 1, 2, 5, 5, 1, 0, 5, 0, 3, 1, 2, 4, 4, 5, 2, 3, 0, 4, 3, 3, 3, 3, 4, 2, 5, 4, 6, 0, 3, 0, 3, 4, 2, 6, 4, 0, 6, 4, 3, 4, 1, 3], [1], [1, 0, 0, 2, 2, 3, 2, 3, 1, 1, 1, 3, 2, 3, 1, 2, 1, 3, 0, 1, 3, 2, 2, 0, 0, 1, 3, 1, 2, 2, 0, 2, 1, 2, 0, 2, 0, 2, 2, 1, 3, 3, 3, 0, 3, 1, 1, 1, 1, 2, 1, 0, 0, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 1, 1, 3, 2, 0, 3, 2, 0, 2, 0, 0, 0, 2, 2, 3, 2, 0, 2, 3, 3, 3, 2, 2, 2, 0, 0, 2, 0, 3, 3, 2, 3, 1, 0, 0, 3, 1, 2, 1, 3, 2, 2, 1, 3, 0, 3, 3, 2, 2, 2, 1, 3, 0, 3, 3, 3, 0, 1, 0, 0, 0, 1, 0, 1, 2, 0, 3, 0, 3, 2, 0, 2, 2, 3, 0, 2, 0, 1, 2, 1, 0, 2, 2, 3, 1, 3, 2, 3, 3, 2, 3, 0, 3, 1, 2, 2, 3, 2, 1, 1, 3, 3, 3, 3, 0, 3, 2, 2, 1, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 2, 3, 1, 2, 0, 3, 1, 2, 1, 0, 3, 1, 3, 2, 0, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 3, 0, 3, 3, 0, 1, 0, 3, 1, 3, 0, 2, 0, 2, 3, 3, 3, 2, 3, 2, 3, 0, 0, 0, 3, 0, 1, 0, 1, 3, 3, 2, 2, 2, 0, 1, 0, 1, 3, 2, 1, 2, 0, 0, 3, 2, 2, 1, 3, 1, 3, 2, 0, 2, 0, 1, 2, 0, 2, 2, 2, 3, 2, 0, 3, 0, 3, 2, 2, 2, 2, 0, 0, 0, 1, 2, 2, 3, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 3, 3, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 2, 0, 3, 1, 0, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 2, 2, 0, 1, 0, 2, 1, 1, 2, 3, 3, 0, 3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 3, 0, 2, 0, 3, 3, 3, 1, 0, 2, 1, 1, 1, 3, 1, 2, 3, 3, 2, 1, 1, 0, 2, 0, 0, 0, 3, 1, 2, 2, 0, 3, 2, 0, 0, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 2, 1, 1, 1, 3, 3, 3, 2, 2, 1, 2, 3, 1, 0, 2, 1, 1, 0, 1, 3, 0, 2, 3, 3, 2, 2, 1, 2, 0, 3, 0, 2, 2, 1, 1, 0, 2, 2, 2, 0, 0, 0, 2, 1, 2, 3, 3, 1, 3, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 2, 2, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 0, 2, 2, 1, 2, 0, 1, 1, 0, 0, 2, 1, 2, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 1, 1, 2, 2, 1, 2, 1, 0, 2, 2, 0, 1, 2, 1, 0, 1, 2, 0, 0, 1, 1, 0, 1, 1, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2], [1, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 2, 1, 0, 0, 1, 1, 2, 1, 0, 1, 1, 0, 2, 0, 1, 1, 1, 0, 2, 0, 1, 1, 1, 0, 1, 1, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0, 1, 2, 2, 2, 1, 0, 1, 1, 2], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 100, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(1.0) \\ge in1:{:\\nb0 = ( False or in0 \\ge ( divInt(abs(mod(min(int(8.0), int(7.0)),int(7.0))),max(divInt(max(int(3.0), ( int(0.0) - max(in2, int(9.0)) )),max(mod(( in2 - i1 ),int(1.0)), max(int(4.0), ( ( in2 - ( int(7.0) * divInt(i1,( in1 + ( mod(int(9.0),max(max(abs(in1), max(int(5.0), int(3.0))), int(3.0))) + int(3.0) ) )) ) ) + divInt(int(8.0),i1) )))), i1)) - max(min(max(i0, abs(abs(min(int(8.0), int(2.0))))), min(int(1.0), int(8.0))), abs(mod(in1,min(mod(in0,mod(res0,i0)), i1)))) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += ( divInt(abs(mod(in2,( min(max(max(( ( ( i2 - i1 ) * mod(i2,min(min(mod(min(int(6.0), i2),i1), min(int(7.0), ( int(4.0) * abs(mod(divInt(int(9.0),abs(in0)),max(abs(divInt(( mod(int(7.0),min(res0, max(max(min(res0, int(6.0)), res0), in1))) - in2 ),int(1.0))), i1))) ))), int(0.0))) ) + ( i0 + min(i0, abs(mod(in1,( divInt(max(res0, mod(i1,int(9.0))),mod(int(7.0),i1)) - ( ( abs(int(3.0)) - min(( abs(min(( min(i2, min(int(1.0), mod(( min(divInt(int(3.0),int(5.0)), max(max(min(min(i1, min(divInt(( int(4.0) * int(7.0) ),( i1 - in2 )), i1)), i0), int(5.0)), mod(int(7.0),int(8.0)))) + mod(( ( max(int(0.0), mod(res0,max(int(8.0), mod(int(8.0),in1)))) - min(int(7.0), min(( res0 - ( divInt(( ( int(8.0) + int(9.0) ) * mod(int(7.0),divInt(int(5.0),int(0.0))) ),i0) + divInt(in1,int(7.0)) ) ), in1)) ) - res0 ),min(in2, min(min(in1, int(2.0)), in0))) ),min(int(1.0), min(in0, divInt(i1,mod(min(abs(abs(divInt(min(( max(i2, i1) - i0 ), max(res0, int(5.0))),in1))), int(8.0)),max(min(mod(( ( i1 - int(1.0) ) + in1 ),int(2.0)), abs(divInt(int(6.0),( res0 * in0 )))), max(divInt(mod(int(7.0),max(int(9.0), min(mod(i2,divInt(i0,int(5.0))), ( i2 + ( ( divInt(abs(mod(res0,min(res0, max(mod(( divInt(( in1 - in0 ),in1) - int(0.0) ),divInt(( max(res0, res0) - in1 ),i1)), int(5.0))))),res0) + max(i1, divInt(i2,abs(abs(divInt(in2,in2))))) ) - ( int(1.0) - i1 ) ) )))),divInt(( i0 * in2 ),( i0 + max(int(1.0), in0) ))), abs(int(1.0))))))))))) * i1 ), int(8.0))) + mod(i2,( int(1.0) * in1 )) ), int(3.0)) ) + mod(int(7.0),( mod(in1,int(5.0)) + in2 )) ) )))) ) ), ( int(6.0) - int(9.0) )), mod(max(min(i2, abs(abs(min(max(divInt(in0,i0), in1), in0)))), ( abs(in0) - ( in0 - max(min(max(int(3.0), in0), mod(int(6.0),int(1.0))), int(2.0)) ) )),abs(int(7.0)))), ( min(min(divInt(int(9.0),int(1.0)), in1), ( i2 + in2 )) * in1 )) - max(int(3.0), ( divInt(res0,max(( i0 - in0 ), ( ( min(i0, ( max(int(7.0), in0) - int(5.0) )) - int(4.0) ) + mod(int(8.0),int(1.0)) ))) - int(5.0) )) ))),max(min(min(( ( int(6.0) * divInt(abs(int(3.0)),in1) ) * mod(int(9.0),int(7.0)) ), i2), int(0.0)), min(res0, divInt(abs(abs(divInt(divInt(int(3.0),divInt(in1,abs(i0))),( ( int(8.0) * int(0.0) ) - res0 )))),( ( ( in1 + in0 ) - in1 ) - mod(int(1.0),divInt(abs(max(int(7.0), abs(int(8.0)))),i1)) ))))) * in0 )\\nif not b2:{:\\nb1 = b1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 96, 96, 2, 4, 1, 7, 2, 5, 1, 1, 119, 1, 452, 129, 109, 63, 67]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 5, 3, 8, 1], [4, 4], [0], [], [1, 1], [0, 0], [], [], [0], [2, 4, 2, 6, 3, 2, 2, 6, 5], [], [1, 0, 2, 2, 0, 0, 2, 3, 3, 0, 3, 2, 2, 2, 3, 1, 3, 2, 0, 0, 1, 3, 3, 2, 2, 1, 1, 0, 1, 3, 0, 0, 2, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [1, 2, 2, 1, 2, 2, 2, 0], [1, 0, 0, 0, 2], [1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(0.0) \\le i2:{:\\nb0 = ( mod(in1,i2) - ( max(abs(res0), abs(( divInt(mod(max(int(0.0), abs(( in0 + i2 ))),int(0.0)),abs(abs(mod(divInt(int(3.0),int(5.0)),i2)))) + int(3.0) ))) + min(res0, in2) ) ) \\le ( int(8.0) * int(1.0) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 8, 8, 2, 1, 0, 2, 2, 0, 0, 1, 9, 0, 35, 10, 8, 5, 5]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 2, 2, 1, 0, 0], [1, 1, 0], [1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 3, 9, 9, 3, 1, 9, 4, 7, 4, 0, 4, 1, 8, 0, 8, 7, 1, 4, 0, 7, 8, 2, 7, 1, 9, 8, 7, 3, 0, 4, 5, 1, 4, 2, 6, 0, 8, 1, 1, 5, 7, 7, 3, 1, 4, 6, 6, 4, 6, 0, 3, 5, 4, 2], [5, 3, 5], [1, 1], [], [1, 0, 1, 0, 1], [0, 0, 0], [1, 1], [1, 1], [1], [0, 1, 0, 3, 2, 0, 0, 6, 6, 6, 1, 1, 2, 4, 4, 1, 2, 6, 5, 5, 3, 1, 0, 6, 4, 6, 1, 5, 6, 5, 2, 3, 2, 4, 2, 0, 6, 0, 0, 4, 2, 4, 6, 0, 0, 4, 0, 2, 1, 5, 0, 2], [1], [1, 2, 2, 3, 3, 1, 0, 0, 1, 0, 0, 2, 3, 1, 2, 2, 0, 2, 0, 3, 2, 0, 1, 2, 1, 3, 2, 3, 2, 1, 0, 2, 3, 1, 1, 3, 1, 0, 1, 2, 1, 2, 2, 2, 2, 0, 3, 0, 1, 1, 3, 0, 3, 0, 2, 3, 3, 1, 2, 2, 3, 0, 0, 0, 0, 2, 2, 2, 3, 3, 1, 0, 2, 3, 0, 2, 1, 0, 2, 1, 2, 1, 1, 3, 0, 0, 1, 1, 1, 2, 0, 0, 2, 3, 2, 3, 3, 1, 3, 1, 2, 0, 3, 3, 2, 0, 0, 0, 1, 3, 2, 1, 3, 1, 3, 2, 0, 3, 2, 3, 1, 1, 2, 3, 3, 1, 1, 1, 2, 0, 1, 3, 2, 2, 1, 0, 2, 0, 3, 1, 2, 3, 2, 2, 2, 3, 1, 1, 0, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 1, 1, 0, 3, 3, 0, 3, 2, 2, 1, 0, 0, 3, 3, 3, 3, 2, 1, 2, 2, 1, 2, 2, 3, 1, 0, 3, 2, 2, 1, 2, 3, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 1, 3, 0, 0, 0, 1, 3, 3, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 2, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 2, 2, 2, 1, 0, 1, 1, 2, 0, 0, 0, 1, 2, 0, 0, 2, 0], [0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 1, 0, 1, 1, 0, 0, 1, 2, 1, 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 2, 2, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(19.0) != mod(( max(min(int(3.0), i0), i1) + int(9.0) ),i0):{:\\nloopBreak% = 0\\nwhile False:{:\\nif in0 \\ge ( max(int(9.0), ( ( i2 + ( i0 + max(mod(i0,int(3.0)), ( int(1.0) * max(( abs(( int(9.0) * res0 )) + ( min(int(4.0), int(7.0)) + min(int(4.0), res0) ) ), int(0.0)) )) ) ) * divInt(int(4.0),( ( mod(( res0 + abs(i1) ),int(1.0)) - int(8.0) ) - max(i1, max(i2, ( max(min(int(0.0), mod(mod(min(in1, in1),i1),i2)), ( divInt(mod(max(max(int(8.0), res0), ( max(in2, ( int(7.0) + in2 )) - ( int(1.0) - divInt(int(4.0),int(0.0)) ) )),max(in0, i1)),int(7.0)) + int(8.0) )) + int(2.0) ))) )) )) - mod(i0,res0) ):{:\\nin1 *= divInt(max(( abs(min(int(7.0), max(int(1.0), ( res0 - max(min(( i1 - in2 ), res0), int(9.0)) )))) + max(mod(int(8.0),abs(int(7.0))), max(mod(in2,max(mod(max(int(3.0), int(0.0)),( max(max(int(4.0), int(5.0)), int(1.0)) * divInt(i2,int(4.0)) )), abs(mod(( int(2.0) + in0 ),( i2 - min(int(6.0), divInt(min(( ( ( max(int(0.0), int(8.0)) + in1 ) * max(int(1.0), int(1.0)) ) + min(abs(abs(i2)), abs(max(i0, int(5.0)))) ), int(7.0)),res0)) ))))), min(max(i0, max(mod(mod(int(7.0),i0),in1), abs(min(min(min(divInt(int(3.0),divInt(divInt(int(1.0),( ( max(int(4.0), i2) + abs(( divInt(int(6.0),( min(int(6.0), ( in1 - res0 )) * i0 )) * i0 )) ) + in1 )),int(4.0))), mod(i0,( int(6.0) + int(0.0) ))), min(i2, i1)), in2)))), int(3.0)))) ), abs(min(int(5.0), i0))),int(4.0))\\n:}else:{:\\nb1 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i2 != int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 56, 56, 3, 2, 0, 5, 3, 2, 2, 1, 52, 1, 216, 56, 54, 33, 24]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 2], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1, 1, 1, 1], [7, 8, 8, 4, 0, 4], [5], [2], [], [1], [0], [], [], [], [2, 1, 0, 5, 5, 2], [0], [3, 0, 3, 2, 1, 3, 3, 1, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 0], [0, 1, 1], [2, 1, 0, 1, 0, 0], [1], [0, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(i1)\\nb2 = max(( int(7.0) - min(max(int(8.0), divInt(int(8.0),i0)), min(in2, int(4.0))) ), mod(int(0.0),min(in2, int(4.0)))) != i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 6, 1, 20, 3, 6, 1, 2]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1], [2, 9], [4], [2, 2], [], [0, 1], [0], [1], [0], [], [4], [], [2, 3, 1, 0, 1], [1], [2], [], [0]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nb2 = divInt(abs(int(2.0)),in1) \\le int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 5, 1, 1, 0, 1]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [1, 0, 0], [1, 1], [1, 3], [], [1, 1, 0], [], [0, 0], [], [1, 0], [1], [], [4], [0], [2, 3, 1, 1], [1], [2], [], [1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = mod(abs(int(1.0)),int(3.0))\\nb1 = False\\nb1 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 0, 3, 0, 2, 0, 2, 1, 0, 1, 1, 4, 1, 1, 0, 1]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 0, 0, 2, 1, 2, 2, 1, 0], [1, 1, 1, 0, 1], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 8, 4, 0, 1, 9, 6, 2, 9, 7, 5, 0, 3, 1, 0, 6], [3, 2, 3, 5], [1], [], [1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0], [1, 1, 2], [0, 1], [1], [0, 6, 3, 2, 5, 4, 1, 3, 3, 5, 1, 5, 0, 4, 5, 4, 2, 4, 1, 1, 2, 3, 6, 4, 1, 5, 2], [0, 1, 1, 0], [2, 0, 2, 0, 0, 2, 1, 2, 3, 3, 1, 0, 0, 3, 3, 1, 1, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 2, 2, 1, 0, 1, 3, 3, 0, 0, 1, 2, 1, 1, 2, 1, 1, 0, 0, 0, 1, 3, 2, 3, 0, 2, 3, 3, 2, 3, 1, 1, 3, 3, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [1, 2, 2, 0, 2, 2, 1, 1, 0, 0, 0, 1, 0, 2, 2, 0, 1], [0, 1, 2, 0, 2, 2, 0, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( i0 + mod(res0,in0) ) \\ge ( int(1.0) - divInt(max(abs(int(9.0)), i2),in2) ):{:\\nloopBreak% = 0\\nwhile True:{:\\nin1 = abs(min(int(8.0), int(4.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i1 == mod(mod(divInt(in0,mod(in0,mod(in2,( i1 * abs(abs(max(mod(( int(0.0) + in2 ),int(1.0)), max(min(i0, in1), int(9.0))))) )))),( int(6.0) * int(2.0) )),divInt(int(9.0),int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in2 \\ge in1:{:\\ni2 *= in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\nloopBreak% = 0\\nwhile not int(5.0) != min(( min(i1, divInt(max(min(( abs(int(0.0)) + int(3.0) ), abs(min(int(1.0), int(0.0)))), int(6.0)),i1)) - i2 ), max(in0, res0)):{:\\nin1 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = i2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 17, 17, 4, 1, 0, 7, 4, 3, 2, 1, 27, 4, 74, 17, 17, 9, 10]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 2, 1, 0, 1, 2, 1, 0], [0, 1, 0], [0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 2, 7, 3, 7, 8, 5, 2, 6, 9, 0, 0, 3, 7, 5, 0, 1, 7, 5], [2, 0, 5, 5, 0, 2], [0, 2, 0, 1, 2, 2, 1, 1], [1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 2, 2, 1, 2, 3, 3, 2, 0, 0, 1], [0, 1, 0], [1, 0], [6, 2, 3, 5, 0, 3, 4, 0, 2, 3, 0, 5, 5, 1, 6, 6, 2, 6, 6, 3, 5, 0, 2, 0], [1], [3, 3, 2, 1, 2, 0, 3, 3, 1, 3, 0, 3, 3, 3, 0, 2, 0, 1, 0, 3, 3, 0, 3, 1, 1, 2, 0, 1, 2, 0, 3, 1, 3, 2, 0, 3, 0, 3, 1, 3, 2, 2, 0, 1, 0, 1, 0, 3, 1, 1, 0, 3, 1, 2, 0, 3, 2, 0, 0, 3, 0, 2, 1, 1, 2, 2, 0, 3, 2, 0, 3, 1, 3, 0, 1, 2, 0, 1, 0, 2, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 0, 2, 0, 2, 1, 1, 2, 1, 2, 2, 1, 0, 1, 1, 0, 2, 0, 2, 1, 1, 0], [2, 2, 0, 2, 1, 1, 1, 0, 0, 2], [0, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\nif abs(abs(divInt(int(9.0),( res0 * min(abs(int(3.0)), min(i2, abs(max(max(in0, ( in2 * int(2.0) )), i0)))) )))) == abs(max(in0, abs(int(7.0)))):{:\\nb2 = not int(3.0) \\l divInt(in1,int(7.0))\\nloopBreak% = 0\\nwhile not ( i0 + abs(int(8.0)) ) != max(( i2 * min(in0, max(int(5.0), max(divInt(( i0 - int(2.0) ),in2), int(6.0)))) ), in2):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= min(int(9.0), int(0.0))\\n:}else:{:\\nb1 = not ( res0 != abs(int(0.0)) or ( ( res0 - min(( i2 + res0 ), abs(res0)) ) \\l ( int(3.0) + int(7.0) ) and not b2 ) )\\nif b2:{:\\nb1 = True\\n:}\\n:}\\nb1 = ( divInt(in0,max(divInt(in2,max(int(5.0), min(i0, int(0.0)))), divInt(i2,int(1.0)))) * i0 ) == mod(int(7.0),int(5.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 20, 20, 6, 8, 2, 17, 6, 11, 3, 2, 24, 1, 82, 16, 23, 10, 7]}, {"genotype": [[0], [1], [0], [], [1], [1], [2], [], [], [], [], [], [], [], [], [0], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 7, 5, 5, 7, 0, 4, 6, 8, 4, 0, 4, 8], [1, 3], [2, 1], [], [1, 1], [0, 0], [], [], [], [4, 3, 0, 0, 0, 6, 1, 3, 5], [1], [2, 2, 2, 1, 0, 1, 3, 2, 0, 3, 2, 2, 0, 3, 0, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 0, 2, 1, 2, 0, 0, 3, 1, 2, 1, 2, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 2, 1, 0], [2, 2, 1, 0, 2, 2, 0, 2, 2, 0], [0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= ( divInt(divInt(int(2.0),in0),int(3.0)) * max(mod(i0,abs(( ( i0 - max(i0, int(7.0)) ) + int(5.0) ))), divInt(int(5.0),int(7.0))) )\\nb2 = ( ( int(0.0) * ( int(4.0) * res0 ) ) + ( int(6.0) * ( i1 * in0 ) ) ) \\g min(int(8.0), ( int(4.0) + mod(int(0.0),int(4.0)) ))\\nb1 = in2 \\ge int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 14, 14, 2, 2, 0, 2, 2, 0, 0, 0, 9, 1, 40, 14, 4, 10, 5]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 7, 1, 9, 1, 1, 2, 9, 4], [], [], [], [], [], [], [], [], [0, 6, 5, 4, 1, 0, 1, 5, 5, 2, 3, 4, 1, 1, 3, 6], [1, 1], [2, 2, 1, 2, 3, 0, 3, 1, 3, 0, 3, 3, 1, 1, 3, 3, 2, 3, 2, 0, 2, 0, 3, 1, 3, 3, 3, 0, 0, 1, 0, 3, 1, 0, 2, 0, 3, 3, 0, 2, 1, 2, 0, 3, 1, 2, 0, 2, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 2, 2, 1, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0], [0, 0, 1, 2, 0, 0, 2], [0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += divInt(( int(3.0) + ( min(res0, max(int(8.0), max(in2, abs(abs(int(7.0)))))) - int(1.0) ) ),max(min(( abs(( in1 * divInt(i1,max(int(9.0), abs(min(max(i0, i1), int(1.0))))) )) + in2 ), max(int(1.0), in2)), ( i2 + max(abs(in0), divInt(int(2.0),mod(in1,min(int(9.0), divInt(i1,mod(int(4.0),i1)))))) )))\\nin0 *= res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2, 51, 11, 16, 7, 6]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 0, 0], [0, 0, 0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 6, 6, 3, 1, 9, 9, 7, 9, 4, 9, 0, 9, 0, 8, 2, 0, 9, 7, 8, 7], [4, 1, 1, 1], [0, 0], [1], [0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0], [3, 0, 2], [], [1, 0, 1], [5, 0, 3, 2, 0, 5, 0, 5, 0, 0, 2, 0, 0, 0, 0, 1, 6], [1, 1], [1, 1, 1, 1, 2, 1, 2, 0, 2, 2, 3, 1, 3, 0, 3, 0, 1, 1, 2, 3, 3, 2, 3, 2, 0, 1, 2, 2, 0, 2, 0, 2, 1, 3, 2, 0, 2, 1, 3, 3, 0, 0, 0, 1, 3, 2, 1, 2, 2, 3, 3, 1, 0, 1, 1, 0, 0, 1, 1, 0, 2, 1, 3, 2, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 0, 2, 2], [1, 0, 1, 1, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 1], [1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(1.0) \\le int(9.0) or int(6.0) \\g int(6.0) ):{:\\nif ( int(3.0) - ( in2 + ( mod(max(int(1.0), max(i0, max(in0, int(9.0)))),int(9.0)) - ( min(max(( min(divInt(i2,int(7.0)), ( mod(i0,( in2 - divInt(int(9.0),max(( i0 * ( int(4.0) * max(abs(in2), i0) ) ), i0)) )) + int(9.0) )) + abs(( int(0.0) * ( ( min(abs(int(9.0)), i2) * int(0.0) ) * int(8.0) ) )) ), i0), i0) + int(2.0) ) ) ) ) \\g int(0.0):{:\\nif b0:{:\\ni0 += i0\\n:}else:{:\\ni1 += ( int(9.0) - abs(mod(int(7.0),int(8.0))) )\\n:}\\n:}\\n:}else:{:\\nb0 = not res0 \\g int(7.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 22, 22, 4, 2, 1, 7, 4, 3, 0, 3, 17, 2, 68, 18, 13, 15, 5]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1], [0, 2, 1, 1, 0, 2, 0], [1, 0], [1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 3, 6, 3, 5, 9, 1, 5, 1, 1, 2, 5, 7], [5, 4, 1, 4], [0, 2, 2, 1], [1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0], [1, 3, 3, 1, 0], [1, 1], [0], [5, 4, 3, 0, 2, 3, 6, 4, 6, 1, 6, 4, 1, 5, 4, 3, 2, 1, 2, 4, 1, 5, 4, 4, 0, 6, 5], [0, 0], [3, 0, 3, 2, 0, 0, 0, 1, 0, 1, 1, 3, 2, 3, 3, 0, 3, 2, 0, 2, 0, 0, 0, 2, 3, 1, 3, 2, 0, 2, 3, 3, 0, 0, 3, 0, 0, 1, 2, 3, 0, 2, 3, 1, 2, 2, 1, 2, 0, 3, 2, 2, 1, 2, 0, 0, 2, 0, 0, 3, 1, 1, 3, 3, 3, 1, 0, 2, 3, 3, 1, 2, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 2, 2, 2, 0, 0, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 0, 1], [0, 2, 1, 1, 0, 1, 1, 2], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = max(in1, abs(( in0 + i0 )))\\nloopBreak% = 0\\nwhile i2 != int(2.0):{:\\nb0 = in0 \\le int(4.0)\\nb2 = int(3.0) \\g abs(( abs(abs(res0)) * min(divInt(in1,mod(res0,i1)), res0) ))\\nin1 = ( min(int(6.0), abs(mod(i1,divInt(max(max(in2, in1), max(in0, i2)),int(3.0))))) - divInt(abs(i1),divInt(abs(int(5.0)),mod(mod(int(9.0),( i2 - max(( mod(int(1.0),( in1 + i1 )) - ( in2 - in1 ) ), max(int(5.0), int(1.0))) )),abs(max(abs(int(1.0)), in1))))) )\\nif False:{:\\nb2 = ( ( ( min(max(int(2.0), mod(int(5.0),i0)), res0) * in2 ) \\le int(7.0) or False ) and b1 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 14, 14, 4, 4, 2, 9, 4, 5, 2, 1, 27, 2, 77, 18, 20, 8, 10]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 7, 4, 9, 2, 7, 0, 1, 6, 3, 2], [3, 3], [0], [1], [0, 0, 1, 1], [0, 0], [2, 3], [], [], [6, 5, 3, 0, 4, 5, 6, 3], [], [3, 1, 2, 1, 2, 3, 2, 3, 2, 3, 0, 1, 2, 2, 3, 0, 2, 1, 3, 1, 0, 0, 3, 2, 0, 1, 3, 1, 1, 3, 1, 3, 2, 0, 1, 0, 2, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 2, 0, 2, 0, 0, 1, 2, 2, 1], [0, 2, 0, 0, 0, 0, 2], [1, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not ( min(int(0.0), ( int(3.0) + mod(abs(( min(( abs(res0) * int(7.0) ), ( ( min(in2, mod(int(4.0),min(int(9.0), in0))) + i0 ) + max(divInt(in1,int(2.0)), abs(int(7.0))) )) + int(0.0) )),abs(int(1.0))) )) \\ge max(( in2 + int(6.0) ), res0) or ( int(3.0) * in0 ) \\ge int(2.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 12, 12, 2, 1, 1, 4, 2, 2, 0, 0, 8, 0, 40, 10, 10, 7, 3]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [4, 2], [], [], [], [], [], [], [], [], [6], [1], [3, 1, 1], [], [1], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= max(int(4.0), int(2.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [0], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(0.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1], [5], [4, 2], [2, 1], [], [0, 1, 1], [0, 0], [2], [], [], [2, 5, 1, 2], [], [1, 0, 0, 2, 0, 0], [0], [], [0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not int(5.0) \\le i2\\nb1 = in2 == ( i1 + i2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 4, 0, 6, 1, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 1, 2, 0, 0, 0], [1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 3, 9, 4, 2, 6, 8, 7, 0, 6, 9, 7, 9, 1, 0, 2, 1, 7, 1, 8, 9, 0, 9, 6, 7, 9, 0, 7, 2, 7, 3, 9, 6, 6, 2, 8, 1, 4, 9, 2, 4, 6, 2, 6, 9, 8, 1, 3, 4, 2, 2, 0, 2, 6, 5, 4, 4, 7, 5, 4, 5, 9, 1, 1, 2, 4, 9, 9, 3, 0, 2, 6, 4, 5, 6, 1, 9, 8, 0, 6], [2, 1, 4, 0, 0, 2, 5, 1], [0, 1, 0, 2, 1], [1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 3, 3, 2, 3, 0, 3, 0], [1], [1, 0, 1, 1], [4, 6, 0, 1, 0, 3, 6, 6, 2, 5, 0, 5, 6, 3, 4, 5, 5, 3, 2, 0, 5, 2, 0, 4, 4, 2, 4, 2, 3, 3, 4, 0, 3, 2, 0, 3, 0, 0, 2, 6, 2, 5, 0, 5, 6, 6, 5, 0, 0, 5, 4, 4, 3, 6, 4, 4, 1, 6, 3, 1, 4, 5, 2, 3, 2, 4, 0, 1, 4, 5, 4, 6], [1, 0, 0], [0, 2, 1, 0, 2, 2, 3, 2, 0, 2, 1, 3, 1, 0, 3, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 3, 0, 1, 3, 1, 3, 1, 0, 1, 1, 1, 0, 3, 3, 0, 2, 2, 0, 2, 2, 3, 3, 1, 1, 3, 3, 3, 1, 2, 2, 0, 2, 2, 3, 3, 2, 2, 2, 2, 1, 0, 1, 0, 3, 2, 2, 0, 2, 3, 2, 1, 1, 1, 0, 1, 1, 3, 0, 3, 0, 3, 0, 3, 2, 0, 2, 3, 2, 0, 2, 1, 0, 2, 3, 0, 1, 3, 1, 2, 2, 1, 1, 3, 1, 2, 3, 3, 0, 1, 2, 0, 2, 2, 3, 2, 0, 0, 0, 2, 3, 2, 3, 1, 1, 3, 1, 3, 2, 3, 1, 3, 3, 2, 1, 2, 2, 2, 3, 2, 3, 2, 1, 1, 2, 3, 3, 0, 2, 3, 0, 0, 2, 0, 1, 0, 1, 0, 3, 3, 2, 2, 0, 1, 2, 2, 0, 2, 1, 3, 3, 2, 0, 1, 3, 3, 2, 2, 1, 3, 3, 2, 0, 3, 3, 1, 0, 0, 0, 3, 1, 1, 2, 0, 3, 2, 3, 1, 3, 1, 1, 1, 3, 3, 0, 2, 0, 3, 0, 2, 0, 1, 2, 0, 0, 2, 2, 0, 1, 1, 2, 2, 1, 3, 1, 2, 1, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 1, 2, 3, 2, 3, 1, 2, 2, 1, 0, 0, 0, 3, 2, 0, 1, 1, 3, 1, 3, 0, 1, 0, 1, 2, 2, 1, 3, 1, 3, 3, 2, 0, 3, 0, 2, 2, 1, 0, 0, 1, 1, 1, 2, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 2, 1, 0, 0, 1, 1, 0, 2, 2, 1, 0, 0, 1, 2, 1, 0, 1, 0, 1, 2, 0, 1, 0, 0, 1, 0, 1, 2, 1, 1, 2, 1, 2, 0, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 2, 1, 2, 2, 0, 0, 1, 0, 1, 1, 2, 2, 0, 1], [0, 0, 1, 2, 0, 2, 1, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 1, 1, 2, 0, 1, 1, 2, 0, 0, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 119, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += res0\\nloopBreak% = 0\\nwhile divInt(int(7.0),i0) == ( ( max(( i1 + ( int(6.0) - min(int(3.0), i0) ) ), max(in0, res0)) * int(9.0) ) + res0 ):{:\\nif i2 \\g ( mod(divInt(in2,i0),in2) * int(4.0) ):{:\\nloopBreak% = 0\\nwhile int(2.0) \\le int(6.0):{:\\nif int(8.0) \\l int(7.0):{:\\nif False:{:\\nres0 = in0\\n:}else:{:\\nif b0:{:\\nb1 = ( ( int(0.0) - int(6.0) ) \\l int(9.0) or min(in1, int(7.0)) == min(int(9.0), max(int(1.0), in2)) )\\n:}else:{:\\nb0 = ( not int(0.0) != int(2.0) or ( b2 and ( b1 and int(1.0) \\g in2 ) ) )\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = min(abs(i2), ( ( i0 * ( divInt(min(abs(int(7.0)), int(1.0)),abs(max(min(int(8.0), mod(( in2 + ( ( min(max(( ( divInt(( int(9.0) * i2 ),int(0.0)) + i0 ) * max(( ( in1 + ( min(divInt(int(9.0),int(6.0)), int(7.0)) * in1 ) ) * int(9.0) ), int(0.0)) ), abs(i2)), abs(in1)) + max(i2, min(( in0 * mod(min(( in0 - mod(int(7.0),in1) ), ( max(i0, int(2.0)) - abs(int(7.0)) )),divInt(( int(3.0) * int(9.0) ),max(int(6.0), mod(min(max(in0, int(6.0)), mod(i2,( ( min(( i0 + in0 ), i0) - mod(max(( abs(int(2.0)) - int(8.0) ), min(int(1.0), max(divInt(min(int(4.0), min(max(divInt(int(9.0),( mod(( min(divInt(max(divInt(int(2.0),int(4.0)), ( abs(max(i0, ( max(i2, res0) * mod(i2,int(6.0)) ))) + in2 )),int(2.0)), i0) + abs(max(mod(divInt(in2,int(6.0)),divInt(divInt(res0,divInt(int(9.0),abs(min(mod(res0,int(8.0)), abs(max(( ( int(1.0) * max(min(mod(in2,abs(abs(int(3.0)))), i0), i0) ) * in2 ), abs(int(4.0)))))))),int(2.0))), divInt(in1,min(( max(int(2.0), max(int(0.0), int(2.0))) * int(6.0) ), abs(max(in1, divInt(in0,abs(res0)))))))) ),divInt(in1,int(5.0))) * mod(in1,i1) )), ( ( res0 * int(4.0) ) - int(4.0) )), ( divInt(int(7.0),abs(int(5.0))) + ( int(4.0) * divInt(in0,int(5.0)) ) ))),int(9.0)), min(int(1.0), mod(int(1.0),i1))))),int(2.0)) ) + in1 ))),mod(int(4.0),mod(min(divInt(max(int(9.0), ( divInt(int(9.0),in2) + i2 )),in0), min(( i2 * int(3.0) ), int(0.0))),max(int(2.0), max(in1, int(6.0))))))))) ), i0)) ) * int(4.0) ) ),( mod(int(5.0),abs(int(6.0))) - abs(min(( i1 * max(in1, divInt(( int(1.0) * in2 ),in1)) ), int(9.0))) ))), int(8.0)))) * int(0.0) ) ) * ( res0 + int(6.0) ) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 6, 5, 81, 81, 8, 5, 4, 17, 8, 9, 1, 4, 72, 3, 300, 82, 68, 44, 39]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [5, 3, 9], [], [], [], [], [], [], [], [], [3], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= int(539.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [2, 3], [1], [1], [0], [0, 1, 0], [0], [3, 1], [1], [], [6], [], [3, 2, 1, 1, 0], [1], [2], [], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( abs(mod(int(2.0),int(3.0))) \\g res0 and False )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 1, 3, 1, 2, 1, 0, 1, 0, 5, 1, 1, 0, 1]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 0, 5, 5, 4, 5, 9, 4, 9, 1, 9, 3, 6, 8, 9, 5, 1, 8, 2, 5], [2, 2], [1, 2], [0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1], [0, 0], [3, 3, 3, 2, 0, 1], [0], [], [6, 5, 5, 6, 0, 1, 5, 5, 6, 6, 0, 0, 5, 1, 0, 6, 0, 1, 4, 0, 4], [0], [3, 1, 2, 2, 0, 1, 2, 1, 3, 1, 2, 3, 3, 2, 0, 3, 1, 2, 3, 3, 3, 0, 1, 0, 2, 0, 2, 3, 1, 3, 2, 0, 1, 2, 1, 3, 3, 3, 3, 1, 2, 1, 0, 2, 0, 1, 3, 2, 3, 0, 0, 0, 1, 3, 0, 0, 3, 3, 0, 2, 1, 3, 2, 3, 2, 0, 2, 2, 1, 0, 2, 1, 3, 1, 0, 1, 3, 1, 1, 3, 0, 0, 1, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 2, 0, 0, 1, 1, 0, 2, 1, 2, 0, 0, 1, 1, 2, 1, 2, 1, 1, 2, 2, 0, 1, 0], [0, 1, 1, 2, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( ( not max(int(4.0), ( ( res0 + int(5.0) ) - mod(int(0.0),abs(int(5.0))) )) == divInt(min(min(mod(in2,max(int(5.0), mod(max(min(abs(in2), int(4.0)), res0),divInt(i0,( max(int(5.0), abs(mod(i1,int(9.0)))) - ( int(4.0) * min(min(max(max(int(9.0), mod(int(1.0),in2)), ( in2 - int(9.0) )), abs(( max(res0, res0) - i0 ))), int(3.0)) ) ))))), abs(i0)), in2),max(max(i1, divInt(int(6.0),abs(( abs(( i0 + ( divInt(int(8.0),res0) - mod(int(9.0),min(int(5.0), i0)) ) )) + int(1.0) )))), max(int(8.0), int(2.0)))) and b2 ) or True ) or min(i1, in1) == int(5.0) )\\ni0 = in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 21, 21, 2, 2, 3, 8, 2, 6, 1, 0, 21, 1, 84, 19, 24, 9, 10]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 6], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 6, 4, 3, 3, 1, 8, 1, 5, 7, 5, 2, 0, 8, 8, 6, 0, 1, 8, 7, 8, 1, 7], [2, 1, 0, 4, 5], [2, 1, 1, 2, 2, 1], [], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 2, 0], [0], [1, 1, 1], [2, 4, 4, 0, 1, 5, 0, 6, 5, 2, 4, 3, 0, 6, 6, 1, 1, 2, 5, 1, 2, 2, 6, 4], [0, 1, 0, 1], [2, 3, 1, 2, 1, 3, 0, 3, 3, 2, 1, 3, 1, 2, 1, 0, 1, 0, 1, 3, 2, 0, 1, 1, 1, 0, 3, 0, 3, 3, 3, 3, 1, 3, 1, 0, 3, 2, 3, 0, 0, 3, 0, 1, 3, 0, 0, 3, 0, 3, 0, 2, 1, 1, 3, 0, 2, 3, 2, 2, 1, 3, 1, 0, 1, 0, 3, 3, 0, 1, 2, 2, 0, 2, 3, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [2, 1, 2, 1, 0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 2, 1, 2, 2, 1], [2, 1, 1, 0, 2, 1, 2, 2, 1, 0, 2], [1, 0, 0, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nloopBreak% = 0\\nwhile ( abs(int(5.0)) * ( int(6.0) - max(i2, abs(max(( int(4.0) - min(int(3.0), ( int(3.0) + in1 )) ), int(1.0)))) ) ) == in1:{:\\ni0 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif abs(( i1 * int(1.0) )) \\g int(5.0):{:\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = int(7.0) \\l in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 -= max(res0, abs(min(abs(max(int(5.0), max(int(2.0), in2))), abs(( min(i2, in1) * max(in0, int(0.0)) )))))\\n:}\\nif not min(i0, res0) \\le min(res0, max(i1, ( int(8.0) * int(8.0) ))):{:\\ni1 = min(i2, mod(abs(divInt(divInt(int(6.0),max(int(0.0), in2)),int(1.0))),i1))\\n:}else:{:\\nb2 = b2\\n:}\\n:}\\ni2 -= abs(abs(i2))\\nb1 = int(87.0) != ( ( res0 + divInt(max(int(8.0), in1),int(1.0)) ) * int(7.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 23, 23, 5, 6, 0, 10, 5, 5, 1, 3, 24, 4, 79, 13, 24, 11, 4]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1, 1], [6, 0, 0], [3], [0], [1], [0, 0, 1], [0], [3, 1], [0], [], [1, 1, 1, 6], [0], [1, 0, 3, 2, 1, 0, 2, 0, 1], [1, 0], [0], [2], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( True or int(6.0) \\ge i1 )\\ni1 = min(divInt(int(0.0),i1), ( res0 * int(0.0) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 1, 3, 1, 2, 1, 0, 4, 1, 9, 2, 1, 1, 1]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [1, 0, 1], [1, 1, 1], [6, 9, 6], [4], [0], [], [1], [0], [], [], [], [6, 3, 5], [0, 0], [1, 0, 1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(6.0)\\nb0 = in0 \\le int(9.0)\\nin2 = int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 3, 2, 4, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 1, 2, 2, 0, 2, 1, 2, 0, 2, 0], [0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 1, 1, 5, 2, 5, 0, 2, 1, 3, 0, 9, 6, 0, 5, 4, 2, 5], [2, 0, 4, 2, 2, 0], [1, 0, 1], [1], [0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [3, 0, 0], [], [1, 0, 0, 1], [5, 5, 5, 5, 3, 3, 2, 2, 6, 1, 6, 6, 1, 0, 6, 0, 0, 2, 0, 5, 2, 4, 4, 4, 1], [0, 1, 0, 0, 1], [3, 0, 2, 0, 0, 1, 2, 1, 0, 1, 1, 3, 3, 3, 1, 3, 1, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 1, 3, 2, 3, 0, 0, 0, 0, 2, 2, 0, 3, 0, 2, 2, 3, 2, 0, 1, 2, 0, 1, 1, 3, 2, 1, 0, 1, 1, 0, 0, 2, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 0, 2, 1, 1, 0, 0, 1, 0, 0, 1], [0, 2, 0, 1, 1, 0, 1, 0, 2], [0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( max(in2, ( in2 + in2 )) == int(3.0) or b1 ):{:\\nb0 = divInt(int(4.0),in2) \\l int(1.0)\\n:}else:{:\\nin0 = int(1.0)\\n:}\\nif b1:{:\\nif min(abs(max(int(5.0), max(int(2.0), int(5.0)))), int(0.0)) \\le ( int(2.0) * min(in0, int(1.0)) ):{:\\ni2 += i2\\n:}\\n:}\\nloopBreak% = 0\\nwhile res0 == i1:{:\\nres0 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(( max(res0, i1) - i0 ), res0) == ( ( i0 - min(i0, mod(divInt(min(( i2 + int(0.0) ), divInt(i0,int(9.0))),int(6.0)),max(( int(0.0) - in2 ), int(5.0)))) ) + int(4.0) ):{:\\ni2 = in1\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 \\l divInt(in1,int(2.0)):{:\\ni1 *= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 990, "mapping_values": [1, 12, 12, 6, 6, 19, 19, 6, 3, 1, 9, 6, 3, 0, 4, 25, 5, 62, 12, 11, 9, 5]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 1], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [6, 9], [], [], [], [], [], [], [], [], [4], [1], [3, 1, 1], [], [0], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= min(int(6.0), int(9.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [0, 1], [1, 1, 1, 1], [7, 0, 3, 3], [3, 2], [0], [], [1, 1], [0, 0], [], [], [], [5, 1, 5, 3, 6], [0], [3, 3, 3, 3, 1, 0, 1, 0, 0, 1, 2, 0, 1], [0], [2, 0, 1, 2], [2], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(min(max(abs(int(7.0)), in2), int(0.0))) \\ge i1:{:\\nb0 = in2 == int(3.0)\\nin0 = ( res0 * int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 2, 1, 0, 2, 2, 0, 0, 0, 5, 1, 13, 1, 4, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 2, 2, 1, 2, 0, 0], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 1, 0, 6, 8, 0, 2, 3, 3, 7, 0, 5, 5, 1, 2, 6, 4, 0, 4, 3, 2, 6, 0, 6], [1, 0, 5, 5], [2, 2], [0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0], [3, 2, 1, 0, 3, 3, 1, 1, 2, 0, 3, 2, 2], [1, 1, 0], [1, 1], [1, 2, 2, 3, 3, 1, 1, 6, 2, 3, 3, 2, 2, 0, 2, 0, 3, 6, 5, 1, 5, 6, 3, 3, 6, 6, 6, 6], [1, 0, 0, 1, 1], [1, 1, 3, 2, 3, 1, 3, 3, 0, 0, 2, 0, 3, 3, 3, 1, 2, 1, 3, 2, 1, 3, 2, 1, 0, 3, 2, 1, 1, 0, 3, 0, 3, 3, 3, 0, 2, 0, 2, 3, 0, 2, 0, 0, 1, 2, 1, 0, 1, 3, 0, 0, 1, 3, 3, 3, 2, 2, 0, 0, 2, 2, 1, 3, 0, 0, 1, 1, 0, 0, 2, 3, 1, 1, 1, 3, 2, 3, 1, 0, 2, 2, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 2, 1, 0, 0, 0, 2, 2, 0, 2, 0, 1, 1, 0, 2, 0, 0, 1, 1, 2, 0, 1], [1, 1, 0, 1, 2, 0, 1, 1, 1, 2, 0, 0, 2, 1], [0, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= int(9.0)\\nloopBreak% = 0\\nwhile ( not False and b2 ):{:\\ni2 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(divInt(min(int(1.0), abs(max(i2, in0))),( in0 - min(min(min(int(0.0), ( int(6.0) + abs(( int(8.0) - abs(divInt(int(0.0),i1)) )) )), min(( int(2.0) * int(3.0) ), i1)), abs(res0)) )), min(max(max(i2, ( in0 + ( min(in0, mod(i2,i2)) - int(3.0) ) )), mod(int(7.0),i0)), int(0.0))) \\g abs(i2):{:\\nloopBreak% = 0\\nwhile ( ( False or True ) or not i0 \\l int(5.0) ):{:\\nif b2:{:\\nin0 = min(min(max(mod(( res0 - in2 ),( mod(int(5.0),max(i1, in2)) - int(1.0) )), int(2.0)), res0), in0)\\n:}else:{:\\nif ( not ( abs(int(6.0)) * int(4.0) ) != int(0.0) and not min(( max(int(4.0), in0) + mod(( int(3.0) + res0 ),int(2.0)) ), int(6.0)) != int(0.0) ):{:\\nres0 *= int(6.0)\\n:}else:{:\\nres0 -= res0\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 25, 25, 4, 2, 4, 17, 4, 13, 3, 2, 28, 5, 89, 18, 23, 14, 7]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 0, 1, 0, 2, 0], [1, 1], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 4, 4, 9, 6, 1, 5, 2, 8, 6, 7, 3, 6, 4, 1, 2, 3, 0, 6, 6, 1, 4, 3, 6, 8, 6, 3, 1, 8, 8, 2, 1, 4, 3, 3, 2, 8, 8, 4, 7, 2, 0, 0, 5, 5, 7, 4, 5, 0, 7, 3, 2, 8, 0, 3, 2, 6, 1, 7, 0, 4, 5, 7, 7, 2, 5, 6, 3, 5, 2, 6, 8, 0, 1, 2, 6], [3, 2, 1, 1, 4], [2, 2], [1], [0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0], [3, 2, 2], [], [], [4, 0, 4, 2, 5, 0, 3, 0, 1, 3, 3, 0, 3, 1, 4, 6, 0, 2, 0, 0, 1, 5, 6, 5, 4, 5, 0, 0, 3, 1, 6, 4, 3, 3, 0, 5, 5, 1, 4, 6, 1, 1, 4, 6, 3, 1, 6, 5, 1, 5, 4, 1, 6, 3, 4, 6, 0, 1, 2, 1, 2, 4, 4, 6, 4, 3, 6, 5, 6, 5, 2, 3, 0, 4, 2, 2, 2, 6, 3, 0, 5, 6, 5, 0, 4, 6], [1, 1], [3, 2, 3, 3, 3, 2, 1, 1, 2, 3, 2, 0, 0, 2, 2, 0, 0, 3, 3, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 2, 1, 1, 2, 0, 2, 0, 1, 3, 3, 1, 2, 3, 2, 3, 0, 0, 1, 0, 1, 3, 2, 0, 0, 0, 2, 3, 0, 3, 3, 0, 0, 3, 3, 2, 2, 3, 2, 3, 3, 3, 0, 2, 1, 1, 1, 3, 2, 1, 3, 2, 3, 3, 0, 0, 1, 1, 2, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 3, 2, 2, 1, 2, 3, 3, 0, 0, 1, 2, 1, 1, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 2, 1, 2, 2, 2, 1, 2, 3, 0, 1, 2, 2, 1, 2, 1, 0, 1, 0, 2, 2, 2, 2, 3, 2, 3, 3, 2, 0, 1, 3, 2, 0, 1, 2, 0, 0, 2, 3, 2, 3, 0, 2, 3, 2, 1, 3, 0, 1, 0, 3, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 1, 3, 2, 3, 1, 0, 0, 3, 2, 2, 1, 0, 1, 2, 1, 2, 3, 1, 3, 2, 2, 2, 0, 0, 1, 2, 2, 1, 2, 0, 3, 2, 0, 0, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 1, 2, 1, 3, 3, 1, 1, 0, 3, 0, 1, 1, 2, 3, 1, 0, 2, 1, 3, 1, 2, 3, 1, 3, 1, 0, 3, 1, 0, 0, 2, 0, 2, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 0, 2, 2, 1, 3, 2, 0, 0, 2, 1, 0, 3, 0, 0, 3, 1, 3, 0, 1, 1, 0, 1, 2, 1, 0, 1, 0, 3, 2, 2, 2, 1, 1, 1, 0, 3, 2, 0, 1, 3, 2, 2, 0, 2, 3, 3, 0, 3, 0, 0, 2, 3, 2, 3, 0, 2, 1, 1, 3, 0, 3, 1, 1, 0, 3, 2, 1, 0, 3, 3, 1, 0, 3, 3, 0, 3, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 0, 1, 2, 1, 2, 2, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 2, 2, 0, 1, 1, 2, 0, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 0, 0, 2, 1, 0, 0, 1, 0, 1, 2, 1, 0, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2], [0, 1, 0, 2, 2, 2, 1, 0, 2, 2, 2, 1, 0, 1, 1, 1, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 2, 2, 2, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( min(( max(min(min(( int(0.0) + int(4.0) ), ( min(divInt(in1,i0), ( ( in1 - i2 ) + max(min(max(int(4.0), divInt(max(mod(( max(abs(abs(max(divInt(int(4.0),int(9.0)), divInt(in2,divInt(i0,int(6.0)))))), max(max(int(1.0), divInt(max(( max(in0, i0) * int(5.0) ), i1),int(2.0))), min(( in0 * in0 ), i0))) * ( abs(in0) - abs(min(i1, in1)) ) ),abs(max(divInt(mod(abs(mod(max(abs(max(res0, divInt(int(8.0),int(6.0)))), int(7.0)),min(mod(int(3.0),max(( abs(max(i0, i2)) + int(6.0) ), int(4.0))), ( i0 * i0 )))),i1),mod(in2,int(1.0))), res0))), mod(int(2.0),in2)),abs(( ( int(3.0) * ( abs(min(in1, in2)) * int(0.0) ) ) - divInt(int(6.0),int(6.0)) )))), ( ( int(1.0) + mod(min(( mod(abs(abs(( divInt(int(4.0),( ( ( int(3.0) - ( abs(i0) - int(6.0) ) ) - ( ( int(8.0) - divInt(int(6.0),i0) ) + int(3.0) ) ) + in0 )) * divInt(divInt(( ( abs(mod(min(max(( i1 - int(1.0) ), min(divInt(res0,int(8.0)), divInt(in1,in0))), mod(abs(mod(min(in0, ( abs(( int(8.0) - abs(i0) )) + int(2.0) )),in2)),min(max(in2, i1), int(1.0)))),max(mod(abs(int(4.0)),in1), res0))) + int(3.0) ) + min(divInt(max(int(3.0), i1),i1), max(mod(divInt(int(2.0),in1),int(8.0)), ( int(8.0) + mod(abs(int(4.0)),abs(( mod(mod(res0,in0),int(7.0)) * divInt(( int(2.0) + divInt(i1,abs(( res0 * in2 ))) ),i1) ))) ))) ),( int(0.0) + ( in2 - divInt(mod(in1,i1),res0) ) )),int(0.0)) ))),divInt(int(5.0),max(abs(int(5.0)), int(7.0)))) - in0 ), abs(in1)),int(4.0)) ) - int(5.0) )), divInt(max(int(0.0), res0),( int(7.0) + abs(int(3.0)) ))) )) - ( max(int(2.0), min(int(8.0), i0)) - min(int(0.0), i1) ) )), i2), ( i1 - mod(int(3.0),( int(2.0) - abs(max(i2, mod(( int(6.0) - in1 ),in1))) )) )) - ( ( int(1.0) - min(( res0 - in1 ), ( int(7.0) * in0 )) ) - min(res0, in2) ) ), max(int(0.0), min(res0, int(4.0)))) \\ge int(5.0) or in2 == int(7.0) ):{:\\ni2 *= ( int(7.0) - in0 )\\ni0 -= int(2.0)\\nb2 = not not in1 \\g max(divInt(( ( int(5.0) + int(6.0) ) * int(3.0) ),i2), abs(divInt(i2,int(5.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile max(mod(divInt(i2,( min(min(res0, abs(in0)), i0) * ( max(mod(abs(in2),( int(2.0) * int(6.0) )), abs(res0)) - max(int(8.0), int(0.0)) ) )),in2), abs(mod(int(1.0),i0))) \\g abs(abs(int(2.0))):{:\\nb2 = in1 \\le abs(max(res0, abs(int(6.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 77, 77, 5, 2, 1, 8, 5, 3, 0, 0, 86, 2, 344, 97, 86, 52, 47]}, {"genotype": [[0], [1], [0], [], [1], [1], [4], [], [], [], [], [], [], [], [], [5], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(4.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 1, 1, 0], [0, 1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 2, 9, 3, 1, 7, 4, 3, 8, 9, 3, 9, 6, 3, 3, 3], [5, 5, 4, 0, 0], [1, 1, 1], [1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 0], [], [1], [2, 1, 2, 1, 6, 2, 6, 5, 3, 3, 4, 1, 4], [0, 1], [1, 1, 1, 2, 0, 1, 2, 3, 0, 1, 1, 0, 3, 3, 1, 2, 1, 1, 3, 2, 3, 3, 0, 3, 0, 3, 1, 1, 0, 0, 3, 0, 0, 3, 1, 0, 3, 2, 0, 1, 1, 3, 2, 1, 2, 1, 1], [0, 1, 1, 1, 0, 1, 1], [2, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2], [1, 2, 1], [0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nloopBreak% = 0\\nwhile int(5.0) != int(5.0):{:\\nb1 = ( int(2.0) != ( i2 - int(9.0) ) or ( ( divInt(abs(i1),int(3.0)) \\le int(1.0) or ( i2 \\l max(min(int(7.0), mod(int(4.0),int(3.0))), max(mod(min(abs(i1), max(res0, max(int(8.0), int(9.0)))),i2), res0)) and min(in2, in0) \\l max(int(3.0), in0) ) ) or b1 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = min(( i1 * int(9.0) ), int(6.0))\\n:}else:{:\\nin1 -= abs(mod(int(3.0),mod(int(3.0),int(3.0))))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 17, 17, 5, 3, 4, 11, 5, 6, 0, 1, 13, 2, 47, 7, 12, 3, 5]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [8, 1, 3], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(813.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 0, 0], [0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 1, 1, 2, 5, 9, 6, 5, 7, 7], [5, 4, 4, 1], [0, 1], [1], [1, 1, 0, 0, 1, 1], [0, 0, 0, 0], [3, 2], [], [0], [0, 3, 3, 1, 4, 0, 5, 2, 2, 0, 5, 3], [0], [2, 1, 0, 3, 0, 1, 3, 3, 2, 3, 0, 3, 3, 2, 0, 0, 0, 2, 0, 2, 1, 3, 0, 1, 1, 2, 3, 3, 1, 1, 0, 0, 1, 3, 2, 3, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0], [2, 2, 1, 0, 0, 2, 0, 1, 0, 2, 2], [1, 1, 1, 2], [1, 0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(5.0) - i0 ) != abs(in0)\\nif int(6.0) \\le abs(max(mod(min(in0, min(abs(( i1 - in1 )), i0)),divInt(in2,divInt(int(1.0),min(i2, int(1.0))))), int(2.0))):{:\\ni2 = ( max(min(int(5.0), int(9.0)), i0) - in2 )\\n:}\\nb1 = ( not int(6.0) \\le abs(( abs(int(5.0)) * in0 )) or int(7.0) \\g int(7.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 11, 11, 4, 2, 1, 6, 4, 2, 0, 1, 12, 1, 40, 7, 11, 4, 3]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1], [2, 1, 0, 0, 1, 1], [1], [1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 5, 5, 4, 0, 1, 6, 6, 1, 1, 6, 8, 4, 5, 3, 9, 9, 9, 3, 7, 4, 9, 4, 7, 6, 3, 4, 1, 9, 6, 7, 0, 2, 8, 3, 0, 6, 7, 8, 8, 0, 2, 3, 6, 9, 3, 5, 2, 0, 3, 3, 2, 1, 4, 9, 7, 7, 2, 3, 8, 2, 4, 1, 5, 8, 4, 1, 1, 6, 8, 0, 5, 9, 9, 5, 9, 1, 4, 1, 8, 4, 6, 2, 8, 8, 7, 7, 0, 8, 9, 6, 0, 3, 1, 0, 2, 9, 6, 3, 2, 0, 9, 5, 4, 4, 7, 8, 7, 1, 6, 0, 6, 9, 1, 1, 9, 9, 4, 5, 9, 6, 7, 8, 7, 3, 6, 2, 8, 4, 0, 3, 5, 4, 6, 1, 5, 5, 4, 0, 3, 7, 6, 6, 6, 7, 7, 9, 0, 2, 5, 2, 8, 5, 2, 5, 3, 2, 3, 7, 0, 8, 7, 9, 0, 3, 9, 9, 2, 0, 9, 7, 6, 5, 7, 7, 4, 8, 8, 2, 0, 6, 2, 0, 7, 4, 4, 6, 5, 3, 7, 0, 9, 5, 8, 4, 7, 4, 9, 7, 2, 4, 2, 4, 3, 1, 5, 3, 8, 4, 4, 3, 8, 9, 6, 4, 2, 9, 0, 8, 4, 4, 2], [4, 1, 1, 1], [0, 2, 2, 2, 1], [0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0], [2, 0, 2, 2, 3, 1], [1], [], [1, 4, 5, 1, 3, 6, 2, 3, 3, 2, 0, 3, 0, 0, 2, 4, 0, 6, 0, 1, 6, 4, 5, 0, 5, 2, 2, 1, 5, 0, 2, 6, 0, 0, 5, 3, 0, 1, 5, 1, 1, 5, 2, 0, 6, 1, 1, 6, 4, 5, 1, 3, 3, 4, 4, 3, 6, 0, 3, 3, 4, 5, 4, 2, 1, 0, 5, 2, 0, 2, 0, 4, 1, 4, 4, 5, 4, 4, 2, 0, 2, 6, 2, 1, 0, 4, 3, 4, 4, 6, 6, 4, 2, 4, 2, 0, 1, 0, 1, 6, 5, 4, 3, 4, 4, 3, 4, 6, 4, 2, 0, 5, 4, 4, 2, 1, 0, 5, 4, 6, 5, 2, 0, 2, 5, 4, 5, 1, 6, 5, 4, 4, 1, 1, 6, 5, 4, 5, 4, 5, 5, 4, 2, 4, 4, 2, 5, 4, 5, 0, 1, 1, 2, 6, 2, 6, 6, 2, 3, 3, 3, 0, 0, 4, 3, 4, 6, 0, 0, 2, 6, 2, 6, 1, 2, 6, 6, 2, 2, 4, 4, 4, 4, 2, 3, 1, 5, 2, 1, 6, 3, 2, 6, 2, 6, 3, 4, 0, 4, 5, 4, 4, 1], [1], [3, 1, 1, 3, 2, 0, 3, 3, 2, 0, 1, 3, 3, 2, 1, 3, 2, 3, 0, 1, 2, 2, 3, 0, 3, 2, 0, 3, 0, 2, 2, 2, 2, 3, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 2, 3, 1, 1, 1, 2, 3, 2, 2, 0, 2, 2, 1, 2, 2, 2, 2, 3, 2, 0, 2, 0, 3, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 1, 2, 2, 3, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 1, 3, 2, 0, 3, 2, 2, 0, 3, 0, 3, 0, 3, 0, 2, 3, 0, 1, 2, 1, 1, 1, 2, 3, 3, 0, 0, 0, 3, 2, 0, 2, 2, 3, 0, 1, 2, 3, 2, 1, 0, 1, 1, 3, 0, 3, 2, 0, 2, 3, 1, 3, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 2, 3, 1, 2, 3, 2, 0, 3, 1, 3, 0, 0, 1, 0, 3, 0, 2, 1, 1, 0, 2, 1, 1, 2, 0, 0, 3, 2, 3, 3, 2, 3, 2, 3, 1, 2, 0, 1, 1, 2, 1, 3, 1, 1, 1, 2, 3, 2, 2, 1, 2, 0, 3, 1, 1, 0, 1, 1, 2, 2, 2, 3, 2, 2, 1, 0, 1, 2, 3, 1, 2, 3, 1, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 3, 1, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 1, 1, 0, 0, 1, 3, 1, 1, 2, 1, 1, 2, 3, 0, 3, 1, 3, 2, 3, 2, 2, 2, 3, 1, 1, 3, 1, 0, 2, 2, 0, 1, 2, 3, 3, 2, 2, 2, 1, 1, 2, 0, 2, 2, 3, 3, 3, 0, 3, 2, 3, 0, 1, 3, 0, 2, 0, 2, 1, 3, 0, 1, 2, 0, 1, 1, 0, 0, 2, 3, 2, 0, 2, 2, 3, 2, 3, 3, 3, 0, 2, 3, 1, 0, 3, 0, 0, 3, 1, 3, 1, 1, 2, 3, 0, 2, 1, 1, 1, 0, 0, 0, 1, 1, 2, 3, 2, 2, 1, 0, 2, 1, 0, 2, 2, 0, 0, 2, 0, 0, 3, 2, 3, 2, 3, 1, 3, 1, 2, 3, 1, 1, 3, 3, 2, 0, 2, 2, 0, 2, 3, 0, 2, 0, 1, 0, 3, 3, 1, 3, 1, 3, 2, 1, 3, 0, 1, 3, 2, 3, 2, 1, 3, 2, 2, 0, 1, 0, 3, 0, 2, 1, 3, 3, 1, 1, 2, 2, 2, 2, 0, 3, 2, 3, 0, 0, 1, 2, 2, 2, 0, 3, 0, 3, 3, 1, 1, 1, 0, 0, 2, 2, 3, 3, 2, 2, 3, 0, 0, 1, 3, 3, 3, 0, 3, 3, 1, 1, 2, 2, 0, 1, 0, 3, 3, 2, 1, 0, 1, 3, 1, 2, 3, 2, 2, 2, 0, 3, 0, 2, 3, 3, 1, 0, 2, 1, 2, 1, 0, 3, 0, 2, 1, 3, 1, 1, 0, 2, 3, 1, 3, 1, 0, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 0, 0, 3, 2, 1, 1, 3, 0, 1, 2, 1, 3, 2, 0, 0, 3, 1, 2, 2, 2, 0, 3, 0, 0, 2, 1, 3, 2, 1, 1, 1, 0, 0, 2, 2, 0, 1, 3, 0, 1, 2, 3, 2, 3, 0, 3, 2, 1, 3, 3, 1, 3, 3, 3, 2, 0, 1, 3, 0, 2, 0, 2, 2, 3, 1, 2, 1, 3, 0, 2, 1, 1, 2, 1, 2, 2, 2, 0, 0, 3, 0, 3, 0, 0, 0, 3, 3, 2, 2, 0, 2, 0, 1, 0, 3, 2, 2, 3, 0, 2, 1, 0, 3, 0, 2, 2, 3, 0, 1, 3, 0, 3, 2, 3, 3, 2, 3, 1, 2, 3, 2, 2, 2, 1, 2, 1, 3, 0, 1, 2, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 3, 2, 3, 1, 0, 2, 2, 1, 3, 0, 2, 1, 1, 3, 2, 3, 3, 1, 3, 3, 3, 1, 0, 3, 3, 1, 1, 0, 3, 2, 1, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 1, 0, 0, 2, 1, 3, 0, 2, 3, 1, 0, 3, 2, 1, 2, 0, 3, 1, 3, 0, 3, 3, 2, 1, 2, 3, 1, 2, 1, 1, 0, 2, 0, 2, 3, 0, 1, 1, 0, 2, 1, 1, 0, 1, 3, 1, 0, 1, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 3, 2, 0, 0, 2, 2, 1, 1, 1, 1, 3, 3, 2, 3, 2, 2, 3, 3, 3, 2, 2, 1, 2, 0, 1, 2, 3, 1, 2, 2, 2, 1, 2, 0, 3, 0, 1, 0, 1, 3, 3, 2, 3, 3, 2, 2, 0, 1, 0, 2, 1, 2, 0, 0, 3, 2, 2, 0, 3, 1, 2, 0, 0, 1, 3, 1, 2, 2, 3, 1, 3, 2, 2, 3, 1, 0, 1, 0, 1, 1, 1, 3, 2, 2, 2, 2, 0, 0, 3, 0, 0, 3, 2, 0, 1, 1, 1, 3, 1, 2, 1, 2, 1, 2, 0, 1, 3, 1, 0, 2, 2, 1, 0, 1, 1, 0, 3, 3, 0, 1, 1, 3, 3, 0, 1, 2, 3, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1, 0, 0, 0, 2, 1, 2, 2, 1, 2, 0, 2, 0, 1, 1, 0, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0, 0, 1, 0, 1, 2, 1, 1, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 2, 1, 2, 2, 1, 1, 1, 1, 0, 2, 1, 2, 1, 2, 0, 0, 0, 2, 0, 1, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 2, 0, 2, 0, 1, 2, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1, 0, 0, 2, 1, 0, 2, 2, 2, 0, 1, 0, 1, 1, 2, 2, 1, 0, 0, 2, 0, 1, 2, 2, 1, 1, 2, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 1, 2, 1, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0, 1, 0, 1, 1, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 1, 2, 0, 2, 1, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 0, 2, 1, 1, 2], [2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 1, 2, 1, 0, 2, 2, 0, 0, 1, 2, 1, 1, 1, 0, 2, 2, 1, 2, 1, 0, 1, 2, 2, 0, 1, 1, 1, 2, 1, 0, 1, 1, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 1, 1, 1, 2, 0, 2, 1, 2, 2, 0, 1, 1, 1, 1, 0, 0, 2, 1, 2, 2, 0, 1, 2, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 2, 1, 0, 0, 2, 2, 1, 0, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 2, 0, 2, 0, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 105, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not min(int(0.0), int(0.0)) \\le max(divInt(i1,max(min(( in1 * int(5.0) ), abs(max(( int(5.0) - min(mod(min(in2, int(4.0)),mod(( min(i1, abs(( in0 + max(res0, mod(( divInt(( abs(i2) + ( ( mod(in0,in0) + i2 ) + ( ( i0 + int(0.0) ) * abs(mod(max(int(1.0), int(6.0)),int(6.0))) ) ) ),mod(abs(( divInt(in0,divInt(mod(int(1.0),divInt(mod(mod(( min(( i0 + ( i0 + abs(( i2 - min(mod(in1,i0), int(1.0)) )) ) ), divInt(int(6.0),max(int(8.0), mod(divInt(max(int(4.0), int(5.0)),res0),int(3.0))))) + i0 ),int(9.0)),( ( int(9.0) * ( min(( ( divInt(i1,res0) * int(9.0) ) + int(3.0) ), abs(mod(in1,max(( divInt(in2,abs(i0)) + max(in2, max(i2, divInt(max(i2, int(7.0)),( int(4.0) - int(9.0) )))) ), int(4.0))))) - ( max(max(i1, in2), i0) - abs(( i2 - ( divInt(max(res0, int(7.0)),( min(divInt(int(6.0),i0), int(3.0)) + int(4.0) )) * min(i0, max(( in2 - divInt(min(int(1.0), max(divInt(int(9.0),int(6.0)), ( ( int(7.0) * int(0.0) ) - int(2.0) ))),( divInt(abs(( max(int(8.0), divInt(max(mod(in0,min(int(3.0), abs(i0))), i1),int(0.0))) + in2 )),min(i1, divInt(int(6.0),int(7.0)))) * i1 )) ), ( int(8.0) * int(8.0) ))) ) )) ) ) ) + divInt(in2,i2) )),min(divInt(max(min(( max(divInt(min(int(0.0), divInt(i0,int(2.0))),int(3.0)), divInt(int(6.0),min(int(9.0), int(3.0)))) + int(5.0) ), ( min(( ( int(2.0) - divInt(res0,min(int(0.0), int(3.0))) ) * i1 ), int(3.0)) - int(2.0) )), mod(mod(( min(mod(( int(1.0) - i1 ),int(4.0)), divInt(abs(int(9.0)),divInt(max(int(7.0), int(7.0)),res0))) - divInt(in1,( in2 + mod(i1,mod(int(2.0),min(int(3.0), in0))) )) ),max(( in0 * in1 ), in1)),in0)),res0), i0))),in0)) * ( ( ( in0 - ( int(8.0) * int(2.0) ) ) - in1 ) + in2 ) )),int(4.0))) - min(int(1.0), int(5.0)) ),divInt(int(8.0),int(4.0)))) ))) * mod(abs(in1),max(int(1.0), abs(( abs(( divInt(divInt(max(int(1.0), int(6.0)),max(int(8.0), i2)),divInt(mod(i1,int(0.0)),( max(max(( ( ( int(5.0) * int(9.0) ) + mod(i0,( ( min(abs(max(in2, abs(( max(i2, int(9.0)) - abs(i0) )))), divInt(i2,( int(5.0) - min(i0, int(9.0)) ))) - divInt(in1,int(1.0)) ) * int(4.0) )) ) - i1 ), in1), ( min(mod(in1,divInt(mod(min(mod(abs(min(max(in2, ( abs(int(1.0)) + in1 )), abs(in1))),i2), max(int(8.0), min(int(4.0), int(6.0)))),( abs(i0) - ( int(2.0) - int(8.0) ) )),int(8.0))), i2) * res0 )) - i2 ))) * int(7.0) )) * int(7.0) )))) ),mod(max(( mod(int(0.0),i1) - ( int(8.0) + i0 ) ), ( ( in1 - in0 ) - ( in1 - in1 ) )),max(divInt(abs(mod(min(int(9.0), min(int(6.0), divInt(min(int(0.0), int(3.0)),min(max(( res0 * divInt(( res0 - divInt(min(in1, ( i2 - int(1.0) )),in1) ),max(max(int(0.0), max(int(2.0), max(mod(int(9.0),min(i2, int(6.0))), min(( abs(( int(3.0) - min(mod(mod(i0,int(2.0)),i1), abs(i0)) )) * mod(int(0.0),min(max(int(9.0), int(5.0)), divInt(( mod(( i1 + abs(( abs(res0) * in2 )) ),int(4.0)) - divInt(( ( in1 * min(in0, max(max(int(4.0), int(7.0)), int(8.0))) ) * in1 ),in1) ),divInt(( max(abs(mod(mod(min(in0, in1),int(7.0)),abs(abs(abs(res0))))), max(min(int(1.0), int(6.0)), mod(( in1 + int(0.0) ),i2))) - max(min(( int(6.0) - i0 ), int(9.0)), max(int(1.0), ( min(( ( ( in2 - min(in1, mod(max(max(int(1.0), in1), divInt(int(9.0),mod(int(9.0),i2))),max(i1, divInt(int(4.0),max(int(5.0), int(9.0)))))) ) - i0 ) + ( max(int(6.0), abs(int(7.0))) + in2 ) ), ( in1 * int(8.0) )) - ( int(7.0) * ( res0 * int(3.0) ) ) ))) ),( int(6.0) + in2 ))))) ), i2)))), abs(mod(int(2.0),int(8.0))))) ), min(i0, int(4.0))), divInt(int(0.0),max(mod(i2,in2), abs(int(3.0)))))))),( divInt(( in1 - min(in2, i1) ),( int(5.0) * abs(( int(4.0) + int(6.0) )) )) + int(1.0) ))),res0), in2)))), mod(( in1 + int(5.0) ),min(in1, int(5.0)))) ), ( min(divInt(min(i1, max(( int(4.0) + min(min(int(0.0), abs(max(min(mod(i1,int(3.0)), abs(res0)), ( in2 - divInt(mod(abs(int(7.0)),( int(6.0) - abs(in1) )),divInt(int(6.0),int(6.0))) )))), ( int(7.0) - ( mod(( in2 * in1 ),min(in2, max(in2, in1))) - i2 ) )) ), min(max(mod(( in1 - ( in1 * int(7.0) ) ),i2), max(( ( abs(in2) + mod(int(9.0),in1) ) * abs(in2) ), ( ( max(i0, int(0.0)) - min(i1, min(( abs(min(( max(int(2.0), divInt(abs(( ( ( int(5.0) + mod(int(2.0),abs(i1)) ) + int(8.0) ) * ( int(5.0) * max(max(abs(max(max(int(2.0), int(5.0)), int(3.0))), int(2.0)), int(3.0)) ) )),min(( max(int(7.0), i2) - divInt(( int(0.0) + min(res0, divInt(int(8.0),int(7.0))) ),min(divInt(abs(min(int(9.0), min(min(max(int(0.0), i2), abs(max(int(3.0), int(9.0)))), res0))),max(mod(int(9.0),int(2.0)), res0)), ( min(divInt(i2,abs(abs(max(int(0.0), int(9.0))))), in0) * in0 ))) ), divInt(int(7.0),min(in0, ( max(int(6.0), i0) * abs(( int(5.0) * divInt(i0,max(int(7.0), min(in1, min(max(divInt(int(7.0),divInt(min(int(4.0), ( int(8.0) * int(8.0) )),in0)), ( in1 * mod(max(res0, int(2.0)),int(0.0)) )), i0)))) )) )))))) * mod(int(6.0),int(2.0)) ), i0)) - int(0.0) ), max(int(7.0), i2))) ) + int(4.0) ))), ( res0 + i2 )))),res0), ( abs(int(4.0)) - i1 )) * ( i2 * abs(( res0 + res0 )) ) )))), ( mod(int(6.0),int(5.0)) + int(3.0) ))), int(7.0)):{:\\ni2 -= max(abs(( max(mod(( min(abs(abs(( divInt(int(0.0),divInt(i2,int(9.0))) * divInt(abs(int(5.0)),( ( mod(int(8.0),mod(in1,abs(in1))) + int(4.0) ) - in1 )) ))), int(7.0)) + max(abs(mod(min(abs(mod(divInt(in1,int(4.0)),i2)), divInt(int(9.0),divInt(in0,i1))),max(divInt(divInt(in2,min(int(7.0), ( i2 * i1 ))),int(2.0)), abs(int(4.0))))), ( ( max(int(2.0), min(( ( max(int(4.0), res0) + int(3.0) ) * in0 ), int(1.0))) + int(5.0) ) * int(3.0) )) ),abs(( divInt(divInt(( i2 + res0 ),max(i2, res0)),min(( in0 - int(8.0) ), int(4.0))) * int(4.0) ))), abs(int(3.0))) * ( int(8.0) * divInt(int(9.0),( in1 + int(6.0) )) ) )), min(int(4.0), i0))\\nb0 = b2\\nb2 = not not ( False and ( divInt(int(2.0),in1) + int(9.0) ) \\g int(0.0) )\\nb2 = in2 \\g min(abs(in1), int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(4.0) \\g max(max(in1, int(4.0)), mod(abs(int(2.0)),i1))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 223, 223, 4, 5, 1, 10, 4, 6, 1, 0, 203, 1, 905, 261, 219, 138, 124]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 1], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1], [3, 5, 2, 2, 8], [0], [0, 2], [0], [0, 0, 1, 0], [0], [2, 3, 0], [], [], [3, 2, 2, 4, 4], [], [0, 2, 3, 3, 2, 3, 2, 1, 2, 0, 0, 1, 3, 2, 1, 2, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 2, 2], [0, 1, 2, 2], [1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not ( in0 \\l mod(max(max(( abs(( int(3.0) + ( i2 - i2 ) )) * int(5.0) ), abs(divInt(int(2.0),( in1 * int(2.0) )))), int(8.0)),in1) and b2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 2, 1, 4, 1, 3, 0, 0, 5, 0, 20, 6, 4, 4, 2]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 2, 2, 2, 1, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 0, 6, 1, 7, 3, 1, 4, 9, 8, 9, 8, 6, 2, 3, 8, 5, 1, 7, 2, 2, 5, 6, 0, 5, 5, 8, 2, 3, 0, 9, 9, 5, 9, 6, 1, 0, 2, 0, 9, 4, 9, 3, 6, 9, 7, 4, 9, 0, 6, 2, 4, 3, 4, 5, 0, 0], [1, 4, 1, 1, 5, 5, 2, 5, 3, 1], [1, 1, 2, 1, 2, 2], [1, 1, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 0, 3, 3, 2, 0], [], [0, 1], [0, 1, 0, 2, 4, 6, 1, 2, 5, 2, 6, 1, 5, 5, 0, 2, 0, 1, 1, 0, 2, 0, 1, 2, 6, 5, 1, 1, 6, 1, 4, 5, 5, 2, 0, 0, 6, 0, 5, 1, 0, 0, 4, 5, 1, 1, 6, 1, 6, 5, 1, 1, 3, 6, 3, 3, 0, 4, 5, 2, 6, 6, 3, 6, 6, 4, 3, 5, 2, 6, 2, 3], [0, 1, 0, 1], [0, 0, 2, 3, 0, 0, 3, 3, 2, 2, 2, 3, 0, 3, 0, 2, 2, 3, 0, 1, 1, 1, 1, 3, 2, 3, 3, 2, 2, 3, 2, 1, 0, 3, 1, 0, 2, 3, 2, 1, 0, 0, 2, 2, 0, 2, 0, 1, 3, 1, 0, 0, 2, 3, 0, 2, 3, 3, 0, 0, 2, 1, 1, 2, 0, 0, 3, 1, 2, 1, 3, 3, 1, 3, 0, 2, 1, 0, 0, 3, 3, 1, 3, 2, 1, 2, 0, 2, 1, 2, 1, 3, 0, 0, 3, 2, 0, 0, 0, 3, 3, 1, 1, 3, 1, 2, 0, 3, 0, 1, 3, 0, 2, 1, 1, 3, 2, 2, 2, 0, 0, 1, 1, 3, 3, 2, 3, 1, 2, 2, 1, 0, 0, 1, 1, 0, 1, 2, 1, 0, 2, 3, 3, 3, 0, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 2, 1, 0, 0, 1, 2, 1, 3, 1, 3, 2, 2, 2, 3, 1, 0, 0, 3, 1, 3, 2, 0, 1, 3, 3, 0, 0, 2, 2, 0, 0, 1, 0, 3, 2, 0, 3, 0, 1, 3, 2, 3, 2, 0, 1, 3, 2, 3, 3, 1, 1, 1, 0, 2, 3, 2, 1, 3, 0, 3, 3, 1, 1, 3, 1, 0, 2, 3, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0, 0, 0, 0, 2, 2, 1, 3, 1, 0, 3, 3, 0, 2, 0, 3, 0, 3, 1, 2, 0, 1, 0, 3, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 1, 0, 1, 2, 2, 0, 1, 0, 2, 2, 2, 0, 2, 2, 1, 0, 0, 2, 1, 1, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 0, 1, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0, 2, 2, 0, 2], [1, 2, 2, 0, 1, 2, 2, 2, 0, 2, 0, 2, 1, 2, 2, 2, 1, 0, 0, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 2, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = i1\\nif i0 \\g ( max(i2, in1) - abs(abs(( ( mod(abs(res0),abs(i1)) * divInt(( max(i2, int(6.0)) * int(3.0) ),int(0.0)) ) + int(6.0) ))) ):{:\\nloopBreak% = 0\\nwhile abs(mod(max(min(( ( min(( int(1.0) - in2 ), min(int(7.0), i2)) * ( max(mod(int(3.0),res0), i1) * ( ( in2 * ( in2 + int(1.0) ) ) * min(int(4.0), i0) ) ) ) + i2 ), ( max(i0, divInt(abs(abs(i1)),i1)) * divInt(int(9.0),int(8.0)) )), divInt(i0,i2)),min(int(9.0), ( int(8.0) - max(min(int(6.0), abs(i0)), ( int(2.0) * i1 )) )))) \\le i2:{:\\nif ( ( abs(abs(int(3.0))) \\g min(divInt(int(8.0),mod(res0,( int(5.0) * ( int(1.0) * abs(in2) ) ))), i1) or not b1 ) or abs(divInt(i1,res0)) \\g i1 ):{:\\nb1 = max(min(int(7.0), int(2.0)), min(int(2.0), divInt(in1,abs(in2)))) != int(5.0)\\n:}else:{:\\nb2 = max(in2, ( int(6.0) - int(0.0) )) != max(divInt(( ( i2 + i0 ) + int(5.0) ),int(5.0)), abs(max(( min(int(8.0), ( ( int(2.0) * i0 ) - res0 )) * int(3.0) ), int(0.0))))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = i0 == int(9.0)\\nin2 -= divInt(int(9.0),i1)\\nloopBreak% = 0\\nwhile ( ( abs(max(abs(i0), max(abs(max(( min(mod(max(divInt(min(divInt(( int(5.0) * i0 ),in1), int(9.0)),divInt(int(6.0),abs(int(1.0)))), min(mod(( ( max(int(0.0), in2) - i1 ) - abs(int(2.0)) ),min(( i1 - int(0.0) ), min(max(res0, i1), ( ( res0 - in2 ) + int(9.0) )))), i1)),abs(( i1 - abs(in0) ))), int(4.0)) * abs(mod(abs(( res0 * int(9.0) )),min(( abs(max(int(3.0), int(6.0))) - int(9.0) ), in0))) ), ( max(( int(7.0) * max(in0, max(max(int(4.0), int(9.0)), max(int(0.0), i0))) ), ( abs(abs(in1)) - int(6.0) )) + ( abs(in2) * int(2.0) ) ))), ( i2 - int(4.0) )))) + res0 ) != res0 or ( in0 \\ge res0 and ( mod(int(3.0),min(int(4.0), res0)) - min(abs(in1), ( in0 - abs(in2) )) ) \\g min(int(5.0), divInt(i2,int(0.0))) ) ):{:\\nres0 = i2\\nin0 -= abs(int(0.0))\\nb2 = not b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 58, 58, 10, 6, 4, 18, 10, 8, 0, 2, 72, 4, 258, 61, 71, 42, 21]}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 1, 1, 0], [0], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 3, 4, 8, 4, 3, 6, 4, 7, 0, 3, 7], [2, 5], [0, 1], [0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0], [2, 2, 3, 0, 2, 3, 1], [0], [0], [1, 2, 2, 5, 3, 2, 0, 1, 0, 1, 0, 6, 0], [0, 1, 0], [0, 3, 0, 2, 0, 1, 1, 3, 3, 2, 1, 2, 0, 1, 0, 3, 0, 1, 0, 3, 2, 2, 0, 2, 1, 3, 1, 2, 3, 0, 1, 1, 3, 0, 2, 1, 2, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 2, 0, 0, 1, 1, 0], [1, 1, 1, 0], [1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i1 == max(i2, ( i2 - int(4.0) )):{:\\nin2 = int(2.0)\\nin0 -= min(abs(mod(int(3.0),divInt(i2,int(4.0)))), i0)\\n:}\\nb0 = not not ( b1 and not ( min(i1, int(8.0)) != i0 or True ) )\\ni1 = min(( mod(i0,divInt(int(4.0),max(int(3.0), ( max(res0, int(6.0)) - int(4.0) )))) + min(i0, mod(int(7.0),divInt(int(0.0),int(3.0)))) ), int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 13, 13, 2, 2, 2, 9, 2, 7, 1, 1, 13, 3, 40, 9, 8, 4, 6]}, {"genotype": [[0], [1], [1], [], [0], [0, 1, 0, 1], [8, 6, 6, 7], [3], [1], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(86.0) \\ge int(67.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 8, 4, 7, 6, 7, 8, 3, 5], [2], [], [], [1], [0], [], [], [], [0, 0, 0, 0, 1], [0, 0], [3, 0, 2, 1, 2, 2, 1, 3, 0, 2, 1, 1, 3, 1, 0, 1, 1, 1], [1, 0, 0, 1], [1, 0, 1], [1, 0], [1, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = max(i0, mod(int(3.0),( ( int(8.0) - min(i0, mod(int(4.0),int(7.0))) ) + max(int(6.0), i0) )))\\nloopBreak% = 0\\nwhile int(78.0) == int(3.0):{:\\ni1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 9, 9, 1, 0, 0, 1, 1, 0, 0, 0, 5, 2, 18, 4, 3, 2, 2]}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1], [2, 2, 1, 1, 2, 0, 1], [0, 0, 1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 3, 9, 8, 9, 8, 4, 6, 2, 9, 4, 1, 8, 0, 7, 6, 3, 4, 4, 3, 8, 0, 6, 4, 6, 6, 2, 8, 5, 9, 8, 8, 8, 7, 5, 9, 0, 7, 2, 0, 4, 3, 1, 1, 7, 7, 2, 7, 9, 1, 0, 4], [0, 4, 3], [0], [], [0, 1, 1, 1], [0, 0, 0], [1], [0], [1, 0], [4, 4, 2, 2, 2, 3, 3, 3, 3, 6, 5, 1, 3, 0, 6, 4, 6, 6, 1, 6, 1, 1, 6, 3, 0, 1, 1, 0, 3, 6, 0, 6, 3, 6, 2, 0, 1, 4, 2, 2, 2, 0, 1, 3, 3, 4, 5, 1, 0, 1, 1, 0, 4, 1, 2, 4, 3, 0, 6, 0, 5, 5, 3], [0, 0, 1], [1, 2, 0, 2, 3, 3, 3, 2, 0, 1, 3, 2, 0, 0, 2, 1, 1, 1, 3, 2, 0, 1, 0, 3, 2, 2, 2, 3, 2, 1, 2, 0, 0, 3, 2, 3, 3, 2, 3, 2, 1, 2, 1, 1, 1, 3, 1, 0, 2, 0, 1, 2, 0, 0, 3, 0, 3, 2, 2, 1, 3, 1, 0, 3, 2, 0, 0, 2, 1, 3, 3, 0, 1, 2, 2, 0, 2, 0, 1, 3, 3, 1, 3, 1, 3, 2, 2, 0, 1, 3, 1, 0, 2, 0, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 0, 1, 2, 3, 2, 0, 3, 1, 1, 2, 3, 0, 1, 0, 0, 3, 0, 0, 0, 2, 2, 3, 1, 1, 3, 3, 3, 0, 1, 0, 3, 2, 3, 2, 2, 0, 3, 3, 1, 2, 3, 3, 2, 0, 1, 0, 1, 0, 3, 3, 0, 1, 0, 3, 3, 3, 3, 1, 0, 1, 1, 3, 2, 1, 2, 0, 0, 3, 1, 3, 2, 0, 1, 0, 3, 0, 2, 3, 0, 2, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0, 2, 0, 2, 0, 3, 1, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 1, 0, 3, 1, 0, 3, 0, 2, 1, 3, 3, 0, 3, 1, 1, 0, 3, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0, 0, 1, 0, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nif int(3.0) \\l divInt(in1,( abs(min(min(mod(in1,int(7.0)), abs(( i2 - i2 ))), ( int(3.0) - int(9.0) ))) - int(8.0) )):{:\\ni2 = min(( in0 * int(9.0) ), in0)\\n:}\\nin0 = abs(divInt(divInt(( abs(divInt(int(8.0),mod(in0,res0))) * min(( min(abs(mod(min(mod(int(4.0),( int(6.0) * int(2.0) )), int(9.0)),min(int(4.0), in2))), mod(i1,int(1.0))) * ( in0 * i0 ) ), abs(res0)) ),max(divInt(mod(int(8.0),max(int(0.0), in1)),min(( res0 * res0 ), divInt(int(7.0),max(min(i1, int(6.0)), divInt(divInt(res0,mod(i1,int(3.0))),max(min(int(4.0), min(int(4.0), min(divInt(( i1 * int(3.0) ),abs(int(8.0))), res0))), ( in0 * ( int(0.0) + min(( divInt(int(6.0),i0) + mod(max(( i1 + int(4.0) ), ( max(( i1 * min(int(6.0), int(6.0)) ), mod(min(i0, int(2.0)),in0)) * res0 )),max(i0, res0)) ), in0) ) ))))))), divInt(divInt(max(int(8.0), int(5.0)),min(min(max(res0, int(9.0)), i2), max(mod(max(divInt(mod(i0,max(max(int(8.0), divInt(abs(max(divInt(i1,int(8.0)), in1)),int(8.0))), i2)),abs(max(i2, int(7.0)))), i2),min(max(min(max(int(5.0), i0), int(9.0)), int(0.0)), min(divInt(int(7.0),divInt(i1,in0)), min(int(2.0), min(( in0 - int(0.0) ), in1))))), abs(in2)))),divInt(max(i1, divInt(i0,divInt(int(4.0),i1))),i1)))),int(3.0)))\\n:}else:{:\\nloopBreak% = 0\\nwhile i0 \\le int(1.0):{:\\nb0 = int(1.0) \\ge in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += ( i2 + ( in1 - min(int(7.0), divInt(divInt(mod(int(7.0),in0),mod(( mod(i0,( int(2.0) + res0 )) - max(int(7.0), i0) ),min(in2, divInt(int(9.0),min(max(in2, min(int(1.0), int(0.0))), in0))))),abs(int(4.0)))) ) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 53, 53, 3, 1, 0, 4, 3, 1, 1, 2, 63, 3, 228, 58, 57, 22, 37]}, {"genotype": [[0], [1], [0], [], [0], [0, 1], [9, 1], [2], [1], [], [1], [0], [], [], [], [3], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(91.0) == in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [6], [], [], [], [], [], [], [], [], [1, 0], [0], [3, 0, 1], [], [0], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = min(i0, int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 1, 7, 4, 8, 0, 9, 0, 9, 6, 6, 1, 0, 4, 2, 7, 5, 2, 0, 5, 8, 0, 2, 3, 1, 4, 8, 3, 6, 7, 7, 9, 7, 3, 5, 7, 3, 6, 5, 6, 1], [], [], [], [], [], [], [], [], [5, 6, 1, 5, 3, 1, 0, 2, 6, 0, 1, 0, 4, 0, 4, 3, 1, 5, 2, 5, 5, 5, 6, 5, 0, 6, 6, 6, 0, 6, 3, 4, 2, 6, 3], [0], [2, 3, 2, 3, 1, 1, 2, 2, 2, 3, 3, 2, 0, 2, 1, 3, 0, 1, 2, 1, 0, 1, 0, 2, 1, 0, 2, 3, 2, 2, 2, 1, 0, 3, 0, 0, 2, 0, 0, 2, 1, 1, 1, 3, 3, 2, 0, 2, 2, 2, 2, 1, 0, 0, 1, 3, 1, 3, 2, 2, 0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 1, 1, 2, 2, 1, 1, 0, 2, 3, 2, 0, 3, 2, 2, 2, 3, 3, 3, 1, 1, 3, 3, 2, 1, 1, 3, 0, 3, 1, 1, 2, 1, 0, 3, 1, 2, 0, 2, 0, 0, 3, 2, 3, 1, 2, 2, 1, 2, 0, 1, 3, 3, 3, 3, 1, 0, 2, 1, 2, 0, 1, 1, 3, 2, 2, 2, 1, 2, 2, 3, 2, 1, 1, 3, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 3, 1, 3, 1, 1, 0, 3, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 2, 1, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 1, 2, 1, 2, 2, 0, 2, 1, 1, 0, 2], [0, 1, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 2], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = mod(max(mod(min(int(6.0), int(1.0)),( ( ( abs(max(( res0 + ( int(1.0) - max(i1, int(7.0)) ) ), ( int(4.0) + in2 ))) * int(8.0) ) - in0 ) - mod(int(0.0),i1) )), ( min(divInt(( divInt(int(9.0),i0) - min(i2, res0) ),( i0 - i1 )), divInt(int(0.0),int(9.0))) + int(6.0) )),max(abs(( i0 + ( divInt(( ( int(6.0) + in1 ) + i0 ),int(1.0)) - abs(int(0.0)) ) )), abs(divInt(( in1 + divInt(in0,divInt(max(i1, min(mod(( in2 + int(4.0) ),int(2.0)), divInt(( int(7.0) + int(5.0) ),i2))),( abs(mod(in2,abs(( ( ( min(min(max(int(2.0), int(0.0)), max(min(divInt(int(5.0),int(8.0)), abs(in2)), max(int(0.0), int(2.0)))), ( int(3.0) + in2 )) - min(int(1.0), divInt(res0,( in2 - i0 ))) ) + max(( max(int(4.0), ( divInt(int(8.0),( res0 - int(3.0) )) + abs(max(abs(abs(int(6.0))), res0)) )) - ( int(7.0) - mod(res0,int(7.0)) ) ), int(9.0)) ) - min(( ( mod(int(7.0),( ( abs(( int(3.0) + int(5.0) )) * max(i0, res0) ) + in0 )) * in1 ) - divInt(int(7.0),int(3.0)) ), divInt(( int(6.0) + max(int(5.0), min(int(6.0), int(1.0))) ),i2)) )))) * abs(res0) ))) ),in0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 35, 1, 163, 52, 35, 32, 20]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1, 1], [7, 1, 0, 5], [1], [], [], [1], [0], [], [], [], [1, 2], [1], [3, 1, 1, 2, 0, 1, 1], [1], [1], [0], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(7.0), int(1.0)) \\g divInt(i1,int(0.0)):{:\\ni2 += int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 4, 4, 1, 0, 0, 1, 1, 0, 0, 0, 2, 1, 7, 1, 1, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1], [4, 6, 1, 5], [0, 2, 1], [2, 2, 2], [1, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0], [3, 2, 3, 3, 1, 0], [1], [], [0, 4, 6, 1], [], [0, 0, 1, 0, 3, 0, 2, 1, 1, 3, 1], [0], [0, 2], [2], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i0 \\l in1\\nb2 = ( not ( ( int(4.0) == res0 or min(i1, ( int(6.0) * int(1.0) )) \\g abs(int(5.0)) ) and False ) and b2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 3, 3, 3, 9, 3, 6, 1, 0, 4, 0, 11, 1, 2, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [2, 6], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= int(26.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 0], [], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 8, 7, 8, 5, 4, 7, 4, 0, 6, 8, 2, 3, 0, 2, 0, 9, 9, 6, 4], [2, 1, 3], [1, 0, 1], [], [1, 0, 1, 1], [0, 0, 0], [2], [], [], [5, 1, 1, 2, 1, 3, 4, 6, 1, 1, 2, 3, 2, 3, 4, 2, 4, 3], [0], [0, 1, 3, 1, 3, 2, 1, 3, 0, 0, 0, 2, 2, 1, 0, 3, 2, 3, 1, 2, 3, 0, 0, 2, 2, 2, 1, 3, 3, 0, 1, 0, 0, 3, 0, 3, 1, 2, 1, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 0, 3, 2, 1, 2, 2, 1, 1, 3, 2, 1, 3, 2, 1, 2, 3, 3, 1, 1, 1, 0, 2, 0, 1, 3, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 2, 2], [1, 2, 2, 0, 2, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in2 == int(2.0)\\nb0 = not min(int(9.0), abs(divInt(int(8.0),min(i1, i1)))) \\g i2\\nb1 = divInt(( int(7.0) - i1 ),max(( max(int(8.0), ( max(in0, in1) * mod(divInt(divInt(int(5.0),min(abs(res0), int(4.0))),i1),i1) )) * min(i2, min(int(7.0), mod(int(4.0),max(divInt(mod(( ( in0 + int(0.0) ) * int(6.0) ),int(8.0)),i2), in0)))) ), max(( int(2.0) + mod(( int(3.0) + int(0.0) ),abs(divInt(int(2.0),abs(mod(int(0.0),mod(max(abs(int(9.0)), int(9.0)),int(6.0))))))) ), in1))) \\ge mod(i2,int(4.0))\\nin1 = abs(in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 21, 21, 3, 3, 0, 4, 3, 1, 0, 0, 18, 1, 75, 20, 17, 7, 13]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 7, 5, 3, 7, 0, 0, 3, 2, 6, 6, 5, 2, 1, 1, 6, 7, 1, 1, 3, 5, 3, 3, 0, 0, 5, 0, 6, 0, 0, 3, 7, 9, 3, 8, 7, 7, 1, 2, 1, 1, 6, 5, 5, 1, 1, 3, 2, 9, 9, 9, 7, 8, 0, 4, 0, 9, 3, 0, 3, 6, 0, 0, 6, 6, 8, 2, 6, 2, 3, 2, 2, 0, 3, 3, 9, 5, 7, 0, 4, 2, 9, 6, 4, 2, 6, 0, 9, 5, 7, 4, 4, 3], [0], [0, 1], [0], [0, 1, 0], [0], [3, 0], [], [], [2, 0, 3, 5, 0, 5, 1, 2, 2, 1, 0, 0, 2, 0, 6, 3, 1, 0, 5, 4, 6, 6, 1, 6, 1, 1, 3, 2, 3, 5, 2, 1, 2, 5, 5, 0, 4, 6, 1, 5, 3, 4, 6, 4, 6, 5, 6, 2, 2, 6, 2, 6, 3, 2, 0, 5, 5, 6, 1, 1, 5, 5, 1, 1, 1, 6, 2, 0, 0, 5, 4, 1, 3], [1], [2, 3, 1, 3, 2, 1, 2, 0, 3, 1, 2, 1, 3, 2, 1, 3, 2, 0, 0, 2, 3, 0, 2, 2, 1, 0, 3, 2, 3, 3, 3, 1, 1, 1, 3, 1, 3, 3, 0, 1, 1, 3, 1, 3, 3, 0, 2, 0, 1, 2, 3, 2, 2, 1, 0, 2, 2, 2, 2, 3, 0, 2, 0, 2, 3, 1, 2, 1, 1, 1, 0, 0, 0, 1, 2, 3, 3, 3, 1, 3, 3, 2, 0, 1, 1, 1, 3, 0, 2, 3, 0, 1, 2, 2, 3, 2, 3, 3, 0, 3, 0, 1, 0, 0, 3, 2, 1, 2, 0, 2, 2, 1, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 2, 3, 0, 3, 3, 1, 3, 3, 1, 0, 1, 0, 3, 2, 0, 3, 0, 3, 2, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 3, 1, 3, 1, 2, 1, 3, 2, 2, 1, 2, 3, 1, 2, 1, 3, 0, 2, 0, 3, 0, 1, 2, 3, 1, 3, 0, 1, 3, 3, 3, 3, 1, 1, 0, 2, 3, 2, 3, 3, 1, 3, 2, 2, 0, 1, 2, 3, 1, 1, 0, 3, 3, 0, 0, 3, 1, 1, 3, 3, 1, 0, 2, 0, 3, 3, 3, 0, 1, 0, 3, 2, 0, 3, 3, 3, 0, 3, 3, 3, 0, 1, 0, 0, 3, 0, 1, 3, 3, 2, 2, 0, 1, 2, 0, 1, 2, 1, 1, 1, 3, 2, 1, 1, 2, 3, 0, 3, 0, 1, 3, 3, 3, 1, 3, 3, 0, 3, 1, 0, 0, 2, 1, 2, 3, 3, 1, 2, 2, 1, 3, 0, 2, 1, 2, 3, 2, 1, 1, 3, 3, 3, 0, 3, 0, 2, 2, 3, 0, 1, 1, 2, 2, 2, 0, 2, 2, 1, 0, 0, 0, 3, 1, 1, 1, 2, 1, 2, 2, 0, 2, 3, 2, 0, 2, 0, 0, 0, 2, 0, 1, 3, 0, 2, 3, 1, 2, 3, 1, 0, 1, 3, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [2, 0, 2, 1, 0, 1, 0, 1, 2, 0, 0, 1, 2, 0, 1, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 2, 1, 2, 0, 1, 0, 0, 2, 1, 1, 0], [0, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 0, 0, 1, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 2, 1, 2, 1, 0, 2, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 96, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( ( abs(int(4.0)) + min(( int(7.0) * divInt(i2,abs(int(5.0))) ), ( int(3.0) * max(( int(7.0) + min(mod(i0,in0), mod(max(in2, divInt(divInt(int(0.0),i0),min(( max(abs(min(int(0.0), int(3.0))), int(2.0)) * min(int(6.0), max(abs(in2), int(6.0))) ), int(5.0)))),min(int(2.0), max(max(i1, ( i2 + int(1.0) )), divInt(min(( mod(int(1.0),i2) * ( ( divInt(divInt(max(i1, mod(i0,( abs(int(6.0)) * mod(int(7.0),int(1.0)) ))),int(1.0)),i0) * i2 ) + i0 ) ), int(3.0)),( abs(min(max(int(5.0), min(max(( res0 + int(3.0) ), int(3.0)), int(0.0))), min(in0, divInt(abs(i1),int(0.0))))) - ( ( max(( max(min(i0, min(in2, int(5.0))), in1) - res0 ), max(divInt(int(0.0),( res0 + ( divInt(int(6.0),i1) * divInt(max(max(int(0.0), res0), abs(abs(( int(0.0) - mod(divInt(min(i1, abs(abs(int(3.0)))),min(abs(int(7.0)), i1)),int(9.0)) )))),in0) ) )), min(( i2 - min(in0, min(( min(divInt(max(int(3.0), divInt(max(int(8.0), in2),( int(7.0) + max(int(7.0), min(int(1.0), ( int(2.0) * max(( divInt(int(1.0),divInt(abs(int(1.0)),mod(int(6.0),min(i2, mod(i1,max(i2, int(5.0))))))) + ( min(int(5.0), min(in2, int(1.0))) - max(max(max(max(int(1.0), int(3.0)), in2), mod(min(mod(abs(max(int(2.0), abs(( divInt(i0,int(9.0)) + divInt(abs(int(9.0)),int(9.0)) )))),in1), max(abs(res0), i1)),abs(int(7.0)))), int(8.0)) ) ), abs(min(int(0.0), in2))) ))) ))),divInt(in0,min(max(min(in1, int(4.0)), res0), abs(( in1 + max(max(min(res0, abs(abs(max(in2, int(0.0))))), res0), i2) ))))), min(i2, int(9.0))) - abs(max(mod(divInt(res0,int(3.0)),divInt(i2,int(0.0))), mod(int(3.0),int(6.0)))) ), int(0.0))) ), min(divInt(int(0.0),int(6.0)), ( min(res0, min(in0, int(6.0))) + abs(min(min(int(8.0), min(min(i2, abs(int(2.0))), i0)), in2)) ))))) - mod(int(6.0),( min(min(int(2.0), ( ( int(3.0) * max(in2, divInt(int(2.0),divInt(max(( int(2.0) + int(0.0) ), abs(abs(max(res0, abs(i1))))),( ( min(i1, int(3.0)) * int(3.0) ) - ( divInt(mod(in2,( ( int(9.0) + in2 ) - i1 )),i1) + max(int(5.0), int(7.0)) ) )))) ) * int(0.0) )), ( int(4.0) + ( divInt(i1,divInt(min(( res0 * mod(i2,i0) ), i0),( in2 - int(2.0) ))) * min(in1, ( abs(int(9.0)) - mod(max(int(6.0), i1),int(4.0)) )) ) )) + max(min(int(2.0), int(6.0)), ( int(0.0) * int(9.0) )) )) ) - int(5.0) ) )))))) ), int(7.0)) )) ) \\l int(4.0) and b1 )\\nin0 -= int(43.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 93, 93, 1, 2, 1, 3, 1, 2, 0, 0, 73, 1, 354, 84, 106, 43, 42]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 1, 2, 1, 1], [0, 0], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 1, 3, 6, 2, 7, 4, 6, 7, 1, 4, 2, 8, 8, 6, 8, 1, 9, 9, 3, 7, 3, 0, 9, 1, 2, 2, 8, 1, 8, 0, 5, 7, 7, 9, 7, 9, 0, 7, 1, 7, 9, 7, 0, 9, 4, 5, 1, 0, 3, 8, 9, 8, 2, 4, 1, 2, 0, 2, 5, 9, 0, 7, 1, 4, 7, 7, 2, 6, 4, 2, 4, 0, 3, 4, 8, 2, 8, 2, 0, 2, 9, 4, 3, 5, 4, 9, 6, 2, 7, 0, 8, 3, 8, 1, 2, 1, 5, 9, 9, 1, 1, 2, 4, 7, 4, 2, 6, 7, 8, 2, 0, 8, 9], [3, 4, 3, 3], [0, 0], [1, 1], [0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0], [2, 3, 3, 0], [], [0, 0], [3, 5, 2, 1, 4, 2, 6, 1, 5, 5, 5, 5, 1, 3, 4, 6, 4, 0, 4, 0, 3, 5, 6, 2, 3, 3, 3, 4, 4, 6, 5, 6, 3, 3, 2, 1, 3, 6, 4, 0, 3, 3, 4, 3, 4, 1, 1, 2, 1, 5, 1, 3, 1, 6, 0, 1, 3, 6, 0, 2, 3, 6, 1, 3, 4, 1, 3, 3, 4, 6, 3, 3, 4, 4, 6, 2, 6, 5, 4, 2, 5, 4, 6, 5], [0, 0], [3, 2, 1, 1, 0, 1, 1, 0, 0, 3, 1, 2, 1, 3, 0, 3, 3, 0, 0, 1, 2, 0, 1, 1, 3, 1, 2, 2, 2, 1, 2, 0, 3, 3, 2, 0, 0, 0, 3, 1, 1, 2, 3, 2, 2, 1, 1, 2, 1, 1, 0, 3, 1, 3, 2, 3, 1, 2, 2, 1, 2, 3, 3, 1, 3, 2, 1, 0, 1, 3, 1, 3, 3, 2, 3, 0, 3, 1, 1, 1, 2, 1, 1, 3, 3, 1, 2, 2, 1, 2, 3, 2, 0, 2, 0, 3, 2, 1, 0, 1, 3, 3, 1, 0, 3, 0, 3, 2, 2, 3, 3, 1, 0, 2, 2, 0, 2, 3, 0, 1, 3, 0, 3, 3, 0, 2, 1, 2, 1, 2, 2, 3, 2, 3, 2, 3, 0, 1, 2, 0, 1, 1, 2, 2, 0, 0, 2, 2, 1, 2, 2, 0, 3, 2, 1, 2, 0, 3, 0, 3, 3, 2, 2, 2, 1, 1, 2, 2, 1, 1, 0, 3, 3, 1, 3, 2, 1, 2, 0, 1, 1, 2, 1, 3, 2, 2, 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 3, 2, 0, 1, 1, 2, 2, 3, 0, 2, 3, 1, 2, 3, 2, 2, 2, 0, 3, 0, 1, 2, 3, 3, 3, 1, 1, 3, 2, 2, 2, 2, 1, 0, 3, 2, 1, 0, 0, 1, 2, 1, 1, 3, 2, 3, 2, 0, 1, 3, 3, 1, 1, 0, 2, 2, 1, 1, 1, 0, 1, 2, 3, 1, 1, 0, 0, 2, 3, 2, 2, 0, 2, 2, 1, 3, 1, 1, 2, 2, 0, 1, 3, 0, 2, 1, 1, 3, 2, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 0, 2, 3, 1, 0, 1, 0, 3, 1, 1, 0, 0, 0, 3, 1, 1, 0, 2, 2, 0, 1, 3, 0, 0, 0, 0, 2, 1, 2, 3, 1, 2, 2, 3, 1, 1, 1, 3, 0, 3, 1, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 1, 2, 2, 2, 1, 1, 3, 0, 3, 2, 1, 1, 3, 2, 0, 1, 3, 2, 2, 0, 3, 3, 1, 3, 3, 1, 1, 2, 2, 0, 3, 0, 3, 2, 3, 3, 2, 1, 3, 1, 3, 0, 1, 2, 0, 2, 3, 0, 3, 0, 2, 0, 3, 1, 2, 1, 0, 0, 1, 3, 2, 2, 1, 3, 1, 0, 2, 0, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 2, 0, 1, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 0, 2, 2, 2, 1, 1, 0, 0, 2, 0, 0, 1, 2, 1, 2, 2, 1, 1, 1, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 0, 0, 2, 1, 2, 1, 1, 2, 2, 1, 0], [0, 2, 2, 2, 1, 0, 1, 1, 0, 1, 2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1, 2, 1, 2, 2, 2, 0, 0, 1, 1, 1, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 88, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( min(mod(int(0.0),int(3.0)), in0) \\ge int(1.0) or ( int(3.0) \\le in2 or i2 \\ge max(int(6.0), ( int(2.0) + max(i1, abs(min(in1, i2))) )) ) ):{:\\nb0 = int(7.0) \\ge ( res0 * int(4.0) )\\nif b0:{:\\ni1 = int(6.0)\\n:}\\n:}\\nin2 = max(int(7.0), divInt(mod(divInt(int(1.0),mod(in2,min(max(( in2 * in2 ), i1), min(int(4.0), int(2.0))))),mod(max(( mod(int(8.0),int(8.0)) * mod(int(6.0),int(8.0)) ), in0),abs(int(1.0)))),max(( min(int(9.0), ( divInt(int(9.0),divInt(min(min(int(3.0), max(( int(7.0) - in1 ), int(3.0))), max(int(0.0), abs(max(( abs(res0) + max(int(9.0), int(1.0)) ), int(2.0))))),divInt(int(2.0),int(8.0)))) - max(min(int(1.0), divInt(mod(int(8.0),mod(abs(mod(in1,( i0 - min(mod(int(0.0),in1), int(5.0)) ))),min(min(int(7.0), i0), min(in0, max(( divInt(min(max(int(7.0), in2), ( ( res0 + mod(abs(i2),int(9.0)) ) - max(in0, min(abs(in0), divInt(int(7.0),( int(9.0) * divInt(mod(min(( max(divInt(abs(in0),int(0.0)), mod(in1,int(7.0))) - int(1.0) ), mod(( in1 - res0 ),divInt(divInt(int(7.0),mod(( in2 - max(mod(int(9.0),( res0 + max(in0, abs(abs(( ( ( int(7.0) * int(0.0) ) * ( divInt(int(9.0),int(4.0)) + in0 ) ) - abs(abs(int(5.0))) )))) )), min(( int(1.0) - ( i2 * int(0.0) ) ), int(3.0))) ),( int(8.0) + min(( mod(int(9.0),int(8.0)) - i1 ), in0) ))),min(min(int(2.0), res0), abs(int(4.0)))))),abs(( in1 * int(1.0) ))),int(2.0)) )))) )),divInt(( min(i0, mod(abs(int(0.0)),( min(mod(mod(divInt(in0,min(in0, int(2.0))),( min(min(abs(int(5.0)), int(9.0)), min(( mod(mod(( int(0.0) - in1 ),max(( int(7.0) * in0 ), in1)),int(1.0)) * mod(int(4.0),int(7.0)) ), min(divInt(abs(mod(i1,int(7.0))),max(min(int(2.0), int(6.0)), i1)), mod(mod(int(4.0),int(2.0)),int(4.0))))) * i2 )),int(0.0)), divInt(min(int(3.0), int(4.0)),i1)) + in2 ))) + ( abs(( divInt(i1,( mod(int(8.0),abs(int(2.0))) - int(8.0) )) - divInt(divInt(in0,int(2.0)),abs(i1)) )) - ( int(0.0) * int(2.0) ) ) ),max(( ( mod(max(( min(min(abs(min(min(max(res0, ( abs(int(9.0)) + i0 )), int(4.0)), i1)), max(int(3.0), int(5.0))), in0) * res0 ), i0),abs(int(4.0))) + int(9.0) ) * i2 ), divInt(( in0 + int(6.0) ),abs(res0))))) + i1 ), in0))))),in1)), ( int(2.0) + ( max(int(7.0), divInt(mod(max(int(0.0), int(8.0)),int(3.0)),max(i1, min(int(8.0), in0)))) + int(1.0) ) )) )) + max(mod(in0,( abs(( int(2.0) + in1 )) + mod(int(1.0),( ( divInt(int(5.0),int(9.0)) + abs(res0) ) + abs(mod(int(9.0),int(1.0))) )) )), min(( in0 * int(1.0) ), min(mod(divInt(in0,abs(min(int(2.0), abs(max(int(4.0), int(7.0)))))),( ( in1 - min(in1, min(( abs(max(( int(4.0) * abs(int(2.0)) ), max(res0, int(6.0)))) + mod(i2,divInt(max(res0, abs(in2)),mod(in1,abs(int(7.0))))) ), ( int(8.0) + i2 ))) ) + in2 )), int(2.0)))) ), max(mod(( int(0.0) + min(int(8.0), in1) ),mod(res0,int(9.0))), in2))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 115, 115, 4, 2, 2, 8, 4, 4, 0, 2, 84, 2, 417, 116, 104, 54, 62]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 2, 0, 2, 0], [0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 9, 4, 7, 5, 7, 6, 9, 9, 2], [0, 1], [1, 2], [], [1, 1, 0, 0], [0, 0], [1, 1], [0, 1], [1], [2, 3, 5, 5, 3, 4, 1, 1, 2, 4, 0], [1, 0, 1], [0, 0, 1, 1, 0, 3, 0, 3, 1, 2, 2, 3, 1, 3, 2, 1, 0, 2, 1, 1, 3, 1, 2, 1, 1, 2, 2, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 2, 1, 1, 0], [0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= in0\\nin2 = in2\\nb1 = int(5.0) \\l int(4.0)\\nif in0 \\g max(in1, min(int(9.0), ( ( min(int(4.0), max(divInt(int(7.0),i1), ( int(5.0) - int(7.0) ))) + min(int(6.0), ( int(9.0) + int(9.0) )) ) * ( ( i1 - i2 ) - in1 ) ))):{:\\nb2 = True\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\ni0 += int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 11, 11, 2, 2, 0, 4, 2, 2, 2, 1, 11, 3, 31, 7, 5, 8, 1]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [2, 0, 1, 1, 2, 0, 1, 1, 0, 1, 1], [1, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 9, 8, 8, 3, 3, 8, 2, 2, 1, 6, 2, 4, 7], [1, 3], [1, 1, 1, 0, 2], [], [0, 1, 1, 0, 0, 0, 0], [0, 0], [1, 0, 2, 1, 1], [0, 0, 0], [1], [5, 2, 1, 4, 5, 6, 2, 6, 0, 2, 1, 5], [0, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 0, 3, 1, 1, 3, 3, 1, 1, 2, 1, 2, 1, 0, 3, 0, 1, 0, 0, 1, 3, 1, 0, 2, 3, 1, 3, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 2, 0, 2, 0, 0, 2], [1, 2, 1, 2, 0, 2, 2], [1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nin2 = int(4.0)\\nb1 = mod(( mod(( divInt(mod(i2,min(int(5.0), int(9.0))),abs(min(int(8.0), int(8.0)))) - mod(int(3.0),divInt(int(3.0),i1)) ),abs(in1)) * int(8.0) ),in2) \\g res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(2.0)\\nif min(int(2.0), res0) \\ge ( min(int(1.0), abs(i0)) * int(6.0) ):{:\\nb1 = b1\\ni2 += int(2.0)\\n:}else:{:\\nb0 = not True\\ni1 *= int(4.0)\\nin2 *= int(7.0)\\n:}\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 2, 9, 15, 15, 2, 5, 0, 7, 2, 5, 3, 1, 12, 5, 38, 9, 7, 7, 6]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 2, 1], [1, 0, 0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 9, 5, 7, 7, 8, 7, 4, 7, 9], [1, 4, 2], [1], [], [0, 1, 1, 1], [0, 0, 0], [1], [1], [0, 0], [0, 1, 0, 2, 5, 2, 6, 5, 2, 0, 4, 2, 4], [], [1, 2, 3, 1, 0, 1, 0, 3, 3, 1, 3, 1, 2, 3, 2, 0, 3, 2, 0, 3, 3, 0, 0, 3, 2, 2, 0, 1, 2, 1, 0, 2, 3, 2, 2, 3, 0, 3, 1, 1, 0, 2, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 1, 2, 0, 2, 2, 1, 2, 0, 1, 1], [0, 1, 0, 1, 1, 2, 1], [0, 0, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nif int(8.0) \\g ( min(int(2.0), i0) + int(9.0) ):{:\\nif i1 \\le abs(max(int(5.0), abs(int(7.0)))):{:\\nb1 = ( min(( i0 - abs(divInt(i2,abs(max(in2, i2)))) ), abs(( ( res0 + int(7.0) ) - ( int(8.0) - in2 ) ))) * ( min(divInt(mod(max(i2, max(int(7.0), int(4.0))),i0),mod(int(7.0),in1)), i2) - int(9.0) ) ) == in1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 3, 1, 11, 11, 3, 1, 0, 4, 3, 1, 1, 2, 13, 0, 47, 11, 12, 7, 4]}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [1], [1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 2, 0, 5, 1, 0, 1, 7], [4], [0], [], [0, 1], [0], [1], [1], [], [4, 4, 5, 5, 0, 1], [0], [1, 2, 2, 2, 1, 3, 3, 1, 2, 2, 2, 0, 0, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1], [0, 1, 1], [1, 2, 0, 1], [0, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(86.0)\\nloopBreak% = 0\\nwhile False:{:\\nb0 = ( divInt(divInt(int(2.0),min(max(int(0.0), ( ( ( in1 - in2 ) * in2 ) + int(5.0) )), mod(int(1.0),i0))),max(int(0.0), int(1.0))) - int(7.0) ) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 9, 9, 1, 1, 0, 2, 1, 1, 1, 0, 6, 1, 23, 7, 3, 4, 3]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [7, 5, 3], [3], [2], [], [1], [0], [], [], [], [5], [], [1, 3, 2, 3, 0, 1, 1], [0], [2, 1], [0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(7.0) \\ge abs(( max(in2, int(5.0)) + int(3.0) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 7, 1, 2, 1, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 0, 1, 1], [1, 0, 0, 0], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 0, 9, 6, 8, 3, 5, 3], [3, 0, 5, 0, 4], [2, 0, 1, 2, 0, 2], [1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 3, 3, 2, 0, 2, 1, 2, 0], [1], [1, 0, 0], [3, 0, 6, 5, 6, 1, 0, 4, 0, 6, 5, 0, 2, 1, 0, 5, 5], [0], [0, 2, 1, 1, 1, 0, 2, 2, 3, 0, 3, 1, 0, 0, 3, 2, 2, 2, 0, 3, 0, 0, 0, 1, 0, 3, 3, 0, 3, 3, 1, 3, 1, 3, 1, 3, 2, 0, 0, 2, 0, 1, 2, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 1], [2, 0, 2, 1, 1, 2], [0, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 \\ge ( int(8.0) * int(3.0) ):{:\\nif int(0.0) \\l i0:{:\\nres0 = divInt(( abs(in2) + abs(int(9.0)) ),res0)\\n:}else:{:\\nif i1 != abs(( ( ( i0 * min(in1, i0) ) - res0 ) - int(6.0) )):{:\\nif b2:{:\\nb0 = ( ( not b1 or in2 \\l min(abs(i0), abs(abs(int(8.0)))) ) and not False )\\n:}\\n:}\\n:}\\nb2 = not b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = min(int(3.0), min(int(5.0), max(( i2 * i1 ), divInt(i0,int(3.0))))) \\le mod(in2,in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 9, 9, 5, 6, 2, 14, 5, 9, 1, 3, 17, 1, 45, 9, 11, 6, 3]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1], [2, 1, 1, 1, 0, 0], [1], [0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 6, 7, 9, 0, 9, 0, 5, 3], [4, 5, 0, 4], [1, 1, 2], [], [1, 1, 0, 1, 1], [0, 0, 0, 0], [2], [], [], [6, 1, 3, 5, 1, 5, 5, 6, 1, 0, 2, 1, 0, 3, 0, 3], [1, 1], [3, 1, 2, 2, 0, 1, 3, 0, 0, 1, 2, 0, 0, 1, 2, 3, 0, 1, 1, 1, 2, 3, 0, 2, 0, 0, 0, 3, 0, 2, 0, 2, 2, 2, 1, 2, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 0, 0, 2, 1], [0, 0, 2, 2, 0, 2, 0], [0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(int(5.0)) \\le ( ( res0 + int(8.0) ) + min(i1, in0) ):{:\\nb1 = int(6.0) != divInt(in2,i1)\\nb1 = not int(7.0) \\l ( min(in2, int(9.0)) * int(0.0) )\\nin2 *= int(9.0)\\nb2 = divInt(abs(res0),divInt(i1,i0)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += max(i0, ( in0 * divInt(( divInt(int(0.0),mod(int(5.0),i0)) + int(3.0) ),in0) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 10, 10, 4, 3, 0, 5, 4, 1, 0, 0, 16, 2, 40, 11, 5, 7, 6]}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 0, 1], [], [0, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 8, 5, 9, 4, 6, 1, 6, 8], [1, 3], [2, 0], [], [1, 1], [0, 0], [], [], [], [1, 1, 3, 0, 1], [1, 1], [1, 0, 1, 3, 0, 1, 1, 3, 1, 3, 1, 2, 3, 0, 3, 1, 1], [1], [1, 0, 1, 1, 2], [2, 2], [1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(8.0) \\g i1\\nb0 = int(8.0) \\ge max(i1, int(5.0))\\nin0 *= int(94.0)\\ni0 *= min(int(6.0), max(int(1.0), mod(max(i1, abs(int(6.0))),int(8.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 9, 9, 2, 2, 0, 2, 2, 0, 0, 0, 5, 2, 17, 1, 5, 2, 1]}, {"genotype": [[0], [1], [0], [], [0], [1], [4], [5], [1], [], [1], [0], [], [], [], [5, 4], [], [2, 0, 1, 0], [1], [], [], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(in2,int(4.0)) != in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [3, 3], [], [], [], [], [], [], [], [], [1, 4, 1], [1], [2, 2, 1, 1, 3, 3, 0, 0], [1, 0], [0, 2], [1, 1], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= mod(( int(3.0) - int(3.0) ),min(abs(in1), i1))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 8, 2, 2, 2, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 7, 1, 8, 1, 2, 3], [1, 4], [1], [1], [0, 1, 1], [0, 0], [3], [], [], [5, 3, 1], [0], [2, 3, 2, 1, 3, 0, 1, 1, 1, 2, 0, 3, 1, 1, 1, 3, 1], [0, 0, 0], [1, 2, 0, 2], [2, 2, 1], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( max(( int(9.0) * abs(in2) ), int(6.0)) * int(7.0) ) \\g int(1.0) or ( in0 - min(int(8.0), int(1.0)) ) \\le int(2.0) )\\ni1 = abs(int(3.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 8, 8, 2, 1, 1, 3, 2, 1, 0, 0, 3, 1, 17, 3, 4, 3, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 2, 2, 0, 1], [1, 1], [1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 2, 9, 5, 8, 8, 2, 4, 1, 0], [0, 0, 3, 3], [0, 2, 0, 0, 2], [1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0], [3, 1, 0, 3, 1, 1, 2], [1, 0, 1], [], [6, 2, 0, 2, 3, 2, 2, 5, 3, 1, 4, 3, 1, 1, 5, 5, 1, 4], [1, 0, 1], [1, 2, 1, 1, 0, 2, 2, 1, 3, 3, 0, 0, 0, 0, 3, 3, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0, 3, 3, 2, 0, 0, 3, 0, 0, 0, 1, 3, 1, 0, 0, 3, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 0, 1, 0], [1, 2, 1, 2, 2, 1], [1, 1, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= int(9.0)\\ni2 = mod(int(2.0),int(2.0))\\nb0 = i0 \\l mod(divInt(int(9.0),abs(abs(i2))),in0)\\nb2 = i2 \\l i2\\nb0 = ( False or b0 )\\nloopBreak% = 0\\nwhile ( True and min(min(in2, int(5.0)), int(8.0)) \\ge int(8.0) ):{:\\nloopBreak% = 0\\nwhile False:{:\\nin0 *= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not mod(( ( ( i1 - max(max(( in1 * in0 ), min(i1, i1)), in2) ) * int(4.0) ) - max(int(1.0), in2) ),i1) \\ge min(in1, int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 9, 9, 2, 7, 11, 11, 4, 5, 2, 11, 4, 7, 3, 0, 18, 3, 43, 8, 9, 6, 4]}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 0, 1, 2, 1], [1, 1], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 2, 6, 2, 1, 9, 5, 9, 9, 1, 3, 0, 3, 6, 4, 2, 5, 4, 2, 4, 4, 2, 7, 1, 1, 0, 6, 7, 8, 8, 2, 5, 7, 5, 6, 7, 5, 8, 9], [5, 3, 5, 5], [0, 0], [], [1, 1, 1, 1], [0, 0, 0, 0], [], [], [], [3, 0, 6, 5, 3, 1, 3, 4, 4, 4, 5, 2, 0, 0, 0, 5, 4, 0, 1, 2, 1, 1, 6, 1, 3, 5, 1, 5, 6, 3, 2, 1, 6, 3, 5, 2, 0, 0, 6, 1, 6], [1], [0, 2, 3, 0, 2, 2, 2, 3, 3, 2, 3, 2, 2, 0, 1, 0, 1, 1, 0, 0, 1, 3, 0, 3, 2, 2, 1, 1, 1, 3, 3, 2, 2, 0, 2, 3, 1, 1, 1, 0, 0, 0, 3, 2, 0, 2, 1, 3, 1, 3, 2, 0, 2, 2, 0, 3, 2, 1, 0, 0, 1, 1, 0, 2, 1, 3, 2, 1, 1, 1, 2, 2, 3, 0, 2, 1, 2, 3, 1, 3, 2, 1, 0, 2, 1, 0, 1, 2, 1, 3, 0, 2, 0, 3, 2, 3, 2, 3, 1, 2, 1, 2, 2, 2, 0, 1, 3, 2, 3, 0, 2, 1, 2, 0, 0, 3, 0, 2, 2, 2, 0, 3, 1, 2, 1, 0, 2, 0, 1, 3, 3, 3, 3, 3, 1, 1, 0, 3, 3, 2, 3, 3, 2, 1, 0, 2, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 2, 1, 1, 1, 0, 0, 2, 0, 2, 2, 1, 1, 2, 0, 2, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 2, 0, 1, 2, 2], [0, 2, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 2, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 != ( min(i0, ( ( divInt(max(min(( max(mod(mod(res0,int(2.0)),in2), int(7.0)) + int(2.0) ), in0), i1),int(6.0)) * min(in0, abs(( divInt(int(2.0),int(1.0)) + int(9.0) ))) ) - max(max(divInt(( in1 * ( max(int(5.0), int(9.0)) - int(9.0) ) ),in1), in1), in2) )) * min(divInt(i2,mod(int(1.0),min(int(3.0), abs(divInt(i0,( ( i0 * min(divInt(int(0.0),i0), in2) ) - int(3.0) )))))), int(6.0)) ):{:\\nin1 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( int(4.0) * abs(mod(int(2.0),int(5.0))) ) \\ge int(4.0)\\nloopBreak% = 0\\nwhile ( ( abs(i1) + mod(int(2.0),( max(int(4.0), max(( int(4.0) - i2 ), ( int(2.0) - i1 ))) * int(7.0) )) ) - divInt(int(1.0),abs(i1)) ) != ( res0 + min(mod(abs(mod(min(int(1.0), mod(int(0.0),divInt(( divInt(i1,int(6.0)) + max(( max(in0, divInt(int(7.0),divInt(in2,i1))) + abs(in2) ), divInt(( divInt(res0,abs(int(8.0))) - ( int(8.0) * in0 ) ),( i2 + int(2.0) ))) ),max(abs(abs(min(min(int(5.0), int(7.0)), i1))), abs(min(divInt(max(abs(( int(5.0) * res0 )), ( in0 * mod(in2,int(6.0)) )),i2), ( ( i0 - int(7.0) ) + i0 ))))))),abs(( int(5.0) - int(8.0) )))),res0), int(9.0)) ):{:\\nb0 = i1 != res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 40, 40, 4, 2, 0, 4, 4, 0, 0, 0, 41, 1, 164, 49, 35, 27, 23]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1], [4, 7, 9, 6], [2, 4], [2, 1], [1], [0, 0, 1, 1], [0, 0], [1, 3], [1], [], [5, 4, 5, 2, 0], [], [1, 3, 1, 3, 0, 2, 2, 3, 1, 2, 3, 0, 0, 3, 0, 1, 0], [0, 1, 0], [2, 1, 1, 2, 2], [0, 0], [0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\nb1 = ( int(4.0) == abs(int(7.0)) or max(in2, ( divInt(max(int(9.0), ( abs(in1) + in2 )),abs(i2)) + int(6.0) )) \\le i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 2, 2, 1, 4, 2, 2, 1, 0, 5, 0, 17, 3, 5, 2, 1]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [1, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 7, 3, 6, 0, 6, 4, 8, 2, 2], [2], [1, 0, 1], [], [0, 1, 0], [0], [0, 0], [], [], [0, 4, 4, 0, 4, 1], [0], [2, 0, 1, 0, 2, 2, 0, 2, 1, 1, 3, 3, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 1, 1, 3, 1, 1, 0, 1, 3, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 2, 1, 2, 2], [1, 2], [0, 1, 0, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile divInt(i0,int(1.0)) == in1:{:\\nin1 = ( mod(i0,divInt(int(8.0),int(7.0))) - min(abs(divInt(divInt(divInt(mod(mod(int(3.0),max(int(6.0), mod(( int(0.0) * int(6.0) ),abs(int(4.0))))),int(8.0)),in1),int(2.0)),abs(i1))), int(2.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 11, 11, 1, 3, 0, 3, 1, 2, 0, 0, 6, 1, 32, 11, 5, 2, 9]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 0, 2, 0, 1, 2, 1, 2, 2, 0, 2, 1], [1, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 1, 3, 5, 1, 3, 0, 0, 9, 1, 1, 4, 3, 0, 3, 7, 8, 8, 3, 3, 7, 4, 3, 0, 3, 2, 9, 0, 2, 3, 0, 4, 7, 5, 8, 2, 9, 5, 2, 1, 3, 6, 8, 8, 3, 2, 9, 3], [2, 4, 3, 0, 1, 2, 0], [1, 2, 2, 0, 2, 1], [0, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 1, 2, 2, 3, 1, 1], [0, 1, 1, 1, 1], [], [5, 1, 0, 1, 5, 6, 4, 0, 4, 6, 3, 0, 3, 6, 6, 0, 3, 1, 3, 1, 4, 1, 2, 0, 6, 2, 0, 1, 1, 2, 3, 1, 0, 2, 5, 2, 0, 5, 2, 2, 3, 3, 5, 1, 0, 1, 5, 3, 4, 5], [1, 0, 0], [0, 2, 2, 2, 2, 3, 2, 3, 1, 1, 1, 1, 0, 1, 2, 3, 1, 3, 1, 0, 3, 3, 2, 1, 3, 0, 0, 2, 0, 2, 2, 0, 3, 1, 2, 0, 2, 1, 1, 0, 3, 0, 3, 2, 0, 1, 2, 3, 1, 2, 1, 2, 2, 1, 3, 1, 0, 2, 3, 0, 2, 0, 2, 3, 1, 3, 3, 2, 1, 2, 2, 3, 1, 0, 0, 2, 0, 0, 3, 0, 3, 0, 2, 2, 3, 1, 0, 3, 3, 2, 2, 2, 3, 0, 1, 1, 0, 3, 1, 2, 2, 0, 1, 2, 2, 2, 1, 2, 2, 1, 2, 0, 3, 1, 3, 2, 3, 2, 1, 0, 1, 0, 1, 0, 2, 0, 3, 1, 1, 2, 0, 3, 0, 1, 1, 0, 1, 1, 3, 3, 1, 0, 1, 2, 1, 0, 3, 2, 3, 3, 3, 0, 3, 1, 0, 0, 1, 2, 2, 0, 1, 0, 0, 0, 0, 3, 3, 2, 2, 2, 3, 0, 2, 1, 3, 3, 3, 1, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1, 0, 0, 1, 1, 2, 2, 0, 2, 1, 2, 0, 1], [2, 0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 1, 2, 2, 2, 0, 2, 0, 1, 0, 1, 2], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= i1\\nloopBreak% = 0\\nwhile ( ( ( mod(min(( max(int(9.0), int(7.0)) + int(1.0) ), int(3.0)),i0) + int(5.0) ) * divInt(abs(int(1.0)),max(int(3.0), i1)) ) + max(min(divInt(int(0.0),min(in2, res0)), ( in1 + ( ( i0 - max(int(0.0), ( in1 + ( int(9.0) - int(1.0) ) )) ) + res0 ) )), min(in0, min(mod(i0,int(1.0)), divInt(max(int(4.0), ( int(3.0) * divInt(( int(0.0) + max(int(3.0), in0) ),divInt(abs(res0),( res0 - ( max(int(7.0), abs(abs(( int(8.0) - divInt(mod(max(int(8.0), i0),in0),divInt(i1,in0)) )))) * min(i1, abs(in1)) ) ))) )),mod(( max(int(3.0), i1) - abs(abs(( ( mod(abs(i2),int(3.0)) + int(7.0) ) - i0 ))) ),abs(int(4.0))))))) ) == divInt(divInt(res0,int(3.0)),divInt(mod(( int(0.0) - ( ( int(3.0) * ( i2 * min(int(2.0), abs(( abs(mod(int(9.0),i0)) * int(0.0) ))) ) ) + i1 ) ),int(2.0)),i1)):{:\\nb1 = ( mod(i2,max(int(3.0), int(0.0))) \\le ( in0 * min(i1, int(4.0)) ) and True )\\nb2 = int(7.0) \\ge i0\\nloopBreak% = 0\\nwhile False:{:\\ni2 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nin2 = int(8.0)\\nloopBreak% = 0\\nwhile not not ( max(min(int(2.0), i2), int(9.0)) \\l ( int(5.0) + i0 ) or False ):{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = min(divInt(max(max(abs(in2), abs(int(2.0))), i2),i2), int(1.0)) \\g mod(( in0 - int(3.0) ),in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in2 == i1:{:\\nb1 = i0 \\l min(abs(divInt(divInt(divInt(max(i1, ( int(6.0) + abs(min(max(int(8.0), in2), in0)) )),in1),( mod(( int(8.0) - int(3.0) ),int(2.0)) * in2 )),int(9.0))), int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 49, 49, 7, 6, 2, 17, 7, 10, 5, 0, 50, 3, 190, 52, 42, 29, 24]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 0, 1, 2, 1, 2, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 8, 5, 8, 8, 7, 3, 4, 8, 6, 3, 3, 8, 3, 3, 0, 6, 6, 5, 7, 8, 1, 6, 7, 5, 7, 8, 3, 4, 5, 0, 6, 6, 8, 8, 6, 0, 5, 7, 9, 6, 5, 7, 3, 8, 1, 3, 6, 3, 3, 8, 6, 3, 2, 7, 8, 3, 3, 3, 7, 7, 6, 3, 8, 0, 6, 1, 7, 8, 3, 4, 0, 1, 4, 0, 6, 9, 2, 3, 6, 1, 2, 2, 5, 9, 0, 4, 9, 9, 4, 2, 0, 8, 3, 9, 5, 6, 4, 8, 0, 6, 3, 1, 4, 1, 7, 9, 8, 8, 7, 6, 0, 8, 1, 7, 4, 2, 6, 0, 4, 1, 5, 6, 7, 3, 9, 3, 6, 4, 4, 0, 4, 9, 3, 3, 9, 4, 6, 3, 7, 1, 7, 6, 3, 5, 5, 3, 4, 1, 2, 1, 9, 9, 7, 5, 2, 2, 0, 5, 8, 2, 7, 8, 9, 6, 4, 2, 7, 9, 0, 1, 0, 2, 5, 0, 5, 2, 1], [3, 5, 2, 0, 1, 3, 0, 0, 5, 0, 0, 5, 2, 5, 5], [1, 1, 0, 2, 1, 0], [1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 2, 3, 0, 3, 3, 3, 3, 2, 3], [0, 0, 0, 1], [1, 0, 1, 1, 0, 1], [4, 1, 2, 6, 1, 2, 5, 6, 2, 4, 6, 3, 4, 4, 0, 6, 1, 6, 2, 5, 2, 4, 6, 1, 1, 0, 6, 6, 4, 5, 0, 5, 5, 1, 6, 0, 4, 4, 0, 1, 3, 3, 5, 3, 3, 4, 5, 3, 0, 2, 5, 2, 3, 5, 3, 4, 0, 2, 1, 0, 1, 4, 2, 1, 1, 5, 1, 5, 4, 1, 5, 4, 6, 2, 3, 5, 6, 2, 4, 5, 3, 2, 2, 6, 0, 1, 2, 3, 6, 5, 4, 6, 1, 3, 5, 4, 0, 0, 2, 3, 2, 0, 3, 6, 2, 6, 2, 6, 1, 6, 5, 4, 6, 6, 4, 0, 6, 2, 6, 4, 0, 5, 3, 0, 6, 6, 3, 2, 3, 2, 6, 3, 5, 0, 4, 2, 0, 4, 0, 0, 1, 6, 0, 3, 5, 1, 1, 6, 4, 5, 4, 3, 3, 0, 6, 1, 5, 6, 4, 1, 3, 1, 3, 0, 6, 5, 5, 4, 1, 5, 6, 6, 3, 5, 5, 0, 5, 6, 3, 0, 4, 2, 4, 5, 4, 3, 1, 0, 4, 6, 6, 6, 5, 5, 3, 4, 6, 5, 0, 1], [0, 0, 0, 1, 1, 1], [1, 2, 3, 1, 1, 0, 0, 0, 2, 3, 0, 3, 2, 3, 1, 2, 0, 0, 0, 3, 1, 2, 0, 0, 1, 3, 2, 1, 0, 3, 2, 0, 3, 0, 2, 2, 1, 3, 2, 3, 3, 2, 2, 1, 1, 0, 3, 0, 0, 2, 2, 1, 2, 2, 3, 1, 3, 2, 0, 1, 1, 2, 0, 3, 3, 3, 2, 0, 3, 2, 0, 1, 0, 2, 3, 2, 0, 1, 0, 0, 3, 1, 0, 0, 1, 2, 0, 0, 1, 3, 1, 2, 0, 3, 2, 2, 0, 2, 2, 2, 3, 2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 0, 3, 2, 2, 1, 1, 3, 3, 3, 2, 0, 3, 2, 1, 0, 3, 0, 0, 0, 2, 3, 0, 3, 2, 1, 2, 1, 3, 1, 2, 2, 3, 0, 1, 3, 2, 0, 2, 2, 2, 1, 1, 2, 0, 2, 3, 0, 0, 1, 3, 2, 3, 3, 2, 3, 3, 2, 3, 0, 2, 0, 1, 3, 2, 2, 0, 0, 2, 0, 0, 1, 3, 0, 2, 2, 3, 2, 3, 2, 3, 0, 0, 1, 2, 0, 2, 0, 1, 1, 3, 0, 1, 0, 1, 1, 0, 1, 0, 0, 3, 3, 1, 2, 2, 2, 3, 0, 2, 3, 1, 1, 2, 0, 2, 3, 3, 3, 0, 0, 2, 3, 3, 3, 3, 0, 2, 2, 0, 1, 3, 2, 2, 3, 1, 2, 2, 3, 1, 2, 1, 2, 3, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 3, 0, 2, 1, 0, 1, 1, 1, 1, 3, 2, 2, 1, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 2, 0, 1, 2, 2, 1, 3, 2, 2, 3, 0, 1, 1, 0, 0, 3, 1, 0, 1, 0, 3, 2, 1, 3, 2, 2, 3, 3, 3, 3, 2, 0, 3, 3, 0, 1, 0, 2, 2, 0, 1, 3, 3, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 2, 1, 0, 0, 1, 2, 2, 3, 0, 2, 1, 2, 0, 2, 1, 0, 0, 3, 1, 3, 3, 1, 1, 0, 2, 2, 2, 1, 0, 1, 0, 2, 2, 1, 1, 0, 0, 3, 0, 2, 0, 0, 0, 0, 3, 1, 3, 0, 2, 2, 1, 0, 1, 2, 0, 2, 1, 3, 0, 0, 1, 3, 3, 2, 0, 1, 3, 0, 2, 0, 0, 3, 2, 3, 1, 0, 3, 3, 3, 3, 3, 0, 1, 2, 3, 2, 3, 1, 3, 0, 0, 2, 2, 0, 1, 0, 2, 2, 3, 1, 2, 3, 0, 2, 1, 1, 2, 1, 1, 0, 2, 1, 3, 1, 2, 0, 3, 1, 1, 1, 3, 2, 0, 3, 1, 1, 0, 2, 2, 0, 0, 3, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 1, 2, 2, 1, 3, 0, 3, 0, 2, 3, 3, 3, 3, 1, 3, 2, 2, 2, 1, 2, 0, 3, 1, 0, 1, 1, 3, 1, 2, 0, 2, 0, 0, 0, 2, 2, 1, 1, 1, 3, 2, 2, 3, 0, 0, 3, 0, 3, 1, 1, 1, 3, 2, 2, 2, 2, 1, 3, 3, 3, 0, 3, 1, 3, 2, 3, 2, 2, 0, 1, 3, 0, 1, 1, 0, 3, 2, 3, 1, 3, 3, 0, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 2, 2, 1, 2, 1, 0, 2, 1, 3, 2, 2, 0, 0, 1, 2, 2, 2, 3, 0, 2, 2, 3, 0, 3, 2, 1, 1, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 3, 0, 2, 3, 3, 2, 1, 2, 0, 1, 0, 1, 1, 0, 0, 0, 2, 1, 0, 1, 0, 1, 3, 1, 1, 2, 0, 3, 1, 1, 1, 3, 1, 1, 2, 3, 3, 3, 2, 3, 2, 3, 3, 2, 3, 0, 0, 1, 1, 3, 3, 3, 1, 1, 3, 1, 0, 1, 2, 3, 2, 2, 0, 2, 2, 1, 1, 2, 1, 0, 2, 0, 3, 3, 2, 0, 0, 0, 1, 2, 1, 3, 3, 3, 2, 3, 0, 2, 1, 2, 2, 2, 2, 2, 1, 3, 2, 3, 0, 3, 1, 2, 3, 0, 1, 1, 0, 0, 3, 2, 3, 0, 0, 3, 1, 2, 1, 0, 0, 3, 2, 0, 0, 3, 1, 3, 1, 1, 3, 0, 0, 2, 1, 0, 1, 3, 1, 1, 2, 1, 0, 1, 0, 3, 3, 0, 2, 2, 1, 3, 0, 2, 3, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 2, 0, 2, 0, 1, 2, 2, 1, 0, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 1, 2, 0, 2, 0, 2, 1, 0, 1, 1, 1, 2, 2, 2, 0, 1, 2, 2, 2, 1, 0, 1, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 0, 2, 1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 2, 1, 1, 2, 1, 0, 0, 1, 2, 1, 0, 1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1, 1, 0, 2, 1, 2, 2, 2, 0, 0, 2, 1, 1, 1, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 0, 0, 0, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 2, 2, 1, 0, 0, 1, 1, 1, 2, 2, 1], [1, 0, 1, 0, 0, 0, 1, 0, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 0, 2, 1, 2, 1, 1, 0, 0, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 0, 1, 1, 1, 1, 2, 0, 2, 1, 1, 2, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 1, 2, 1, 2, 1, 0, 0, 2, 2, 0, 0, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 2], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 87, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nif True:{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile int(3.0) \\ge ( min(int(3.0), int(8.0)) - in1 ):{:\\nb1 = i1 != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = ( min(res0, min(mod(min(int(5.0), ( i1 + i2 )),in2), abs(int(8.0)))) - ( res0 + i2 ) ) == int(8.0)\\n:}\\nloopBreak% = 0\\nwhile min(mod(int(7.0),in1), abs(( res0 + min(in0, mod(( int(3.0) + max(( abs(abs(( mod(int(4.0),int(8.0)) - in1 ))) + max(in1, i0) ), divInt(divInt(int(6.0),mod(( min(int(3.0), max(divInt(res0,int(3.0)), int(8.0))) * divInt(i1,min(abs(abs(( res0 - min(mod(i2,int(3.0)), in2) ))), mod(min(( i2 - int(3.0) ), in1),res0))) ),min(int(0.0), i1))),i1)) ),int(6.0))) ))) \\l mod(i0,res0):{:\\nif int(6.0) \\g abs(int(5.0)):{:\\nif False:{:\\nif not ( b2 or ( res0 - min(mod(( in1 * mod(mod(( abs(divInt(max(in2, int(7.0)),int(8.0))) * abs(max(i0, mod(divInt(in2,abs(( mod(int(1.0),int(6.0)) * min(abs(min(divInt(in2,abs(mod(int(7.0),i1))), max(res0, i0))), in1) ))),( min(in1, max(( int(5.0) * divInt(int(7.0),max(int(8.0), ( ( max(i0, int(3.0)) * abs(divInt(i1,mod(divInt(divInt(int(4.0),int(5.0)),mod(in0,( abs(in0) - in2 ))),int(0.0)))) ) + abs(( min(max(( abs(abs(divInt(abs(in0),( in0 * int(6.0) )))) * max(divInt(mod(in1,in2),mod(in0,i0)), int(6.0)) ), min(i2, mod(( max(divInt(min(mod(max(in2, i2),int(8.0)), ( in0 * divInt(in2,int(8.0)) )),int(6.0)), max(in0, int(0.0))) * in1 ),int(5.0)))), int(7.0)) + i0 )) ))) ), int(9.0))) * i2 )))) ),i1),abs(max(int(6.0), divInt(( divInt(abs(i0),divInt(abs(int(5.0)),int(7.0))) - ( i1 * ( min(max(min(in1, i2), mod(max(abs(max(min(i1, ( mod(i1,int(3.0)) - min(( ( min(int(8.0), ( mod(max(int(1.0), divInt(int(3.0),( min(in2, int(6.0)) - int(3.0) ))),i1) + in2 )) + in1 ) * int(3.0) ), i1) )), in2)), int(8.0)),in1)), int(6.0)) * abs(res0) ) ) ),divInt(int(3.0),i2))))) ),int(2.0)), int(7.0)) ) \\ge int(8.0) ):{:\\nb1 = int(3.0) \\l max(( mod(int(3.0),abs(divInt(abs(min(abs(( min(abs(( min(( in0 - int(3.0) ), ( ( int(7.0) * min(divInt(mod(abs(in2),int(7.0)),int(6.0)), res0) ) * i2 )) * max(int(3.0), in1) )), int(8.0)) - in2 )), max(divInt(int(0.0),max(( ( max(max(min(min(( in0 * max(max(i2, int(6.0)), i2) ), ( mod(res0,int(1.0)) + min(abs(int(7.0)), mod(i0,divInt(int(8.0),( int(3.0) * int(4.0) )))) )), divInt(int(0.0),mod(int(1.0),i1))), i2), int(4.0)) + ( ( abs(in0) * ( int(0.0) - divInt(res0,( int(6.0) + in2 )) ) ) * in1 ) ) + max(int(9.0), max(min(int(2.0), int(3.0)), res0)) ), ( ( ( int(6.0) - i1 ) - int(1.0) ) - in0 ))), mod(( int(2.0) - int(2.0) ),in2)))),in1))) * min(i0, ( i0 + i2 )) ), in0)\\n:}else:{:\\ni2 = i0\\n:}\\n:}else:{:\\nif ( ( abs(int(5.0)) \\l abs(in0) and ( ( ( int(9.0) * res0 ) - int(0.0) ) != divInt(i2,( int(4.0) - min(res0, i2) )) and int(9.0) \\l abs(max(mod(res0,int(9.0)), max(i1, ( res0 * in2 )))) ) ) or ( not abs(( max(int(4.0), in1) * min(min(max(abs(max(res0, int(2.0))), ( min(( max(int(0.0), abs(res0)) + in1 ), ( ( i0 * int(8.0) ) + res0 )) - mod(( abs(int(3.0)) - ( max(i2, divInt(int(9.0),int(5.0))) - ( int(6.0) + int(4.0) ) ) ),res0) )), mod(int(8.0),min(int(0.0), mod(in1,max(int(6.0), int(3.0)))))), int(1.0)) )) \\l abs(( i0 + abs(int(4.0)) )) and int(1.0) != in2 ) ):{:\\nb0 = ( ( mod(in0,i0) + min(int(7.0), ( divInt(( res0 + int(9.0) ),res0) * in0 )) ) == min(( int(8.0) - divInt(mod(int(8.0),abs(i2)),max(in0, ( max(min(abs(max(int(7.0), abs(mod(divInt(mod(int(6.0),( i2 - abs(int(0.0)) )),res0),int(8.0))))), int(1.0)), abs(int(7.0))) - ( in0 * mod(in2,i0) ) ))) ), in1) or mod(( int(4.0) + int(2.0) ),int(6.0)) != min(( ( min(i2, i0) - abs(in1) ) + max(int(0.0), int(4.0)) ), int(1.0)) )\\n:}\\n:}\\n:}\\nif max(mod(divInt(mod(( int(5.0) * max(max(max(i0, abs(int(6.0))), min(divInt(max(divInt(divInt(i0,int(7.0)),min(i1, int(3.0))), int(9.0)),res0), max(( max(int(3.0), max(max(i0, in0), mod(mod(max(in2, i1),int(6.0)),max(( min(divInt(mod(int(4.0),( int(4.0) + i1 )),( int(0.0) - max(mod(mod(res0,in1),int(4.0)), ( ( divInt(abs(in2),divInt(( min(in1, min(( int(9.0) + int(3.0) ), min(in0, ( ( ( mod(int(3.0),( int(9.0) + in0 )) + abs(i0) ) * divInt(abs(abs(divInt(int(4.0),divInt(res0,int(6.0))))),i1) ) + int(3.0) )))) + int(7.0) ),in2)) - res0 ) * in1 )) )), ( int(1.0) - i1 )) * int(7.0) ), in0)))) - int(6.0) ), max(int(3.0), int(5.0))))), ( i1 + max(int(5.0), int(3.0)) )) ),int(4.0)),max(int(1.0), int(2.0))),divInt(abs(max(max(mod(abs(mod(max(abs(( abs(in0) + i0 )), int(1.0)),int(9.0))),abs(max(min(int(9.0), int(7.0)), min(int(5.0), res0)))), int(2.0)), ( min(( divInt(in2,divInt(( int(2.0) * int(0.0) ),divInt(int(5.0),in2))) * ( in1 + abs(min(( i1 + in2 ), res0)) ) ), int(8.0)) - ( int(2.0) + min(max(min(divInt(min(res0, divInt(int(7.0),divInt(( mod(mod(mod(int(8.0),min(( abs(in0) + abs(int(9.0)) ), ( abs(in2) * int(6.0) ))),int(4.0)),in2) - i0 ),min(( abs(in2) + res0 ), abs(int(2.0)))))),divInt(int(7.0),in0)), i0), max(mod(in1,i2), min(int(9.0), min(int(0.0), int(1.0))))), max(in1, in2)) ) ))),mod(int(0.0),in1))), int(2.0)) != max(int(5.0), int(0.0)):{:\\nin0 = mod(int(5.0),i1)\\n:}else:{:\\ni0 = int(2.0)\\n:}\\nin1 *= res0\\nres0 -= max(abs(res0), divInt(( int(1.0) + abs(in2) ),( max(in2, divInt(in0,mod(in1,res0))) * in2 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 9, 11, 179, 179, 15, 6, 6, 28, 15, 13, 4, 6, 200, 6, 773, 211, 189, 107, 107]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 1, 2, 0, 0], [1, 0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 6, 1, 6, 2, 6, 1, 6, 7, 6, 9, 3, 5, 5, 7, 5, 9, 2, 7, 2, 4, 1], [2, 1, 3], [0, 0], [], [1, 1, 1, 0], [0, 0, 0], [1], [0], [0], [1, 3, 2, 0, 4, 5, 4, 0, 5, 2, 1, 5, 2, 1, 0], [0], [3, 1, 2, 2, 3, 3, 3, 0, 1, 1, 2, 3, 0, 1, 3, 3, 3, 2, 3, 1, 0, 0, 2, 2, 1, 2, 3, 2, 3, 1, 0, 0, 0, 0, 3, 3, 1, 1, 1, 2, 0, 3, 3, 0, 1, 1, 1, 0, 1, 2, 1, 2, 3, 1, 3, 1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 2, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 1, 1], [2, 2, 2, 1, 2, 0, 1, 0, 0], [0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(int(3.0), ( divInt(min(min(min(i1, int(3.0)), int(6.0)), ( min(in0, int(1.0)) * max(min(max(divInt(max(int(6.0), i2),i0), divInt(( int(2.0) * ( max(( max(int(6.0), in1) * in2 ), in1) - i0 ) ),abs(max(int(1.0), int(6.0))))), int(7.0)), divInt(in2,min(min(i2, int(6.0)), int(9.0)))) )),int(3.0)) * i1 )) == int(5.0):{:\\nb0 = ( int(5.0) + ( max(int(7.0), max(int(5.0), int(9.0))) - divInt(int(2.0),int(7.0)) ) ) \\g in2\\nif i2 \\ge ( int(2.0) + int(4.0) ):{:\\nb0 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( int(1.0) + i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 23, 23, 3, 2, 0, 4, 3, 1, 1, 1, 15, 1, 68, 14, 17, 9, 5]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 1, 5, 5, 4], [1], [2, 2, 2, 0, 0, 0, 0], [1, 0, 0], [], [0, 1, 1], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += mod(( ( i1 - in2 ) - in2 ),in1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 7, 3, 0, 3, 1]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 2, 0, 1], [1, 0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 6, 0, 8, 7, 9, 0, 6, 6, 4, 2, 4, 9, 3, 2, 5, 4, 6, 9, 8, 5, 4, 8, 2, 0, 8, 8, 5, 3, 4, 5, 0, 6, 2, 9, 7, 6, 0, 7, 7, 4, 9, 9, 3, 4, 7, 8, 6, 4, 3, 7, 7, 6, 5, 0, 5, 4, 7, 1, 0, 9, 2, 3, 3, 8, 8, 8, 2, 5, 6, 1, 6, 0, 9, 0, 8, 6, 8, 7, 9, 5], [0, 1, 5], [], [1, 0], [0, 1, 0, 1, 0, 0, 1], [0, 0, 0], [2, 3, 3, 1], [1], [0], [4, 4, 2, 4, 0, 2, 5, 2, 5, 6, 4, 4, 0, 1, 0, 1, 2, 5, 2, 4, 3, 2, 5, 1, 4, 5, 0, 1, 6, 3, 6, 4, 4, 2, 3, 1, 5, 2, 5, 5, 6, 3, 3, 3, 4, 5, 4, 5, 5, 5, 2, 2, 3, 4, 2, 4, 4, 4, 1, 0, 5, 5, 4, 3, 5, 0, 4, 0, 6, 3, 6, 0, 0, 3, 3, 2, 2, 2, 4, 5], [0, 0, 0], [3, 0, 1, 0, 1, 3, 3, 3, 1, 3, 0, 3, 1, 1, 1, 0, 3, 0, 3, 3, 2, 3, 2, 3, 0, 3, 3, 2, 1, 2, 2, 1, 2, 0, 3, 3, 1, 2, 0, 0, 1, 0, 3, 3, 2, 0, 2, 1, 2, 1, 3, 0, 2, 3, 2, 0, 1, 3, 3, 1, 3, 2, 3, 3, 0, 1, 3, 3, 0, 3, 2, 1, 1, 3, 2, 2, 1, 3, 3, 0, 2, 2, 3, 2, 0, 1, 3, 3, 1, 2, 3, 0, 0, 3, 1, 0, 2, 0, 2, 3, 2, 3, 1, 0, 1, 2, 2, 1, 0, 2, 1, 0, 3, 1, 2, 3, 2, 1, 2, 3, 3, 2, 3, 2, 0, 2, 1, 0, 0, 3, 2, 1, 2, 3, 0, 3, 2, 1, 0, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1, 1, 2, 0, 3, 2, 3, 3, 3, 2, 0, 1, 0, 3, 2, 1, 1, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 3, 1, 0, 3, 2, 1, 2, 3, 1, 3, 0, 1, 0, 3, 1, 2, 3, 3, 0, 3, 0, 3, 3, 0, 1, 2, 3, 1, 1, 3, 0, 1, 3, 1, 2, 3, 0, 1, 0, 3, 0, 0, 3, 3, 2, 1, 3, 2, 0, 0, 2, 1, 0, 1, 0, 0, 2, 1, 3, 3, 2, 0, 2, 2, 3, 3, 0, 0, 0, 1, 1, 0, 0, 3, 1, 3, 1, 1, 3, 1, 1, 3, 2, 1, 0, 1, 1, 3, 0, 0, 2, 1, 1, 3, 2, 0, 2, 2, 2, 2, 1, 0, 3, 2, 0, 1, 0, 2, 1, 2, 0, 2, 0, 3, 3, 1, 0, 2, 1, 0, 0, 1, 3, 0, 1, 2, 3, 3, 0, 1, 0, 0, 1, 3, 3, 1, 2, 2, 3, 1, 3, 0, 0, 1, 0, 2, 1, 2, 2, 2, 3, 2, 3, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 2, 2, 0, 2, 2, 1, 0, 0, 0, 1, 0, 1, 2, 2, 2, 0, 2, 2, 0, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 2, 0, 0, 0, 1, 1, 1, 0, 1, 2, 2, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 0, 1, 0, 0, 2, 1, 0, 1, 1, 0, 1, 0], [0, 2, 0, 2, 2, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 2, 0, 1, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 0, 2, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 124, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(in1, int(2.0))\\nloopBreak% = 0\\nwhile not i2 \\l int(7.0):{:\\nif ( min(max(min(int(6.0), min(in1, max(int(0.0), int(8.0)))), int(7.0)), i0) \\g min(i2, min(abs(( min(( min(in2, min(min(( int(9.0) + ( divInt(int(0.0),( i2 * abs(max(int(6.0), mod(in2,res0))) )) + int(6.0) ) ), in1), abs(min(divInt(in1,divInt(int(4.0),( int(2.0) * max(i0, mod(max(divInt(i1,int(4.0)), abs(abs(int(9.0)))),min(divInt(abs(abs(i0)),int(3.0)), max(min(i1, min(( int(2.0) * int(5.0) ), min(mod(mod(int(4.0),max(min(i2, ( ( max(( in2 + int(6.0) ), abs(abs(int(9.0)))) + mod(abs(i2),in1) ) + min(int(8.0), in0) )), mod(i2,divInt(abs(mod(abs(int(5.0)),in2)),int(4.0))))),mod(divInt(int(8.0),i1),mod(int(2.0),in1))), min(int(0.0), divInt(max(mod(int(8.0),divInt(abs(max(( max(( in2 + ( int(8.0) - i0 ) ), i1) * max(( int(5.0) - divInt(abs(res0),max(mod(int(3.0),in0), int(4.0))) ), abs(divInt(int(5.0),max(int(0.0), divInt(mod(abs(abs(int(6.0))),int(2.0)),( res0 - max(( max(min(abs(( in1 - int(9.0) )), in1), max(( int(7.0) - int(6.0) ), abs(divInt(mod(divInt(( min(mod(divInt(( min(min(int(0.0), i2), max(mod(int(7.0),( max(int(7.0), max(in0, int(4.0))) * i1 )), min(int(9.0), ( max(abs(in2), abs(i2)) + min(max(in2, int(9.0)), divInt(max(int(3.0), int(4.0)),abs(in2))) )))) - int(7.0) ),min(int(8.0), ( max(res0, int(6.0)) + in0 ))),abs(in0)), in0) - max(max(mod(int(4.0),min(mod(in1,in2), ( int(3.0) - in1 ))), int(7.0)), in2) ),in2),mod(int(7.0),max(min(mod(in2,( ( max(abs(i2), i2) * in0 ) * int(6.0) )), int(5.0)), in1))),i2)))) + abs(int(0.0)) ), min(int(5.0), int(4.0))) )))))) ), min(int(7.0), int(1.0)))),min(( int(0.0) + in1 ), int(9.0)))), int(2.0)),abs(in1)))))), in1)))) ))), ( int(3.0) - int(3.0) ))))) - abs(( i1 * divInt(divInt(divInt(mod(int(8.0),i0),min(divInt(in2,int(8.0)), in2)),( int(8.0) + divInt(in1,( in0 + max(min(int(2.0), in2), ( int(5.0) * i0 )) )) )),in1) )) ), int(6.0)) + min(i0, int(1.0)) )), mod(abs(max(res0, int(6.0))),in0))) or ( False and res0 != int(0.0) ) ):{:\\ni0 = min(max(int(9.0), mod(( max(int(0.0), min(i0, in0)) * int(8.0) ),in0)), mod(int(6.0),( mod(( max(mod(min(i2, int(8.0)),i2), int(7.0)) + int(9.0) ),i2) - in1 )))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 82, 82, 3, 0, 2, 7, 3, 4, 1, 1, 80, 3, 337, 81, 97, 35, 46]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 0, 0, 0], [0, 0], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 2, 3, 1, 8, 5, 0, 0, 1, 6, 9, 0, 4, 7, 9, 5, 9, 8, 2, 0, 8, 1, 8, 1, 2, 9, 8, 8, 8, 2, 7, 5, 0, 5, 3, 8, 7, 9, 7, 3, 1, 5, 9, 3, 8, 1, 6, 8, 6, 6, 3, 7, 7, 9, 7, 6, 3, 3, 5, 0, 1, 9, 2, 6, 2, 0, 8, 7, 3, 2, 5, 7, 7, 4, 5, 7, 7, 1, 3, 5, 1, 4, 5, 7, 3, 7, 6, 6, 0, 5, 3, 0, 6, 7, 5, 9, 5, 3, 1, 0, 2, 9, 2, 4, 1, 3, 1, 4, 5, 6, 7, 2, 7, 3, 0, 3, 2, 1, 4, 4, 9, 2, 8, 5, 2, 7, 5, 7, 1, 0, 7, 7, 8, 4, 2, 1, 7, 1, 6, 8, 0, 5, 7, 4, 2, 0, 8, 4, 1, 9, 2, 1, 2, 1, 8, 8, 4, 4, 8, 5, 3, 7], [3, 1, 5, 0], [0, 1, 2, 2], [], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0], [0, 2], [], [1, 0], [6, 6, 2, 5, 1, 5, 0, 0, 3, 0, 4, 4, 3, 4, 0, 6, 6, 4, 0, 1, 3, 3, 0, 0, 4, 0, 4, 2, 2, 5, 4, 6, 2, 6, 5, 5, 1, 4, 2, 6, 1, 6, 0, 2, 0, 4, 5, 3, 6, 6, 2, 5, 3, 1, 3, 6, 5, 1, 0, 5, 6, 2, 3, 4, 3, 1, 2, 3, 4, 0, 5, 4, 0, 0, 1, 2, 6, 5, 1, 6, 4, 3, 2, 2, 5, 3, 4, 6, 1, 2, 4, 1, 4, 6, 5, 2, 3, 3, 5, 5, 3, 6, 5, 2, 1, 5, 0, 3, 4, 5, 0, 3, 1, 2, 3, 3, 2, 5, 4, 2, 3, 1, 2, 4, 6, 0, 2, 6, 5, 2, 2, 0, 2, 0, 1, 3, 5, 6, 6, 2, 0, 2, 6, 3, 6, 3, 0, 1, 6, 0, 0, 3, 3, 3, 1, 0, 0, 0, 3, 2, 5, 5, 6, 2, 0, 0, 3, 4], [], [0, 3, 0, 1, 1, 3, 1, 1, 1, 2, 1, 3, 0, 3, 2, 3, 3, 3, 1, 3, 0, 2, 2, 1, 3, 2, 1, 3, 0, 3, 2, 1, 1, 3, 2, 3, 2, 0, 2, 0, 2, 2, 1, 2, 1, 2, 1, 2, 0, 0, 2, 3, 0, 2, 2, 3, 1, 2, 1, 1, 3, 3, 0, 1, 3, 3, 0, 3, 2, 3, 2, 3, 3, 3, 2, 3, 2, 0, 1, 2, 2, 0, 1, 0, 1, 3, 3, 3, 2, 3, 0, 2, 1, 0, 2, 1, 1, 0, 3, 3, 2, 3, 1, 2, 1, 3, 3, 3, 2, 2, 0, 2, 2, 2, 1, 0, 3, 0, 1, 0, 0, 0, 2, 3, 3, 3, 2, 3, 0, 2, 1, 2, 1, 1, 2, 1, 1, 3, 0, 3, 3, 1, 0, 2, 2, 2, 2, 3, 2, 0, 2, 0, 3, 2, 2, 3, 0, 0, 2, 0, 2, 2, 1, 2, 3, 2, 3, 2, 3, 2, 1, 3, 2, 2, 0, 3, 1, 2, 3, 0, 0, 1, 1, 1, 3, 2, 0, 0, 3, 0, 2, 2, 0, 0, 2, 1, 1, 3, 3, 3, 0, 1, 2, 2, 1, 3, 0, 3, 0, 2, 1, 0, 1, 2, 0, 3, 1, 1, 0, 1, 0, 2, 2, 2, 3, 1, 1, 2, 0, 3, 0, 0, 3, 1, 2, 2, 1, 3, 0, 2, 0, 3, 1, 2, 2, 0, 2, 3, 3, 3, 2, 2, 0, 3, 1, 2, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 2, 2, 3, 0, 2, 2, 2, 3, 1, 2, 2, 2, 3, 2, 3, 1, 3, 1, 1, 0, 0, 1, 1, 3, 3, 2, 3, 2, 2, 0, 1, 0, 2, 3, 2, 3, 3, 3, 3, 0, 0, 2, 1, 3, 2, 1, 2, 1, 2, 2, 1, 0, 0, 1, 2, 2, 3, 1, 1, 2, 2, 0, 0, 2, 3, 0, 1, 2, 0, 1, 3, 1, 2, 1, 3, 3, 0, 1, 2, 2, 0, 1, 1, 0, 1, 3, 1, 1, 2, 3, 2, 0, 3, 3, 2, 2, 1, 3, 3, 2, 3, 2, 0, 0, 0, 3, 0, 3, 1, 1, 2, 3, 3, 1, 0, 2, 1, 2, 1, 1, 3, 2, 1, 0, 1, 2, 0, 3, 1, 1, 2, 2, 1, 3, 1, 2, 2, 1, 0, 3, 2, 1, 0, 2, 2, 0, 3, 3, 1, 3, 3, 2, 0, 0, 1, 3, 1, 1, 1, 2, 3, 2, 0, 2, 0, 0, 3, 3, 3, 3, 0, 0, 1, 0, 0, 1, 3, 3, 0, 2, 0, 0, 2, 3, 1, 2, 2, 1, 3, 0, 0, 2, 3, 0, 0, 0, 3, 3, 2, 0, 3, 1, 2, 2, 0, 2, 0, 2, 3, 0, 1, 2, 1, 1, 1, 0, 3, 0, 0, 2, 1, 0, 1, 0, 0, 3, 3, 2, 1, 2, 1, 2, 0, 3, 1, 1, 3, 3, 1, 0, 2, 3, 1, 1, 2, 2, 2, 2, 3, 0, 3, 0, 0, 2, 3, 1, 1, 3, 2, 3, 0, 1, 0, 1, 0, 1, 0, 3, 0, 2, 0, 2, 0, 1, 0, 3, 3, 3, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 2, 2, 0, 1, 3, 1, 2, 0, 0, 3, 3, 3, 0, 1, 1, 3, 0, 3, 2, 2, 1, 2, 2, 1, 3, 0, 0, 3, 3, 3, 1, 0, 2, 2, 0, 3, 2, 2, 1, 1, 0, 2, 0, 2, 3, 3, 1, 3, 1, 0, 0, 2, 2, 2, 1, 2, 1, 3, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0, 2, 3, 3, 2, 3, 2, 1, 2, 2, 1, 2, 1, 0, 0, 3, 3, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 0, 1, 0, 2, 3, 1, 1, 2, 2, 3, 0, 2, 3, 1, 0, 3, 1, 0, 3, 3, 2, 2, 2, 0, 3, 0, 0, 3, 1, 0, 3, 1, 1, 0, 3, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 1, 1, 3, 1, 3, 3, 2, 0, 0, 3, 2, 2, 0, 0, 0, 2, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [2, 0, 0, 0, 2, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 0, 1, 0, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 2, 0, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 2, 2, 1, 1, 2, 0, 2, 2, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 1, 1, 2, 1, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 2, 1, 2, 1, 0, 0, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 2, 2, 1, 0, 1, 1, 0, 1, 2, 2, 1, 1, 2, 1, 2, 0, 2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 2, 1, 0, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 0, 2, 2, 1, 1, 0, 0], [2, 2, 2, 1, 1, 0, 0, 1, 2, 0, 1, 2, 0, 0, 0, 2, 1, 2, 1, 0, 0, 2, 0, 1, 2, 0, 1, 0, 1, 1, 1, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 0, 0, 1, 0, 0, 1, 0, 2, 2, 2, 0, 0, 2, 0, 1, 2, 0, 1, 2, 0, 0, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 1, 2, 1, 2, 0, 0, 1, 0, 0, 2, 2, 1, 1, 1, 0, 2, 1, 2, 2, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 175, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif res0 \\ge abs(res0):{:\\nif b0:{:\\nb1 = int(6.0) \\g int(1.0)\\n:}\\nb2 = not min(int(2.0), int(3.0)) != int(1.0)\\n:}else:{:\\nb2 = ( int(8.0) * min(i2, min(( abs(min(max(int(5.0), max(in2, ( mod(int(0.0),min(( int(0.0) * max(i1, min(divInt(int(1.0),int(6.0)), max(divInt(abs(( in2 * divInt(i0,mod(divInt(int(9.0),( int(0.0) - ( int(4.0) - mod(i0,in0) ) )),mod(abs(i0),( ( max(int(7.0), mod(int(9.0),int(5.0))) + min(max(in1, int(9.0)), min(abs(in1), abs(( max(divInt(min(min(min(( max(divInt(in0,int(8.0)), ( divInt(in1,int(2.0)) + i0 )) - int(0.0) ), min(min(min(( abs(res0) * mod(int(8.0),res0) ), ( int(1.0) + int(8.0) )), in1), abs(min(( abs(int(1.0)) - ( int(2.0) * min(min(min(divInt(mod(i0,divInt(mod(divInt(int(9.0),i1),min(in0, int(8.0))),in0)),i0), i0), divInt(min(max(max(divInt(abs(in1),mod(int(8.0),( int(8.0) + int(2.0) ))), ( int(7.0) + int(5.0) )), min(i0, max(abs(int(0.0)), in1))), ( ( divInt(( min(( i2 + divInt(i2,abs(mod(mod(min(in2, in1),( res0 * mod(divInt(int(5.0),mod(max(( min(divInt(min(divInt(int(3.0),min(( ( i2 - abs(int(8.0)) ) * ( max(res0, in2) - int(7.0) ) ), int(9.0))), int(7.0)),min(divInt(in2,i1), min(in1, ( ( i2 + res0 ) + divInt(int(3.0),int(1.0)) )))), abs(abs(max(i1, int(5.0))))) * ( mod(int(9.0),max(res0, abs(i0))) + mod(int(3.0),i2) ) ), int(8.0)),divInt(i0,min(int(1.0), int(6.0))))),in1) )),int(8.0)))) ), in2) - divInt(divInt(( abs(int(6.0)) * int(6.0) ),( in0 + abs(res0) )),res0) ),min(int(3.0), divInt(( int(7.0) - max(i2, ( in2 + min(int(7.0), divInt(( in0 - ( max(min(max(( mod(i1,max(int(9.0), divInt(abs(abs(int(7.0))),in0))) - max(max(max(( max(( ( divInt(max(res0, mod(( ( max(int(6.0), ( ( mod(max(mod(abs(int(3.0)),abs(int(3.0))), int(5.0)),in2) - i1 ) * int(0.0) )) + int(1.0) ) + abs(min(mod(max(mod(( i0 + int(9.0) ),in2), ( max(( abs(min(abs(abs(res0)), i2)) * ( int(2.0) + abs(divInt(int(6.0),( int(2.0) + ( divInt(int(0.0),in0) + in1 ) ))) ) ), int(8.0)) * divInt(( min(int(7.0), int(3.0)) + ( divInt(in0,i1) * ( min(i2, int(2.0)) + ( in0 * int(5.0) ) ) ) ),abs(int(7.0))) )),( int(7.0) * min(min(in1, int(4.0)), mod(( i0 - int(5.0) ),int(7.0))) )), in2)) ),int(7.0))),abs(int(1.0))) + int(3.0) ) + mod(abs(mod(in1,abs(min(( divInt(int(5.0),max(max(( abs(mod(i0,i0)) - i1 ), max(i2, abs(int(1.0)))), int(4.0))) + ( max(max(int(5.0), res0), mod(int(7.0),divInt(int(3.0),int(7.0)))) + max(( int(6.0) - in2 ), int(6.0)) ) ), divInt(i1,max(int(0.0), int(5.0))))))),divInt(( int(3.0) + min(int(0.0), ( divInt(int(6.0),res0) * max(( int(7.0) * in1 ), divInt(( in0 * min(max(int(5.0), max(abs(( i2 + i2 )), int(9.0))), max(int(5.0), int(3.0))) ),int(1.0))) )) ),mod(abs(( in2 + ( in0 * in1 ) )),max(max(abs(min(res0, i1)), int(0.0)), i2)))) ), in1) + int(2.0) ), abs(max(i1, divInt(in1,res0)))), mod(abs(int(9.0)),( mod(int(2.0),max(in2, i2)) - divInt(min(in0, in0),in2) ))), min(min(( in2 * abs(int(4.0)) ), ( ( in0 + mod(res0,( min(in2, int(1.0)) - mod(int(3.0),int(1.0)) )) ) * int(4.0) )), i2)) ), max(i1, in2)), ( int(5.0) + i0 )), int(6.0)) + in0 ) ),in1)) )) ),min(abs(( int(7.0) * mod(int(2.0),( in2 * min(int(7.0), int(3.0)) )) )), max(min(int(0.0), i0), ( min(int(3.0), int(2.0)) - mod(( ( ( max(in0, abs(i1)) + i2 ) - ( abs(int(1.0)) + int(4.0) ) ) + max(( min(in0, int(4.0)) + in0 ), int(9.0)) ),i2) )))))) + int(2.0) ) + in2 )),max(in1, divInt(i2,divInt(in0,int(8.0)))))), i1) ) ), max(min(max(int(5.0), i2), ( in1 + res0 )), int(2.0)))))), i0), int(7.0)),int(5.0)), int(7.0)) + divInt(( i2 * int(1.0) ),abs(int(0.0))) )))) ) * divInt(res0,in2) )))) )),abs(max(max(i2, int(7.0)), int(7.0)))), abs(i2)))) ), max(( ( int(8.0) * ( ( int(4.0) + abs(i0) ) * i2 ) ) - min(abs(min(int(2.0), i0)), divInt(( i1 * abs(( divInt(int(1.0),int(7.0)) - in0 )) ),divInt(in2,divInt(max(abs(int(1.0)), abs(int(6.0))),res0)))) ), res0))) * ( ( mod(int(8.0),( int(0.0) + max(i2, ( max(abs(min(abs(abs(abs(max(min(divInt(int(5.0),i0), mod(max(min(divInt(min(divInt(int(7.0),( ( int(4.0) + ( int(2.0) - i2 ) ) + res0 )), abs(min(in0, ( abs(divInt(int(0.0),abs(max(mod(int(8.0),res0), in0)))) + int(4.0) )))),i0), divInt(abs(int(1.0)),int(9.0))), mod(( abs(i1) * ( abs(int(2.0)) * res0 ) ),max(int(1.0), i0))),max(max(( ( mod(i0,abs(in0)) - in0 ) - abs(int(2.0)) ), in0), min(int(1.0), int(8.0))))), i1)))), abs(( i0 - abs(i0) )))), i0) + in0 )) )) * ( i2 - mod(in2,int(8.0)) ) ) * int(4.0) ) ))), max(int(4.0), max(min(( in2 * res0 ), min(( ( i2 + i0 ) - i0 ), ( in0 - int(8.0) ))), int(5.0))))) - int(3.0) ), int(7.0))) ) \\l in1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 163, 163, 4, 4, 0, 6, 4, 2, 0, 2, 168, 0, 718, 197, 190, 107, 90]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 2, 2, 7, 4, 4, 9, 9, 4, 3], [1, 2, 5, 3], [2, 1], [1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0], [3, 3, 3, 3, 0], [], [], [2, 1, 5, 4, 3, 3, 2, 6, 4, 6, 5, 0, 1, 1], [], [1, 0, 3, 2, 3, 3, 3, 1, 0, 0, 0, 2, 3, 3, 0, 2, 2, 3, 0, 0, 3, 2, 0, 2, 0, 1, 2, 0, 1, 3, 1, 0, 0, 2, 1, 3, 1, 1, 1, 1, 3, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2], [0, 2, 2, 1, 1], [0, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( ( int(4.0) \\g i2 or min(( min(abs(max(int(2.0), i1)), in2) + in1 ), divInt(min(min(in0, ( mod(max(in0, i2),max(( res0 * ( in1 * int(2.0) ) ), ( res0 - int(2.0) ))) - min(int(7.0), in2) )), i0),divInt(int(4.0),min(int(4.0), int(9.0))))) == int(9.0) ) or int(4.0) != abs(int(3.0)) ) and ( b1 and i1 \\ge i1 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 11, 11, 4, 2, 4, 9, 4, 5, 0, 0, 14, 0, 44, 8, 11, 5, 3]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1, 1, 1, 1, 1], [8, 9, 8, 3, 1, 3], [], [], [], [], [], [], [], [], [3, 0, 1, 0, 6, 0, 0], [0, 1], [3, 2, 0, 3, 2, 3, 0, 1, 2, 0, 2, 2, 0, 3, 2, 1, 1, 3, 1, 3, 2, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0], [1, 2, 2, 2, 2, 1], [2, 2, 0, 1, 1], [0, 0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = max(( i0 * abs(( abs(i1) * int(8.0) )) ), divInt(i0,divInt(mod(res0,abs(( int(9.0) + int(8.0) ))),abs(int(3.0)))))\\ni0 -= max(( int(1.0) - i0 ), int(3.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 24, 7, 6, 5, 3]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1], [0, 0, 2, 1, 2, 1, 0], [0, 1], [0, 1, 0, 0, 0], [1, 1, 1, 1], [9, 1, 4, 6], [4, 5, 3], [0, 1, 1, 2, 0, 1], [], [1, 0, 0, 1, 0, 1], [0, 0, 0], [1, 0, 0], [0], [1], [4, 2, 4, 6, 6, 5, 3, 0], [0], [3, 0, 1, 1, 0, 3, 0, 1, 1, 0, 2, 2, 0, 0, 0], [0, 0], [0, 0], [2, 0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(in1, int(9.0)) \\le int(1.0)\\ni2 = in1\\nif True:{:\\nb1 = b1\\n:}else:{:\\nloopBreak% = 0\\nwhile min(res0, int(4.0)) != int(6.0):{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = res0 \\ge ( ( in2 * in0 ) + i0 )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 4, 4, 3, 6, 0, 6, 3, 3, 1, 1, 8, 1, 15, 2, 2, 2, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 1, 2, 1, 2, 1, 1, 0, 1], [0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 7, 3, 1, 3, 8, 9, 6, 4, 2, 8, 2, 6, 2, 9, 0, 3], [5, 1, 4, 4, 0], [0, 0, 2, 1, 2, 1, 0], [], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [1, 2, 0, 2, 0], [0], [0, 1, 1], [2, 1, 0, 2, 2, 2, 2, 3, 3, 0, 6, 5, 1, 0, 1, 0, 4, 0, 5, 1, 1, 5, 4, 2, 2, 6, 3, 0, 6, 2, 3], [0, 0], [0, 1, 0, 3, 0, 0, 0, 0, 3, 3, 2, 1, 2, 3, 1, 2, 1, 3, 2, 2, 3, 2, 2, 0, 1, 1, 3, 3, 2, 3, 0, 3, 3, 1, 1, 2, 0, 0, 1, 3, 0, 0, 2, 1, 0, 1, 2, 3, 0, 1, 3, 1, 0, 2, 0, 0, 0, 0, 3, 2, 2, 2, 2, 1, 0, 3, 0, 2, 3, 1, 3, 0, 1, 1, 0, 2, 2, 3, 0, 2, 0, 0, 3, 0, 3, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [2, 2, 0, 1, 1, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 0, 2], [0, 1, 1, 2, 2, 0, 1, 1, 2, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = i1\\nif True:{:\\ni0 = int(1.0)\\nif i2 != abs(i2):{:\\nb0 = i2 \\g i2\\n:}else:{:\\nif not in0 \\le abs(min(divInt(int(4.0),mod(max(int(7.0), ( int(3.0) + max(( ( min(mod(mod(in0,int(1.0)),int(3.0)), max(abs(( min(i0, min(min(int(8.0), int(9.0)), ( res0 - in2 ))) - int(6.0) )), abs(i1))) * i0 ) * ( int(4.0) + i1 ) ), int(2.0)) )),( min(i0, int(8.0)) - min(int(2.0), in1) ))), divInt(i0,in2))):{:\\nb0 = b2\\n:}else:{:\\nb1 = i1 \\le i1\\n:}\\n:}\\nb2 = not b1\\nb0 = min(( ( divInt(divInt(int(6.0),in2),min(in1, mod(max(int(2.0), abs(i2)),int(9.0)))) - int(0.0) ) * i2 ), ( divInt(min(res0, ( in0 - i0 )),min(res0, abs(int(3.0)))) - i2 )) \\l in0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 18, 18, 5, 7, 0, 10, 5, 5, 1, 3, 31, 2, 88, 20, 21, 11, 9]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1], [2, 5, 2], [1], [2], [], [1, 0], [0], [1], [0], [], [5, 1, 2], [], [2, 0, 0, 3, 1, 3, 3, 2, 1, 0, 1], [1, 0], [0, 2, 0], [0], [1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(in2,i1) \\g min(int(2.0), abs(min(( int(5.0) + i2 ), int(2.0)))):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 1, 1, 0, 2, 1, 1, 1, 0, 3, 0, 11, 2, 3, 1, 1]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 0, 2, 1], [1, 1, 0], [0, 0], [1, 1, 1, 1, 1, 1, 1], [2, 0, 3, 9, 2, 7, 8], [5, 1, 5, 3], [0, 2], [], [1, 1, 0, 1, 1], [0, 0, 0, 0], [1], [0], [0], [6, 0, 2, 3, 5, 1, 4, 6], [], [3, 3, 2, 3, 1, 1, 2, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 1, 3, 0, 0, 3, 0, 2, 1, 1], [1, 0, 1, 0], [0, 2, 2, 0, 0, 2, 2], [0, 0], [1, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(abs(mod(abs(int(2.0)),int(0.0))), ( int(3.0) + int(9.0) )) != res0:{:\\nloopBreak% = 0\\nwhile i0 \\g min(i2, mod(in0,in2)):{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(int(2.0), abs(i1)) != in1:{:\\nb2 = abs(res0) \\ge ( int(7.0) + int(8.0) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 7, 7, 4, 2, 0, 5, 4, 1, 1, 1, 8, 0, 26, 4, 7, 2, 2]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1], [8], [], [1], [], [0], [], [0], [], [], [4], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nin1 *= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1], [9, 3, 5], [5], [2], [], [1], [0], [], [], [], [5, 2, 0, 6, 5, 6, 5], [1], [3, 0, 3, 2, 1, 3, 2, 0, 1, 1, 2, 0, 0, 3, 0, 0], [0, 0, 1], [1, 1, 0, 2], [0, 2, 0], [1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += max(i2, max(( int(9.0) * min(( i0 + int(3.0) ), int(5.0)) ), mod(res0,in2)))\\nb2 = abs(res0) != in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 7, 1, 16, 3, 4, 3, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 2, 0, 1, 2, 1, 2, 0], [1, 1, 0, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 0, 4, 3, 3, 3, 8], [1, 0, 3], [0, 1, 2], [], [1, 0, 1, 0, 1, 0], [0, 0, 0], [2, 0, 0], [], [1], [5, 2, 0, 6, 5, 2, 6, 5, 6, 6, 6, 3, 5, 5, 4, 3], [0, 1, 1, 0], [0, 2, 0, 1, 0, 1, 2, 0, 0, 3, 1, 1, 0, 0, 1, 2, 3, 3, 0, 0, 2, 2, 2, 3, 1, 1, 0, 0, 3, 3, 1, 0], [1, 1, 1, 0, 0, 1], [0, 1, 1, 2, 2, 1], [0, 0, 0, 1], [1, 0, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i2\\nloopBreak% = 0\\nwhile mod(i0,int(3.0)) \\g res0:{:\\nloopBreak% = 0\\nwhile not int(3.0) \\l divInt(in2,i2):{:\\nres0 += min(int(0.0), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += res0\\nif b0:{:\\nb1 = res0 \\ge int(3.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = divInt(max(max(in0, in2), ( ( mod(abs(int(3.0)),int(3.0)) + in2 ) - in1 )),abs(max(int(8.0), in0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 8, 8, 3, 3, 0, 6, 3, 3, 0, 1, 16, 4, 32, 6, 6, 4, 4]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1], [8], [4], [], [], [1], [0], [], [], [], [2, 5, 2, 5, 0], [1], [3, 0, 0, 0, 2, 0, 1], [0], [1], [2, 2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(i2, in2) \\le i2:{:\\nin2 *= ( i0 * int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 5, 1, 7, 1, 1, 2, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [4, 3, 5], [], [], [], [], [], [], [], [], [5, 2, 6], [1], [3, 3, 2, 0, 2, 1, 2, 0, 3, 1, 1], [1, 0, 0], [2, 2, 1], [2, 2, 0], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= abs(abs(divInt(i2,( int(4.0) * ( res0 + max(int(3.0), int(5.0)) ) ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 11, 3, 3, 3, 1]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 0, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1], [0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 0, 6, 9, 1, 9, 1, 4, 4, 5, 4, 1, 8, 9, 8, 9, 2, 8, 1, 2, 8, 7, 7, 8, 5, 0, 9, 8, 1, 7, 4, 3, 0, 6, 9, 1, 1, 0, 5, 4], [3, 0, 3, 0, 5, 3, 0, 4], [1, 0, 1, 0, 1, 0, 0], [1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 1, 0, 0, 2, 3, 3, 2, 0], [0], [1, 1, 0, 0, 0, 0], [1, 3, 2, 3, 6, 2, 0, 1, 3, 4, 4, 3, 6, 4, 1, 2, 1, 3, 2, 6, 3, 0, 4, 4, 1, 0, 5, 3, 0, 3, 4, 6, 1, 2, 1, 3, 1, 2, 5, 6, 1, 1, 0, 3, 3, 4, 3], [1, 0, 1, 0], [0, 3, 1, 1, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 0, 3, 3, 1, 2, 0, 3, 2, 1, 2, 0, 0, 1, 1, 2, 0, 2, 3, 0, 3, 0, 0, 2, 0, 1, 2, 1, 2, 2, 3, 2, 3, 1, 1, 1, 0, 2, 1, 3, 3, 3, 0, 1, 0, 2, 3, 3, 2, 2, 2, 0, 0, 0, 0, 3, 0, 3, 2, 3, 0, 3, 2, 3, 1, 2, 3, 3, 3, 0, 0, 2, 1, 0, 1, 1, 2, 2, 0, 2, 3, 2, 1, 3, 2, 0, 1, 3, 0, 3, 2, 1, 0, 2, 3, 1, 0, 3, 0, 0, 1, 1, 0, 3, 0, 3, 1, 0, 0, 1, 2, 1, 2, 3, 2, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 3, 2, 1, 3, 0, 3, 0, 1, 0, 1, 2, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0], [2, 0, 1, 2, 2, 0, 1, 1, 0, 1, 0, 2, 0, 0, 0, 1, 2, 0, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 0, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 0], [2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 2, 2, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nif i1 \\ge abs(int(4.0)):{:\\nb0 = int(8.0) \\l min(max(in0, abs(abs(int(0.0)))), min(mod(max(max(i2, in0), min(max(int(6.0), ( res0 * min(mod(int(9.0),mod(i2,i0)), int(1.0)) )), int(9.0))),mod(i1,divInt(abs(in0),min(in1, in1)))), divInt(in0,int(1.0))))\\n:}else:{:\\nres0 *= mod(int(4.0),mod(( min(divInt(min(int(4.0), int(5.0)),int(4.0)), in1) - ( int(1.0) - max(abs(min(i1, int(8.0))), i2) ) ),mod(min(max(mod(mod(( i1 + in0 ),i2),res0), min(in0, max(( max(i0, min(mod(max(int(9.0), ( min(abs(max(in1, in1)), divInt(int(8.0),i1)) * int(9.0) )),int(2.0)), ( ( i0 + divInt(min(( int(8.0) - abs(( in2 + int(1.0) )) ), abs(in0)),abs(( int(2.0) * i0 ))) ) * mod(abs(int(8.0)),in0) ))) * max(in1, res0) ), int(7.0)))), int(7.0)),i1)))\\n:}\\nif not max(i2, max(int(8.0), i1)) \\ge in0:{:\\nif ( True or b1 ):{:\\nb0 = b1\\n:}\\n:}\\nif not ( int(5.0) \\l ( int(0.0) + mod(max(( int(9.0) - mod(int(8.0),int(1.0)) ), divInt(mod(i1,divInt(int(7.0),int(4.0))),abs(divInt(int(3.0),abs(i2))))),min(in2, int(0.0))) ) or res0 != int(6.0) ):{:\\ni1 = ( i1 + int(9.0) )\\n:}\\nloopBreak% = 0\\nwhile int(1.0) \\ge int(1.0):{:\\nb0 = int(0.0) \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif ( not int(5.0) \\le int(4.0) or b0 ):{:\\nin0 += in0\\n:}\\nin1 = in0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 7, 7, 41, 41, 8, 7, 3, 19, 8, 11, 1, 6, 47, 4, 160, 36, 40, 16, 22]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0], [1], [0, 0, 0, 0, 0], [], [3, 2, 1, 2, 1], [0, 0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not True or not True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 5, 0, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 0, 1, 0, 1], [0], [1, 1, 1, 0], [1, 1, 1, 1], [9, 7, 8, 6], [3], [0, 2], [], [1, 0, 0], [0], [2, 0], [], [1], [4, 3, 3, 3, 2, 4, 4], [1, 0, 1], [0, 0, 3, 2, 3, 0, 3, 1, 3, 1, 1, 3, 3, 2, 1, 0], [1, 0], [1, 2, 2, 2, 2, 2], [2, 0, 2], [0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in1 \\ge in0:{:\\nin0 *= max(divInt(abs(in0),abs(int(9.0))), abs(int(7.0)))\\n:}else:{:\\ni2 = int(8.0)\\nin1 += abs(abs(( int(6.0) * in1 )))\\n:}\\nb0 = not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 4, 4, 1, 2, 0, 3, 1, 2, 0, 1, 7, 3, 16, 2, 6, 3, 1]}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [0], [1, 0], [0, 1, 1, 1], [9, 5, 3, 8], [2], [2, 1], [], [0, 1], [0], [0], [], [0], [4, 5, 5, 5], [1], [1, 3, 2, 0, 0, 3, 3, 1, 1, 0], [0], [2, 0, 1], [0, 2], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += int(95.0)\\nif b2:{:\\nb1 = abs(( in2 * in2 )) == min(max(int(3.0), int(8.0)), in2)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 1, 2, 0, 2, 1, 1, 0, 1, 4, 1, 10, 1, 3, 2, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [4, 6], [0], [3, 0, 1], [], [1], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = max(res0, int(3.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 1, 0], [1, 1], [2, 1], [5], [0], [], [1], [0], [], [], [], [3, 4, 1, 4, 3, 6], [0, 1], [0, 0, 3, 0, 2, 1, 1, 0], [0], [1], [1, 1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = in1\\ni1 -= in1\\nb0 = max(in0, ( int(2.0) - int(1.0) )) != res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 6, 2, 8, 1, 1, 2, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 0, 0, 0, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 2, 9, 6, 9, 6, 4, 3, 7, 9, 5, 4, 8, 9, 9, 9, 0, 8, 1, 1, 9, 6, 3, 8, 8, 1, 3, 5, 4, 1, 4, 0, 9, 9, 5, 5, 8, 1, 6, 0, 6, 0, 4, 4, 4, 3, 4, 1, 0, 6, 8, 3, 2, 1, 1, 7, 4, 2], [4, 2, 3, 2, 3, 5, 0, 0], [1, 0, 1, 0, 0, 2], [], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0], [0], [0, 1, 1], [3, 0, 0, 0, 5, 5, 6, 5, 1, 1, 5, 4, 1, 5, 1, 5, 0, 0, 1, 4, 5, 4, 0, 1, 2, 4, 1, 1, 2, 0, 6, 5, 0, 3, 3, 2, 2, 2, 3, 1, 3, 4, 3, 4, 2, 4], [0, 1, 0, 1, 1], [3, 3, 1, 3, 1, 3, 2, 1, 0, 1, 0, 2, 2, 3, 0, 0, 0, 1, 0, 0, 1, 1, 2, 3, 1, 3, 2, 3, 3, 2, 1, 3, 1, 2, 3, 2, 3, 1, 1, 2, 0, 0, 3, 1, 3, 0, 0, 1, 0, 1, 3, 2, 3, 1, 1, 3, 1, 1, 2, 1, 0, 0, 1, 3, 0, 3, 3, 3, 3, 0, 2, 0, 1, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 3, 0, 3, 1, 0, 0, 1, 3, 3, 0, 3, 1, 3, 3, 3, 1, 0, 3, 3, 0, 1, 3, 1, 1, 0, 3, 1, 0, 2, 3, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 1, 3, 0, 2, 2, 2, 0, 1, 3, 3, 0, 3, 1, 1, 3, 3, 1, 0, 2, 3, 1, 0, 3, 2, 1, 2, 0, 2, 0, 3, 1, 3, 1, 3, 1, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 3, 2, 3, 1, 1, 1, 0, 3, 3, 0, 3, 2, 0, 0, 3, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 2, 2, 0, 0, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 2, 1, 2, 2, 2, 2, 1, 0, 1, 1, 2, 1, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1, 0, 2, 2, 2, 1], [2, 0, 1, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 2, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(max(int(4.0), min(int(6.0), abs(mod(int(2.0),in0)))), int(9.0)) \\le i0:{:\\nloopBreak% = 0\\nwhile mod(( min(i0, i0) * in2 ),int(6.0)) == in2:{:\\nres0 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not True\\n:}\\ni1 += int(96.0)\\nif int(4.0) \\ge ( max(int(3.0), abs(( max(max(mod(int(7.0),min(int(9.0), ( min(( max(int(5.0), int(4.0)) - divInt(i1,in2) ), abs(int(8.0))) * min(in1, i1) ))), int(9.0)), in2) + int(9.0) ))) + max(( abs(int(9.0)) + int(0.0) ), max(int(8.0), int(1.0))) ):{:\\nb0 = divInt(int(1.0),i1) == in2\\nloopBreak% = 0\\nwhile int(9.0) \\ge max(i0, min(max(abs(abs(i0)), divInt(i1,int(6.0))), ( min(min(divInt(( min(mod(max(divInt(divInt(divInt(int(3.0),abs(in1)),min(int(8.0), in2)),in1), int(8.0)),min(abs(i0), max(int(1.0), min(min(min(int(3.0), i1), abs(max(i2, int(5.0)))), abs(int(4.0)))))), int(1.0)) * in1 ),max(int(4.0), i1)), divInt(abs(i1),i2)), i0) * res0 ))):{:\\nin2 = ( divInt(int(0.0),int(9.0)) + abs(int(9.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= int(5.0)\\nb1 = abs(in0) != mod(( ( in0 + int(5.0) ) + abs(max(i2, min(int(8.0), int(1.0)))) ),max(max(int(6.0), i2), divInt(abs(int(0.0)),i2)))\\n:}else:{:\\nif max(mod(int(6.0),( in0 + divInt(i1,abs(int(0.0))) )), min(int(4.0), max(int(4.0), max(int(4.0), int(3.0))))) \\l int(4.0):{:\\nin0 -= min(abs(min(max(min(max(int(1.0), int(0.0)), int(6.0)), int(8.0)), int(3.0))), mod(mod(int(2.0),int(1.0)),( max(mod(min(int(1.0), int(7.0)),int(4.0)), in1) * abs(abs(in0)) )))\\n:}else:{:\\nb0 = b0\\n:}\\nb2 = abs(( in1 + i2 )) \\l max(int(2.0), in1)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 5, 10, 59, 59, 8, 6, 0, 11, 8, 3, 1, 3, 46, 5, 197, 34, 64, 17, 20]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [1, 5, 0, 1], [1, 0], [0, 0], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= in2\\ni0 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [1, 1], [1, 1, 1], [7, 4, 2], [], [2, 0], [1], [0, 0, 0, 0], [], [2, 3, 0, 0], [], [], [4, 5, 0], [1, 1], [3, 1, 1, 3, 0, 1], [], [1, 0], [0, 0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not ( b2 or b0 ):{:\\nin1 += max(int(7.0), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += min(i0, int(2.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 0, 2, 1, 4, 0, 4, 0, 0, 3, 2, 6, 0, 2, 2, 0]}, {"genotype": [[0], [0, 0, 1, 1], [1, 1, 2, 0], [1], [1, 0, 1], [1, 1, 1, 1, 1], [3, 3, 7, 1, 5], [0], [2, 2], [], [1, 0], [0], [0], [], [], [5, 6, 3, 3, 6, 1, 2, 6, 1, 0, 4, 6], [0, 0], [0, 2, 0, 3, 1, 3, 3, 0, 1, 0, 3, 3, 3, 1, 1, 2, 0, 2, 0, 3, 2, 0, 3, 2, 3, 0, 1, 0, 0], [0, 0, 0, 0, 1], [2, 1, 0, 0, 0, 2, 2, 1, 0], [0, 1, 1, 0], [0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = res0\\nb2 = ( in0 + abs(int(3.0)) ) \\l max(min(in0, int(3.0)), res0)\\nloopBreak% = 0\\nwhile b2:{:\\ni1 = min(min(abs(int(7.0)), int(1.0)), ( i2 - ( res0 - abs(( i1 + max(divInt(min(i0, int(5.0)),in1), res0) )) ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 5, 5, 1, 2, 0, 2, 1, 1, 0, 0, 12, 2, 29, 5, 9, 4, 1]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1], [9, 1, 5, 4], [1], [2], [], [1], [0], [], [], [], [1, 0], [], [3, 1, 0, 3, 1, 3, 3, 3, 3, 1, 2, 1, 0], [1], [1, 0, 0, 2, 2, 2], [], [0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(int(9.0), i1) \\g min(int(1.0), min(abs(abs(abs(int(5.0)))), divInt(int(4.0),i0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 13, 1, 6, 0, 1]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1], [4], [3], [2, 0], [], [1, 0], [0], [1], [0], [], [3], [], [0, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in0 \\ge abs(int(4.0))\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 0, 0], [1, 1], [6, 4], [0], [1, 0], [], [0, 1, 0, 0], [0], [2, 2, 1], [0], [], [1, 2], [1], [0, 1, 1], [], [], [1], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= i2\\nb1 = not int(6.0) \\l int(4.0)\\nb0 = not True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 1, 2, 0, 4, 1, 3, 1, 0, 2, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [8, 7], [], [], [], [], [], [], [], [], [1], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += int(87.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 2, 7, 4, 9, 9, 2, 8, 5, 9, 9, 9, 7, 2], [3], [1], [], [0, 1], [0], [2], [], [], [4, 5, 5, 4, 1, 3, 0, 6, 0, 4, 1], [], [2, 2, 3, 0, 0, 1, 1, 2, 2, 3, 2, 2, 2, 2, 0, 3, 1, 1, 0, 3, 2, 1, 3, 3, 1, 0, 2, 2, 0, 2, 2, 2, 3, 1, 0, 1, 2, 1, 2, 1, 1, 3, 0, 2, 3, 2, 1, 0, 1, 1, 1, 2, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [1, 2, 1, 1, 2, 1, 0, 0, 2], [1, 1, 0, 0, 1, 1, 1, 1, 2, 0, 2, 0, 2], [1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not ( mod(max(in1, in2),int(5.0)) - int(1.0) ) \\ge ( divInt(abs(( ( ( ( in2 - max(int(5.0), int(2.0)) ) + in1 ) + max(( int(7.0) - abs(max(int(4.0), i1)) ), ( ( in0 - divInt(( ( min(int(9.0), i0) - int(9.0) ) - ( int(2.0) * divInt(int(8.0),int(5.0)) ) ),min(res0, ( abs(divInt(int(9.0),i0)) + int(9.0) ))) ) * int(9.0) )) ) + int(7.0) )),divInt(in1,int(2.0))) * i1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 16, 16, 1, 1, 0, 2, 1, 1, 0, 0, 11, 0, 55, 19, 9, 13, 6]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 0, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 9, 5, 2, 3, 0, 1, 1, 3, 6, 3, 8, 2, 3, 4, 9, 8, 1, 9, 1, 4, 3, 7, 9, 0, 7, 7, 9, 9, 0, 2, 4, 3, 6, 9, 9, 1, 5, 9, 6, 5, 6, 6, 9, 5, 1, 8, 6, 5, 0, 5, 7, 4, 3, 9, 7, 5, 9, 2, 5, 5, 1, 9, 0, 8, 8, 2, 3, 8, 8, 1, 0, 8, 2, 5, 1, 3, 8, 1, 5, 8, 2, 5, 8, 9, 0, 5, 3, 4, 1, 8, 2, 7, 6, 6, 3, 2, 4, 4, 1, 5, 4, 0, 2, 2, 0, 4, 3, 0, 9, 4, 5, 8, 9, 9, 4, 2, 6, 9, 4, 8, 4, 4, 5, 9, 6, 2, 2, 6, 0, 4, 7, 7, 6, 9, 9, 3, 4, 6, 9, 2, 6], [2, 0, 0, 2, 5, 4, 2, 0, 0, 4, 2, 2, 0, 0], [1, 1, 2, 2, 0, 2, 0], [0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 3, 1, 3, 3, 1, 0, 3, 2], [0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 4, 3, 2, 6, 6, 4, 0, 5, 1, 0, 4, 2, 6, 0, 4, 0, 0, 0, 5, 0, 1, 2, 0, 1, 4, 0, 6, 0, 5, 2, 2, 6, 2, 6, 6, 2, 0, 3, 1, 6, 5, 6, 3, 5, 1, 3, 6, 5, 5, 4, 5, 3, 5, 6, 1, 4, 6, 2, 6, 0, 4, 0, 1, 4, 3, 4, 2, 0, 5, 1, 6, 0, 1, 6, 6, 1, 3, 4, 1, 0, 3, 4, 1, 2, 4, 0, 3, 2, 4, 2, 5, 0, 0, 4, 1, 4, 4, 4, 1, 0, 1, 6, 0, 4, 5], [1, 0, 0, 1, 0], [0, 1, 1, 3, 2, 1, 3, 1, 0, 0, 0, 1, 1, 0, 2, 3, 0, 0, 2, 1, 2, 3, 2, 3, 2, 0, 2, 3, 2, 3, 0, 0, 0, 0, 2, 3, 3, 1, 1, 3, 0, 2, 1, 1, 1, 0, 3, 1, 2, 3, 1, 3, 1, 2, 2, 0, 0, 3, 2, 0, 2, 0, 3, 0, 2, 3, 1, 2, 3, 2, 2, 0, 0, 2, 2, 2, 3, 3, 2, 3, 0, 2, 3, 0, 0, 0, 1, 1, 3, 3, 2, 2, 1, 3, 3, 3, 2, 3, 2, 2, 3, 1, 2, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 2, 3, 0, 0, 3, 2, 3, 1, 3, 3, 1, 0, 0, 3, 3, 1, 0, 1, 3, 1, 1, 3, 1, 1, 2, 0, 2, 3, 1, 2, 1, 2, 1, 1, 3, 0, 2, 0, 1, 0, 1, 3, 2, 0, 0, 0, 3, 0, 3, 1, 1, 2, 1, 3, 1, 2, 0, 3, 2, 3, 2, 1, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 3, 2, 1, 2, 3, 2, 2, 0, 3, 1, 0, 1, 0, 3, 2, 1, 2, 2, 2, 3, 2, 0, 3, 1, 1, 0, 0, 1, 1, 1, 3, 1, 2, 0, 1, 2, 2, 2, 3, 2, 2, 2, 1, 2, 0, 0, 0, 3, 3, 2, 2, 0, 3, 0, 0, 2, 0, 1, 3, 1, 1, 2, 2, 2, 1, 3, 1, 3, 2, 1, 1, 2, 2, 3, 0, 3, 0, 2, 1, 3, 2, 0, 2, 2, 1, 0, 3, 2, 0, 3, 2, 1, 0, 0, 2, 3, 3, 0, 0, 1, 3, 1, 1, 0, 1, 3, 1, 3, 2, 2, 3, 2, 3, 0, 2, 0, 3, 2, 1, 0, 3, 0, 1, 3, 1, 1, 2, 1, 1, 1, 2, 3, 1, 2, 2, 2, 2, 1, 3, 1, 3, 0, 3, 2, 0, 1, 2, 3, 0, 0, 3, 2, 2, 2, 1, 2, 2, 2, 0, 2, 1, 3, 3, 3, 0, 1, 3, 1, 2, 3, 1, 3, 2, 1, 2, 2, 0, 1, 3, 2, 0, 2, 1, 3, 2, 1, 3, 2, 1, 2, 1, 0, 0, 2, 0, 2, 0, 1, 2, 3, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 0, 1, 3, 1, 2, 3, 2, 1, 0, 0, 1, 0, 2, 3, 3, 0, 1, 3, 3, 2, 1, 2, 1, 2, 1, 0, 3, 1, 1, 3, 1, 1, 3, 0, 2, 1, 0, 2, 2, 0, 2, 1, 1, 2, 2, 0, 1, 1, 0, 1, 2, 0, 3, 1, 2, 0, 3, 3, 0, 0, 3, 1, 3, 0, 3, 0, 1, 1, 1, 3, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 1, 2, 2, 1, 1, 2, 0, 2, 2, 1, 1, 2, 0, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 2, 2, 1, 0, 0, 0, 1, 1, 0, 2, 1, 2, 2, 0, 1, 1, 1, 2, 0, 2, 2, 0, 2, 1, 0, 2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 0, 2, 1, 0, 1, 0, 0], [2, 2, 0, 0, 1, 1, 2, 1, 2, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 2, 2, 0, 1, 2, 1, 1, 1, 2, 0, 1, 2, 2, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 2, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 97, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not i2 == int(6.0)\\nif int(5.0) \\l min(mod(int(9.0),min(int(5.0), in1)), in0):{:\\nif True:{:\\nif b1:{:\\nb2 = ( i2 \\l int(2.0) and False )\\n:}else:{:\\nres0 *= int(3.0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( res0 == ( abs(in1) * i0 ) or divInt(int(0.0),( abs(( min(( in2 + ( min(( min(i1, i0) + in1 ), i2) - mod(min(max(int(1.0), int(1.0)), abs(res0)),divInt(int(3.0),int(6.0))) ) ), int(3.0)) - i0 )) * max(int(8.0), ( max(int(2.0), min(int(3.0), mod(mod(in1,i0),min(( i0 - divInt(i0,min(in2, ( min(int(4.0), ( min(( ( i0 * i1 ) + divInt(divInt(mod(min(min(( min(i2, ( max(i0, i1) * in1 )) * int(9.0) ), int(8.0)), abs(abs(mod(divInt(int(1.0),abs(abs(abs(( max(( ( min(int(9.0), divInt(max(( ( ( ( int(1.0) - int(4.0) ) * int(3.0) ) + int(7.0) ) + int(9.0) ), int(0.0)),int(7.0))) + divInt(max(int(7.0), int(9.0)),int(9.0)) ) * int(0.0) ), ( abs(i0) - res0 )) * abs(divInt(max(int(2.0), max(min(int(4.0), i0), in2)),min(max(int(3.0), i2), int(6.0)))) ))))),min(int(9.0), int(9.0)))))),max(int(1.0), int(5.0))),divInt(i2,( abs(int(9.0)) + ( int(6.0) - mod(int(5.0),int(6.0)) ) ))),max(res0, divInt(i2,int(6.0)))) ), res0) * int(9.0) )) + min(mod(res0,i2), i0) ))) ), abs(in0))))) + min(int(5.0), int(1.0)) )) )) != mod(int(8.0),min(int(6.0), divInt(i1,abs(mod(max(( int(5.0) - abs(max(( min(int(0.0), max(( int(5.0) * divInt(max(int(7.0), ( ( abs(divInt(abs(int(4.0)),max(int(3.0), int(9.0)))) + max(( int(7.0) + divInt(abs(( ( res0 - min(int(5.0), in2) ) - int(9.0) )),res0) ), abs(( int(2.0) - mod(mod(( abs(mod(in0,max(int(5.0), int(5.0)))) - in2 ),i1),int(1.0)) ))) ) - int(9.0) )),int(0.0)) ), max(int(8.0), mod(in0,int(8.0))))) * ( divInt(( abs(mod(mod(( int(2.0) - divInt(res0,in2) ),in2),min(min(mod(( in1 + abs(in2) ),in0), mod(in2,int(3.0))), max(int(8.0), int(8.0))))) - ( ( mod(int(1.0),abs(int(0.0))) * abs(mod(int(8.0),int(2.0))) ) * mod(( max(res0, min(i1, ( int(5.0) + abs(mod(in1,divInt(mod(int(1.0),res0),max(( i2 - max(divInt(int(3.0),res0), i0) ), ( max(abs(in1), i0) * int(8.0) ))))) ))) - abs(int(1.0)) ),int(5.0)) ) ),i1) - int(8.0) ) ), max(int(2.0), min(mod(mod(min(( min(in1, mod(in0,max(( int(5.0) - in1 ), max(i2, int(8.0))))) * min(int(9.0), int(0.0)) ), ( int(5.0) + int(3.0) )),int(4.0)),( abs(int(1.0)) - ( ( ( ( int(8.0) * max(int(2.0), abs(i0)) ) * abs(( in2 - int(7.0) )) ) + mod(min(i1, res0),max(mod(divInt(mod(int(6.0),divInt(divInt(divInt(i0,mod(int(6.0),max(max(abs(i1), int(3.0)), min(int(2.0), ( abs(int(4.0)) * abs(( int(4.0) - ( ( res0 + int(1.0) ) + min(( res0 - divInt(int(5.0),abs(( int(4.0) - max(mod(int(0.0),( int(2.0) + i1 )), in0) ))) ), divInt(in1,mod(i1,int(2.0)))) ) )) ))))),mod(min(int(0.0), i0),int(4.0))),in0)),in1),i1), i2)) ) + int(3.0) ) )), int(0.0))))) ), int(9.0)),abs(int(4.0))))))) ):{:\\nif ( ( int(5.0) * int(8.0) ) \\le divInt(int(9.0),int(9.0)) and True ):{:\\nif int(4.0) == in1:{:\\nif int(2.0) \\l abs(int(6.0)):{:\\ni0 = divInt(max(mod(int(9.0),in0), i2),int(4.0))\\n:}else:{:\\nif in1 \\l divInt(min(abs(i2), int(8.0)),abs(max(( int(4.0) * ( int(4.0) - mod(int(5.0),in2) ) ), abs(int(9.0))))):{:\\nb2 = int(6.0) \\le min(int(2.0), int(2.0))\\n:}else:{:\\nif b0:{:\\ni0 = abs(i0)\\n:}else:{:\\nin1 -= mod(int(6.0),i1)\\n:}\\n:}\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = ( ( in1 - mod(int(0.0),int(4.0)) ) - mod(( in1 - int(7.0) ),int(7.0)) ) == in1\\n:}\\nif ( int(6.0) == ( i1 * min(int(9.0), ( i0 + abs(max(i1, res0)) )) ) or min(int(9.0), max(i0, min(in1, int(3.0)))) \\l int(4.0) ):{:\\nin2 = int(6.0)\\n:}else:{:\\nb0 = not min(int(9.0), int(2.0)) \\l int(6.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 10, 10, 143, 143, 14, 7, 4, 25, 14, 11, 3, 9, 106, 5, 495, 134, 117, 70, 66]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [], [], [], [2], [], [0, 0, 0], [], [1, 2, 1], [1, 1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb2 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 1, 0, 3, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [3, 0], [], [2], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(i1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [1], [], [], [], [], [], [], [], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 0, 2, 0], [1, 1, 0, 0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 4, 2, 9, 4, 8, 1, 9, 2, 1, 8, 6, 3, 6, 2, 0, 6, 9, 8, 3, 2, 3, 2, 5], [5, 3, 2, 0, 5], [2, 1, 2], [], [1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [2, 2, 0], [], [1, 0], [5, 0, 4, 0, 0, 2, 3, 5, 3, 4, 6, 4, 2, 3, 0, 6, 0, 2, 3, 5, 5, 0, 3, 1, 0, 5, 0, 6, 2], [1], [1, 3, 3, 0, 3, 0, 2, 2, 0, 2, 1, 0, 2, 1, 0, 2, 0, 3, 3, 1, 2, 2, 3, 2, 2, 3, 2, 3, 1, 1, 3, 2, 3, 3, 2, 2, 0, 0, 1, 2, 2, 1, 0, 0, 1, 3, 0, 3, 3, 0, 1, 1, 1, 2, 3, 1, 2, 0, 3, 3, 2, 2, 0, 0, 3, 3, 0, 3, 2, 1, 3, 1, 2, 3, 1, 0, 3, 2, 2, 1, 0, 0, 1, 3, 0, 1, 1, 1, 2, 0, 3, 0, 2, 0, 3, 2, 3, 1, 0, 2, 0, 0, 1, 3, 2, 2, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 0, 2, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 2, 1, 2, 0, 2, 0, 0, 2, 0, 2, 1, 2, 1], [0, 2, 1, 0, 2, 2, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 0, 2], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(8.0) != min(abs(in2), abs(i0)):{:\\nloopBreak% = 0\\nwhile ( ( in1 + ( int(5.0) * i0 ) ) - mod(int(4.0),i0) ) \\ge mod(i2,min(abs(int(2.0)), divInt(( max(( ( abs(( max(int(9.0), int(4.0)) + abs(( abs(min(divInt(( in0 * in2 ),int(8.0)), ( ( int(1.0) * in0 ) - in1 ))) - int(9.0) )) )) + abs(res0) ) + abs(max(in1, int(2.0))) ), int(1.0)) - int(8.0) ),( abs(int(6.0)) * divInt(i2,abs(max(mod(( in0 * i0 ),abs(min(res0, abs(( int(3.0) * min(int(6.0), ( min(int(2.0), i0) * abs(mod(mod(int(0.0),i2),in0)) )) ))))), int(6.0)))) )))):{:\\nb2 = min(in2, int(9.0)) == int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(3.0) \\l divInt(in2,abs(i0)):{:\\nb1 = not not b2\\n:}else:{:\\nif ( in0 * max(( abs(int(2.0)) * i1 ), divInt(i0,in2)) ) != int(3.0):{:\\ni0 += max(( mod(int(2.0),res0) * int(5.0) ), i2)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 25, 25, 5, 3, 0, 8, 5, 3, 0, 2, 29, 1, 110, 29, 28, 19, 11]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 7, 3, 0, 7, 4, 7, 2, 8, 9], [2, 4], [2], [], [1, 1], [0, 0], [], [], [], [3, 6, 2, 2, 2, 1, 5, 6, 5, 2, 0, 0, 1], [1], [3, 2, 0, 1, 1, 2, 0, 3, 0, 2, 1, 3, 3, 0, 2, 2, 2, 3, 1, 2, 0, 2, 3, 1, 0, 1, 2, 1, 2, 2, 0, 0, 3, 0, 1, 2, 3, 1, 3, 2, 0, 3, 1, 3, 1, 0, 3, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [1, 2, 2, 2, 2, 0, 1, 0, 2, 2, 0, 2], [2, 2, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(( in0 * int(7.0) ), int(6.0)) == ( res0 * abs(i2) ):{:\\nb2 = ( int(7.0) - abs(abs(i2)) ) \\le ( mod(mod(abs(int(3.0)),( i2 - ( min(int(0.0), i1) + int(7.0) ) )),( int(4.0) + mod(divInt(in2,res0),max(in2, int(7.0))) )) - ( min(int(2.0), abs(( i2 - abs(int(8.0)) ))) + min(int(9.0), i0) ) )\\ni0 -= abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 11, 11, 2, 1, 0, 2, 2, 0, 0, 0, 13, 1, 48, 13, 12, 10, 4]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 6, 0, 2, 4, 0, 2, 6, 6, 7, 2, 1], [4, 2], [2, 1, 0], [1], [0, 0, 1, 1], [0, 0], [0, 3], [], [], [0, 4, 6, 2, 0, 3, 0, 1, 5, 3, 3], [], [3, 0, 1, 1, 3, 2, 2, 1, 3, 0, 2, 1, 3, 2, 0, 2, 0, 2, 2, 1, 1, 2, 1, 3, 3, 1, 2, 2, 2, 0, 0, 3, 1, 0, 0, 3, 1, 2, 0, 2, 1, 0, 1, 3, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 2, 1, 1, 0, 0, 1], [1, 2, 0, 1, 2, 1], [1, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\nb0 = ( abs(i0) \\le int(5.0) or int(3.0) == min(( ( int(6.0) - max(in1, mod(int(0.0),abs(( res0 * divInt(i2,( ( int(2.0) + int(4.0) ) - divInt(int(0.0),max(max(int(2.0), ( mod(mod(i0,in0),min(int(6.0), i0)) * i1 )), min(int(6.0), mod(in2,mod(int(7.0),in0))))) )) )))) ) - int(2.0) ), max(in0, int(1.0))) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 2, 3, 1, 4, 2, 2, 0, 0, 11, 0, 46, 13, 9, 6, 7]}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 2, 1, 2, 0, 2, 2, 2, 1], [0, 1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 4, 2, 9, 6, 2, 2, 7, 5, 2, 6, 7, 4, 6, 9, 9, 1, 9, 5, 8], [0, 1, 3, 4, 3], [2, 0, 2], [1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0], [3, 0, 2, 1, 1], [1, 0], [1, 0, 0], [6, 0, 4, 1, 2, 3, 5, 0, 5, 6, 0, 0, 0, 5, 2, 3, 3, 1, 0, 0, 6, 2], [0, 1], [0, 0, 1, 3, 0, 2, 3, 2, 3, 1, 0, 3, 1, 1, 3, 2, 3, 1, 3, 0, 2, 0, 2, 1, 3, 3, 1, 0, 1, 3, 3, 2, 0, 3, 2, 1, 1, 0, 1, 3, 1, 1, 2, 3, 0, 3, 2, 2, 2, 0, 3, 1, 2, 1, 2, 1, 3, 1, 3, 3, 0, 0, 0, 2, 3, 0, 1, 1, 2, 1, 3, 0, 0, 3, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 2, 2], [1, 2, 2, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = res0 \\l i0\\nif ( b0 or not int(7.0) \\g abs(in1) ):{:\\nb2 = False\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\ni1 = mod(max(( abs(int(6.0)) - i2 ), min(int(4.0), int(2.0))),abs(mod(min(int(9.0), abs(in0)),mod(in2,mod(int(6.0),abs(min(int(2.0), i0)))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(2.0) \\ge min(abs(( in2 * min(divInt(int(7.0),int(5.0)), res0) )), int(2.0)):{:\\nif max(int(6.0), int(7.0)) \\le divInt(max(i0, min(mod(divInt(mod(i0,max(int(4.0), divInt(int(6.0),mod(int(9.0),max(int(9.0), min(max(i0, in2), i2)))))),divInt(min(in0, int(1.0)),int(9.0))),( int(5.0) * abs(in0) )), i1)),abs(i0)):{:\\nif i0 \\ge res0:{:\\ni2 -= int(8.0)\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 5, 4, 21, 21, 5, 3, 1, 10, 5, 5, 2, 3, 22, 2, 78, 15, 22, 4, 12]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 1, 1, 0, 1, 2, 0, 0, 2, 1], [0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 5, 4, 4, 2, 9, 4, 0, 4, 0, 8, 3, 7, 1, 4, 9, 2, 4, 7, 4, 4, 5, 8, 6, 7, 8, 6, 3, 9, 5, 2, 5], [1, 1, 0, 0, 4, 1], [1, 0, 2, 1, 0, 0], [], [1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0], [1, 0, 1], [1, 1], [1, 1], [4, 4, 0, 5, 1, 4, 3, 6, 6, 4, 6, 1, 1, 3, 1, 5, 3, 4, 3, 0, 3, 2, 6, 4, 5, 4, 0, 6, 4, 0, 0, 0, 6, 4, 2, 1, 4, 6, 5, 2, 4, 1, 5, 0, 2, 2, 5, 5], [0, 0], [2, 1, 2, 2, 3, 3, 0, 2, 2, 3, 1, 1, 0, 3, 1, 2, 2, 1, 1, 0, 0, 3, 0, 3, 0, 0, 0, 2, 0, 1, 2, 3, 2, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 1, 2, 0, 3, 0, 2, 3, 3, 0, 1, 1, 2, 3, 0, 0, 3, 1, 3, 1, 0, 2, 2, 2, 0, 3, 0, 2, 0, 0, 3, 1, 0, 1, 3, 3, 1, 2, 1, 1, 2, 1, 2, 1, 2, 3, 2, 3, 0, 1, 3, 0, 1, 2, 0, 2, 2, 0, 2, 3, 1, 3, 3, 2, 1, 3, 0, 0, 1, 3, 3, 1, 2, 0, 0, 2, 2, 1, 2, 3, 3, 1, 2, 3, 2, 2, 0, 0, 2, 0, 2, 0, 2, 1, 2, 0, 0, 1, 0, 2, 0, 1, 3, 0, 0, 3, 3, 3, 3, 2, 1, 3, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [2, 2, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1], [0, 2, 2, 2, 0, 0, 1, 0, 1, 2, 2, 2, 0, 1, 0, 1, 1, 0, 2, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(int(9.0),( divInt(abs(abs(in1)),( divInt(min(int(4.0), int(5.0)),in1) + min(int(4.0), ( mod(int(4.0),int(2.0)) * i0 )) )) * in2 )) \\g max(i1, abs(in1)):{:\\nif in0 \\g res0:{:\\nb1 = mod(res0,int(9.0)) \\l mod(max(( mod(abs(in1),res0) * int(4.0) ), int(0.0)),i1)\\n:}else:{:\\nb0 = False\\n:}\\nb2 = i1 \\l mod(mod(int(4.0),( in0 + max(i1, ( max(abs(in2), int(0.0)) + int(8.0) )) )),divInt(abs(in0),in1))\\nb1 = b0\\n:}else:{:\\nloopBreak% = 0\\nwhile min(int(3.0), min(int(7.0), in0)) \\le ( ( divInt(i0,abs(in0)) - mod(i2,res0) ) + max(int(1.0), in1) ):{:\\nin2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = min(min(int(9.0), ( int(2.0) - int(4.0) )), ( int(7.0) * mod(int(4.0),mod(min(( max(i0, int(4.0)) * max(res0, int(5.0)) ), ( in1 * divInt(( i0 + divInt(min(int(8.0), abs(abs(( int(6.0) - min(i0, i0) )))),int(7.0)) ),max(max(int(8.0), divInt(res0,in1)), ( ( int(6.0) + ( abs(abs(int(3.0))) - mod(min(divInt(( i2 - i1 ),( in1 + mod(res0,divInt(int(9.0),mod(in2,i2))) )), int(5.0)),in1) ) ) * divInt(i1,int(2.0)) ))) )),max(in2, i0))) ))\\n:}\\nloopBreak% = 0\\nwhile abs(abs(max(abs(( int(5.0) - max(i2, i2) )), in2))) \\g in2:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 4, 7, 33, 33, 6, 6, 0, 9, 6, 3, 2, 2, 48, 2, 158, 43, 36, 20, 23]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 4], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 0, 1], [3, 5, 5], [1], [1], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(3.0) \\g int(55.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 1], [7, 1, 4, 7], [0, 5], [0, 1], [0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0], [3, 2, 3, 3, 0, 1], [0], [], [2, 4, 1, 0], [1], [0, 0, 1, 2, 3, 0, 1, 1, 1], [1], [0], [1], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not i2 \\l in1 and ( ( b1 and int(7.0) != divInt(min(i1, int(1.0)),int(4.0)) ) or True ) )\\ni0 -= int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 2, 2, 3, 8, 2, 6, 1, 0, 4, 1, 9, 1, 1, 1, 1]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 2, 2, 4, 5, 2, 1, 4], [4], [2, 2], [], [1, 0], [0], [0], [], [0], [1, 1, 0, 4, 0, 1, 5, 6, 5, 4, 6, 2, 2], [], [2, 3, 3, 0, 3, 3, 1, 1, 3, 0, 2, 0, 2, 0, 3, 0, 3, 3, 0, 1, 3, 3, 1, 2, 1, 3, 0, 2, 3, 1, 3, 2, 2, 3, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(min(min(i1, min(max(int(7.0), int(7.0)), abs(i1))), divInt(i0,divInt(in1,max(i0, min(abs(i1), int(2.0)))))),max(min(int(2.0), ( int(4.0) - max(in2, ( min(int(5.0), abs(( ( min(res0, in2) - in1 ) - res0 ))) + int(2.0) )) )), int(1.0))) \\le mod(( i2 + int(4.0) ),i2):{:\\nb2 = b2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 9, 9, 1, 2, 0, 2, 1, 1, 0, 1, 13, 0, 45, 9, 14, 5, 4]}, {"genotype": [[0], [1], [0], [], [1], [1], [2], [], [], [], [], [], [], [], [], [0], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1], [6, 5], [], [], [], [], [], [], [], [], [3, 4, 2, 4, 6], [0, 0], [0, 3, 2, 1, 2, 0, 0, 1], [1, 1], [0], [], [0, 1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = in1\\ni2 = min(divInt(int(6.0),mod(in1,res0)), int(5.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 8, 2, 1, 0, 2]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 0, 0, 1], [9, 4, 6, 1], [], [], [], [], [], [], [], [], [2, 6, 5, 1, 3], [1, 1], [2, 1, 2, 2, 0, 0, 0, 1], [1, 0, 1], [], [2, 2, 1], [0, 1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= divInt(int(9.0),( mod(res0,in2) * i1 ))\\nin0 -= int(461.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 8, 3, 0, 3, 2]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 2, 0, 2, 0, 0], [1, 1, 0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 1, 0, 0, 1, 4, 6, 3], [4, 2, 2], [1, 0, 2, 2, 0], [1], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0], [3, 0, 0, 2, 0], [], [1], [2, 4, 5, 1, 0, 6, 1], [1], [1, 1, 1, 3, 0, 3, 2, 0, 2, 1, 2, 0, 3, 0, 1, 2, 2, 1, 3, 1, 1, 3, 0, 3, 0, 1], [1, 0, 1, 1, 1], [1, 1, 0, 2, 2, 2], [0, 2], [0, 1, 1, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(9.0) \\le int(3.0):{:\\nloopBreak% = 0\\nwhile ( b1 or int(1.0) == max(i2, max(divInt(in1,( int(0.0) + mod(in2,min(i1, int(0.0))) )), mod(divInt(int(1.0),abs(int(4.0))),int(6.0)))) ):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not b2:{:\\ni0 *= abs(res0)\\n:}else:{:\\nb0 = abs(i1) == int(3.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 9, 9, 3, 5, 1, 8, 3, 5, 0, 1, 7, 1, 26, 5, 6, 2, 4]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 0, 1, 1, 1], [1], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 6, 7, 0, 7, 4, 6, 3, 4, 4, 6], [1, 3, 4], [0, 0, 2], [], [0, 1, 1, 1], [0, 0, 0], [1], [1], [], [0, 3, 6, 5, 2, 2, 2, 3], [0], [2, 1, 1, 0, 2, 2, 1, 3, 0, 1, 2, 3, 0, 0, 3, 1, 1, 1, 1, 3, 0, 3, 2, 2, 1, 0, 0, 3, 2, 2, 1, 1, 3, 1], [1, 0, 1, 1, 0, 0, 0, 0], [2, 0, 1, 0, 0, 2, 2], [2, 1, 1, 0, 1], [0, 0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\ni0 = divInt(int(1.0),int(5.0))\\nb0 = in0 \\g ( divInt(int(6.0),abs(res0)) * int(7.0) )\\nb0 = divInt(min(in2, i2),max(int(0.0), int(7.0))) \\ge int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(6.0) \\le min(i2, min(( ( int(3.0) - i2 ) - in0 ), abs(( ( int(4.0) + int(4.0) ) - abs(int(6.0)) ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 12, 12, 3, 3, 0, 4, 3, 1, 1, 0, 8, 1, 34, 8, 7, 5, 3]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 0, 0, 1, 0], [0], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 3, 0, 1, 4, 8, 4, 2, 1, 1, 3, 3, 7, 5, 2, 8, 0, 0], [5], [0, 0], [], [0, 0, 1], [0], [1, 1], [0, 1], [0], [1, 1, 2, 2, 6, 1, 5, 3, 5, 4, 1, 0, 1, 3, 3, 3, 0, 4], [0, 1], [3, 3, 1, 2, 1, 2, 3, 1, 3, 2, 0, 0, 2, 3, 0, 0, 3, 1, 3, 0, 3, 3, 1, 3, 3, 3, 2, 1, 1, 2, 3, 1, 0, 2, 1, 1, 2, 3, 0, 3, 2, 2, 2, 0, 2, 2, 1, 3, 1, 0, 0, 2, 1, 2, 3, 1, 0, 0, 2, 1, 1, 2, 1, 2, 1, 2, 2, 0, 2, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 2, 1, 0, 2, 2, 2, 0, 1, 0, 2, 0, 1, 0, 2, 2, 1], [2, 2, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\ni1 = max(abs(int(4.0)), ( int(9.0) * divInt(max(int(3.0), min(mod(i1,i2), divInt(abs(i2),res0))),abs(int(0.0))) ))\\nb0 = False\\ni1 *= abs(in2)\\n:}\\nb0 = min(max(int(1.0), min(abs(min(mod(int(4.0),int(8.0)), mod(max(int(4.0), in0),divInt(int(2.0),int(1.0))))), ( min(in2, abs(( divInt(( in1 + ( mod(int(1.0),abs(int(3.0))) - i1 ) ),i0) + mod(int(3.0),mod(max(int(7.0), i1),in0)) ))) - mod(int(5.0),int(2.0)) ))), mod(int(8.0),divInt(int(0.0),( ( in0 + divInt(in0,i0) ) - int(0.0) )))) != in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 19, 19, 1, 2, 0, 3, 1, 2, 2, 1, 18, 2, 73, 21, 17, 8, 14]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 9, 1, 7, 0, 5, 0, 8], [4, 4], [2], [], [1, 0, 0, 1], [0, 0], [2, 2], [], [0], [6, 1, 3, 4, 5], [], [2, 2, 0, 1, 3, 3, 3, 0, 3, 1, 0, 3, 2, 0, 2, 1, 1, 1, 3, 1, 0, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 0, 1, 0], [2, 1], [1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(( res0 * int(8.0) ),max(max(min(i1, min(int(8.0), in0)), max(divInt(in1,( int(9.0) - int(1.0) )), int(7.0))), min(int(0.0), in2))) \\le int(5.0):{:\\nb2 = not not int(0.0) \\le int(8.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 9, 9, 2, 1, 0, 4, 2, 2, 0, 1, 5, 0, 24, 4, 6, 2, 2]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1], [1, 1, 2, 2, 0, 0, 1, 1], [0, 0], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 3, 8, 3, 7, 1, 2, 3, 4, 5, 5, 7, 9, 8, 7, 4, 5, 9, 0, 7, 8, 3, 8, 5, 4, 8, 7, 2, 4, 3, 6, 9, 3, 5, 3, 4, 7, 7, 8, 3, 1, 2, 4, 6, 7, 0, 3, 9, 1, 6, 1, 8, 4, 4, 2, 7, 7, 4], [0, 1], [1, 2, 2], [], [1, 0, 0, 1], [0, 0], [1, 0], [1], [0, 0], [1, 3, 1, 2, 3, 6, 1, 1, 0, 4, 5, 6, 6, 4, 0, 0, 5, 3, 5, 2, 5, 5, 5, 4, 6, 0, 6, 4, 1, 3, 0, 3, 1, 6, 2, 4, 3, 2, 0, 3, 5, 2, 1, 6, 1, 4, 5, 5, 0, 1, 1, 2, 0, 6, 5, 3, 5, 5, 0, 2, 1, 4, 3, 3, 1, 2], [0, 1, 0, 0], [0, 1, 1, 0, 2, 0, 3, 0, 0, 1, 2, 3, 2, 1, 3, 2, 1, 2, 2, 3, 3, 2, 2, 1, 2, 0, 0, 3, 1, 2, 1, 3, 0, 0, 1, 3, 3, 2, 2, 0, 2, 2, 2, 2, 1, 2, 3, 1, 2, 2, 0, 2, 2, 3, 2, 2, 0, 2, 1, 1, 3, 3, 2, 2, 2, 2, 0, 3, 2, 3, 3, 2, 2, 1, 1, 0, 2, 1, 1, 2, 1, 2, 3, 2, 0, 0, 3, 1, 1, 0, 1, 2, 3, 0, 2, 1, 1, 0, 0, 0, 3, 1, 1, 2, 0, 3, 1, 3, 2, 1, 2, 0, 3, 3, 1, 3, 0, 3, 3, 2, 0, 0, 3, 0, 1, 2, 0, 1, 2, 1, 2, 2, 1, 3, 0, 0, 3, 3, 3, 0, 1, 1, 1, 1, 2, 3, 0, 2, 3, 2, 2, 2, 2, 2, 3, 1, 1, 1, 0, 3, 0, 2, 0, 1, 2, 0, 3, 0, 0, 0, 2, 1, 0, 2, 0, 3, 2, 0, 0, 0, 1, 0, 2, 3, 2, 3, 0, 0, 3, 0, 2, 1, 0, 2, 2, 3, 3, 0, 0, 1, 2, 2, 1, 2, 3, 2, 1, 1, 2, 2, 0, 3, 3, 2, 0, 0, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 3, 2, 0, 3, 1, 3, 0, 1, 3, 1, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 1, 1, 2, 0, 0, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 0, 1, 2, 0, 2, 0, 1, 1], [2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 80, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i1 \\l int(7.0)\\nin0 = int(3.0)\\nif False:{:\\nif b2:{:\\ni1 *= i2\\n:}\\nin0 = ( res0 + max(i1, i1) )\\n:}\\nb2 = int(8.0) \\g mod(max(divInt(int(3.0),min(( int(7.0) * divInt(( min(min(divInt(( int(1.0) * divInt(i0,in1) ),max(int(2.0), mod(int(3.0),abs(in2)))), res0), int(4.0)) * min(abs(divInt(( res0 * ( ( divInt(( int(5.0) - divInt(max(int(5.0), ( divInt(in1,divInt(( max(mod(divInt(i0,( int(7.0) - int(9.0) )),max(abs(( divInt(( ( i0 + min(( abs(abs(( ( int(8.0) - int(7.0) ) + in2 ))) + ( int(4.0) * int(5.0) ) ), ( int(9.0) - ( max(mod(in0,in2), max(int(0.0), int(7.0))) - i2 ) )) ) + int(8.0) ),divInt(abs(in2),( int(3.0) + int(8.0) ))) - in2 )), in2)), in1) + max(int(5.0), int(4.0)) ),divInt(res0,max(int(8.0), max(( int(7.0) - ( i0 * abs(min(int(2.0), min(res0, max(abs(mod(in1,i1)), max(in0, int(4.0)))))) ) ), divInt(i0,int(3.0))))))) * divInt(int(6.0),( ( int(9.0) * min(in0, i1) ) + max(min(max(res0, int(3.0)), int(5.0)), int(3.0)) )) )),int(4.0)) ),mod(min(i2, ( min(mod(( ( mod(divInt(min(int(7.0), int(7.0)),int(8.0)),in1) - min(in0, mod(i2,int(3.0))) ) * divInt(i0,abs(in0)) ),in2), i2) + divInt(int(1.0),i1) )),divInt(res0,abs(( i1 + in1 ))))) + in2 ) * int(2.0) ) ),in2)), mod(min(mod(min(i0, i1),min(i1, ( int(4.0) + i2 ))), divInt(( min(max(i0, res0), int(6.0)) * mod(( int(7.0) + divInt(min(mod(int(0.0),int(3.0)), ( divInt(in2,max(abs(( in0 * in2 )), ( int(9.0) * int(1.0) ))) - mod(int(6.0),in2) )),int(1.0)) ),i0) ),int(8.0))),i2)) ),int(4.0)) ), min(i1, abs(mod(in1,min(int(4.0), max(in0, int(2.0)))))))), max(int(7.0), in0)),i1)\\ni2 = int(74.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 58, 58, 2, 3, 0, 4, 2, 2, 1, 2, 66, 4, 242, 72, 51, 36, 37]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1], [2, 2, 1, 1, 1, 1, 0], [0, 1], [0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 5, 1, 4, 2, 8, 3, 5, 8, 6, 6, 7, 3, 1, 7, 7, 5, 5, 8, 4, 4, 8, 6], [5, 1, 4, 1, 3, 2], [0, 2, 2, 0, 2], [1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 3, 1, 0, 1, 3], [1, 0], [1], [0, 1, 3, 1, 3, 2, 0, 4, 3, 4, 4, 3, 6, 0, 4, 5, 2, 2, 2, 2, 6, 4, 0, 5, 5, 0, 6, 0, 0], [1], [3, 0, 1, 0, 2, 0, 2, 3, 3, 2, 2, 1, 3, 3, 1, 2, 1, 3, 0, 1, 3, 3, 0, 0, 3, 1, 2, 0, 2, 2, 1, 1, 3, 2, 3, 2, 2, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 3, 0, 0, 0, 2, 3, 0, 2, 1, 1, 0, 0, 3, 2, 3, 0, 1, 0, 2, 0, 1, 0, 3, 2, 1, 2, 2, 3, 1, 3, 1, 3, 3, 0, 3, 2, 1, 0, 3, 2, 1, 2, 2, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [2, 0, 1, 0, 2, 2, 1, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0, 0], [1, 1, 0, 2, 2, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( False or abs(i0) != int(6.0) ) and b0 ):{:\\nloopBreak% = 0\\nwhile i1 \\g divInt(in0,( min(max(divInt(mod(int(5.0),min(abs(int(5.0)), ( int(1.0) - abs(i1) ))),int(4.0)), max(min(in0, i2), max(int(2.0), mod(i0,divInt(( int(8.0) - int(3.0) ),max(divInt(abs(mod(( int(5.0) + int(8.0) ),in1)),in0), divInt(in1,in1))))))), int(6.0)) * in0 )):{:\\nb2 = res0 \\le max(i0, in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 *= i2\\n:}\\nb2 = divInt(max(i2, ( int(6.0) - int(7.0) )),i2) \\g i2\\nb0 = True\\nb2 = ( abs(divInt(max(res0, int(3.0)),in1)) \\ge ( i0 + int(1.0) ) or in2 == max(( int(7.0) - mod(( max(int(7.0), max(int(5.0), abs(min(in2, min(( int(5.0) - i0 ), min(divInt(int(8.0),( divInt(int(4.0),res0) + int(4.0) )), i0)))))) - int(8.0) ),i0) ), int(6.0)) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 24, 24, 6, 5, 3, 12, 6, 6, 2, 1, 29, 1, 97, 23, 22, 11, 13]}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 1], [1, 0], [0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 3, 3, 3, 3, 3, 1, 1, 7, 4, 6, 4, 5, 1, 6, 4, 9, 8, 9, 6, 7], [3, 1, 5, 2, 2], [2, 1], [1], [1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [3], [], [0], [4, 0, 6, 6, 5, 5, 2, 2, 0, 4, 4, 0], [], [1, 0, 3, 3, 3, 3, 2, 1, 1, 2, 0, 3, 2, 0, 1, 0, 2, 1, 1, 2, 1, 0, 3, 2, 3, 1, 2, 1, 0, 1, 0, 0, 3, 1, 1, 3, 2, 2, 2, 1, 2, 0, 2, 2, 0, 2, 3, 2, 1, 1, 3, 1, 1, 3, 0, 1, 1, 0, 3, 2, 3, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 2, 0, 1, 1, 2, 2, 0, 2, 2, 0, 2, 2], [1, 1, 1, 1, 2, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(89.0) \\ge in1:{:\\nb2 = min(max(abs(min(( int(3.0) - int(3.0) ), ( i0 - max(( res0 - int(3.0) ), res0) ))), ( int(3.0) - int(3.0) )), ( int(1.0) * in2 )) \\g max(mod(abs(int(1.0)),divInt(int(7.0),in2)), int(4.0))\\nif ( i2 != i2 or abs(int(6.0)) == int(4.0) ):{:\\nb1 = min(mod(mod(( int(5.0) - mod(i0,divInt(divInt(in1,divInt(abs(divInt(int(1.0),int(6.0))),abs(int(4.0)))),int(9.0))) ),min(in1, int(8.0))),int(9.0)), i0) == abs(mod(abs(int(6.0)),int(7.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 22, 22, 5, 2, 1, 6, 5, 1, 0, 1, 12, 0, 63, 16, 14, 6, 10]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1, 1, 1, 1], [9, 6, 7, 2, 6], [], [], [], [], [], [], [], [], [5, 5, 3, 2, 2, 3], [1, 0], [2, 1, 2, 2, 3, 3, 0, 3, 1, 2, 2, 0, 1, 0, 0, 2, 1, 1], [1, 1, 0, 0, 0, 0], [2, 2, 1], [1, 1, 1, 0, 0], [0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= divInt(int(9.0),mod(( abs(abs(in2)) - max(int(6.0), ( ( in0 - int(7.0) ) + i2 )) ),i2))\\nin0 = ( int(2.0) + int(6.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 18, 6, 3, 5, 2]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 3, 0, 0, 8, 7, 0, 2, 9], [5, 2, 0], [1], [0], [0, 1, 1, 1], [0, 0, 0], [3], [], [], [0, 6, 1, 4, 4, 4, 0, 2, 2, 5], [], [1, 1, 2, 3, 0, 3, 3, 0, 2, 2, 1, 1, 0, 3, 3, 3, 2, 0, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 2, 0, 0, 3, 2, 1, 1, 0, 1, 3, 0, 0, 0], [0, 1, 1, 1, 1, 1], [2, 2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 2, 2], [2], [1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(8.0) != int(9.0) and ( abs(i0) * abs(max(res0, mod(divInt(int(3.0),int(0.0)),i1))) ) == max(max(min(divInt(in1,max(max(abs(abs(int(0.0))), int(8.0)), int(7.0))), abs(max(max(divInt(in1,in1), abs(mod(int(0.0),int(2.0)))), i0))), int(9.0)), abs(i2)) ):{:\\nb1 = i2 \\l in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 10, 10, 3, 1, 1, 4, 3, 1, 0, 0, 10, 0, 41, 6, 15, 1, 5]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [3, 9], [0], [2], [], [1], [0], [], [], [], [0], [], [1, 2, 1, 0], [1], [], [], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(3.0) \\l divInt(int(9.0),i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 0, 1], [9, 6, 1, 3], [3], [2], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(96.0) \\ge int(13.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [0, 0, 0], [1, 1, 1, 1, 1], [2, 3, 9, 7, 1], [0, 3], [1, 0, 2], [], [0, 1, 1], [0, 0], [1], [0], [], [5, 5, 1, 1, 4, 3, 6, 1], [], [1, 2, 3, 3, 2, 1, 3, 0, 1, 2, 0, 3, 0, 3, 3, 2, 0, 3, 2, 0, 2, 0, 0, 3, 1, 1, 0], [0, 1, 1, 0, 0, 1], [2, 0, 0, 2, 2, 1, 2, 2], [0, 2, 1], [0, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nb0 = int(2.0) \\l ( abs(min(divInt(int(3.0),min(in2, int(9.0))), divInt(in2,abs(i1)))) + abs(max(( i1 * abs(( in1 - mod(in0,res0) )) ), abs(int(7.0)))) )\\nb2 = int(1.0) \\ge i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 5, 5, 2, 3, 0, 3, 2, 1, 1, 0, 8, 0, 27, 6, 8, 3, 3]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 0, 2, 2, 2, 0, 2, 1], [0, 1, 1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 0, 9, 0, 7, 4, 9, 3, 2, 0, 3, 0, 3, 2, 5, 0, 3, 1, 9, 3, 6, 6, 4, 5, 1, 8, 6, 5, 6, 8, 4, 1, 6, 7, 1, 1, 4, 7, 9, 6], [3, 0, 5, 4, 5, 0], [2, 2, 2, 0, 0], [], [1, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0], [0], [0, 1], [2, 2, 4, 5, 5, 1, 0, 3, 0, 1, 1, 5, 6, 4, 6, 3, 6, 2, 0, 4, 5, 3, 2, 3, 6, 6, 6, 2, 6, 5, 3, 0, 2, 2, 2, 0, 3, 4, 6, 5, 0, 4, 4, 0, 3, 5, 1, 4, 1, 2, 2, 6, 1, 2, 3, 5, 3, 2, 5, 0, 6, 4, 5, 4, 4], [1], [1, 2, 2, 1, 2, 3, 1, 0, 3, 3, 1, 2, 0, 0, 3, 0, 3, 2, 2, 3, 1, 0, 3, 1, 0, 3, 0, 2, 2, 3, 2, 1, 1, 0, 1, 2, 3, 3, 2, 3, 2, 2, 0, 0, 2, 1, 0, 1, 0, 1, 3, 1, 2, 0, 0, 3, 2, 1, 2, 3, 3, 3, 3, 3, 3, 2, 0, 2, 2, 3, 1, 0, 3, 0, 0, 2, 3, 1, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 2, 2, 0, 2, 3, 2, 2, 1, 3, 3, 3, 2, 3, 0, 1, 2, 1, 0, 3, 1, 0, 2, 3, 3, 2, 0, 1, 0, 0, 0, 1, 3, 1, 3, 2, 3, 1, 2, 0, 3, 0, 2, 2, 3, 0, 2, 2, 1, 1, 1, 1, 0, 1, 2, 0, 1, 3, 2, 0, 0, 0, 0, 3, 2, 3, 3, 0, 3, 3, 0, 0, 1, 2, 3, 0, 1, 3, 2, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 1, 0, 1, 1, 2, 0, 2, 2, 0, 3, 0, 0, 3, 1, 3, 0, 0, 3, 3, 1, 3, 0, 1, 3, 2, 3, 0, 0, 0, 0, 1, 0, 2, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [2, 1, 1, 1, 0, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 1, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 2], [2, 1, 0, 2, 2, 0, 1, 1, 1, 0, 2, 0, 1, 2, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 1, 1, 2, 1, 2], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(4.0) \\ge ( divInt(int(4.0),divInt(abs(int(0.0)),i2)) * max(max(int(9.0), ( i2 - in1 )), max(in2, min(( ( max(int(0.0), in2) + abs(int(7.0)) ) * i1 ), abs(i0)))) )\\nif True:{:\\nloopBreak% = 0\\nwhile mod(divInt(min(divInt(int(4.0),int(9.0)), in0),int(3.0)),mod(abs(max(( abs(mod(divInt(i0,i1),( int(2.0) * i1 ))) + int(0.0) ), in2)),int(3.0))) \\l abs(int(0.0)):{:\\nres0 -= mod(in1,res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile max(( int(3.0) - divInt(min(min(abs(abs(abs(abs(( in0 - mod(( abs(int(2.0)) + res0 ),max(i2, i0)) ))))), divInt(max(int(5.0), max(( min(( min(in1, divInt(in2,in0)) * i2 ), min(max(max(in0, res0), res0), res0)) + max(( ( ( i2 - ( min(( ( int(0.0) * abs(max(max(divInt(min(res0, int(3.0)),( int(1.0) + in2 )), max(int(9.0), in0)), divInt(min(abs(divInt(i0,int(3.0))), i2),i2))) ) + i2 ), int(6.0)) * min(int(6.0), max(mod(min(int(4.0), mod(i0,max(in0, mod(( abs(in1) * ( ( int(5.0) * int(1.0) ) - int(8.0) ) ),int(6.0))))),res0), int(5.0))) ) ) * divInt(in2,int(6.0)) ) * abs(( i0 + in1 )) ), in1) ), i0)),max(( abs(abs(in0)) + abs(abs(in2)) ), i1))), int(8.0)),( max(in1, int(4.0)) - min(( ( int(1.0) - int(6.0) ) * max(mod(i1,mod(abs(divInt(i2,int(7.0))),i2)), int(1.0)) ), int(1.0)) )) ), mod(res0,mod(divInt(i1,min(i2, in0)),max(int(4.0), min(in2, in0))))) != max(max(int(7.0), abs(i2)), int(9.0)):{:\\nloopBreak% = 0\\nwhile abs(( abs(in2) - i0 )) \\le res0:{:\\nif in1 != int(6.0):{:\\nb2 = in2 \\l ( in1 * in1 )\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 989, "mapping_values": [1, 10, 10, 6, 4, 41, 41, 6, 5, 0, 9, 6, 3, 1, 2, 65, 1, 220, 54, 61, 29, 26]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1], [0, 8], [0], [], [], [1], [0], [], [], [], [0, 5, 4], [0], [0, 1, 2, 0, 1], [1], [], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\l int(0.0):{:\\nin2 = mod(in1,int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 3, 1, 5, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1], [1, 2, 2, 0, 1, 0, 0, 0], [1, 1], [1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 5, 4, 6, 3, 7, 7, 5, 9, 4, 9, 5, 6, 1, 2, 4, 3, 9, 2, 5, 3, 0, 3, 3, 0, 0, 2, 4, 7, 9], [2, 0, 4, 5], [0, 1, 0, 0, 0, 2], [0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0], [0, 2, 3, 1, 3, 3, 0, 2, 0], [1], [], [6, 6, 2, 5, 3, 2, 5, 5, 0, 5, 0, 5, 6, 3, 4, 6, 5, 0, 0, 4, 3, 5, 6, 1, 0, 1, 2, 6, 3, 6, 2, 6, 3], [1, 1, 0], [2, 1, 2, 0, 3, 3, 1, 3, 3, 3, 1, 0, 1, 2, 0, 0, 1, 2, 0, 0, 0, 2, 2, 2, 3, 3, 2, 2, 3, 1, 2, 3, 0, 3, 3, 1, 1, 3, 0, 2, 0, 1, 3, 2, 2, 2, 0, 1, 2, 0, 2, 3, 0, 1, 2, 0, 1, 1, 0, 2, 3, 3, 2, 0, 3, 1, 3, 3, 0, 1, 0, 3, 1, 1, 3, 0, 1, 3, 3, 3, 0, 1, 0, 2, 1, 3, 1, 1, 3, 2, 2, 1, 2, 1, 3, 0, 1, 2, 2, 0, 2, 0, 1, 1, 0, 3, 2, 3, 1, 3, 1, 0, 3, 1, 2, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 2, 2, 2, 2, 0, 2, 1, 0, 1, 2, 0, 0, 2, 1, 0, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0], [2, 1, 2, 2, 1, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= ( int(9.0) - ( res0 * min(max(int(3.0), abs(abs(abs(int(5.0))))), i2) ) )\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile int(4.0) == ( in2 * in0 ):{:\\ni2 -= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not ( mod(in2,in2) \\l i0 and ( mod(( abs(min(mod(divInt(abs(int(3.0)),( max(in2, min(max(int(7.0), int(7.0)), abs(i0))) - ( in2 + int(5.0) ) )),min(divInt(divInt(( res0 * int(9.0) ),( in0 + ( min(in1, int(4.0)) * ( res0 + int(9.0) ) ) )),int(5.0)), in2)), ( abs(max(mod(i0,min(int(6.0), max(min(i0, int(1.0)), in1))), min(int(2.0), int(4.0)))) - max(in0, int(3.0)) ))) + max(max(abs(in2), int(9.0)), res0) ),( int(2.0) - max(int(5.0), int(3.0)) )) + max(( ( int(0.0) + mod(int(3.0),max(i1, int(3.0))) ) * divInt(( i0 - ( i1 - int(0.0) ) ),int(0.0)) ), i2) ) \\le max(mod(abs(int(2.0)),min(int(4.0), res0)), min(int(7.0), divInt(in0,res0))) )\\ni2 = res0\\nb0 = False\\nb0 = ( ( in0 != int(9.0) or b0 ) and not b2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 31, 31, 4, 6, 3, 13, 4, 9, 1, 0, 33, 3, 120, 28, 31, 19, 11]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 4], [1], [2], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(8.0) \\g int(4.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 1], [1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 7, 2, 0, 8, 5, 0, 3, 2, 5, 0, 2, 9, 9, 6, 7, 6, 0, 7, 6, 5, 1, 3, 0, 3], [3, 5, 1, 4, 3, 1, 3], [2, 0, 1, 0], [], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 1], [1], [0, 0], [2, 6, 3, 6, 1, 2, 4, 1, 3, 4, 3, 2, 5, 6, 6, 5, 0, 1, 2, 1, 6, 4, 5, 5, 5, 5, 3, 0, 0, 2, 3], [0, 0, 1, 1], [2, 2, 3, 3, 0, 0, 2, 2, 3, 3, 3, 0, 1, 3, 3, 3, 0, 2, 1, 0, 1, 2, 1, 0, 3, 0, 0, 0, 3, 0, 3, 2, 0, 3, 3, 1, 1, 3, 1, 2, 2, 3, 3, 1, 3, 2, 1, 3, 1, 0, 1, 2, 1, 0, 3, 3, 3, 0, 1, 2, 1, 1, 2, 2, 0, 2, 0, 3, 0, 3, 3, 3, 0, 2, 1, 1, 2, 0, 3, 1, 0, 2, 3, 0, 0, 2, 1, 1, 1, 2, 1, 1, 1, 3, 0, 0, 2, 0, 2, 3, 0, 3, 1, 3, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 2, 2, 0, 2, 2, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 1, 1], [1, 0, 1, 0, 0, 0, 2, 0, 1, 1, 0, 0, 2], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(divInt(min(abs(i2), res0),divInt(( abs(abs(min(in0, int(2.0)))) - abs(abs(max(res0, ( int(0.0) + i1 )))) ),int(7.0))),( int(2.0) - i2 )) \\ge abs(in1)\\ni1 = in0\\nin1 = in0\\nloopBreak% = 0\\nwhile min(i2, abs(mod(in2,abs(abs(int(0.0)))))) != int(8.0):{:\\nif not abs(int(5.0)) \\g ( ( abs(abs(int(0.0))) + abs(( int(3.0) + max(int(2.0), res0) )) ) + int(5.0) ):{:\\nloopBreak% = 0\\nwhile divInt(int(0.0),res0) \\le abs(abs(min(in2, int(2.0)))):{:\\nb0 = ( int(9.0) * int(9.0) ) \\ge ( mod(i0,( i1 + abs(i2) )) - min(min(min(i1, divInt(int(6.0),int(7.0))), ( res0 - abs(int(6.0)) )), in1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif not not divInt(max(in2, in2),mod(int(0.0),int(7.0))) \\g int(6.0):{:\\nb1 = ( int(5.0) + int(1.0) ) \\ge int(3.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\nin2 += max(in2, in0)\\ni0 *= divInt(i0,divInt(abs(i2),max(int(0.0), max(in0, int(3.0)))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 26, 26, 7, 4, 0, 11, 7, 4, 1, 2, 31, 4, 106, 22, 31, 13, 11]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 4, 1, 0, 9, 1, 0, 1, 1, 4, 0, 7, 1, 7], [], [], [], [], [], [], [], [], [6, 6, 6, 0, 0, 2, 6, 3, 3, 0, 0, 3, 5, 0, 0, 1, 0, 5, 4, 4, 2, 0, 5, 6, 2, 0, 3, 5, 6, 2, 1, 4, 2, 5], [0], [3, 3, 3, 1, 2, 2, 2, 1, 0, 3, 0, 3, 2, 2, 3, 2, 3, 1, 2, 0, 3, 2, 3, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 0, 3, 3, 3, 2, 0, 3, 1, 3, 3, 1, 2, 3, 3, 0, 0, 0, 0, 1, 0, 2, 2, 2, 2, 3, 2, 2, 2, 0, 0, 3, 2, 0, 0, 0, 3, 3, 3, 0, 3, 0, 3, 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 2, 2, 3, 2, 0, 3, 0, 0, 3, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 2, 0, 2, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 1], [1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 2, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = abs(abs(min(int(9.0), divInt(mod(( int(9.0) - res0 ),abs(res0)),max(( ( max(mod(min(int(4.0), ( i0 - max(divInt(min(i0, i2),res0), in0) )),in0), int(1.0)) * int(0.0) ) * divInt(min(max(i0, min(max(max(( i0 * abs(int(9.0)) ), min(min(int(1.0), mod(abs(min(in0, in2)),i0)), i0)), int(0.0)), i1)), ( divInt(( ( min(( divInt(( i0 + in2 ),min(divInt(in1,in1), i2)) * abs(max(min(i0, max(in2, min(int(1.0), res0))), divInt(i2,int(1.0)))) ), i0) - ( in0 - in2 ) ) - int(4.0) ),( mod(min(divInt(res0,min(i2, i1)), max(int(0.0), in1)),int(7.0)) * i2 )) + int(1.0) )),in2) ), int(7.0))))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 1, 1, 0, 1, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 34, 1, 101, 24, 29, 12, 12]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [6, 4, 8], [0], [0], [], [1], [0], [], [], [], [3, 5], [], [3, 2, 3, 2, 1, 0, 3, 0, 1, 1], [1, 1], [2, 2, 0], [], [1, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = abs(mod(abs(mod(int(6.0),in0)),min(in2, int(4.0)))) \\l int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 10, 2, 3, 0, 2]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1], [8, 5, 9, 2, 1, 8, 6], [4, 0], [2, 0], [0], [0, 0, 1, 1], [0, 0], [3, 0], [], [], [2, 2, 3, 5, 0, 1, 3, 4, 1, 2, 6, 5], [1], [3, 2, 0, 0, 3, 2, 0, 0, 1, 2, 3, 3, 0, 0, 1, 3, 1, 2, 3, 3, 0, 2, 1, 3, 2, 2, 0, 1, 0, 2, 3, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [1, 2, 0, 0, 2, 2, 2, 0, 1], [1, 2, 1, 1, 2], [1, 1, 1, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( b2 and max(( i2 - i2 ), abs(( in0 * in2 ))) \\le int(8.0) ):{:\\ni0 -= mod(min(min(i1, in0), int(5.0)),abs(int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = mod(abs(abs(in1)),mod(int(2.0),min(mod(( i1 - int(1.0) ),i2), ( max(int(8.0), int(6.0)) * res0 )))) \\l in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 7, 7, 2, 2, 1, 4, 2, 2, 0, 0, 12, 1, 35, 8, 9, 5, 4]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 0, 1, 1, 1, 2, 1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1], [8, 1, 4, 2, 5], [4, 4], [2, 0], [], [0, 1, 0, 1], [0, 0], [1, 0], [0], [0], [6, 6, 6, 4, 5, 3, 2, 5, 4, 5, 1, 4, 6, 1, 6, 6, 1], [1, 1, 1, 1, 1, 1], [2, 1, 0, 3, 1, 0, 2, 2, 2, 0, 0, 3, 0, 2, 0, 0, 0, 1, 0, 1, 1, 2, 0, 0], [1, 1, 0, 1, 1, 0], [2, 2], [0, 2, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nres0 += mod(int(8.0),res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile abs(int(1.0)) \\le res0:{:\\nin1 *= mod(( mod(in2,in0) - abs(i2) ),mod(in2,in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 -= i1\\nin1 -= int(4.0)\\nres0 -= i1\\nif b2:{:\\nb0 = int(2.0) \\le int(5.0)\\n:}\\nres0 *= ( res0 * i1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 5, 5, 2, 2, 0, 4, 2, 2, 1, 1, 17, 6, 24, 6, 2, 8, 4]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1, 1, 1, 1, 1], [4, 7, 8, 6, 7], [], [1], [], [0], [], [1], [0], [], [0, 6, 2, 6, 1], [0], [2, 2, 2, 2, 1, 0, 1, 3, 1, 2, 1, 1, 3, 0, 2, 0, 3, 0], [0, 0, 1, 0, 1, 0], [1, 0, 2], [1, 2, 2, 0], [0, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( ( divInt(( int(4.0) - res0 ),int(7.0)) * max(int(8.0), divInt(int(6.0),int(7.0))) ) * min(i2, ( res0 + abs(i1) )) )\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 1, 0, 1, 0, 1, 1, 0, 5, 1, 18, 6, 3, 4, 2]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [1, 0], [1, 1], [0, 3], [1, 1], [1], [], [1, 1], [0, 0], [], [], [], [2, 1, 1, 4, 3], [1], [3, 0, 0, 0, 1, 0, 1], [], [1], [2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(i2, i1) \\g i1:{:\\nin1 *= int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in0 \\g int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 2, 1, 0, 2, 2, 0, 0, 0, 5, 1, 7, 0, 1, 1, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 0, 2, 2, 0, 0], [1, 0, 1], [0, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 7, 6, 8, 0, 0, 9, 4, 1, 0, 6, 0, 1, 1, 2, 7, 4, 6, 4, 6, 2, 5, 2, 3, 6, 1, 2, 0, 3, 2, 9, 5, 6, 3, 0, 3, 7, 7, 8, 6, 4, 2, 9, 9, 5, 9, 7, 0, 5, 7, 9, 6], [2, 0, 4, 5], [1, 1], [], [1, 1, 0, 1, 0, 1], [0, 0, 0, 0], [1, 2], [0], [1], [5, 1, 5, 3, 3, 2, 0, 5, 1, 6, 1, 3, 0, 4, 2, 4, 0, 0, 4, 2, 4, 0, 2, 4, 5, 2, 0, 0, 3, 2, 1, 3, 3, 3, 2, 6, 1, 3, 4], [0], [1, 1, 1, 1, 1, 3, 1, 1, 3, 3, 1, 3, 1, 0, 2, 2, 3, 1, 2, 2, 1, 0, 3, 3, 2, 3, 1, 1, 2, 2, 3, 2, 3, 2, 2, 3, 1, 3, 2, 2, 2, 0, 3, 3, 2, 1, 1, 2, 2, 0, 0, 3, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 2, 0, 0, 2, 1, 3, 0, 0, 3, 3, 2, 2, 2, 0, 3, 1, 2, 0, 0, 1, 3, 2, 2, 1, 1, 2, 0, 1, 2, 1, 3, 2, 3, 2, 2, 3, 2, 1, 1, 2, 1, 3, 0, 3, 0, 2, 0, 1, 0, 0, 2, 2, 1, 3, 3, 0, 3, 1, 1, 3, 1, 2, 0, 1, 0, 0, 1, 3, 0, 2, 1, 1, 1, 2, 1, 1, 1, 1, 3, 3, 1, 2, 0, 0, 3, 3, 3, 1, 0, 2, 0, 0, 3, 2, 3, 0, 2, 0, 0, 0, 2, 0, 3, 1, 2, 1, 0, 3, 1, 3, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 2, 0, 2, 1, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 0, 1, 1, 0, 0, 2, 1], [2, 1, 1, 0, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 2, 0, 1, 2, 2, 2, 0, 2, 1, 2, 2], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(66.0) == int(76.0):{:\\nb1 = int(8.0) \\l int(0.0)\\nif True:{:\\nloopBreak% = 0\\nwhile int(0.0) \\le max(int(9.0), int(4.0)):{:\\nin2 = abs(min(int(1.0), abs(int(0.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = not i1 != divInt(( max(int(6.0), ( mod(int(0.0),in2) * min(max(( max(int(1.0), int(1.0)) - mod(( max(( min(( divInt(max(int(2.0), max(mod(divInt(( in0 - abs(min(mod(int(7.0),int(4.0)), ( divInt(in0,i2) + max(mod(int(6.0),int(4.0)), int(6.0)) ))) ),( i0 + in2 )),( int(2.0) * ( divInt(i1,res0) + divInt(int(5.0),max(i1, in0)) ) )), min(min(( ( divInt(i0,min(int(2.0), mod(in1,i2))) - int(3.0) ) - min(( ( int(6.0) * int(1.0) ) - ( in1 * int(2.0) ) ), ( int(0.0) - min(( min(divInt(divInt(max(divInt(int(3.0),int(2.0)), mod(int(9.0),abs(i0))),abs(i0)),divInt(in1,int(5.0))), i2) + in1 ), ( ( int(6.0) - min(max(i0, min(int(3.0), int(0.0))), max(int(3.0), mod(i2,int(7.0)))) ) * in1 )) )) ), in2), int(7.0)))),max(i2, ( int(8.0) + int(6.0) ))) - int(4.0) ), ( int(2.0) * int(9.0) )) * int(9.0) ), int(5.0)) * abs(max(int(9.0), ( i0 + i0 ))) ),min(min(max(int(7.0), in0), ( i2 * i1 )), max(( min(in0, mod(in0,in0)) - i2 ), ( res0 * min(int(0.0), mod(int(5.0),i1)) )))) ), abs(int(7.0))), max(int(9.0), int(6.0))) )) * in0 ),in1)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 53, 53, 4, 2, 0, 6, 4, 2, 1, 1, 39, 1, 176, 47, 40, 26, 21]}, {"genotype": [[0], [0, 1, 0, 1, 0, 1], [2, 0, 1, 1, 0, 0], [0], [0, 1, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1], [8, 5, 4, 0, 6, 2, 4], [4, 2], [2, 1, 1, 1], [], [0, 1, 0, 0, 0, 1], [0, 0], [1, 2, 1, 1], [0, 1, 1], [1], [1, 5, 4, 1, 3, 2, 4, 3, 4, 5, 3, 5, 5, 0, 6, 0, 2], [1], [2, 0, 0, 3, 2, 3, 0, 0, 3, 3, 2, 1, 3, 0, 2, 0, 2, 0, 2, 3, 3, 1, 1, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 1, 0, 1, 3, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 2, 0, 0, 1, 1, 2], [2, 1, 0, 0, 2, 1, 1, 1], [1, 1, 1, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb2 = ( i1 * in2 ) \\le max(( min(in1, i1) - abs(min(mod(int(8.0),min(in0, ( i2 + ( in1 + mod(max(max(int(5.0), int(4.0)), in0),mod(mod(in1,in2),( in0 * in2 ))) ) ))), in2)) ), ( ( i0 - res0 ) - int(0.0) ))\\ni0 -= i2\\n:}else:{:\\nb1 = not False\\nb1 = False\\n:}\\nb1 = int(62.0) == abs(int(4.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 7, 7, 2, 4, 0, 6, 2, 4, 3, 1, 17, 1, 41, 11, 8, 8, 4]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 2, 1, 0, 0], [0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 7, 4, 3, 9, 7, 6, 3, 5, 9, 6], [1, 4, 0, 2, 4, 4], [0, 1, 1, 2, 0], [], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [], [], [0], [2, 3, 3, 3, 2, 6, 0, 0, 2, 6, 2, 4, 2, 4, 0], [1], [0, 1, 3, 3, 0, 1, 0, 1, 3, 2, 2, 1, 1, 0, 3, 3, 3, 0, 1, 1, 0, 0, 1, 3, 0, 2, 1, 2, 1, 2, 2, 0, 1, 0, 0, 2, 2, 2, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 2, 1, 2, 2], [0, 1, 0, 0], [0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i2 \\g int(1.0)\\nb1 = min(max(in0, int(8.0)), in0) \\le int(7.0)\\nb1 = min(divInt(divInt(int(4.0),int(3.0)),in0), abs(max(abs(i2), int(9.0)))) \\l int(7.0)\\nif res0 == i0:{:\\nb2 = int(6.0) \\le abs(i0)\\nb0 = ( int(3.0) + mod(int(5.0),( mod(i2,int(9.0)) - res0 )) ) \\le i2\\nin1 += mod(( mod(int(6.0),i2) + in1 ),i0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 12, 12, 6, 5, 0, 6, 6, 0, 0, 1, 15, 1, 42, 9, 7, 4, 6]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 0, 1, 1], [0], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 9, 6, 2, 5, 3, 2, 3, 5, 7, 2, 2, 3, 5, 7, 0, 1, 8, 6], [1, 5, 5, 1], [2, 2, 1], [], [0, 1, 1, 1, 1], [0, 0, 0, 0], [2], [], [1], [6, 4, 2, 4, 5, 3, 3, 6, 0, 3, 2, 5, 3, 1, 5, 1, 1, 1, 5, 1, 3, 2, 3, 1, 1, 6, 6], [0], [3, 0, 1, 3, 3, 3, 2, 2, 2, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 2, 1, 2, 3, 0, 3, 2, 1, 0, 1, 2, 1, 1, 2, 0, 3, 2, 0, 0, 3, 0, 1, 2, 3, 0, 0, 3, 3, 3, 2, 1, 0, 0, 3, 3, 1, 1, 2, 1, 0, 3, 0, 3, 2, 2, 3, 3, 0, 2, 1, 3, 2, 2, 0, 1, 0, 2, 0, 0, 3, 3, 0, 1, 3, 0, 3, 2, 0, 0, 1, 1, 2, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 2, 2], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not min(res0, int(7.0)) \\g min(min(abs(( ( divInt(abs(min(( in1 - i2 ), ( in1 - int(9.0) ))),in2) - int(9.0) ) - mod(int(6.0),mod(min(in0, min(( int(2.0) + in0 ), int(5.0))),( int(3.0) + int(2.0) ))) )), mod(res0,abs(( i0 - in0 )))), min(i2, int(3.0)))\\nif divInt(min(in2, in0),min(abs(min(( int(5.0) - i1 ), in2)), abs(abs(int(7.0))))) != int(2.0):{:\\nb2 = mod(int(2.0),i1) != abs(i1)\\n:}else:{:\\nb1 = abs(( divInt(abs(min(i1, ( int(3.0) * min(divInt(divInt(in2,int(5.0)),i1), mod(in0,i2)) ))),max(abs(in0), int(7.0))) * max(i1, max(mod(i1,res0), int(0.0))) )) \\g int(1.0)\\n:}\\nres0 = mod(int(8.0),int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 20, 20, 4, 3, 0, 5, 4, 1, 0, 1, 27, 1, 93, 22, 25, 10, 12]}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [0, 1], [1, 1, 1, 1], [8, 5, 7, 9], [4, 4], [0], [], [1, 1], [0, 0], [], [], [0], [4, 4, 3, 1, 1, 6, 0, 3], [0], [2, 2, 1, 0, 1, 3, 0, 0, 2, 1, 0, 2, 0, 2, 0, 1, 0], [1, 0, 1, 0, 1], [1], [1, 2], [0, 1, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(( int(8.0) - in1 ),int(5.0)) \\le max(in1, in0):{:\\nb0 = mod(int(7.0),i1) \\le ( i1 * divInt(res0,int(9.0)) )\\ni0 = in0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 2, 1, 0, 2, 2, 0, 0, 1, 8, 1, 17, 5, 1, 2, 3]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 0, 2, 0, 1, 0], [0, 0], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 4, 9, 7, 9, 3, 7, 1, 8, 7, 9], [0, 4, 5, 5], [1, 1, 1, 0, 1], [], [0, 0, 1, 1, 1, 1], [0, 0, 0, 0], [1, 0], [0], [0, 1], [2, 5, 4, 3, 5, 3, 5, 3, 5, 3, 4, 0, 5], [], [1, 0, 2, 1, 1, 1, 3, 2, 3, 2, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 3, 0, 3, 1, 0, 1, 0, 1, 3, 3, 1, 3, 0, 2, 2, 2, 2, 2, 2, 1, 0, 3, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 1, 1, 2, 2, 0, 0, 0, 2, 2, 2], [1, 1, 2, 0, 1], [0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb1 = b1\\nif int(3.0) \\l i2:{:\\nb1 = divInt(int(5.0),int(4.0)) \\le int(9.0)\\n:}else:{:\\nb0 = min(mod(abs(( in2 - in1 )),in0), in2) != divInt(max(max(abs(abs(( in0 - min(in2, min(int(7.0), in0)) ))), int(9.0)), in2),int(3.0))\\n:}\\nb1 = min(abs(int(7.0)), abs(in0)) != ( divInt(mod(( mod(( int(1.0) * in1 ),abs(i0)) + in2 ),int(8.0)),int(7.0)) - int(9.0) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 12, 12, 4, 5, 0, 6, 4, 2, 1, 2, 13, 0, 48, 11, 12, 5, 6]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 9, 5, 6, 4, 1, 0, 4, 0, 8, 0, 6, 6, 8, 3, 1, 3, 3, 9, 6, 5, 5, 4, 4, 3, 1], [4, 0, 3, 2, 4, 0, 2, 4, 3, 5, 4, 4], [0, 1, 0, 0, 1, 2, 0, 1, 2], [1, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 1, 2, 0, 1, 3, 1], [1, 0, 1], [1, 1, 1], [5, 4, 3, 1, 6, 2, 1, 5, 4, 2, 0, 2, 4, 1, 4, 5, 6, 6, 5, 6, 4, 5, 4, 6, 5, 6, 5, 0, 0], [1, 1, 0], [1, 0, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 0, 1, 0, 0, 3, 1, 0, 2, 0, 2, 1, 1, 2, 1, 0, 3, 1, 3, 0, 2, 1, 0, 0, 0, 3, 0, 1, 2, 0, 3, 3, 1, 1, 0, 3, 0, 3, 0, 0, 1, 1, 3, 1, 2, 2, 3, 3, 1, 1, 1, 0, 2, 2, 0, 3, 0, 2, 1, 3, 3, 0, 2, 1, 3, 3, 2, 0, 2, 2, 1, 1, 0, 0, 1, 3, 0, 2, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2], [1, 2, 0, 1, 1, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not int(9.0) \\le in2:{:\\nin1 -= abs(( abs(int(0.0)) * min(int(9.0), abs(int(5.0))) ))\\n:}else:{:\\nloopBreak% = 0\\nwhile not min(int(6.0), in0) \\l int(4.0):{:\\nb0 = i1 \\ge res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = min(int(1.0), i2) == divInt(i1,divInt(int(0.0),int(4.0)))\\nb0 = ( divInt(int(0.0),in2) \\le abs(int(8.0)) or abs(in1) \\l divInt(int(0.0),i2) )\\nif i0 == i2:{:\\nb0 = False\\nb1 = min(in1, int(6.0)) \\le divInt(i1,abs(min(int(6.0), int(8.0))))\\n:}else:{:\\nif not in1 \\ge abs(in2):{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( min(res0, res0) != int(3.0) or int(1.0) \\le min(int(3.0), ( ( abs(min(int(3.0), int(9.0))) + int(6.0) ) - in2 )) ):{:\\nb1 = ( divInt(res0,max(in1, ( int(5.0) - abs(abs(in2)) ))) + mod(int(5.0),min(abs(( in1 - ( divInt(int(4.0),int(4.0)) * res0 ) )), in2)) ) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nres0 += abs(in2)\\n:}\\ni0 = ( i0 + int(1.0) )\\nb2 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 6, 11, 27, 27, 12, 9, 2, 21, 12, 9, 3, 3, 29, 3, 91, 16, 22, 10, 8]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 2, 2, 1, 2, 1], [1, 1, 1, 1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 4, 5, 7, 5, 3, 3, 2, 0, 7, 2, 9], [1, 4, 4, 2, 3], [2, 2, 2], [0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2, 1, 2, 2, 0, 2, 2, 3], [1], [], [4, 6, 1, 4, 4, 5, 6, 5, 6, 4, 0, 1, 4, 6, 5, 6, 0, 1, 5, 5, 5, 0, 2, 4, 2, 3, 6, 6], [], [3, 1, 3, 2, 3, 0, 3, 2, 1, 0, 0, 0, 3, 2, 3, 0, 3, 0, 2, 2, 0, 0, 3, 0, 1, 1, 0, 2, 2, 3, 3, 3, 0, 3, 3, 0, 3, 0, 2, 1, 3, 2, 1, 3, 1, 3, 1, 0, 0, 0, 3, 1, 0, 1, 0, 0, 1, 2, 3, 3, 0, 0, 0, 1, 2, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1, 1, 2, 2, 0], [0, 0, 2, 1, 2, 2, 1, 0, 2, 1], [0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not False:{:\\nloopBreak% = 0\\nwhile not max(int(2.0), max(divInt(min(in1, max(( int(9.0) + res0 ), i1)),in1), min(( min(in1, abs(in2)) + mod(( res0 * in2 ),max(res0, int(4.0))) ), int(5.0)))) \\g in1:{:\\nloopBreak% = 0\\nwhile not b2:{:\\nb2 = not not ( ( mod(max(min(max(i0, min(abs(i1), max(in1, ( int(7.0) - max(divInt(int(5.0),max(int(3.0), max(int(3.0), res0))), in2) )))), res0), abs(int(2.0))),i0) * int(0.0) ) \\le i1 and in2 \\le int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( abs(min(in2, in2)) * i0 ) == int(2.0):{:\\nb2 = ( ( mod(i2,( in1 - int(9.0) )) + i2 ) * in0 ) \\ge ( res0 - res0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 13, 13, 5, 3, 1, 13, 5, 8, 1, 0, 28, 0, 76, 15, 20, 10, 5]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 0, 0, 2, 0, 0], [0, 0], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 1, 0, 2, 2, 8, 4, 2, 2, 2, 4, 5, 6, 5, 3, 4, 7, 7, 0, 1, 5, 4, 6, 1, 9, 0, 8, 7, 7, 9, 2, 2, 8, 1, 7, 7, 8, 6, 7, 0, 0, 2, 9, 7, 4, 8, 9, 4, 2, 7, 4, 8, 3, 9, 5, 0, 7, 6, 6, 8, 5, 4, 5], [0, 3, 3], [1, 1], [1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0], [2, 3, 2, 0, 1, 3, 2], [1], [0, 0], [3, 0, 6, 4, 3, 3, 5, 1, 2, 2, 1, 0, 3, 1, 3, 4, 2, 0, 0, 5, 6, 2, 6, 1, 6, 2, 1, 2, 5, 6, 2, 6, 3, 1, 6, 4, 3, 5, 0, 2, 4, 2, 5, 5, 2, 1, 3, 3, 3, 4], [1, 1, 1], [0, 1, 1, 0, 3, 2, 0, 3, 2, 3, 0, 1, 0, 0, 1, 3, 1, 2, 3, 2, 1, 3, 2, 3, 3, 0, 2, 3, 1, 1, 2, 2, 2, 1, 1, 3, 1, 2, 3, 1, 2, 3, 1, 1, 2, 2, 0, 3, 1, 1, 2, 1, 3, 1, 2, 1, 0, 3, 1, 1, 2, 3, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 3, 0, 1, 3, 2, 3, 1, 3, 3, 3, 1, 3, 0, 2, 0, 2, 0, 0, 3, 0, 3, 2, 0, 3, 1, 1, 3, 0, 3, 2, 0, 1, 1, 3, 2, 2, 3, 3, 2, 0, 1, 2, 0, 1, 1, 2, 2, 1, 3, 2, 3, 3, 3, 2, 2, 3, 0, 3, 3, 1, 2, 1, 3, 3, 2, 1, 2, 0, 0, 1, 0, 3, 2, 0, 3, 0, 2, 3, 1, 1, 1, 3, 3, 0, 0, 0, 1, 1, 2, 0, 3, 3, 1, 2, 1, 0, 3, 0, 2, 1, 2, 2, 0, 3, 1, 1, 3, 2, 2, 0, 2, 0, 2, 2, 3, 2, 3, 3, 3, 1, 0, 2, 1, 1, 3, 2, 3, 1, 0, 3, 3, 2, 1, 0, 0, 3, 3, 3, 3, 1, 1, 0, 3, 3, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 3, 2, 0, 2, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 2, 1, 1, 2, 2, 2, 0, 1, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 1, 1, 2, 2, 2], [0, 1, 2, 2, 0, 0, 0, 1, 2, 0, 1, 0, 2, 1, 2, 1, 0, 2, 0, 2, 1, 0, 2, 2, 1, 2, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not in0 \\l int(6.0):{:\\ni0 += int(2.0)\\nres0 -= in1\\nif ( not b1 or False ):{:\\nin0 *= min(( in0 * max(mod(min(in2, int(1.0)),i1), i2) ), int(0.0))\\n:}\\n:}\\nb1 = ( not max(int(2.0), ( max(( int(2.0) + max(mod(max(min(i2, divInt(min(int(8.0), int(4.0)),( mod(mod(int(2.0),int(2.0)),abs(int(2.0))) + ( abs(int(4.0)) + mod(max(int(5.0), int(6.0)),( ( i1 - abs(int(5.0)) ) * int(3.0) )) ) ))), mod(int(4.0),max(int(7.0), divInt(int(7.0),i0)))),max(int(0.0), int(1.0))), ( abs(mod(( divInt(int(5.0),mod(int(4.0),divInt(int(6.0),in0))) + int(1.0) ),i1)) - abs(in0) )) ), int(9.0)) + abs(divInt(min(int(0.0), max(min(abs(int(8.0)), max(in1, mod(i2,divInt(i0,i0)))), min(in2, min(divInt(res0,abs(int(7.0))), int(7.0))))),min(i2, min(divInt(res0,int(9.0)), int(2.0))))) )) \\ge min(divInt(( min(min(( i1 * int(2.0) ), ( res0 - int(8.0) )), int(1.0)) * divInt(( int(7.0) - max(divInt(abs(max(max(divInt(( max(i2, max(abs(int(7.0)), ( int(8.0) + max(abs(divInt(int(6.0),divInt(i1,i2))), int(7.0)) ))) * in2 ),abs(( res0 + abs(i2) ))), mod(abs(int(0.0)),int(0.0))), int(2.0))),max(abs(res0), in0)), i1) ),int(9.0)) ),int(7.0)), ( res0 * abs(min(int(4.0), ( int(8.0) - in1 ))) )) and max(in0, ( int(9.0) + ( divInt(in2,min(int(4.0), int(2.0))) * abs(divInt(mod(i0,( i2 * ( mod(max(( min(max(min(int(7.0), in1), ( int(4.0) - int(8.0) )), abs(( min(int(3.0), i2) * max(min(( int(9.0) + in2 ), in2), min(abs(min(max(int(5.0), int(0.0)), i2)), max(abs(i1), int(7.0)))) ))) - int(6.0) ), divInt(int(6.0),abs(int(8.0)))),in0) - in0 ) )),int(5.0))) ) )) \\ge abs(mod(in0,mod(mod(int(4.0),in1),int(5.0)))) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 64, 64, 3, 2, 2, 10, 3, 7, 1, 2, 50, 3, 235, 58, 66, 29, 32]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 7, 9, 4, 8, 7, 4, 2, 5, 3, 4, 1, 9, 3, 9, 0, 4, 9, 6, 8, 6, 9], [4], [2], [], [1], [0], [], [], [], [0, 3, 0, 4, 5, 3, 5, 1, 3, 2, 4, 5, 0, 6, 2, 5, 1, 0, 2, 3, 4, 4, 5], [], [0, 2, 2, 2, 2, 0, 3, 3, 1, 3, 3, 1, 2, 1, 0, 2, 2, 3, 2, 3, 0, 1, 3, 0, 3, 1, 0, 2, 1, 0, 3, 0, 3, 3, 1, 1, 0, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1, 3, 1, 2, 2, 3, 2, 3, 1, 1, 1, 1, 2, 3, 1, 3, 2, 2, 0, 1, 0, 3, 1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 3, 0, 3, 2, 0, 2, 3, 1, 2, 2, 3, 1, 0, 0, 1, 0, 3, 0, 3, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 2, 1, 0, 2, 1, 2, 2, 2, 2, 1, 2, 2], [1, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i0 \\le ( ( ( ( in0 - min(max(int(6.0), max(abs(int(3.0)), ( int(7.0) + i0 ))), ( mod(max(mod(max(in1, int(9.0)),min(in2, min(int(4.0), in0))), divInt(int(8.0),in2)),min(i1, abs(max(int(7.0), int(4.0))))) * in0 )) ) + int(2.0) ) + ( max(divInt(divInt(int(5.0),max(( max(int(3.0), abs(int(4.0))) - divInt(( max(divInt(min(int(1.0), int(9.0)),int(3.0)), int(9.0)) - ( abs(int(0.0)) - max(mod(mod(i2,int(4.0)),in1), abs(int(9.0))) ) ),in2) ), ( i0 - mod(mod(res0,i2),( divInt(abs(in2),abs(divInt(i1,divInt(abs(int(6.0)),( mod(max(int(8.0), i0),i2) + int(6.0) ))))) + in0 )) ))),abs(in1)), abs(int(9.0))) * in1 ) ) * in2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 23, 23, 1, 1, 0, 1, 1, 0, 0, 0, 23, 0, 100, 28, 26, 13, 15]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [2], [], [0], [], [0], [], [], [6, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 1], [2, 8, 8], [2], [1], [1], [0, 1, 0, 0], [0], [3, 2, 1], [1], [], [1, 2, 4, 0, 3, 2, 4], [1], [3, 2, 2, 3, 0, 1, 0, 1, 0, 2, 2, 0, 0, 1, 0], [1, 0, 1, 0], [1, 1], [0, 1, 2], [1, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( max(mod(( max(i1, int(2.0)) + i2 ),int(8.0)), in1) == divInt(( i0 - in0 ),int(8.0)) or not False )\\ni2 *= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 1, 4, 1, 3, 1, 0, 7, 1, 15, 4, 2, 3, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 2], [0], [0, 0, 0], [], [3, 1, 0], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( False and b2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 1, 3, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1], [0, 0, 2, 0, 0, 1, 0], [0], [1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 3, 8, 9, 4, 9, 3, 4, 7, 2, 1, 1, 9, 1, 0, 1, 4, 0, 0], [5, 3, 4, 3, 3, 4], [0, 1, 1], [0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [3, 3, 3, 1, 2], [0], [0], [0, 0, 2, 5, 3, 1, 2, 1, 1, 2, 1, 2, 5, 2, 1, 6, 0, 4, 0, 3, 3, 2, 1, 4, 0, 2, 5, 1, 4, 0], [1, 0, 1], [3, 2, 3, 0, 2, 2, 3, 2, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2, 1, 2, 0, 0, 3, 0, 3, 2, 3, 1, 0, 2, 3, 0, 0, 0, 3, 3, 0, 3, 1, 1, 2, 2, 0, 1, 0, 0, 3, 1, 0, 0, 0, 3, 2, 2, 1, 3, 2, 3, 2, 1, 1, 2, 2, 1, 1, 1, 0, 0, 3, 1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 2, 1, 2, 2, 1, 1, 2, 0, 1, 0, 1, 2, 1, 1, 0, 0, 0], [0, 1, 1, 1, 2, 1, 2, 2, 1, 0, 1, 1, 2, 0, 2], [0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += min(divInt(abs(i0),( ( max(divInt(abs(abs(max(( i2 - int(2.0) ), in2))),in0), int(6.0)) - int(3.0) ) - i1 )), divInt(( int(8.0) * divInt(i2,i1) ),max(i1, abs(( min(int(9.0), i2) - ( max(i1, i2) * in2 ) )))))\\ni2 = min(max(i1, abs(int(4.0))), int(9.0))\\nif ( ( res0 * int(3.0) ) - i0 ) != in1:{:\\nb0 = max(int(4.0), i0) \\ge in0\\nb1 = ( in0 \\le max(( ( int(7.0) + min(( min(mod(int(2.0),int(1.0)), divInt(( int(1.0) - int(9.0) ),int(1.0))) - i2 ), i1) ) * min(int(0.0), int(1.0)) ), int(4.0)) and ( ( True and not in1 \\ge int(0.0) ) or i0 \\ge ( i2 + in2 ) ) )\\ni1 *= in1\\nb1 = i0 \\le int(0.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 20, 20, 6, 3, 3, 11, 6, 5, 1, 1, 30, 3, 84, 19, 18, 15, 6]}, {"genotype": [[0], [1], [1], [], [0], [1], [9], [2], [0], [], [0, 1], [0], [2], [], [], [3], [], [0, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not in0 == abs(int(9.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1], [2, 0, 1, 0, 0, 0], [0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 1, 3, 0, 5, 9, 4, 7, 7, 9, 2, 9, 7, 9, 6, 2, 0, 6, 6, 6, 4, 9, 4, 8, 7, 8, 3, 4, 6, 1, 7, 4, 1, 6, 6, 9, 8], [1, 2, 4, 4], [2, 1, 2, 2], [0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0], [1, 3, 1, 3, 1], [1, 1, 0], [1], [3, 2, 0, 4, 1, 6, 1, 3, 1, 4, 2, 0, 5, 4, 5, 4, 2, 5, 5, 0, 4, 3, 2, 5, 3, 0, 3, 3, 0, 0, 2, 5, 3, 5, 2, 3, 1, 1, 5, 2, 2, 5, 1, 4, 2], [0], [0, 2, 3, 2, 1, 1, 2, 3, 1, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 0, 0, 3, 2, 3, 2, 3, 2, 3, 2, 2, 2, 1, 3, 1, 1, 3, 1, 2, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 0, 0, 3, 2, 2, 1, 0, 3, 1, 0, 2, 2, 0, 0, 3, 0, 2, 2, 1, 1, 3, 2, 3, 1, 0, 2, 2, 2, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 0, 0, 1, 0, 3, 2, 3, 2, 0, 3, 2, 3, 3, 2, 0, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 3, 2, 3, 1, 1, 1, 0, 2, 1, 2, 3, 3, 3, 1, 1, 0, 3, 3, 1, 1, 0, 3, 2, 2, 3, 1, 1, 3, 3, 3, 3, 2, 0, 3, 1, 1, 2, 3, 1, 2, 2, 0, 3, 0, 1, 0, 0, 1, 0, 2, 0, 1, 3, 0, 1, 1, 3, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1, 1, 0, 2, 1, 2, 2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 1, 2, 2, 2, 2, 1, 0, 2, 0, 2, 1], [0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 0, 2, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nb2 = ( in0 \\g divInt(max(( int(8.0) + int(1.0) ), ( max(int(1.0), i2) + i0 )),min(in1, min(min(min(i1, max(res0, i1)), in0), max(( min(divInt(abs(mod(min(mod(( ( int(3.0) - abs(int(0.0)) ) + int(5.0) ),max(int(9.0), ( i1 + in1 ))), min(i2, ( max(max(i0, divInt(in2,in1)), in2) - min(( mod(int(4.0),in1) + abs(int(7.0)) ), i2) ))),( mod(in2,in2) * max(i0, ( mod(int(7.0),int(9.0)) - abs(divInt(abs(int(2.0)),in1)) )) ))),divInt(divInt(( int(9.0) + ( min(( int(7.0) + min(abs(( ( ( in0 + i2 ) * int(9.0) ) - in2 )), min(mod(min(mod(in0,abs(divInt(abs(max(mod(i0,in0), int(6.0))),in0))), int(2.0)),i0), divInt(i0,int(0.0)))) ), int(6.0)) - i2 ) ),min(( max(int(6.0), int(6.0)) * int(4.0) ), in2)),( int(9.0) - ( abs(max(min(int(4.0), int(8.0)), in0)) - abs(max(int(7.0), int(8.0))) ) ))), in2) + max(divInt(( abs(int(3.0)) * int(4.0) ),abs(abs(abs(max(divInt(i2,min(int(6.0), int(1.0))), ( abs(int(7.0)) + ( ( in0 - min(i1, int(4.0)) ) + i1 ) )))))), in2) ), int(1.0))))) and False )\\n:}else:{:\\nb1 = i2 == ( i2 - int(6.0) )\\nb2 = ( abs(in2) \\le int(6.0) and True )\\n:}\\nb2 = int(9.0) \\le max(i1, in1)\\ni2 = int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 38, 38, 4, 4, 2, 9, 4, 5, 3, 1, 45, 1, 171, 42, 47, 24, 18]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [6, 4, 5], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= int(645.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1], [1, 2, 8, 6], [0], [0], [], [1], [0], [], [], [], [5, 0, 5, 2, 0, 5, 1, 0, 1, 6, 2], [], [3, 3, 1, 2, 2, 1, 0, 2, 1, 0, 3, 3, 0, 0, 2, 3, 3, 0, 0, 3, 2, 0, 0, 1, 3, 2, 0, 0, 0], [1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 2, 1, 1], [2, 1, 1, 1], [1, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(max(int(1.0), mod(( int(2.0) * in2 ),( int(8.0) - i0 ))), max(max(in2, i2), divInt(min(abs(i0), in2),max(( i1 - i0 ), int(6.0))))) \\l max(( i1 - res0 ), i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 11, 0, 29, 6, 8, 4, 2]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 0, 1, 2, 0], [1, 1], [1, 0, 0], [1, 1, 1], [8, 5, 9], [5, 5, 4], [2, 2, 1], [], [0, 1, 1, 1], [0, 0, 0], [0], [], [], [3, 5, 5, 0, 6], [1], [0, 1, 0, 1, 1, 0, 0], [], [], [2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nin0 *= in2\\nb2 = int(8.0) != in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(5.0) != int(9.0):{:\\nb1 = i0 \\le res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 3, 3, 3, 3, 0, 4, 3, 1, 0, 0, 5, 1, 7, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1], [7], [4], [2, 0], [0], [0, 0, 0, 0, 0, 1], [0], [3, 2, 0, 2, 2], [], [], [0], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( not b0 and not not i0 \\le int(7.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 6, 1, 5, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 2, 2, 1, 0, 1, 0, 1], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 9, 6, 3, 9, 1, 9, 7], [0, 4], [1], [], [1, 0, 1], [0, 0], [1], [0], [1], [1, 3, 0, 4, 5, 6, 4, 1, 5, 2, 1, 1, 2, 5, 4, 0, 2], [0, 0, 1, 1, 1, 0], [3, 0, 3, 3, 3, 1, 0, 2, 2, 1, 2, 3, 1, 0, 1, 1, 3, 0, 3, 3, 1, 0, 0, 1, 3, 0, 0, 0, 1, 1, 3, 0, 0], [1, 1, 0], [2, 1, 1, 1, 0, 1, 2, 2, 1, 0], [1, 1, 1, 1], [1, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = abs(i1) \\l max(max(max(int(2.0), in0), mod(divInt(int(4.0),( min(int(9.0), i0) - int(6.0) )),int(3.0))), max(in1, abs(abs(int(9.0)))))\\nin2 = res0\\nif True:{:\\nloopBreak% = 0\\nwhile in1 \\le int(1.0):{:\\ni1 = max(in2, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 -= i1\\ni2 -= int(9.0)\\nin2 -= int(7.0)\\nin1 = min(i0, i2)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 2, 7, 9, 9, 2, 1, 0, 3, 2, 1, 1, 1, 17, 6, 33, 3, 10, 4, 2]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1], [7], [], [2], [], [0], [], [1], [1], [], [5, 0], [0], [2, 0, 1], [1], [], [], [0]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\nin2 = divInt(i0,int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 3, 1, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1], [8, 3, 4, 7, 8], [0, 2], [0], [0], [0, 0, 1, 1], [0, 0], [3, 2], [], [], [3], [], [2, 0, 1, 1, 3, 1, 1, 1], [0], [0], [2], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not ( in0 * int(8.0) ) \\l int(3.0) and min(int(4.0), int(7.0)) == int(8.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 2, 1, 1, 4, 2, 2, 0, 0, 1, 0, 8, 1, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1], [8, 6, 2], [5], [1], [], [1], [0], [], [], [], [2, 0, 4], [], [1, 2, 3, 2, 0, 0, 0, 1], [1, 1], [1], [], [1, 1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(86.0) != mod(max(mod(i2,i0), in1),int(2.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 8, 2, 1, 0, 2]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1, 0, 0, 1], [3, 4, 5, 8, 0], [], [], [], [], [], [], [], [], [0, 2, 3], [0, 1], [2, 3, 1, 1, 0, 1], [0], [1], [2, 0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( max(int(3.0), int(4.0)) * i2 )\\nin0 += int(580.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 6, 1, 1, 2, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 4, 4, 4, 1, 2, 9, 8, 2, 7, 7, 5, 7, 0, 7, 2, 4, 5, 5, 3, 1, 2, 6], [2], [2, 2], [], [0, 1, 0], [0], [2, 1], [0], [], [2, 0, 0, 3, 3, 2, 5, 2, 1, 2, 2, 6, 4, 4, 2, 6, 2, 6, 1, 2, 6, 0, 3, 4, 1, 4], [], [2, 3, 3, 1, 1, 3, 2, 3, 3, 1, 2, 0, 3, 0, 0, 3, 0, 3, 2, 1, 0, 2, 3, 2, 2, 1, 1, 1, 2, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 0, 0, 0, 1, 1, 2, 2, 2, 0, 0, 0, 2, 0, 3, 1, 0, 3, 2, 2, 3, 3, 1, 0, 1, 3, 3, 3, 3, 1, 0, 0, 1, 2, 1, 2, 2, 2, 0, 3, 3, 2, 1, 1, 3, 1, 1, 2, 1, 0, 0, 3, 3, 3, 3, 1, 0, 0, 3, 0, 2, 0, 3, 0, 0, 3, 2, 3, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0], [2, 2, 1, 0, 1, 2, 1, 0, 1, 1, 0, 1, 2, 1, 1, 2, 1, 1, 0, 0, 1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 0, 2], [2, 0, 0, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 1, 0, 1, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not ( abs(abs(int(2.0))) * int(5.0) ) == max(( min(max(int(4.0), mod(i2,abs(i0))), i0) + max(in0, min(( int(4.0) + in0 ), ( max(divInt(( int(4.0) - int(1.0) ),int(2.0)), divInt(( max(( min(( divInt(( max(int(9.0), abs(i2)) - in2 ),i2) + int(8.0) ), int(2.0)) * ( divInt(divInt(i1,i2),i2) * ( res0 * max(int(7.0), in1) ) ) ), max(mod(( abs(max(int(7.0), in1)) - int(5.0) ),max(min(min(max(int(7.0), i2), res0), int(0.0)), ( int(7.0) - ( divInt(( i2 * abs(abs(mod(int(2.0),int(4.0)))) ),max(int(5.0), int(5.0))) + divInt(int(3.0),res0) ) ))), i1)) - min(abs(abs(max(int(1.0), i2))), res0) ),abs(i0))) + ( in0 - max(in1, i1) ) ))) ), min(( abs(int(2.0)) * int(6.0) ), in1))\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 24, 24, 1, 2, 0, 3, 1, 2, 1, 0, 26, 0, 109, 27, 32, 17, 10]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 4], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [0, 0, 2, 0, 0, 1], [0], [1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 4, 2, 0, 6, 4, 4, 7, 8, 3, 1, 9, 5, 8, 5, 9, 3, 2], [1, 3, 5], [0, 0, 2, 0], [], [0, 1, 0, 0, 1, 1], [0, 0, 0], [2, 0, 2], [], [1], [4, 2, 2, 6, 2, 2, 5, 3, 6, 5, 6, 5, 6, 0, 2, 4, 1, 1, 3, 6, 6, 3, 3, 1], [0, 1], [1, 1, 0, 0, 1, 1, 2, 2, 3, 2, 1, 0, 2, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 1, 3, 2, 0, 3, 2, 1, 2, 3, 2, 0, 2, 3, 2, 1, 3, 2, 2, 0, 2, 3, 0, 3, 1, 2, 2, 0, 1, 1, 3, 3, 3, 2, 1, 0, 2, 1, 3, 1, 0, 3, 0, 2, 3, 1, 0, 3, 0, 0, 1, 3, 0, 1, 1, 3, 3, 1, 0, 3, 0, 0], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 2, 2, 0, 2, 2, 1, 2, 2, 0, 1, 0, 2, 1, 2, 0, 0, 2, 2, 0, 0, 1, 1], [2, 2, 0, 1, 1, 2, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(3.0)\\ni2 *= int(0.0)\\nif not i2 \\g res0:{:\\nb0 = b0\\nb2 = not int(4.0) \\ge int(2.0)\\n:}else:{:\\nb0 = divInt(( min(mod(int(0.0),i2), divInt(max(abs(abs(min(abs(i2), in2))), in0),divInt(res0,int(6.0)))) * abs(mod(in2,max(( int(4.0) + mod(abs(( res0 - mod(abs(( int(4.0) - min(( divInt(in2,( max(res0, min(int(7.0), ( ( i0 * int(8.0) ) - int(3.0) ))) - abs(max(abs(( int(1.0) + i2 )), ( int(9.0) - min(int(5.0), in1) ))) )) + min(i1, ( abs(int(8.0)) + i1 )) ), abs(in0)) )),res0) )),int(5.0)) ), min(res0, int(9.0))))) ),int(3.0)) != min(max(int(2.0), in0), max(in0, i1))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 19, 19, 3, 4, 0, 6, 3, 3, 0, 1, 24, 2, 84, 19, 24, 12, 8]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 4], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 0, 1, 0], [1, 0], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 5, 4, 0, 0, 1, 9, 4, 2, 4, 5, 5, 0, 9, 1, 9, 2, 1, 1, 9, 6, 7, 4, 7, 1, 0, 5, 8, 8, 2, 6, 7, 5, 4, 2, 5, 9, 3, 7, 8, 4, 0, 0, 7, 3, 2, 9, 4, 3, 8, 0, 5, 0, 3, 8, 9, 3, 6, 2, 7, 3, 6, 1, 1, 5, 5, 5, 3, 6, 6, 2, 1, 0, 3], [1, 2, 2, 2], [2], [1, 0], [1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0], [3, 3, 1], [1], [1], [5, 0, 2, 6, 0, 0, 2, 6, 1, 3, 0, 5, 6, 1, 4, 3, 2, 6, 4, 4, 1, 3, 2, 3, 1, 2, 1, 6, 5, 2, 5, 1, 1, 0, 4, 2, 0, 0, 6, 0, 2, 6, 0, 3, 1, 5, 2, 4, 5, 5, 6, 2, 4, 4, 1, 1, 3, 3, 5, 2, 3, 3, 4, 5, 5, 0, 0, 2, 5, 6, 2, 0, 4, 1, 5, 0, 6, 0, 1, 6, 6, 5, 5, 6, 1, 2, 0, 4, 5, 4], [0, 0], [2, 0, 3, 0, 2, 1, 0, 1, 3, 0, 2, 3, 2, 1, 2, 1, 3, 2, 0, 2, 3, 3, 0, 0, 1, 3, 0, 2, 2, 3, 3, 3, 1, 1, 1, 3, 3, 1, 3, 0, 3, 0, 0, 2, 3, 0, 3, 1, 3, 0, 3, 3, 1, 3, 2, 0, 3, 3, 0, 2, 3, 1, 3, 2, 2, 2, 3, 2, 0, 2, 1, 2, 3, 3, 0, 0, 3, 3, 2, 0, 3, 2, 3, 3, 2, 0, 3, 2, 3, 1, 2, 0, 0, 2, 3, 1, 3, 3, 0, 2, 3, 0, 2, 0, 0, 2, 2, 2, 3, 1, 0, 0, 3, 0, 0, 2, 3, 3, 2, 3, 1, 3, 3, 0, 2, 1, 3, 3, 0, 2, 2, 2, 0, 2, 0, 1, 1, 3, 3, 1, 1, 3, 1, 0, 2, 0, 2, 3, 3, 1, 3, 0, 2, 3, 2, 1, 3, 2, 0, 1, 1, 2, 3, 3, 1, 2, 3, 1, 2, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 1, 3, 1, 1, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 3, 1, 0, 1, 3, 2, 2, 0, 2, 0, 3, 0, 3, 2, 0, 1, 1, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 2, 3, 1, 0, 3, 3, 2, 3, 0, 1, 2, 0, 0, 2, 2, 1, 2, 2, 1, 1, 0, 1, 2, 3, 3, 1, 1, 1, 3, 3, 2, 0, 1, 1, 3, 0, 1, 3, 2, 2, 2, 1, 3, 3, 3, 3, 0, 3, 2, 1, 3, 2, 1, 1, 0, 1, 3, 2, 0, 0, 2, 0, 0, 3, 2, 3, 3, 3, 1, 3, 1, 3, 0, 0, 0, 3, 0, 0, 3, 3, 2, 0, 1, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 3, 3, 1, 0, 1, 0, 1, 0, 1, 3, 3, 2, 2, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 2, 2, 0, 0, 0, 2, 1, 0, 2, 1, 2, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 2, 0, 2, 2, 1, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 1, 2, 2, 0, 1, 1, 1, 0, 0, 1, 1, 2, 1, 2, 2, 2, 1, 0, 1, 1, 1, 2, 1, 1, 2, 1, 2, 0, 1, 2, 0, 2, 1, 1, 1, 1, 0, 1, 2, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 2, 1, 2, 2, 0, 0, 0, 2, 2, 2, 0], [0, 2, 2, 1, 1, 1, 1, 0, 0, 1, 2, 0, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 114, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(in2,max(i0, ( int(1.0) + i2 ))) \\g int(4.0):{:\\nif ( ( False or min(res0, divInt(min(( int(5.0) * ( int(4.0) * abs(( i0 - divInt(abs(min(i0, i2)),int(0.0)) )) ) ), min(res0, divInt(divInt(min(abs(max(int(0.0), int(1.0))), int(9.0)),min(abs(int(4.0)), max(i1, abs(in0)))),i0))),( min(in2, abs(int(2.0))) - min(res0, min(max(int(4.0), max(( i1 - abs(abs(in1)) ), ( abs(int(5.0)) - max(divInt(( ( max(( in0 + divInt(int(5.0),( abs(min(i2, res0)) + abs(abs(( in1 - max(divInt(min(min(mod(in1,abs(( abs(int(0.0)) * ( i1 + in0 ) ))), mod(min(int(9.0), min(min(i2, ( max(in0, mod(i1,i2)) * mod(divInt(( max(int(1.0), i1) * res0 ),max(in2, i2)),( max(min(( max(int(9.0), abs(abs(in2))) + divInt(int(2.0),min(max(i1, mod(( ( i1 - ( i0 - int(1.0) ) ) * int(1.0) ),max(max(int(9.0), int(6.0)), min(int(7.0), in1)))), divInt(i2,divInt(min(max(int(4.0), max(i0, ( abs(( int(7.0) - max(( i0 - int(1.0) ), int(0.0)) )) - divInt(abs(abs(int(5.0))),mod(abs(int(8.0)),mod(( int(8.0) + mod(int(2.0),( divInt(res0,int(6.0)) * i0 )) ),int(7.0)))) ))), i2),divInt(res0,( i0 + ( int(5.0) - max(int(4.0), int(2.0)) ) )))))) ), mod(int(5.0),int(9.0))), in0) - int(3.0) )) )), divInt(i1,int(7.0)))),in2)), int(8.0)),i2), min(int(4.0), in1)) ))) )) ), int(0.0)) - max(divInt(( in2 + ( in2 + max(res0, max(( i2 - int(0.0) ), int(7.0))) ) ),in1), in1) ) - abs(i1) ),max(max(int(3.0), i1), abs(max(int(2.0), ( abs(int(9.0)) + in0 ))))), min(max(divInt(abs(in0),int(4.0)), mod(in2,i2)), mod(divInt(int(3.0),divInt(( int(8.0) - int(0.0) ),in0)),int(5.0)))) ))), ( min(abs(int(0.0)), int(3.0)) - int(8.0) ))) ))) == max(max(( in0 - int(9.0) ), int(3.0)), max(in1, int(6.0))) ) and max(divInt(divInt(mod(int(2.0),min(max(abs(max(in2, min(mod(int(7.0),min(mod(int(3.0),int(6.0)), in2)), int(1.0)))), max(( i0 + i0 ), ( i2 - in2 ))), max(( max(min(min(int(1.0), max(int(5.0), max(res0, i2))), i0), abs(in1)) - i1 ), max(abs(( in2 * int(5.0) )), mod(i0,int(5.0)))))),abs(min(int(3.0), min(min(int(6.0), mod(res0,i0)), i1)))),( divInt(res0,( res0 * ( in2 * abs(abs(int(6.0))) ) )) * in2 )), int(2.0)) == res0 ):{:\\nb2 = int(1.0) == i1\\n:}else:{:\\ni2 = int(0.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = abs(min(( mod(int(3.0),in1) - in2 ), in1))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 75, 75, 4, 1, 2, 7, 4, 3, 1, 1, 90, 2, 348, 83, 102, 43, 40]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 2, 1, 2, 0], [1, 0, 1], [0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 7, 1, 9, 6, 5, 5, 1, 3, 5, 7, 7, 7, 8, 5, 5, 2, 8, 3, 9, 6, 7, 0, 1, 7, 4, 8, 4, 0, 2, 9, 4, 6, 0, 6, 0, 6, 0, 1, 6, 5, 0, 1, 4, 4, 6, 8, 4], [4, 0, 2, 0, 0, 0, 4, 0, 1], [0, 0, 2, 0, 2], [1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 0, 3, 1, 3, 1, 3, 3, 3, 3, 0], [1, 0], [1], [6, 1, 3, 1, 2, 6, 2, 5, 4, 5, 0, 5, 3, 4, 1, 4, 2, 3, 2, 3, 3, 3, 2, 1, 2, 3, 1, 1, 5, 2, 1, 0, 1, 5, 5, 3, 4, 2, 2, 6, 0, 5], [1, 0, 1], [2, 1, 1, 0, 0, 0, 2, 0, 3, 3, 2, 0, 3, 2, 1, 0, 1, 0, 1, 1, 1, 1, 1, 3, 0, 0, 3, 3, 1, 0, 2, 3, 1, 3, 1, 3, 1, 0, 2, 2, 3, 2, 2, 2, 1, 1, 1, 2, 3, 2, 1, 2, 0, 3, 0, 3, 1, 2, 0, 1, 3, 3, 1, 3, 1, 0, 2, 2, 2, 0, 1, 0, 2, 2, 0, 1, 1, 3, 1, 2, 1, 1, 2, 1, 3, 3, 1, 3, 0, 3, 0, 1, 1, 2, 0, 1, 3, 0, 2, 2, 2, 2, 3, 1, 1, 0, 1, 1, 2, 2, 0, 1, 3, 3, 3, 2, 0, 0, 2, 0, 0, 2, 3, 1, 3, 1, 1, 2, 1, 0, 1, 3, 1, 0, 3, 2, 3, 3, 2, 1, 3, 1, 0, 1, 3, 1, 2, 0, 0, 2, 0, 3, 0, 3, 0, 2, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 2, 1, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 2, 0, 1, 2], [1, 1, 0, 2, 0, 2, 0, 1, 2, 2, 2, 0, 1, 1, 0, 0, 0, 2, 2, 0, 2, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not divInt(int(1.0),int(2.0)) \\le res0\\ni1 -= in0\\nloopBreak% = 0\\nwhile i1 \\l ( i2 - max(abs(( res0 + max(divInt(int(7.0),i2), int(1.0)) )), in2) ):{:\\nin1 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( int(6.0) == int(5.0) or not b2 )\\nif ( False or ( True and ( int(5.0) \\l int(1.0) and max(in2, i0) \\l abs(min(int(3.0), in2)) ) ) ):{:\\nin0 *= mod(max(int(5.0), min(int(7.0), abs(int(7.0)))),in1)\\n:}else:{:\\nloopBreak% = 0\\nwhile ( ( ( mod(abs(( ( mod(int(7.0),int(8.0)) + int(5.0) ) * ( max(( int(5.0) + mod(i1,min(in1, min(int(2.0), divInt(i2,int(8.0))))) ), min(min(int(3.0), max(int(9.0), in0)), divInt(( ( i2 - int(6.0) ) * in0 ),mod(( in0 * int(7.0) ),int(0.0))))) * max(int(1.0), ( int(7.0) + int(4.0) )) ) )),( int(8.0) - min(max(int(4.0), max(in0, max(i2, int(0.0)))), int(2.0)) )) - ( i1 + int(9.0) ) ) \\l min(i2, mod(( divInt(( min(int(4.0), int(6.0)) + in0 ),int(0.0)) + int(6.0) ),( divInt(i1,int(0.0)) * abs(max(abs(( i1 * in2 )), ( i2 + i1 ))) ))) or ( divInt(max(int(6.0), max(int(0.0), int(1.0))),divInt(int(6.0),i0)) \\le int(5.0) and min(int(0.0), i1) \\l max(( min(min(mod(int(1.0),abs(int(4.0))), in2), int(4.0)) * min(int(6.0), mod(in2,in0)) ), ( in1 + max(i2, abs(i2)) )) ) ) or ( mod(int(8.0),res0) - ( i0 - in2 ) ) \\g int(4.0) ):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 49, 49, 9, 5, 7, 22, 9, 13, 2, 1, 42, 3, 163, 39, 36, 24, 17]}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 0, 1, 0, 1], [0], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 2, 0, 5, 7, 0, 6, 8, 3, 6, 5, 4, 3, 9, 7, 5, 5, 8, 4, 0, 8, 4, 9], [0], [2], [0, 0], [0, 0, 0, 0, 1, 0], [0], [3, 3, 2, 1, 0], [1], [1], [0, 5, 2, 5, 1, 6, 1, 3, 2, 4, 2, 2, 1, 5, 6, 6, 0, 1, 1, 3, 4, 0, 6, 1, 2, 5], [0, 0, 1, 1], [3, 2, 1, 3, 0, 0, 0, 2, 3, 3, 2, 3, 2, 3, 1, 3, 2, 2, 2, 1, 0, 3, 3, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 0, 2, 0, 3, 2, 0, 2, 0, 1, 0, 2, 3, 3, 1, 1, 2, 1, 2, 3, 3, 0, 1, 1, 3, 1, 2, 3, 3, 3, 1, 1, 0, 2, 3, 0, 1, 1, 1, 0, 3, 3, 3, 0, 1, 2, 0, 3, 3, 1, 0, 1, 3, 0, 2, 1, 2, 3, 2, 3, 0, 2, 0, 1, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [2, 2, 2, 2, 1, 2, 2, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 2, 1, 2, 2, 1, 0, 2, 2, 0, 2, 1], [1, 2, 0, 2, 1, 0, 0, 2, 2, 0, 2, 1, 0, 0, 2], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( not False and abs(( int(2.0) - abs(i0) )) \\l in2 ) and b2 ):{:\\ni2 = in2\\ni1 = divInt(abs(abs(mod(max(( abs(int(5.0)) * abs(( mod(( int(2.0) + res0 ),max(max(divInt(( divInt(i1,int(0.0)) * min(int(5.0), in0) ),max(max(i2, divInt(in1,max(divInt(i2,mod(i2,int(7.0))), i1))), ( abs(abs(int(0.0))) - int(6.0) ))), mod(int(8.0),( max(max(in2, int(3.0)), int(6.0)) + max(int(5.0), ( min(abs(max(int(4.0), int(3.0))), res0) + ( abs(res0) * int(9.0) ) )) ))), int(7.0))) * int(5.0) )) ), i0),abs(max(min(i1, int(5.0)), ( i1 + abs(abs(int(8.0))) )))))),in0)\\n:}else:{:\\nin1 *= int(4.0)\\n:}\\ni0 -= min(res0, divInt(int(0.0),( abs(( max(i1, ( i2 + int(8.0) )) + divInt(in2,int(4.0)) )) * int(9.0) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 24, 24, 1, 1, 2, 6, 1, 5, 1, 1, 26, 4, 100, 24, 30, 15, 11]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 2, 2, 2, 0, 1, 0, 1, 2, 1, 1], [0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 8, 0, 6, 1, 4, 4, 9, 7, 2, 3, 1, 7, 9, 7, 9, 5, 3, 0, 8, 8, 4, 1, 3, 5, 5, 4, 4, 9, 0, 8, 0, 5, 2, 6, 4, 5, 1, 2, 4, 5, 7, 5, 7, 8, 6, 0, 4, 3, 3, 6, 1, 5, 1, 0, 5, 3, 2, 0, 9, 8, 0, 6, 1, 8, 2, 3, 3, 3, 3, 6, 6, 5, 1, 8, 6, 6, 9, 5, 4, 2, 1, 6, 0, 0, 3, 0, 1, 5, 4, 3, 4, 9, 3, 5, 2, 4, 3, 5, 8, 7], [1, 2, 3, 4, 2, 0, 5], [1, 0, 1, 0, 1, 0, 2], [0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0], [], [1, 1, 0], [4, 3, 4, 6, 1, 6, 4, 6, 6, 2, 5, 0, 5, 0, 1, 4, 4, 4, 0, 1, 4, 4, 6, 4, 0, 5, 1, 5, 0, 4, 3, 1, 1, 2, 3, 2, 6, 6, 2, 4, 3, 0, 0, 5, 1, 5, 0, 5, 5, 1, 5, 5, 2, 2, 2, 4, 6, 1, 0, 0, 4, 4, 4, 3, 3, 4, 1, 0, 2, 6, 4, 2, 2, 2, 3, 6, 2, 0, 6, 2, 1, 3, 4, 3, 3, 5, 0, 4, 2, 1, 6, 4, 4, 3, 1, 5, 3, 2, 6, 3, 6], [0, 0, 0], [0, 3, 2, 0, 2, 2, 3, 1, 1, 1, 2, 3, 0, 0, 3, 1, 0, 2, 2, 1, 3, 2, 0, 3, 2, 1, 1, 1, 3, 3, 1, 1, 0, 2, 0, 0, 3, 3, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 3, 0, 2, 1, 3, 3, 2, 0, 0, 2, 1, 2, 3, 2, 3, 3, 3, 0, 2, 1, 2, 3, 3, 2, 2, 2, 1, 1, 3, 2, 2, 3, 3, 3, 0, 1, 3, 2, 0, 3, 2, 0, 0, 0, 1, 1, 1, 2, 0, 2, 1, 2, 2, 3, 3, 2, 1, 2, 1, 1, 0, 3, 2, 3, 2, 3, 2, 0, 3, 2, 0, 3, 1, 2, 0, 1, 1, 0, 2, 0, 1, 2, 2, 2, 1, 0, 1, 1, 0, 1, 2, 2, 0, 1, 3, 0, 2, 0, 1, 0, 2, 3, 3, 0, 2, 3, 3, 0, 3, 2, 0, 0, 0, 1, 3, 2, 0, 3, 2, 1, 3, 3, 1, 3, 0, 1, 0, 2, 2, 2, 1, 0, 3, 1, 3, 3, 1, 1, 1, 2, 2, 3, 0, 1, 1, 2, 1, 2, 1, 0, 2, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 2, 3, 0, 0, 3, 1, 2, 0, 1, 0, 2, 0, 2, 3, 0, 0, 2, 3, 3, 0, 1, 1, 3, 3, 2, 3, 0, 2, 3, 2, 3, 3, 3, 1, 2, 2, 2, 1, 2, 1, 2, 0, 2, 0, 0, 3, 3, 1, 3, 2, 1, 2, 3, 2, 3, 1, 1, 0, 2, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 3, 2, 0, 3, 1, 2, 3, 2, 0, 2, 2, 2, 3, 0, 3, 3, 0, 1, 2, 0, 1, 3, 1, 0, 1, 3, 1, 3, 2, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 3, 3, 2, 3, 2, 1, 2, 0, 0, 2, 1, 1, 2, 0, 3, 1, 0, 2, 2, 3, 0, 0, 2, 0, 3, 3, 2, 2, 3, 1, 3, 0, 3, 2, 1, 2, 3, 0, 3, 1, 2, 1, 3, 0, 0, 0, 3, 2, 2, 2, 3, 1, 1, 3, 3, 0, 1, 0, 3, 0, 0, 1, 3, 1, 3, 1, 3, 3, 0, 1, 1, 3, 2, 1, 0, 1, 1, 1, 3, 0, 2, 0, 2, 3, 1, 1, 1, 3, 2, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 2, 0, 2, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 2, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 2, 2, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 1, 0, 1, 1, 2, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 1, 2, 0, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 1], [1, 1, 0, 0, 1, 1, 0, 2, 0, 0, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 78, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\nif in1 \\g max(divInt(in0,( divInt(min(int(8.0), int(3.0)),int(8.0)) - ( min(in1, res0) - max(int(0.0), i1) ) )), ( mod(int(6.0),max(( res0 + min(( int(1.0) + int(4.0) ), int(4.0)) ), max(max(int(9.0), int(7.0)), in1))) - divInt(res0,res0) )):{:\\nif b1:{:\\nloopBreak% = 0\\nwhile max(max(int(2.0), max(int(3.0), max(i2, ( mod(int(1.0),int(7.0)) - int(9.0) )))), max(in2, mod(int(7.0),abs(abs(divInt(i0,in2)))))) == ( int(9.0) + divInt(abs(( abs(abs(min(i0, mod(int(5.0),divInt(abs(max(mod(( ( int(3.0) * int(0.0) ) + max(divInt(divInt(min(abs(max(i1, int(8.0))), min(mod(in1,abs(mod(in1,in1))), i0)),int(8.0)),int(4.0)), int(1.0)) ),( i1 + ( int(3.0) - ( ( min(abs(( int(5.0) * divInt(int(5.0),int(4.0)) )), in1) - max(( min(divInt(min(( in1 * max(mod(res0,min(int(4.0), ( in1 - int(9.0) ))), int(0.0)) ), i0),( in2 + int(8.0) )), ( ( ( int(0.0) - i1 ) + int(5.0) ) - int(2.0) )) * in2 ), int(6.0)) ) + ( divInt(i0,int(4.0)) + max(in1, divInt(in0,int(5.0))) ) ) ) )), i1)),mod(min(max(i1, ( max(max(i2, min(mod(in0,i2), res0)), int(1.0)) + min(mod(res0,min(( int(2.0) * max(min(int(4.0), max(i2, int(5.0))), in1) ), ( ( ( int(7.0) + in0 ) * abs(int(5.0)) ) + max(min(int(7.0), int(8.0)), int(6.0)) ))), ( mod(min(i0, int(0.0)),int(4.0)) * mod(int(3.0),mod(int(3.0),i0)) )) )), ( divInt(max(( in2 + divInt(abs(divInt(i1,in2)),divInt(( max(i0, in2) + max(int(6.0), ( in2 * int(1.0) )) ),i1)) ), divInt(in2,mod(max(in2, i2),divInt(abs(min(i2, int(5.0))),int(1.0))))),abs(abs(mod(max(i2, ( max(( abs(abs(abs(int(0.0)))) - ( ( ( int(5.0) - ( int(3.0) + mod(in1,( res0 * i1 )) ) ) + min(abs(int(2.0)), max(mod(int(0.0),divInt(abs(divInt(min(int(9.0), int(8.0)),i0)),( i0 + in1 ))), in1)) ) * in1 ) ), in0) + mod(mod(int(0.0),int(6.0)),abs(min(( in0 * abs(int(1.0)) ), divInt(max(mod(in1,( mod(( min(i1, max(min(i0, int(8.0)), ( i2 * int(2.0) ))) - max(int(3.0), res0) ),int(3.0)) + max(int(3.0), abs(mod(in1,int(3.0)))) )), int(6.0)),i2)))) )),int(6.0))))) - int(5.0) )),int(1.0))))))) + int(8.0) )),int(6.0)) ):{:\\nif ( i2 \\ge i2 and int(6.0) \\le in0 ):{:\\nres0 = min(max(( abs(mod(int(9.0),mod(i2,i0))) - mod(int(5.0),int(4.0)) ), divInt(res0,min(int(2.0), i2))), ( mod(max(i1, in0),( in1 + min(max(mod(( min(int(1.0), abs(in0)) * max(divInt(int(6.0),divInt(min(in0, max(int(0.0), ( int(0.0) * max(in2, i0) ))),in1)), abs(mod(( ( min(int(3.0), int(0.0)) * abs(abs(i2)) ) * int(1.0) ),i1))) ),min(res0, in1)), int(5.0)), abs(int(4.0))) )) - min(int(3.0), min(max(in1, int(4.0)), int(9.0))) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = min(( int(3.0) + in0 ), int(5.0)) == int(2.0)\\n:}\\nb1 = int(4.0) \\l abs(i1)\\n:}else:{:\\nin2 = ( in0 - divInt(abs(int(3.0)),int(5.0)) )\\nloopBreak% = 0\\nwhile int(8.0) != max(( i2 + res0 ), int(7.0)):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = res0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 102, 102, 7, 7, 1, 11, 7, 4, 0, 3, 101, 3, 413, 109, 104, 55, 54]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 8, 8, 9, 5, 1, 8, 4, 5, 2, 6, 4, 4, 6, 7, 6, 5, 9, 9, 7, 5, 7, 7, 2, 4], [1, 1], [1], [1], [0, 1, 1], [0, 0], [3], [], [], [3, 3, 5, 4, 2, 1, 0, 0, 0, 5, 6, 2, 0, 4, 3, 3, 5, 6, 3, 1, 4, 2, 4, 4, 4, 0, 2], [], [2, 3, 2, 3, 2, 3, 1, 0, 0, 3, 2, 2, 3, 2, 3, 3, 2, 0, 2, 1, 2, 0, 3, 0, 2, 0, 2, 1, 1, 1, 3, 3, 3, 0, 0, 1, 0, 2, 1, 3, 1, 3, 2, 3, 1, 2, 2, 0, 1, 2, 0, 1, 1, 1, 2, 2, 3, 2, 2, 2, 0, 0, 3, 2, 3, 1, 3, 0, 3, 0, 2, 0, 1, 1, 3, 3, 2, 0, 1, 0, 1, 0, 3, 1, 0, 2, 0, 1, 2, 3, 0, 1, 2, 1, 0, 1, 2, 2, 0, 0, 1, 2, 3, 3, 3, 3, 0, 0, 3, 1, 1], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0], [1, 2, 1, 2, 0, 2, 1, 1, 1, 0, 0, 1, 2, 2, 0, 1, 0, 1, 1, 0, 1, 2, 1, 2, 2, 1, 0, 2], [2, 2, 0, 0, 1, 1, 1, 0, 2, 1, 2, 2, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( divInt(max(( abs(mod(max(int(8.0), in0),in0)) * abs(mod(mod(min(( abs(max(mod(in2,divInt(int(3.0),mod(in1,max(i2, mod(i1,( int(8.0) * int(8.0) )))))), int(9.0))) + max(min(min(i0, i0), int(5.0)), i0) ), ( int(1.0) + max(int(8.0), abs(mod(abs(int(4.0)),( ( in2 - int(5.0) ) - mod(res0,int(2.0)) )))) )),int(6.0)),int(4.0))) ), ( ( min(( ( mod(i2,i0) - max(( min(int(4.0), max(in1, max(in0, mod(in0,int(6.0))))) + int(7.0) ), min(max(mod(in2,int(6.0)), res0), int(5.0))) ) * in0 ), abs(int(9.0))) - i1 ) * divInt(in1,int(9.0)) )),divInt(max(i2, int(7.0)),divInt(int(5.0),in1))) \\g int(7.0) or mod(( in1 * in1 ),int(7.0)) \\g ( abs(abs(max(min(i0, i2), abs(int(2.0))))) + int(4.0) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 26, 26, 2, 1, 1, 3, 2, 1, 0, 0, 27, 0, 111, 30, 28, 13, 17]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1], [1], [2], [2, 0], [], [1, 0], [0], [1], [0], [], [4, 0], [], [2, 1, 0, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(int(1.0),in1) == i0\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 2, 0, 0, 1, 0], [1, 1], [0, 1, 1, 0], [1, 1, 1, 1], [4, 1, 4, 3], [1, 4, 4], [2, 2], [], [1, 0, 1, 1], [0, 0, 0], [1], [1], [], [4, 4, 1, 4, 1, 1, 1, 6, 2, 3, 0, 6, 0, 6, 1, 6, 4, 5, 1], [1, 1], [2, 2, 2, 1, 0, 1, 0, 3, 0, 2, 2, 1, 0, 0, 3, 3, 0, 0, 0, 3, 3, 2, 3, 2, 0, 0, 0, 1, 0, 3, 0, 3, 0, 0, 3, 3, 0, 0], [0, 1, 0, 0, 1, 1, 0], [0, 2, 1, 0, 2, 1, 1, 1, 2, 2], [2, 1, 2, 1, 0, 2], [0, 1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( divInt(( int(4.0) * in1 ),int(1.0)) - in1 ) \\g min(i1, ( mod(int(4.0),in1) * i1 )):{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = abs(max(i1, i1)) \\le res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= min(abs(divInt(max(( in0 + i0 ), res0),int(3.0))), i0)\\nres0 *= max(i1, max(res0, in1))\\nb2 = abs(abs(in2)) \\le i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 4, 4, 3, 2, 0, 4, 3, 1, 1, 0, 19, 2, 38, 7, 10, 6, 3]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1], [3, 1, 4, 7, 4], [], [], [], [], [], [], [], [], [1, 3, 1], [0], [2, 1, 3, 3, 0, 1, 2, 1, 3, 1, 2, 1, 0], [1, 0, 1], [1, 0, 1], [1], [0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = divInt(int(3.0),max(min(in0, int(1.0)), ( int(4.0) - max(int(7.0), mod(int(4.0),i1)) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 13, 3, 3, 1, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [0, 1], [7, 7], [], [], [], [], [], [], [], [], [3, 0, 4], [0, 0], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = i0\\nin1 = int(77.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 0, 1], [0], [2, 0, 0], [0], [], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = ( i0 + i1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [1, 2, 1, 1, 2, 1, 0], [0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 8, 8, 9, 6, 4, 8, 9, 9, 2, 5, 6, 3, 1, 8, 1, 5, 5, 9, 7, 8, 1, 2, 4, 3, 0, 3, 3, 6, 4, 1, 0, 4, 6, 3, 4, 8, 4, 3, 6, 1, 0, 5, 2, 3, 4, 2, 3, 3, 4, 2, 6, 4, 3, 8, 9, 8, 6, 0, 1, 2, 9, 4, 9, 2, 0, 8, 9, 4], [2, 3, 4, 3, 3, 0, 1], [1, 1, 2, 0, 0, 0], [1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 0, 3, 1], [0, 1], [0, 0], [0, 4, 4, 5, 1, 0, 6, 1, 2, 6, 1, 5, 1, 2, 0, 5, 0, 2, 5, 4, 3, 6, 6, 6, 4, 4, 3, 1, 2, 4, 2, 5, 4, 3, 1, 1, 6, 4, 4, 1, 4, 0, 5, 1, 6, 3, 5, 1, 5, 5, 2, 2, 3, 2, 3, 1, 2, 1, 5, 1, 5, 4, 5, 3, 1, 4, 2], [], [0, 2, 3, 0, 3, 0, 2, 3, 0, 1, 1, 3, 2, 0, 0, 2, 3, 1, 2, 0, 2, 0, 2, 2, 3, 1, 2, 2, 2, 3, 1, 3, 0, 2, 3, 2, 2, 2, 1, 1, 2, 2, 0, 1, 2, 2, 2, 0, 2, 0, 3, 1, 3, 1, 3, 2, 1, 3, 0, 1, 3, 3, 1, 2, 3, 3, 1, 2, 3, 2, 1, 0, 0, 2, 3, 1, 1, 3, 3, 1, 1, 0, 2, 3, 1, 3, 3, 1, 1, 2, 1, 1, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 0, 3, 1, 0, 2, 3, 0, 1, 2, 3, 3, 1, 2, 0, 1, 2, 3, 2, 3, 1, 0, 0, 3, 2, 2, 0, 3, 3, 3, 3, 0, 3, 1, 3, 1, 0, 2, 2, 3, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 3, 0, 3, 2, 0, 3, 1, 0, 3, 0, 3, 2, 2, 2, 2, 3, 3, 1, 3, 3, 2, 2, 0, 0, 0, 3, 1, 2, 0, 2, 3, 3, 2, 0, 3, 1, 2, 3, 3, 0, 0, 1, 2, 0, 1, 1, 0, 3, 1, 1, 1, 0, 3, 3, 2, 2, 2, 1, 1, 3, 1, 1, 3, 3, 1, 0, 2, 1, 1, 3, 0, 0, 3, 0, 3, 1, 0, 3, 3, 2, 0, 2, 2, 0, 0, 2, 3, 3, 3, 2, 2, 0, 1, 0, 3, 1, 0, 3, 2, 2, 3, 1, 3, 0, 1, 0, 3, 0, 3, 2, 0, 1, 3, 0, 2, 1, 0, 2, 2, 0, 2, 3, 2, 1, 0, 1, 1, 0, 0, 0, 3, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0], [2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 0, 2, 0, 2, 1, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 2, 1, 2, 0, 2, 1, 1, 2, 2, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 0, 1, 1, 0, 2, 1, 2, 0, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1], [0, 0, 2, 0, 1, 0, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 1, 2, 1, 2, 1, 0, 2, 2, 1, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i0 == divInt(abs(in1),max(in1, divInt(max(in2, int(8.0)),int(4.0))))\\nif True:{:\\nb1 = abs(mod(i1,i0)) \\ge ( abs(int(8.0)) + mod(res0,mod(i1,( ( abs(int(8.0)) + ( ( divInt(abs(int(9.0)),max(i2, ( max(( ( ( int(6.0) * int(4.0) ) + divInt(( res0 - int(8.0) ),( divInt(( i1 + mod(in2,abs(int(9.0))) ),abs(int(9.0))) + max(( int(2.0) - max(i1, int(5.0)) ), abs(abs(int(6.0)))) )) ) * mod(min(abs(int(3.0)), divInt(min(( int(1.0) + i2 ), i0),divInt(abs(int(8.0)),int(1.0)))),max(abs(int(5.0)), int(5.0))) ), in2) - mod(max(int(9.0), min(abs(int(7.0)), int(8.0))),mod(int(1.0),int(2.0))) ))) * int(4.0) ) + i0 ) ) * ( ( max(max(divInt(( int(3.0) + i2 ),( in2 - min(int(0.0), in1) )), mod(min(in0, int(3.0)),mod(min(max(int(3.0), divInt(res0,int(6.0))), ( max(mod(abs(int(4.0)),res0), res0) + abs(( mod(in1,abs(max(abs(min(in1, abs(int(1.0)))), max(int(0.0), in0)))) * ( ( max(int(4.0), i1) * i2 ) - int(6.0) ) )) )),mod(mod(mod(( divInt(divInt(( int(3.0) - in1 ),abs(i2)),abs(( in2 - min(int(4.0), in1) ))) - min(in0, max(divInt(( mod(( max(min(int(8.0), max(abs(mod(( i1 + i1 ),res0)), min(int(4.0), ( in1 - ( abs(abs(( in1 * abs(int(3.0)) ))) - mod(abs(abs(i1)),in1) ) )))), int(6.0)) * ( i0 - int(1.0) ) ),int(0.0)) + in2 ),abs(int(5.0))), int(2.0))) ),int(3.0)),i1),abs(abs(( mod(divInt(int(4.0),int(2.0)),max(int(3.0), int(3.0))) * abs(min(int(4.0), res0)) ))))))), ( int(2.0) * int(6.0) )) - max(in0, in2) ) + max(i1, min(int(4.0), in2)) ) ))) )\\nb2 = abs(max(divInt(in2,( ( i2 - i2 ) + ( abs(min(min(( ( in0 + int(3.0) ) - i2 ), min(int(8.0), in0)), abs(mod(mod(min(int(9.0), min(i1, int(8.0))),i2),max(i1, max(( in2 - int(6.0) ), min(i1, ( int(0.0) - in2 )))))))) * divInt(( in1 - divInt(abs(( int(1.0) + in2 )),int(2.0)) ),int(9.0)) ) )), in0)) \\le i1\\n:}\\nif ( ( in1 \\ge max(int(4.0), i2) or int(9.0) \\ge int(2.0) ) or int(0.0) \\l int(8.0) ):{:\\nb0 = b0\\n:}\\nb0 = ( False and int(9.0) \\g int(4.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 70, 70, 7, 6, 3, 13, 7, 6, 2, 2, 67, 0, 294, 79, 78, 43, 36]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [1, 2, 0, 0, 2, 1], [0, 1], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 5, 2, 3, 9, 1, 1, 5, 4, 4, 7, 4, 6, 2, 4, 1, 6, 5, 0, 7, 7, 1, 2, 7, 7, 0, 4, 3, 8, 3, 2, 6, 9, 2], [1, 3, 4, 5], [0, 2, 2], [1], [1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0], [2, 3, 0], [], [0], [0, 5, 5, 1, 6, 1, 6, 1, 3, 2, 6, 2, 1, 0, 0, 6, 2, 3, 4, 3, 1, 1, 3, 1, 5, 5, 5, 2, 6, 6, 1, 4, 5, 0, 0, 3, 0], [1, 1], [1, 1, 0, 2, 2, 2, 1, 0, 1, 0, 1, 1, 3, 2, 3, 1, 3, 2, 3, 0, 3, 3, 0, 2, 2, 2, 3, 1, 3, 3, 2, 3, 1, 3, 1, 0, 0, 3, 1, 3, 2, 2, 1, 1, 3, 3, 1, 0, 2, 0, 2, 0, 3, 0, 1, 3, 3, 0, 2, 3, 2, 0, 3, 2, 3, 1, 3, 3, 3, 0, 0, 0, 3, 3, 1, 2, 3, 3, 1, 2, 0, 3, 2, 1, 3, 2, 1, 2, 0, 3, 3, 0, 1, 0, 3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 0, 2, 3, 1, 2, 3, 0, 0, 3, 2, 2, 3, 2, 1, 3, 1, 1, 1, 1, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1, 1, 2, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2, 0, 2, 0, 0, 2, 1, 1, 2, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 1, 0, 0, 0, 2, 0, 1, 2, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 2, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(3.0) \\g int(1.0)\\nif not i0 \\ge mod(divInt(divInt(int(5.0),in2),int(2.0)),in2):{:\\ni1 -= int(3.0)\\nres0 -= int(9.0)\\n:}\\nloopBreak% = 0\\nwhile ( b2 or abs(divInt(max(int(1.0), max(mod(abs(i1),min(max(res0, ( mod(( min(int(1.0), max(min(( max(int(5.0), min(int(4.0), i1)) - in0 ), abs(int(4.0))), abs(divInt(divInt(int(7.0),int(4.0)),abs(min(int(6.0), i2)))))) + divInt(res0,( i2 + abs(i1) )) ),int(2.0)) + min(min(i0, ( abs(divInt(i0,max(( max(int(4.0), abs(max(min(res0, i2), in0))) - min(min(int(1.0), ( min(abs(int(6.0)), ( in1 - min(( int(5.0) + min(( int(0.0) - ( in0 - max(min(i1, int(7.0)), i1) ) ), abs(int(7.0))) ), max(divInt(( int(1.0) + min(in0, int(2.0)) ),int(7.0)), int(7.0))) )) + i1 )), mod(min(int(0.0), ( min(in2, in2) - abs(( ( min(mod(int(4.0),max(int(3.0), int(8.0))), int(3.0)) + int(2.0) ) * int(6.0) )) )),divInt(abs(in2),i2))) ), max(res0, res0)))) - i1 )), in1) )), in2)), int(9.0))),( i0 - i0 ))) \\le int(2.0) ):{:\\nb2 = in0 != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 6, 6, 2, 4, 35, 35, 4, 3, 1, 7, 4, 3, 0, 1, 37, 2, 142, 30, 42, 18, 14]}, {"genotype": [[0], [0, 0, 1, 1], [0, 1, 2, 0], [1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 7, 4, 9, 8, 8, 7, 9, 0, 0, 6, 8, 2, 5, 6, 7, 3, 9, 0, 7, 5, 1], [2, 0], [2, 1, 1], [1], [0, 0, 1, 1, 0], [0, 0], [3, 0, 1], [0], [], [2, 6, 6, 4, 0, 2, 6, 4, 5, 0, 1, 5, 4, 3, 1, 1, 1, 5, 3, 3, 6, 5, 6, 3, 2, 2, 5, 1, 1, 2, 6], [0], [3, 3, 2, 1, 1, 0, 2, 3, 3, 3, 1, 1, 3, 0, 0, 0, 2, 3, 2, 3, 2, 1, 2, 3, 0, 3, 2, 2, 0, 1, 0, 3, 0, 2, 2, 3, 2, 1, 1, 2, 2, 2, 0, 3, 2, 3, 2, 3, 2, 0, 0, 1, 0, 0, 2, 0, 2, 3, 0, 1, 3, 2, 0, 0, 2, 0, 0, 3, 1, 0, 2, 2, 1, 3, 0, 1, 3, 0, 2, 2, 1, 3, 3, 1, 3, 1, 2, 1, 3, 2, 0, 0, 3, 3, 1, 1, 2, 1, 0, 2, 3, 2, 1, 1, 2, 0, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 2, 1, 1, 2, 2, 2, 2, 0, 1, 0, 1, 1, 2, 1, 2, 0, 0, 2, 1, 1, 2, 2], [2, 0, 1, 1, 2, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 2, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( b1 or max(min(mod(int(6.0),int(1.0)), i2), mod(max(max(min(int(7.0), int(4.0)), abs(res0)), res0),in1)) == ( max(( max(mod(int(9.0),( abs(i0) * abs(( ( i2 + int(8.0) ) - res0 )) )), abs(in1)) - ( divInt(abs(( int(8.0) * int(7.0) )),divInt(( mod(in2,min(( max(( min(( i0 - i1 ), int(9.0)) + in2 ), in1) - divInt(in0,divInt(max(i1, int(0.0)),max(divInt(i1,i1), mod(in2,in0)))) ), abs(int(0.0)))) + in0 ),( mod(int(6.0),max(res0, int(8.0))) * abs(in2) ))) * mod(( int(2.0) - min(min(int(5.0), abs(int(6.0))), ( int(7.0) - max(( res0 - in0 ), max(abs(int(3.0)), int(9.0))) )) ),( int(0.0) - i2 )) ) ), divInt(abs(mod(int(7.0),int(5.0))),( i2 * in2 ))) - int(1.0) ) )\\ni1 = i1\\nloopBreak% = 0\\nwhile i2 \\l res0:{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 23, 23, 2, 3, 1, 5, 2, 3, 1, 0, 31, 1, 111, 31, 27, 17, 14]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 3, 2, 6, 1, 5, 2, 2, 5, 9, 2, 4], [2, 4, 3], [1, 0], [0], [0, 1, 1, 1], [0, 0, 0], [3], [], [], [0, 2, 4, 4, 0, 1, 6, 1, 5, 6, 1, 0, 2, 5, 6, 2, 2, 1, 4, 4, 5], [], [1, 2, 3, 1, 2, 2, 0, 3, 2, 1, 2, 1, 0, 0, 2, 0, 2, 3, 3, 2, 0, 0, 0, 0, 0, 3, 3, 1, 2, 0, 2, 0, 2, 0, 3, 0, 2, 2, 3, 1, 1, 2, 1, 0, 2, 1, 1, 3, 1, 2, 3, 0, 0, 0, 3, 3, 0, 3, 2, 3, 1, 2, 1, 0, 2, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 2, 1, 2, 1], [0, 0, 2, 2, 0, 0, 0, 2, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( int(5.0) == ( min(int(7.0), ( ( i0 + abs(mod(int(3.0),( int(2.0) + i2 ))) ) * in1 )) * ( in1 + ( min(abs(( i0 + i1 )), res0) + i1 ) ) ) and in2 \\le max(max(int(6.0), divInt(res0,mod(i1,mod(i0,abs(i2))))), ( mod(max(int(1.0), int(5.0)),mod(int(2.0),in2)) * mod(int(2.0),int(5.0)) )) )\\nb0 = min(int(9.0), divInt(max(res0, i2),i2)) \\ge abs(max(i1, abs(( max(int(2.0), mod(int(4.0),in1)) - divInt(in1,in2) ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 3, 2, 1, 4, 3, 1, 0, 0, 21, 0, 67, 19, 14, 9, 10]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 1, 1, 1], [0], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 4, 4, 1, 6, 8, 0, 8, 0, 7, 0, 9, 8, 7, 0, 6, 7, 1, 8], [2, 5], [0, 0, 2], [1], [0, 0, 0, 0, 1, 1], [0, 0], [3, 1, 0, 2], [1], [1], [0, 2, 6, 5, 0, 5, 4, 5, 6, 3, 6, 6, 0, 4, 3, 4, 5, 1, 3, 3, 3, 1, 3, 1, 1, 0], [1, 0], [3, 2, 2, 1, 3, 0, 2, 1, 3, 0, 0, 1, 2, 3, 3, 1, 3, 1, 2, 3, 2, 2, 3, 0, 2, 3, 2, 3, 1, 3, 3, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2, 0, 0, 1, 2, 2, 1, 1, 0, 3, 3, 0, 3, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 3, 1, 2, 0, 3, 0, 0, 0, 2, 2, 2, 3, 1, 0, 0, 1, 1, 1, 3, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 1, 1, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 1, 0, 0, 2, 0, 0], [1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( False or b0 )\\nif not min(( divInt(int(8.0),abs(i0)) - ( int(4.0) * max(i2, res0) ) ), int(4.0)) == mod(max(min(int(1.0), min(int(6.0), ( abs(( mod(abs(in2),divInt(abs(mod(min(int(8.0), max(abs(i0), in2)),( in1 - divInt(mod(( divInt(int(0.0),( in2 - res0 )) * int(8.0) ),( ( int(0.0) - int(7.0) ) * in0 )),abs(min(res0, max(res0, mod(i0,in1))))) ))),in0)) * min(in1, in2) )) - i1 ))), divInt(min(int(0.0), divInt(in0,abs(in0))),in0)),i1):{:\\nin0 *= mod(( mod(min(int(9.0), i1),i1) * int(8.0) ),int(7.0))\\n:}else:{:\\ni0 = int(0.0)\\n:}\\nb2 = min(int(6.0), int(7.0)) != int(18.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 19, 19, 2, 3, 1, 6, 2, 4, 1, 1, 26, 2, 85, 23, 20, 11, 13]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 1, 2, 1, 1], [1, 1, 0, 1, 1, 0], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 1, 2, 6, 6, 8, 7, 1, 7, 2, 9, 5, 9, 0, 4, 2, 0, 6, 9, 1, 1, 0, 8, 0, 0, 4, 4, 1, 9, 5, 3, 0, 8, 0, 0, 0, 3, 6, 9, 9, 1, 1, 5, 8, 5, 2, 7, 5, 8, 9, 8, 7, 2, 1, 5, 6, 5, 2, 3, 8, 7, 4, 5, 4, 2, 5, 1, 2, 5, 6, 5, 0, 0, 9, 0, 6, 5, 4, 8, 4, 5, 3, 0, 0, 9, 2, 1, 2, 7], [3, 5, 4, 4, 0, 1], [0, 2, 0, 2], [1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3, 2, 0, 0, 2, 3, 1, 1], [0, 0], [1, 0], [4, 6, 1, 4, 3, 3, 1, 3, 1, 4, 3, 3, 3, 5, 5, 6, 3, 1, 1, 0, 1, 2, 6, 1, 0, 1, 5, 5, 5, 1, 5, 0, 0, 2, 4, 0, 3, 5, 1, 1, 0, 2, 2, 4, 5, 1, 6, 5, 2, 4, 0, 3, 6, 5, 5, 1, 4, 2, 6, 2, 3, 6, 1, 5, 6, 3, 2, 6, 2, 2, 1, 1, 5, 0, 5, 6, 4, 0, 1, 6, 6, 1, 3, 5, 6, 1, 3, 5, 2], [0], [1, 1, 0, 2, 0, 3, 3, 3, 1, 2, 1, 2, 1, 1, 3, 3, 3, 3, 0, 3, 3, 0, 0, 3, 1, 1, 0, 3, 2, 1, 2, 0, 0, 1, 2, 0, 0, 1, 1, 2, 2, 3, 2, 2, 0, 0, 0, 1, 2, 1, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 3, 0, 2, 1, 2, 2, 2, 3, 2, 3, 1, 2, 2, 1, 1, 1, 3, 1, 2, 1, 3, 1, 3, 3, 0, 1, 0, 2, 0, 0, 1, 0, 3, 3, 1, 3, 1, 0, 0, 2, 2, 3, 3, 2, 2, 3, 3, 1, 3, 3, 3, 0, 1, 0, 0, 0, 1, 2, 2, 1, 3, 0, 2, 3, 3, 2, 2, 2, 0, 0, 1, 1, 3, 2, 0, 2, 2, 0, 2, 0, 3, 3, 2, 0, 2, 3, 0, 0, 0, 0, 1, 2, 3, 3, 0, 0, 2, 2, 3, 3, 1, 2, 3, 2, 2, 2, 2, 3, 1, 1, 0, 0, 2, 1, 2, 0, 2, 1, 0, 0, 2, 2, 0, 3, 3, 0, 2, 3, 3, 2, 0, 3, 0, 3, 2, 1, 3, 0, 1, 0, 2, 0, 3, 0, 0, 2, 3, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 1, 2, 2, 2, 3, 1, 1, 3, 1, 0, 2, 2, 2, 3, 1, 1, 0, 0, 3, 1, 2, 0, 3, 2, 1, 3, 0, 1, 1, 1, 0, 3, 2, 3, 1, 2, 3, 3, 1, 1, 2, 1, 0, 3, 3, 3, 0, 2, 2, 2, 1, 3, 0, 2, 3, 2, 2, 3, 3, 3, 3, 3, 0, 1, 2, 0, 1, 2, 1, 2, 2, 3, 1, 3, 1, 1, 1, 0, 1, 0, 2, 3, 1, 2, 3, 0, 1, 1, 0, 2, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 0, 2, 1, 3, 1, 0, 2, 1, 2, 0, 3, 3, 3, 3, 0, 1, 2, 0, 1, 3, 2, 2, 1, 3, 1, 1, 1, 1, 2, 3, 2, 1, 3, 3, 2, 1, 1, 3, 1, 0, 2, 3, 3, 0, 1, 3, 3, 1, 2, 0, 0, 0, 2, 2, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 2, 0, 0, 0, 1, 2, 1, 1, 2, 1, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 0, 1, 2, 0, 0, 2, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 0, 1, 1, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 0, 1, 0, 1, 1, 2, 1, 2, 1, 2, 2], [2, 2, 0, 0, 2, 1, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 1, 0, 2, 1, 1, 2, 2, 0, 0, 2, 1, 2, 0, 2, 0, 1, 0, 1, 0, 1, 1, 2, 1, 2, 0, 2, 0, 2, 2, 2, 2, 1, 2], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 78, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(9.0) \\ge int(0.0):{:\\nloopBreak% = 0\\nwhile ( not in1 != ( res0 * min(min(abs(int(1.0)), divInt(int(2.0),( int(6.0) * int(6.0) ))), abs(abs(min(min(i1, min(abs(in1), in0)), abs(int(8.0)))))) ) or int(7.0) \\le in0 ):{:\\nif min(mod(int(1.0),mod(i1,in0)), int(7.0)) \\le ( i1 + in1 ):{:\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = not int(2.0) \\l int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif ( True and mod(( max(( ( in0 + in0 ) * in0 ), int(5.0)) - divInt(int(9.0),( in2 - mod(( max(abs(in2), min(res0, ( min(in0, mod(int(0.0),( ( ( min(divInt(max(int(4.0), ( ( int(2.0) * int(0.0) ) + int(6.0) )),abs(int(9.0))), ( int(1.0) * max(int(1.0), max(abs(i1), int(0.0))) )) * i1 ) + mod(i0,i1) ) * int(8.0) ))) * i2 ))) - max(abs(int(0.0)), max(int(0.0), res0)) ),i1) )) ),mod(divInt(min(max(( ( max(min(int(4.0), abs(abs(abs(i0)))), int(4.0)) * i1 ) - in2 ), in2), int(1.0)),( ( int(9.0) + max(in2, ( min(max(mod(mod(( i1 * in2 ),int(5.0)),int(3.0)), abs(( i0 - mod(mod(i0,divInt(i2,min(min(mod(in1,divInt(abs(i0),in0)), in2), i1))),int(0.0)) ))), divInt(max(min(i1, i0), mod(( abs(min(int(8.0), ( min(( divInt(mod(divInt(max(int(0.0), int(0.0)),i2),i2),( int(0.0) - ( in1 * ( int(3.0) * in2 ) ) )) + i1 ), ( mod(res0,max(max(in2, divInt(min(min(divInt(i2,min(in1, min(divInt(int(6.0),abs(i0)), int(9.0)))), in0), ( res0 + min(in2, in2) )),divInt(abs(i1),( in1 * ( i2 - res0 ) )))), int(9.0))) * i2 )) + mod(in0,int(1.0)) ))) * ( mod(divInt(min(int(1.0), int(5.0)),abs(int(8.0))),res0) + divInt(( ( abs(int(5.0)) - int(2.0) ) + i1 ),in2) ) ),max(int(7.0), mod(res0,max(( int(5.0) - max(in0, int(8.0)) ), int(9.0)))))),int(8.0))) + i2 )) ) - max(mod(abs(int(7.0)),divInt(min(abs(int(2.0)), int(1.0)),mod(int(5.0),res0))), min(max(max(i2, ( ( mod(int(6.0),abs(i2)) - mod(max(mod(mod(max(abs(min(min(min(i1, int(5.0)), mod(i1,int(2.0))), ( int(3.0) * ( ( min(int(8.0), min(int(7.0), int(4.0))) - int(5.0) ) * in2 ) ))), int(4.0)),i0),( min(int(2.0), mod(abs(in2),int(5.0))) + int(1.0) )), res0),( int(2.0) * min(( min(int(5.0), abs(int(6.0))) + abs(int(5.0)) ), max(int(0.0), in1)) )) ) * ( int(0.0) * abs(int(9.0)) ) )), i0), divInt(int(0.0),divInt(i1,max(abs(min(min(res0, int(6.0)), ( res0 * int(5.0) ))), max(( mod(int(4.0),min(int(8.0), int(4.0))) * int(5.0) ), int(3.0))))))) )),divInt(max(divInt(int(0.0),max(abs(( int(0.0) - int(9.0) )), max(int(2.0), i1))), ( abs(max(in0, int(1.0))) * abs(abs(int(2.0))) )),mod(in2,res0)))) \\g i1 ):{:\\nb2 = True\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = divInt(divInt(in2,int(7.0)),i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 6, 3, 90, 90, 6, 4, 2, 14, 6, 8, 2, 2, 89, 1, 375, 99, 98, 49, 50]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1], [0, 1, 2, 0, 0, 2, 1], [0, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 7, 7, 4, 6, 4, 1, 4, 9, 1, 3, 5, 7, 9, 4, 0, 4, 3, 6, 6, 2, 4, 4, 1], [4, 1, 3], [2, 0], [1], [1, 0, 1, 1, 0, 0], [0, 0, 0], [3, 2, 0], [], [0], [2, 3, 4, 5, 6, 1, 5, 4, 1, 1, 1, 4, 4, 6, 4, 6, 4, 0, 2, 4, 0, 0, 4, 3, 2, 6, 4, 1, 1, 0], [1, 0, 0, 0], [1, 2, 3, 2, 3, 0, 1, 2, 2, 3, 3, 3, 1, 2, 1, 3, 0, 0, 3, 3, 1, 0, 2, 2, 2, 2, 0, 3, 2, 3, 2, 0, 1, 1, 0, 2, 2, 1, 3, 1, 1, 3, 1, 0, 1, 3, 0, 2, 1, 2, 3, 3, 1, 2, 0, 2, 3, 2, 0, 0, 1, 0, 0, 1, 0, 3, 3, 2, 3, 0, 2, 1, 0, 2, 0, 3, 0, 3, 0, 0, 3, 0, 3, 3, 1, 2, 1, 2, 0, 1, 0, 0, 3, 2, 1, 2, 1, 3, 3, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 2, 0, 2, 2, 1, 2, 1, 0, 0, 0, 1, 1, 2, 0, 1, 2, 2, 0, 2, 0, 0, 2, 0, 0, 2, 2], [1, 1, 2, 1, 2, 0, 2, 0, 1, 2, 2, 0, 2, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(1.0) \\le divInt(min(divInt(abs(i2),int(7.0)), ( mod(min(abs(abs(int(7.0))), ( int(7.0) - max(in0, in1) )),abs(max(int(4.0), in2))) - ( ( ( ( res0 * min(( min(( i1 - int(6.0) ), int(4.0)) * in2 ), ( divInt(int(1.0),min(int(4.0), int(9.0))) + max(int(1.0), in1) )) ) * int(3.0) ) + max(i1, ( int(5.0) - divInt(abs(min(int(7.0), ( i1 * mod(max(( i1 * in1 ), int(9.0)),in1) ))),res0) )) ) + int(4.0) ) )),in1)\\nres0 *= abs(abs(mod(min(in1, ( int(0.0) - i0 )),divInt(i2,abs(in1)))))\\nif ( min(i0, i0) \\g min(in1, abs(min(int(4.0), divInt(int(3.0),( in0 + int(6.0) ))))) or i2 \\ge res0 ):{:\\nin1 = min(( int(6.0) - ( int(2.0) - abs(abs(int(4.0))) ) ), int(4.0))\\ni1 = int(1.0)\\nloopBreak% = 0\\nwhile not b0:{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 25, 25, 3, 2, 1, 6, 3, 3, 0, 1, 30, 4, 103, 25, 27, 17, 9]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1, 1, 1], [9, 6, 9], [3], [], [], [1], [0], [], [], [0], [1, 4], [1], [2, 1, 1, 0, 3, 1], [0], [2], [2, 1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(9.0) * int(6.0) ) \\ge i1:{:\\nin1 -= abs(int(9.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 3, 3, 1, 0, 0, 1, 1, 0, 0, 1, 2, 1, 6, 1, 1, 2, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 0, 2, 2, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 5, 8, 7, 0, 1, 9, 7, 3, 4, 9, 0], [2, 2, 4, 0], [1], [], [1, 1, 1, 1], [0, 0, 0, 0], [], [], [0, 1, 0], [4, 1, 2, 0, 3, 2, 0, 3, 1, 4], [1, 1], [2, 0, 1, 2, 3, 1, 0, 3, 2, 3, 2, 1, 0, 2, 0, 2, 1, 1, 3, 1, 1, 1, 1, 3, 2, 0, 1, 0, 2, 1, 2, 1, 0, 3, 3, 0, 3, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1], [2, 1, 1, 2, 2, 2, 2, 2], [2, 2, 2, 1, 0, 2, 0], [1, 0, 0, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in1 * int(3.0) ) == ( abs(int(4.0)) * i1 ):{:\\ni2 *= max(( max(( int(5.0) - i0 ), mod(in0,divInt(int(8.0),int(7.0)))) + abs(int(0.0)) ), int(1.0))\\nif int(9.0) == int(7.0):{:\\nif abs(divInt(i2,int(3.0))) \\le i0:{:\\nb1 = ( int(4.0) * divInt(int(9.0),in0) ) \\l abs(abs(i1))\\n:}\\n:}else:{:\\nin1 += abs(int(0.0))\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 13, 13, 4, 1, 0, 4, 4, 0, 0, 3, 10, 2, 38, 9, 8, 7, 4]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 5, 0, 6, 1, 3, 6, 1, 6, 0, 6], [0, 1], [2, 2], [], [1, 1], [0, 0], [], [], [], [3, 0, 3, 1, 1, 2, 2, 5], [], [0, 2, 1, 2, 0, 3, 1, 1, 2, 1, 2, 3, 3, 1, 1, 2, 0, 1, 2, 1, 3, 2, 0, 1, 0, 2, 3, 0, 2, 1, 3, 2, 0, 3, 1, 0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 2, 1, 2], [0, 2, 0], [1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in0 \\l mod(int(9.0),divInt(i0,min(int(5.0), int(0.0))))\\nb2 = divInt(int(6.0),( min(min(int(1.0), int(3.0)), ( in0 + int(6.0) )) * ( int(1.0) + max(divInt(i1,int(6.0)), i1) ) )) \\g mod(abs(i2),mod(int(0.0),max(divInt(i2,abs(int(6.0))), in2)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 11, 11, 2, 2, 0, 2, 2, 0, 0, 0, 8, 0, 36, 10, 7, 3, 7]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 0, 1], [0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 1, 7, 2, 7, 8, 5, 1, 3, 6, 8, 6, 1, 5, 7, 0, 7, 2, 7, 8, 0, 1, 3, 8, 8, 0, 4, 8, 1, 3, 4, 9, 8, 4, 0, 3, 2, 2, 2, 4, 2, 1, 4, 5, 1, 9, 7, 2, 6, 9, 9, 5, 4, 9, 1, 5, 8, 8, 6, 5, 9, 1, 9, 4, 2, 9, 9, 0, 6], [3, 2], [0], [], [1, 1], [0, 0], [], [], [1], [6, 4, 2, 4, 2, 3, 3, 1, 2, 1, 1, 3, 3, 5, 1, 2, 3, 5, 4, 0, 3, 0, 5, 3, 6, 6, 0, 5, 2, 6, 6, 2, 4, 3, 1, 0, 3, 0, 1, 5, 1, 5, 4, 2, 1, 0, 1, 1, 0, 3, 2, 2, 1, 3, 5, 6, 4, 3, 2, 0, 3, 5, 3, 0, 5, 0], [1, 0], [2, 0, 0, 3, 2, 1, 1, 0, 3, 1, 0, 0, 2, 3, 1, 0, 3, 3, 3, 3, 2, 0, 2, 2, 2, 3, 2, 0, 2, 2, 2, 2, 0, 3, 3, 1, 2, 2, 0, 2, 3, 1, 3, 3, 3, 1, 2, 3, 3, 3, 3, 3, 1, 1, 1, 3, 0, 0, 2, 3, 2, 0, 3, 1, 2, 0, 2, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 3, 2, 3, 0, 1, 1, 3, 0, 1, 1, 2, 2, 3, 2, 0, 2, 3, 3, 1, 2, 3, 3, 0, 2, 1, 1, 3, 2, 1, 3, 1, 3, 1, 3, 0, 0, 1, 2, 0, 3, 1, 2, 2, 2, 2, 3, 3, 3, 0, 2, 0, 0, 2, 1, 0, 0, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 3, 3, 1, 0, 3, 0, 2, 1, 1, 3, 3, 3, 2, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 0, 2, 2, 0, 3, 1, 0, 1, 2, 1, 3, 2, 3, 0, 1, 2, 1, 2, 3, 3, 0, 2, 3, 1, 3, 3, 2, 2, 3, 3, 1, 0, 0, 2, 1, 0, 3, 0, 2, 1, 0, 3, 0, 2, 3, 0, 0, 1, 3, 1, 2, 1, 1, 2, 0, 2, 3, 3, 1, 0, 2, 2, 0, 0, 1, 2, 3, 1, 3, 3, 3, 1, 2, 3, 3, 0, 1, 0, 2, 2, 1, 3, 2, 3, 1, 0, 1, 2, 1, 3, 1, 3, 2, 1, 1, 1, 2, 3, 3, 1, 0, 0, 2, 0, 3, 1, 1, 2, 0, 3, 2, 2, 1, 2, 3, 3, 1, 1, 2, 0, 1, 3, 1, 3, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 2, 1, 2, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1, 0, 2, 1, 2, 2, 0, 0, 1, 0, 1, 2, 0, 0, 0, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 0, 2, 1, 2, 2, 0, 1, 0, 0, 0, 1, 2, 2, 2, 2], [0, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 2, 2, 2, 2, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 74, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += ( in1 * i2 )\\nif max(divInt(int(8.0),int(9.0)), in1) \\ge min(int(1.0), i2):{:\\nin0 = in0\\n:}else:{:\\nb0 = divInt(abs(int(7.0)),i1) == max(abs(min(min(( i2 * ( mod(mod(max(( i1 * ( ( mod(( i1 + max(min(int(2.0), ( divInt(in0,( max(int(7.0), min(abs(max(int(8.0), ( min(abs(max(abs(abs(int(5.0))), int(1.0))), int(3.0)) * abs(in0) ))), in2)) * divInt(min(( i1 + max(int(6.0), ( i2 * ( in0 - ( in2 * int(8.0) ) ) )) ), in1),int(6.0)) )) - abs(i0) )), ( ( ( min(divInt(min(in0, int(1.0)),int(5.0)), max(i0, int(7.0))) * int(0.0) ) + mod(( max(( in2 + ( max(max(int(7.0), ( abs(abs(in0)) + ( int(2.0) * int(7.0) ) )), max(mod(int(8.0),min(int(0.0), max(int(1.0), min(res0, res0)))), int(3.0))) + mod(i0,min(int(8.0), ( ( mod(mod(min(min(abs(in2), ( i2 * res0 )), divInt(int(8.0),res0)),i2),int(0.0)) * mod(( int(4.0) + int(8.0) ),int(1.0)) ) - int(3.0) ))) ) ), in1) - in0 ),i1) ) * abs(min(int(4.0), i0)) )) ),max(in0, mod(int(9.0),int(8.0)))) + min(abs(max(( abs(abs(i0)) * divInt(i1,( in2 - divInt(i1,min(in2, ( mod(in1,min(int(4.0), i2)) + int(0.0) ))) )) ), divInt(int(3.0),max(divInt(min(i1, int(2.0)),divInt(int(2.0),mod(max(abs(i0), ( min(int(2.0), min(min(mod(( abs(max(int(4.0), i1)) * i1 ),mod(int(2.0),i0)), abs(in0)), ( int(1.0) * i2 ))) * abs(i2) )),( abs(i1) * in0 )))), int(4.0))))), abs(int(5.0))) ) - ( int(1.0) - int(9.0) ) ) ), ( in2 + ( max(abs(int(7.0)), res0) - divInt(mod(in1,in0),int(2.0)) ) )),mod(max(int(6.0), abs(abs(min(int(9.0), ( abs(max(i2, int(9.0))) * i0 ))))),( mod(int(5.0),abs(mod(abs(int(4.0)),in0))) + int(9.0) ))),divInt(int(1.0),min(int(5.0), max(mod(int(8.0),int(8.0)), int(6.0))))) - mod(min(min(int(5.0), in2), in0),( i0 - min(int(9.0), int(1.0)) )) ) ), ( in2 * max(( mod(int(9.0),mod(abs(abs(int(4.0))),int(2.0))) - ( i0 + int(9.0) ) ), abs(int(9.0))) )), abs(int(0.0)))), int(6.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 70, 70, 2, 1, 0, 2, 2, 0, 0, 1, 66, 2, 293, 77, 82, 43, 35]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 5, 2, 6, 3, 4, 1, 9], [4], [2, 2], [1], [1, 0, 0, 0], [0], [3, 1, 1], [1, 1], [], [1, 3, 0, 0, 2, 1, 6, 6, 3], [], [3, 2, 0, 0, 2, 3, 2, 2, 1, 1, 2, 2, 0, 3, 1, 3, 0, 3, 0, 3, 0, 1, 2, 2, 3, 0, 2, 1, 2, 1, 0, 2, 1, 2, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0], [1, 2, 2, 2, 1, 0, 0], [1, 0, 2, 1, 1], [0, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(( i1 - in0 ), divInt(abs(mod(mod(int(4.0),int(6.0)),divInt(mod(i0,abs(int(5.0))),abs(i0)))),max(i2, min(i1, int(2.0))))) \\le divInt(( min(res0, mod(int(6.0),( int(3.0) + res0 ))) * ( int(4.0) - ( in0 - int(1.0) ) ) ),int(9.0))\\nb2 = ( False or False )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 9, 9, 1, 2, 1, 4, 1, 3, 2, 0, 9, 0, 37, 12, 7, 5, 7]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 2, 0, 0, 2, 0, 0, 1, 2, 0, 2, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 3, 5, 7, 9, 6, 9, 0, 3, 6, 2], [1, 1, 3, 0, 2], [1, 0, 2, 0, 2, 0, 0, 2], [0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0], [2, 1, 1, 0, 3, 1, 0, 0], [0, 0, 1], [0, 1, 1, 1], [2, 4, 2, 2, 0, 3, 1, 5], [0, 0, 1], [1, 1, 3, 2, 0, 1, 1, 1, 3, 1, 2, 2, 1, 0, 0, 1, 2, 1, 3, 1, 0, 1, 0, 1], [1, 1, 1, 1], [2, 2, 2], [2], [1, 1, 0, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not True:{:\\nif int(0.0) \\g int(7.0):{:\\nb1 = True\\n:}else:{:\\nb0 = b2\\n:}\\nif abs(mod(i2,int(3.0))) \\g int(5.0):{:\\nb0 = ( False and b2 )\\n:}else:{:\\nin1 = int(7.0)\\n:}\\n:}\\ni2 = abs(int(9.0))\\nloopBreak% = 0\\nwhile mod(divInt(int(6.0),i2),i0) \\ge int(9.0):{:\\nin0 *= divInt(int(0.0),abs(int(3.0)))\\nif i1 \\l int(6.0):{:\\nb0 = in2 == int(2.0)\\n:}else:{:\\nb0 = b2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 5, 8, 12, 12, 5, 8, 1, 13, 5, 8, 3, 4, 8, 3, 24, 4, 3, 1, 4]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 1, 8, 1, 8, 8, 7, 0, 5, 5, 0, 2, 7, 6, 9, 7, 9, 9, 2, 0, 8, 4, 5, 1, 8, 5, 9, 0, 7, 9, 3, 1, 7, 8, 4, 5, 3, 4, 6, 6, 8, 3, 5], [1, 3], [0, 1], [], [1, 1], [0, 0], [], [], [], [4, 5, 0, 2, 6, 6, 2, 5, 3, 4, 6, 6, 1, 0, 6, 4, 3, 0, 1, 3, 1, 5, 4, 3, 1, 6, 0, 2, 4, 4, 2, 2, 0, 0, 1, 0, 1, 1, 6, 3, 6, 0, 0, 2, 2, 0, 5, 1, 4, 0, 5, 4, 2, 1], [1], [0, 3, 3, 1, 3, 2, 3, 0, 3, 0, 3, 2, 3, 3, 0, 1, 2, 2, 2, 1, 3, 2, 0, 3, 3, 3, 3, 2, 3, 1, 1, 3, 3, 3, 1, 1, 0, 3, 1, 1, 0, 1, 3, 3, 1, 2, 2, 3, 2, 0, 2, 2, 1, 3, 2, 1, 3, 0, 1, 0, 0, 2, 3, 3, 2, 2, 3, 0, 1, 0, 0, 2, 1, 3, 1, 0, 3, 2, 1, 3, 3, 0, 0, 3, 3, 2, 2, 3, 3, 3, 2, 0, 3, 1, 0, 1, 3, 3, 2, 2, 2, 3, 3, 3, 0, 3, 0, 2, 0, 0, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 3, 0, 1, 0, 2, 1, 3, 2, 3, 3, 0, 1, 0, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 3, 0, 0, 1, 1, 0, 3, 3, 2, 0, 0, 2, 0, 1, 2, 0, 0, 2, 0, 1, 3, 0, 0, 1, 2, 0, 0, 3, 3, 3, 2, 3, 1, 1, 3, 1, 0, 2, 1, 3, 3, 2, 1, 2, 2, 1, 2, 3, 3, 1, 0, 0, 0, 3, 2, 0, 3, 2, 0, 0, 2, 2, 1, 0, 3, 2, 1, 1, 1, 0], [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 0, 2, 2, 1, 2, 1, 0, 1, 0, 0, 2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 1, 1, 1, 2, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 2, 0, 2, 1, 1, 1, 0, 2, 0, 2, 2, 2, 1], [1, 0, 0, 0, 1, 2, 1, 2, 0, 1, 2, 2, 1, 0, 2, 1, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 1, 2, 2, 2], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= in2\\nb0 = abs(abs(int(9.0))) \\g min(divInt(abs(i0),abs(i2)), max(divInt(abs(max(res0, int(4.0))),( ( mod(int(1.0),min(divInt(res0,max(min(min(abs(divInt(max(int(8.0), int(1.0)),abs(min(abs(int(8.0)), int(8.0))))), i2), min(int(7.0), int(0.0))), in2)), int(5.0))) + abs(abs(int(5.0))) ) + ( mod(min(mod(in0,mod(( int(0.0) + min(mod(int(2.0),abs(in1)), int(7.0)) ),res0)), res0),( abs(abs(( ( abs(i1) - int(6.0) ) * i0 ))) - res0 )) * divInt(int(9.0),min(int(7.0), in1)) ) )), abs(mod(int(9.0),abs(min(in0, i0))))))\\nb1 = min(abs(divInt(( abs(abs(max(mod(i1,max(int(9.0), in0)), int(2.0)))) + max(abs(( divInt(( min(max(min(i1, min(in2, mod(in1,in0))), i1), mod(( res0 - ( i0 * ( divInt(i2,( max(in1, int(0.0)) * in1 )) - divInt(int(8.0),min(divInt(max(max(i2, int(4.0)), i2),divInt(int(5.0),mod(( int(1.0) + int(8.0) ),mod(( ( int(5.0) * ( int(9.0) - min(i0, i0) ) ) + int(0.0) ),int(7.0))))), i1)) ) ) ),max(min(( i0 + i1 ), ( i1 * int(9.0) )), ( res0 * in0 )))) * ( res0 + int(3.0) ) ),abs(i0)) - i0 )), int(1.0)) ),mod(i2,i2))), min(abs(max(divInt(max(int(7.0), int(8.0)),max(int(4.0), i0)), ( int(5.0) - min(abs(divInt(int(3.0),divInt(divInt(int(4.0),( min(abs(int(6.0)), in2) - i1 )),in1))), abs(( i0 - abs(( in2 - in1 )) ))) ))), ( ( int(6.0) * i2 ) * max(( int(8.0) * int(3.0) ), int(5.0)) ))) \\ge i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 44, 44, 2, 2, 0, 2, 2, 0, 0, 0, 54, 1, 215, 56, 62, 30, 27]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 1, 1, 1, 2, 2, 1, 0, 1, 2, 2, 0, 1, 1], [1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 8, 4, 1, 8, 4, 8, 2, 0, 5, 5, 7, 9, 7, 5, 8, 5, 2, 6, 2, 1, 7, 1, 8, 5, 7, 6, 9, 0, 0, 4, 4, 3, 9, 1, 5, 8, 0, 2, 6, 7, 1, 2, 1, 8, 4, 3, 0, 1, 8, 3, 6, 3, 4, 1, 6, 4, 8, 2, 6, 2, 5, 5, 2], [1, 2, 5, 5, 3, 5, 0, 2, 1], [1, 0, 1, 2, 1, 2], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1], [1], [0, 1, 1, 1], [5, 3, 5, 1, 3, 3, 4, 6, 4, 2, 5, 1, 1, 6, 5, 5, 5, 2, 5, 5, 1, 5, 0, 1, 1, 5, 2, 4, 5, 6, 4, 3, 2, 2, 2, 5, 4, 4, 2, 6, 0, 5, 4, 3, 2, 1, 3, 4, 0, 6, 4, 5, 3, 4, 2, 0, 0, 2, 1, 3, 3], [0, 0, 1, 1], [0, 3, 0, 3, 2, 3, 0, 1, 0, 1, 3, 3, 2, 2, 3, 1, 1, 2, 3, 1, 3, 2, 0, 2, 3, 0, 2, 0, 2, 3, 2, 0, 1, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 0, 3, 2, 1, 2, 3, 3, 3, 0, 0, 3, 0, 0, 1, 3, 1, 2, 3, 2, 3, 2, 1, 3, 2, 1, 3, 1, 1, 0, 3, 0, 1, 3, 2, 3, 2, 1, 0, 0, 1, 3, 0, 0, 1, 2, 2, 1, 1, 2, 0, 3, 3, 1, 0, 1, 1, 3, 2, 0, 2, 1, 1, 0, 2, 3, 0, 3, 0, 0, 3, 1, 3, 2, 0, 0, 1, 2, 3, 0, 3, 3, 0, 3, 2, 0, 0, 3, 0, 2, 3, 1, 3, 1, 1, 1, 2, 3, 2, 2, 1, 0, 0, 1, 0, 3, 3, 3, 2, 2, 1, 2, 1, 3, 1, 3, 3, 3, 3, 3, 1, 0, 2, 1, 3, 0, 2, 1, 3, 1, 3, 1, 1, 0, 1, 3, 1, 0, 3, 2, 1, 2, 2, 2, 2, 1, 2, 3, 2, 3, 0, 1, 3, 0, 3, 1, 3, 3, 3, 2, 3, 0, 0, 0, 2, 0, 0, 3, 2, 1, 1, 1, 3, 0, 1, 1, 1, 3, 2, 1, 0, 0, 0, 1, 0, 1, 1, 1, 3, 2, 2, 0, 1, 3, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 0, 0, 0, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 0, 2, 0, 0, 1, 0, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 1, 1, 2, 2, 2], [2, 0, 1, 2, 1, 1, 1, 0, 0, 1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 2, 0, 1, 0, 2, 1, 2], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in2 \\g abs(in0):{:\\nif b1:{:\\nin2 = abs(( min(i1, int(2.0)) * in0 ))\\n:}\\nb0 = int(4.0) == min(min(( ( max(int(8.0), int(4.0)) + ( max(int(1.0), max(mod(in0,mod(max(in1, divInt(res0,( min(( in1 - int(8.0) ), i2) * in2 ))),( ( ( ( int(4.0) - int(8.0) ) - int(2.0) ) - int(0.0) ) + int(5.0) ))), min(max(i1, divInt(min(max(max(i1, res0), abs(divInt(int(5.0),mod(max(min(max(in2, in2), abs(in2)), i2),int(7.0))))), max(int(9.0), ( abs(divInt(min(mod(int(7.0),max(( int(5.0) + abs(int(8.0)) ), int(5.0))), in2),min(in2, int(2.0)))) - min(( min(mod(int(6.0),i1), in2) * int(2.0) ), abs(i0)) ))),i1)), int(1.0)))) * mod(divInt(int(7.0),int(1.0)),divInt(i1,max(abs(int(8.0)), in2))) ) ) - int(5.0) ), int(7.0)), max(( i2 - ( int(6.0) * int(9.0) ) ), in1))\\nb1 = mod(max(in2, abs(res0)),in1) != abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif abs(( in0 * i2 )) != int(0.0):{:\\nif divInt(abs(i2),abs(min(i2, max(( in2 - in1 ), abs(in1))))) \\ge mod(min(int(4.0), max(int(4.0), int(3.0))),int(9.0)):{:\\nb2 = mod(min(( ( int(1.0) + i2 ) + res0 ), int(5.0)),i0) != max(abs(min(mod(mod(int(8.0),( int(0.0) - min(int(2.0), abs(min(min(max(min(int(6.0), in2), ( int(7.0) - abs(in1) )), mod(int(1.0),abs(int(2.0)))), abs(int(1.0))))) )),int(8.0)), in0)), int(4.0))\\n:}else:{:\\nb1 = max(int(3.0), i2) \\l max(divInt(int(0.0),divInt(mod(mod(( int(1.0) * divInt(max(( min(i1, int(8.0)) + max(in0, min(int(3.0), max(max(abs(divInt(abs(in1),i0)), res0), divInt(in1,in2)))) ), max(mod(int(6.0),int(3.0)), int(4.0))),max(in0, int(1.0))) ),int(6.0)),int(4.0)),abs(( int(8.0) - in1 )))), i2)\\n:}\\ni0 = i0\\n:}else:{:\\nif int(2.0) == i2:{:\\nloopBreak% = 0\\nwhile int(6.0) \\g int(2.0):{:\\ni1 += int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = False\\n:}\\nin0 *= abs(( ( in0 - int(5.0) ) * abs(int(2.0)) ))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 6, 9, 65, 65, 9, 6, 0, 11, 9, 2, 1, 4, 61, 4, 246, 53, 71, 28, 27]}, {"genotype": [[0], [1], [1], [], [1], [1], [2], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [2, 5, 7], [3], [1], [], [1], [0], [], [], [], [], [], [1, 3, 3, 1, 1], [], [1, 2], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(2.0) \\ge max(abs(int(5.0)), int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1], [2, 1, 0, 1, 0, 1, 1, 1], [1], [0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 8, 5, 3, 9, 0, 7, 9, 4, 2, 7, 2, 4, 3, 4], [], [0, 2], [], [0, 0, 0], [], [0, 2, 1], [1], [], [1, 6, 6, 2, 5, 5, 1, 2, 2, 5, 6, 6, 3, 3, 5, 3, 3, 2], [1, 1, 0, 1, 0, 0], [0, 1, 3, 2, 0, 2, 2, 3, 0, 3, 2, 0, 0, 1, 2, 0, 3, 1, 2, 0, 2, 3, 0, 0, 1, 2, 2, 3, 1, 0, 2, 1, 1, 1, 1, 2, 3, 2, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1], [2, 1, 1, 0, 1, 0, 2, 0, 0, 1, 2, 1], [0, 0, 0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= res0\\nres0 -= int(0.0)\\ni2 = max(( in2 - ( ( max(in2, max(divInt(i1,i2), int(0.0))) + divInt(i2,min(int(8.0), ( in2 - ( max(res0, res0) + int(5.0) ) ))) ) * divInt(( max(int(3.0), in0) + ( int(9.0) + int(0.0) ) ),int(7.0)) ) ), int(9.0))\\nin0 -= ( max(( int(4.0) * int(2.0) ), in2) - in0 )\\nin0 = int(72.0)\\ni2 = int(434.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 1, 7, 16, 16, 0, 2, 0, 3, 0, 3, 1, 0, 18, 6, 44, 12, 7, 12, 3]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 1, 2, 2, 1], [0, 0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 8, 1, 7, 0, 6, 9, 0, 5, 0, 4, 7, 5, 7, 0, 2, 1, 7, 0, 2, 2, 8, 9, 7, 4, 1, 8, 1, 2], [2, 1, 1, 1], [2, 1], [0], [0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0], [3, 2, 0], [], [0, 0], [2, 5, 4, 2, 3, 6, 1, 0, 1, 2, 6, 6, 5, 4, 4, 3, 4, 4, 5, 5, 4, 5, 6, 6, 5, 0, 5], [0], [3, 2, 0, 2, 3, 0, 3, 2, 2, 0, 1, 2, 2, 3, 1, 1, 2, 1, 3, 3, 0, 1, 1, 2, 3, 2, 2, 0, 1, 3, 2, 3, 1, 1, 0, 1, 3, 2, 0, 0, 1, 2, 2, 0, 2, 3, 3, 1, 2, 1, 0, 2, 3, 1, 1, 1, 0, 0, 0, 1, 3, 2, 3, 0, 3, 0, 3, 3, 2, 2, 2, 3, 2, 0, 1, 2, 1, 0, 3, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 1, 3, 3, 2, 1, 3, 0, 1, 2, 1, 1, 3, 2, 3, 0, 1, 0, 2, 1, 0, 0, 0, 1, 3, 3, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 2, 0, 0, 2, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 0, 0, 1, 2, 2, 2, 2, 2, 0, 1, 2, 0], [0, 0, 1, 2, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 0, 2, 2], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( min(( i2 + divInt(abs(in2),min(( divInt(in1,int(9.0)) + mod(( min(int(0.0), int(8.0)) - ( int(1.0) * abs(abs(i2)) ) ),int(7.0)) ), int(0.0))) ), ( max(( ( in0 * int(6.0) ) * abs(divInt(min(int(9.0), int(0.0)),res0)) ), int(5.0)) + min(( i1 - i0 ), int(0.0)) )) == ( ( i1 - mod(max(abs(int(4.0)), ( int(7.0) + i2 )),( abs(int(5.0)) - int(7.0) )) ) - int(0.0) ) and res0 \\g res0 ):{:\\nin2 = in1\\n:}\\nif int(2.0) \\g max(mod(abs(in1),min(in0, min(max(divInt(divInt(( abs(mod(in1,int(1.0))) - ( int(7.0) + in1 ) ),abs(in2)),( mod(( in2 - int(0.0) ),divInt(( in1 - ( int(2.0) * abs(abs(mod(int(2.0),abs(in2)))) ) ),int(8.0))) * ( int(9.0) + int(7.0) ) )), min(( max(res0, int(4.0)) * res0 ), ( int(1.0) * in2 ))), i0))), in2):{:\\nloopBreak% = 0\\nwhile not b2:{:\\nb1 = int(8.0) \\g abs(min(int(1.0), int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 30, 30, 4, 2, 1, 7, 4, 3, 0, 2, 27, 1, 116, 33, 27, 21, 12]}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 0, 2, 1, 0], [1], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 7, 4, 7, 0, 9, 5, 4, 3, 0, 7, 7, 5, 6, 5, 8, 0, 3, 9, 0], [2, 0, 0, 3], [2, 1, 1, 2, 0], [], [1, 1, 0, 1, 1], [0, 0, 0, 0], [0], [], [], [5, 4, 1, 4, 5, 2], [], [3, 1, 0, 3, 1, 2, 3, 2, 1, 1, 1, 0, 2, 3, 2, 1, 0, 2, 3, 1, 2, 1, 3, 1, 3, 1, 1, 2, 2, 3, 1, 3, 3, 1, 3, 1, 1, 3, 0, 1, 0, 3, 3, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 2, 2, 0, 2, 1, 1, 1, 2, 2, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(int(5.0), in2) == max(int(7.0), ( abs(( int(4.0) - int(7.0) )) - int(0.0) ))\\nb1 = in1 \\l ( abs(divInt(int(9.0),i1)) + divInt(min(int(5.0), ( int(4.0) + abs(int(3.0)) )),max(int(0.0), int(7.0))) )\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = ( mod(max(int(7.0), max(abs(int(5.0)), abs(int(6.0)))),int(5.0)) + min(in1, int(8.0)) ) \\l in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = max(min(int(0.0), i2), int(3.0)) \\ge int(90.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 20, 20, 4, 5, 0, 5, 4, 1, 0, 0, 6, 0, 47, 8, 14, 5, 3]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 0, 2, 2, 2, 1, 1, 1, 2, 0, 1, 2, 2, 1, 0, 2, 2, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 9, 9, 5, 4, 3, 6, 9, 7, 4, 6, 8, 0, 2, 8, 8, 2, 3, 7, 0, 2, 0, 1, 4, 3, 0, 2, 9, 8, 7, 9, 5, 6, 6, 5, 4, 7, 1, 1, 5, 8, 6, 7, 4, 1, 4, 3, 2, 4, 3, 7, 2, 6, 5, 7, 7, 3, 3, 5, 0, 2, 3, 2], [5, 3, 4, 4, 0, 2, 0, 1, 1, 0, 4, 2, 2, 3, 0, 4], [2, 2, 1, 1, 2, 2, 2, 2, 0], [0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 0, 0, 2, 3, 3, 0, 1, 2, 0, 2], [1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 3, 5, 2, 2, 4, 0, 3, 6, 0, 5, 4, 0, 5, 1, 6, 3, 4, 5, 3, 4, 0, 3, 1, 3, 5, 0, 6, 6, 3, 4, 5, 5, 5, 1, 5, 2, 2, 5, 2, 3, 3, 6, 0, 5, 6, 5, 6, 6, 1, 4, 3, 1, 6, 3, 0, 1, 6, 0, 5, 2, 2, 0, 5, 5, 1, 4, 6, 2, 5, 3, 2, 4, 3, 5, 5, 6, 1, 4, 4], [0, 0, 1, 1, 1, 0, 0, 1], [3, 1, 3, 2, 1, 0, 1, 2, 0, 2, 3, 2, 2, 1, 1, 0, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 2, 3, 2, 0, 2, 2, 2, 0, 3, 1, 2, 2, 1, 3, 0, 0, 3, 3, 1, 1, 3, 3, 0, 0, 1, 3, 0, 0, 2, 1, 0, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 2, 2, 2, 1, 1, 0, 1, 3, 0, 2, 0, 2, 1, 2, 1, 1, 0, 2, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 0, 0, 1, 0, 1, 1, 3, 2, 0, 1, 1, 0, 1, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0, 1, 0, 2, 1, 2, 3, 1, 2, 0, 3, 1, 3, 3, 2, 2, 1, 2, 2, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 2, 2, 3, 1, 2, 3, 0, 2, 2, 3, 2, 1, 2, 3, 1, 1, 0, 1, 0, 0, 1, 1, 3, 2, 0, 1, 2, 3, 1, 1, 2, 1, 3, 1, 2, 0, 3, 0, 0, 3, 0, 3, 2, 0, 0, 0, 1, 3, 0, 3, 0, 1, 0, 1, 3, 1, 1, 3, 3, 0, 2, 0, 2, 0, 2, 3, 1, 1, 3, 0, 3, 2, 3, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1, 3, 3, 2, 1, 0, 3, 3, 0, 1, 3, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 2, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 0, 2, 1, 1, 1, 0, 2, 2, 1, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 0], [2, 0, 1, 0, 0, 2, 2, 2, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 0, 2, 0, 1, 2, 1, 1, 1, 0, 2], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(int(1.0), max(( int(0.0) * i0 ), int(3.0))) != ( in0 + ( max(divInt(( int(9.0) - int(9.0) ),in2), abs(int(5.0))) + ( int(4.0) + divInt(int(3.0),max(i2, i2)) ) ) ):{:\\nb2 = not ( ( b2 and int(6.0) \\ge in1 ) and i0 \\le ( max(divInt(in0,mod(( ( res0 * max(int(9.0), ( ( int(7.0) * abs(i0) ) * in2 )) ) + max(min(int(4.0), int(6.0)), max(min(in1, i0), int(8.0))) ),max(in2, i1))), divInt(int(0.0),res0)) - mod(in0,( mod(in1,divInt(int(2.0),in2)) - in0 )) ) )\\nloopBreak% = 0\\nwhile in1 \\le divInt(mod(divInt(int(8.0),int(8.0)),i0),int(2.0)):{:\\nif min(in0, divInt(i1,mod(int(3.0),( int(7.0) * int(0.0) )))) \\l in0:{:\\nif ( int(2.0) * int(0.0) ) == max(mod(max(int(1.0), min(mod(int(4.0),abs(in2)), i0)),int(3.0)), res0):{:\\nres0 = int(0.0)\\n:}else:{:\\nif b1:{:\\nloopBreak% = 0\\nwhile int(2.0) \\l abs(mod(in0,int(9.0))):{:\\nif not int(8.0) \\g in1:{:\\nin2 = int(7.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 *= min(in2, ( i1 * in2 ))\\n:}\\n:}\\n:}else:{:\\nb1 = ( ( b2 and i2 \\g i2 ) or max(abs(max(max(in2, int(9.0)), i2)), mod(int(5.0),mod(min(int(6.0), divInt(in0,max(int(6.0), abs(min(( ( int(5.0) * divInt(( in0 * int(4.0) ),res0) ) * i0 ), in2))))),int(7.0)))) \\l res0 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\nin2 -= res0\\n:}else:{:\\nb2 = not b2\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(1.0) \\le int(1.0):{:\\nif res0 == mod(mod(max(int(5.0), ( max(i1, mod(( abs(( int(8.0) * divInt(max(int(6.0), int(7.0)),in1) )) - int(4.0) ),in0)) + i1 )),int(1.0)),int(4.0)):{:\\nb2 = min(( res0 + int(3.0) ), mod(abs(int(2.0)),int(4.0))) == ( int(3.0) * max(int(7.0), divInt(in0,max(i0, i1))) )\\n:}else:{:\\nres0 += max(i0, min(( in2 - i2 ), i2))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(2.0) \\ge abs(i0):{:\\nloopBreak% = 0\\nwhile abs(in2) \\l int(6.0):{:\\nin2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = not int(5.0) \\le max(int(7.0), int(7.0))\\n:}\\nin1 = min(max(res0, ( i2 * mod(in2,divInt(abs(int(3.0)),int(3.0))) )), min(in0, abs(mod(min(( i2 - in1 ), ( divInt(( in0 - in2 ),divInt(in2,int(5.0))) - int(0.0) )),max(abs(( int(2.0) + res0 )), abs(min(i1, int(3.0))))))))\\nin1 *= min(in1, int(2.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 25, 25, 12, 13, 65, 65, 16, 9, 4, 29, 16, 13, 1, 8, 80, 8, 248, 59, 52, 32, 31]}, {"genotype": [[0], [1], [0], [], [1], [1], [6], [], [], [], [], [], [], [], [], [2, 3], [1], [3, 0, 1], [], [0], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += min(in0, int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 1, 8, 4, 4, 1, 3, 2, 2, 0, 3, 8, 0, 5, 9, 9, 8, 8, 0, 2, 2, 5, 1, 7, 1, 1, 7, 2], [4], [0], [], [1], [0], [], [], [], [2, 2, 6, 0, 0, 6, 6, 6, 5, 4, 3, 6, 1, 1, 2, 5, 1, 4, 0, 0, 2], [], [0, 2, 1, 3, 3, 2, 0, 3, 3, 3, 3, 2, 1, 1, 3, 2, 3, 2, 2, 1, 3, 0, 1, 0, 3, 2, 1, 2, 2, 2, 3, 2, 0, 3, 0, 1, 2, 2, 2, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 1, 3, 0, 0, 0, 1, 2, 1, 3, 3, 3, 1, 2, 1, 3, 2, 3, 1, 1, 2, 2, 1, 1, 0, 0, 2, 1, 2, 1, 1, 2, 2, 3, 1, 2, 1, 3, 0, 1, 0, 0, 0, 3, 3, 2, 0, 0, 1, 1, 0, 2, 0, 3, 3, 1, 3, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 2, 2, 1, 2, 1, 2, 0, 1, 0, 2, 1, 0, 1, 2, 2, 0, 1, 1, 1, 0, 0, 1, 1, 2, 0, 2, 0], [1, 1, 2, 0, 0, 0, 1, 2, 0, 2, 0, 1, 0, 2, 1, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i2 \\le mod(int(2.0),min(max(( i2 - abs(abs(max(abs(( int(7.0) - int(1.0) )), max(divInt(abs(( ( int(8.0) * min(res0, int(4.0)) ) + i0 )),max(( int(4.0) + ( ( divInt(min(( i0 + abs(res0) ), int(1.0)),divInt(( divInt(int(3.0),int(2.0)) - ( int(2.0) * max(min(( max(abs(int(0.0)), int(3.0)) + abs(res0) ), res0), in2) ) ),int(8.0))) * ( int(0.0) + min(max(max(int(5.0), ( int(9.0) - max(divInt(min(int(9.0), int(8.0)),mod(( int(8.0) + int(0.0) ),in1)), in0) )), mod(int(2.0),divInt(int(2.0),int(5.0)))), mod(mod(min(int(1.0), mod(int(7.0),max(res0, int(1.0)))),i1),i1)) ) ) * i2 ) ), max(abs(( in2 - i1 )), int(1.0)))), int(7.0))))) ), in1), ( i0 - min(abs(int(2.0)), min(i0, i2)) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 29, 29, 1, 1, 0, 1, 1, 0, 0, 0, 21, 0, 107, 28, 29, 16, 12]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 0], [0], [0, 0, 0, 0, 0], [], [3, 0, 2, 2, 1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b0 and not not False )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 1, 5, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [4], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(4.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 992, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 1, 0], [1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 8, 7, 7, 0, 4, 2, 2, 3, 3, 4, 6, 9, 5, 1, 4, 8, 9, 9, 8, 6], [5], [1, 1], [], [0, 1], [0], [0], [], [], [6, 4, 3, 0, 0, 1, 6, 4, 6, 5, 6, 3, 0, 3, 3, 4, 3, 6, 2, 3, 4, 3, 6, 2, 5], [1, 0], [3, 0, 1, 3, 2, 3, 1, 3, 3, 2, 3, 2, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 0, 0, 3, 0, 1, 3, 0, 2, 1, 1, 3, 1, 2, 0, 3, 1, 2, 1, 1, 3, 2, 3, 0, 2, 3, 1, 0, 2, 3, 1, 2, 2, 3, 0, 0, 3, 3, 0, 0, 2, 2, 2, 2, 2, 1, 0, 0, 0, 2, 2, 1, 1, 1, 3, 2, 0, 3, 1, 1, 0, 3, 3, 0, 2, 1, 0, 2, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 2, 0, 2, 1, 2, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 2, 2, 1, 1, 1], [2, 2, 1, 1, 1, 0, 2, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= min(in1, int(0.0))\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = max(( abs(int(3.0)) * min(abs(mod(max(divInt(in0,int(8.0)), mod(int(7.0),abs(i0))),max(min(int(7.0), max(mod(i0,i1), min(res0, int(0.0)))), abs(in1)))), ( int(4.0) - int(2.0) )) ), min(int(2.0), divInt(res0,abs(int(3.0))))) != ( int(3.0) - int(4.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = min(( abs(res0) - divInt(min(int(6.0), in0),divInt(max(int(9.0), ( divInt(min(i0, in0),min(abs(in0), in1)) + divInt(mod(( divInt(mod(int(5.0),in0),res0) * i2 ),mod(divInt(int(1.0),int(4.0)),int(8.0))),abs(( in0 - max(int(9.0), int(9.0)) ))) )),in1)) ), max(max(in0, divInt(int(8.0),res0)), ( mod(i2,in2) + int(6.0) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 22, 22, 1, 2, 0, 2, 1, 1, 0, 0, 25, 2, 94, 24, 25, 9, 16]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 3, 8, 0, 7, 4, 7, 0, 0, 1, 1, 8], [3, 0], [1], [0], [0, 1, 1], [0, 0], [3], [], [], [3, 6, 0, 4, 1, 0, 0, 1], [1, 0], [0, 2, 3, 3, 1, 1, 1, 2, 1, 1, 3, 0, 3, 1, 0, 1, 2, 0, 1, 2, 3, 3, 2, 1, 1, 3, 1, 1, 3, 1, 0, 0], [1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0], [2, 0, 0], [1, 0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( in0 \\ge mod(max(min(int(2.0), int(5.0)), int(3.0)),( int(8.0) * int(0.0) )) and min(res0, max(int(7.0), i0)) \\l int(4.0) )\\nin1 += divInt(i1,int(7.0))\\ni0 = divInt(max(min(( int(0.0) + int(0.0) ), max(int(1.0), int(1.0))), min(int(8.0), i0)),i1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 13, 13, 2, 1, 1, 3, 2, 1, 0, 0, 8, 2, 32, 5, 8, 3, 3]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [2, 6, 8], [], [], [], [], [], [], [], [], [4, 0, 2], [0], [3, 2, 0, 3, 3, 1, 2, 2, 1, 0, 1], [1, 0, 0], [2, 2, 0], [2, 0], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = abs(divInt(i0,abs(min(int(2.0), ( ( int(6.0) * i2 ) + int(8.0) )))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 11, 3, 3, 2, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 2, 1, 2, 0, 2, 1, 0, 0, 0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 8, 9, 6, 8, 6, 5, 5, 3, 1, 8, 4, 6, 6, 0, 7, 4, 5, 2, 5, 3, 2, 0, 2, 7, 9, 9, 3, 7], [1, 3, 1], [1, 0, 2], [0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0], [3, 1, 3, 2, 3, 1, 1, 3, 0, 0], [1, 1, 0], [0], [6, 2, 2, 5, 4, 0, 1, 1, 0, 1, 0, 6, 5, 3, 6, 4, 0, 6, 2, 2, 1, 4, 3, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0], [2, 1, 0, 3, 3, 2, 3, 2, 3, 3, 0, 1, 3, 1, 1, 2, 1, 3, 3, 1, 2, 2, 2, 3, 3, 0, 2, 0, 2, 1, 1, 0, 3, 0, 1, 2, 0, 3, 0, 1, 2, 0, 1, 1, 1, 1, 2, 3, 0, 3, 3, 3, 1, 1, 0, 1, 2, 1, 3, 3, 0, 0, 1, 2, 3, 2, 1, 0, 0, 3, 1, 3, 3, 1, 1, 0, 0, 3, 3, 2, 2, 2, 1, 3, 3, 0, 2, 1, 1, 2, 1, 0, 1, 3, 1, 1], [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 2, 2, 0, 0, 2, 0, 2, 2, 2, 0, 1, 1, 2, 2, 1, 2, 2, 1, 2, 0, 0], [1, 2, 2, 1, 0, 1, 0, 1, 2, 1, 1, 0, 2, 2], [0, 0, 1, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= ( int(0.0) * i2 )\\ni2 *= max(max(divInt(min(divInt(max(min(in2, int(9.0)), max(int(8.0), int(9.0))),mod(int(6.0),abs(abs(int(8.0))))), divInt(( ( min(min(in1, ( i0 - mod(int(6.0),int(5.0)) )), i1) + abs(i1) ) - int(5.0) ),( i0 + min(i1, int(3.0)) ))),mod(i0,int(1.0))), int(8.0)), int(4.0))\\nloopBreak% = 0\\nwhile ( int(6.0) \\g divInt(abs(res0),abs(abs(min(int(6.0), int(0.0))))) and False ):{:\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( not int(7.0) \\ge ( int(4.0) - max(max(res0, in1), int(5.0)) ) and ( mod(abs(( int(2.0) * i0 )),res0) \\g abs(int(5.0)) and False ) ):{:\\ni2 = max(abs(int(3.0)), int(2.0))\\nif True:{:\\ni2 = i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 -= in0\\nb1 = ( b0 and b2 )\\ni1 = abs(max(mod(( ( int(0.0) - abs(min(i1, ( int(2.0) + int(7.0) ))) ) * ( int(9.0) * i1 ) ),int(9.0)), min(int(3.0), int(7.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 3, 8, 30, 30, 3, 3, 4, 13, 3, 10, 3, 1, 26, 7, 96, 20, 27, 14, 9]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 0, 6, 1, 4, 6, 2, 9], [2], [], [], [1], [0], [], [], [0], [3, 2, 5, 6, 0, 0, 6, 1], [0], [2, 2, 1, 3, 1, 2, 2, 0, 0, 1, 1, 2, 3, 3, 2, 0, 3, 1, 3, 2, 0, 2, 3, 1, 1, 2, 0, 0, 2, 0, 1, 3, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 1, 2, 2, 0, 2], [2, 2, 1, 1], [0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( divInt(int(4.0),min(int(6.0), ( mod(in0,i2) * int(0.0) ))) * int(6.0) ) == ( abs(max(divInt(in2,abs(int(1.0))), abs(mod(res0,divInt(min(int(4.0), int(6.0)),( i0 - i0 )))))) - mod(res0,int(2.0)) ):{:\\ni1 = abs(int(9.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 9, 9, 1, 0, 0, 1, 1, 0, 0, 1, 8, 1, 33, 10, 7, 4, 6]}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [0], [0, 0], [1], [7], [1], [2, 0, 2, 1], [], [1, 0, 0], [0], [0, 0], [], [0], [2], [], [0, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i2 \\g abs(int(7.0))\\nif b0:{:\\nb2 = b1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 4, 0, 3, 1, 2, 0, 1, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 2, 2, 0, 2, 1, 1, 2, 0, 1], [1, 1, 0, 0], [1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 6, 3, 6, 0, 9, 1, 9, 0, 1, 6, 7, 4, 7, 7, 8, 8, 2, 0, 1], [0, 5, 3, 0], [1, 2, 1, 0], [], [0, 1, 0, 1, 1, 1], [0, 0, 0, 0], [0, 0], [], [1, 1], [1, 4, 5, 1, 5, 5, 4, 6, 5, 5, 4, 2, 4, 2, 6, 3, 6, 2, 5, 0, 6, 1, 5, 0, 5], [1, 1, 1, 0], [1, 3, 1, 1, 0, 3, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 2, 0, 2, 3, 0, 1, 3, 3, 2, 2, 0, 2, 2, 0, 2, 2, 1, 2, 1, 0, 0, 0, 2, 2, 3, 0, 1, 0, 3, 2, 3, 3, 0, 0, 2, 3, 1, 1, 2, 3, 0, 2, 0, 3, 1, 3, 1, 1, 0, 3, 1, 1, 2, 1, 1, 0, 2, 3, 0, 1, 3, 3, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 2, 0, 2, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 0, 0], [2, 0, 1, 0, 0, 1, 0, 0, 1, 2, 2, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= int(6.0)\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile abs(int(1.0)) \\l int(6.0):{:\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in1 != abs(in2):{:\\ni1 += in2\\n:}else:{:\\nin2 -= in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(3.0) \\ge min(abs(abs(divInt(max(int(6.0), ( res0 + ( min(in2, int(0.0)) + abs(min(( mod(in2,divInt(( in1 - ( divInt(int(9.0),( int(1.0) + i2 )) + in1 ) ),i2)) - divInt(divInt(abs(res0),int(9.0)),in0) ), max(( min(min(res0, i2), ( max(int(0.0), int(1.0)) * ( abs(in2) * mod(i0,abs(int(6.0))) ) )) - abs(int(7.0)) ), int(4.0)))) ) )),res0))), max(int(7.0), int(7.0))):{:\\ni1 = divInt(int(8.0),int(8.0))\\n:}else:{:\\nb0 = in2 \\l mod(min(i0, int(2.0)),abs(min(min(int(0.0), int(1.0)), in2)))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 21, 21, 4, 4, 0, 6, 4, 2, 0, 2, 25, 4, 82, 18, 22, 12, 9]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 1], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 1, 0, 2, 2, 1, 0, 2, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 4, 3, 6, 7, 2, 6, 5, 0, 4, 4, 7, 6, 1, 2, 5, 6, 3, 2, 8, 8, 2, 7, 2, 6, 4, 7, 0, 4, 5, 8, 9, 5, 6, 5, 8, 4, 8, 2, 5, 0, 3, 6, 9, 9, 8, 3, 6, 9, 6, 2, 3, 0], [2, 4, 2, 4, 0, 5], [0, 0, 2], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [2, 2, 0, 2], [], [1], [5, 2, 4, 1, 1, 1, 2, 6, 1, 3, 5, 0, 3, 0, 5, 1, 3, 6, 5, 3, 4, 2, 6, 0, 2, 5, 0, 4, 5, 4, 2, 5, 1, 4, 6, 1, 0, 0, 3, 0, 6, 4, 2, 4, 3, 1, 0, 6, 5, 5, 0], [0, 0, 0, 1, 0], [0, 3, 3, 3, 3, 2, 1, 3, 2, 2, 3, 0, 2, 0, 1, 2, 1, 0, 3, 3, 0, 0, 2, 3, 2, 2, 3, 2, 2, 0, 3, 2, 1, 0, 3, 0, 2, 0, 3, 3, 3, 1, 3, 2, 2, 3, 2, 1, 1, 1, 1, 1, 0, 1, 0, 2, 3, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 2, 2, 2, 3, 3, 0, 3, 3, 3, 3, 2, 0, 1, 1, 3, 2, 2, 0, 1, 0, 3, 1, 3, 2, 3, 1, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 0, 3, 1, 2, 3, 2, 0, 0, 0, 3, 2, 0, 2, 0, 1, 0, 2, 1, 0, 0, 1, 1, 1, 1, 1, 3, 1, 0, 3, 3, 0, 3, 2, 1, 0, 0, 1, 2, 2, 2, 2, 1, 1, 3, 1, 2, 1, 1, 0, 1, 1, 3, 2, 2, 2, 1, 0, 2, 1, 0, 0, 3, 2, 0, 2, 1, 1, 2, 3, 2, 3, 2, 0, 2, 0, 3, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 3, 0, 0, 1, 2, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [2, 0, 2, 1, 2, 0, 1, 2, 0, 2, 1, 1, 2, 2, 0, 2, 1, 0, 2, 1, 0, 0, 2, 2, 2, 0, 2, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 0, 2, 0, 0], [2, 1, 0, 1, 0, 1, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 2, 0, 1, 2, 1, 2, 2, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not in2 == abs(min(abs(max(divInt(int(4.0),abs(mod(( min(i2, ( in1 * int(8.0) )) - ( int(4.0) + i1 ) ),max(abs(i1), i1)))), mod(min(( ( abs(( divInt(i2,max(( int(3.0) - res0 ), max(i1, ( in0 + abs(abs(min(int(6.0), abs(( ( max(divInt(int(7.0),int(2.0)), int(6.0)) - int(5.0) ) * int(0.0) ))))) )))) + in2 )) * int(4.0) ) - i0 ), mod(min(mod(in0,divInt(int(4.0),int(7.0))), int(6.0)),int(1.0))),i0))), int(2.0))):{:\\nloopBreak% = 0\\nwhile int(5.0) \\le in2:{:\\ni1 = ( divInt(( abs(max(in0, min(min(abs(abs(divInt(res0,int(6.0)))), int(3.0)), abs(mod(( in2 + int(2.0) ),in0))))) * min(int(8.0), abs(( max(int(8.0), ( in1 - i2 )) - min(max(max(abs(abs(abs(max(min(max(( ( abs(res0) + max(int(2.0), ( max(divInt(i0,i2), in2) + min(( i0 - ( in1 + int(7.0) ) ), in2) )) ) - ( int(2.0) * in1 ) ), i2), int(6.0)), int(4.0))))), int(7.0)), int(0.0)), int(4.0)) ))) ),max(int(5.0), in2)) * max(max(i1, max(( int(8.0) + in1 ), res0)), int(9.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( divInt(( ( int(5.0) - int(6.0) ) * max(int(5.0), ( int(8.0) - int(4.0) )) ),i0) * int(8.0) )\\ni0 = int(2.0)\\nloopBreak% = 0\\nwhile min(mod(( mod(int(5.0),in0) * mod(int(0.0),i0) ),res0), abs(mod(in1,( int(3.0) * int(6.0) )))) == mod(min(( abs(divInt(i2,( in1 + min(int(9.0), in0) ))) - int(9.0) ), int(8.0)),i1):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni0 += int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(6.0)\\nif not int(9.0) \\le int(6.0):{:\\nb0 = int(2.0) \\l min(in2, in2)\\n:}else:{:\\nb2 = int(3.0) != mod(i0,int(0.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 12, 12, 5, 7, 54, 54, 6, 3, 0, 10, 6, 4, 0, 1, 51, 5, 202, 50, 52, 31, 20]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 0, 2, 0, 1], [0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [8, 1, 1, 4, 4, 1, 2, 7, 1, 5, 8, 4, 3, 7, 4, 8, 9, 8, 1, 6, 9, 6, 6, 5, 7, 4, 3, 4, 6, 5, 0, 5, 5, 6, 7, 1, 7, 1, 7, 4, 1, 5, 1, 9, 0, 8, 1, 4, 1], [1, 2, 1, 4, 5, 5, 2], [1, 0, 2, 2, 0, 1], [], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0], [0], [0, 1, 1, 1, 0], [1, 1, 2, 0, 1, 1, 4, 0, 1, 6, 2, 4, 0, 3, 0, 2, 5, 5, 4, 6, 6, 4, 5, 4, 5, 4, 5, 0, 3, 0, 2, 5, 3, 1, 0, 1, 5, 3, 1, 4, 2, 3, 4, 2, 2, 6, 2, 1, 4, 1, 3, 6, 4], [0, 1, 1, 0], [1, 2, 0, 2, 2, 1, 0, 3, 2, 1, 2, 0, 1, 1, 2, 1, 0, 3, 3, 0, 0, 3, 0, 2, 2, 0, 3, 2, 2, 2, 2, 0, 1, 1, 2, 3, 0, 3, 1, 2, 1, 3, 3, 0, 0, 0, 3, 3, 3, 0, 1, 3, 2, 0, 0, 2, 0, 1, 1, 0, 0, 1, 0, 1, 1, 2, 0, 3, 2, 0, 1, 3, 0, 1, 0, 1, 3, 2, 1, 2, 0, 3, 2, 3, 3, 3, 1, 3, 3, 1, 2, 2, 2, 2, 2, 1, 3, 3, 0, 2, 1, 0, 2, 0, 2, 1, 3, 0, 1, 2, 3, 3, 2, 3, 3, 0, 3, 1, 3, 0, 1, 1, 1, 0, 2, 2, 3, 3, 1, 3, 1, 1, 3, 0, 0, 1, 0, 1, 2, 2, 0, 2, 0, 1, 2, 3, 1, 0, 2, 0, 2, 3, 1, 1, 2, 1, 0, 2, 1, 1, 3, 3, 3, 3, 2, 2, 2, 0, 0, 1, 3, 0, 0, 0, 2, 3, 2, 0, 1, 0, 2, 1, 0, 1, 1, 3, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2, 0, 2, 0, 1, 1, 2, 1, 2, 2, 0, 1, 1, 0, 1, 1, 2, 1, 2, 1, 0, 2, 1, 2, 0, 1, 1, 0, 2, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 0], [2, 1, 2, 1, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 2, 2, 0, 1, 2, 2, 2, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(8.0)\\nif b1:{:\\nif ( i1 * ( ( int(1.0) - i2 ) * abs(divInt(int(1.0),mod(i0,int(4.0)))) ) ) \\g int(4.0):{:\\nb0 = ( int(1.0) - i1 ) == min(abs(i1), in1)\\n:}else:{:\\nif True:{:\\nb2 = b2\\n:}else:{:\\ni0 += min(i1, divInt(mod(res0,max(divInt(divInt(( mod(i2,int(2.0)) - int(7.0) ),( max(in1, abs(int(1.0))) - ( int(5.0) - max(abs(i0), in0) ) )),i0), abs(min(max(i2, int(8.0)), max(( in2 - in2 ), mod(in1,int(4.0))))))),int(3.0)))\\n:}\\n:}\\n:}\\nloopBreak% = 0\\nwhile res0 \\g res0:{:\\nb0 = int(7.0) \\le in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(4.0) != int(8.0):{:\\nin2 *= ( in1 * min(( in2 - int(9.0) ), max(in1, int(8.0))) )\\n:}else:{:\\nif in2 != int(1.0):{:\\ni0 = max(mod(int(6.0),divInt(in0,abs(divInt(max(abs(max(int(9.0), min(abs(int(6.0)), ( mod(( divInt(( int(6.0) - max(abs(i0), mod(int(5.0),i2)) ),( in2 * divInt(int(7.0),min(in0, int(4.0))) )) + ( max(max(divInt(min(abs(i1), max(int(3.0), max(i0, int(4.0)))),int(6.0)), int(5.0)), i1) + ( ( min(min(int(0.0), max(int(5.0), int(5.0))), abs(in2)) * in0 ) * int(6.0) ) ) ),i1) + int(7.0) )))), mod(( in1 - divInt(i2,int(1.0)) ),mod(max(int(7.0), in0),( in1 * divInt(max(int(1.0), int(7.0)),divInt(int(4.0),i2)) )))),( int(1.0) * int(5.0) ))))), max(max(max(abs(( ( ( i2 * res0 ) + int(1.0) ) - max(i2, i1) )), in1), ( max(divInt(i1,int(9.0)), in0) + mod(int(0.0),res0) )), int(8.0)))\\n:}\\n:}\\nb1 = int(14.0) == min(int(1.0), in1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 49, 49, 7, 6, 0, 10, 7, 3, 1, 5, 53, 4, 188, 47, 44, 26, 23]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [0, 1], [1, 1, 1], [2, 5, 7], [4], [2, 0], [], [0, 1], [0], [0], [], [], [2, 0, 1, 6, 6], [1], [3, 2, 0, 1, 1, 1, 2, 0, 2, 0, 0], [0, 1, 1], [1], [0, 2], [0, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = max(( i2 + int(2.0) ), int(5.0)) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= divInt(i1,mod(res0,res0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 1, 2, 0, 2, 1, 1, 0, 0, 5, 1, 11, 3, 1, 2, 2]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [1, 8], [], [], [], [], [], [], [], [], [4, 5], [0], [3, 2, 0, 3, 1, 1], [0], [2, 1], [1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = abs(( in2 - max(int(1.0), int(8.0)) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 6, 1, 2, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 2], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 5, 5, 5, 0, 8, 4, 2, 6, 9, 2, 9, 7, 6, 3, 1, 6], [0], [2], [], [1], [0], [], [], [], [5, 5, 3, 0, 5, 3, 3, 0, 6, 5, 2, 2, 2, 1], [], [3, 2, 2, 0, 3, 1, 3, 3, 0, 2, 1, 2, 2, 2, 3, 1, 3, 1, 1, 2, 1, 0, 1, 2, 1, 1, 0, 0, 1, 3, 3, 2, 1, 2, 0, 3, 1, 3, 3, 3, 0, 2, 2, 1, 3, 2, 0, 0, 3, 2, 2, 1, 0, 2, 0, 1, 0, 3, 1, 1, 3, 0, 2, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 2, 2, 2, 1, 1, 1], [1, 1, 2, 2, 2, 0, 0, 2, 2], [0, 0, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(( ( in2 - max(int(9.0), min(max(in2, divInt(int(1.0),divInt(divInt(( max(int(5.0), min(int(5.0), int(5.0))) - ( int(0.0) * in0 ) ),int(8.0)),mod(int(4.0),int(2.0))))), i0)) ) * in2 ), int(6.0)) \\l max(max(( int(9.0) * divInt(in0,max(int(2.0), min(abs(abs(in0)), ( ( int(9.0) + abs(( i0 + res0 )) ) * max(( mod(int(7.0),in2) * divInt(i2,int(6.0)) ), i2) )))) ), max(int(3.0), int(1.0))), max(i2, mod(i1,int(6.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 18, 18, 1, 1, 0, 1, 1, 0, 0, 0, 14, 0, 65, 17, 16, 9, 8]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1], [0, 2, 0, 1, 0, 1], [0], [0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 4, 1, 0, 5, 2, 0, 0, 1, 7, 7, 4, 6], [0, 4, 3, 4], [1, 0, 2, 2], [1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0], [2, 3, 3, 2, 1, 2, 0], [0], [0], [3, 0, 4, 3, 3, 4, 1, 1, 1, 6], [0, 0], [3, 1, 3, 0, 2, 3, 1, 2, 0, 1, 3, 1, 2, 2, 1, 3, 2, 2, 0, 1, 2, 3, 0, 1, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 0], [1, 1, 2, 1, 2, 2, 2], [1, 0, 1, 2], [1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(int(0.0), max(in0, ( abs(int(5.0)) - mod(i0,int(4.0)) ))) \\l max(int(1.0), ( divInt(int(0.0),abs(divInt(mod(in1,int(5.0)),divInt(abs(in0),int(2.0))))) + ( abs(int(0.0)) - int(0.0) ) ))\\nif not int(1.0) \\le int(7.0):{:\\nin0 = ( in1 * i1 )\\ni1 = int(7.0)\\nb0 = ( ( not True or i1 \\ge int(4.0) ) or not b2 )\\nb2 = res0 \\le int(6.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 14, 14, 4, 4, 2, 11, 4, 7, 1, 1, 10, 2, 38, 9, 7, 4, 5]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1, 1, 1], [7, 0, 1, 5], [3], [2], [], [1], [0], [], [], [], [5, 6, 2, 4, 6, 0, 4], [1], [0, 3, 3, 2, 0, 3, 3, 0, 2, 1, 1, 2, 3, 2, 1, 1, 3, 0, 0, 0], [0, 0, 1, 0], [2, 0, 0, 0, 2, 2], [1, 1, 0, 2], [0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in2 \\ge abs(min(( res0 - min(min(i2, ( int(7.0) - int(0.0) )), divInt(abs(( int(1.0) + int(5.0) )),abs(in1))) ), res0))\\ni0 *= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 7, 1, 20, 4, 6, 4, 1]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [], [], [], [1, 1], [], [0, 0], [], [1, 0], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 2, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 0, 0], [1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 2, 2, 9, 6, 9, 8, 1, 3, 0, 4, 3, 0, 4, 4, 2, 5, 6, 7, 0, 2, 9, 4, 9, 2, 2, 3, 4, 6, 9, 9, 5, 2, 7, 5, 1, 4, 1, 8, 8, 5, 4, 2, 8, 5, 6, 1, 7, 6, 7, 4, 2, 2, 9, 5, 9], [2, 0], [2], [0], [0, 0, 1, 0, 1], [0, 0], [2, 3, 1], [0], [], [0, 2, 4, 2, 0, 0, 5, 5, 5, 2, 2, 2, 6, 2, 1, 5, 1, 3, 0, 5, 5, 5, 4, 1, 2, 3, 1, 2, 5, 6, 6, 3, 0, 1, 6, 6, 1, 1, 6, 4, 6, 6, 5, 1, 3, 0, 4, 3, 5, 6, 4], [1, 1], [2, 3, 3, 2, 0, 1, 0, 3, 0, 3, 2, 0, 0, 3, 0, 0, 1, 0, 2, 3, 3, 0, 3, 2, 2, 3, 1, 2, 1, 3, 2, 0, 3, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 1, 0, 1, 2, 1, 3, 0, 0, 2, 2, 2, 1, 1, 3, 1, 3, 2, 2, 3, 0, 0, 3, 3, 3, 2, 0, 2, 2, 2, 3, 0, 3, 3, 3, 2, 2, 2, 0, 1, 3, 0, 0, 2, 0, 0, 2, 3, 2, 1, 2, 0, 0, 3, 3, 0, 3, 0, 2, 2, 3, 2, 2, 1, 0, 1, 3, 1, 2, 1, 0, 1, 2, 2, 1, 1, 2, 0, 0, 0, 1, 1, 3, 2, 2, 2, 1, 2, 1, 3, 0, 3, 2, 1, 1, 3, 1, 2, 3, 0, 0, 1, 1, 3, 2, 1, 0, 0, 2, 3, 1, 0, 1, 3, 2, 3, 2, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 3, 2, 0, 0, 3, 2, 2, 2, 3, 2, 3, 2, 2, 3, 1, 0, 2, 1, 2, 3, 3, 0, 1, 1, 1, 2, 1, 0, 1, 1, 2, 1, 1, 3, 2, 0, 3, 2, 2, 1, 1, 0, 3, 3, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 1, 1, 1, 0, 0, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 1, 2, 2, 1, 1, 2, 0, 0, 2, 0], [1, 0, 1, 0, 2, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 2, 1, 2, 0, 2, 2, 0, 2, 1, 0, 1, 1, 1, 1, 1, 2, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not ( mod(min(min(mod(i0,int(2.0)), i2), min(in1, min(( i2 - i0 ), abs(i0)))),in2) == int(4.0) and True )\\nloopBreak% = 0\\nwhile in2 \\l ( max(min(in2, min(( mod(abs(int(2.0)),divInt(int(2.0),min(( i2 + max(divInt(divInt(( mod(int(9.0),abs(int(6.0))) - min(int(9.0), mod(int(8.0),i2)) ),int(1.0)),( int(3.0) + abs(i2) )), res0) ), mod(( divInt(int(0.0),int(4.0)) * min(int(3.0), max(( divInt(abs(i2),i1) + abs(min(max(( in2 + divInt(divInt(divInt(max(i1, max(min(min(mod(( mod(in0,int(0.0)) - abs(i0) ),in2), ( in2 - in2 )), mod(max(( int(4.0) - ( in1 - i1 ) ), abs(max(i2, abs(in0)))),mod(( max(divInt(mod(int(4.0),i1),int(2.0)), abs(int(5.0))) + divInt(int(6.0),i2) ),int(7.0)))), ( mod(int(0.0),int(2.0)) - divInt(in2,res0) ))),res0),int(9.0)),int(4.0)) ), min(divInt(( divInt(int(9.0),( int(2.0) + min(in0, min(( int(2.0) - int(3.0) ), min(int(4.0), ( min(i0, i1) * int(6.0) )))) )) * int(9.0) ),abs(( int(9.0) + res0 ))), res0)), ( max(int(5.0), i1) - int(2.0) ))) ), min(( abs(( i1 + int(7.0) )) * int(5.0) ), int(1.0)))) ),int(4.0))))) - res0 ), int(1.0))), int(8.0)) * int(8.0) ):{:\\nin1 += res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 *= ( abs(divInt(in2,i1)) * max(( ( mod(abs(mod(abs(( ( max(int(5.0), in0) + divInt(int(4.0),( max(abs(i0), int(2.0)) * int(8.0) )) ) - int(5.0) )),( int(6.0) + in1 ))),int(1.0)) - int(7.0) ) - ( int(6.0) - int(7.0) ) ), min(divInt(in0,min(( ( int(4.0) - int(2.0) ) - in2 ), abs(min(divInt(( res0 * int(2.0) ),int(9.0)), ( int(5.0) - in1 ))))), int(9.0))) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 57, 57, 2, 1, 1, 5, 2, 3, 1, 0, 51, 2, 223, 66, 51, 37, 31]}, {"genotype": [[0], [0, 0, 1, 1], [0, 1, 2, 1], [1], [0, 0, 1], [1, 1, 1, 1, 1, 1], [7, 0, 8, 1, 8, 8], [5, 5], [1, 1], [], [1, 1, 0], [0, 0], [1], [0], [], [3, 5, 5, 0, 2, 4, 1, 3], [0], [3, 1, 0, 2, 1, 0, 3, 0, 3, 3, 2, 0, 1, 0, 3, 1, 0, 2, 1, 3, 0, 1], [0, 1, 1], [2, 1, 1, 0, 0, 0], [1], [0, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = abs(int(7.0)) != in0\\nb1 = ( int(0.0) - in2 ) != max(in2, max(min(divInt(i0,int(8.0)), i2), min(int(1.0), in1)))\\nloopBreak% = 0\\nwhile True:{:\\ni1 = mod(int(8.0),min(in0, int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 6, 6, 2, 2, 0, 3, 2, 1, 1, 0, 8, 1, 22, 3, 6, 1, 2]}, {"genotype": [[0], [1], [1], [], [1], [1], [6], [], [], [], [], [], [], [], [], [2, 0], [0], [2, 0, 1], [1], [], [], [1]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = mod(i0,int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 0, 0, 1]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 3, 5, 2, 3, 4, 7], [5], [], [], [1], [0], [], [], [1], [3, 6, 6, 2, 1], [1, 0], [3, 2, 1, 3, 0, 1, 3, 1, 2, 1, 2, 1, 1, 0, 3, 3, 3, 0, 1, 1], [0, 1, 1], [0, 1, 2, 2, 1, 1], [1, 2], [1, 1]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(( int(1.0) - max(in0, int(1.0)) ), abs(int(3.0))) != mod(int(5.0),mod(int(2.0),int(3.0))):{:\\nres0 *= res0\\n:}else:{:\\ni2 = abs(max(max(i1, int(4.0)), int(7.0)))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 8, 8, 1, 0, 0, 1, 1, 0, 0, 1, 5, 2, 20, 3, 6, 2, 2]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 4, 3, 3, 0, 1, 5, 3, 1, 4, 3, 7, 9, 9, 8, 4, 9, 6, 1, 3, 4, 2], [], [], [], [], [], [], [], [], [3, 2, 6, 2, 2, 3, 4, 1, 6, 1, 2, 6, 3, 3, 5, 0, 3, 4, 2, 1], [1], [2, 3, 0, 3, 2, 1, 3, 1, 3, 2, 3, 2, 2, 2, 1, 3, 2, 1, 0, 3, 2, 0, 0, 1, 1, 2, 2, 2, 1, 3, 2, 1, 3, 2, 3, 1, 1, 2, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 0, 2, 0, 1, 1, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 1, 0, 2, 2, 3, 2, 2, 1, 2, 3, 1, 0, 2, 0, 1, 1, 2, 2, 0, 1, 3, 2, 3, 1, 2, 0, 0, 0, 2, 0, 3, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 0], [2, 1, 0, 2, 1, 0, 0, 0, 1, 0, 0, 1, 2, 1, 1, 2, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= ( max(i2, max(( int(4.0) - max(int(4.0), abs(divInt(abs(mod(divInt(( int(4.0) + min(( int(3.0) * res0 ), min(( i2 - i2 ), int(3.0))) ),int(0.0)),( ( ( int(1.0) + abs(mod(int(5.0),abs(( abs(int(3.0)) + int(1.0) )))) ) + mod(in0,in1) ) - abs(abs(abs(abs(i1)))) ))),abs(min(min(max(int(4.0), res0), ( i1 + int(3.0) )), int(7.0)))))) ), max(min(i2, max(max(abs(abs(abs(res0))), abs(abs(int(9.0)))), in0)), ( mod(abs(( ( int(9.0) + divInt(max(int(8.0), in0),( in2 - int(4.0) )) ) * int(9.0) )),mod(( i0 - int(6.0) ),max(( abs(int(1.0)) - mod(in0,in1) ), i2))) * ( i1 - min(int(3.0), int(4.0)) ) )))) + int(2.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 23, 23, 0, 0, 0, 0, 0, 0, 0, 0, 20, 1, 100, 26, 32, 18, 9]}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 0, 2, 0, 1], [1, 1], [1, 0, 1], [1, 1, 1, 1, 1, 1], [0, 3, 3, 8, 4, 4], [2, 2, 4], [2], [], [1, 1, 1], [0, 0, 0], [], [], [], [6, 6, 6, 1, 0, 3, 4, 6, 0, 3, 1, 6, 4], [0, 1], [0, 3, 3, 0, 1, 3, 1, 0, 0, 0, 2, 1, 2, 3, 3, 0, 0, 0, 0, 3, 3, 2, 0, 1, 1, 0, 3, 1], [1, 1, 0], [1, 1, 1, 0, 1, 2, 1, 2], [0, 1], [1, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile res0 == max(max(res0, int(0.0)), max(int(3.0), res0)):{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in0 == mod(int(3.0),mod(min(max(in1, res0), i0),in0)):{:\\nb2 = abs(max(( i1 + int(8.0) ), int(4.0))) \\le res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 -= abs(int(4.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 6, 6, 3, 1, 0, 3, 3, 0, 0, 0, 13, 2, 28, 3, 8, 2, 2]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [2, 1, 0, 2, 0, 0], [0, 1], [1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 8, 2, 1, 9, 7, 0, 0, 4, 9, 2, 2, 7, 9, 5, 2], [5, 0], [0, 1, 0], [], [0, 1, 1, 0, 0], [0, 0], [2, 1, 0], [1], [0], [3, 6, 4, 4, 4, 6, 1, 0, 0, 5, 0, 6, 2, 4, 0, 2, 3, 4, 0, 2, 0, 0, 2], [1, 1], [2, 0, 0, 2, 3, 0, 2, 3, 2, 0, 0, 2, 3, 0, 3, 0, 3, 2, 3, 2, 0, 3, 0, 2, 1, 0, 1, 0, 2, 3, 1, 2, 1, 0, 3, 3, 2, 0, 0, 0, 1, 2, 1, 2, 3, 3, 3, 2, 1, 1, 0, 0, 3, 0, 3, 1, 3, 3, 0, 1, 1, 2, 1, 3, 0, 2, 3, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [2, 2, 0, 1, 1, 2, 2, 1, 0, 1, 2, 0, 0, 1, 0, 1, 1, 1, 2], [1, 2, 1, 1, 1, 0, 1, 1, 0, 2, 0], [0, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( in0 - res0 ) != ( abs(in1) * divInt(abs(divInt(in1,in1)),mod(min(res0, max(i1, max(( abs(( i0 - abs(i0) )) - mod(int(2.0),in2) ), int(8.0)))),i0)) ):{:\\nres0 -= divInt(max(int(2.0), divInt(int(1.0),i2)),min(max(( in1 + i0 ), i2), int(9.0)))\\nb0 = mod(int(7.0),( abs(min(min(( int(0.0) - int(0.0) ), in0), in1)) - max(i0, min(int(4.0), max(max(i2, int(9.0)), int(2.0)))) )) \\l ( int(2.0) + max(i0, ( abs(int(7.0)) * i0 )) )\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(952.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 992, "mapping_values": [1, 6, 6, 2, 4, 16, 16, 2, 3, 0, 5, 2, 3, 1, 1, 23, 2, 70, 16, 19, 11, 7]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1, 1], [2, 6, 7], [], [], [], [], [], [], [], [], [1, 5, 4, 3, 2], [0, 1], [3, 3, 3, 1, 1, 2, 0, 0, 3, 1, 0], [0], [1, 1, 0, 2], [0, 1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = max(max(min(int(2.0), int(6.0)), ( in2 + in1 )), abs(int(7.0)))\\nin0 -= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 11, 1, 4, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 4, 6], [1], [3, 0, 0], [], [1], [2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= max(in1, res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1, 1], [8, 6, 2], [4], [1], [], [1], [0], [], [], [], [6, 3, 6, 4, 1, 6, 2], [0], [3, 0, 2, 3, 3, 2, 0, 1, 0, 1, 0, 2, 0, 2, 1, 0], [0, 0, 1, 1], [1, 2, 1], [2, 0], [0, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(res0, ( abs(max(( in0 * int(8.0) ), res0)) + int(6.0) )) \\le in1\\ni1 = divInt(res0,divInt(int(2.0),i2))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 7, 1, 16, 4, 3, 2, 2]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [1], [], [0], [], [0], [], [], [4, 4, 0], [0], [3, 0, 0], [], [0], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nin1 = min(in1, i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 3, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 2, 1, 5, 1, 7, 3], [], [], [], [], [], [], [], [], [2, 2, 6, 5, 4, 1, 1, 1, 0], [0], [3, 2, 2, 3, 3, 3, 2, 1, 0, 1, 0, 3, 3, 2, 1, 3, 3, 0, 3, 0, 3, 0, 3, 2, 1, 1, 0, 1, 2, 3, 3, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1], [2, 0, 1, 2, 0, 0, 2, 0, 0, 1, 0, 2, 0], [0, 1], [1, 0, 0, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(( mod(min(max(abs(divInt(int(7.0),i2)), int(4.0)), res0),min(min(( int(2.0) + abs(min(in2, min(in1, max(i1, min(divInt(int(1.0),int(5.0)), i1))))) ), int(1.0)), divInt(abs(min(i1, int(7.0))),int(3.0)))) - i0 ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 35, 6, 13, 2, 4]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [2, 2, 1, 1, 2, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 4, 2, 2, 7, 2, 4], [5, 2, 3], [0], [], [1, 0, 1, 1], [0, 0, 0], [1], [1], [0], [5, 2, 0, 3, 4, 3, 4, 1, 2, 3, 6], [1, 1], [2, 0, 0, 1, 0, 1, 2, 0, 1, 3, 1, 3, 2, 2, 2, 3, 1, 0, 1, 3, 1, 0, 0, 0, 0, 3, 1], [0, 1, 1, 0, 1], [0, 1, 0, 0, 2], [2, 0, 0, 0], [1, 0, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in2 * i2 ) != int(5.0):{:\\nloopBreak% = 0\\nwhile False:{:\\ni0 += in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(0.0) == mod(in1,int(4.0))\\n:}\\nloopBreak% = 0\\nwhile min(int(2.0), max(divInt(( divInt(min(int(2.0), in0),int(7.0)) + min(int(2.0), in1) ),i1), i2)) \\ge in0:{:\\nres0 += abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 6, 6, 3, 3, 8, 8, 3, 1, 0, 4, 3, 1, 1, 1, 11, 2, 27, 5, 5, 4, 3]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1], [4], [4], [2], [], [1], [0], [], [], [], [3, 5, 4], [1], [1, 0, 0], [], [], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(4.0) \\le in0\\nin2 -= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 0, 1, 1], [2, 0, 2, 0, 1, 0], [0, 1], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1], [1, 4, 5, 0, 8, 7, 5], [1, 0, 3, 1], [0, 2, 0, 2], [0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0], [3, 2, 1, 3, 0, 2, 3, 0], [1], [1], [4, 4, 3, 0, 1, 2, 0, 2, 1, 4, 6], [0, 0], [0, 0, 0, 2, 1, 1, 3, 2, 1, 0, 0, 1, 2, 1, 0, 3, 0, 3, 0, 1, 3, 1, 0], [0, 0, 0], [1, 2, 1, 0], [2, 0, 1], []], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in1 \\g in1 and not False ):{:\\nin0 = i0\\n:}else:{:\\nloopBreak% = 0\\nwhile ( ( int(1.0) * int(4.0) ) \\l max(( int(5.0) + i1 ), i2) and b0 ):{:\\nb2 = not ( int(0.0) \\ge ( int(8.0) - i0 ) and b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = abs(i1)\\n:}\\nb2 = max(in1, int(7.0)) \\g min(int(5.0), res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 7, 7, 4, 4, 3, 12, 4, 8, 1, 1, 11, 2, 23, 3, 4, 3, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 4, 0, 1, 0, 0, 2, 5, 7, 1, 4, 6, 5, 8, 9], [], [], [], [], [], [], [], [], [1, 3, 2, 1, 6, 4, 3, 0, 0, 3, 2, 2, 0, 2, 2, 6, 5, 4, 5, 6, 4, 1, 5, 2, 0, 6, 0], [1, 1, 1], [2, 3, 0, 1, 3, 3, 0, 0, 2, 3, 2, 3, 0, 2, 2, 3, 0, 0, 2, 0, 3, 0, 3, 0, 1, 3, 2, 0, 2, 3, 3, 1, 3, 0, 0, 0, 3, 3, 0, 3, 3, 3, 2, 2, 2, 0, 3, 1, 1, 2, 0, 2, 0, 3, 3, 1, 2, 1, 2, 2, 1, 3, 3, 1, 0, 3, 1, 0, 1, 0, 0, 2, 0, 0, 3, 3, 2, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 0, 2, 1, 1, 0, 2, 1, 0, 0, 0, 1, 2, 0, 2, 1, 2, 1, 1, 0, 2, 0], [0, 0, 2, 2, 0, 2, 0, 2, 2, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += mod(max(in0, int(7.0)),min(max(i2, i1), ( min(( min(res0, ( divInt(abs(in1),in0) + mod(i0,max(i0, max(in0, int(5.0)))) )) * min(( i2 * mod(abs(max(int(4.0), min(i2, i0))),i2) ), min(min(i2, max(abs(min(divInt(divInt(( res0 + abs(int(0.0)) ),int(1.0)),divInt(in2,( in1 * max(abs(int(0.0)), divInt(int(0.0),divInt(( int(2.0) + max(max(int(5.0), in2), min(int(7.0), res0)) ),int(1.0)))) ))), in1)), i1)), ( in2 * i2 ))) ), abs(min(divInt(int(4.0),int(6.0)), i0))) * int(5.0) )))\\nres0 += int(8.0)\\ni0 -= int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 992, "mapping_values": [1, 3, 3, 0, 3, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 27, 3, 83, 18, 25, 11, 10]}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 1, 2, 2, 2, 1, 2, 1, 0, 1, 2, 0, 1], [0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 3, 3, 3, 8, 8, 5, 3, 6, 9, 0, 4, 1, 1, 6, 9, 2, 6, 8, 7, 4, 6, 3, 4, 2, 9, 3], [0, 2, 3, 0, 1, 0, 5], [2, 2, 2, 0, 2], [0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 2, 3, 1, 3, 0, 0], [1, 1], [0, 1, 1], [4, 1, 0, 1, 2, 2, 3, 0, 6, 3, 5, 3, 5, 5, 2, 2, 5, 1, 5, 0, 3, 3, 3, 4, 4, 3, 2, 1, 2, 0, 3, 1, 4, 5, 6, 4, 2, 3], [1, 0, 0, 0, 1], [0, 1, 2, 3, 1, 3, 0, 2, 2, 1, 0, 3, 2, 3, 3, 2, 3, 3, 1, 3, 0, 3, 2, 3, 3, 1, 0, 1, 0, 0, 1, 1, 3, 0, 3, 1, 0, 3, 1, 1, 1, 3, 0, 2, 1, 0, 1, 3, 3, 2, 3, 2, 1, 0, 1, 3, 1, 1, 0, 0, 3, 0, 2, 3, 1, 3, 2, 0, 3, 0, 0, 2, 0, 1, 0, 3, 3, 0, 3, 1, 3, 3, 1, 0, 0, 3, 3, 0, 0, 0, 1, 2, 1, 3, 3, 3, 0, 1, 1, 3, 2, 0, 1, 1, 0, 2, 3, 0, 0, 0, 3, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 2, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1, 2], [0, 1, 2, 1, 1, 2, 0, 2, 0, 0, 2], [1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in1 \\l int(0.0):{:\\ni1 += mod(abs(int(5.0)),abs(i0))\\ni1 = ( ( int(3.0) - i2 ) * max(mod(max(max(( max(max(int(3.0), min(i2, min(( abs(max(int(3.0), in0)) - int(8.0) ), i0))), res0) - int(8.0) ), int(5.0)), max(in0, min(int(3.0), in2))),min(int(6.0), int(9.0))), int(0.0)) )\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nif min(in0, mod(int(4.0),in2)) == int(1.0):{:\\nloopBreak% = 0\\nwhile not max(abs(divInt(abs(( int(1.0) * in2 )),int(6.0))), max(int(9.0), int(2.0))) \\ge i2:{:\\nb2 = i2 \\l min(in2, divInt(min(int(6.0), abs(( i1 + max(in2, i0) ))),( in0 * int(8.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif in0 \\g min(min(in0, min(int(7.0), abs(min(int(4.0), in1)))), in1):{:\\nin0 = min(min(i2, i1), i2)\\n:}else:{:\\ni0 = int(6.0)\\n:}\\n:}\\nb2 = ( ( int(3.0) + abs(min(min(in0, int(4.0)), int(2.0))) ) \\l max(( i1 + int(9.0) ), int(3.0)) and False )\\nloopBreak% = 0\\nwhile in1 != mod(max(in2, res0),in1):{:\\ni2 *= abs(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( b0 and b2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 6, 8, 28, 28, 7, 5, 2, 14, 7, 7, 2, 3, 38, 5, 112, 15, 36, 11, 6]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [4, 8], [5], [0], [], [0, 0, 0, 1], [0], [2, 2, 2], [], [], [6], [], [0, 2, 1, 1], [0], [], [1], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not not not res0 != ( int(4.0) - int(8.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 4, 1, 3, 0, 0, 1, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 1, 1, 1], [1], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 3, 9, 9, 5, 1, 5, 5, 8, 5, 4], [0, 0, 0, 2], [0, 0, 0], [], [1, 1, 0, 1, 1], [0, 0, 0, 0], [2], [], [], [3, 0, 6, 2, 1, 6, 6, 1, 1, 5, 6, 2, 2, 4], [1], [0, 2, 0, 3, 1, 2, 3, 1, 2, 1, 3, 3, 0, 0, 3, 1, 2, 3, 2, 0, 0, 2, 3, 0, 1, 1, 1, 3, 3, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 2, 2, 2, 3, 1, 1, 2, 1, 3, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 2, 2, 2], [1, 0, 0, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 \\l divInt(i0,max(int(5.0), ( min(int(1.0), ( int(3.0) - abs(abs(res0)) )) + i2 ))):{:\\nb0 = min(int(9.0), mod(abs(( i1 + res0 )),divInt(abs(res0),int(9.0)))) \\l int(5.0)\\nb0 = not int(1.0) \\l max(abs(i1), int(5.0))\\nb0 = i1 == divInt(in2,divInt(res0,abs(i2)))\\ni2 *= abs(( ( ( abs(int(5.0)) + int(8.0) ) - mod(int(5.0),abs(in1)) ) - int(4.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 12, 12, 4, 3, 0, 5, 4, 1, 0, 0, 14, 1, 50, 12, 13, 7, 6]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1], [2, 1, 2, 1, 1, 0, 0], [0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1], [6, 6, 9, 5, 4, 0], [], [0, 2, 2, 0], [1], [0, 0, 0, 0, 0, 0], [], [1, 0, 1, 3, 1, 0], [0, 0, 0], [1], [0, 0, 1, 2, 5, 6, 6, 3, 2, 5, 0, 2], [1, 0, 1], [1, 3, 3, 3, 3, 0, 1, 3, 0, 3, 2, 1, 0, 0, 3, 3, 0, 0, 2, 3, 2, 2, 1, 0, 1, 3, 0, 1, 0], [1, 0, 0, 0], [0, 0, 1, 1, 2, 1, 1, 2, 0, 1], [0, 2, 1, 2, 2], [0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\ni0 += int(6.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile b0:{:\\ni0 = min(min(max(max(i1, int(6.0)), abs(i2)), max(divInt(int(9.0),in2), res0)), max(abs(res0), in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = True\\nb2 = ( True or b0 )\\ni2 *= ( min(( ( int(5.0) - in2 ) * int(4.0) ), max(i0, int(0.0))) * i2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 6, 6, 0, 4, 1, 6, 0, 6, 3, 1, 12, 3, 29, 4, 10, 5, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 0, 0, 4, 7, 5, 7, 7, 5, 4, 3, 1], [0], [2], [], [1], [0], [], [], [], [5, 2, 1, 2, 5, 1, 0, 1, 2, 2, 2, 6, 4, 1, 6, 1], [], [2, 0, 2, 0, 3, 2, 0, 3, 0, 3, 2, 1, 3, 3, 0, 1, 1, 2, 0, 2, 3, 0, 3, 0, 2, 3, 3, 1, 1, 2, 1, 0, 3, 3, 3, 3, 0, 1, 3, 1, 3, 2, 1, 0, 0, 2, 2, 0, 1, 3, 3, 3, 0, 1, 2, 1, 0, 1, 3, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 0, 1, 1, 2], [2, 0, 2, 1, 2, 1, 0, 1, 1, 2], [0, 0]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( in2 * ( i2 + min(( i1 * min(i2, min(divInt(int(9.0),max(min(in2, int(6.0)), int(0.0))), ( i1 - ( min(i0, min(i1, ( max(max(int(0.0), int(4.0)), ( int(7.0) * i2 )) - max(max(max(abs(i2), int(5.0)), abs(int(7.0))), abs(divInt(int(7.0),i2))) ))) + res0 ) ))) ), ( ( in1 - int(5.0) ) - min(max(max(i1, int(4.0)), ( int(3.0) * res0 )), int(1.0)) )) ) ) \\l abs(i1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 13, 13, 1, 1, 0, 1, 1, 0, 0, 0, 16, 0, 60, 12, 19, 10, 2]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1, 1, 1], [8, 4, 5, 2], [4], [0], [], [1], [0], [], [], [], [0], [1], [2, 1, 1, 1, 3, 3, 1], [0], [2, 2], [1, 2], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(8.0) - int(4.0) ) \\le int(5.0)\\ni0 *= abs(abs(int(2.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 7, 1, 2, 2, 0]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 3, 4, 2, 9, 3, 6, 8, 1, 1, 8, 4, 7, 2, 0, 8, 0, 6, 8, 4, 3, 5, 1, 1, 9, 7, 9, 3, 6, 3, 1, 8, 8, 0, 3, 4, 1, 3, 8, 5, 1, 8, 8, 1, 3, 1], [3], [], [], [1], [0], [], [], [], [4, 0, 6, 3, 1, 6, 6, 3, 4, 5, 4, 3, 5, 2, 3, 0, 0, 2, 6, 6, 0, 5, 2, 6, 5, 3, 0, 5, 0, 2, 6, 1, 0, 0, 1, 4, 3, 2, 0, 2, 1, 5, 1, 5, 4, 2, 5, 0, 5], [0], [2, 3, 1, 3, 2, 0, 2, 0, 2, 0, 2, 3, 2, 0, 1, 0, 2, 3, 1, 0, 2, 1, 2, 3, 2, 1, 2, 2, 3, 0, 3, 0, 2, 3, 2, 0, 0, 2, 3, 1, 1, 3, 3, 0, 2, 2, 3, 0, 2, 3, 0, 1, 1, 3, 3, 2, 2, 3, 0, 0, 0, 1, 2, 0, 1, 3, 0, 3, 1, 2, 0, 2, 3, 3, 3, 2, 3, 0, 3, 3, 1, 2, 3, 3, 0, 0, 1, 1, 3, 3, 1, 3, 0, 2, 3, 1, 3, 3, 2, 2, 1, 0, 1, 1, 0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 0, 2, 0, 3, 3, 2, 2, 1, 0, 3, 1, 3, 2, 2, 3, 1, 2, 2, 1, 1, 0, 0, 3, 3, 1, 2, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 2, 2, 3, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 3, 1, 2, 2, 2, 0, 3, 3, 2, 3, 2, 0, 0, 3, 0, 2, 0, 2, 1, 3, 0, 3, 2, 2, 1, 1, 1, 1, 2, 1, 3, 0, 1, 0, 2, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 0, 1, 0, 1, 2, 0, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1], [0, 0, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 1, 0, 1, 1, 2, 1, 2], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(abs(int(1.0)),min(( in1 + ( i0 + ( res0 - ( min(( in0 + int(5.0) ), i1) * ( max(int(3.0), res0) * mod(int(4.0),divInt(abs(( int(2.0) * divInt(( min(res0, min(in0, divInt(max(( in1 - in2 ), mod(abs(int(9.0)),int(3.0))),min(min(in1, mod(( max(in0, ( abs(in2) * int(6.0) )) - int(8.0) ),min(min(( ( max(i2, in0) - i0 ) + int(1.0) ), divInt(i0,int(1.0))), abs(i2)))), abs(int(8.0)))))) + divInt(res0,( min(min(min(( max(res0, min(max(int(4.0), mod(abs(min(i0, in2)),int(7.0))), int(2.0))) + max(max(int(0.0), max(i2, divInt(max(int(8.0), max(abs(divInt(( int(0.0) * res0 ),int(6.0))), int(8.0))),in2))), max(mod(abs(in0),i0), in2)) ), i0), divInt(int(4.0),i2)), ( res0 * abs(max(divInt(mod(int(3.0),i1),max(int(5.0), min(divInt(( abs(int(1.0)) * ( ( int(1.0) * int(9.0) ) * i0 ) ),i0), max(min(int(7.0), ( i1 + ( int(9.0) * in1 ) )), in0)))), int(3.0))) )) + i2 )) ),int(6.0)) )),i0)) ) ) ) ) ), ( ( ( max(int(3.0), int(1.0)) - ( int(8.0) + int(8.0) ) ) - int(0.0) ) - max(int(3.0), int(4.0)) ))) \\ge int(1.0):{:\\ni2 = min(int(3.0), ( divInt(divInt(i1,max(min(divInt(min(( in2 * i1 ), abs(in2)),divInt(in1,mod(int(8.0),max(i2, abs(( divInt(int(5.0),int(1.0)) - int(8.0) )))))), int(8.0)), mod(int(1.0),max(in2, int(3.0))))),i0) * mod(int(1.0),in2) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 47, 47, 1, 0, 0, 1, 1, 0, 0, 0, 49, 1, 200, 54, 51, 29, 25]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [0, 1, 0, 0, 1], [0, 3, 9, 2, 8], [], [], [], [], [], [], [], [], [5, 1], [1, 0], [1, 1], [], [], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= int(03.0)\\ni1 = int(928.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1], [6, 1, 3, 8], [], [], [], [], [], [], [], [], [6, 6, 0, 2], [0], [2, 3, 3, 3, 1, 2, 3, 1, 3, 0, 0, 2, 1, 3, 3, 0, 1], [0, 0, 0], [2, 0, 2, 2, 1, 2, 0], [1, 2, 0], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = ( abs(min(abs(int(6.0)), ( abs(int(1.0)) - max(res0, i0) ))) * ( int(3.0) + abs(min(i2, int(8.0))) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 990, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 17, 3, 7, 3, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 6, 1, 3, 0, 9, 9, 9, 3], [1, 0], [2], [0], [0, 0, 1, 1], [0, 0], [2, 3], [], [], [2, 6, 6, 5, 5, 6, 6, 0, 6, 3, 4, 0, 1, 3], [], [2, 0, 2, 1, 2, 2, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 1, 1, 0, 0, 1, 3, 3, 1, 2, 0, 0, 0, 1, 0, 3, 3, 0, 3, 2, 2, 0, 1, 3, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 1, 1, 1, 2], [1, 2, 1, 1, 1, 2, 1], [0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not ( divInt(i2,( int(4.0) - ( ( int(7.0) * mod(( min(divInt(min(max(( int(6.0) - ( mod(max(int(1.0), int(3.0)),res0) - res0 ) ), int(0.0)), abs(abs(int(9.0)))),divInt(in2,in2)), res0) - int(9.0) ),res0) ) * max(max(i0, max(divInt(( res0 - int(9.0) ),abs(in0)), int(3.0))), in1) ) )) \\g i0 and i1 \\l in0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 10, 10, 2, 1, 1, 4, 2, 2, 0, 0, 14, 0, 47, 13, 10, 7, 6]}, {"genotype": [[0], [1], [0], [], [1], [1], [0], [], [], [], [], [], [], [], [], [1], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= int(0.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 7, 6, 1, 9, 7, 7], [1, 0, 2], [1, 1], [1], [1, 0, 1, 1], [0, 0, 0], [3], [], [], [6, 4, 1, 2], [], [1, 1, 2, 2, 1, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 0], [1, 1, 0, 1, 0], [], [1, 2], [0, 1, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(1.0) \\g int(7.0)\\nb1 = ( divInt(mod(int(6.0),( int(1.0) - res0 )),int(9.0)) \\l mod(int(7.0),( int(7.0) * in1 )) or i1 == i2 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 3, 2, 1, 4, 3, 1, 0, 0, 4, 0, 16, 5, 0, 2, 3]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2, 2], [], [0, 0, 0, 0], [], [2, 2, 2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not not not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [1, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 7, 6, 5, 4, 6, 6], [4, 5, 0], [0, 2], [1], [1, 0, 0, 1, 1], [0, 0, 0], [0, 3], [], [1], [0, 5, 4, 0, 4, 0, 1, 0, 6, 0, 5, 3], [1], [2, 0, 2, 0, 1, 2, 0, 2, 2, 2, 3, 1, 3, 0, 3, 1, 1, 3, 1, 2, 1, 3, 0, 0, 0, 1, 3, 0, 0, 2, 3, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 1], [2, 2, 1, 0, 0, 2, 0], [1, 2, 2, 1, 2], [0, 0, 0, 1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(i0,( in2 - int(6.0) )) \\le divInt(in1,divInt(( ( abs(int(7.0)) * abs(i0) ) * max(int(7.0), int(6.0)) ),min(int(5.0), ( int(4.0) - min(in1, i0) )))):{:\\nif b0:{:\\ni1 *= i0\\n:}else:{:\\nb2 = ( int(6.0) != abs(res0) or i0 \\l mod(min(in2, int(6.0)),in0) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 8, 8, 3, 2, 1, 5, 3, 2, 0, 1, 12, 1, 34, 8, 7, 5, 4]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1], [7, 9, 6], [], [], [], [], [], [], [], [], [1, 5, 5], [1], [2, 1, 3, 2, 1, 3, 1, 0, 0], [1, 0], [1, 1], [2, 1], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= divInt(int(7.0),max(( int(9.0) - max(int(6.0), in2) ), in2))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 9, 2, 2, 2, 1]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 3], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 1, 3], [1], [3, 3, 0, 0], [], [0, 2], [1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= min(abs(i1), in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1], [0, 2, 2, 0], [0, 0], [1, 0], [1, 1, 1], [7, 6, 3], [5], [2, 1], [0], [0, 0, 0, 1, 0], [0], [0, 3, 1, 1], [1, 0], [0, 0], [0, 6], [0], [2, 1, 0, 1, 1], [0], [], [0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = ( int(7.0) + res0 )\\nif b2:{:\\nif ( False and int(6.0) != int(3.0) ):{:\\nb1 = True\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 3, 3, 1, 2, 1, 5, 1, 4, 2, 2, 2, 1, 5, 1, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 1, 2, 2, 0, 0, 2, 0, 0, 1, 0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 7, 2, 8, 5, 5, 5, 2, 8, 9, 9, 9, 8, 7, 7, 9, 2, 1, 6, 8, 8, 1, 1, 1, 3, 3, 0, 7, 6, 6, 0, 5, 6, 2, 5, 8, 3, 5, 5, 9, 3, 0, 6, 2, 3, 3, 8, 3, 5, 8, 0, 1, 9, 0, 9, 7, 5, 9, 5, 9, 5, 0, 9, 3, 2, 5, 6, 4, 4, 9, 9, 7, 6, 5, 9, 4, 2, 4, 8, 3, 3, 8, 7, 1, 0], [3, 3, 0, 2, 5, 5], [1, 2, 1, 0, 2, 2, 0, 1, 0, 1, 1], [1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 2, 0, 0, 2, 0, 3, 1, 0, 0], [0, 1], [1, 1, 0, 1, 0], [6, 3, 2, 6, 4, 1, 4, 6, 4, 5, 2, 5, 1, 1, 6, 2, 1, 6, 3, 1, 5, 2, 3, 1, 5, 5, 2, 4, 0, 5, 6, 4, 3, 3, 5, 5, 1, 3, 3, 2, 5, 4, 6, 6, 3, 0, 4, 4, 5, 1, 5, 5, 4, 3, 2, 2, 2, 4, 6, 5, 6, 3, 3, 1, 2, 3, 4, 2, 1, 2, 0, 2, 6, 5, 5, 6, 5, 0, 2, 5, 4, 2, 5, 0, 0, 0, 0, 4], [0, 0, 1, 0, 1, 1], [2, 0, 0, 3, 0, 0, 3, 2, 0, 1, 0, 2, 3, 0, 2, 3, 1, 3, 2, 1, 2, 3, 2, 3, 1, 1, 3, 1, 2, 1, 1, 3, 0, 2, 3, 2, 0, 3, 2, 2, 2, 3, 1, 3, 0, 0, 3, 1, 2, 3, 0, 3, 3, 1, 2, 3, 0, 3, 3, 3, 3, 0, 2, 1, 1, 3, 1, 1, 1, 1, 2, 0, 3, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 3, 2, 0, 3, 2, 2, 2, 1, 3, 2, 1, 2, 1, 0, 1, 1, 1, 0, 3, 3, 2, 1, 3, 2, 3, 1, 3, 3, 3, 3, 1, 2, 2, 2, 0, 2, 2, 2, 0, 0, 3, 0, 2, 2, 2, 0, 3, 2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 1, 2, 3, 2, 0, 2, 1, 2, 3, 2, 0, 2, 1, 0, 0, 0, 3, 1, 1, 0, 1, 0, 3, 0, 0, 1, 1, 3, 3, 1, 3, 3, 3, 2, 3, 2, 1, 0, 3, 0, 1, 3, 1, 2, 0, 0, 2, 1, 3, 2, 0, 1, 1, 0, 0, 2, 0, 1, 3, 1, 2, 2, 1, 1, 3, 1, 1, 2, 3, 3, 1, 0, 3, 0, 2, 0, 2, 1, 0, 3, 3, 2, 1, 1, 0, 2, 0, 2, 2, 1, 2, 2, 0, 2, 0, 1, 0, 3, 2, 3, 1, 1, 2, 3, 2, 2, 3, 3, 3, 3, 3, 1, 2, 1, 1, 0, 1, 2, 2, 3, 3, 2, 1, 0, 0, 1, 3, 3, 1, 1, 3, 0, 0, 1, 1, 0, 2, 3, 3, 0, 2, 2, 3, 1, 2, 3, 1, 3, 3, 3, 2, 0, 0, 1, 3, 0, 1, 1, 2, 0, 2, 1, 2, 0, 2, 2, 2, 1, 3, 0, 0, 0, 0, 2, 1, 0, 1, 1, 2, 1, 1, 1, 2, 0, 0, 2, 3, 0, 3, 1, 3, 0, 3, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [1, 0, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 0, 1, 0, 1, 2, 1, 1, 0, 0, 1, 2, 0, 1, 2, 1, 1, 0, 2, 1, 2, 2, 2, 2, 0, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 0, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2], [0, 0, 2, 2, 1, 1, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0, 1, 2, 0, 1, 1, 2, 0, 2, 0, 0, 0, 2, 0, 1, 2, 2, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 2, 1], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(res0,in0) \\ge max(i2, res0):{:\\nb1 = min(mod(in1,int(1.0)), i1) \\ge divInt(abs(in1),divInt(abs(int(2.0)),abs(( int(7.0) + ( max(( abs(int(2.0)) + int(8.0) ), max(int(5.0), ( int(5.0) * int(5.0) ))) * abs(res0) ) ))))\\n:}else:{:\\nb2 = True\\n:}\\nif mod(max(( in1 - max(divInt(divInt(( abs(int(2.0)) - abs(in2) ),i2),max(int(8.0), ( min(in2, max(min(int(9.0), ( max(i1, abs(max(max(min(i1, mod(int(9.0),int(9.0))), min(int(8.0), int(7.0))), int(7.0)))) * int(9.0) )), mod(res0,max(int(2.0), ( i2 + int(1.0) ))))) * mod(i1,int(6.0)) ))), ( res0 + in0 )) ), i1),in2) \\l i2:{:\\nif not divInt(divInt(in0,int(8.0)),i1) == abs(divInt(in2,min(( divInt(( int(8.0) * max(divInt(int(1.0),( int(1.0) * in2 )), int(1.0)) ),int(3.0)) * int(3.0) ), i2))):{:\\nb1 = b0\\n:}\\n:}else:{:\\nin1 = abs(max(( int(0.0) + max(( min(int(7.0), abs(max(abs(abs(int(6.0))), mod(( divInt(i0,divInt(mod(( in2 + res0 ),abs(in1)),( ( mod(in0,abs(( in0 + ( divInt(( mod(int(6.0),int(0.0)) - in2 ),int(5.0)) * int(6.0) ) ))) + ( min(( in2 - ( int(2.0) - divInt(min(divInt(i1,( int(5.0) * in0 )), in0),i2) ) ), min(int(8.0), int(3.0))) + in2 ) ) * int(5.0) ))) + in1 ),max(res0, res0))))) + int(5.0) ), int(9.0)) ), max(min(int(3.0), abs(max(min(( max(divInt(int(0.0),in0), min(i0, int(6.0))) + abs(int(2.0)) ), ( in1 * in1 )), ( int(3.0) + min(( in2 - int(3.0) ), int(8.0)) )))), i1)))\\n:}\\nif b2:{:\\nin2 = in2\\n:}else:{:\\nin1 *= ( in0 * int(3.0) )\\n:}\\ni2 = min(int(5.0), divInt(divInt(int(8.0),int(0.0)),abs(int(1.0))))\\nb2 = not b0\\ni2 -= int(9.0)\\nb1 = ( mod(max(max(int(0.0), i2), min(in1, ( res0 * ( int(9.0) + in2 ) ))),min(max(( int(7.0) + int(5.0) ), res0), mod(in0,mod(( int(9.0) + ( divInt(in0,( i1 - int(5.0) )) - i2 ) ),max(mod(max(int(9.0), int(5.0)),divInt(max(( mod(min(max(min(max(max(int(0.0), mod(int(9.0),int(3.0))), in0), int(2.0)), divInt(( abs(abs(divInt(int(5.0),in1))) - i2 ),int(6.0))), min(min(int(4.0), int(4.0)), abs(i1))),i2) - int(9.0) ), int(9.0)),i0)), ( max(max(i2, ( ( abs(int(7.0)) - mod(max(int(6.0), max(max(max(( res0 - in2 ), int(5.0)), max(in2, int(9.0))), int(4.0))),divInt(res0,( int(2.0) - ( in2 + divInt(( mod(int(4.0),min(i0, i2)) * in2 ),in1) ) ))) ) + ( int(8.0) - i2 ) )), int(3.0)) - int(3.0) )))))) != ( int(8.0) * int(7.0) ) or False )\\nif b0:{:\\nin2 -= int(1.0)\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = mod(i0,i0) != divInt(min(i0, min(int(0.0), abs(i0))),abs(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 6, 12, 86, 86, 6, 11, 1, 16, 6, 10, 2, 5, 88, 6, 342, 91, 83, 51, 43]}, {"genotype": [[0], [1], [1], [], [1], [1], [1], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 0, 1], [1, 2, 2, 0, 0], [1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1], [8, 2, 2, 1, 4, 3], [4, 2], [1], [], [0, 1, 1], [0, 0], [1], [0], [], [5, 5, 0, 1, 6, 3, 6, 3, 0, 4, 2, 6, 2, 0], [1, 0], [3, 2, 2, 1, 2, 3, 0, 2, 0, 3, 0, 0, 1, 3, 1, 2, 0, 1, 3, 3, 1, 0, 2, 0, 0, 3, 3, 2, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1], [0, 1, 1, 2, 1, 2, 0, 2], [1, 1, 0, 2, 0], [0, 0, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= min(divInt(( int(8.0) - ( max(in2, ( i0 + max(i1, res0) )) * int(2.0) ) ),abs(int(2.0))), ( in0 + int(1.0) ))\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile max(abs(int(4.0)), res0) \\le divInt(in0,i0):{:\\nin1 = min(abs(divInt(int(3.0),i2)), res0)\\nb1 = i2 == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 6, 6, 2, 1, 0, 3, 2, 1, 1, 0, 14, 2, 33, 7, 8, 5, 3]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [3, 3, 6], [0], [2, 2, 0, 0, 1], [1, 0], [], [2], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = mod(( in0 * res0 ),int(9.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 2, 0, 1, 1]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1], [2, 1, 2, 0, 2, 1, 1, 1], [0, 1, 0], [1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 6, 9, 7, 7, 8, 2, 7, 0, 5, 7, 3, 9, 6, 5, 5, 4], [2, 0, 0, 1], [2, 2, 1, 2], [0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0], [3, 2, 2, 0, 1, 2, 1], [0, 1], [1, 1], [2, 1, 0, 0, 6, 4, 2, 1, 2, 5, 3, 3, 1, 3, 5], [1, 1], [3, 0, 1, 1, 0, 0, 3, 3, 3, 0, 3, 1, 2, 3, 2, 0, 3, 0, 1, 0, 2, 1, 1, 1, 2, 1, 2, 3, 2, 0, 2, 3, 2, 0, 1, 3, 2, 1, 1, 1, 0, 1, 2, 0, 3, 3, 1, 2, 3, 0, 0, 2, 1, 3, 2, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [1, 2, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1, 2], [1, 2, 2, 2, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( max(i2, int(9.0)) == int(7.0) and not not b2 ):{:\\ni1 -= i0\\nloopBreak% = 0\\nwhile i0 \\l abs(abs(min(res0, min(int(6.0), mod(abs(( in1 * min(i2, int(9.0)) )),i1))))):{:\\ni2 *= ( int(7.0) * int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(8.0) \\l ( int(2.0) + ( abs(divInt(in2,mod(min(( in0 + int(7.0) ), min(( int(0.0) + int(5.0) ), int(7.0))),in0))) - int(3.0) ) ):{:\\nb2 = True\\n:}else:{:\\nb1 = not False\\n:}\\n:}else:{:\\nb2 = divInt(i1,abs(min(int(9.0), divInt(max(in0, in2),divInt(int(6.0),abs(( int(5.0) + int(5.0) ))))))) \\g int(4.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 18, 18, 4, 4, 1, 11, 4, 7, 2, 2, 15, 2, 58, 13, 14, 9, 6]}, {"genotype": [[0], [1], [0], [], [1], [1], [2], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 1, 1, 1, 2, 2, 1], [0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 1, 8, 2, 7, 0, 2, 4, 2, 7, 9, 4, 0, 6, 8, 3, 2, 0, 4, 7, 7, 9, 0], [2, 2, 2], [2], [], [1, 1, 1, 0], [0, 0, 0], [1], [0], [1], [3, 3, 5, 3, 3, 2, 6, 2, 4, 5, 3, 0, 6, 4, 6, 5, 5, 1, 1, 0, 1, 5, 4], [1, 1, 0], [0, 1, 1, 3, 1, 1, 1, 0, 1, 2, 3, 2, 1, 0, 1, 3, 2, 3, 1, 0, 3, 1, 2, 3, 1, 0, 2, 3, 3, 3, 2, 2, 0, 3, 2, 3, 0, 3, 0, 1, 0, 3, 1, 2, 3, 0, 3, 3, 0, 0, 3, 2, 0, 1, 1, 0, 3, 2, 1, 3, 2, 0, 1, 3, 1, 3, 0, 3, 0, 3, 3, 2, 2, 2, 1, 0, 0, 1, 2, 2, 2, 1, 3, 1, 3, 1, 2, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 2, 0, 2, 1, 0, 1, 2, 0, 1, 0, 2, 0, 1, 2, 1, 1, 1, 0, 1, 2, 2, 1, 2, 2, 2], [0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 2], [0, 1, 0, 1, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in0 == int(8.0):{:\\nin0 += int(9.0)\\nin2 -= max(int(1.0), int(8.0))\\nb2 = int(2.0) == in0\\n:}else:{:\\nloopBreak% = 0\\nwhile int(7.0) == divInt(abs(mod(int(0.0),in0)),int(2.0)):{:\\nloopBreak% = 0\\nwhile True:{:\\ni2 = min(( abs(int(4.0)) * res0 ), max(int(2.0), ( min(int(7.0), i2) - divInt(max(abs(min(mod(( in1 * max(( min(in2, abs(in0)) + int(9.0) ), i0) ),min(int(4.0), ( max(res0, abs(max(in1, res0))) + max(mod(in2,int(0.0)), int(6.0)) ))), in2)), max(mod(int(8.0),min(mod(i1,int(3.0)), max(int(2.0), abs(i1)))), abs(i0))),max(abs(( divInt(mod(int(0.0),i1),in2) + int(4.0) )), mod(( ( int(7.0) + abs(int(7.0)) ) * abs(int(9.0)) ),( in1 * int(0.0) )))) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 24, 24, 3, 1, 0, 4, 3, 1, 1, 1, 23, 3, 89, 19, 26, 11, 10]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 3, 1], [0], [3, 3, 0, 0], [], [1, 2], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = max(abs(in0), i1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 1], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [3, 2, 4], [3], [1], [], [1], [0], [], [], [], [2, 2, 4, 3, 4, 3], [], [3, 3, 1, 1, 3, 0, 3, 2, 3, 0, 2, 0, 3, 0, 0, 2, 0, 1], [0, 1, 1], [1, 2, 1, 1, 2, 1], [0], [0, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(abs(int(3.0)), int(2.0)) \\ge max(i2, max(( abs(i2) + divInt(in1,max(in0, in1)) ), divInt(in0,int(4.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 6, 0, 18, 3, 6, 1, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [0, 1, 1], [6, 2, 5], [5], [0], [], [1], [0], [], [], [], [3, 3], [1], [3, 0, 1, 1], [], [2], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= abs(in0)\\nb0 = int(62.0) != int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 4, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1], [7, 8, 1], [3, 5], [1, 0], [], [1, 1], [0, 0], [], [], [], [6, 5], [], [2, 1, 0, 0, 1, 1], [0], [], [0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( int(7.0) + res0 ) \\ge in2\\nb0 = int(8.0) != int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 2, 2, 0, 2, 2, 0, 0, 0, 2, 0, 6, 1, 0, 1, 0]}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [1], [7], [5], [2], [], [0, 1], [0], [1], [1], [0], [3, 5], [], [1, 3, 0, 0], [], [0], [], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nb2 = int(7.0) != min(in0, in2)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 4, 2, 0, 0, 6, 7, 9, 2, 3, 8, 2, 7, 6, 0, 0, 5, 3, 1, 9, 1, 9, 7, 6, 7, 7, 3, 4, 2, 2, 7, 2, 1, 3, 6, 2, 7, 1, 1, 7, 3], [2, 5, 3, 0, 1, 1], [1, 0, 2, 1, 2, 0], [1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 0, 3, 1, 3, 0, 3, 3, 0, 1, 1], [1, 0, 1], [0, 1, 1, 1], [0, 3, 0, 3, 1, 3, 2, 3, 6, 4, 2, 3, 1, 4, 0, 2, 6, 2, 5, 1, 3, 6, 0, 4, 2, 2, 1, 1, 4, 4, 6, 0, 6, 4, 0, 5, 3, 0, 4, 5, 0, 6, 4, 2, 5, 0, 5, 4, 3, 5, 3], [1, 0, 0, 1, 1, 1, 1], [2, 3, 3, 0, 1, 3, 2, 3, 2, 3, 0, 2, 3, 3, 2, 0, 2, 2, 1, 3, 2, 1, 0, 1, 0, 1, 2, 1, 3, 0, 1, 3, 2, 3, 3, 3, 3, 3, 1, 0, 2, 0, 0, 1, 1, 2, 3, 3, 3, 0, 2, 1, 0, 0, 2, 0, 3, 0, 2, 1, 1, 3, 2, 1, 2, 1, 1, 2, 0, 3, 3, 2, 0, 0, 3, 0, 0, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 1, 1, 0, 0, 3, 1, 2, 3, 3, 0, 1, 0, 0, 0, 1, 0, 2, 1, 1, 3, 0, 3, 0, 1, 0, 2, 1, 1, 3, 1, 3, 2, 0, 0, 2, 3, 3, 2, 0, 3, 0, 2, 1, 1, 1, 1, 0, 3, 2, 0, 1, 1, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 0, 2, 1, 1, 2, 0, 0, 2, 0, 2, 1, 2, 1, 1, 1, 2, 0, 0, 1, 0, 0, 1, 1, 0, 1, 2, 2, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 2, 0, 0], [1, 2, 2, 2, 2, 0, 2, 1, 0, 0, 2, 1, 2, 2, 1, 2, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( max(max(i0, int(5.0)), min(divInt(abs(mod(max(in0, ( max(abs(divInt(i0,divInt(( int(3.0) - min(mod(int(4.0),in0), int(2.0)) ),i1))), int(0.0)) * ( int(0.0) * min(in0, int(6.0)) ) )),abs(mod(min(abs(max(abs(max(int(7.0), i2)), mod(in0,res0))), int(9.0)),int(2.0))))),mod(max(max(abs(in1), ( int(3.0) * i2 )), in0),mod(i1,min(in1, divInt(int(8.0),int(2.0)))))), min(mod(int(7.0),( int(6.0) * int(0.0) )), divInt(i0,max(min(divInt(i2,res0), min(i2, in2)), divInt(max(int(0.0), max(mod(int(5.0),min(( max(int(3.0), abs(( abs(int(1.0)) + ( max(int(9.0), int(1.0)) * int(9.0) ) ))) - i1 ), in0)), min(int(7.0), mod(max(abs(res0), int(6.0)),i0)))),in1)))))) + i2 ) == int(7.0):{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( b1 or divInt(int(7.0),int(3.0)) != abs(i1) ):{:\\nif b0:{:\\nloopBreak% = 0\\nwhile min(in1, int(4.0)) \\ge in1:{:\\nif ( ( int(2.0) * int(2.0) ) \\l max(int(7.0), min(divInt(res0,i0), ( max(min(( res0 - abs(in1) ), mod(int(2.0),int(1.0))), int(3.0)) * int(6.0) ))) or i0 \\g min(( in2 * int(2.0) ), int(7.0)) ):{:\\nif int(1.0) \\g in0:{:\\ni0 = mod(min(in1, in2),divInt(int(1.0),i0))\\n:}else:{:\\nres0 = in1\\n:}\\n:}else:{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 -= int(7.0)\\n:}\\n:}\\nin2 *= int(3.0)\\ni0 -= divInt(mod(in2,in1),in0)\\nin2 -= in0\\nb1 = ( b2 or ( ( b0 and True ) or False ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 6, 9, 42, 42, 6, 6, 5, 18, 6, 12, 3, 4, 51, 7, 164, 36, 42, 18, 23]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0, 0, 0], [], [2, 2, 1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not not True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 3, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 1], [0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 0, 5, 7, 4, 7, 7, 3, 1, 3, 4, 4, 2, 5, 1, 0], [4, 5, 4], [2], [], [0, 1, 1, 1], [0, 0, 0], [2], [], [1], [4, 3, 0, 4, 4, 0, 2, 1, 4, 3, 0, 1, 1, 0, 0, 0, 6, 4, 0, 5, 4, 6, 0, 3, 1, 6, 6, 4, 1, 3], [1], [0, 3, 0, 2, 3, 2, 2, 0, 1, 0, 3, 3, 3, 1, 2, 0, 2, 0, 1, 0, 2, 2, 3, 1, 0, 3, 2, 0, 2, 0, 2, 0, 2, 2, 1, 3, 1, 1, 0, 1, 3, 3, 3, 2, 2, 0, 3, 3, 2, 0, 1, 0, 1, 2, 0, 1, 0, 0, 3, 1, 0, 3, 3, 0, 3, 0, 3, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 1, 1, 2, 2, 0, 0, 1, 0, 2, 1, 0, 1, 1, 1, 1, 1, 2, 0, 2, 2, 2], [2, 2, 0, 1, 0, 1, 0, 2, 2, 1, 1, 2, 2, 1], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not in1 \\le abs(in0):{:\\nloopBreak% = 0\\nwhile mod(min(( divInt(i0,int(8.0)) * in1 ), max(max(abs(int(0.0)), ( in1 * ( i0 + int(5.0) ) )), i2)),( ( abs(int(7.0)) - i1 ) + min(( in1 - ( in0 + ( i0 * divInt(mod(int(4.0),min(int(7.0), int(7.0))),i1) ) ) ), int(3.0)) )) != max(min(abs(mod(mod(i1,max(min(( i0 * int(1.0) ), i0), int(3.0))),( i0 - int(4.0) ))), res0), in1):{:\\ni0 -= max(int(4.0), in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = max(max(in1, max(res0, max(( mod(divInt(( ( int(2.0) * int(5.0) ) * i0 ),in0),i1) - res0 ), res0))), mod(mod(abs(min(abs(abs(abs(in1))), i1)),in0),int(1.0))) \\le int(0.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 16, 16, 3, 1, 0, 4, 3, 1, 0, 1, 30, 1, 91, 23, 23, 14, 10]}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1], [2, 2, 1, 2, 0, 2, 1], [1, 1, 1, 1], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 8, 9, 6, 8, 9, 8, 9, 9, 0, 8, 7, 7, 8, 8], [5, 4, 5, 5], [2, 0, 0], [], [1, 1, 0, 1, 0, 1], [0, 0, 0, 0], [1, 0], [0], [], [2, 3, 6, 3, 1, 5, 6, 4, 6, 2, 3], [1], [0, 1, 2, 2, 0, 0, 3, 2, 2, 2, 1, 2, 0, 1, 2, 1, 3, 1, 1, 1, 0, 3, 3, 3, 2, 0, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 3, 3, 0, 0, 0, 3, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 1, 1, 0, 0, 0, 0, 2, 0], [1, 2, 1, 2, 0, 1], [1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i2 != int(2.0):{:\\nloopBreak% = 0\\nwhile mod(divInt(in0,res0),abs(( ( ( int(8.0) - ( in0 * int(8.0) ) ) - ( int(9.0) * max(int(6.0), int(8.0)) ) ) + int(9.0) ))) \\le i1:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile max(min(min(mod(in2,mod(int(8.0),int(9.0))), int(9.0)), int(0.0)), int(8.0)) != int(7.0):{:\\nb0 = b0\\nloopBreak% = 0\\nwhile min(int(7.0), divInt(min(abs(res0), in1),res0)) != min(int(8.0), i2):{:\\nin0 -= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 16, 16, 4, 3, 0, 6, 4, 2, 1, 0, 11, 1, 45, 10, 9, 6, 5]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 4, 2, 1, 8, 6, 8, 1, 4, 9], [0], [0], [], [1], [0], [], [], [], [3, 6, 0, 5, 1, 0, 3, 0, 1, 3, 0, 5, 5], [], [2, 1, 2, 0, 1, 3, 3, 0, 0, 2, 1, 2, 2, 2, 2, 0, 3, 0, 1, 1, 2, 3, 1, 1, 3, 3, 3, 2, 2, 2, 3, 3, 2, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 2, 0, 1, 1, 2, 0], [0, 0, 0, 2, 1, 1, 1, 2, 1], [0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(0.0) + ( in0 + int(7.0) ) ) \\l min(min(res0, i0), ( int(4.0) + ( divInt(mod(mod(in2,min(i1, int(2.0))),int(1.0)),( abs(int(8.0)) * int(6.0) )) - min(max(max(( ( ( abs(min(divInt(i0,int(8.0)), in0)) - i0 ) - i1 ) * int(1.0) ), mod(in0,( i0 - divInt(in2,int(4.0)) ))), int(9.0)), in2) ) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 11, 11, 1, 1, 0, 1, 1, 0, 0, 0, 13, 0, 48, 15, 9, 9, 6]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 2, 2, 2, 1, 0], [1, 1, 1, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 8, 5, 7, 1, 2, 2, 6, 3, 2, 4, 2, 3, 1, 2, 5, 1, 2, 5, 0, 4, 7, 8, 9, 7, 5, 9, 6, 3, 5, 5, 2, 5, 1], [4, 5, 5, 2, 5, 0], [1], [1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 2, 1, 3], [0], [0], [0, 4, 5, 4, 1, 5, 1, 4, 2, 5, 4, 0, 3, 6, 4, 5, 0, 3, 0, 5, 6, 6, 2, 4, 4, 6, 2, 4, 2, 1, 6, 4, 0, 4, 5, 1, 3], [1], [3, 1, 3, 3, 1, 1, 0, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 2, 2, 0, 0, 2, 3, 3, 2, 2, 3, 3, 0, 2, 2, 0, 2, 0, 2, 1, 0, 3, 1, 2, 2, 2, 0, 1, 1, 2, 0, 1, 0, 3, 2, 3, 0, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 0, 0, 3, 2, 0, 3, 2, 3, 3, 0, 0, 2, 2, 0, 1, 1, 1, 3, 0, 3, 2, 2, 3, 3, 1, 3, 2, 2, 2, 0, 0, 0, 3, 1, 1, 1, 2, 1, 3, 0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 2, 3, 2, 1, 1, 1, 3, 0, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0, 3, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1, 0], [2, 0, 2, 2, 0, 2, 1, 0, 1, 0, 0, 2, 2, 1, 1, 2, 0, 2, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(2.0), min(min(int(2.0), int(8.0)), i0)) \\le divInt(int(5.0),in1):{:\\nloopBreak% = 0\\nwhile ( int(7.0) != max(in2, mod(max(int(1.0), ( ( mod(in1,i1) * divInt(min(abs(( divInt(min(max(in2, ( mod(i1,( in1 + ( int(2.0) * i2 ) )) * min(int(2.0), divInt(( ( in2 + int(6.0) ) * int(3.0) ),( in1 - int(2.0) ))) )), i0),max(divInt(max(in0, int(4.0)),res0), min(max(int(2.0), in1), min(int(3.0), in2)))) + int(1.0) )), i0),in0) ) - max(( i0 + min(( max(max(in2, res0), ( ( res0 + int(2.0) ) * int(5.0) )) * int(1.0) ), max(i2, abs(divInt(divInt(abs(min(int(2.0), min(divInt(mod(mod(in1,in1),res0),min(int(5.0), int(0.0))), int(4.0)))),( int(7.0) - abs(i2) )),int(8.0))))) ), int(9.0)) )),int(7.0))) or in1 != ( int(5.0) - int(9.0) ) ):{:\\nloopBreak% = 0\\nwhile not ( i2 * ( abs(mod(int(6.0),int(3.0))) + int(5.0) ) ) == max(i1, ( int(5.0) * divInt(int(2.0),int(5.0)) )):{:\\nif True:{:\\nres0 += divInt(in1,i0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( in1 != in2 and min(int(1.0), i1) \\l in0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 4, 2, 35, 35, 6, 1, 2, 10, 6, 4, 1, 1, 37, 1, 134, 34, 29, 19, 16]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1, 1], [3, 6], [], [], [], [], [], [], [], [], [0, 1, 3], [0, 1], [1, 2, 0, 1], [1], [], [1], [0]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(3.0)\\ni1 -= divInt(in0,int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 4, 1, 0, 1, 1]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 2, 1, 0], [1, 1, 0, 0], [0, 1, 0], [1, 1, 1, 1, 1], [5, 1, 3, 4, 4], [1, 4, 3, 2], [2, 2, 2], [0], [1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0], [3, 2, 0, 1, 1], [1, 1], [1, 1], [6, 6, 4, 3, 2], [0], [0, 1, 3, 0, 1, 1, 1, 1, 0, 0], [], [2], [], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile res0 \\g int(5.0):{:\\nloopBreak% = 0\\nwhile ( not abs(res0) \\le int(1.0) and b2 ):{:\\nif int(3.0) \\ge int(4.0):{:\\nb2 = False\\n:}else:{:\\nif int(4.0) == in1:{:\\nin0 = i2\\n:}else:{:\\nb2 = False\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 5, 5, 4, 3, 1, 9, 4, 5, 2, 2, 5, 1, 10, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 0, 2, 2, 1, 0, 1, 2, 0, 0], [0, 1, 1, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 3, 8, 6, 9, 1, 4, 1, 4, 9, 9, 6, 2, 2, 6, 5, 4, 5, 3, 3, 5, 2, 1, 2, 7, 6, 3, 5, 2, 7, 0, 9, 2, 2, 4, 6, 2, 2, 5, 2, 9, 9, 6, 0, 4, 5, 6, 5, 3, 0, 5, 6, 5, 4, 9, 8, 6, 3, 1, 0, 7, 5, 0, 9, 8, 4, 3, 4, 6, 7, 0, 2, 1, 6, 9, 7, 7, 0, 6, 4, 3, 6, 4, 2, 4, 7], [2, 4, 1, 5, 2, 3], [2, 2, 1, 1, 2], [0], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 1, 3, 1], [0, 1], [1], [3, 0, 0, 2, 1, 6, 3, 1, 5, 0, 4, 6, 0, 3, 5, 3, 3, 1, 1, 2, 5, 4, 2, 3, 2, 2, 0, 3, 3, 2, 3, 1, 2, 4, 1, 3, 4, 1, 5, 6, 1, 3, 4, 0, 1, 1, 0, 6, 1, 5, 1, 5, 4, 6, 5, 0, 6, 0, 2, 0, 6, 4, 6, 2, 1, 1, 6, 4, 2, 4, 3, 4, 1, 1, 2, 0, 0, 2], [0, 0], [2, 0, 2, 2, 2, 0, 3, 2, 0, 2, 2, 2, 3, 1, 2, 2, 2, 3, 2, 1, 3, 3, 3, 3, 2, 2, 1, 0, 2, 1, 3, 2, 3, 1, 3, 2, 2, 0, 0, 1, 1, 3, 3, 2, 2, 2, 3, 0, 2, 1, 0, 2, 1, 1, 2, 3, 3, 0, 3, 2, 1, 2, 1, 2, 3, 1, 0, 3, 2, 0, 3, 2, 3, 0, 1, 1, 0, 3, 3, 0, 3, 0, 2, 3, 2, 0, 0, 1, 1, 0, 1, 1, 3, 2, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 0, 3, 1, 1, 2, 3, 3, 1, 3, 0, 1, 2, 1, 3, 3, 0, 2, 1, 2, 0, 2, 2, 2, 3, 0, 0, 1, 0, 0, 3, 2, 0, 3, 3, 3, 0, 0, 3, 1, 2, 2, 3, 2, 1, 2, 2, 0, 0, 3, 2, 1, 2, 3, 2, 1, 1, 2, 0, 0, 3, 3, 2, 1, 1, 1, 0, 0, 2, 0, 0, 0, 3, 2, 2, 2, 2, 1, 1, 3, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 3, 2, 3, 0, 2, 1, 2, 2, 3, 0, 0, 0, 2, 2, 1, 3, 1, 0, 2, 1, 3, 3, 2, 1, 0, 2, 2, 2, 1, 3, 0, 1, 0, 1, 0, 1, 2, 1, 3, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 1, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 2, 3, 0, 3, 1, 1, 3, 3, 1, 3, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 3, 1, 3, 1, 3, 2, 2, 2, 0, 0, 0, 1, 0, 2, 0, 3, 3, 2, 0, 2, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 1, 1, 2, 0, 3, 2, 2, 1, 0, 3, 2, 1, 2, 1, 1, 2, 1, 0, 0, 3, 0, 2, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 1, 2, 0, 0, 2, 2, 0, 0, 1, 0, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 0, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 2, 0, 2, 0, 2, 1, 2, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 0, 1, 1, 1, 0, 2, 1, 1, 2, 1, 1, 0, 2, 0, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 1, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 2, 0, 2, 2, 2, 0, 0, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 104, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nin0 = ( i0 + ( mod(( i0 + min(( i2 - mod(divInt(divInt(max(int(9.0), ( ( ( abs(divInt(int(9.0),min(min(abs(abs(( mod(int(3.0),i1) + mod(int(8.0),min(mod(min(int(6.0), max(divInt(divInt(res0,in0),int(9.0)), int(1.0))),min(abs(( ( ( max(i1, mod(int(4.0),in2)) + divInt(int(1.0),int(4.0)) ) - ( abs(abs(i0)) + max(mod(int(9.0),( int(9.0) - ( max(int(6.0), in1) * max(mod(res0,abs(mod(max(i0, int(2.0)),int(2.0)))), in0) ) )), max(max(in2, min(in0, mod(max(( in0 - i1 ), int(6.0)),int(5.0)))), i1)) ) ) - int(4.0) )), int(5.0))), min(( min(int(3.0), max(abs(max(min(min(max(int(3.0), abs(int(5.0))), i2), abs(int(2.0))), int(1.0))), ( min(abs(int(2.0)), min(in2, int(7.0))) * ( int(6.0) - abs(max(in1, mod(int(3.0),( i2 + divInt(( ( abs(in0) - i2 ) + int(5.0) ),i2) )))) ) ))) - i0 ), min(divInt(in0,min(max(max(in0, i2), min(int(2.0), ( mod(min(mod(int(7.0),( ( in0 + i1 ) + abs(divInt(int(0.0),( max(mod(int(9.0),int(2.0)), ( i2 + in1 )) + min(min(( int(2.0) + int(4.0) ), int(6.0)), i1) ))) )), in0),mod(in1,i1)) - in2 ))), abs(( divInt(( divInt(int(2.0),int(2.0)) + abs(int(5.0)) ),divInt(mod(divInt(( int(2.0) - int(9.0) ),( int(9.0) - divInt(int(6.0),divInt(abs(( max(res0, divInt(int(0.0),mod(( min(i1, in0) + in1 ),mod(mod(int(4.0),min(int(5.0), i0)),( int(6.0) + abs(abs(divInt(int(5.0),i1))) ))))) * divInt(divInt(( int(3.0) + max(i1, int(0.0)) ),i0),int(5.0)) )),res0)) )),int(6.0)),mod(int(5.0),abs(int(4.0))))) * int(9.0) )))), i1)))) ))), divInt(( in2 * i1 ),in2)), in1))) * res0 ) + in2 ) + min(max(( int(8.0) * int(6.0) ), i0), res0) )),( ( int(3.0) - int(1.0) ) + int(0.0) )),i0),i2) ), int(7.0)) ),i0) * ( ( max(res0, max(int(5.0), int(0.0))) * min(abs(int(9.0)), max(in1, int(8.0))) ) - ( int(4.0) + res0 ) ) ) )\\n:}else:{:\\nloopBreak% = 0\\nwhile max(int(3.0), int(4.0)) == int(6.0):{:\\nloopBreak% = 0\\nwhile i2 \\le abs(int(7.0)):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = max(int(0.0), max(mod(( ( i1 - i1 ) - res0 ),int(2.0)), in1)) \\g divInt(i2,min(abs(( in1 + ( int(1.0) + mod(in0,in1) ) )), min(int(6.0), int(9.0))))\\n:}\\nb1 = ( False and int(7.0) != int(7.0) )\\nloopBreak% = 0\\nwhile divInt(int(0.0),int(6.0)) == mod(i1,abs(divInt(( int(4.0) - i1 ),abs(divInt(int(3.0),( int(6.0) + int(4.0) )))))):{:\\ni2 = divInt(int(2.0),i0)\\nb2 = i0 \\ge min(i2, divInt(int(4.0),int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 87, 87, 6, 5, 1, 10, 6, 4, 2, 1, 78, 2, 337, 97, 77, 48, 49]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1], [5, 5], [0], [1], [], [1], [0], [], [], [], [4, 4], [0], [1, 0, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(5.0) \\l in1\\nin1 = int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0], [0], [1, 1], [1], [8], [], [], [], [0], [], [1], [0], [1], [4, 1, 3, 6], [1, 1], [3, 1, 0, 0], [], [0], [2, 1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin1 *= min(int(8.0), i1)\\n:}else:{:\\nin0 -= res0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 4, 2, 4, 0, 1, 2, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [2, 2], [], [0], [], [0], [], [], [1, 5], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = in2\\nb2 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 1], [0], [1, 1, 1, 1], [0, 0, 0, 3], [4, 0], [0, 0, 1], [1], [0, 1, 0, 1, 0, 0], [0, 0], [0, 3, 2, 0], [], [], [5, 3], [], [3, 1, 1, 0, 2, 0, 2, 1, 1], [0, 1], [2], [1], [1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile abs(int(0.0)) \\le int(0.0):{:\\nb0 = ( in2 \\l ( in0 - mod(int(0.0),int(3.0)) ) or not b1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 4, 4, 2, 3, 1, 6, 2, 4, 0, 0, 2, 0, 9, 2, 1, 1, 1]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 4, 6, 4, 2, 4, 3, 4, 5, 3, 0, 3, 3, 5, 6, 4, 0, 9, 1, 0, 8, 2], [5, 4], [1, 1], [], [1, 1], [0, 0], [], [], [], [2, 2, 0, 3, 1, 3, 4, 1, 1, 2, 1, 6, 4, 4, 5, 2, 4, 0, 5, 6, 0, 5, 5, 5, 6, 1, 3, 0, 1], [], [2, 0, 3, 2, 3, 2, 1, 3, 2, 0, 2, 2, 1, 2, 2, 2, 3, 1, 0, 3, 2, 1, 3, 3, 3, 0, 3, 1, 0, 1, 3, 2, 1, 1, 0, 3, 2, 3, 3, 2, 1, 1, 0, 1, 3, 3, 3, 0, 3, 3, 0, 0, 3, 2, 3, 0, 0, 3, 0, 0, 3, 0, 3, 2, 0, 0, 2, 2, 1, 0, 0, 1, 3, 1, 3, 2, 2, 1, 2, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 3, 2, 3, 0, 0, 1, 2, 1, 0, 3, 3, 0, 1, 2, 0, 2, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0, 2, 0], [0, 0, 2, 2, 1, 0, 2, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(i2,min(divInt(min(divInt(int(6.0),min(( i2 + divInt(( int(3.0) + ( ( mod(abs(int(4.0)),i0) * max(( int(6.0) * max(max(abs(in0), min(int(4.0), i1)), int(2.0)) ), min(mod(int(4.0),int(3.0)), in0)) ) - min(( min(max(mod(int(4.0),int(5.0)), in1), int(3.0)) + abs(max(max(i1, abs(abs(i1))), i2)) ), min(( abs(i1) * res0 ), max(in1, in1))) ) ),max(in2, max(( i2 - in1 ), mod(mod(int(0.0),i0),in2)))) ), int(3.0))), abs(int(3.0))),abs(divInt(mod(int(5.0),( res0 + int(6.0) )),divInt(max(mod(i0,int(4.0)), int(0.0)),in2)))), in2)) != mod(max(( min(in2, res0) - int(9.0) ), divInt(int(1.0),i1)),abs(min(in0, int(0.0))))\\nb1 = mod(i0,mod(i1,int(8.0))) \\le int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 23, 23, 2, 2, 0, 2, 2, 0, 0, 0, 29, 0, 109, 27, 30, 10, 17]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 1, 2, 2, 2, 0, 0, 1], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 8, 8, 2, 4, 4, 6, 2, 7, 9, 4, 8, 6, 1, 7, 9, 2, 7, 7, 2, 5, 7, 2], [2, 3, 0, 5, 2, 3], [2, 2, 0, 2, 1], [1], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [2, 1, 0, 2, 3, 0], [0], [1, 1, 1, 0], [3, 1, 5, 5, 1, 4, 6, 5, 5, 0, 1, 6, 4, 6, 1, 3, 4, 4, 3, 5, 6, 4, 3, 5, 0, 4, 4, 4], [0, 0], [1, 1, 1, 0, 2, 3, 2, 1, 1, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 2, 2, 2, 1, 1, 0, 3, 0, 1, 2, 2, 2, 3, 2, 2, 3, 2, 1, 3, 2, 2, 0, 0, 0, 2, 2, 1, 2, 1, 3, 1, 0, 3, 3, 1, 3, 3, 0, 1, 0, 3, 0, 2, 1, 2, 3, 3, 0, 1, 3, 0, 0, 0, 1, 0, 3, 1, 0, 2, 3, 3, 0, 1, 3, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 2, 2, 1, 0, 0, 2, 0, 2, 1, 0, 0, 2, 0, 1, 0, 1, 1], [1, 2, 2, 0, 2, 2, 0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(7.0) == int(48.0):{:\\nin0 = int(8.0)\\nif i1 \\ge ( max(( int(2.0) - int(4.0) ), in2) * in2 ):{:\\nb2 = i1 \\l mod(in1,int(4.0))\\n:}else:{:\\nif not True:{:\\nif b2:{:\\nif not res0 != divInt(in2,in2):{:\\ni0 = ( divInt(( mod(int(6.0),int(2.0)) * i1 ),abs(res0)) + int(7.0) )\\n:}\\n:}else:{:\\nb0 = ( ( divInt(( abs(( ( max(mod(int(9.0),min(( divInt(in1,res0) * i1 ), divInt(( int(4.0) * divInt(int(8.0),min(int(6.0), in0)) ),abs(min(int(1.0), abs(max(in1, int(7.0)))))))), in1) + min(in0, ( int(9.0) - mod(min(abs(in2), int(2.0)),min(res0, in1)) )) ) + in0 )) - int(7.0) ),in2) + max(int(7.0), i0) ) == ( min(max(in1, int(2.0)), max(int(5.0), int(7.0))) + int(2.0) ) or b2 )\\n:}\\n:}else:{:\\nb1 = in1 \\ge in1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 24, 24, 6, 5, 1, 12, 6, 6, 1, 4, 28, 2, 89, 22, 18, 12, 10]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [0, 2, 2, 1, 2, 0], [1, 0, 1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [0, 9, 0, 3, 5, 4, 7], [0, 4], [1, 1], [], [0, 1, 0, 0, 1], [0, 0], [1, 0, 2], [0], [1], [5, 0, 6, 1, 6, 1], [1, 0], [0, 1, 1, 3, 2, 1, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 1, 0], [0, 0], [2, 2, 0, 1, 0], [2, 1, 1], []], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= i0\\nloopBreak% = 0\\nwhile True:{:\\nif int(0.0) \\l int(9.0):{:\\nb1 = b1\\n:}else:{:\\nloopBreak% = 0\\nwhile not abs(( int(0.0) - abs(res0) )) \\le int(3.0):{:\\ni1 = min(( res0 - int(5.0) ), max(int(4.0), min(int(7.0), i1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 7, 7, 2, 2, 0, 5, 2, 3, 1, 1, 6, 2, 18, 2, 5, 3, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 0], [], [1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 5, 3, 4, 1, 7, 5, 1, 0, 7, 8], [1, 3], [1, 0], [], [1, 1], [0, 0], [], [], [], [3, 0, 4, 0, 5, 4, 4, 6, 1, 4, 2, 4, 2, 0, 6, 1, 2, 6], [1, 0], [2, 3, 0, 3, 1, 3, 1, 1, 0, 1, 0, 2, 2, 2, 1, 3, 1, 2, 2, 1, 0, 2, 0, 3, 1, 2, 0, 2, 1, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 3, 1, 2, 0, 3, 3, 3, 3, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 1, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 0, 1], [1, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= ( max(i0, min(int(5.0), abs(int(9.0)))) * int(5.0) )\\nb1 = in1 \\g int(3.0)\\nb0 = i0 \\ge ( ( mod(int(4.0),min(int(1.0), divInt(( int(7.0) * in2 ),divInt(in1,abs(int(5.0)))))) + mod(in1,( int(1.0) * max(min(min(min(min(( res0 * i1 ), in1), i2), in1), max(int(0.0), ( i2 + min(abs(min(abs(int(7.0)), i0)), int(8.0)) ))), res0) )) ) - i1 )\\ni2 = res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 12, 12, 2, 2, 0, 2, 2, 0, 0, 0, 18, 2, 54, 11, 15, 8, 4]}, {"genotype": [[0], [1], [0], [], [0], [1], [3], [4], [0], [], [1], [0], [], [], [], [2], [], [1, 3, 0], [], [2], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(3.0) \\le abs(i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 6, 1, 5, 9, 9, 9, 0, 6, 7, 3, 5, 0, 0, 3, 6, 3, 4], [4, 3, 3], [1, 2, 1], [1], [0, 1, 0, 1, 1], [0, 0, 0], [3, 1], [0], [], [1, 1, 1, 5, 3, 0, 0, 0, 5, 5, 0, 3, 2], [], [2, 1, 3, 0, 2, 1, 1, 3, 1, 2, 3, 0, 1, 0, 2, 3, 0, 2, 0, 3, 2, 2, 0, 1, 0, 3, 3, 3, 3, 1, 1, 1, 3, 1, 0, 0, 3, 3, 2, 0, 1, 2, 0, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 1, 3, 1, 0, 2, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 2, 1, 0, 2, 1, 1], [1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( int(9.0) - min(i1, ( int(2.0) * int(6.0) )) ) \\le max(int(1.0), mod(max(i1, int(5.0)),i1)) or True )\\nb2 = mod(abs(in2),( in0 - abs(divInt(( i0 + int(9.0) ),i0)) )) \\ge abs(min(max(max(int(9.0), int(9.0)), int(0.0)), max(int(6.0), i0)))\\nb1 = in2 \\ge max(max(( in2 * int(7.0) ), ( i0 - divInt(divInt(min(mod(max(int(3.0), max(int(5.0), int(0.0))),int(0.0)), int(3.0)),max(int(6.0), in0)),( int(3.0) - i2 )) )), int(4.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 19, 19, 3, 3, 1, 5, 3, 2, 1, 0, 13, 0, 61, 13, 16, 7, 6]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [2], [1, 2], [1], [0, 0, 0, 0, 1], [0], [2, 2, 3, 0], [], [], [2, 3], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not not ( b2 or i2 == in0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 2, 1, 5, 1, 4, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 0, 2, 2, 0], [0, 1, 0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 3, 5, 6, 8, 6, 9, 3, 7, 9, 1, 8, 4, 3, 0, 5, 4], [4, 5, 4, 0, 2], [2, 1, 1], [0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [3, 3, 1, 1, 2, 2, 3, 0, 2], [0, 1], [0, 0], [0, 3, 5, 2, 3, 3, 3, 4, 5, 5, 3, 6, 4, 0, 5, 4, 0, 2, 1, 6, 5, 4, 5], [], [0, 2, 1, 2, 0, 1, 2, 1, 1, 1, 3, 1, 0, 0, 0, 3, 3, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 1, 0, 0, 1, 2, 0, 3, 2, 2, 1, 0, 3, 3, 2, 3, 3, 3, 3, 0, 0, 2, 3, 2, 1, 2, 3, 3, 2, 1, 1, 1, 3, 1, 0, 2, 3, 0, 1, 0, 0, 2, 1, 3, 0, 0, 1, 0, 0, 3, 0, 3, 2, 1, 0, 2, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 1, 0, 1, 0, 0], [0, 1, 2, 0, 1, 2, 0, 2], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( i0 \\le ( int(0.0) + mod(in0,int(9.0)) ) and divInt(int(6.0),int(9.0)) != int(5.0) ) or True ):{:\\nb2 = False\\n:}\\nloopBreak% = 0\\nwhile not min(int(3.0), in2) \\le i2:{:\\nif not ( in0 \\l max(max(mod(mod(int(5.0),int(6.0)),mod(min(( in0 - min(min(int(8.0), in0), in1) ), int(6.0)),divInt(in2,abs(( ( int(9.0) * in2 ) + abs(min(( min(abs(abs(min(in0, res0))), divInt(abs(divInt(int(3.0),mod(min(abs(( int(7.0) - int(9.0) )), int(1.0)),max(int(8.0), in1)))),( min(i0, int(4.0)) * in2 ))) + in1 ), mod(int(3.0),max(i0, i2)))) ))))), int(0.0)), i1) or b1 ):{:\\nb1 = not res0 == min(in2, min(( int(5.0) * in1 ), mod(in2,int(4.0))))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 21, 21, 5, 3, 3, 14, 5, 9, 2, 2, 23, 0, 84, 19, 21, 8, 11]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [1, 6], [], [], [], [], [], [], [], [], [5], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(16.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1], [9, 2, 2, 3], [], [], [], [], [], [], [], [], [3, 2, 6, 5, 4, 2], [0], [3, 0, 2, 3, 1, 2, 2, 3, 1, 2, 1, 0, 1, 3, 0, 3, 0, 0], [0, 1, 1, 1], [1, 0, 1, 0, 2], [0], [1, 1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = max(i2, ( min(int(9.0), mod(mod(max(int(2.0), divInt(int(2.0),res0)),int(3.0)),min(in2, abs(in1)))) + i2 ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 18, 4, 5, 1, 3]}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 2, 1, 2, 2, 1, 2, 1, 0], [0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 2, 8, 2, 2, 6, 7, 6, 7, 0, 8, 7, 2, 2, 4, 3, 5, 5, 2, 7, 5, 5, 7, 3, 7, 9, 2, 3, 9, 6, 0, 1, 0, 9, 1, 7, 9, 9, 4, 3, 3, 4, 4, 9, 4, 3, 4, 1, 4, 8, 6, 3, 9, 6], [5, 1, 3, 3, 0, 4, 1, 4], [1, 2, 0, 2, 1], [1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 0, 0, 3, 2, 2, 2, 0], [], [1, 0, 0, 1], [5, 6, 5, 6, 1, 1, 1, 1, 6, 0, 3, 0, 0, 3, 3, 5, 0, 1, 1, 0, 2, 1, 2, 4, 4, 4, 2, 0, 5, 6, 2, 0, 5, 4, 4, 1, 1, 6, 0, 4, 3, 0, 4, 2, 0, 4, 5, 4], [0, 1, 1], [1, 3, 2, 1, 3, 1, 3, 2, 0, 2, 3, 3, 3, 1, 1, 3, 1, 3, 1, 2, 1, 0, 3, 3, 0, 3, 1, 1, 2, 0, 0, 3, 2, 1, 3, 3, 0, 1, 3, 1, 1, 2, 0, 0, 3, 3, 0, 2, 2, 1, 3, 2, 0, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 3, 0, 3, 2, 1, 3, 3, 2, 2, 2, 1, 1, 0, 3, 2, 1, 3, 0, 2, 0, 1, 0, 3, 3, 1, 3, 0, 3, 0, 3, 2, 0, 2, 1, 1, 0, 3, 2, 3, 0, 3, 2, 1, 0, 1, 0, 3, 1, 1, 0, 3, 2, 2, 0, 2, 3, 2, 2, 2, 2, 3, 0, 0, 3, 3, 0, 1, 2, 3, 0, 0, 1, 1, 3, 3, 0, 1, 0, 1, 1, 1, 2, 0, 3, 2, 2, 1, 0, 2, 2, 1, 3, 3, 1, 1, 3, 0, 3, 3, 1, 1, 0, 1, 2, 0, 1, 2, 1, 2, 3, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 0, 0, 1, 1, 2, 2, 2, 0, 3, 0, 1, 0, 1, 2, 2, 1, 0, 3, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 2, 1, 2, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 1, 1, 2, 1, 2, 0, 2, 2, 1, 1, 0, 2, 1, 2, 1, 2, 2, 1], [0, 0, 1, 0, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(8.0) != min(divInt(int(1.0),min(int(2.0), abs(mod(in2,divInt(max(abs(max(int(8.0), int(2.0))), abs(int(2.0))),min(int(6.0), mod(int(7.0),res0))))))), abs(abs(in2))):{:\\nloopBreak% = 0\\nwhile not min(int(6.0), int(7.0)) \\g ( res0 + i1 ):{:\\nif abs(mod(int(0.0),abs(max(i1, int(8.0))))) \\ge abs(int(7.0)):{:\\ni1 = int(2.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif not ( divInt(i1,res0) \\ge min(abs(i0), ( ( int(2.0) + max(mod(in0,int(4.0)), ( mod(divInt(int(3.0),int(5.0)),divInt(int(5.0),( int(2.0) - ( ( max(i0, max(( int(7.0) + abs(max(( mod(( int(5.0) * int(5.0) ),i0) * abs(( int(7.0) - max(in0, ( in0 * int(3.0) )) )) ), in2)) ), min(max(int(7.0), min(i0, abs(i1))), abs(mod(i1,mod(int(9.0),int(2.0))))))) - i0 ) * abs(( min(i2, min(( int(3.0) - i1 ), int(9.0))) * i2 )) ) ))) + abs(int(6.0)) )) ) * int(0.0) )) or in1 \\l min(mod(( in1 - ( abs(divInt(divInt(( divInt(min(in1, i2),max(max(i0, int(1.0)), ( abs(in2) * res0 ))) - int(0.0) ),int(9.0)),max(abs(i2), int(1.0)))) * i0 ) ),int(7.0)), int(9.0)) ):{:\\nin2 -= int(9.0)\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nif b2:{:\\nin1 *= mod(in1,min(( ( int(4.0) * i1 ) - divInt(( int(3.0) - abs(abs(int(3.0))) ),int(4.0)) ), max(i1, max(min(int(4.0), int(9.0)), res0))))\\n:}else:{:\\nloopBreak% = 0\\nwhile ( not not int(4.0) \\le mod(i0,int(3.0)) and ( int(4.0) - ( abs(max(in1, abs(max(abs(int(1.0)), ( int(4.0) - ( mod(in0,i0) - int(8.0) ) ))))) - int(6.0) ) ) \\g ( divInt(divInt(in1,abs(i2)),int(3.0)) + i0 ) ):{:\\nb0 = int(9.0) \\le divInt(divInt(int(6.0),in1),max(in2, in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = not b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 7, 5, 55, 55, 8, 5, 2, 18, 8, 10, 0, 4, 48, 3, 205, 51, 54, 28, 25]}, {"genotype": [[0], [1], [1], [], [0], [], [], [2], [2], [], [1], [0], [], [], [], [0, 3], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i0 == in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [9, 9], [2], [1, 0], [0], [0, 1, 0], [0], [3, 0], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( int(9.0) == int(9.0) and b0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 2, 1, 3, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [0], [0, 1], [1, 1], [3, 4], [4], [2, 2], [], [0, 0, 1], [0], [0, 2], [], [0], [1, 4, 3, 4], [0], [1, 3, 0, 1, 3, 3, 0, 0], [], [0, 0, 2], [], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nb2 = not int(3.0) \\le min(i1, int(4.0))\\n:}\\nin1 = min(abs(in0), in1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 1, 2, 0, 3, 1, 2, 0, 1, 4, 1, 8, 0, 3, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 2, 0, 1, 0, 2, 0, 2, 1], [0, 1, 1, 0], [1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 8, 9, 8, 9, 8, 7, 2, 9, 3, 5, 0, 8, 6, 3, 6, 3, 4, 5], [2, 3, 0, 4, 1, 5, 1, 3], [2, 2, 2, 2, 0], [1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 2, 3, 3], [1], [1, 0], [3, 2, 2, 1, 3, 2, 3, 2, 6, 2, 3, 6, 2, 3, 6], [1, 1], [2, 1, 0, 0, 3, 2, 3, 1, 1, 1, 0, 1, 3, 1, 3, 1, 0, 1, 0, 0, 1, 1, 2, 2, 1, 1, 3, 0, 2, 2, 1, 0, 0, 1, 1, 0, 1, 2, 3, 2, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0], [2, 1, 1, 1, 2, 2, 0, 2], [0, 0, 2, 0], [0, 0, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += divInt(int(6.0),i2)\\nif i2 == abs(divInt(max(int(8.0), int(9.0)),int(8.0))):{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = i1 \\ge int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = b2\\nb2 = max(int(8.0), max(int(7.0), in0)) \\l int(2.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile not ( ( i2 \\le in0 or int(9.0) \\g int(3.0) ) and mod(mod(int(5.0),int(0.0)),abs(i2)) != ( divInt(int(8.0),res0) + i2 ) ):{:\\nb0 = int(6.0) \\g int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in0 \\ge int(6.0):{:\\nres0 *= divInt(abs(divInt(i2,in0)),min(mod(res0,int(3.0)), ( int(4.0) + abs(int(5.0)) )))\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 19, 19, 8, 5, 2, 13, 8, 5, 1, 2, 15, 2, 50, 10, 8, 4, 8]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1], [9, 4, 4, 3], [1], [0], [], [0, 1], [0], [2], [], [], [6, 0, 4, 1, 4, 2], [], [0, 3, 1, 3, 0, 2, 2, 2, 0, 0, 2, 2, 1, 0, 1, 3, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0], [1, 2, 1, 2, 0], []], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not res0 \\g min(int(9.0), max(i0, ( ( ( in1 - i1 ) * ( ( int(4.0) - in1 ) * int(4.0) ) ) + min(i2, int(3.0)) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 2, 1, 1, 0, 0, 6, 0, 18, 5, 3, 5, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 3], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 3], [1], [3, 0], [], [2], [2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= abs(in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 0, 1], [4, 2, 9], [4], [2], [], [1], [0], [], [], [], [5], [], [2, 0, 1, 1], [1], [], [], [0]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = divInt(in2,int(4.0)) \\le int(29.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 2], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 7, 4, 9, 8, 2, 4, 5, 3, 0, 5, 9, 7, 2, 5, 2, 7, 7], [1], [2], [], [1], [0], [], [], [], [6, 3, 4, 2, 4, 4, 1, 3, 0, 3, 5, 0, 3, 2, 0, 2], [], [1, 3, 2, 1, 1, 3, 1, 2, 2, 1, 2, 3, 0, 3, 2, 2, 3, 2, 3, 1, 0, 3, 0, 0, 2, 3, 1, 3, 2, 2, 1, 0, 1, 1, 2, 3, 3, 3, 0, 0, 0, 2, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 2, 2, 2, 1, 3, 0, 3, 1, 0, 3, 1, 0, 1, 3, 2, 1, 2, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 1, 1, 2, 2, 0, 1, 1, 2, 0, 1, 1], [2, 1, 1, 2, 2, 0, 1, 0, 2, 1, 2], [0, 0, 1, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(5.0) \\g min(( int(6.0) * int(7.0) ), min(int(4.0), divInt(( int(9.0) - divInt(min(res0, abs(mod(( min(( min(int(8.0), in0) - max(in1, i2) ), ( max(int(2.0), abs(divInt(mod(int(4.0),in1),int(5.0)))) * int(3.0) )) * mod(abs(min(max(in1, i1), in0)),divInt(divInt(max(( int(0.0) + i0 ), int(5.0)),int(9.0)),int(7.0))) ),in0))),divInt(( ( ( int(2.0) - abs(in2) ) + min(int(5.0), i0) ) * max(int(2.0), in0) ),int(7.0))) ),max(( int(7.0) - ( i2 * i0 ) ), i2))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 19, 19, 1, 1, 0, 1, 1, 0, 0, 0, 16, 0, 72, 20, 17, 11, 9]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 1, 2, 0, 0, 1, 0, 2, 0], [0, 0, 0], [0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 9, 4, 1, 8, 9, 8, 0, 8, 4, 3, 7, 3, 3, 0, 8, 2], [1, 2, 3, 5], [1, 2, 2, 0, 2, 0], [], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0], [0, 1, 0], [1], [1, 0, 0], [5, 6, 4, 5, 3, 2, 5, 4, 4, 3, 5, 1, 3, 3, 6], [0, 1], [1, 3, 1, 1, 2, 2, 1, 1, 3, 2, 1, 1, 1, 1, 0, 2, 0, 3, 0, 1, 3, 0, 2, 2, 0, 2, 0, 0, 3, 0, 3, 1, 3, 3, 3, 1, 3, 2, 3, 3, 2, 0, 1, 0, 2, 2, 0, 1, 1, 3, 1, 1, 2, 3, 0, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(2.0) \\g max(int(5.0), int(9.0)):{:\\nb1 = divInt(( int(4.0) + int(1.0) ),max(( int(8.0) + int(9.0) ), int(8.0))) == int(0.0)\\nif in2 \\ge divInt(res0,max(in1, int(8.0))):{:\\nin2 = min(in0, mod(divInt(i2,divInt(in2,in1)),abs(in1)))\\n:}\\nb2 = b2\\nb0 = False\\n:}else:{:\\nin0 *= abs(int(4.0))\\nif b2:{:\\nb0 = abs(abs(max(int(3.0), min(divInt(abs(min(( in2 - int(7.0) ), i1)),( divInt(in0,int(3.0)) - int(3.0) )), min(int(0.0), int(8.0)))))) != ( min(in0, res0) - int(2.0) )\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 18, 18, 4, 6, 0, 7, 4, 3, 1, 3, 15, 2, 57, 12, 14, 6, 7]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1, 1, 1], [0, 8, 8], [], [], [], [], [], [], [], [], [6, 6], [1, 1], [2, 1, 1, 1], [1], [], [0, 1], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += mod(int(0.0),int(8.0))\\nres0 -= int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 0, 2, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 0, 1, 1, 0, 1, 2, 1], [1, 0, 1], [1, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 6, 0, 8, 5, 0, 5, 6, 6, 9, 0, 6], [5, 3, 3, 1, 0], [2, 0, 1, 2, 0], [1], [0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0], [3, 0, 1, 1], [1, 1], [0], [0, 2, 0, 2, 4, 4, 0, 1, 6, 5, 0, 3, 0, 0, 6, 2, 3, 3, 6], [1, 1, 1], [1, 0, 2, 0, 3, 2, 2, 3, 0, 0, 1, 0, 1, 1, 0, 1, 3, 3, 0, 2, 0, 2, 1, 3, 1, 1, 2, 3, 2, 2, 0, 0, 0, 0, 3, 2, 0, 1, 3, 1, 3, 2, 0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [2, 1, 1, 0, 0, 1, 2, 2, 0], [2, 0, 2, 2, 0, 1, 1, 0, 0, 2], [0, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(3.0) != i0 or divInt(i2,abs(( ( max(i0, i2) * int(2.0) ) + in1 ))) \\ge int(6.0) ):{:\\nin1 *= int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b2:{:\\nb0 = i0 \\ge int(8.0)\\n:}\\ni1 *= max(min(res0, ( in2 + ( int(5.0) - min(int(0.0), int(5.0)) ) )), divInt(max(divInt(( i0 - in0 ),i0), i0),abs(( res0 + int(6.0) ))))\\nb1 = abs(int(6.0)) \\g min(( i2 + in0 ), int(9.0))\\nb2 = False\\nin0 *= int(0.0)\\nloopBreak% = 0\\nwhile False:{:\\nb0 = int(6.0) \\l res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 13, 13, 5, 5, 1, 9, 5, 4, 2, 1, 19, 3, 48, 10, 9, 10, 3]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [9, 4], [0], [2], [], [1], [0], [], [], [], [5], [], [1, 3, 1, 0], [], [1], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(9.0) \\l max(int(4.0), in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 0], [], [0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 3, 2, 9, 4, 0, 8, 1, 4, 1, 1, 0, 9, 1, 7], [0, 0, 4, 3], [0, 1, 2, 1], [], [1, 1, 1, 1], [0, 0, 0, 0], [], [], [], [3, 0, 0, 0, 5, 5, 1, 1, 4, 0, 2, 2], [], [0, 3, 3, 0, 1, 3, 2, 2, 3, 1, 0, 2, 2, 3, 3, 1, 1, 2, 0, 0, 3, 1, 3, 2, 1, 3, 3, 1, 1, 0, 0, 1, 3, 3, 3, 3, 2, 1, 3, 0, 0, 3, 1, 0, 1, 3, 1, 0, 3, 1, 1, 2, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 0, 0, 1, 0, 2], [2, 2, 2, 2, 1], [1, 0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = in0 \\l min(abs(i0), int(4.0))\\nb1 = max(( mod(max(int(8.0), i0),( ( min(max(int(3.0), int(2.0)), ( i0 * in2 )) * abs(int(9.0)) ) * min(( int(4.0) * abs(abs(int(0.0))) ), int(8.0)) )) - in2 ), i1) \\l int(1.0)\\nb2 = abs(max(min(min(divInt(int(4.0),min(i1, in1)), max(int(1.0), i0)), int(1.0)), min(int(0.0), i2))) \\le abs(int(9.0))\\nb1 = int(1.0) \\ge divInt(i2,int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 16, 16, 4, 4, 0, 4, 4, 0, 0, 0, 12, 0, 54, 8, 18, 5, 3]}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [0, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1], [3, 4, 6, 1, 9, 4, 7], [2, 2], [], [], [1, 1], [0, 0], [], [], [0], [5, 5, 3, 4, 4, 3, 3, 1, 3], [1, 1], [0, 2, 1, 3, 0, 3, 2, 1, 3, 0, 3, 3, 0, 2, 1, 1, 0, 1, 1, 1, 3, 0, 0], [1, 0, 1], [1, 0, 1, 0, 1, 2], [1, 1, 1], [0, 1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 == divInt(int(3.0),max(in2, min(( int(4.0) - max(in0, min(max(in1, mod(int(6.0),int(1.0))), in1)) ), int(9.0)))):{:\\nloopBreak% = 0\\nwhile int(4.0) == int(7.0):{:\\nin0 -= abs(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 -= in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 7, 7, 2, 0, 0, 2, 2, 0, 0, 1, 9, 2, 23, 3, 6, 3, 2]}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1], [2, 1, 1, 2, 0, 0, 1], [0, 0], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 5, 8, 8, 0, 6, 9, 2, 5, 0], [2, 1, 3], [2, 0], [0], [0, 0, 1, 0, 1, 1], [0, 0, 0], [1, 1, 3], [0, 0], [1, 0], [3, 3, 2, 1, 2, 0, 3, 4], [1, 0, 1], [3, 0, 1, 1, 0, 3, 2, 0, 1, 0, 1, 1, 2, 3, 0, 1, 3, 2, 1, 3, 1, 3, 1, 1, 1], [0, 1, 0], [1, 2, 2, 0, 1, 0], [2, 1, 2, 1], [1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nin0 *= max(in0, int(1.0))\\ni2 = int(0.0)\\n:}else:{:\\nif True:{:\\ni1 -= i2\\n:}\\nb2 = abs(( i0 * int(5.0) )) == in0\\nb0 = ( int(8.0) \\g int(8.0) and mod(abs(in1),int(0.0)) \\ge min(( int(6.0) - max(int(9.0), min(int(2.0), int(5.0))) ), int(0.0)) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 11, 11, 3, 2, 1, 6, 3, 3, 2, 2, 8, 3, 25, 3, 6, 4, 1]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1], [8, 6, 5, 8, 5], [], [], [], [], [], [], [], [], [5, 4, 0, 1, 3, 2, 1, 0], [0], [2, 1, 3, 2, 2, 0, 0, 3, 2, 3, 3, 1, 3, 0, 1, 2, 0, 0, 3, 3, 0, 0, 1, 1], [1, 0, 0, 1, 0], [0, 1, 0, 1, 2, 0, 0], [2, 0, 2], [1, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = mod(int(8.0),min(( ( in1 * i0 ) + max(divInt(min(max(int(6.0), abs(i1)), int(5.0)),( in0 * i2 )), min(min(i1, i0), int(8.0))) ), int(5.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 24, 5, 7, 3, 2]}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0], [1], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 3, 3, 5, 3, 1, 8, 1, 4, 3, 2, 3, 7, 8, 1, 2, 7, 5, 6, 9, 4, 2, 2, 5, 8, 2, 4], [1, 4, 5, 2, 0], [2, 2, 0], [1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [2, 3, 2, 1, 3, 0, 2, 3, 3, 2], [0], [], [1, 3, 4, 5, 6, 3, 3, 6, 0, 1, 1, 2, 0, 5, 4, 2, 0, 3, 0, 3, 0, 6, 5, 0, 5, 5, 0, 6], [0], [0, 3, 1, 1, 2, 0, 1, 1, 2, 3, 3, 1, 0, 1, 0, 3, 0, 3, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 2, 3, 3, 1, 3, 0, 2, 1, 3, 1, 2, 3, 1, 3, 0, 3, 3, 1, 3, 1, 1, 2, 2, 2, 0, 1, 3, 3, 0, 2, 1, 3, 3, 2, 0, 3, 0, 0, 0, 1, 3, 3, 3, 0, 3, 2, 2, 0, 2, 2, 0, 3, 0, 1, 1, 3, 1, 0, 3, 0, 2, 3, 0, 3, 1, 1, 3, 3, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 2, 1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [1, 0, 2, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not ( i1 \\g max(int(1.0), int(9.0)) or not True ):{:\\nin0 = mod(in1,int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( b2 and not ( ( int(3.0) \\le mod(max(min(int(5.0), in2), int(3.0)),res0) and not min(in0, abs(min(int(1.0), abs(int(8.0))))) != in0 ) or mod(res0,i0) == i1 ) )\\nb0 = i1 \\l mod(mod(( int(1.0) - int(4.0) ),int(3.0)),( min(max(int(2.0), min(i2, divInt(int(3.0),abs(int(7.0))))), mod(min(int(8.0), abs(i0)),max(min(int(1.0), min(int(2.0), int(7.0))), mod(divInt(( in2 + int(5.0) ),max(max(in1, divInt(int(6.0),max(abs(( i2 * abs(i0) )), in0))), i0)),int(9.0))))) + abs(min(max(in0, min(mod(( i0 - divInt(mod(res0,max(in2, int(4.0))),int(2.0)) ),min(int(2.0), i0)), min(in2, ( max(in2, min(int(5.0), int(8.0))) + max(max(int(2.0), i0), res0) )))), int(4.0))) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 28, 28, 5, 3, 4, 15, 5, 10, 1, 0, 28, 1, 106, 19, 32, 6, 13]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 1, 1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 0, 5, 4, 0, 8, 9, 8, 7, 7, 3, 1, 8, 9, 6, 6, 1, 7, 2, 0, 5, 8, 0, 1, 6, 4, 1, 8, 8, 0], [3, 0, 1, 1, 4, 4, 5, 1, 3, 3, 1, 3], [0, 0, 2, 0, 1, 0, 2, 0], [1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 3, 1, 2, 3, 1, 2, 2, 0, 3, 0, 3, 2], [1, 1, 0, 0], [1, 1, 1], [0, 4, 4, 5, 0, 0, 1, 3, 1, 6, 5, 3, 1, 5, 3, 0, 6, 0, 4, 4, 3, 6, 6, 1, 3, 5, 6, 6, 6, 0, 3, 4, 5, 1, 3, 1, 4, 0, 4, 6, 6, 6, 1, 2, 6, 2, 6, 6, 2, 4, 6, 2], [1, 0, 0, 0], [0, 2, 3, 3, 2, 1, 1, 0, 1, 0, 0, 3, 1, 0, 0, 1, 1, 3, 1, 1, 3, 2, 3, 2, 3, 1, 1, 2, 3, 0, 1, 1, 2, 1, 3, 0, 1, 3, 2, 0, 3, 0, 0, 2, 1, 2, 2, 3, 3, 1, 0, 3, 2, 0, 3, 3, 3, 2, 1, 3, 3, 0, 2, 1, 3, 3, 3, 0, 0, 1, 2, 2, 2, 0, 0, 1, 0, 2, 0, 0, 1, 3, 3, 1, 0, 1, 0, 3, 2, 3, 3, 0, 3, 2, 0, 2, 0, 1, 3, 0, 2, 0, 0, 2, 3, 0, 0, 1, 0, 0, 3, 3, 1, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 3, 3, 3, 2, 3, 1, 0, 3, 3, 2, 0, 3, 2, 0, 1, 3, 1, 1, 2, 0, 3, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [2, 2, 0, 1, 2, 0, 1, 0, 1, 2, 1, 2, 2, 2, 0, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2, 1, 1, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0], [0, 1, 0, 1, 2, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile i0 \\ge ( abs(abs(( int(4.0) + int(9.0) ))) - in1 ):{:\\nif False:{:\\nif int(0.0) \\l in1:{:\\nb0 = ( True or in2 \\g min(int(5.0), i0) )\\n:}else:{:\\nb0 = i0 \\g int(4.0)\\n:}\\n:}else:{:\\nif not int(0.0) \\le max(int(8.0), int(9.0)):{:\\ni1 += abs(mod(min(( max(int(8.0), int(7.0)) - mod(min(in0, int(7.0)),int(3.0)) ), mod(int(1.0),max(i1, int(8.0)))),abs(( res0 * max(in2, in0) ))))\\n:}else:{:\\ni1 = ( int(9.0) - divInt(mod(abs(abs(int(6.0))),in2),abs(divInt(in0,min(abs(abs(( int(6.0) - max(min(i0, divInt(int(1.0),max(abs(min(res0, i0)), int(7.0)))), ( ( divInt(in1,in1) - int(2.0) ) + in0 )) ))), ( res0 * res0 ))))) )\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(0.0) \\le max(min(int(5.0), i1), int(8.0))\\nloopBreak% = 0\\nwhile ( in0 != min(( max(max(in2, min(( res0 * mod(res0,int(0.0)) ), abs(res0))), mod(i0,in0)) * divInt(abs(in1),in2) ), int(1.0)) or True ):{:\\nb0 = i1 \\g in0\\nb1 = max(max(int(6.0), i1), in1) \\ge min(i0, in1)\\nloopBreak% = 0\\nwhile not not b0:{:\\nloopBreak% = 0\\nwhile res0 \\ge int(4.0):{:\\nb2 = ( b0 and ( res0 \\g res0 and not i1 \\ge min(abs(min(( min(int(1.0), i2) * abs(abs(( res0 * abs(( i2 + int(8.0) )) ))) ), abs(int(8.0)))), int(0.0)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( res0 - min(i2, in1) )\\nres0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 8, 10, 31, 31, 12, 8, 4, 26, 12, 14, 4, 3, 52, 4, 147, 26, 42, 16, 11]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [4, 3], [1], [0], [0, 1], [0, 0, 0, 0, 0, 0, 1], [0], [3, 2, 3, 1, 1, 2], [0, 1], [], [0], [], [3, 1, 0, 1], [], [1], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not ( True and False ) or not max(int(4.0), i0) \\g int(3.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 2, 7, 1, 6, 2, 0, 1, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [1, 2, 2, 1, 1, 1], [1, 1], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 7, 0, 5, 7, 0, 6, 4, 2, 4, 1, 8, 0, 5], [4, 3, 5], [1, 2], [], [1, 1, 1, 0], [0, 0, 0], [1], [0], [], [0, 2, 5, 5, 5, 4, 6, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0], [0, 0], [3, 1, 2, 0, 2, 3, 1, 3, 2, 0, 1, 2, 3, 3, 0, 0, 2, 0, 0, 3, 3, 1, 2, 2, 1, 0, 0, 0, 1, 1, 1, 2, 2, 1, 3, 1, 2, 0, 3, 3, 2, 3, 0, 1, 0, 3, 1, 1, 2, 0, 1, 3, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], [1, 2, 0, 1, 1, 1, 1, 2, 1, 1, 1, 0, 2], [0, 2, 1, 0, 0, 1, 2], [0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(int(3.0), divInt(i0,divInt(abs(int(2.0)),min(( i2 + int(7.0) ), ( max(max(in2, in2), divInt(in2,in1)) * max(max(int(0.0), ( ( int(5.0) - res0 ) + i0 )), i0) ))))) \\le int(7.0)\\nloopBreak% = 0\\nwhile int(0.0) \\ge int(6.0):{:\\nloopBreak% = 0\\nwhile ( divInt(int(4.0),abs(int(2.0))) + mod(i1,max(max(( max(i0, int(4.0)) - i1 ), min(int(1.0), int(8.0))), ( i0 * int(0.0) ))) ) != abs(i0):{:\\nin0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = True\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 15, 15, 3, 2, 0, 4, 3, 1, 1, 0, 17, 2, 55, 12, 13, 7, 5]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0], [1], [1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 3, 5, 6, 8, 6, 1, 0, 4, 2, 7, 1, 3, 6, 0, 7, 8, 3, 8, 8, 4, 1, 4, 6, 3, 1, 4, 5, 5, 4, 0, 0, 2, 3, 6], [4, 5], [1, 1, 1, 1], [], [1, 0, 0, 1], [0, 0], [1, 0], [1], [], [5, 5, 1, 6, 6, 4, 3, 6, 5, 6, 1, 6, 6, 6, 2, 0, 6, 6, 1, 2, 1, 5, 4, 0, 4, 0, 4, 6, 6, 4, 0, 4, 5, 2, 1, 5, 0, 4, 4, 1, 0], [0, 1], [3, 0, 3, 0, 0, 3, 1, 3, 0, 2, 0, 2, 1, 3, 1, 2, 2, 0, 3, 2, 2, 2, 0, 2, 2, 1, 1, 1, 3, 2, 3, 3, 3, 2, 1, 0, 2, 2, 3, 0, 0, 1, 3, 0, 1, 1, 0, 2, 2, 2, 3, 0, 2, 3, 0, 3, 2, 1, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2, 3, 0, 0, 0, 0, 2, 3, 1, 2, 3, 3, 2, 0, 1, 2, 3, 3, 1, 3, 3, 0, 3, 3, 1, 3, 0, 2, 3, 3, 0, 2, 2, 3, 0, 2, 3, 0, 3, 1, 1, 1, 3, 2, 2, 3, 1, 0, 1, 3, 3, 1, 1, 1, 2, 3, 3, 1, 3, 2, 0, 1, 0, 1, 2, 3, 0, 1, 1, 2, 2, 0, 0, 3, 1, 3, 2, 3, 0, 1, 3, 0, 2, 1, 3, 3, 3, 3, 3, 1, 0, 2, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 2, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 0, 2, 1, 2, 0, 2, 1, 0, 0, 2, 2, 2, 0], [0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 2, 1, 1, 2, 1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = min(in2, abs(i1))\\nloopBreak% = 0\\nwhile res0 \\le min(int(2.0), abs(res0)):{:\\nb1 = False\\nin1 += divInt(in0,( int(8.0) * abs(int(3.0)) ))\\nb1 = b1\\nb1 = ( ( res0 * abs(mod(mod(( in2 * mod(divInt(int(5.0),int(6.0)),int(8.0)) ),max(( max(min(max(mod(int(6.0),res0), mod(( min(i1, res0) + int(1.0) ),abs(res0))), int(0.0)), int(4.0)) - res0 ), mod(( divInt(max(i2, ( min(i0, max(divInt(int(2.0),res0), res0)) - ( int(7.0) + int(1.0) ) )),i1) - int(3.0) ),divInt(i2,divInt(min(i1, in2),in1))))),i0)) ) * ( min(int(6.0), divInt(min(abs(mod(in1,int(0.0))), ( max(max(int(7.0), min(abs(i0), abs(max(int(8.0), abs(in1))))), ( abs(max(res0, mod(( max(res0, ( max(in1, abs(int(3.0))) * int(8.0) )) - int(8.0) ),max(divInt(mod(max(int(4.0), i0),int(1.0)),max(abs(int(4.0)), int(6.0))), int(3.0))))) - divInt(min(abs(int(1.0)), max(( in1 * int(4.0) ), in2)),int(5.0)) )) - ( abs(i2) + int(5.0) ) )),int(4.0))) + ( ( i1 - in2 ) + min(int(0.0), abs(( max(i0, int(0.0)) - min(in1, divInt(int(2.0),min(abs(abs(abs(min(int(3.0), in1)))), mod(i1,int(6.0))))) ))) ) ) ) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 36, 36, 2, 4, 0, 4, 2, 2, 1, 0, 41, 2, 162, 39, 48, 20, 20]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1, 1, 1, 1], [9, 5, 7, 3, 8, 5], [4], [1], [], [1], [0], [], [], [], [4, 0, 0, 5, 3, 6], [0], [0, 2, 2, 2, 3, 1, 1, 2, 3, 0, 1, 1, 0, 0, 3, 2, 1, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0], [1, 0, 0, 0, 1], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = i0\\nb1 = ( ( ( min(int(9.0), int(5.0)) - ( max(i0, int(7.0)) + int(3.0) ) ) + in2 ) + in0 ) \\le min(( int(8.0) - res0 ), int(5.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 6, 1, 19, 5, 3, 5, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 2, 1, 0, 2, 0, 0, 0, 2, 2, 1, 1, 0], [1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 7, 8, 0, 0, 6, 4, 7, 4, 1, 1, 4, 7, 1, 1, 2, 0, 9, 0, 8, 0, 8, 6, 9, 2, 9, 0, 7, 0, 4, 6, 3, 7, 9, 3, 1, 1, 5, 5, 2, 4, 1, 1, 1, 9, 5, 0, 2, 9, 0, 1, 7], [2, 4, 2, 4, 4, 2], [1, 2, 2, 2], [0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 1, 1, 1], [1, 1, 0], [1, 1], [1, 6, 3, 2, 6, 0, 4, 6, 2, 3, 0, 3, 3, 6, 5, 1, 5, 1, 3, 5, 2, 0, 6, 2, 0, 4, 4, 1, 5, 6, 1, 5, 5, 3, 4, 3, 1, 6, 6, 4, 6, 4, 4, 5, 4, 1, 6, 0, 0, 3, 4, 3, 5, 4, 6, 6, 5, 4, 1, 0, 2, 0, 5, 5, 5, 0, 5, 1, 6], [1, 1, 0, 1, 0, 0], [3, 1, 2, 2, 2, 2, 1, 0, 1, 2, 0, 2, 1, 1, 1, 0, 0, 0, 2, 1, 0, 1, 1, 0, 0, 3, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 1, 1, 2, 3, 2, 1, 3, 0, 2, 3, 1, 0, 0, 0, 2, 1, 2, 1, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 3, 3, 0, 2, 2, 3, 2, 0, 3, 3, 1, 2, 3, 3, 2, 2, 1, 3, 1, 2, 3, 3, 2, 2, 3, 0, 2, 0, 0, 0, 1, 2, 3, 0, 2, 2, 3, 2, 1, 3, 2, 2, 3, 0, 3, 2, 1, 2, 1, 3, 1, 1, 0, 3, 0, 1, 0, 1, 3, 2, 0, 2, 3, 1, 0, 1, 2, 2, 1, 0, 3, 1, 2, 2, 1, 0, 0, 0, 2, 0, 2, 3, 2, 2, 0, 1, 0, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 3, 0, 3, 1, 3, 3, 3, 2, 1, 3, 0, 3, 0, 2, 0, 3, 0, 3, 0, 0, 1, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 3, 0, 3, 1, 3, 0, 2, 1, 2, 3, 0, 3, 3, 1, 0, 2, 2, 2, 1, 0, 3, 3, 0, 0, 0, 3, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1, 3, 3, 3, 3, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 1, 2, 1, 0, 0, 0, 2, 1, 2, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0, 2, 2, 0, 2, 1, 0, 2, 0, 0, 1, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 2], [2, 2, 1, 2, 2, 1, 1, 0, 2, 0, 2, 1, 2, 1, 2, 0, 0, 1, 1, 0, 0, 2, 1, 0, 2, 1, 2, 1, 2, 2, 0, 0, 2], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 84, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( ( ( max(int(6.0), mod(( ( divInt(int(4.0),i1) * int(7.0) ) * ( res0 - ( int(8.0) * int(0.0) ) ) ),int(0.0))) == in0 and i2 \\le res0 ) or ( int(6.0) * i0 ) == int(4.0) ) or b2 )\\nloopBreak% = 0\\nwhile False:{:\\nin1 -= int(7.0)\\nb2 = res0 \\le i2\\nif False:{:\\nin0 -= max(int(4.0), int(1.0))\\n:}else:{:\\ni0 = int(1.0)\\n:}\\nb2 = in0 \\le ( in0 + res0 )\\nloopBreak% = 0\\nwhile in2 == i1:{:\\nif True:{:\\nin2 *= divInt(int(4.0),int(7.0))\\n:}else:{:\\ni1 = ( abs(( int(1.0) + max(in0, divInt(min(int(1.0), in2),i2)) )) * i0 )\\n:}\\nres0 = mod(int(2.0),mod(int(0.0),mod(mod(i2,( i0 - divInt(divInt(in1,mod(in1,min(min(i1, ( mod(abs(( in2 * max(abs(int(9.0)), mod(abs(min(divInt(divInt(int(0.0),abs(int(8.0))),( min(min(( ( abs(res0) - ( i1 * in2 ) ) + in2 ), int(0.0)), divInt(max(in0, ( ( abs(( int(8.0) + max(divInt(( max(in1, abs(mod(int(6.0),divInt(int(9.0),max(int(2.0), int(9.0)))))) - in0 ),max(i1, int(0.0))), res0) )) - int(7.0) ) + max(( res0 + divInt(max(int(0.0), in1),int(4.0)) ), mod(divInt(int(6.0),res0),abs(int(3.0)))) )),divInt(( int(7.0) * in1 ),in1))) - in2 )), ( in1 + mod(min(divInt(( i1 * int(9.0) ),res0), ( divInt(mod(int(3.0),int(1.0)),mod(int(1.0),( i0 - ( min(i0, abs(int(5.0))) * abs(min(abs(( int(5.0) - max(in0, min(in1, divInt(in0,abs(in2)))) )), min(in1, res0))) ) ))) * int(2.0) )),int(4.0)) ))),res0)) )),min(in2, int(1.0))) * max(int(1.0), int(1.0)) )), abs(min(min(in1, min(int(9.0), abs(i1))), ( int(5.0) + divInt(min(i0, abs(min(int(0.0), i2))),( divInt(( int(2.0) + i0 ),abs(min(in2, in2))) * in2 )) )))))),min(mod(i0,divInt(int(9.0),int(0.0))), divInt(in2,i1))) )),mod(int(1.0),abs(max(abs(abs(res0)), int(7.0)))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 4, 9, 53, 53, 6, 4, 3, 13, 6, 7, 3, 2, 69, 6, 234, 65, 53, 33, 35]}, {"genotype": [[0], [1], [0], [], [0], [1, 0, 1], [0, 5, 7], [2], [0], [], [1], [0], [], [], [], [3], [], [3, 0, 1, 1], [], [1], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(in0, int(0.0)) == int(57.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [6], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1], [9, 8, 8], [], [0], [], [0], [], [1], [0], [], [3, 1], [0], [2, 3, 3, 2, 1, 1, 1, 0], [0, 1], [0, 2], [2], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( min(abs(divInt(int(9.0),int(8.0))), int(8.0)) * i1 )\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 8, 2, 2, 1, 1]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0], [1, 0, 0], [1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 2, 9, 3, 3, 6, 4, 2, 2, 4, 0, 8, 9, 3, 5, 4], [1, 5, 5, 2, 4, 2, 4], [2, 0, 2], [1], [1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3], [], [1, 0], [6, 2, 6, 0, 5, 0, 1, 0, 6, 2, 0, 3, 4, 6, 6, 4, 2, 2, 2, 6, 0, 5, 2, 4, 6, 0, 6, 0, 6, 6, 5, 5, 4, 0, 1, 4, 2, 3, 6, 3, 2], [1, 0, 1, 0], [0, 3, 3, 1, 2, 3, 0, 3, 0, 2, 2, 1, 0, 3, 2, 0, 1, 2, 2, 3, 3, 1, 2, 0, 3, 3, 0, 0, 0, 3, 0, 3, 3, 3, 0, 0, 3, 0, 2, 3, 3, 1, 2, 0, 0, 3, 1, 1, 0, 0, 1, 0, 3, 2, 1, 0, 3, 2, 0, 3, 0, 0, 0, 0, 3, 0, 2, 2, 1, 1, 0, 1, 0, 0, 3, 0, 0, 1, 1, 0, 2, 1, 0, 2, 0, 3, 2, 2, 3, 2, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 1, 1, 2, 2, 2, 0, 1, 2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 1, 0], [0, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 0], [0, 0, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += i2\\nloopBreak% = 0\\nwhile max(max(int(4.0), divInt(min(res0, max(i0, ( divInt(int(3.0),in2) * max(( i0 + int(2.0) ), ( ( max(abs(int(9.0)), ( i1 + abs(abs(i0)) )) * res0 ) + i2 )) ))),min(i0, max(abs(min(in0, in1)), min(res0, divInt(max(min(int(3.0), mod(res0,in1)), min(int(3.0), int(6.0))),i2)))))), i2) \\g int(4.0):{:\\nif i2 != abs(mod(int(2.0),res0)):{:\\nb2 = min(( i0 + abs(in2) ), i2) != in1\\n:}else:{:\\nb0 = res0 == min(i0, divInt(( int(2.0) - int(4.0) ),res0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(0.0) \\le i0:{:\\nres0 = res0\\nin2 -= min(in2, in1)\\ni0 = int(8.0)\\nb2 = ( int(9.0) == i1 or ( int(3.0) * in1 ) \\le mod(i2,max(( ( min(divInt(in0,int(5.0)), res0) * in0 ) + i2 ), int(4.0))) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 17, 17, 7, 3, 1, 8, 7, 1, 0, 2, 41, 4, 96, 18, 24, 12, 8]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 0, 2, 2, 0, 1, 1, 0, 1], [0, 1, 1], [0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [5, 4, 7, 5, 5, 9, 4, 1, 5, 0, 8, 6, 9, 8], [3, 2, 1, 3, 0, 4], [1, 1, 0, 1, 0, 2, 0], [0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [3, 0, 1, 0, 0, 3, 3], [0], [0], [1, 2, 6, 4, 4, 1, 4, 3, 3, 2, 4, 3, 4, 4, 1, 1, 3, 1, 2, 5, 2, 5, 3, 4], [1, 0], [3, 3, 2, 1, 0, 3, 0, 1, 0, 2, 2, 3, 1, 2, 0, 2, 0, 3, 2, 3, 3, 3, 0, 3, 0, 1, 2, 2, 2, 0, 2, 0, 1, 1, 0, 3, 2, 3, 3, 0, 2, 0, 1, 0, 2, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 3, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [2, 2, 0, 0, 0, 1, 2, 0, 0, 2, 2, 2, 0, 1], [0, 2, 2, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( b1 and True ):{:\\nb1 = b0\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile abs(abs(mod(int(5.0),i1))) \\ge min(i2, int(4.0)):{:\\nres0 += in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( divInt(min(int(7.0), mod(in1,divInt(i1,min(divInt(max(abs(min(in1, min(in0, int(5.0)))), divInt(( ( in0 * mod(i2,int(5.0)) ) * int(9.0) ),in1)),abs(divInt(abs(abs(in0)),divInt(in1,int(4.0))))), in1)))),divInt(i1,i1)) + int(1.0) ) == min(in0, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( ( i2 \\g in2 and i2 \\ge int(5.0) ) or int(0.0) \\l int(8.0) )\\nin2 = in0\\nb0 = int(69.0) \\le max(in1, int(8.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 14, 14, 6, 7, 3, 13, 6, 7, 1, 1, 24, 2, 62, 13, 14, 4, 10]}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 1], [1, 1], [0, 1], [], [], [5], [0, 1], [], [1, 0, 0], [0], [0, 1], [0], [], [0, 6, 2, 6], [0], [0, 0, 0], [], [], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 != res0:{:\\nb0 = b1\\nloopBreak% = 0\\nwhile True:{:\\ni2 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 1, 2, 0, 3, 1, 2, 1, 0, 4, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 7, 4, 6, 5, 7, 2, 9, 9, 5, 2, 0, 5, 8, 5, 3, 5, 0, 9, 9, 6, 1, 1, 1, 3, 7, 7, 0], [3, 5], [0, 1], [], [1, 1], [0, 0], [], [], [], [3, 5, 6, 6, 4, 0, 0, 2, 4, 6, 3, 4, 3, 3, 1, 3, 5, 1, 2, 4, 4, 1, 6, 5, 0], [1], [3, 1, 2, 3, 2, 1, 0, 2, 2, 1, 3, 0, 0, 2, 1, 0, 2, 3, 1, 1, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 3, 2, 2, 3, 0, 0, 3, 2, 3, 1, 3, 3, 3, 3, 2, 3, 0, 2, 2, 1, 2, 2, 3, 0, 3, 3, 1, 1, 3, 2, 1, 0, 0, 0, 3, 0, 3, 0, 1, 0, 0, 2, 3, 1, 1, 1, 0, 3, 2, 3, 2, 2, 3, 3, 0, 2, 0, 3, 1, 3, 1, 3, 1, 1, 1, 1, 2, 1, 1, 3, 2, 3, 0, 1, 3, 0, 2, 0, 3, 1, 1], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 2, 1, 2, 1, 0, 2, 0, 1, 1, 2, 1, 2, 0, 1, 2, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 0, 0], [0, 1, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(1.0), mod(min(( int(2.0) + in0 ), ( divInt(int(7.0),min(in2, res0)) - mod(int(4.0),res0) )),divInt(max(int(6.0), int(5.0)),mod(mod(( mod(in1,i0) + i0 ),int(7.0)),int(2.0))))) \\ge int(9.0)\\ni2 += abs(( divInt(max(in1, res0),abs(( max(int(9.0), min(abs(min(max(( max(in0, divInt(( int(5.0) + ( divInt(abs(in1),max(abs(int(2.0)), int(0.0))) - min(mod(int(5.0),in0), in0) ) ),i1)) - max(in0, abs(in2)) ), int(8.0)), i1)), i2)) * ( max(int(5.0), int(3.0)) + int(5.0) ) ))) + in1 ))\\nb1 = max(divInt(abs(mod(divInt(min(min(in1, ( i1 + abs(int(0.0)) )), abs(int(9.0))),max(int(9.0), int(6.0))),int(1.0))),int(1.0)), ( int(1.0) - int(3.0) )) != min(mod(abs(res0),int(7.0)), min(in2, ( i0 - min(int(7.0), int(0.0)) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 29, 29, 2, 2, 0, 2, 2, 0, 0, 0, 25, 1, 111, 27, 31, 13, 15]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 0, 1], [9, 7, 0, 3, 6, 8, 4, 6], [], [], [], [], [], [], [], [], [4, 0, 6, 5, 1], [0, 0], [2, 3, 3, 1, 2, 3, 2, 1, 0, 1, 3, 1, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 0], [2, 1, 1], [1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( min(max(int(9.0), ( max(( int(7.0) * i0 ), int(0.0)) - min(int(3.0), int(6.0)) )), int(8.0)) - mod(res0,in2) )\\ni1 = int(46.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 18, 4, 4, 3, 1]}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 0, 1, 0], [0], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 8, 3, 6, 6, 1, 2, 5, 4, 3, 5, 2, 7, 6, 9, 7, 1, 7, 2, 0, 3, 7], [4, 4, 0], [1, 0, 1, 2], [], [1, 0, 1, 0, 1], [0, 0, 0], [2, 0], [], [0], [2, 1, 4, 0, 6, 6, 4, 1, 1, 0, 6, 1, 5, 1, 3, 6, 1, 2, 6, 6, 6, 6], [1], [1, 3, 3, 3, 1, 3, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 0, 3, 3, 2, 2, 2, 3, 0, 2, 1, 0, 3, 0, 0, 0, 0, 2, 2, 1, 1, 2, 3, 0, 3, 1, 2, 1, 1, 0, 1, 2, 0, 2, 2, 1, 2, 2, 3, 1, 1, 0, 3, 1, 3, 3, 0, 1, 1, 3, 3, 3, 3, 2, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 2, 0, 3, 2, 3, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2], [0, 0, 0, 1, 1, 0, 2, 1, 2, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) \\le min(min(min(int(6.0), max(int(8.0), i2)), i1), ( in1 + int(3.0) )):{:\\ni0 += mod(divInt(res0,( mod(res0,max(max(mod(( ( max(in1, ( int(6.0) + i1 )) - max(i1, i0) ) - res0 ),i1), ( divInt(int(6.0),int(1.0)) + mod(abs(in2),abs(int(2.0))) )), mod(int(5.0),int(4.0)))) * i1 )),int(3.0))\\nb1 = not ( in0 - ( ( int(5.0) * ( ( min(int(2.0), int(7.0)) - res0 ) - min(int(6.0), max(abs(i1), int(9.0))) ) ) + int(7.0) ) ) \\le max(abs(min(min(mod(int(1.0),int(7.0)), int(2.0)), int(0.0))), i2)\\n:}\\nb0 = b1\\nb2 = res0 \\l max(abs(abs(min(mod(res0,abs(mod(abs(res0),int(3.0)))), int(7.0)))), res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 23, 23, 3, 4, 0, 5, 3, 2, 0, 1, 22, 1, 89, 21, 24, 12, 10]}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 0, 2, 1, 0, 1, 0, 1], [1, 1, 0], [0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 9, 6, 2, 4, 6, 0, 9, 8, 7, 4], [0, 4, 3, 1], [1, 2, 1, 0], [], [0, 1, 1, 1, 0, 1], [0, 0, 0, 0], [0, 1], [0], [1], [6, 1, 4, 2, 2, 1, 4, 2, 2, 6, 5, 6, 1], [1, 0, 1], [0, 0, 2, 2, 0, 0, 2, 1, 1, 2, 3, 0, 0, 1, 1, 1, 2, 3, 1, 0, 2, 1, 1, 2, 0, 2, 3, 0, 0, 1, 3, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 2], [2, 0, 2, 1, 1, 2, 1, 2], [0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile res0 \\l i1:{:\\nb2 = ( divInt(in1,i2) * ( int(4.0) + int(3.0) ) ) \\le ( max(i2, i1) * int(9.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(6.0) \\ge int(2.0):{:\\nin1 -= ( max(int(4.0), i2) - divInt(int(6.0),int(0.0)) )\\n:}else:{:\\ni2 = ( res0 * ( max(in2, res0) - int(9.0) ) )\\n:}\\nb1 = True\\nb0 = abs(int(8.0)) \\g int(7.0)\\ni1 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 12, 12, 4, 4, 0, 6, 4, 2, 1, 1, 13, 3, 34, 8, 4, 8, 2]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1], [6, 8, 7, 5, 5, 3], [0], [2, 1], [1], [0, 0, 1], [0], [3, 0], [], [], [5, 6, 2, 6, 3], [], [3, 0, 3, 2, 2, 1, 2, 3, 0, 0, 3, 2, 1, 3, 2, 3, 0, 1, 3, 3, 1, 1, 1, 0], [0, 1, 1, 1, 1], [0, 2, 0, 2, 0, 0, 2, 2], [1], [1, 0, 0, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( b1 or min(in2, abs(( mod(int(6.0),divInt(min(res0, i2),abs(divInt(int(8.0),min(mod(min(res0, int(7.0)),abs(abs(int(5.0)))), int(5.0)))))) - int(3.0) ))) \\l in0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 1, 2, 1, 3, 1, 2, 0, 0, 5, 0, 24, 5, 8, 1, 4]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 1, 3, 2, 2, 0, 3, 4, 2, 6, 2, 0, 0, 5, 5, 3, 0, 8, 9, 1, 9, 8, 3, 5, 4, 5, 1, 1, 0, 0, 3, 9, 0, 7, 4, 0, 9, 3, 2, 4, 9, 3, 8, 7, 6, 1, 3, 9, 3, 4, 8, 8, 4, 7, 3, 4, 7, 5, 7, 4, 5, 7, 2, 7], [], [], [], [], [], [], [], [], [3, 3, 4, 5, 2, 0, 0, 5, 1, 5, 2, 1, 3, 2, 4, 6, 2, 0, 3, 3, 2, 4, 3, 3, 0, 3, 3, 0, 3, 2, 2, 3, 6, 2, 0, 5, 2, 4, 0, 3, 6, 1, 3, 6, 3, 1], [0, 1], [2, 1, 3, 2, 3, 3, 2, 1, 0, 2, 2, 1, 1, 2, 2, 1, 3, 1, 3, 3, 2, 1, 0, 3, 1, 1, 3, 1, 2, 0, 3, 2, 0, 1, 0, 2, 2, 0, 3, 2, 1, 1, 0, 1, 2, 0, 2, 2, 1, 3, 1, 3, 2, 1, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3, 0, 2, 2, 0, 2, 2, 1, 1, 2, 0, 2, 3, 1, 2, 1, 3, 3, 2, 1, 1, 1, 3, 2, 3, 3, 3, 1, 0, 3, 3, 3, 1, 3, 3, 1, 2, 2, 1, 2, 3, 0, 0, 3, 2, 1, 1, 1, 2, 2, 2, 3, 2, 0, 2, 2, 1, 0, 1, 1, 3, 3, 0, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 3, 1, 0, 0, 2, 2, 3, 1, 0, 1, 2, 2, 3, 1, 3, 3, 1, 1, 1, 2, 0, 3, 2, 3, 3, 2, 3, 3, 2, 0, 3, 1, 0, 3, 0, 0, 0, 3, 1, 0, 1, 2, 3, 0, 2, 0, 0, 3, 2, 2, 3, 0, 0, 1, 1, 2, 1, 1, 2, 0, 0, 2, 3, 0, 0, 2, 3, 1, 1, 2, 0, 2, 3, 3, 3, 3, 1, 2, 3, 0, 0, 0, 2, 2, 1, 1, 1, 1, 3, 0, 2, 2, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 2, 2, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 0, 1, 1, 0, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 0, 2, 2, 2, 2, 0, 0, 2, 1, 0, 2, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = divInt(int(3.0),max(( abs(abs(mod(int(6.0),in0))) + ( ( int(1.0) - int(3.0) ) * mod(mod(int(2.0),abs(int(2.0))),max(max(mod(int(0.0),in1), max(int(3.0), int(4.0))), min(int(2.0), mod(in2,min(mod(i2,int(6.0)), i0))))) ) ), ( divInt(i0,max(( int(2.0) * int(0.0) ), in2)) - int(0.0) )))\\ni1 *= mod(in2,( ( int(5.0) * max(int(5.0), min(divInt(int(3.0),int(0.0)), ( min(int(8.0), int(9.0)) * int(1.0) ))) ) + mod(max(min(max(i2, ( mod(i1,divInt(( int(9.0) * int(8.0) ),( in0 - ( min(int(3.0), divInt(int(5.0),max(abs(( int(4.0) * int(5.0) )), int(1.0)))) + max(divInt(abs(max(min(int(1.0), i2), max(max(min(int(0.0), abs(max(int(0.0), ( mod(int(3.0),mod(abs(in1),res0)) + min(divInt(int(9.0),int(0.0)), int(7.0)) )))), ( mod(( abs(( i2 - ( divInt(int(4.0),i0) + int(0.0) ) )) - int(9.0) ),min(abs(in0), ( int(3.0) + ( int(2.0) * ( int(4.0) + ( ( int(9.0) * mod(min(int(3.0), in0),i2) ) - ( mod(min(int(8.0), in1),int(7.0)) - ( divInt(abs(int(6.0)),max(abs(int(1.0)), int(3.0))) + int(9.0) ) ) ) ) ) ))) + mod(in0,min(mod(abs(abs(( abs(abs(mod(in0,min(int(3.0), i0)))) + min(in0, in0) ))),i0), abs(int(4.0)))) )), in0))),int(8.0)), mod(max(i2, ( i2 + in0 )),min(divInt(divInt(abs(res0),i2),int(8.0)), int(4.0)))) ) ))) * mod(int(7.0),int(3.0)) )), mod(i0,in2)), mod(min(i2, in1),mod(max(int(4.0), int(7.0)),mod(i0,( max(max(min(max(int(5.0), ( max(in0, res0) + i1 )), ( divInt(int(7.0),int(4.0)) * int(5.0) )), int(7.0)), max(in0, mod(( res0 + in0 ),int(2.0)))) + i1 ))))),int(7.0)) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 65, 65, 0, 0, 0, 0, 0, 0, 0, 0, 46, 2, 233, 67, 57, 32, 36]}, {"genotype": [[0], [1], [1], [], [0], [0, 1], [3, 2], [4], [0], [], [1], [0], [], [], [], [6], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(32.0) \\le res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 0, 1, 0, 1, 0], [0], [0, 0, 0, 0, 0], [1, 1, 1, 1], [7, 2, 1, 7], [4, 4, 5], [0, 0, 2, 0, 1, 2, 0], [], [1, 0, 0, 0, 1, 0, 1], [0, 0, 0], [0, 2, 0, 1], [0], [1], [3, 2, 5, 3, 4, 1], [], [1, 0, 0, 1, 2, 3, 3, 3, 0, 2, 1, 3, 3, 0, 2, 3, 0, 0, 1], [0, 1, 1], [2, 2, 2, 2, 1, 2], [0], [0, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(7.0) \\le in0:{:\\nb0 = b0\\nb2 = not b0\\nb1 = i2 \\le int(2.0)\\n:}else:{:\\nb2 = True\\n:}\\nb0 = ( abs(abs(abs(in2))) + divInt(int(1.0),abs(max(in0, divInt(abs(in1),i1)))) ) != int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 4, 4, 3, 7, 0, 7, 3, 4, 1, 1, 6, 0, 19, 3, 6, 1, 2]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1], [1, 2, 2, 2, 1, 1, 0, 1], [0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 0, 4, 8, 0, 4, 3, 6, 8], [2, 1, 4, 2, 2, 0, 5], [2, 1, 2, 0, 2, 1], [0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 3, 0], [1], [1, 0], [2, 0, 0, 5, 5, 5, 1, 2], [], [0, 0, 0, 2, 1, 1, 1, 0, 3, 1, 1, 1, 2, 0, 2, 3, 0, 3, 2, 1, 3, 0, 1, 0, 1, 1], [1, 0, 0, 1], [2, 2, 2, 2], [1, 2], [1, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i2 == i0\\nif i0 \\g mod(int(9.0),int(9.0)):{:\\nloopBreak% = 0\\nwhile int(0.0) \\le in2:{:\\nif abs(int(4.0)) == int(8.0):{:\\nb1 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(0.0) == ( in2 - ( abs(in2) * abs(divInt(int(4.0),abs(i1))) ) )\\nb0 = ( b2 and int(3.0) \\l i2 )\\n:}else:{:\\nb1 = int(6.0) != int(8.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 10, 10, 7, 6, 1, 10, 7, 3, 1, 2, 8, 0, 26, 4, 4, 2, 2]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [6, 2, 9], [], [], [], [], [], [], [], [], [2], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(629.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 1, 5, 4, 5, 1, 3, 0, 4, 7, 6, 0, 6], [0, 3, 1, 3, 1, 2, 1], [1, 2, 2, 0, 0, 2], [0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 3, 2], [0], [1, 0, 0, 0, 0], [5, 4, 0, 4, 3, 5, 3, 5, 1, 0, 2, 6, 3, 5, 2, 1, 6, 0, 6], [0, 0, 0], [0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 0, 2, 1, 0, 3, 3, 0, 3, 2, 1, 2, 2, 0, 0, 2, 1, 1, 3, 0, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 3, 2, 1, 1, 1, 3, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 2, 2, 0, 2], [1, 2, 1, 2, 2], [1, 1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb1 = b2\\n:}else:{:\\nb2 = in2 \\l int(9.0)\\nif in1 \\ge i0:{:\\nif b0:{:\\nin1 = mod(in0,in2)\\n:}\\n:}\\nif int(0.0) \\g int(1.0):{:\\nb0 = in0 \\ge in2\\n:}\\n:}\\nif ( ( int(5.0) - i1 ) \\g max(min(i0, min(mod(int(4.0),( ( i2 * res0 ) - ( int(5.0) * int(1.0) ) )), abs(in0))), int(3.0)) and int(0.0) == divInt(abs(mod(in2,int(4.0))),int(7.0)) ):{:\\ni2 = i1\\nb2 = not res0 \\g min(( int(6.0) * int(0.0) ), int(6.0))\\ni0 = abs(res0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 14, 14, 7, 6, 1, 12, 7, 5, 1, 5, 19, 3, 46, 9, 7, 5, 4]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1], [0, 9, 6, 8], [], [], [], [], [], [], [], [], [4], [0], [2, 2, 1, 2, 1, 1, 1], [0, 1, 1], [], [1], [1, 1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( mod(int(0.0),mod(int(9.0),int(6.0))) - int(8.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 7, 3, 0, 1, 2]}, {"genotype": [[0], [1], [1], [], [1], [1], [3], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1], [9], [], [1, 1], [], [0], [], [0], [], [], [1, 6], [1], [2, 1, 0], [0], [], [1, 2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= ( int(9.0) * res0 )\\nb1 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 0]}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1], [2, 1, 2, 2, 1, 0, 1, 0], [1, 0, 0], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 4, 2, 0, 9, 5, 7, 9, 8, 5, 2, 1, 2, 8, 4, 2, 2, 4, 9], [2, 0, 2], [1, 0, 2], [1], [0, 1, 0, 0, 1, 1], [0, 0, 0], [0, 0, 3], [], [1, 1], [1, 3, 4, 0, 4, 2, 4, 0, 5, 6, 3, 1, 1, 2, 2, 3, 4, 5, 6, 6], [0, 0, 0, 1], [0, 1, 1, 3, 1, 0, 3, 1, 2, 1, 2, 3, 2, 1, 1, 3, 3, 2, 0, 2, 2, 1, 3, 1, 3, 3, 0, 1, 0, 1, 2, 0, 2, 1, 3, 3, 3, 0, 0, 2, 2, 1, 3, 0, 3, 2, 0, 0, 1, 2, 1, 1, 3, 1, 0, 3, 3, 0, 1, 0, 3, 1, 2, 0, 3, 3, 1, 0], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 2, 1, 1, 0, 0, 2, 0, 1, 2, 1, 2, 1, 1, 2, 1, 0, 2], [1, 2, 2, 0, 2, 0], [0, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\ni1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(9.0) == int(3.0):{:\\nif b0:{:\\nin1 = max(int(4.0), i0)\\n:}else:{:\\nb2 = ( max(int(2.0), divInt(int(0.0),mod(abs(divInt(int(9.0),int(5.0))),max(max(( in1 - divInt(( int(7.0) * min(int(9.0), min(abs(i2), int(8.0))) ),in1) ), int(5.0)), divInt(i0,mod(int(2.0),min(max(abs(in2), res0), divInt(divInt(int(1.0),max(in0, abs(( i1 * i1 )))),int(2.0))))))))) \\l ( int(8.0) + int(4.0) ) or max(int(2.0), i2) == max(abs(i2), int(2.0)) )\\n:}\\nin0 = in1\\n:}else:{:\\nin2 *= max(int(4.0), ( res0 + min(abs(int(9.0)), res0) ))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 20, 20, 3, 3, 1, 6, 3, 3, 0, 2, 20, 4, 68, 13, 19, 6, 8]}, {"genotype": [[0], [1], [0], [], [1], [1], [9], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 0, 1], [0, 0, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 0, 9, 0, 2, 0, 3, 6, 0, 2], [5, 0, 5, 4], [1], [0], [1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0], [2, 1, 3, 2], [0], [0, 1], [3, 4, 6, 2, 4, 5, 3, 1, 2, 3, 1, 3, 0, 3, 5, 3, 5, 0], [1], [0, 1, 2, 1, 2, 0, 3, 1, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 2, 3, 0, 3, 3, 1, 2, 0, 2, 2, 3, 0, 3, 3, 2, 0, 1, 3, 3, 0, 3, 1, 3, 3, 0, 0, 1, 3, 0, 1, 2, 1, 3, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 2, 0, 2, 0, 1, 0, 0, 0, 2, 0, 2, 2, 0, 2], [2, 2, 1, 2, 0], [1, 0, 0, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in0 != int(6.0):{:\\nif mod(int(2.0),divInt(in1,max(int(0.0), max(res0, i2)))) \\l in1:{:\\nloopBreak% = 0\\nwhile not True:{:\\nb1 = ( not in2 != in0 and i1 \\le min(i2, abs(divInt(min(in0, abs(min(int(9.0), ( i1 * ( ( max(in0, min(min(( i0 * int(0.0) ), min(abs(in0), min(int(2.0), abs(abs(in2))))), in0)) - int(0.0) ) * min(in2, int(3.0)) ) )))),divInt(int(6.0),abs(int(0.0)))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 += int(2.0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 11, 11, 4, 1, 1, 8, 4, 4, 1, 2, 18, 1, 53, 8, 17, 5, 4]}, {"genotype": [[0], [1], [1], [], [0], [0, 1], [9, 9], [0], [0], [], [1], [0], [], [], [], [4], [], [1, 3, 3, 0], [], [2, 2], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(99.0) \\l abs(abs(in1))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 0, 2, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [1, 1, 1, 1, 1, 1], [6, 6, 8, 5, 2, 2], [4], [2], [], [0, 0, 1], [0], [2, 2], [], [], [2], [1], [2, 1, 3, 1, 3, 1, 2, 1, 1, 3, 1], [1, 0], [2, 0, 2], [0, 0], [0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += divInt(int(6.0),abs(int(6.0)))\\nb2 = not not min(int(8.0), ( int(5.0) + int(2.0) )) \\le abs(int(2.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 1, 1, 0, 3, 1, 2, 0, 0, 1, 1, 11, 2, 3, 2, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 4], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [5, 3], [1], [3, 3, 3, 0, 1], [], [1, 2, 2], [0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += max(abs(abs(in0)), int(8.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 5, 0, 3, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1], [3, 1, 1], [2], [2], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(31.0) == int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [0, 2, 2, 1, 2, 1], [1, 0, 0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 7, 0, 3, 6, 5, 7], [3, 2, 0], [0], [0], [1, 0, 1, 0, 1], [0, 0, 0], [3, 0], [], [1, 0], [4, 0, 6, 0, 0, 1, 3, 4, 0, 4, 2, 1, 1, 0, 0, 4, 4, 4], [0, 0, 0], [2, 0, 0, 0, 0, 0, 2, 3, 0, 3, 2, 0, 1, 1, 3, 2, 0, 0, 0, 3, 0, 3, 3, 1, 1, 0, 3, 3, 3, 0, 0, 3, 2, 2, 1, 3, 2, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0], [2, 2, 0, 1, 0, 0, 2, 0, 0, 1, 2], [1, 2, 1], [1, 1, 0, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = mod(i0,res0)\\nloopBreak% = 0\\nwhile i0 \\ge i0:{:\\nif ( i1 == mod(abs(in0),abs(divInt(in1,int(6.0)))) and b0 ):{:\\ni0 = int(9.0)\\n:}else:{:\\nif min(( in1 - i2 ), i1) \\l max(i1, min(min(int(7.0), int(0.0)), i0)):{:\\ni0 = abs(min(min(in1, in1), max(( mod(int(3.0),abs(( in1 * int(6.0) ))) - int(5.0) ), int(7.0))))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 8, 8, 3, 1, 1, 5, 3, 2, 0, 2, 18, 3, 41, 7, 11, 3, 4]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1], [7, 5, 1, 7, 3, 0, 0], [3], [0], [], [1], [0], [], [], [], [4, 1], [], [3, 0, 2, 3, 3, 1, 1, 3, 2, 1, 2, 1, 1, 1, 0, 1], [1, 0, 1], [1, 1, 1, 1], [1], [0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(in1, divInt(max(max(int(7.0), int(5.0)), max(( int(1.0) - mod(int(7.0),int(3.0)) ), int(0.0))),i1)) \\ge int(0.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 16, 3, 4, 1, 2]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [0, 2, 0, 0, 2, 1], [1, 1], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 1, 2, 9, 5, 9, 2, 1, 2, 9, 5, 6, 4, 9, 9, 0, 5, 4, 0, 8, 5, 6, 8, 9, 5, 3, 4, 8, 9, 6, 4], [2, 2, 1], [1, 2], [], [0, 1, 1, 1], [0, 0, 0], [1], [0], [], [6, 5, 5, 0, 0, 6, 3, 6, 4, 0, 0, 1, 1, 3, 1, 3, 6, 3, 2, 2, 4, 1, 6, 5, 4, 1, 3, 2, 3, 1, 5, 1, 4, 4, 1, 3], [0, 0], [3, 2, 1, 2, 1, 3, 2, 0, 0, 3, 1, 0, 3, 1, 0, 1, 2, 2, 3, 1, 1, 0, 0, 3, 3, 3, 2, 2, 2, 0, 3, 1, 3, 3, 3, 3, 3, 1, 0, 2, 1, 0, 2, 1, 3, 3, 1, 0, 2, 2, 2, 3, 3, 2, 0, 0, 2, 0, 0, 3, 2, 2, 2, 2, 2, 0, 1, 3, 2, 1, 3, 0, 0, 0, 0, 0, 3, 1, 0, 3, 2, 2, 2, 1, 3, 2, 1, 0, 1, 1, 0, 0, 3, 1, 1, 1, 3, 0, 2, 0, 0, 2, 1, 1, 0, 3, 3, 2, 1, 0, 3, 3, 2, 1, 0, 1, 2, 3, 3, 0, 1, 2, 1, 3, 3, 1, 3, 0, 3, 2, 3, 1, 0, 2, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1, 1, 2, 2, 0, 0, 1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 2, 0, 2, 0, 2, 2], [0, 0, 1, 1, 0, 0, 1, 0, 2, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\nloopBreak% = 0\\nwhile abs(( int(0.0) + divInt(int(9.0),max(( res0 + in2 ), max(int(1.0), in2))) )) == abs(int(2.0)):{:\\nb2 = i0 == int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( mod(abs(int(5.0)),int(9.0)) - res0 )\\nloopBreak% = 0\\nwhile in0 \\g min(min(max(divInt(mod(( res0 - min(int(2.0), min(max(max(max(abs(int(1.0)), in1), divInt(int(2.0),i0)), divInt(int(9.0),abs(abs(int(5.0))))), i0)) ),( ( ( min(max(mod(i1,i1), divInt(in0,i1)), max(mod(mod(( ( divInt(in0,int(6.0)) + min(divInt(int(4.0),abs(res0)), in0) ) + i2 ),i2),in1), max(int(9.0), i1))) - min(( ( ( int(9.0) + max(divInt(int(0.0),res0), int(5.0)) ) * int(4.0) ) * in2 ), in1) ) + min(int(0.0), int(8.0)) ) - int(5.0) )),max(i1, ( in0 * i2 ))), mod(int(6.0),int(8.0))), in0), abs(max(( int(9.0) - i1 ), min(max(( int(5.0) * in2 ), int(3.0)), ( min(abs(i1), int(4.0)) - mod(int(8.0),min(abs(int(9.0)), min(in1, abs(divInt(abs(int(6.0)),in1))))) ))))):{:\\ni1 = ( in0 + int(4.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 32, 32, 3, 2, 0, 4, 3, 1, 1, 0, 36, 2, 136, 33, 37, 17, 16]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 0], [0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 8, 6, 9, 7, 7, 0, 2, 9, 3, 4, 1, 9, 4, 1, 4, 0, 5, 6, 3, 9, 4, 1, 5, 0, 9, 8, 2, 0, 8, 9, 7, 3, 2, 0, 1, 6, 1, 4, 4, 2, 5, 8, 7, 5, 7, 8, 9, 8, 6, 1, 7, 0, 1, 4, 1, 5, 6, 1, 8, 3, 3, 7, 2, 4, 2, 2, 9, 3, 6, 0, 7, 9, 8, 6, 8, 3, 0, 4, 6, 5, 9, 8, 1, 8, 1, 6, 3, 4, 6, 6, 5, 9, 4, 1, 0, 7, 2, 1, 9, 6, 3, 7, 9, 4, 2, 3, 4, 9], [3, 2, 0, 0, 3, 2], [1, 1, 1, 2, 1, 1, 0, 1], [0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [2, 1, 1, 1, 3, 2, 2, 0, 1, 3, 0, 3, 1], [1, 1, 1, 1, 0], [0, 1], [3, 5, 1, 5, 4, 6, 6, 4, 4, 5, 2, 2, 4, 1, 6, 6, 0, 6, 2, 5, 2, 2, 6, 2, 5, 5, 6, 5, 6, 5, 2, 1, 2, 4, 3, 4, 6, 5, 0, 6, 5, 5, 2, 4, 0, 2, 5, 6, 6, 0, 1, 4, 1, 5, 2, 0, 4, 4, 3, 3, 1, 3, 4, 1, 6, 6, 1, 6, 0, 3, 0, 3, 5, 1, 6, 3, 4, 6, 0, 6, 6, 6, 6, 3, 3, 5, 5, 5, 1, 6, 3, 4, 1], [1, 0], [0, 3, 1, 0, 1, 2, 1, 2, 3, 1, 2, 2, 1, 2, 0, 3, 0, 0, 1, 1, 3, 3, 1, 1, 1, 3, 1, 1, 2, 3, 1, 2, 3, 1, 1, 3, 2, 2, 0, 3, 2, 3, 2, 1, 1, 0, 1, 2, 3, 0, 3, 0, 2, 2, 0, 0, 0, 3, 0, 0, 1, 2, 2, 3, 3, 1, 2, 2, 1, 1, 0, 0, 0, 3, 0, 2, 3, 2, 0, 0, 1, 0, 1, 2, 2, 2, 3, 3, 2, 2, 1, 2, 1, 0, 3, 1, 2, 3, 2, 3, 3, 2, 0, 1, 2, 3, 0, 3, 1, 3, 2, 3, 3, 2, 1, 2, 0, 2, 0, 1, 2, 1, 2, 3, 1, 0, 0, 3, 1, 2, 1, 2, 2, 0, 2, 3, 0, 2, 3, 1, 0, 2, 2, 0, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 2, 3, 1, 0, 3, 0, 1, 1, 0, 2, 0, 1, 3, 2, 3, 3, 2, 0, 1, 0, 2, 2, 2, 1, 3, 2, 1, 2, 3, 0, 3, 0, 3, 0, 2, 0, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 2, 1, 3, 1, 1, 0, 0, 3, 1, 3, 2, 3, 1, 3, 2, 2, 3, 3, 0, 3, 2, 2, 2, 1, 0, 1, 1, 3, 3, 3, 0, 2, 1, 2, 0, 2, 2, 0, 3, 2, 0, 0, 2, 2, 3, 3, 3, 1, 3, 3, 2, 1, 0, 0, 2, 2, 2, 3, 2, 2, 3, 2, 3, 0, 1, 1, 2, 0, 2, 2, 0, 3, 0, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 3, 2, 2, 3, 1, 2, 2, 1, 0, 1, 3, 2, 3, 3, 1, 1, 0, 1, 3, 3, 1, 0, 2, 0, 2, 1, 2, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 1, 3, 3, 0, 1, 0, 1, 2, 3, 0, 2, 0, 3, 1, 2, 0, 2, 2, 3, 3, 3, 0, 3, 1, 3, 1, 3, 2, 1, 2, 1, 2, 1, 0, 2, 1, 1, 1, 3, 1, 1, 2, 2, 1, 3, 0, 2, 0, 0, 2, 2, 1, 1, 0, 2, 2, 0, 1, 1, 2, 1, 3, 3, 3, 3, 2, 1, 0, 3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 2, 3, 1, 1, 1, 2, 0, 2, 2, 0, 3, 3, 0, 1, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2, 0, 2, 1, 0, 0, 1, 0, 2, 1, 0, 2, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 1, 2, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 0, 1, 0, 2, 2, 0, 1, 1, 2, 1, 0, 2, 2, 1, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 1, 2, 2, 1, 1, 2, 1, 0, 2, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0, 2, 1], [1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 2, 1, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0, 2, 2, 2, 0, 1, 0, 0, 1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 0, 2, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 127, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not False\\nb1 = False\\nif False:{:\\nb1 = ( in0 \\ge abs(int(2.0)) and not not b2 )\\n:}\\nb1 = in2 == int(2.0)\\nif mod(int(8.0),( abs(int(6.0)) - ( ( int(9.0) - ( i1 - min(in2, in1) ) ) * int(7.0) ) )) \\l int(7.0):{:\\nb1 = False\\n:}else:{:\\nloopBreak% = 0\\nwhile ( b0 or ( min(abs(int(0.0)), int(2.0)) \\l int(9.0) and True ) ):{:\\nres0 *= max(int(3.0), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = ( min(int(1.0), ( min(int(9.0), int(4.0)) - max(mod(divInt(res0,max(( max(( int(1.0) + int(4.0) ), in1) - int(0.0) ), divInt(min(in1, abs(in2)),( ( i2 + i2 ) + in1 )))),max(i1, res0)), int(5.0)) )) * divInt(( abs(min(int(6.0), ( mod(int(3.0),int(9.0)) - res0 ))) + i0 ),res0) ) \\ge abs(i2)\\nloopBreak% = 0\\nwhile ( max(( in2 * i2 ), int(4.0)) + i2 ) == int(15.0):{:\\nres0 = mod(mod(divInt(min(min(mod(( int(0.0) - divInt(int(9.0),i2) ),max(int(8.0), ( min(mod(abs(max(( in2 - int(2.0) ), divInt(min(in2, abs(int(0.0))),min(( min(abs(( int(8.0) * ( res0 - mod(in2,int(9.0)) ) )), ( int(7.0) * divInt(abs(int(3.0)),res0) )) - in2 ), max(int(2.0), ( int(0.0) + ( divInt(i2,( min(i1, ( abs(int(1.0)) + i2 )) * ( ( in1 * int(6.0) ) * min(abs(mod(int(1.0),min(int(4.0), mod(divInt(max(abs(( max(int(4.0), in0) + abs(in1) )), int(2.0)),int(5.0)),res0)))), ( in2 - int(8.0) )) ) )) + max(( abs(max(( i0 + int(7.0) ), res0)) - divInt(( divInt(int(5.0),max(( int(7.0) - ( min(in2, min(in2, min(i2, divInt(in1,int(8.0))))) * ( int(9.0) * max(mod(divInt(abs(( abs(int(8.0)) * ( int(6.0) * max(int(1.0), int(7.0)) ) )),i0),i2), min(int(0.0), max(divInt(min(int(1.0), abs(divInt(( abs(min(in2, max(( ( divInt(int(4.0),res0) - int(1.0) ) * int(5.0) ), max(abs(max(res0, ( int(6.0) - ( i0 + mod(divInt(i1,min(mod(in1,i1), mod(divInt(abs(abs(max(int(1.0), abs(abs(divInt(int(8.0),in2)))))),i2),( divInt(( min(divInt(mod(max(( max(i0, int(3.0)) + int(3.0) ), ( in1 + ( ( in1 + max(in0, divInt(int(7.0),int(2.0))) ) + in0 ) )),i1),in0), in1) - i1 ),int(4.0)) - res0 )))),max(mod(divInt(min(int(2.0), ( mod(int(2.0),res0) + int(9.0) )),min(( min(abs(int(3.0)), int(6.0)) - i1 ), int(0.0))),min(abs(int(7.0)), res0)), ( i0 * ( int(9.0) - ( in0 - int(8.0) ) ) ))) ) ))), int(6.0))))) * int(8.0) ),int(3.0)))),i0), in0))) ) ) ), abs(abs(min(int(0.0), min(max(in2, int(4.0)), i1)))))) * int(6.0) ),divInt(abs(res0),mod(in0,abs(int(5.0))))) ), mod(in1,mod(mod(max(max(abs(res0), max(int(9.0), min(int(8.0), abs(( int(1.0) - divInt(int(8.0),( int(1.0) + i0 )) ))))), ( int(6.0) - int(3.0) )),int(4.0)),max(int(6.0), int(6.0))))) ) )))))),( ( int(5.0) + min(res0, ( res0 * res0 )) ) + mod(( int(9.0) - int(4.0) ),res0) )), ( divInt(in0,int(1.0)) - int(0.0) )) * divInt(int(7.0),abs(min(max(max(divInt(int(2.0),in0), min(int(1.0), ( int(9.0) + in2 ))), ( max(int(6.0), min(int(3.0), int(7.0))) * ( min(int(9.0), int(4.0)) + int(2.0) ) )), divInt(in2,mod(divInt(in2,abs(max(i1, int(3.0)))),res0))))) ))), int(4.0)), in0),int(9.0)),in1),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 110, 110, 6, 8, 3, 19, 6, 13, 5, 2, 93, 2, 420, 117, 103, 65, 53]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [1], [1, 1], [1], [4], [], [], [], [0], [], [1], [0], [], [1, 1, 2, 2], [1, 1], [3, 3, 1, 0, 0], [], [0, 2], [1, 0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\ni1 -= min(abs(int(4.0)), i1)\\ni2 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 4, 2, 5, 0, 2, 2, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 0, 2, 0, 1], [1], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 5, 3, 2, 4, 1, 7, 0, 7, 4, 2, 8, 1, 5, 0, 9, 1], [5, 0, 0, 1], [0, 2], [0], [1, 1, 0, 1, 1], [0, 0, 0, 0], [3], [], [], [0, 3, 2, 2, 6, 3, 0, 1, 3, 0, 1, 1, 3, 5, 5, 4, 0], [0, 1], [0, 2, 1, 3, 3, 2, 2, 1, 3, 3, 3, 1, 2, 3, 1, 0, 3, 3, 2, 3, 3, 0, 3, 1, 0, 3, 0, 1, 3, 3, 3, 0, 1, 1, 3, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 1, 1, 1, 2, 0, 0, 3, 1, 1, 2, 0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 2, 1, 0, 2, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 0, 2, 0, 1], [0, 1, 0, 2, 2], [1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = in0\\ni2 += ( int(9.0) - abs(abs(mod(divInt(int(5.0),max(min(abs(int(3.0)), ( abs(int(2.0)) + i2 )), max(max(( max(max(res0, max(int(4.0), in0)), max(i0, int(1.0))) * min(abs(max(i1, int(7.0))), int(0.0)) ), min(divInt(abs(in0),int(7.0)), ( min(i0, int(4.0)) * i1 ))), int(2.0)))),int(8.0)))) )\\nloopBreak% = 0\\nwhile int(1.0) != int(5.0):{:\\nb0 = mod(i1,in0) \\l max(int(0.0), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( divInt(in2,in2) \\l int(1.0) and in1 \\g i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 17, 17, 4, 2, 1, 5, 4, 1, 0, 0, 17, 2, 60, 9, 19, 5, 5]}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 0, 0], [1, 1, 1], [7, 2, 0], [0, 5], [0, 2, 0, 2], [0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [0, 0], [3, 3, 2, 1, 1, 0], [1, 0], [], [1, 2], [], [3, 3, 2, 3, 1, 0, 1, 0, 1], [1], [2, 2, 2], [], [0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( ( not abs(abs(divInt(abs(int(7.0)),i1))) \\l int(2.0) and False ) or True )\\nb2 = i2 != int(0.0)\\nb0 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 2, 4, 2, 8, 2, 6, 2, 0, 2, 0, 9, 1, 3, 0, 1]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [2, 0, 2, 1, 1, 1], [1, 1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 7, 7, 7, 3, 5, 6, 3, 0, 6], [2, 2, 1, 5], [0, 0, 0], [0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0], [3, 3, 2, 2, 3, 0, 0], [], [], [1, 0, 3, 2, 4, 3, 6, 1, 0, 0, 4, 0, 2, 4, 4, 3, 2, 3], [1, 1, 1], [1, 1, 1, 2, 1, 0, 0, 1, 3, 1, 1, 3, 2, 3, 2, 0, 2, 1, 3, 3, 0, 3, 3, 0, 3, 3, 0, 0, 3, 3, 0, 0, 2, 2, 1, 3, 3, 0, 2, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1], [2, 1, 2, 0, 1, 0, 1, 0, 0, 2, 1, 2, 2], [1, 1, 2, 1, 2, 1, 2], [1, 1, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( int(0.0) == int(9.0) and int(7.0) == ( int(7.0) - i1 ) ) or not not i0 \\g int(7.0) ):{:\\nin0 -= abs(int(3.0))\\nloopBreak% = 0\\nwhile ( int(5.0) != max(( abs(mod(i2,( int(6.0) * min(max(in1, min(max(in0, min(min(res0, i1), abs(max(i0, i0)))), ( mod(int(3.0),abs(abs(in1))) - divInt(i0,int(0.0)) ))), i2) ))) * in1 ), in1) and b0 ):{:\\nin0 -= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b0\\ni2 *= in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 11, 11, 4, 3, 3, 11, 4, 7, 0, 0, 18, 3, 46, 7, 13, 7, 3]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 0, 2, 1], [0, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 1, 0, 7, 3, 4, 1, 8, 2, 2, 0, 3, 4, 5, 9, 0], [3], [], [], [1, 0], [0], [1], [0], [0], [2, 6, 5, 1, 5, 3, 6, 2, 4, 6, 2, 5, 4, 1, 0, 0, 6, 6, 4, 0, 3, 5, 5], [0, 1, 0], [3, 1, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 1, 2, 1, 3, 1, 2, 0, 0, 3, 3, 3, 3, 1, 0, 1, 2, 0, 1, 2, 0, 0, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 0, 3, 3, 2, 2, 2, 1, 0, 0, 0, 1, 0, 1, 2, 2, 2, 0, 0, 0, 2, 1, 1, 1, 1, 3, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 2, 0, 2, 2, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = min(int(8.0), ( ( divInt(res0,in2) + i1 ) + in2 ))\\nif abs(min(abs(int(6.0)), ( int(1.0) - min(int(0.0), ( in0 - res0 )) ))) \\ge min(max(max(min(int(7.0), i2), int(3.0)), ( in1 * int(4.0) )), ( res0 + i2 )):{:\\nin2 *= max(mod(min(( divInt(in1,min(int(1.0), ( divInt(i1,i0) * max(max(( ( mod(int(8.0),i0) + res0 ) + res0 ), int(2.0)), in1) ))) + int(2.0) ), mod(divInt(divInt(i0,in0),in2),divInt(int(0.0),int(3.0)))),int(4.0)), int(5.0))\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nin2 = min(int(9.0), int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 17, 17, 1, 0, 0, 2, 1, 1, 1, 1, 23, 3, 71, 19, 15, 11, 9]}, {"genotype": [[0], [1], [0], [], [1], [1], [7], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [7, 8, 6], [], [], [], [], [], [], [], [], [0, 5, 3, 4], [1], [2, 2, 3, 3, 0, 0, 1, 1, 2, 0, 1], [0, 1, 1], [0, 1], [1, 1], [1, 0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= ( mod(min(max(in2, in0), int(7.0)),int(8.0)) - divInt(in1,int(6.0)) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 11, 3, 2, 2, 2]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1], [2, 0, 2, 1, 2, 1, 1, 1], [1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 0, 4, 1, 8, 0, 6, 6, 4, 7, 3, 3, 3, 1, 8, 7, 4, 7, 6, 9, 9, 5, 5, 5, 7, 0, 5, 5, 9, 8, 3, 2, 8, 7, 0, 0, 7, 5, 9, 0, 1, 3, 3, 3, 5, 3, 6, 4, 2, 2, 3, 2, 5, 7, 4, 8, 0, 8, 0, 3, 0, 7, 6, 6, 1, 5, 0, 0, 2, 4, 9, 0, 6, 8, 5, 3, 5, 3, 1, 6, 2, 4, 1, 0, 3, 7, 5, 8, 8, 9, 5, 0, 7, 5, 3, 9, 0], [0, 5, 4], [1, 1], [0], [0, 1, 1, 0, 1, 0], [0, 0, 0], [0, 3, 1], [0], [], [6, 4, 6, 4, 5, 6, 1, 1, 2, 0, 1, 1, 5, 6, 3, 0, 5, 1, 0, 6, 1, 1, 4, 2, 2, 0, 0, 3, 1, 5, 2, 3, 6, 5, 3, 0, 3, 0, 5, 0, 1, 4, 5, 5, 1, 1, 2, 4, 0, 1, 3, 5, 1, 2, 3, 2, 1, 5, 0, 6, 6, 3, 5, 6, 2, 2, 4, 2, 0, 5, 1, 1, 1, 6, 5, 6, 2, 1, 2, 1, 1, 4, 4, 1], [0, 0, 1, 1], [0, 3, 2, 3, 2, 1, 2, 2, 1, 0, 1, 0, 3, 2, 3, 2, 3, 2, 0, 2, 2, 3, 2, 3, 2, 1, 2, 2, 0, 2, 2, 2, 1, 0, 1, 1, 2, 2, 2, 3, 3, 1, 2, 1, 0, 3, 0, 1, 1, 2, 0, 3, 3, 3, 2, 0, 3, 0, 3, 3, 0, 0, 1, 1, 1, 3, 1, 3, 2, 2, 1, 1, 2, 0, 0, 2, 0, 2, 3, 2, 2, 3, 1, 1, 3, 0, 3, 1, 2, 1, 1, 2, 3, 2, 0, 1, 1, 3, 2, 3, 3, 3, 0, 0, 1, 0, 3, 3, 3, 1, 2, 0, 1, 3, 2, 3, 2, 2, 0, 0, 2, 1, 2, 2, 0, 2, 1, 3, 3, 3, 0, 0, 2, 2, 0, 3, 1, 1, 0, 1, 3, 3, 2, 2, 1, 3, 3, 0, 0, 2, 1, 2, 1, 0, 0, 2, 1, 2, 0, 2, 3, 3, 0, 1, 1, 0, 0, 1, 3, 1, 1, 1, 0, 2, 1, 3, 0, 2, 1, 3, 2, 2, 2, 2, 0, 3, 3, 2, 1, 1, 2, 1, 3, 0, 0, 1, 3, 3, 1, 2, 0, 2, 1, 0, 2, 2, 3, 3, 1, 2, 0, 2, 3, 1, 1, 1, 2, 0, 3, 2, 2, 2, 1, 3, 3, 0, 0, 1, 3, 2, 2, 3, 3, 0, 1, 1, 0, 2, 2, 0, 1, 0, 2, 3, 1, 0, 1, 0, 0, 3, 0, 0, 2, 3, 2, 0, 1, 1, 0, 2, 1, 3, 2, 1, 3, 2, 0, 3, 2, 2, 2, 2, 3, 1, 1, 1, 0, 3, 3, 3, 1, 2, 0, 2, 2, 0, 3, 0, 3, 3, 3, 3, 3, 1, 3, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 1, 2, 0, 0, 3, 1, 3, 0, 0, 0, 2, 0, 0, 1, 0, 1, 2, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 2, 0, 2, 0, 1, 3, 2, 3, 1, 0, 3, 2, 1, 2, 3, 1, 2, 1, 3, 1, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 2, 1, 1, 2, 0, 2, 3, 2, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 0, 2, 2, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 2, 2], [2, 1, 1, 2, 2, 0, 2, 1, 2, 0, 1, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 1, 0, 1, 2, 1, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 1, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nres0 = in1\\nloopBreak% = 0\\nwhile min(( min(( int(6.0) * ( mod(int(0.0),res0) - int(0.0) ) ), in1) - min(( min(( abs(mod(in2,mod(mod(abs(mod(abs(mod(int(4.0),( mod(res0,( mod(( int(1.0) * i1 ),int(8.0)) * int(0.0) )) + ( mod(( abs(max(int(6.0), ( int(6.0) * i1 ))) - max(i2, int(4.0)) ),int(7.0)) * mod(i0,max(min(max(mod(i1,max(i1, min(min(in2, res0), int(3.0)))), int(3.0)), int(3.0)), min(int(1.0), abs(mod(divInt(int(8.0),int(7.0)),( in0 + i0 )))))) ) ))),mod(in2,( min(( mod(min(int(4.0), int(7.0)),max(i1, min(int(6.0), ( int(9.0) - int(9.0) )))) * ( max(divInt(i0,int(5.0)), int(5.0)) + max(divInt(min(min(min(res0, i1), int(5.0)), i1),max(abs(max(int(7.0), divInt(in1,int(0.0)))), min(mod(abs(divInt(divInt(i2,i2),( int(5.0) + ( ( i0 * ( int(5.0) + abs(min(min(i0, in0), divInt(( i1 * min(int(9.0), int(8.0)) ),in2))) ) ) * int(3.0) ) ))),abs(min(divInt(mod(int(2.0),max(abs(i2), in0)),( int(8.0) * ( int(7.0) + res0 ) )), in2))), divInt(int(0.0),( in0 * ( min(abs(i0), int(0.0)) * int(7.0) ) ))))), in0) ) ), i0) + int(5.0) )))),max(int(9.0), int(0.0))),int(1.0)))) - in2 ), ( int(3.0) + min(i0, ( int(3.0) - max(( mod(mod(divInt(i1,min(abs(divInt(int(3.0),int(5.0))), ( int(3.0) * min(in1, in2) ))),int(6.0)),abs(max(int(4.0), ( in2 - ( int(2.0) - i1 ) )))) - mod(divInt(max(max(int(2.0), ( i1 * ( abs(int(3.0)) - int(2.0) ) )), int(5.0)),mod(i2,abs(( divInt(( int(7.0) * abs(max(in1, i0)) ),int(4.0)) + abs(( ( max(max(i1, int(8.0)), int(0.0)) + in0 ) + ( mod(in2,int(8.0)) + i1 ) )) )))),( abs(int(0.0)) + i2 )) ), int(3.0)) )) )) * in0 ), i2) ), min(i1, in2)) \\l divInt(max(( i0 + int(0.0) ), int(7.0)),res0):{:\\nres0 = divInt(int(6.0),abs(( int(6.0) + min(( in0 * max(( ( divInt(divInt(abs(int(1.0)),int(5.0)),int(0.0)) * in2 ) * abs(min(min(int(0.0), mod(res0,divInt(mod(i2,abs(i2)),abs(abs(max(abs(abs(int(2.0))), abs(int(4.0)))))))), int(9.0))) ), ( mod(mod(divInt(( int(0.0) - abs(int(6.0)) ),abs(int(8.0))),( int(5.0) - ( in1 * i2 ) )),min(int(3.0), min(i0, in2))) + i1 )) ), ( i1 + i1 )) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(5.0) != res0:{:\\nb1 = ( int(3.0) \\le ( int(1.0) - int(6.0) ) and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 -= abs(int(2.0))\\nres0 -= mod(int(4.0),max(min(int(1.0), int(0.0)), max(( i2 + ( i1 * int(3.0) ) ), max(( max(int(7.0), i2) * min(mod(int(5.0),( min(int(8.0), ( int(8.0) * abs(int(9.0)) )) + int(5.0) )), ( i1 - divInt(int(0.0),( divInt(int(7.0),i1) + mod(( int(5.0) * int(3.0) ),divInt(in1,divInt(abs(divInt(in1,int(9.0))),int(0.0)))) )) )) ), i1))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 8, 8, 3, 5, 98, 98, 3, 2, 1, 6, 3, 3, 1, 0, 84, 4, 378, 110, 90, 60, 52]}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1], [2, 0, 2, 1, 2, 1, 0], [0, 1, 0], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 6, 2, 7, 6, 6, 6, 6, 0, 9, 2, 9, 3, 6, 5, 9, 2, 7], [5, 2, 0, 2], [1, 1], [], [1, 1, 1, 0, 1], [0, 0, 0, 0], [1], [0], [1, 1], [0, 4, 5, 6, 5, 0, 4, 3, 6, 0, 6, 3, 2, 0, 3, 3], [1, 1], [0, 2, 3, 0, 0, 1, 2, 1, 2, 0, 3, 2, 3, 2, 0, 3, 2, 0, 3, 3, 0, 2, 3, 2, 3, 2, 0, 1, 2, 2, 3, 2, 0, 1, 1, 3, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 2, 2, 0, 2, 2, 1, 1, 0, 2, 0, 2], [2, 1, 0, 2, 2, 2, 1, 1, 2, 0, 2], [0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif i0 != divInt(max(in1, in2),int(8.0)):{:\\nres0 *= ( int(6.0) - mod(in2,abs(divInt(abs(( i0 + min(mod(in1,abs(abs(in0))), ( max(( max(( res0 * int(2.0) ), mod(mod(min(mod(i0,int(7.0)), int(6.0)),abs(int(6.0))),res0)) * ( in0 * int(6.0) ) ), ( int(6.0) - min(abs(i2), ( int(0.0) - int(9.0) )) )) * int(2.0) )) )),i0))) )\\n:}else:{:\\nloopBreak% = 0\\nwhile int(9.0) == int(3.0):{:\\nb1 = int(6.0) \\l ( in0 + int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nin0 *= int(9.0)\\n:}else:{:\\nb1 = int(2.0) == int(7.0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 18, 18, 4, 2, 0, 5, 4, 1, 1, 2, 16, 2, 60, 16, 12, 11, 7]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1], [8], [4], [2], [], [1, 0], [0], [1], [1], [], [1], [], [1, 3, 0], [], [2], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(8.0) \\le abs(i1):{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 1, 2, 2, 1], [0, 0, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 3, 6, 0, 2, 6, 9, 4, 2], [1, 4, 2], [1], [1, 1], [0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0], [3, 2, 0, 3, 1], [1], [0, 0], [4, 4, 5, 6, 4, 4, 2, 4, 2, 6, 2, 4, 4, 1, 3, 6, 5, 4, 5, 2, 6, 5, 4, 6, 0, 0, 1, 2], [0, 0], [0, 0, 2, 3, 0, 2, 0, 1, 3, 2, 0, 3, 0, 3, 0, 0, 3, 3, 3, 2, 3, 2, 1, 2, 3, 3, 0, 0, 2, 3, 0, 3, 1, 0, 0, 1, 3, 0, 2, 2, 1, 0, 1, 2, 0, 2, 0, 1, 3, 0, 3, 2, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 3, 0, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( not b1 or in1 \\g in1 ):{:\\nin2 = mod(min(res0, mod(in1,int(1.0))),abs(mod(in1,min(i2, min(in1, i2)))))\\nif max(max(abs(( abs(mod(int(7.0),divInt(min(min(res0, i2), ( min(in1, max(int(3.0), in1)) + i1 )),int(6.0)))) + min(in0, ( ( int(0.0) - res0 ) + int(2.0) )) )), ( in2 + ( in1 + int(6.0) ) )), min(in2, max(divInt(mod(min(divInt(int(9.0),i2), res0),in2),in1), res0))) \\le i0:{:\\nloopBreak% = 0\\nwhile ( False or min(i0, int(4.0)) == int(2.0) ):{:\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 10, 10, 3, 1, 2, 8, 3, 5, 1, 2, 28, 2, 67, 14, 17, 6, 8]}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [1], [0, 0], [1, 1, 1], [3, 6, 3], [3, 5], [2, 0, 1], [], [1, 1, 0], [0, 0], [0], [], [], [6, 2], [], [2, 1, 0, 1, 1, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(int(3.0),res0) \\ge int(6.0):{:\\nb2 = int(3.0) != i2\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 2, 3, 0, 3, 2, 1, 0, 0, 2, 0, 6, 1, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [5], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1], [0, 2, 0, 1, 0], [1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1], [2, 0, 6, 9, 3, 5], [4, 0, 3, 0], [2, 0, 1, 0], [0], [0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0], [2, 3, 0, 2, 2], [], [], [6, 0, 6, 0, 6, 4, 3, 1, 4], [0], [3, 3, 0, 1, 3, 1, 3, 2, 0, 0, 0, 1, 0, 0, 3, 1, 2, 1, 1, 0, 0], [0, 0], [1, 0, 2, 1, 2], [1, 2], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not ( b0 and not max(min(res0, int(2.0)), abs(int(0.0))) \\le max(( i0 - res0 ), i0) )\\nloopBreak% = 0\\nwhile int(6.0) \\l res0:{:\\nin1 = in0\\nb1 = abs(int(9.0)) \\ge ( int(3.0) * int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not i1 \\l in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 6, 6, 4, 4, 1, 9, 4, 5, 0, 0, 9, 1, 21, 2, 5, 2, 0]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [5, 1], [], [], [], [], [], [], [], [], [3], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += int(51.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1], [0], [], [], [], [], [], [], [], [], [1, 6, 2], [1, 1], [1, 0], [], [], [2, 2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= int(0.0)\\nres0 *= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 2, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 4, 1, 0, 1, 8, 9, 4, 7, 7, 1, 0, 5, 7, 5, 3], [5], [2], [], [1], [0], [], [], [], [2, 1, 3, 1, 0, 0, 2, 1, 5, 4, 0, 2, 4, 0], [], [3, 1, 2, 3, 3, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2, 0, 1, 2, 3, 2, 2, 3, 3, 1, 2, 0, 2, 0, 3, 1, 3, 0, 3, 2, 3, 2, 0, 0, 0, 1, 1, 2, 3, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 2, 3, 2, 1, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 2, 0, 1, 0, 1, 2, 2, 2, 0, 1, 1, 1, 1], [1, 0, 2, 2, 2, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(int(8.0), mod(max(max(int(3.0), mod(int(4.0),int(1.0))), mod(( max(int(0.0), min(mod(i2,int(1.0)), mod(abs(( divInt(min(max(int(8.0), ( i1 - mod(in0,min(int(9.0), max(i1, abs(mod(abs(( i0 + i0 )),i2))))) )), int(4.0)),int(7.0)) * ( abs(i1) * in2 ) )),in1))) * int(7.0) ),min(i0, max(max(int(1.0), int(0.0)), divInt(max(( int(5.0) + int(7.0) ), int(5.0)),i2))))),int(3.0))) != max(in1, i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 17, 17, 1, 1, 0, 1, 1, 0, 0, 0, 14, 0, 64, 15, 18, 6, 9]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1], [0, 6, 1, 4], [], [], [], [], [], [], [], [], [5, 1, 0, 4], [1], [3, 3, 2, 3, 3, 0, 1, 3, 1, 1, 2, 1, 2, 0, 0], [1, 1, 1], [2, 2, 1, 0, 1], [0], [1, 1, 0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += abs(abs(mod(max(min(i1, int(0.0)), max(int(6.0), int(1.0))),mod(int(4.0),divInt(i0,in1)))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 15, 3, 5, 1, 3]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 1, 7, 7, 1, 4, 9, 2, 3, 7, 3, 1, 6, 5, 5, 0, 7, 6, 1, 7, 4, 7, 3, 4, 9, 8, 3, 4, 8, 3, 0, 5, 7, 7, 4, 8, 9, 2, 7, 8, 3, 8, 3, 0, 5, 7, 9, 0, 1, 7, 7, 3, 9, 2, 1, 4, 4, 2, 0, 7, 9, 0, 6, 1, 5, 4, 4, 9, 4, 0, 4, 7, 9, 8, 8, 4, 6, 2, 2, 1, 0, 2, 4, 4, 8, 0, 0, 4, 6, 7, 8, 5, 3, 3, 7, 0, 6, 0, 5, 8, 6, 6, 1, 3, 8, 0, 8, 9, 1, 0, 6, 0, 2, 5, 4, 4, 7, 4, 2, 9, 5, 8, 7, 7, 5, 1, 7, 0, 2, 7, 9, 6, 4, 5, 8, 9, 5, 1, 2, 0, 7, 6, 7, 3, 4, 9], [2], [2], [], [1], [0], [], [], [], [2, 2, 1, 5, 2, 5, 1, 3, 0, 6, 1, 3, 4, 6, 6, 3, 2, 0, 1, 6, 4, 6, 4, 1, 0, 2, 2, 3, 1, 6, 2, 0, 1, 1, 3, 1, 4, 6, 0, 2, 4, 0, 2, 5, 0, 4, 2, 6, 4, 2, 3, 1, 1, 1, 5, 6, 1, 6, 1, 6, 1, 3, 5, 6, 4, 4, 4, 4, 6, 5, 4, 2, 0, 1, 3, 3, 1, 5, 6, 4, 4, 2, 4, 0, 3, 6, 5, 3, 2, 6, 1, 4, 3, 0, 1, 6, 1, 6, 2, 6, 1, 4, 0, 4, 2, 5, 1, 0, 1, 0, 3, 3, 2, 2, 0, 1, 1, 5, 1, 6, 3, 3, 2, 2, 5, 1, 6, 1, 0, 6, 5, 1, 6, 5, 1, 6, 6, 2, 5, 1, 4, 2, 5, 0, 3, 4, 5, 4, 1], [], [2, 3, 1, 0, 3, 3, 3, 2, 0, 0, 0, 2, 2, 3, 0, 2, 0, 2, 2, 3, 3, 1, 2, 3, 3, 2, 0, 3, 3, 1, 0, 3, 0, 2, 1, 3, 1, 0, 3, 2, 1, 0, 3, 2, 2, 1, 2, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 1, 1, 3, 0, 1, 3, 2, 2, 3, 2, 2, 2, 3, 3, 0, 1, 2, 2, 0, 3, 2, 3, 2, 1, 2, 2, 2, 1, 3, 0, 3, 0, 3, 3, 0, 1, 3, 2, 3, 0, 0, 1, 0, 3, 3, 2, 2, 1, 2, 2, 3, 2, 0, 0, 3, 3, 2, 0, 1, 3, 1, 1, 3, 3, 1, 3, 2, 3, 2, 2, 2, 3, 0, 1, 1, 0, 1, 1, 0, 3, 0, 0, 1, 3, 1, 1, 1, 0, 0, 1, 1, 1, 3, 2, 3, 0, 2, 3, 0, 1, 1, 2, 2, 3, 2, 2, 0, 3, 2, 1, 2, 2, 0, 1, 1, 1, 3, 2, 2, 2, 3, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 2, 1, 3, 3, 2, 3, 0, 2, 2, 2, 0, 3, 2, 1, 2, 3, 1, 0, 3, 2, 1, 1, 0, 2, 1, 3, 0, 2, 1, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 3, 3, 1, 2, 1, 3, 2, 0, 0, 1, 2, 0, 2, 2, 3, 3, 0, 0, 1, 3, 2, 2, 1, 0, 2, 0, 3, 3, 0, 1, 2, 2, 3, 1, 3, 3, 3, 2, 0, 3, 2, 2, 0, 2, 2, 2, 2, 1, 1, 0, 2, 0, 1, 2, 1, 1, 2, 3, 2, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 0, 2, 2, 2, 2, 3, 1, 3, 0, 2, 0, 3, 1, 1, 2, 3, 3, 3, 2, 3, 3, 1, 0, 0, 2, 1, 0, 3, 2, 0, 3, 3, 2, 1, 2, 2, 2, 0, 3, 3, 3, 3, 2, 2, 3, 1, 0, 1, 0, 1, 0, 2, 2, 1, 0, 0, 3, 1, 2, 0, 2, 0, 2, 1, 1, 3, 3, 3, 1, 3, 0, 0, 1, 1, 1, 3, 1, 0, 1, 0, 0, 1, 3, 1, 0, 2, 2, 2, 2, 0, 0, 3, 3, 1, 0, 3, 3, 2, 1, 0, 3, 1, 3, 0, 3, 3, 0, 0, 3, 0, 1, 1, 3, 1, 2, 3, 3, 2, 0, 3, 2, 3, 1, 1, 0, 0, 0, 2, 2, 1, 3, 1, 3, 2, 0, 2, 0, 1, 2, 0, 1, 2, 2, 2, 2, 3, 0, 3, 0, 2, 1, 1, 3, 1, 1, 3, 1, 0, 3, 1, 0, 0, 3, 0, 2, 0, 2, 3, 1, 3, 0, 2, 2, 0, 1, 3, 2, 1, 2, 3, 0, 2, 1, 3, 0, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 2, 1, 3, 1, 1, 2, 0, 3, 1, 2, 2, 3, 0, 2, 0, 3, 1, 2, 2, 1, 3, 3, 3, 0, 3, 3, 3, 1, 3, 0, 1, 0, 3, 0, 0, 1, 2, 1, 3, 2, 3, 0, 1, 0, 0, 2, 2, 1, 2, 3, 1, 1, 1, 2, 0, 0, 2, 3, 1, 2, 1, 3, 1, 3, 3, 0, 1, 2, 0, 3, 3, 1, 3, 3, 2, 0, 3, 0, 0, 1, 0, 0, 2, 3, 1, 0, 0, 3, 3, 0, 3, 2, 2, 3, 2, 1, 3, 0, 1, 3, 1, 2, 0, 0, 0, 2, 0, 2, 3, 2, 1, 2, 3, 2, 0, 0, 1, 3, 3, 3, 0, 2, 0, 1, 3, 2, 2, 3, 2, 0, 1, 0, 0, 2, 0, 0, 3, 3, 0, 1, 3, 0, 1, 2, 1, 0, 2, 1, 2, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [2, 1, 0, 1, 2, 2, 1, 1, 1, 2, 1, 0, 0, 2, 1, 0, 2, 2, 0, 0, 2, 1, 1, 0, 1, 0, 2, 1, 0, 1, 0, 1, 2, 2, 2, 0, 2, 0, 2, 1, 0, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 1, 2, 1, 2, 1, 2, 0, 2, 2, 1, 1, 0, 0, 1, 1, 1, 0, 0, 2, 2, 0, 2, 1, 0, 2, 2, 1, 2, 1, 0, 2, 2, 0, 1, 1, 1, 2, 1, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 1, 2, 1, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1, 2, 2, 1, 2, 2, 0, 0, 1, 1, 2, 2, 1, 2, 1, 0, 0, 1, 0, 2, 2, 1, 0, 0, 0, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 2, 1], [2, 0, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 0, 2, 0, 2, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 0, 2, 2, 1, 1, 0, 1, 1, 2, 2, 0, 1, 2, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 2, 1, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 135, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( abs(int(0.0)) * i2 ) == max(min(max(( i2 + i1 ), in2), ( divInt(abs(i2),mod(in2,( mod(abs(max(int(3.0), ( max(max(mod(i1,abs(max(int(1.0), in0))), min(i0, mod(int(7.0),min(int(7.0), res0)))), abs(divInt(int(1.0),i1))) * max(( ( int(4.0) + mod(int(9.0),int(2.0)) ) - min(abs(abs(in0)), min(min(in1, abs(int(3.0))), int(7.0))) ), max(res0, int(3.0))) ))),max(( mod(min(( ( ( max(min(res0, int(1.0)), divInt(( in0 + abs(divInt(max(( int(6.0) - mod(mod(divInt(int(5.0),min(i2, max(i0, min(max(i1, int(5.0)), abs(( abs(res0) - in1 )))))),int(0.0)),res0) ), abs(min(divInt(( int(7.0) * ( ( abs(( in1 - i1 )) + min(abs(( i0 - int(6.0) )), max(int(1.0), int(7.0))) ) - min(max(int(4.0), max(( max(( ( mod(abs(i2),int(7.0)) * int(3.0) ) * i2 ), int(4.0)) * int(9.0) ), in0)), abs(i1)) ) ),res0), int(8.0)))),abs(int(3.0)))) ),int(4.0))) * int(8.0) ) - i2 ) * i0 ), int(3.0)),int(0.0)) - int(5.0) ), abs(mod(abs(i1),divInt(min(i1, int(7.0)),int(7.0)))))) - ( ( min(( mod(in0,max(( int(4.0) - ( divInt(i1,int(8.0)) - int(9.0) ) ), int(2.0))) - max(divInt(( divInt(max(max(in1, int(7.0)), int(8.0)),int(3.0)) * ( mod(min(abs(min(int(8.0), int(3.0))), mod(int(0.0),min(max(divInt(abs(res0),( divInt(( i0 + max(divInt(int(5.0),( abs(int(7.0)) * i2 )), max(( int(9.0) + int(0.0) ), in1)) ),mod(int(1.0),abs(i0))) * ( int(7.0) - i2 ) )), int(7.0)), int(3.0)))),int(9.0)) - in2 ) ),( i0 + in1 )), int(2.0)) ), int(1.0)) + min(divInt(divInt(i2,abs(abs(max(max(int(4.0), divInt(int(4.0),min(( res0 - in1 ), int(2.0)))), ( i2 * ( ( min(max(in0, i1), int(0.0)) + max(( mod(int(7.0),i1) - ( i1 - max(min(in2, int(9.0)), ( ( min(int(0.0), abs(abs(min(( res0 - abs(( ( i1 + mod(( mod(( int(6.0) - int(1.0) ),res0) * ( i1 + int(5.0) ) ),( int(4.0) * int(4.0) )) ) * ( max(mod(min(abs(( abs(divInt(max(abs(max(min(( res0 * divInt(divInt(mod(( abs(int(9.0)) + abs(i1) ),( in0 * min(int(4.0), int(0.0)) )),mod(max(max(max(( abs(max(int(4.0), in2)) * res0 ), ( int(7.0) - in1 )), min(( in1 - min(min(( int(9.0) + mod(( divInt(in1,max(max(abs(abs(( ( min(int(8.0), in1) - int(8.0) ) - res0 ))), int(4.0)), in2)) * divInt(mod(int(6.0),in1),i2) ),max(int(2.0), mod(i0,divInt(i1,( int(2.0) * int(1.0) ))))) ), abs(max(abs(int(0.0)), max(in0, in0)))), int(2.0)) ), int(4.0))), int(4.0)),min(int(8.0), i1))),int(0.0)) ), in2), res0)), int(0.0)),min(int(4.0), in1))) + ( ( ( ( in1 - i2 ) * max(min(int(6.0), in1), abs(min(mod(int(7.0),i0), abs(int(8.0))))) ) - max(in0, min(min(res0, in2), min(in0, int(5.0)))) ) - int(3.0) ) )), min(int(3.0), ( max(max(divInt(i2,abs(divInt(max(int(7.0), int(0.0)),res0))), i1), in1) * ( ( int(6.0) * min(int(0.0), min(mod(in0,( i0 - int(5.0) )), divInt(i1,int(8.0)))) ) - mod(( ( divInt(min(res0, max(i1, divInt(int(6.0),int(6.0)))),abs(int(1.0))) + int(3.0) ) + abs(int(8.0)) ),res0) ) ))),max(int(0.0), i2)), res0) + abs(i1) ) )) ), ( in1 + divInt(abs(int(8.0)),min(i0, ( mod(in1,int(9.0)) + min(mod(int(1.0),( max(i2, ( int(0.0) - max(in2, ( i1 + mod(( mod(i0,mod(int(6.0),i1)) + mod(( int(0.0) * abs(int(2.0)) ),int(5.0)) ),( i0 * abs(int(4.0)) )) )) )) * ( ( max(in0, mod(in0,abs(int(4.0)))) + divInt(mod(int(7.0),max(min(min(i2, max(min(abs(int(4.0)), abs(i2)), int(2.0))), i0), max(i1, i1))),int(9.0)) ) * ( int(5.0) - min(( min(in2, int(8.0)) + i1 ), res0) ) ) )), mod(divInt(int(7.0),mod(min(int(7.0), int(5.0)),int(1.0))),mod(in0,in0))) ))) ))))) * divInt(abs(int(7.0)),mod(int(0.0),abs(int(2.0)))) ) * abs(max(i2, int(7.0))) )) ) ), mod(i2,abs(abs(int(9.0))))) ) * abs(max(( in2 - max(i1, res0) ), int(6.0))) ) ))))),i1), i0) ) - mod(abs(int(4.0)),res0) ) ))) * in2 )), max(max(i1, min(mod(( abs(divInt(int(5.0),min(res0, int(8.0)))) - min(int(9.0), ( in2 + i1 )) ),res0), divInt(res0,mod(min(( int(5.0) * mod(max(divInt(i2,in2), int(1.0)),max(abs(min(i1, divInt(in1,int(2.0)))), min(mod(mod(min(divInt(i2,int(0.0)), in2),i0),divInt(in0,in1)), max(abs(in2), int(7.0))))) ), max(in1, int(6.0))),( int(7.0) - i1 ))))), ( int(3.0) + ( int(4.0) + int(9.0) ) )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 147, 147, 1, 1, 0, 1, 1, 0, 0, 0, 149, 0, 650, 174, 180, 92, 82]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [4, 4], [], [], [], [], [], [], [], [], [1], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = int(44.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [1, 1], [3, 6], [3], [2], [], [1], [0], [], [], [], [3, 1, 0, 6], [1], [0, 1, 3, 2, 0, 0, 3, 1], [1], [1, 2], [2], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in0 \\ge int(3.0)\\ni1 *= max(divInt(i0,res0), abs(int(6.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 8, 1, 2, 1, 1]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 1, 4, 6, 7, 8, 6, 1, 4, 0, 7, 1, 8, 7], [1, 0], [1], [0], [0, 1, 1], [0, 0], [3], [], [], [1, 6, 5, 6, 6, 1, 0, 0, 4, 6, 6, 4, 4], [], [1, 3, 2, 3, 2, 0, 1, 2, 0, 3, 3, 0, 1, 3, 2, 3, 1, 3, 1, 1, 2, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 1, 2, 0, 0, 0, 1, 3, 3, 0, 1, 3, 3, 1, 3, 2, 1, 1, 0, 1, 2, 1, 3, 2, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 2, 1, 1, 2, 1, 2, 0, 0, 2, 1, 0, 0, 1, 2, 2], [2, 2], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( int(4.0) \\g min(divInt(max(divInt(i1,int(2.0)), divInt(res0,max(abs(in2), int(1.0)))),max(mod(max(int(4.0), abs(int(6.0))),int(7.0)), divInt(res0,divInt(res0,( max(abs(min(min(abs(mod(i1,i0)), int(8.0)), mod(i0,in1))), res0) * int(6.0) ))))), max(min(res0, int(1.0)), min(max(int(4.0), abs(mod(int(0.0),int(7.0)))), in1))) and int(1.0) \\l ( int(8.0) * abs(mod(int(7.0),in1)) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 15, 15, 2, 1, 1, 3, 2, 1, 0, 0, 13, 0, 58, 12, 18, 2, 10]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 8, 3, 4, 5, 1, 8, 2, 6, 8, 7, 9, 6, 1, 5, 7, 1, 4, 9, 0, 3, 5, 6, 0, 4, 9], [3, 1, 5, 1], [2], [0, 1], [1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0], [2, 3, 3], [], [], [1, 2, 0, 2, 2, 5, 5, 2, 2, 4, 2, 2, 0, 6, 4, 5, 1, 2, 1, 3, 0, 0, 1, 3, 2, 3, 4, 0, 2], [], [0, 2, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 3, 1, 3, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 3, 2, 3, 0, 0, 1, 1, 2, 2, 3, 0, 1, 2, 0, 0, 2, 1, 0, 1, 3, 0, 1, 2, 2, 1, 2, 3, 3, 1, 2, 1, 2, 0, 2, 3, 3, 3, 0, 3, 3, 0, 1, 3, 3, 2, 3, 0, 2, 3, 1, 2, 1, 1, 3, 1, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 0, 2, 3, 3, 1, 1, 1, 1, 1, 3, 0, 2, 2, 1, 0, 1, 3, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 1, 2, 2, 2, 2, 0, 1, 1, 0, 0, 0, 2, 0, 0, 2], [0, 2, 1, 2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 2, 1, 1, 2, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\ge ( i2 + i0 ):{:\\nb2 = not ( i2 \\g i2 and ( max(( ( ( ( mod(max(int(1.0), min(in2, in2)),i2) * ( mod(mod(mod(i2,in1),i2),int(5.0)) - min(( max(i2, i0) * int(8.0) ), int(3.0)) ) ) - mod(divInt(min(res0, int(4.0)),( in1 * in2 )),( int(5.0) - i1 )) ) + int(1.0) ) * max(i2, int(8.0)) ), ( divInt(int(2.0),divInt(abs(min(int(6.0), ( int(8.0) - mod(i1,( min(max(max(in0, abs(abs(i0))), int(7.0)), abs(abs(( min(i0, ( max(int(9.0), ( int(6.0) - int(1.0) )) * max(int(5.0), int(7.0)) )) + ( min(min(min(( i1 + in0 ), i2), in0), int(1.0)) * int(4.0) ) )))) - in1 )) ))),( abs(min(int(9.0), int(0.0))) - int(3.0) ))) * int(5.0) )) != int(6.0) or min(i0, ( ( int(0.0) + i2 ) - int(4.0) )) \\g abs(int(9.0)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 27, 27, 4, 1, 2, 7, 4, 3, 0, 0, 29, 0, 111, 29, 26, 20, 9]}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 0, 0], [], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1], [5, 7, 6, 7, 2, 9], [], [2, 1], [], [0], [], [0], [], [], [4, 0, 6, 4, 3, 0, 2, 0, 4, 4], [0, 1, 0], [2, 3, 3, 2, 0, 3, 2, 0, 2, 0, 3, 3, 1, 1, 1, 2, 2, 1, 3, 3, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 1, 2, 2, 2, 0], [1, 1, 1, 0, 1], [0, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( min(min(( i0 - max(( res0 - divInt(in1,abs(abs(int(5.0)))) ), int(7.0)) ), int(6.0)), mod(( int(7.0) - abs(min(in0, i0)) ),int(2.0))) + int(9.0) )\\ni2 -= i0\\nin1 = in1\\nb2 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 6, 6, 0, 2, 0, 1, 0, 1, 0, 0, 10, 3, 26, 6, 7, 5, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0, 0], [], [2, 1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 0, 2, 1, 2, 0], [1, 1, 1], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 9, 4, 3, 2, 4, 2, 5, 1, 5, 9, 6, 9, 1, 9, 6, 0, 0, 8, 1, 9, 9, 7, 8, 7, 7, 7, 3], [4, 0, 0, 1], [0, 2, 1, 0, 2], [0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0], [3, 2, 1, 1, 1, 0], [0, 0, 1], [], [2, 1, 2, 0, 4, 2, 1, 0, 4, 1, 6, 1, 1, 1, 0, 4, 2, 5, 0, 4, 4, 2, 6, 1, 4, 5, 2, 2, 3, 4], [0], [3, 3, 3, 0, 0, 1, 3, 2, 2, 0, 3, 1, 1, 2, 1, 3, 3, 0, 3, 0, 0, 3, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 1, 0, 2, 0, 1, 1, 0, 2, 3, 1, 3, 2, 3, 2, 2, 3, 2, 0, 1, 3, 3, 2, 0, 1, 1, 1, 2, 2, 1, 3, 3, 1, 3, 0, 2, 3, 0, 2, 1, 1, 1, 3, 1, 2, 1, 0, 1, 3, 1, 1, 2, 0, 3, 2, 3, 1, 3, 3, 0, 3, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 2, 3, 2, 0, 0, 0, 1, 0, 2, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 2, 2, 0, 1, 1, 1, 0, 2, 0, 1, 0, 2, 1, 2, 2, 1, 0, 0, 2], [1, 2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 2, 2, 1, 1, 2], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(abs(max(i2, i1)), int(3.0)) \\le max(( ( i2 - abs(int(9.0)) ) * int(4.0) ), ( int(3.0) - abs(abs(i0)) ))\\nloopBreak% = 0\\nwhile ( not True and True ):{:\\nb2 = min(in1, i2) \\l max(i1, divInt(( i0 + in1 ),( max(( i1 + ( int(2.0) - res0 ) ), ( i1 - int(4.0) )) - int(2.0) )))\\ni1 = i1\\nloopBreak% = 0\\nwhile False:{:\\nb1 = ( abs(int(5.0)) + abs(( min(divInt(mod(max(( i0 - int(1.0) ), max(max(( in1 - int(5.0) ), int(9.0)), int(6.0))),divInt(mod(int(9.0),min(abs(int(1.0)), min(i2, mod(max(in2, ( int(9.0) + int(6.0) )),int(0.0))))),min(int(0.0), ( int(8.0) + i0 )))),int(1.0)), abs(int(9.0))) * int(9.0) )) ) \\l divInt(in1,max(mod(abs(int(7.0)),abs(max(in1, min(( divInt(i2,int(8.0)) * res0 ), i1)))), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(min(divInt(int(7.0),divInt(( abs(( in1 - in2 )) - i2 ),int(7.0))), i2),( in0 * int(3.0) )) \\g in1:{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 28, 28, 4, 5, 1, 10, 4, 6, 3, 0, 30, 1, 116, 30, 29, 18, 12]}, {"genotype": [[0], [1], [1], [], [0], [1, 0, 1], [3, 9, 8], [4], [0], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(3.0) \\le int(98.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 2, 1, 0], [0, 0], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 4, 4, 2, 7, 1, 8, 5, 7, 1, 4, 6, 3, 4, 3, 2], [1, 0], [1], [], [0, 1, 1], [0, 0], [1], [0], [0, 0], [3, 0, 6, 4, 6, 3, 0, 6, 2, 5, 0, 1, 2, 2, 1, 1, 3, 6, 3, 2, 0, 4, 0, 6, 4, 5], [1, 0], [3, 3, 3, 0, 0, 0, 0, 2, 3, 3, 1, 1, 3, 0, 3, 3, 2, 0, 3, 2, 0, 2, 1, 3, 0, 0, 2, 0, 1, 0, 3, 0, 2, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 0, 2, 3, 2, 1, 2, 2, 0, 0, 0, 2, 3, 1, 3, 3, 0, 0, 0, 3, 0, 2, 3, 1, 2, 1, 0, 2, 3, 2, 1, 3, 0, 1, 2, 3, 0, 2, 3, 1, 1, 3, 3, 3, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 2, 2, 1, 0, 2, 0, 2, 1, 0, 2, 2, 2, 2, 0, 2, 2], [2, 2, 1, 1, 2, 2, 0, 0, 1, 2, 1, 0, 2], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= min(abs(max(i0, res0)), in1)\\nif True:{:\\nif res0 \\g divInt(max(max(int(5.0), int(1.0)), max(in0, abs(abs(( i0 * min(mod(res0,( int(4.0) - max(i2, in2) )), ( i0 - int(4.0) )) ))))),i1):{:\\nb1 = abs(i2) \\l ( ( abs(int(2.0)) * ( int(7.0) * divInt(max(( int(1.0) + divInt(i2,divInt(min(divInt(int(8.0),( divInt(i1,i1) + in0 )), mod(abs(int(5.0)),min(abs(res0), in0))),i2)) ), max(i0, divInt(min(int(7.0), ( int(1.0) - in1 )),divInt(abs(( int(4.0) * abs(i0) )),int(6.0))))),( abs(res0) - ( abs(int(3.0)) + int(4.0) ) )) ) ) * min(abs(abs(int(3.0))), in1) )\\n:}\\n:}\\nin2 = int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 17, 17, 2, 1, 0, 3, 2, 1, 1, 2, 26, 2, 89, 22, 26, 13, 10]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [3, 6], [], [], [], [], [], [], [], [], [5], [1], [3, 1, 1], [], [1], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += max(int(3.0), int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [0, 2, 2, 0, 0], [1, 0], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 4, 5, 5, 1, 9, 3, 8, 1, 0, 5, 2, 7, 8, 4, 6], [3, 5, 4], [2, 2, 0], [], [0, 1, 1, 1], [0, 0, 0], [0], [], [1], [2, 2, 2, 5, 1, 3, 4, 5, 3, 0, 0, 6, 4, 5, 4, 3, 1, 5, 6, 2, 2, 6, 2, 2, 4, 1, 2, 0], [1], [3, 3, 0, 0, 1, 0, 2, 1, 2, 3, 2, 3, 1, 2, 2, 0, 2, 0, 2, 0, 3, 0, 1, 1, 3, 2, 3, 2, 1, 3, 0, 2, 0, 3, 0, 2, 3, 1, 2, 3, 3, 2, 1, 1, 0, 1, 0, 1, 0, 2, 3, 3, 0, 0, 1, 2, 2, 3, 0, 1, 0, 0, 2, 0, 3, 3, 3, 0, 3, 3, 0, 0, 2, 3, 2, 1, 2, 1, 3, 0, 1, 2, 0, 3, 0, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 1, 1, 0, 0, 2, 0, 1, 0, 2, 2, 1, 1, 2, 1, 2, 1, 0, 1, 2, 1, 2], [0, 0, 2, 1, 2, 1, 0, 2, 0, 1, 1, 2, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += min(max(i2, i2), int(7.0))\\nloopBreak% = 0\\nwhile b2:{:\\nif in2 \\ge mod(int(1.0),mod(abs(( max(int(4.0), divInt(divInt(i1,mod(in0,mod(in1,max(in2, int(5.0))))),int(5.0))) + min(( min(( int(1.0) * abs(in0) ), divInt(i0,min(i0, ( max(int(9.0), ( min(abs(( int(3.0) - int(8.0) )), res0) * int(1.0) )) - in1 )))) + int(0.0) ), in2) )),( abs(max(in1, in0)) * int(5.0) ))):{:\\nb2 = ( ( max(i1, int(2.0)) + in2 ) - res0 ) != ( i2 - abs(max(abs(i2), max(min(res0, i2), ( max(( int(7.0) * ( int(8.0) - abs(i2) ) ), int(4.0)) + ( in1 + max(i1, i2) ) )))) )\\n:}else:{:\\nb0 = int(6.0) \\le abs(i0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 17, 17, 3, 3, 0, 4, 3, 1, 0, 1, 28, 1, 89, 21, 24, 15, 7]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 8, 3, 4, 0, 2, 1, 4, 3, 3, 7, 5, 9, 7, 7, 3, 6, 1, 7, 7, 0, 4, 5, 5, 4, 1, 0, 2, 8, 1, 4, 0, 2, 1, 5, 5, 0, 5, 1, 0, 8, 3, 4, 6, 4, 5, 4, 3, 2, 0, 5], [], [2, 0], [], [0], [], [0], [], [], [5, 4, 0, 6, 1, 4, 0, 5, 0, 1, 6, 5, 4, 4, 0, 2, 6, 5, 0, 5, 2, 1, 0, 1, 2, 3, 3, 2, 1, 2, 6, 4, 5, 6, 6, 4, 3, 3, 0, 5, 4, 2, 0, 2, 5, 1, 1], [1], [3, 0, 2, 2, 3, 2, 2, 3, 3, 3, 1, 0, 2, 3, 2, 2, 1, 3, 3, 3, 3, 0, 2, 0, 2, 2, 0, 0, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 3, 1, 2, 2, 3, 0, 2, 0, 3, 2, 3, 1, 1, 2, 3, 1, 3, 0, 2, 3, 3, 3, 3, 0, 1, 3, 1, 2, 0, 2, 3, 1, 1, 3, 3, 2, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 3, 1, 3, 3, 0, 3, 1, 1, 1, 3, 0, 0, 3, 2, 1, 3, 0, 1, 0, 0, 3, 2, 3, 3, 1, 0, 2, 3, 2, 0, 0, 0, 1, 3, 3, 2, 3, 2, 2, 1, 2, 0, 2, 2, 1, 2, 0, 3, 2, 0, 2, 1, 1, 2, 2, 3, 0, 3, 2, 3, 2, 0, 2, 2, 2, 2, 3, 3, 1, 3, 2, 3, 2, 2, 0, 3, 1, 2, 2, 0, 2, 1, 3, 1, 0, 2, 1, 2, 1, 1, 0, 3, 1, 1, 1, 1, 3, 0, 1, 1, 0, 3, 3, 2, 1, 1, 1, 3, 3, 0, 1, 1, 1, 3, 1, 1, 0, 1, 0, 2, 3, 2, 0, 0, 1, 3, 2, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 1, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 0, 0, 1, 2, 2], [1, 0, 2, 1, 0, 1, 0, 0, 0, 0, 2, 1, 0, 1, 0, 1, 2, 1, 1, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b0\\nin2 -= min(in1, ( divInt(min(( divInt(min(max(abs(int(2.0)), i0), ( max(( ( int(3.0) + abs(max(abs(abs(res0)), divInt(i1,mod(( in1 * i0 ),divInt(in2,int(8.0)))))) ) - int(3.0) ), i0) + i1 )),res0) - min(divInt(( max(int(4.0), ( divInt(abs(in2),( in1 + min(( max(int(0.0), int(2.0)) + divInt(min(int(1.0), abs(in1)),( max(abs(max(abs(i0), int(4.0))), min(int(3.0), ( i2 + ( min(int(3.0), int(7.0)) + max(max(divInt(( int(5.0) * ( int(9.0) - res0 ) ),int(7.0)), in2), i0) ) ))) + int(7.0) )) ), in2) )) - min(int(3.0), min(abs(i2), min(int(6.0), int(1.0)))) )) + int(7.0) ),max(i1, i0)), max(divInt(int(7.0),abs(i1)), int(0.0))) ), i2),in0) - min(( min(abs(int(4.0)), in0) * mod(max(divInt(i2,i1), i2),int(5.0)) ), min(max(( min(( divInt(int(5.0),mod(res0,mod(( int(4.0) - divInt(in1,abs(( in2 - ( int(1.0) + int(0.0) ) ))) ),( ( min(res0, max(( max(mod(res0,divInt(divInt(mod(( min(abs(int(2.0)), max(( min(divInt(( in1 - abs(int(8.0)) ),( mod(in0,mod(int(1.0),abs(int(4.0)))) * in0 )), mod(int(0.0),( int(2.0) - int(1.0) ))) * i0 ), max(int(5.0), int(5.0)))) * int(0.0) ),int(5.0)),min(in2, int(1.0))),int(0.0))), in1) - abs(max(divInt(int(8.0),int(3.0)), int(4.0))) ), min(min(i2, int(6.0)), int(4.0)))) * int(5.0) ) - max(int(4.0), int(3.0)) )))) - i0 ), int(2.0)) * i2 ), ( abs(divInt(in2,i1)) * int(0.0) )), abs(divInt(i1,int(5.0))))) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 52, 52, 0, 2, 0, 1, 0, 1, 0, 0, 47, 1, 213, 57, 58, 31, 27]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 0, 2, 2, 2, 2, 1, 0, 0, 2, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 8, 7, 4, 4, 3, 6, 7, 1, 5, 4, 0, 1, 0, 7, 6, 5, 1, 8, 3, 6, 0, 0, 7, 7, 6, 2, 8, 3, 2, 9, 5, 1, 7, 5, 5, 3, 4, 3, 6, 7, 1, 3, 0, 7, 0, 2, 7, 2, 3, 7, 5, 1, 8, 3, 6, 7, 1, 4, 1], [3, 4, 0, 5, 4, 0, 5, 2, 4, 0], [2, 2, 0, 1, 2, 0, 1, 0, 1, 1], [1, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 0, 0, 1, 1, 0, 1, 3, 2, 3, 0], [1, 1, 0], [1, 1, 1, 1, 1], [5, 0, 3, 1, 4, 4, 6, 5, 0, 6, 4, 5, 0, 3, 1, 4, 2, 3, 6, 0, 2, 4, 6, 0, 6, 1, 0, 0, 0, 1, 2, 2, 1, 4, 6, 6, 3, 5, 2, 3, 0, 3, 1, 6, 0, 6, 3, 2, 2, 0, 0, 2, 0, 2, 6, 4, 3, 6, 2, 6, 1], [0, 1, 1], [0, 1, 0, 0, 1, 3, 0, 2, 1, 3, 0, 2, 3, 3, 0, 2, 0, 2, 2, 0, 1, 2, 2, 1, 0, 2, 3, 0, 0, 0, 3, 3, 3, 3, 1, 3, 1, 2, 1, 0, 3, 2, 0, 1, 3, 3, 2, 2, 1, 2, 0, 0, 0, 3, 2, 0, 2, 0, 3, 2, 1, 1, 1, 0, 2, 3, 0, 1, 2, 3, 2, 0, 0, 2, 3, 2, 2, 0, 3, 0, 2, 2, 0, 2, 3, 2, 1, 0, 1, 1, 1, 3, 0, 2, 1, 0, 2, 1, 2, 1, 1, 1, 1, 1, 0, 2, 3, 3, 0, 3, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 2, 1, 2, 3, 0, 2, 3, 3, 2, 3, 2, 1, 0, 0, 2, 0, 0, 1, 2, 1, 3, 0, 2, 0, 3, 1, 3, 1, 3, 0, 0, 3, 0, 1, 1, 2, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3, 2, 3, 2, 3, 1, 2, 0, 1, 0, 0, 2, 0, 3, 0, 1, 2, 2, 1, 1, 0, 3, 3, 3, 1, 1, 1, 2, 0, 3, 0, 3, 0, 3, 3, 1, 0, 3, 2, 2, 1, 1, 3, 2, 3, 1, 1, 3, 1, 1, 0, 3, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 1, 0, 2, 0, 0, 1, 0, 1, 0, 2, 2, 1, 1, 1, 2, 0, 2, 2, 1, 1, 1, 0, 2, 1, 2, 0, 1, 2, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 1, 1, 2, 0, 0, 2, 1, 2, 2, 2, 2], [1, 1, 0, 1, 2, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( in2 \\ge int(9.0) or b2 ):{:\\nif i0 \\le in0:{:\\nloopBreak% = 0\\nwhile int(2.0) \\l max(i1, divInt(int(8.0),max(in1, mod(min(abs(in1), ( res0 - divInt(( in2 - int(7.0) ),divInt(( int(4.0) + i0 ),mod(min(res0, in1),in2))) )),min(max(min(max(int(4.0), min(int(3.0), ( int(6.0) - i0 ))), abs(( in0 * int(7.0) ))), abs(max(( ( int(1.0) + ( i1 + in1 ) ) * i2 ), max(divInt(in0,( res0 + max(( int(5.0) * int(4.0) ), int(0.0)) )), i0)))), mod(abs(i2),int(1.0))))))):{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = ( min(mod(in1,res0), ( abs(divInt(divInt(i0,abs(res0)),( ( i1 * ( max(( int(0.0) * i0 ), int(7.0)) + int(6.0) ) ) + int(5.0) ))) + max(i0, ( int(1.0) + i0 )) )) + divInt(int(8.0),( int(3.0) - int(6.0) )) ) != int(0.0)\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile False:{:\\nif b2:{:\\nif True:{:\\nb0 = int(0.0) \\le int(7.0)\\n:}else:{:\\ni1 = i2\\n:}\\n:}else:{:\\nb1 = ( max(min(i2, abs(int(7.0))), int(6.0)) - int(2.0) ) \\l int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(3.0) != i1:{:\\nb0 = ( not ( mod(mod(( ( int(2.0) - mod(int(9.0),divInt(int(5.0),in1)) ) + ( int(1.0) * mod(max(res0, mod(abs(min(divInt(max(mod(int(7.0),res0), in0),( in2 + i2 )), int(5.0))),mod(int(5.0),abs(in0)))),( i0 + min(int(3.0), max(int(4.0), min(in0, i1))) )) ) ),min(res0, int(3.0))),int(6.0)) == ( ( int(7.0) + ( ( min(( i0 * min(max(res0, int(1.0)), int(3.0)) ), ( abs(( min(( min(int(0.0), mod(in0,int(7.0))) * i2 ), i2) * divInt(i0,min(i0, int(0.0))) )) * ( mod(int(2.0),int(7.0)) - i2 ) )) + max(max(max(int(2.0), int(3.0)), int(7.0)), ( i0 + abs(i2) )) ) + min(res0, min(abs(int(5.0)), in1)) ) ) - max(( divInt(int(1.0),int(8.0)) - abs(divInt(abs(int(3.0)),int(6.0))) ), abs(int(7.0))) ) or b1 ) and int(1.0) \\le in0 )\\n:}else:{:\\nres0 -= abs(i2)\\n:}\\nb1 = res0 \\l int(4.0)\\n:}else:{:\\ni1 -= int(1.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 8, 9, 61, 61, 10, 10, 3, 22, 10, 12, 3, 5, 61, 3, 231, 60, 52, 37, 25]}, {"genotype": [[0], [1], [0], [], [1], [1], [2], [], [], [], [], [], [], [], [], [4, 3, 0], [0], [3, 2, 0, 1, 0], [0], [1], [0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = max(( in0 + int(2.0) ), i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [7], [], [], [], [], [], [], [], [], [1], [0], [3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = abs(int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [0, 0], [1, 1], [5, 1], [1], [2, 2, 1, 0], [1], [0, 0, 1, 0, 0, 0], [0], [0, 3, 1, 2, 0], [0], [], [3], [], [3, 2, 0, 1, 1], [0], [2], [1], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = ( abs(( in0 - int(5.0) )) \\g int(1.0) or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 1, 4, 1, 6, 1, 5, 1, 0, 1, 0, 5, 1, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 2, 0], [1, 1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 9, 9, 2, 7, 2, 0, 7, 7, 8, 5, 9, 6, 9, 5, 8, 9, 5, 7, 9, 1, 5, 0, 1, 7, 1, 3, 0, 5, 5, 5, 6, 7, 8, 7, 9, 0, 5, 1, 6, 1, 3, 6, 2, 6, 5], [1, 1, 5, 2], [0, 1, 2], [0], [1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0], [3, 2, 0], [], [], [6, 1, 0, 1, 4, 4, 3, 6, 2, 0, 5, 1, 1, 1, 2, 1, 5, 0, 4, 1, 1, 2, 3, 2, 1, 6, 2, 5, 0, 5, 0, 1, 1, 3, 6, 3, 5, 0, 6, 6, 3, 2, 4, 2, 5, 4, 1, 6, 1, 1, 1], [], [2, 0, 3, 3, 3, 3, 1, 2, 2, 3, 2, 1, 1, 1, 3, 0, 0, 3, 3, 2, 1, 1, 0, 3, 1, 0, 1, 3, 2, 2, 3, 1, 2, 3, 1, 2, 0, 2, 3, 3, 1, 3, 1, 2, 1, 2, 1, 2, 2, 3, 2, 1, 2, 3, 0, 3, 2, 3, 2, 2, 0, 3, 3, 3, 0, 1, 2, 0, 0, 3, 3, 0, 0, 1, 3, 1, 2, 3, 3, 2, 0, 0, 2, 2, 0, 0, 1, 3, 3, 0, 0, 0, 1, 2, 2, 1, 3, 1, 0, 0, 2, 2, 1, 2, 0, 1, 1, 2, 0, 1, 1, 2, 1, 2, 3, 3, 3, 0, 2, 0, 2, 1, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 2, 3, 3, 3, 0, 2, 1, 0, 1, 3, 2, 2, 1, 1, 1, 3, 1, 3, 0, 3, 0, 0, 2, 1, 0, 1, 1, 2, 3, 3, 2, 2, 0, 0, 3, 2, 3, 2, 0, 2, 3, 0, 0, 0, 0, 0, 2, 1, 0, 1, 3, 1, 3, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 1, 0, 1], [2, 0, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( res0 * abs(max(max(abs(int(5.0)), divInt(divInt(abs(divInt(int(9.0),int(9.0))),int(9.0)),max(i1, i0))), abs(max(( int(2.0) + int(7.0) ), i1)))) ) \\g max(int(2.0), in1)\\nloopBreak% = 0\\nwhile ( int(0.0) \\g max(mod(mod(abs(int(7.0)),mod(min(int(7.0), ( in1 - divInt(min(min(int(8.0), min(int(5.0), divInt(int(9.0),mod(int(6.0),( mod(max(mod(int(9.0),mod(abs(in0),max(( max(mod(( res0 * max(abs(abs(i2)), int(5.0)) ),( i0 * in2 )), abs(abs(i1))) * i1 ), int(8.0)))), max(int(9.0), mod(abs(abs(mod(i1,i2))),mod(( i1 * in2 ),int(5.0))))),min(abs(i0), in1)) - i1 ))))), int(7.0)),divInt(( int(9.0) - min(int(1.0), i1) ),i2)) )),( divInt(int(5.0),mod(in0,int(0.0))) - int(1.0) ))),divInt(i2,int(7.0))), int(1.0)) and not ( int(3.0) * divInt(min(max(min(i1, ( res0 * ( int(0.0) - i2 ) )), in2), int(5.0)),divInt(int(5.0),min(divInt(( i0 - min(divInt(in2,( i0 * ( divInt(i1,mod(i1,in0)) + ( int(5.0) - ( int(6.0) - int(7.0) ) ) ) )), ( max(min(abs(res0), ( int(8.0) + in0 )), int(7.0)) + abs(mod(mod(int(9.0),int(0.0)),int(5.0))) )) ),max(int(1.0), min(in2, min(i0, res0)))), mod(int(6.0),res0)))) ) != int(1.0) ):{:\\nloopBreak% = 0\\nwhile int(3.0) == ( abs(max(mod(divInt(in0,i2),max(divInt(min(divInt(in1,( max(i2, in2) - in1 )), i1),res0), divInt(int(6.0),i1))), int(2.0))) + min(int(6.0), max(i1, mod(i1,int(5.0)))) ):{:\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 47, 47, 4, 3, 1, 7, 4, 3, 0, 0, 51, 0, 204, 57, 49, 22, 35]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 2, 1, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 2, 2, 0, 2, 1, 1, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 7, 9, 3, 2, 0, 1, 5, 2, 8, 3, 0, 6, 9, 3, 6, 9, 7, 6, 2, 4, 4, 4, 5, 8, 0, 9, 2, 3, 6, 8, 3, 0, 2, 4, 6, 8, 6, 7, 7, 8, 4], [3, 0, 2, 4, 2, 5, 3, 4], [2, 0, 2, 2, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 2, 1, 1, 2, 0, 2], [0, 0, 0, 0], [1, 1, 1, 0, 0], [4, 3, 5, 5, 5, 1, 0, 3, 6, 3, 6, 3, 2, 1, 2, 4, 5, 5, 4, 5, 2, 3, 1, 4, 4, 3, 1, 3, 5, 2, 3, 3, 3, 6, 6, 6, 0, 2, 6, 4, 1, 4, 1, 3, 1, 3, 1, 1, 0], [1, 1, 0, 0, 1, 1, 1, 1], [0, 3, 0, 0, 0, 1, 3, 2, 0, 3, 1, 0, 2, 1, 3, 2, 0, 3, 3, 3, 2, 0, 2, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 1, 0, 3, 2, 2, 0, 3, 1, 3, 1, 0, 0, 3, 2, 2, 2, 0, 2, 1, 2, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 1, 2, 0, 3, 0, 1, 0, 3, 2, 2, 1, 2, 0, 3, 2, 1, 1, 1, 2, 3, 3, 0, 1, 3, 1, 3, 0, 3, 0, 2, 1, 3, 0, 3, 2, 1, 0, 1, 3, 1, 3, 1, 0, 1, 1, 3, 0, 3, 3, 1, 2, 1, 1, 0, 2, 2, 0, 3, 0, 1, 2, 0, 2, 0, 3, 2, 0, 1, 3, 3, 2, 1, 0, 2, 1, 3, 1, 3, 3, 2, 1, 1, 3, 0, 1, 0, 1, 2, 3, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [2, 1, 2, 1, 0, 0, 2, 0, 1, 0, 1, 0, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 0, 1, 0, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 2, 1], [2, 2, 1, 1, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= in0\\nin2 *= abs(in2)\\nloopBreak% = 0\\nwhile in2 \\ge i1:{:\\nb2 = int(5.0) \\l max(( i0 - abs(int(9.0)) ), in0)\\nif b0:{:\\nres0 = mod(int(7.0),max(( in0 - min(min(abs(( res0 + mod(min(in0, int(9.0)),int(3.0)) )), mod(max(min(i2, i1), i2),int(2.0))), in1) ), max(divInt(mod(in2,min(int(0.0), min(int(1.0), in2))),in1), max(( ( ( in2 + mod(int(5.0),mod(int(2.0),i2)) ) * abs(in0) ) + int(8.0) ), int(3.0)))))\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile True:{:\\nif ( int(0.0) + max(i1, divInt(int(6.0),( in1 + abs(in1) ))) ) == int(9.0):{:\\nin0 = i1\\n:}else:{:\\nif abs(( ( int(3.0) * divInt(in0,max(( int(6.0) * int(9.0) ), int(7.0))) ) + divInt(abs(max(in2, int(6.0))),max(int(2.0), abs(i2))) )) \\le abs(in0):{:\\nin0 += ( int(4.0) + min(in0, max(divInt(int(4.0),res0), int(4.0))) )\\n:}else:{:\\nres0 += min(int(5.0), abs(int(8.0)))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not res0 == int(0.0)\\nb0 = int(9.0) != abs(i0)\\nif True:{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = max(max(int(2.0), ( int(3.0) * int(6.0) )), i2) \\ge ( divInt(res0,max(in1, int(8.0))) + divInt(i1,divInt(in1,min(mod(i1,int(3.0)), min(abs(mod(int(0.0),in0)), divInt(int(2.0),min(int(4.0), max(min(divInt(int(6.0),int(8.0)), abs(i1)), int(6.0)))))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not b2:{:\\nin0 += i1\\n:}\\ni1 -= int(7.0)\\nb1 = not ( max(i0, int(7.0)) + int(8.0) ) \\le int(4.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 23, 23, 10, 13, 43, 43, 8, 8, 0, 18, 8, 10, 4, 5, 49, 8, 157, 33, 40, 21, 18]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [1], [2], [], [1], [0], [], [], [], [2, 5, 6], [], [0, 3, 0, 0], [], [0], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = i2 \\g min(in2, res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 0, 1], [9, 5, 6], [0], [0], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(9.0) \\l int(56.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 1, 0, 2, 1], [1, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 0, 4, 4, 1, 9, 7, 9, 3, 8, 8, 0, 5, 9, 9, 1, 9], [4, 3, 2], [1, 0, 2, 0, 1, 0], [1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0], [0, 0, 2, 1, 3, 2, 0, 1], [0, 0], [1, 0], [5, 4, 5, 1, 6, 1, 0, 6, 5, 5, 1, 6, 2, 0], [1], [3, 0, 2, 2, 3, 2, 0, 0, 1, 0, 2, 0, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 0, 2, 2, 3, 2, 2, 0, 1, 1, 2, 3, 1, 1, 2, 0, 0, 1, 2, 1, 3, 3, 3, 2, 1, 3, 3, 2, 3, 1, 2, 1, 2, 3, 0, 0, 0, 3, 0, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 2, 0, 1, 1, 2, 2, 0, 0, 2, 2, 2], [1, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nif b0:{:\\nb2 = not True\\n:}else:{:\\nloopBreak% = 0\\nwhile max(in2, ( divInt(abs(mod(in1,in2)),int(3.0)) - i1 )) \\le mod(res0,( ( ( int(7.0) - int(4.0) ) + divInt(int(0.0),int(4.0)) ) - int(4.0) )):{:\\ni1 += int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( not b1 or int(9.0) \\ge i0 )\\nif True:{:\\nb0 = divInt(( min(( ( res0 + int(7.0) ) - int(9.0) ), ( max(int(3.0), int(8.0)) * mod(in2,in2) )) + int(8.0) ),mod(int(0.0),max(abs(abs(( int(5.0) - min(min(mod(abs(int(9.0)),mod(int(9.0),( abs(i1) + res0 ))), i2), abs(i0)) ))), int(1.0)))) == int(9.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 19, 19, 3, 6, 1, 11, 3, 8, 2, 2, 14, 1, 63, 19, 12, 11, 9]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1, 1], [2, 5], [4, 3], [1, 1], [], [1, 1], [0, 0], [], [], [], [1, 1], [], [3, 3, 3, 0, 1, 3, 1, 0], [], [2, 2, 2, 2], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = abs(abs(abs(i1))) \\le int(2.0)\\nb1 = abs(int(5.0)) \\ge i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 0, 8, 0, 4, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 5, 4, 6, 5, 8, 0], [0, 2], [1, 1, 0], [], [1, 1, 0], [0, 0], [0], [], [], [2, 1, 3, 4, 0, 4, 1], [], [3, 2, 0, 0, 0, 1, 1, 3, 3, 2, 1, 2, 1, 3, 3, 1, 3, 3, 3, 1, 3, 0, 2, 0, 3, 2, 0, 1, 1, 0], [1, 0, 0, 0, 0], [1, 0, 2, 1, 2, 0, 0, 2, 1, 2], [1, 1, 1, 2], [1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(mod(i2,i1), in0) \\l int(2.0):{:\\nb1 = int(6.0) == min(abs(( int(5.0) - ( int(4.0) - max(abs(int(6.0)), min(min(abs(int(5.0)), max(in1, ( i0 - abs(( in1 * int(8.0) )) ))), int(0.0))) ) )), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 8, 8, 2, 3, 0, 3, 2, 1, 0, 0, 7, 0, 30, 5, 10, 4, 1]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1], [4, 4], [3], [], [], [1], [0], [], [], [], [3, 6, 3, 5], [0], [0, 3, 0, 2, 0, 1, 1], [1], [1], [], [0]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 \\ge max(res0, divInt(in0,int(4.0))):{:\\nin2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 4, 1, 7, 1, 1, 0, 1]}, {"genotype": [[0], [1], [1], [], [1], [1], [5], [], [], [], [], [], [], [], [], [0, 2], [1], [2, 1, 0], [1], [], [2], [1]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= mod(int(5.0),i2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 2, 2, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 6, 9, 5, 7, 0, 2, 7, 9, 1, 8, 3, 1, 9, 1, 8, 9, 5, 0, 1, 3, 6, 8], [0, 5, 5, 2], [1, 1, 2, 2, 1, 0], [0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 2, 0, 3, 2, 1, 1], [1, 0, 1, 0], [1, 0, 1], [3, 0, 2, 1, 0, 5, 5, 5, 5, 6, 1, 3, 6, 5, 5, 2, 1, 6, 1, 2, 6, 6, 6, 4, 1, 5], [1, 1, 0, 0, 1, 0], [2, 1, 0, 3, 1, 3, 0, 3, 3, 0, 2, 3, 1, 0, 0, 3, 1, 3, 3, 3, 1, 0, 3, 2, 0, 3, 0, 1, 3, 2, 0, 0, 2, 1, 0, 2, 3, 3, 0, 1, 3, 1, 3, 2, 1, 2, 1, 1, 2, 0, 3, 1, 1, 2, 1, 0, 3, 1, 2, 2, 0, 2, 1, 3, 0, 1, 1, 2, 3, 0, 1, 0, 2, 2, 3, 0, 2, 3, 1, 3, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [1, 2, 1, 0, 1, 2, 0, 2, 1, 1, 2, 2, 0, 0, 1, 2, 1, 2, 2, 2, 2, 0, 0], [0, 1, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0], [1, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = False\\nif mod(int(7.0),in0) \\l max(int(1.0), abs(i0)):{:\\nloopBreak% = 0\\nwhile True:{:\\ni2 += max(min(i1, divInt(max(int(6.0), i0),in2)), abs(int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 -= min(abs(max(int(5.0), in2)), max(( in2 * abs(res0) ), int(7.0)))\\n:}\\nb1 = b2\\nif abs(divInt(i1,in0)) != ( int(0.0) - res0 ):{:\\nloopBreak% = 0\\nwhile not ( min(min(in2, int(2.0)), max(int(7.0), abs(( int(9.0) * ( int(1.0) - int(8.0) ) )))) - divInt(in2,max(int(3.0), int(1.0))) ) != mod(int(9.0),i2):{:\\ni1 = abs(int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif b2:{:\\nres0 = ( ( i1 + mod(int(8.0),abs(i2)) ) - int(9.0) )\\n:}else:{:\\nb1 = ( not int(5.0) == mod(abs(res0),int(0.0)) and False )\\nres0 *= res0\\n:}\\nin1 = mod(( abs(i1) - ( min(int(1.0), min(int(3.0), int(6.0))) + int(8.0) ) ),in2)\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 5, 10, 24, 24, 4, 6, 1, 13, 4, 9, 4, 3, 26, 6, 84, 17, 23, 12, 8]}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 1, 0], [0], [1, 1, 0], [1], [6], [5, 4], [1], [], [1, 1], [0, 0], [], [], [0], [5, 0, 5, 6, 0, 3, 1], [0, 1], [0, 0, 0, 0, 0, 1], [], [], [0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i0\\nif in2 != res0:{:\\ni0 += in0\\nb1 = i1 \\le int(6.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 2, 1, 0, 2, 2, 0, 0, 1, 7, 2, 6, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 8, 0, 8], [2], [1], [], [0, 1], [0], [2], [], [], [1, 1, 2, 4], [0], [3, 2, 1, 0, 2, 1, 0, 3, 2, 2, 3, 1, 1, 1, 0], [1, 0, 1, 1], [2, 1, 2], [2], [1, 0, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not abs(mod(int(3.0),i1)) == ( int(8.0) * i1 )\\ni2 = max(divInt(mod(abs(int(8.0)),int(0.0)),int(8.0)), in1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 1, 1, 0, 2, 1, 1, 0, 0, 4, 1, 15, 4, 3, 1, 3]}, {"genotype": [[0], [1], [1], [], [0], [1], [9], [4], [0], [], [1], [0], [], [], [], [0, 5], [], [3, 0, 1, 0], [], [0], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(i0, int(9.0)) \\le in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 8, 5, 1, 5, 6, 3, 6, 4, 0, 3, 4, 4, 0, 3, 1, 5, 9, 3, 6, 9, 4, 8, 5, 6, 0, 5, 0, 1, 7, 2, 6, 6, 3, 2, 1, 7, 0, 1, 5, 6, 4], [4, 5], [0, 2], [1, 0], [0, 0, 1, 0, 1], [0, 0], [3, 3, 0], [], [], [5, 3, 0, 5, 3, 6, 1, 0, 4, 6, 3, 6, 0, 2, 3, 4, 1, 1, 0, 4, 6, 4, 2, 3, 1, 2, 6, 1, 5, 1, 0, 1, 6, 0], [], [2, 1, 0, 2, 0, 1, 2, 2, 1, 2, 3, 0, 3, 2, 1, 3, 2, 2, 0, 0, 3, 2, 0, 3, 1, 0, 3, 3, 1, 0, 1, 2, 3, 3, 2, 1, 2, 2, 0, 3, 1, 2, 1, 1, 2, 2, 2, 2, 2, 0, 3, 0, 1, 3, 3, 0, 2, 3, 2, 2, 2, 1, 3, 2, 1, 1, 1, 1, 2, 3, 2, 2, 0, 3, 0, 1, 0, 0, 3, 3, 0, 1, 0, 2, 1, 2, 3, 1, 1, 2, 0, 0, 0, 3, 3, 1, 3, 3, 2, 2, 1, 1, 1, 3, 1, 1, 1, 1, 3, 2, 2, 2, 3, 2, 3, 0, 0, 3, 2, 1, 2, 2, 2, 2, 3, 3, 0, 2, 1, 1, 0, 0, 2, 0, 2, 3, 3, 1, 2, 3, 3, 1, 2, 1, 3, 0, 1, 3, 1, 0, 0, 2, 1, 1, 1, 3, 1, 0, 3, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 2, 1, 2, 0, 0, 2, 0, 0, 0, 1, 2, 0, 2, 1, 1, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 2, 1, 0], [2, 1, 1, 0, 0, 2, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( ( ( int(7.0) * in2 ) \\le ( in0 - int(6.0) ) or b2 ) and ( divInt(int(8.0),( abs(i0) - abs(divInt(int(5.0),max(( ( in2 + in0 ) + max(mod(res0,abs(int(1.0))), i1) ), min(max(int(5.0), i0), int(6.0))))) )) * ( max(min(( int(3.0) * divInt(( in1 - min(int(6.0), mod(int(4.0),int(0.0))) ),( divInt(divInt(( divInt(res0,abs(in0)) - int(3.0) ),max(abs(res0), divInt(min(divInt(( divInt(int(4.0),min(mod(int(4.0),int(0.0)), int(3.0))) - int(1.0) ),mod(abs(mod(( i0 + min(i2, int(5.0)) ),in0)),in1)), min(min(i1, int(9.0)), i1)),( int(3.0) * ( max(int(6.0), int(9.0)) - mod(i0,in1) ) )))),res0) * abs(min(int(4.0), abs(max(( divInt(int(8.0),int(5.0)) * int(6.0) ), max(int(0.0), int(5.0)))))) )) ), int(0.0)), int(1.0)) * min(( divInt(mod(max(divInt(abs(in1),i2), max(( int(7.0) * mod(( ( mod(min(abs(in0), ( int(2.0) - int(6.0) )),i1) + i2 ) - mod(res0,( abs(min(int(6.0), ( min(min(int(3.0), ( int(2.0) + abs(i1) )), int(1.0)) * abs(int(7.0)) ))) + in2 )) ),i1) ), ( int(0.0) - int(1.0) ))),int(5.0)),max(int(6.0), i0)) + min(i1, res0) ), int(4.0)) ) ) != i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 43, 43, 2, 2, 2, 5, 2, 3, 0, 0, 34, 0, 163, 47, 39, 25, 22]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 1], [1], [1, 1, 0], [1, 1, 1, 1, 0, 1, 1], [4, 4, 7, 5, 2, 1, 1], [5, 5], [1], [], [1, 1], [0, 0], [], [], [], [1, 5, 4, 0, 1], [1, 0], [0, 3, 1, 1, 1, 1, 1, 2, 1, 3, 0, 0], [0], [1, 1], [1, 2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 != max(int(4.0), int(4.0)):{:\\nin2 -= int(7.0)\\nin1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(21.0) != ( int(1.0) * max(i0, i1) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 7, 7, 2, 1, 0, 2, 2, 0, 0, 0, 5, 2, 12, 1, 2, 2, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 0], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 2, 1, 2, 1, 1, 2, 0, 2, 2, 1, 2, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 5, 1, 6, 8, 6, 7, 8, 9, 9, 0, 8, 7, 8, 0, 4, 9, 7, 9, 2, 7, 0, 7, 8, 8, 5, 9, 8, 1, 8, 8, 8, 3, 2, 6, 3, 6, 3, 0, 4, 9, 1, 2, 1, 4, 7, 7, 8, 0, 5, 3, 9], [1, 3, 5, 5, 2, 3, 1, 0, 2], [0, 0, 1, 1, 0, 0], [1], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 0, 3, 1, 0], [1, 0], [0, 0, 0], [3, 3, 5, 4, 4, 6, 0, 1, 0, 5, 3, 0, 0, 3, 2, 6, 0, 0, 4, 0, 6, 6, 3, 1, 6, 4, 2, 2, 1, 6, 6, 0, 6, 2, 6, 3, 2, 2, 2, 4, 4, 3, 1, 2, 5, 6, 3, 3, 4, 6, 3, 0], [1, 1, 1, 0, 1], [1, 3, 3, 1, 2, 0, 2, 0, 2, 1, 3, 0, 1, 0, 3, 2, 1, 0, 2, 3, 3, 0, 3, 3, 1, 2, 0, 1, 1, 0, 3, 1, 0, 3, 2, 0, 0, 3, 0, 3, 2, 3, 0, 0, 2, 3, 3, 1, 2, 3, 2, 2, 3, 1, 2, 3, 2, 0, 3, 2, 1, 0, 0, 2, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 3, 3, 3, 2, 1, 1, 2, 3, 1, 1, 2, 0, 2, 1, 3, 3, 2, 3, 0, 3, 1, 3, 1, 3, 1, 1, 1, 3, 3, 2, 3, 0, 1, 0, 1, 2, 2, 3, 2, 2, 0, 3, 0, 3, 3, 1, 1, 1, 0, 2, 1, 0, 3, 0, 1, 2, 0, 1, 0, 1, 1, 2, 0, 2, 3, 3, 0, 1, 2, 1, 1, 1, 3, 3, 0, 1, 0, 1, 2, 2, 1, 2, 1, 3, 2, 1, 3, 1, 0, 3, 1, 1, 0, 3, 0, 0, 2, 2, 2, 1, 3, 0, 0, 3, 0, 3, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 2, 0, 0, 1, 1, 0, 2, 1, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 0, 2, 2, 1, 1, 2, 2, 1, 0, 0, 2, 1, 1, 1, 0, 2, 1, 2], [2, 0, 2, 0, 1, 2, 0, 2, 2, 1, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(5.0) \\g min(max(int(6.0), ( in0 * ( in0 + mod(int(5.0),max(in2, int(1.0))) ) )), in1):{:\\nin1 *= abs(( int(6.0) + res0 ))\\nif divInt(min(min(i0, max(max(int(8.0), divInt(i1,int(6.0))), int(7.0))), i0),min(int(8.0), in2)) \\ge abs(( in0 - i0 )):{:\\nloopBreak% = 0\\nwhile not max(i0, abs(divInt(abs(in0),i2))) != ( max(min(int(9.0), ( min(( ( max(int(9.0), divInt(abs(divInt(res0,abs(mod(int(0.0),i0)))),i0)) * divInt(max(in1, int(8.0)),i0) ) + divInt(res0,int(7.0)) ), mod(int(8.0),res0)) * int(0.0) )), in0) * divInt(i1,min(min(min(( int(4.0) - int(9.0) ), ( min(int(7.0), int(9.0)) - mod(res0,mod(int(2.0),min(max(( abs(in1) + max(int(7.0), max(int(0.0), abs(int(7.0)))) ), int(8.0)), int(8.0)))) )), max(min(mod(abs(i2),int(5.0)), i2), int(9.0))), ( mod(abs(mod(divInt(i1,max(res0, max(abs(int(8.0)), int(1.0)))),int(8.0))),res0) - ( int(8.0) * i0 ) ))) ):{:\\nb0 = abs(res0) != int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nloopBreak% = 0\\nwhile not False:{:\\ni2 -= ( res0 * int(3.0) )\\nin0 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(26.0) == int(36.0):{:\\ni2 = divInt(i2,( max(min(in1, int(3.0)), mod(int(0.0),int(4.0))) * int(9.0) ))\\nloopBreak% = 0\\nwhile b0:{:\\nif min(abs(in1), int(1.0)) \\ge in0:{:\\ni1 -= int(2.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( divInt(mod(int(1.0),divInt(int(4.0),max(mod(int(7.0),max(int(7.0), i2)), max(int(8.0), int(0.0))))),in2) \\g min(res0, in0) or mod(( mod(int(5.0),abs(in0)) * in1 ),max(res0, abs(in0))) \\l int(3.0) ):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i0 == int(9.0)\\nb0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 8, 9, 53, 53, 9, 6, 1, 16, 9, 7, 2, 3, 52, 5, 188, 41, 49, 20, 25]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [0, 1, 1], [1, 1, 1, 1, 1, 1], [2, 3, 4, 5, 7, 3], [2], [0], [], [1], [0], [], [], [], [3, 0, 2, 5, 2, 1, 0], [0, 0], [1, 0, 3, 0, 2, 2, 1, 3, 0, 2, 2, 0, 1, 2, 0, 3, 2, 1, 1, 3, 1], [0, 1, 1, 1, 0, 1], [1, 2, 2, 2], [1, 0], [1, 1, 1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(2.0) == in0\\ni0 = max(i2, ( mod(int(3.0),abs(in2)) - mod(mod(i2,int(4.0)),( i1 + abs(divInt(int(5.0),int(7.0))) )) ))\\ni0 = abs(int(3.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 7, 2, 21, 6, 4, 2, 4]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1, 1], [4, 6], [1], [0, 1], [], [1, 0], [0], [1], [0], [], [5], [], [2, 1, 1, 0], [1], [], [], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = divInt(int(4.0),int(6.0)) \\g in2\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 1, 0, 1, 0], [], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 9, 6, 8, 4, 0, 3, 5, 6, 7, 7, 2, 1, 4, 3, 1, 5, 8, 3, 1], [5, 0, 5], [2, 0, 2], [], [1, 0, 1, 0, 1], [0, 0, 0], [2, 2], [], [], [1, 1, 1, 6, 4, 2, 6, 5, 4, 2, 1, 0, 6, 6, 5, 4], [1, 1], [0, 3, 3, 3, 0, 1, 1, 1, 2, 2, 0, 0, 1, 3, 1, 0, 1, 3, 2, 3, 2, 1, 3, 3, 1, 2, 3, 0, 3, 1, 3, 0, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 3, 2, 0, 2, 2, 3, 0, 3, 0, 0, 1, 0, 1, 3, 1, 0, 2, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 0, 0, 0], [0, 2, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += i1\\nb2 = min(min(abs(i1), int(7.0)), int(2.0)) != int(9.0)\\nb0 = not mod(( res0 * in1 ),int(6.0)) \\l max(int(8.0), i2)\\nb2 = not int(4.0) != abs(divInt(max(( int(0.0) - max(min(int(3.0), mod(max(res0, abs(int(5.0))),max(in2, mod(divInt(int(6.0),( int(7.0) + int(7.0) )),int(2.0))))), ( ( int(1.0) + int(4.0) ) - ( min(mod(in1,divInt(mod(min(i2, min(i1, i0)),int(3.0)),res0)), int(1.0)) - min(int(5.0), res0) ) )) ), divInt(int(8.0),in2)),int(3.0)))\\nin1 += int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 0, 5, 21, 21, 3, 3, 0, 5, 3, 2, 0, 0, 16, 2, 65, 15, 15, 8, 9]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1], [3, 0, 8, 4, 1], [4], [2], [], [1], [0], [], [], [], [5, 2, 2], [], [0, 3, 0, 3, 3, 3, 1, 3, 0, 1, 2, 3, 1, 1, 1], [1], [1, 1, 2, 1, 1, 1], [], [1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in2 \\le max(i2, max(abs(max(int(3.0), max(i2, int(0.0)))), mod(max(int(8.0), int(4.0)),int(1.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 15, 1, 6, 0, 1]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [8, 9, 8], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(898.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 1, 0, 1], [0], [0, 1, 1, 0], [1, 1, 1, 1], [6, 2, 6, 1], [5, 5], [2, 1, 1], [], [1, 0, 1], [0, 0], [0], [], [0], [3, 5, 6, 0, 3], [0, 1], [1, 1, 0, 0, 3, 3, 1, 0, 1], [], [2, 0], [1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) != int(2.0):{:\\nb2 = b1\\nin0 = in2\\n:}\\nres0 -= i0\\nb1 = abs(min(int(6.0), in0)) != int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 4, 4, 2, 3, 0, 3, 2, 1, 0, 1, 5, 2, 9, 0, 2, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1], [4], [4, 4], [2], [0], [0, 1, 1], [0, 0], [3], [], [], [2, 0, 0], [], [0, 1, 0, 0], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( i2 \\le int(4.0) and i0 \\le i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 2, 1, 1, 3, 2, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1], [1, 1, 2, 0, 1], [1], [0, 1, 0, 1], [1, 1, 1], [2, 9, 3], [5, 4], [2, 2], [], [1, 0, 1], [0, 0], [1], [0], [], [2, 0, 3, 2, 3], [0, 1], [1, 1, 0, 0, 0, 1], [], [], [0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(2.0) != int(9.0)\\ni2 = i0\\nloopBreak% = 0\\nwhile True:{:\\nb2 = in0 \\le i2\\nin0 += int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 3, 3, 2, 2, 0, 3, 2, 1, 1, 0, 5, 2, 6, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 0, 1, 2, 0, 1, 2, 2, 2, 1, 1], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 7, 8, 9, 8, 1, 8, 4, 0, 4, 5, 5, 8, 6, 3, 9, 1, 6, 2, 7, 8, 6], [4, 2, 5, 2, 3, 1], [0, 2, 0, 0, 2, 0], [0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 3, 0, 0], [], [], [1, 2, 0, 6, 1, 5, 6, 6, 5, 1, 1, 5, 3, 6, 5, 3, 2, 1, 4, 5, 4, 5, 5, 2, 0, 3, 0, 2, 2, 3, 6, 2, 2, 6, 3, 5, 5], [0, 1, 0], [0, 1, 1, 1, 0, 3, 3, 0, 0, 0, 0, 0, 3, 2, 1, 0, 1, 3, 2, 2, 2, 1, 1, 1, 3, 2, 2, 2, 0, 0, 3, 3, 3, 2, 1, 3, 2, 2, 2, 0, 0, 3, 1, 0, 2, 1, 2, 2, 3, 3, 2, 2, 0, 1, 2, 1, 1, 0, 0, 0, 3, 1, 2, 3, 0, 1, 0, 0, 2, 0, 0, 1, 2, 0, 1, 1, 3, 1, 3, 0, 1, 2, 0, 2, 0, 2, 1, 2, 2, 0, 3, 0, 0, 0, 2, 2, 2, 2, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1], [1, 0, 0, 1, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 0, 2], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\le int(4.0):{:\\nb0 = int(1.0) == int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\nloopBreak% = 0\\nwhile b2:{:\\nres0 -= min(abs(i1), in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = res0\\nloopBreak% = 0\\nwhile ( b0 and in2 != i1 ):{:\\nloopBreak% = 0\\nwhile abs(( int(8.0) + i1 )) == int(9.0):{:\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = min(mod(( ( int(8.0) + int(1.0) ) - int(8.0) ),min(divInt(( mod(in2,in0) - min(min(min(mod(int(4.0),abs(mod(divInt(( res0 * in2 ),max(int(0.0), in0)),( int(4.0) - divInt(divInt(min(abs(( ( i2 + int(5.0) ) - ( int(5.0) * int(8.0) ) )), i1),in1),in2) )))), max(int(6.0), divInt(max(in1, int(3.0)),in2))), in2), ( i2 - i0 )) ),int(9.0)), divInt(in0,int(1.0)))), int(6.0)) \\ge max(int(2.0), max(i0, int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = mod(i2,( i2 + ( int(8.0) * ( mod(in0,max(res0, i2)) * i2 ) ) )) \\g ( mod(divInt(( res0 + in0 ),int(6.0)),in2) * in2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 23, 23, 6, 6, 1, 10, 6, 4, 0, 0, 37, 3, 103, 29, 17, 16, 14]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [1, 0, 1], [1, 1], [8, 4], [], [0, 0], [], [0, 0], [], [2, 0], [], [], [0, 5], [0, 0], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(8.0)\\nb0 = not b0\\nin2 = int(4.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 4, 3, 2, 2, 6, 8, 4, 1, 6, 1, 5, 1, 0, 1, 1, 7], [5], [0], [], [1], [0], [], [], [], [0, 4, 6, 3, 1, 0, 1, 3, 5, 2, 1, 5, 5, 6, 2, 2, 3], [], [0, 2, 3, 1, 1, 3, 3, 3, 3, 0, 2, 3, 0, 0, 0, 3, 2, 2, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 1, 2, 3, 3, 2, 3, 3, 3, 1, 1, 2, 0, 3, 1, 2, 3, 3, 2, 2, 0, 3, 3, 2, 1, 3, 1, 2, 1, 1, 1, 0, 3, 2, 3, 0, 1, 0, 2, 0, 0, 0, 3, 0, 2, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 0, 1, 2, 2, 0, 1, 1], [0, 2, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i0 != ( min(int(5.0), int(5.0)) + max(max(max(min(in1, divInt(max(res0, in0),i1)), abs(divInt(( mod(int(4.0),int(3.0)) * int(2.0) ),i0))), ( mod(( int(2.0) + i1 ),int(6.0)) - ( abs(abs(mod(min(abs(max(int(8.0), int(4.0))), ( in0 + min(int(1.0), divInt(abs(min(divInt(divInt(in2,max(abs(divInt(int(6.0),abs(int(1.0)))), divInt(int(5.0),int(1.0)))),int(0.0)), i2)),min(( max(i1, int(1.0)) - in2 ), ( in2 + res0 )))) )),i2))) - max(i2, divInt(int(1.0),int(7.0))) ) )), in0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 18, 18, 1, 1, 0, 1, 1, 0, 0, 0, 17, 0, 75, 19, 21, 8, 11]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [1], [6], [5], [0], [], [1], [0], [], [], [], [4, 6, 1], [1], [0, 0, 1], [], [], [1], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = in1 != res0\\ni1 -= int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 0, 0, 2, 2, 1, 0, 2, 1, 1], [1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 2, 2, 9, 2, 1, 8, 2, 4, 7, 5, 9, 6, 5, 8, 3, 9, 4, 5, 5, 7, 8, 2, 2, 5, 6], [4, 5, 4, 4, 4, 0, 2, 2], [2, 2, 0, 1, 1, 1, 1, 1], [0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 1, 0, 1, 3, 3, 1, 0], [0, 0, 1, 1], [0, 1, 0], [5, 6, 2, 3, 0, 2, 2, 4, 0, 2, 3, 4, 6, 5, 1, 6, 5, 4, 4, 0, 4, 1, 6, 3, 1, 0, 4, 3, 5, 5, 1, 4, 6, 3, 5], [], [2, 0, 2, 1, 2, 1, 3, 1, 1, 1, 2, 0, 3, 1, 2, 3, 0, 1, 0, 3, 0, 0, 2, 1, 3, 1, 1, 2, 0, 1, 0, 3, 2, 0, 0, 1, 2, 2, 3, 0, 2, 2, 3, 2, 1, 2, 3, 3, 2, 3, 0, 1, 1, 1, 2, 1, 2, 2, 0, 2, 0, 2, 2, 2, 1, 0, 3, 0, 0, 1, 2, 3, 0, 0, 3, 3, 0, 2, 0, 0, 1, 0, 0, 2, 0, 3, 2, 3, 2, 2, 0, 3, 3, 3, 1, 0, 1, 0, 2, 0, 0, 3, 2, 3, 1, 1, 0, 2, 1, 0, 0, 2, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [2, 2, 2, 0, 2, 1, 2, 1, 1, 2, 1, 0, 2, 1, 0, 0, 0, 0, 1, 1, 2, 1], [0, 0, 1, 2, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 1, 1, 2, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( in2 + mod(int(9.0),( int(9.0) + abs(int(2.0)) )) ) \\le int(2.0):{:\\nif True:{:\\nb2 = int(9.0) != ( res0 - abs(int(2.0)) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( True and b0 )\\nif False:{:\\nloopBreak% = 0\\nwhile mod(abs(i2),int(1.0)) \\le in0:{:\\nb1 = ( ( min(i0, i2) \\le divInt(int(8.0),abs(int(2.0))) or False ) and int(4.0) \\le ( i2 * int(7.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in1 \\l max(( i0 * i2 ), int(5.0))\\n:}else:{:\\nif mod(( abs(in0) * ( ( max(( int(9.0) + ( max(abs(divInt(max(in1, int(6.0)),int(5.0))), int(8.0)) - ( int(3.0) * divInt(mod(res0,divInt(in2,divInt(( mod(int(9.0),i1) + min(res0, in2) ),int(4.0)))),divInt(abs(in1),in1)) ) ) ), max(min(i0, ( in1 * i1 )), int(5.0))) - res0 ) + in0 ) ),( i1 + min(( min(( mod(i0,min(max(max(int(5.0), in1), int(7.0)), in0)) - ( in2 - in2 ) ), abs(mod(max(int(8.0), int(2.0)),i1))) * ( int(2.0) + in1 ) ), res0) )) == ( in0 - int(5.0) ):{:\\nb1 = int(6.0) == in2\\n:}\\nb1 = b1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 27, 27, 8, 8, 3, 17, 8, 9, 4, 3, 35, 0, 116, 32, 22, 19, 13]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 2, 0, 2, 2, 1, 2, 1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 9, 6, 6, 6, 7, 9, 8, 8, 7, 4, 1, 4, 4, 9, 0, 9, 9, 5, 9, 5, 1, 9, 0, 7, 6, 8, 7, 5, 7, 5, 9, 6, 3, 7, 2, 9, 8, 8, 4, 5, 8, 4, 0, 0, 9, 4, 1, 1, 9, 1, 1, 1, 9, 3, 3, 3, 5, 7, 6, 1], [2, 2, 5, 2, 0, 2, 5], [1, 1, 1, 1, 2, 2, 1, 1, 1, 0], [0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 2, 0, 2, 2, 0, 2, 1, 2, 1, 3, 3, 0, 1], [1, 1, 0, 0], [1, 0, 0, 0], [5, 0, 4, 0, 5, 3, 3, 5, 6, 5, 1, 2, 2, 1, 4, 4, 0, 6, 0, 6, 3, 3, 6, 0, 5, 6, 2, 4, 1, 6, 1, 2, 1, 0, 2, 4, 2, 6, 5, 5, 0, 4, 0, 1, 5, 6, 3, 2, 1, 6, 2, 6, 2, 0, 0, 5, 6, 6], [0, 0, 1], [2, 1, 0, 1, 3, 1, 3, 2, 2, 3, 2, 2, 2, 1, 0, 3, 2, 2, 2, 3, 0, 3, 3, 0, 3, 1, 3, 3, 1, 0, 0, 0, 2, 0, 3, 3, 0, 2, 1, 3, 1, 3, 2, 1, 1, 1, 2, 2, 2, 3, 3, 1, 0, 1, 0, 3, 1, 1, 3, 1, 0, 2, 2, 1, 1, 1, 0, 2, 3, 2, 3, 2, 2, 2, 0, 1, 3, 2, 3, 1, 1, 2, 0, 1, 3, 2, 1, 0, 3, 2, 2, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 2, 0, 1, 3, 3, 0, 1, 0, 1, 1, 2, 2, 1, 2, 1, 3, 2, 2, 2, 0, 3, 2, 2, 1, 3, 1, 2, 2, 2, 3, 0, 3, 0, 2, 3, 0, 3, 0, 3, 3, 3, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 3, 3, 3, 1, 3, 1, 1, 3, 3, 0, 3, 1, 0, 3, 2, 2, 1, 3, 2, 1, 3, 0, 0, 1, 3, 2, 1, 0, 0, 0, 3, 1, 1, 2, 1, 3, 0, 1, 1, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 1, 3, 0, 3, 1, 0, 3, 0, 1, 3, 0, 0, 0, 1, 0, 0, 2, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 1, 2, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 2, 1, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 1, 0, 1, 2, 0, 0, 2, 2, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 1, 2, 0, 1, 1, 0, 0, 0, 2, 0, 2, 2], [1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 0, 1, 1, 2, 2, 0, 0, 0, 1, 0, 0, 1, 1, 2, 2, 1, 0, 0, 2, 1, 2, 1, 0, 2], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( divInt(int(0.0),in2) == int(4.0) and not False )\\nb1 = not max(int(9.0), abs(mod(( max(( ( ( int(6.0) - i0 ) - abs(( ( divInt(min(in1, max(abs(i0), max(int(6.0), abs(abs(int(6.0)))))),in2) * in0 ) - in0 )) ) * mod(in2,max(max(res0, ( int(7.0) * abs(int(9.0)) )), max(divInt(int(8.0),int(8.0)), int(7.0)))) ), ( ( divInt(min(max(int(4.0), in2), int(1.0)),i1) * max(int(4.0), int(4.0)) ) * min(int(9.0), i2) )) * divInt(divInt(int(0.0),int(9.0)),int(9.0)) ),i2))) == ( max(( min(( divInt(( i1 * int(5.0) ),max(( abs(int(9.0)) + int(5.0) ), ( in1 - int(1.0) ))) - min(mod(int(9.0),in1), min(( ( abs(( abs(i0) * abs(max(abs(min(abs(int(0.0)), ( res0 * int(7.0) ))), max(abs(i0), int(6.0)))) )) + res0 ) + int(8.0) ), int(7.0))) ), divInt(mod(int(5.0),( int(7.0) + min(divInt(( ( in0 - abs(( divInt(int(5.0),max(int(9.0), ( ( mod(min(in0, max(res0, divInt(abs(i0),max(in2, min(max(abs(int(6.0)), int(3.0)), mod(int(7.0),int(2.0))))))),res0) + int(9.0) ) + i2 ))) - ( ( min(min(max(int(8.0), min(int(8.0), int(4.0))), min(min(in1, max(int(5.0), i1)), min(mod(mod(int(8.0),max(divInt(int(4.0),abs(res0)), i1)),int(0.0)), min(mod(int(0.0),i2), i1)))), i0) - max(int(9.0), int(4.0)) ) * ( int(1.0) * max(i2, int(1.0)) ) ) )) ) - int(9.0) ),( int(1.0) + in1 )), divInt(divInt(i2,int(1.0)),int(1.0))) )),( ( int(9.0) + min(res0, min(int(3.0), in2)) ) * min(in2, int(3.0)) ))) - abs(i0) ), in1) * i0 )\\nb1 = int(3.0) != i1\\nin2 = res0\\nif b1:{:\\nb2 = not not b2\\nif ( min(abs(int(5.0)), ( in0 - i2 )) + i1 ) == res0:{:\\nif not False:{:\\nb1 = not True\\n:}\\n:}\\nif i2 \\l int(7.0):{:\\nres0 = int(6.0)\\n:}\\nb1 = i2 == i0\\n:}else:{:\\ni0 *= abs(int(1.0))\\nb1 = ( divInt(in2,res0) != res0 or ( b0 or True ) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 14, 14, 4, 10, 62, 62, 7, 10, 3, 23, 7, 16, 4, 4, 58, 3, 237, 57, 63, 34, 24]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 2, 6, 8, 9, 4, 2, 9, 7, 2, 7, 3, 0, 4, 3, 8, 7, 8, 1, 5, 0, 2], [0, 1, 1], [0], [1, 0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0], [2, 3, 2, 3], [], [], [4, 6, 4, 4, 4, 0, 3, 1, 2, 2, 2, 2, 2, 4, 3, 6], [0], [0, 2, 0, 0, 0, 3, 3, 1, 0, 2, 3, 0, 2, 2, 3, 3, 0, 2, 2, 3, 1, 0, 3, 0, 0, 1, 2, 1, 2, 1, 2, 3, 3, 1, 1, 1, 1, 2, 2, 1, 2, 1, 3, 0, 0, 1, 3, 2, 1, 3, 3, 1, 2, 3, 1, 0, 2, 0, 0, 1, 3, 1, 1, 2, 3, 1, 3, 1, 1, 2, 1, 1], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0, 0, 0, 2, 1], [0, 1, 2, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = res0\\nb0 = not ( not ( divInt(in1,in1) \\l in1 or min(min(int(7.0), i0), ( min(in0, ( mod(min(min(i1, ( ( min(int(1.0), i2) + min(i2, i2) ) - int(2.0) )), divInt(int(6.0),divInt(int(8.0),divInt(max(abs(int(9.0)), int(4.0)),int(2.0))))),int(9.0)) * ( divInt(int(7.0),divInt(int(2.0),max(i2, i2))) - int(7.0) ) )) - abs(mod(int(3.0),max(min(int(0.0), ( min(int(4.0), in1) + mod(in0,res0) )), int(3.0)))) )) \\g min(int(8.0), int(7.0)) ) and ( abs(int(8.0)) - max(int(1.0), int(5.0)) ) \\g ( int(0.0) - int(2.0) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 23, 23, 3, 1, 2, 7, 3, 4, 0, 0, 16, 1, 72, 17, 17, 8, 9]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [4, 8], [3], [2], [], [1], [0], [], [], [], [], [], [1, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(4.0) \\ge abs(int(8.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 2, 1, 0, 2, 2, 0], [1, 1, 0, 1], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 3, 0, 8, 2, 9, 2, 2, 4, 6, 0, 3, 5, 3, 1, 7, 9, 5, 5, 5, 0, 5, 3, 5, 1, 8, 2, 8, 8, 3, 8, 8, 3, 3, 4, 9], [4, 4, 4, 3, 2, 3, 1, 3, 0], [0, 1, 2, 0], [0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 2, 3], [], [0], [1, 6, 5, 6, 5, 6, 0, 4, 3, 6, 0, 1, 2, 6, 1, 1, 4, 5, 4, 1, 4, 4, 4, 4, 2, 2, 3, 6, 1, 2, 6, 5, 0], [], [3, 0, 2, 1, 3, 2, 2, 3, 0, 2, 2, 0, 1, 1, 3, 2, 2, 2, 2, 3, 0, 3, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0, 2, 2, 3, 3, 1, 3, 1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 3, 1, 0, 1, 1, 1, 2, 2, 0, 2, 1, 3, 2, 1, 0, 2, 1, 0, 0, 3, 2, 0, 2, 0, 3, 1, 2, 1, 2, 3, 1, 2, 3, 2, 0, 3, 1, 2, 2, 3, 2, 0, 0, 2, 1, 1, 2, 3, 3, 0, 3, 2, 0, 0, 3, 2, 2, 1, 0, 2, 3, 0, 3, 2, 1, 1, 2, 2, 1, 3, 1, 3, 0, 2, 1, 1, 1, 1, 3, 3, 3, 3, 0, 0, 2, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 1, 0, 1, 2, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 0, 1, 2, 2, 2], [1, 2, 0, 0, 2, 2, 1, 0, 2, 2, 1, 2, 0, 1, 2, 0, 1, 0, 2, 0, 2], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( abs(i1) \\le ( int(4.0) - abs(divInt(divInt(abs(res0),mod(mod(in2,int(8.0)),int(3.0))),abs(mod(divInt(( ( max(res0, min(int(0.0), int(8.0))) * in2 ) + int(2.0) ),res0),i0)))) ) and in1 \\le int(9.0) ):{:\\nloopBreak% = 0\\nwhile in0 \\le res0:{:\\nb0 = i0 \\ge divInt(int(2.0),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = divInt(( max(abs(int(2.0)), abs(int(4.0))) + ( int(6.0) * ( int(0.0) * i2 ) ) ),int(3.0)) == divInt(res0,i1)\\nif ( abs(int(5.0)) \\ge i1 or int(3.0) \\g int(1.0) ):{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = not ( int(7.0) \\ge divInt(mod(in1,( int(9.0) - abs(( int(5.0) + in2 )) )),( int(5.0) * in1 )) or i1 \\l min(divInt(in1,divInt(in1,min(int(5.0), ( int(0.0) * divInt(max(int(5.0), mod(abs(( in1 - abs(int(3.0)) )),( ( abs(mod(in1,i2)) * divInt(int(5.0),int(1.0)) ) + mod(abs(max(i2, min(mod(in0,res0), abs(( ( int(8.0) - i1 ) * ( max(i2, abs(( int(2.0) + int(8.0) ))) - ( ( int(8.0) + max(int(3.0), min(res0, ( int(8.0) * int(8.0) ))) ) + int(3.0) ) ) ))))),int(3.0)) ))),max(abs(abs(abs(in2))), i0)) )))), ( int(4.0) * int(9.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 37, 37, 9, 4, 3, 14, 9, 5, 0, 1, 33, 0, 139, 40, 29, 21, 19]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 1, 1, 2, 1, 2, 0], [0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 8, 9, 0, 9, 5, 5, 2, 9, 8, 3, 4, 1, 8, 4, 7, 4, 6, 8, 0, 9, 6, 2, 9, 8, 3, 6, 0, 7, 0, 6, 2, 8, 5, 5, 7, 0, 7, 0], [0, 1, 0, 1, 3], [1, 0, 0, 0], [], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0], [], [0], [5, 0, 4, 0, 3, 0, 4, 5, 0, 1, 6, 1, 5, 1, 4, 2, 0, 3, 6, 3, 0, 3, 2, 4, 0, 1], [0], [2, 3, 3, 1, 2, 2, 0, 2, 2, 1, 3, 2, 0, 2, 1, 0, 2, 1, 3, 2, 2, 1, 1, 0, 3, 2, 2, 3, 2, 0, 3, 2, 1, 2, 2, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 2, 0, 3, 0, 3, 0, 2, 0, 0, 2, 2, 1, 1, 1, 3, 2, 1, 2, 2, 1, 3, 1, 1, 3, 0, 1, 3, 1, 1, 1, 2, 3, 1, 0, 1, 2, 3, 3, 0, 2, 2, 0, 2, 0, 0, 0, 1, 1, 1, 2, 1, 3, 0, 2, 1, 2, 3, 2, 3, 3, 1, 1, 1, 2, 2, 3, 2, 3, 0, 1, 0, 0, 0, 1, 0, 2, 1, 3, 3, 3, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [2, 2, 1, 1, 1, 2, 2, 0, 0, 1, 0, 1, 0, 1, 2, 1, 0, 2, 0, 0, 0, 2, 1, 2, 0, 2, 2], [1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 0, 1, 1, 1, 1, 0, 1, 0, 0, 2, 2], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(abs(abs(int(9.0))),( ( in2 - divInt(mod(int(0.0),max(( i0 - ( int(8.0) - in1 ) ), divInt(int(9.0),max(( ( int(0.0) - int(9.0) ) * i0 ), max(( divInt(abs(( in0 * abs(( int(5.0) - mod(( int(5.0) * int(2.0) ),min(min(int(9.0), ( int(8.0) - int(3.0) )), int(4.0))) )) )),i0) - int(1.0) ), int(8.0)))))),divInt(in1,max(in2, min(i0, ( i1 * res0 ))))) ) * mod(mod(int(4.0),int(7.0)),int(4.0)) )) \\l max(( int(6.0) + ( divInt(int(8.0),min(int(0.0), int(9.0))) - max(i1, int(6.0)) ) ), abs(int(2.0))):{:\\nb1 = int(9.0) \\g int(8.0)\\nin2 = mod(max(int(3.0), i1),int(6.0))\\nloopBreak% = 0\\nwhile ( min(abs(in1), ( divInt(i2,mod(i0,in0)) - res0 )) - int(0.0) ) \\l int(7.0):{:\\nb0 = int(0.0) \\g ( int(6.0) - min(in0, ( int(2.0) + ( min(( min(abs(int(8.0)), int(5.0)) - int(5.0) ), ( ( max(divInt(abs(i0),int(7.0)), in0) + i2 ) + in1 )) * int(0.0) ) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i0 \\ge ( int(7.0) * min(abs(abs(int(0.0))), i1) ):{:\\nb0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 40, 40, 5, 4, 0, 6, 5, 1, 0, 1, 26, 1, 129, 37, 27, 23, 14]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 1], [], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 7, 9, 9, 8, 8, 9, 7, 1, 5, 1, 7, 3, 2, 5, 7, 3], [1, 4, 4], [1, 1], [0], [0, 1, 1, 1], [0, 0, 0], [3], [], [], [6, 1, 5, 5, 5, 3, 1, 2, 5, 3], [0, 1], [3, 3, 2, 1, 3, 3, 2, 0, 2, 2, 1, 3, 1, 3, 3, 1, 1, 1, 3, 3, 1, 2, 0, 1, 2, 3, 1, 1, 2, 1, 0, 0, 2, 2, 2, 0, 1, 3, 0, 0, 3, 3, 2, 2, 1, 1, 1, 3, 1, 3, 0, 2, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [2, 2, 2, 2, 0, 2, 2, 0, 2, 1, 0, 2, 2, 1, 2], [0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( abs(abs(mod(int(7.0),abs(abs(divInt(res0,mod(( int(8.0) + min(int(7.0), abs(abs(int(9.0)))) ),int(9.0)))))))) \\g int(8.0) and min(abs(int(8.0)), mod(i1,int(9.0))) \\le ( max(int(7.0), int(1.0)) + ( int(5.0) - in2 ) ) )\\nin2 = in2\\nin0 -= divInt(mod(divInt(i1,int(1.0)),min(i2, in2)),abs(abs(( ( int(7.0) - int(3.0) ) - int(2.0) ))))\\nb1 = max(int(5.0), abs(in0)) \\le ( int(7.0) - int(3.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 18, 18, 3, 2, 1, 4, 3, 1, 0, 0, 10, 2, 54, 13, 15, 7, 7]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [8, 4], [], [], [], [], [], [], [], [], [0, 6, 5, 4], [1], [3, 2, 1, 0, 2, 0, 2, 0, 1], [1, 0, 0], [1], [2, 1, 1], [0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= max(divInt(int(8.0),res0), ( in2 - ( in1 - int(4.0) ) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 9, 3, 1, 3, 1]}, {"genotype": [[0], [0, 1, 1, 1, 0, 1], [0, 2, 2, 1, 1, 1], [0, 1], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 1, 6, 8, 5, 5, 4, 3, 7, 0, 4, 8, 5, 4, 5, 2, 0], [5, 2, 5, 0], [1, 1, 2, 1], [0], [1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0], [3, 2, 1, 0], [1], [1], [3, 3, 1, 2, 6, 0, 3, 0, 1, 5, 5, 3, 5, 6, 0, 5, 1, 2, 1, 5, 4, 1, 3, 3, 6, 0, 3, 1, 5, 0, 5, 2, 4], [1], [2, 3, 0, 3, 3, 0, 0, 0, 3, 1, 0, 1, 0, 0, 1, 2, 0, 3, 2, 2, 1, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 3, 0, 2, 0, 2, 3, 0, 0, 2, 0, 2, 3, 0, 3, 3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 1, 2, 2, 3, 0, 3, 2, 2, 3, 0, 1, 0, 0, 3, 0, 1, 2, 2, 0, 0, 1, 1, 0, 0, 2, 3, 1, 1, 2, 3, 0, 2, 2, 0, 0, 3, 1, 1, 0, 0, 3, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 2, 1, 1, 2, 0, 0, 2, 1, 2, 0, 0, 0, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 0], [1, 0, 0, 2, 2, 1, 1, 0, 0, 2, 1, 1, 0, 2, 1, 0, 2], [1, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( min(in0, max(abs(in0), i1)) - i2 ) != max(int(7.0), res0)\\nif ( int(8.0) == i0 and not False ):{:\\nloopBreak% = 0\\nwhile in0 != int(1.0):{:\\nb1 = mod(i0,max(mod(mod(int(6.0),( ( int(8.0) + i1 ) + ( abs(( ( min(min(abs(in2), ( in2 * ( max(in0, in2) * ( res0 - ( abs(i0) - min(min(min(int(5.0), max(int(5.0), in2)), max(i1, i2)), abs(int(4.0))) ) ) ) )), mod(divInt(max(i1, min(mod(( max(in2, int(3.0)) + in1 ),i1), abs(in0))),int(7.0)),( ( in0 + res0 ) * int(0.0) ))) - int(4.0) ) - i0 )) + in0 ) )),( min(int(8.0), int(5.0)) * ( max(i1, mod(( in2 - i0 ),abs(int(4.0)))) + int(5.0) ) )), in2)) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = b1\\nin1 *= min(int(2.0), int(0.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 18, 18, 4, 4, 1, 8, 4, 4, 1, 1, 33, 1, 98, 23, 25, 17, 7]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [], [3], [1, 1, 0], [], [1, 0], [0], [0], [], [], [6, 3, 5], [], [2, 0, 0, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = mod(res0,in0) \\ge in2\\nb1 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 1, 3, 0, 2, 1, 1, 0, 0, 3, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 2], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 7, 6, 9, 7, 6, 2, 5, 6, 0, 8, 3, 1, 3, 9, 3, 4, 1, 4, 5, 1, 4, 2, 7, 5, 1, 2, 9, 3, 4, 2, 8, 1, 8], [0, 4, 3, 0, 4, 2, 3, 2], [1, 0, 2, 0, 2, 2, 2, 2], [1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 0, 1, 3, 1, 3, 1, 0, 2, 2, 2, 3, 0], [1, 0, 0], [1, 1, 1], [6, 0, 1, 2, 0, 3, 3, 4, 2, 4, 5, 0, 2, 1, 2, 4, 4, 3, 2, 0, 0, 3, 5, 1, 1, 1, 4, 6, 2, 0, 2, 3, 0, 0, 4, 4, 0, 6, 1, 1, 3, 1, 4], [1], [0, 0, 3, 0, 2, 1, 1, 1, 2, 0, 0, 3, 2, 0, 2, 1, 0, 1, 2, 2, 2, 3, 1, 1, 3, 0, 2, 1, 3, 0, 3, 2, 2, 3, 1, 1, 0, 1, 3, 2, 3, 3, 0, 2, 2, 0, 3, 0, 1, 3, 1, 0, 3, 2, 0, 0, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 2, 2, 3, 3, 0, 3, 0, 3, 3, 0, 1, 1, 3, 2, 2, 0, 0, 1, 2, 2, 2, 3, 1, 1, 1, 2, 0, 2, 0, 0, 1, 0, 0, 1, 1, 0, 2, 1, 0, 1, 2, 3, 1, 2, 0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1, 0, 3, 0, 0, 3, 3, 3, 2, 1, 3, 0, 0, 0, 2, 2, 0, 1, 3, 3, 3, 0, 0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 2, 0, 0, 2, 2, 1, 0, 2, 1, 2, 1, 2, 0, 0, 1, 0, 2, 2, 1, 2, 2, 1], [0, 0, 2, 2, 1, 1, 2, 1, 0, 2, 1, 1, 0, 2, 0, 0, 2, 1, 1, 2], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif res0 \\l i0:{:\\ni1 += abs(i2)\\n:}else:{:\\nloopBreak% = 0\\nwhile ( mod(int(8.0),int(3.0)) \\le int(7.0) or divInt(i0,in0) \\ge max(( in0 + ( int(6.0) * in1 ) ), int(9.0)) ):{:\\nif not ( mod(( abs(int(7.0)) * int(6.0) ),max(i2, divInt(int(2.0),min(in1, max(( ( abs(int(5.0)) - int(6.0) ) - in2 ), int(0.0)))))) * min(divInt(min(min(i0, ( divInt(i2,abs(i1)) - int(8.0) )), min(int(3.0), i2)),min(( in1 + in1 ), abs(int(1.0)))), mod(( mod(( ( ( ( mod(abs(max(int(3.0), int(9.0))),int(3.0)) * ( divInt(min(abs(in0), max(i2, abs(max(i0, int(4.0))))),int(1.0)) - abs(divInt(mod(i0,in0),int(4.0))) ) ) - ( divInt(divInt(min(int(5.0), int(1.0)),int(4.0)),( in2 + mod(i1,i1) )) * int(2.0) ) ) + i1 ) + in1 ),int(7.0)) * int(5.0) ),res0)) ) \\l ( int(1.0) - i2 ):{:\\nb1 = b0\\n:}else:{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(2.0) \\le ( min(int(9.0), mod(i0,int(3.0))) - int(4.0) )\\nloopBreak% = 0\\nwhile ( True and ( i2 == mod(divInt(( mod(in0,i0) * i0 ),int(2.0)),int(8.0)) and True ) ):{:\\nif b2:{:\\nb2 = not not not in1 \\ge max(in1, i0)\\n:}else:{:\\nb2 = ( min(abs(abs(mod(int(1.0),max(res0, i1)))), i1) == mod(divInt(in0,int(8.0)),abs(abs(max(i1, in1)))) or b2 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 35, 35, 8, 8, 4, 22, 8, 14, 3, 3, 43, 1, 150, 41, 32, 20, 22]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1], [1, 1, 7, 3, 0, 8], [4, 5], [2, 1, 1], [0], [0, 0, 1, 1], [0, 0], [0, 3], [], [], [5, 2, 0], [], [1, 1, 1, 3, 3, 1, 2, 2, 2, 1, 0, 1, 0, 0], [0, 1, 1], [1, 0], [2], [1, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\nb1 = ( int(1.0) \\le int(1.0) and int(7.0) != max(min(int(3.0), ( mod(mod(int(0.0),in2),int(8.0)) * i2 )), i0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 6, 6, 2, 3, 1, 4, 2, 2, 0, 0, 3, 0, 14, 3, 2, 1, 2]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1], [4, 2, 3, 7], [2, 3], [1, 1], [], [1, 1], [0, 0], [], [], [], [4, 2, 6, 2], [], [1, 0, 0, 3, 3, 2, 0, 2, 3, 1, 3, 2, 1, 0, 1], [0, 0, 1], [0, 2, 2, 2], [0, 2], [0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(4.0) == in1\\nb1 = i2 \\ge min(abs(( res0 + ( abs(int(2.0)) * abs(divInt(int(3.0),i2)) ) )), int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 2, 2, 0, 2, 2, 0, 0, 0, 4, 0, 15, 3, 4, 2, 1]}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 1, 0, 2, 2, 1, 0, 2, 2, 1, 2, 0], [1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 5, 3, 6, 4, 5, 8, 1, 6, 4, 0, 6, 3, 5, 6, 9, 2, 9, 0, 9, 9, 8, 4, 7, 2, 5, 9, 1, 6, 4, 5, 6, 8, 8, 6, 4, 8, 7, 8, 2, 9, 8, 7, 5, 0, 9, 7, 8, 2, 9, 7, 2, 8, 2, 7, 0, 8, 9, 0, 0, 5, 8, 9, 6, 1, 2, 9, 4, 9, 4, 6, 4, 5, 1, 5, 4, 4, 6], [5, 4, 4, 1, 4, 0, 2, 3, 4, 2, 2], [1, 1, 0, 2, 1, 0], [1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 3, 0, 2, 0, 3], [1], [1, 0, 1], [6, 0, 4, 6, 3, 3, 1, 0, 2, 6, 6, 5, 6, 6, 0, 4, 4, 1, 2, 0, 6, 1, 5, 4, 5, 1, 2, 3, 3, 5, 3, 5, 5, 2, 4, 6, 3, 6, 6, 1, 3, 5, 2, 5, 4, 3, 3, 1, 2, 0, 4, 0, 3, 6, 4, 3, 1, 0, 3, 2, 4, 1, 4, 2, 5, 0, 5, 1, 0, 4, 5, 0, 2, 3, 3, 1, 6, 6, 2, 5, 1], [0, 1, 0], [3, 3, 0, 2, 2, 3, 0, 1, 1, 3, 1, 1, 2, 3, 2, 3, 2, 3, 2, 0, 2, 0, 1, 0, 3, 0, 3, 2, 1, 1, 1, 3, 2, 0, 0, 1, 2, 0, 1, 2, 1, 1, 0, 2, 3, 2, 3, 2, 3, 2, 0, 3, 0, 0, 1, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 0, 1, 0, 0, 0, 3, 3, 1, 1, 3, 0, 2, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 2, 1, 0, 3, 0, 2, 2, 3, 1, 1, 0, 0, 0, 2, 3, 3, 0, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 3, 3, 0, 1, 3, 1, 3, 3, 3, 2, 1, 0, 1, 1, 2, 3, 3, 2, 2, 0, 1, 3, 2, 2, 0, 3, 2, 2, 0, 0, 1, 2, 2, 1, 1, 3, 2, 2, 3, 3, 2, 3, 3, 2, 0, 0, 1, 3, 3, 0, 2, 2, 1, 0, 2, 0, 0, 2, 1, 0, 1, 3, 1, 3, 2, 1, 1, 0, 2, 2, 3, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 2, 1, 2, 3, 3, 0, 1, 3, 1, 3, 1, 3, 1, 0, 2, 0, 1, 1, 0, 2, 1, 0, 2, 3, 1, 0, 1, 3, 2, 2, 3, 2, 1, 1, 0, 1, 1, 2, 0, 3, 2, 2, 3, 1, 0, 2, 2, 2, 0, 2, 1, 0, 3, 2, 0, 0, 0, 3, 1, 3, 2, 0, 1, 3, 0, 3, 0, 0, 0, 3, 3, 0, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 3, 1, 2, 0, 3, 2, 1, 0, 2, 1, 1, 2, 3, 3, 0, 0, 2, 1, 2, 0, 3, 3, 1, 3, 3, 0, 3, 1, 0, 2, 3, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 2, 2, 0, 1, 1, 2, 2, 0, 2, 0, 0, 2, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 1, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 2, 1, 1, 0, 0, 2, 0, 2, 1, 1, 0, 0, 2, 0, 0, 1, 1, 2, 1, 2, 2, 0, 0, 2, 1, 0, 0, 2], [1, 1, 2, 1, 2, 1, 2, 2, 0, 2, 0, 2, 0, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 2, 1, 0, 0, 0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0, 1, 0, 2], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(abs(res0), ( ( abs(i0) - int(0.0) ) - int(6.0) )) != min(int(5.0), int(3.0)):{:\\nin1 = divInt(max(( max(divInt(abs(divInt(res0,( in0 * int(6.0) ))),in0), abs(i1)) - min(divInt(int(4.0),int(5.0)), int(8.0)) ), abs(divInt(i0,i2))),int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( res0 * int(6.0) ) \\le ( int(4.0) - int(0.0) ):{:\\nres0 *= in2\\nb1 = ( min(divInt(min(mod(abs(( res0 * abs(res0) )),i0), int(6.0)),( mod(( int(3.0) + int(5.0) ),int(6.0)) * max(in1, in1) )), int(9.0)) + i1 ) \\le int(2.0)\\n:}else:{:\\nif ( i2 \\g i0 or False ):{:\\nloopBreak% = 0\\nwhile ( b1 or not res0 \\le max(min(int(9.0), int(0.0)), max(i1, ( int(9.0) * in2 ))) ):{:\\nb0 = max(in1, in2) \\l max(i1, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = b1\\nloopBreak% = 0\\nwhile ( in0 == in0 or ( int(9.0) + in2 ) \\ge min(in0, ( divInt(min(int(8.0), int(4.0)),in2) - in2 )) ):{:\\nif i2 \\le ( min(max(in1, ( int(7.0) * int(2.0) )), int(5.0)) * int(9.0) ):{:\\nb0 = ( max(int(1.0), int(6.0)) * mod(max(max(res0, int(4.0)), min(int(5.0), min(abs(max(( int(6.0) - in0 ), int(8.0))), int(8.0)))),( max(abs(( mod(res0,int(6.0)) + min(( ( res0 * max(( ( i1 + in0 ) * int(4.0) ), divInt(mod(int(8.0),int(7.0)),max(divInt(mod(min(max(( min(abs(( in2 + i2 )), int(8.0)) - max(abs(in2), ( mod(int(2.0),in1) * divInt(in0,in0) )) ), ( int(9.0) * i1 )), int(8.0)),min(int(7.0), abs(( int(5.0) - int(0.0) )))),i2), mod(( max(mod(( ( max(int(9.0), abs(int(7.0))) + int(8.0) ) + int(2.0) ),mod(mod(int(9.0),divInt(min(abs(i0), int(7.0)),max(int(2.0), max(int(8.0), min(int(2.0), in1))))),mod(i0,int(7.0)))), int(0.0)) + in0 ),( int(8.0) * res0 ))))) ) * ( min(int(9.0), in1) - int(0.0) ) ), abs(( ( min(divInt(int(0.0),int(5.0)), in0) - int(8.0) ) - int(9.0) ))) )), ( i1 - abs(( divInt(max(int(6.0), i0),divInt(mod(( in0 * mod(int(1.0),i2) ),max(mod(in1,i1), in1)),min(int(2.0), min(mod(i2,int(9.0)), abs(in2))))) + min(i0, in2) )) )) + i1 )) ) == min(max(i0, max(( int(4.0) + in1 ), int(9.0))), ( abs(mod(int(4.0),in2)) + max(int(6.0), ( i0 - abs(( int(4.0) + i2 )) )) ))\\n:}else:{:\\nloopBreak% = 0\\nwhile mod(int(5.0),int(1.0)) == mod(abs(min(in0, in0)),mod(int(5.0),( i1 * min(abs(int(4.0)), max(min(res0, min(int(4.0), res0)), divInt(abs(i2),int(6.0)))) ))):{:\\nin2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 14, 14, 7, 7, 79, 79, 11, 6, 3, 18, 11, 7, 1, 3, 81, 3, 311, 78, 76, 44, 35]}, {"genotype": [[0], [1], [1], [], [1], [1], [9], [], [], [], [], [], [], [], [], [0], [1], [1], [], [], [1], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [2, 0, 1, 1, 1, 0], [1], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 8, 8, 5, 7, 7, 7, 8, 8, 8, 5, 2, 1, 3, 5, 4, 5, 4, 0, 5, 8, 5, 6, 2, 9], [4, 4, 4], [0, 1, 0, 2, 1, 2], [1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0], [3, 0, 1, 1, 2, 2, 1], [1, 1, 0], [], [4, 1, 0, 3, 4, 1, 3, 3, 6, 6, 6, 5, 4, 1, 0, 1, 6, 5, 0, 2, 3, 4, 6, 1, 2, 1, 5, 3, 4, 0, 0, 4, 6], [], [2, 3, 3, 1, 2, 0, 3, 0, 1, 2, 0, 2, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 3, 2, 0, 3, 2, 3, 2, 2, 2, 0, 1, 0, 2, 2, 1, 3, 3, 2, 0, 2, 2, 3, 2, 0, 3, 0, 3, 2, 0, 0, 0, 1, 3, 2, 0, 2, 2, 2, 1, 1, 3, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 2, 2, 0, 1, 3, 3, 3, 1, 1, 1, 0, 2, 0, 2, 3, 3, 0, 3, 1, 2, 0, 3, 2, 1, 2, 3, 2, 2, 0, 1, 3, 2, 0, 1, 0, 0, 1, 2, 3, 0, 2, 0, 1, 3, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 0, 1, 0, 1, 2, 2, 2, 1, 2], [0, 2, 0, 0, 1, 2, 0, 2, 2], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( b0 or divInt(abs(max(int(6.0), mod(in1,max(i1, int(8.0))))),divInt(i0,mod(in0,in1))) \\le max(max(min(i1, int(8.0)), in0), in0) ):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\nb2 = not res0 \\le abs(divInt(res0,max(divInt(max(( ( divInt(res0,int(5.0)) + in2 ) * divInt(mod(int(7.0),min(abs(divInt(in1,divInt(mod(max(( i1 + min(i0, min(mod(i1,res0), in2)) ), int(7.0)),abs(( i0 + mod(mod(mod(int(7.0),int(8.0)),max(divInt(int(8.0),i2), int(8.0))),int(5.0)) ))),in0))), mod(min(int(2.0), int(1.0)),( ( in1 - int(3.0) ) * abs(abs(min(int(5.0), int(4.0)))) )))),int(5.0)) ), res0),( i1 + mod(max(min(i2, max(int(4.0), mod(i1,abs(( int(0.0) * mod(abs(mod(divInt(in2,int(5.0)),abs(mod(in0,int(8.0))))),in1) ))))), i0),int(5.0)) )), mod(max(i0, ( in1 * int(6.0) )),abs(int(2.0))))))\\nb1 = not True\\nb2 = res0 \\le int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 25, 25, 3, 6, 1, 10, 3, 7, 3, 0, 33, 0, 120, 34, 28, 9, 25]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [0, 1, 2, 1, 1, 0], [0], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 1, 9, 1, 6, 9, 7, 0, 4, 7, 2], [4, 2, 0], [1, 0, 2], [], [1, 1, 0, 1], [0, 0, 0], [1], [1], [1], [4, 3, 5, 4, 3, 1, 1, 4, 2, 2, 1], [0, 0], [0, 0, 3, 1, 1, 2, 2, 3, 2, 1, 0, 0, 3, 1, 1, 0, 3, 3, 3, 1, 2, 1, 3, 0, 1, 2, 1, 2, 1, 3, 2, 1, 3, 0, 2, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 2, 2, 2, 1, 2], [0, 1, 0, 1], [0, 1, 1, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = in0\\nb1 = in2 \\le max(int(9.0), int(3.0))\\nif ( divInt(min(mod(int(1.0),in1), in0),min(int(9.0), int(1.0))) + i1 ) == min(abs(abs(int(6.0))), ( int(9.0) - abs(i1) )):{:\\nb0 = False\\n:}else:{:\\nb2 = int(7.0) \\l ( int(0.0) + ( int(4.0) - max(mod(int(7.0),abs(in1)), mod(int(2.0),i2)) ) )\\n:}\\ni2 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 12, 12, 3, 3, 0, 4, 3, 1, 1, 1, 11, 2, 38, 8, 9, 4, 4]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 2, 2, 0], [0, 1, 1, 0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 3, 1, 2, 9, 9, 2, 7, 0, 6, 5, 8, 1, 6, 6, 9, 9, 7, 8, 6, 1, 4, 4, 8, 3, 8, 8, 4, 3, 3, 3, 9, 0, 7, 9, 8, 5, 5, 0, 4, 3, 5, 2, 3, 8, 6, 7, 7, 8, 2, 7, 0, 9, 3, 7, 1, 3, 4, 9, 7, 5, 9, 1, 5, 6, 0, 5, 5, 9, 6, 6, 9, 9, 6, 3, 8, 1, 5, 0, 5, 3, 9, 4], [0, 2, 0, 1, 2, 4], [0], [], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [], [], [0, 0], [6, 4, 1, 0, 0, 2, 4, 3, 0, 4, 1, 1, 4, 6, 1, 4, 4, 1, 2, 1, 4, 2, 1, 4, 3, 0, 6, 5, 6, 5, 6, 0, 6, 0, 0, 6, 4, 1, 1, 4, 3, 1, 1, 2, 4, 2, 1, 6, 4, 6, 4, 2, 2, 6, 0, 2, 3, 3, 0, 1, 1, 3, 3, 4, 6, 5, 4, 3, 0, 2, 1, 5, 4, 4, 4, 3, 4, 4, 4, 5, 2, 5, 2, 0, 5, 0, 6, 1, 5, 1, 4, 0, 4, 3, 5], [1], [1, 1, 0, 0, 2, 2, 2, 0, 1, 2, 3, 2, 0, 3, 2, 2, 0, 3, 2, 2, 0, 0, 2, 3, 0, 1, 0, 3, 0, 2, 2, 2, 1, 0, 0, 3, 2, 0, 2, 1, 0, 1, 3, 3, 3, 2, 2, 3, 1, 3, 3, 3, 0, 3, 2, 0, 3, 3, 0, 0, 1, 3, 0, 2, 2, 1, 2, 3, 0, 2, 0, 3, 3, 3, 2, 2, 0, 0, 1, 3, 0, 1, 2, 2, 1, 1, 3, 2, 2, 2, 0, 1, 0, 1, 3, 2, 3, 1, 0, 3, 2, 0, 0, 3, 2, 3, 3, 3, 0, 3, 1, 1, 2, 3, 2, 0, 1, 2, 3, 1, 2, 2, 2, 0, 0, 1, 1, 0, 3, 3, 2, 1, 2, 3, 2, 3, 1, 3, 2, 3, 0, 3, 0, 2, 2, 1, 3, 0, 0, 2, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2, 0, 3, 2, 2, 1, 1, 2, 1, 2, 3, 0, 3, 3, 3, 3, 1, 0, 0, 0, 0, 3, 3, 0, 1, 1, 1, 2, 3, 2, 1, 3, 1, 0, 0, 0, 1, 2, 3, 2, 3, 2, 2, 1, 2, 3, 2, 1, 3, 0, 2, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 3, 2, 2, 0, 0, 3, 2, 0, 3, 3, 2, 3, 2, 2, 1, 0, 2, 0, 3, 1, 0, 3, 1, 1, 0, 0, 0, 3, 1, 3, 1, 1, 1, 3, 0, 2, 3, 2, 2, 0, 2, 1, 2, 0, 0, 0, 3, 2, 1, 3, 2, 0, 0, 2, 2, 1, 0, 1, 3, 1, 0, 1, 3, 1, 0, 2, 0, 1, 1, 0, 3, 0, 1, 2, 3, 3, 3, 1, 3, 3, 3, 1, 2, 0, 0, 3, 1, 2, 3, 2, 0, 1, 3, 3, 3, 2, 0, 1, 2, 3, 2, 0, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 3, 3, 3, 3, 2, 1, 0, 1, 2, 3, 3, 3, 3, 1, 1, 0, 1, 0, 1, 2, 3, 2, 0, 0, 2, 1, 2, 3, 0, 2, 3, 1, 1, 0, 3, 0, 2, 1, 3, 1, 2, 2, 0, 0, 3, 3, 1, 2, 1, 2, 1, 3, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 1, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 0, 0, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1, 2, 1, 0, 2, 2, 2, 0, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1, 1, 2, 1, 2, 0, 2, 2, 2], [2, 1, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2, 1, 2, 0, 2, 2, 1, 2, 2, 0, 0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1, 2, 0, 1, 1, 0, 2, 1, 0, 2, 0, 2, 1, 0, 2, 2, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(2.0) \\l int(4.0):{:\\nloopBreak% = 0\\nwhile res0 == in1:{:\\nloopBreak% = 0\\nwhile ( ( ( i1 * int(3.0) ) - divInt(max(( i0 + max(( ( i0 * abs(divInt(divInt(i2,in1),mod(abs(in0),int(1.0)))) ) * i0 ), abs(in1)) ), ( ( divInt(int(2.0),i1) * i1 ) + min(mod(in1,( int(9.0) * res0 )), int(9.0)) )),abs(abs(min(divInt(divInt(min(int(2.0), abs(abs(abs(i1)))),abs(( in1 + abs(min(in1, i1)) ))),int(7.0)), min(i2, ( ( int(0.0) * divInt(min(i1, ( in1 * max(min(abs(( mod(i2,i1) * int(6.0) )), abs(in1)), int(5.0)) )),mod(divInt(int(8.0),int(1.0)),min(( ( mod(in0,int(6.0)) - i0 ) - int(6.0) ), abs(divInt(max(int(9.0), res0),abs(divInt(in2,res0))))))) ) * abs(divInt(min(abs(min(in2, min(int(9.0), int(7.0)))), mod(min(( res0 - int(8.0) ), ( min(int(6.0), ( ( mod(i0,res0) + int(1.0) ) * int(4.0) )) - i0 )),min(abs(( int(4.0) * divInt(abs(( max(int(8.0), max(( max(i0, min(res0, mod(divInt(int(3.0),min(in1, i1)),divInt(( i1 + in1 ),int(8.0))))) * int(8.0) ), int(4.0))) * ( ( in0 - ( i1 * min(mod(( int(3.0) * int(3.0) ),mod(int(3.0),( min(i1, min(min(abs(max(int(9.0), i2)), in1), i2)) + i1 ))), abs(max(res0, int(0.0)))) ) ) + int(7.0) ) )),int(9.0)) )), ( min(mod(int(8.0),min(int(5.0), in1)), res0) * in1 )))),int(5.0))) )))))) ) * divInt(abs(mod(min(mod(divInt(int(0.0),( min(mod(int(4.0),min(i2, ( mod(( i2 + divInt(mod(( int(3.0) - int(5.0) ),res0),int(2.0)) ),abs(divInt(( i0 * i2 ),min(( in0 + abs(abs(divInt(abs(divInt(( int(3.0) * in0 ),( i0 + abs(int(8.0)) ))),i1))) ), abs(int(6.0)))))) + int(7.0) ))), i1) - in0 )),in0), max(int(7.0), abs(int(8.0)))),int(2.0))),int(7.0)) ) \\l max(in1, ( min(mod(divInt(res0,( int(0.0) * mod(in2,in1) )),in0), max(( int(9.0) + max(mod(i0,i2), mod(divInt(int(3.0),i1),int(7.0))) ), abs(int(1.0)))) - in2 )):{:\\nin1 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif max(int(4.0), in1) \\g ( in1 + int(9.0) ):{:\\nloopBreak% = 0\\nwhile int(7.0) == in0:{:\\nb0 = min(in1, int(5.0)) \\le ( abs(abs(abs(int(9.0)))) * min(max(min(int(1.0), divInt(in1,in1)), min(int(5.0), divInt(min(( in2 - int(6.0) ), abs(abs(max(( i2 + int(0.0) ), divInt(max(divInt(in2,int(5.0)), max(min(i2, min(i0, ( int(5.0) * divInt(int(9.0),abs(abs(abs(min(min(divInt(int(6.0),in2), int(6.0)), ( abs(min(max(max(int(9.0), int(9.0)), i0), int(6.0))) + res0 )))))) ))), int(3.0))),( max(( i1 * in2 ), ( int(8.0) - ( abs(i1) + mod(max(int(1.0), int(5.0)),in1) ) )) * abs(i0) )))))),mod(int(0.0),min(int(5.0), ( divInt(in1,in0) * abs(abs(int(3.0))) )))))), ( int(9.0) + mod(int(4.0),abs(in2)) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 5, 2, 84, 84, 6, 1, 0, 6, 6, 0, 0, 2, 95, 1, 386, 105, 103, 54, 52]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 6, 5, 6, 1, 8, 5], [1], [2], [], [1], [0], [], [], [], [3, 5, 5, 6, 3, 1, 6, 6, 4], [], [3, 2, 2, 0, 0, 2, 2, 3, 1, 3, 1, 3, 1, 3, 2, 3, 0, 1, 0, 3, 1, 3, 0, 3, 2, 2, 1, 0, 3, 2, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0], [2, 2, 0, 1, 0, 1, 1, 1, 1, 2], [2, 1, 2, 0], [0, 0, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = abs(divInt(( in0 * in2 ),divInt(mod(abs(int(0.0)),min(int(2.0), max(int(6.0), min(( max(in2, int(5.0)) - res0 ), max(int(6.0), max(in0, max(mod(( int(1.0) * i1 ),abs(( res0 + res0 ))), int(8.0)))))))),int(5.0)))) \\g in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 8, 8, 1, 1, 0, 1, 1, 0, 0, 0, 9, 0, 35, 8, 10, 4, 4]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 1, 0, 1, 2, 2, 2, 2, 1, 0], [0, 0, 0, 1, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 6, 7, 5, 7, 7, 7, 7, 2, 1, 6, 6, 0, 1, 1, 5, 7, 1, 9, 1, 6, 0, 7, 0, 7, 9, 0, 7, 0, 7, 7, 5, 1, 2, 0, 0, 0, 4, 4, 3, 2], [5, 4, 4, 3, 2, 4], [2, 0, 1], [1], [1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [3, 1, 0], [0], [0, 0, 1], [6, 2, 3, 5, 1, 3, 5, 3, 3, 4, 3, 3, 6, 3, 4, 0, 3, 4, 6, 1, 4, 1, 3, 3, 3, 0, 3, 3, 6, 4, 5, 3, 4, 0, 0, 0, 4], [0, 1, 0], [3, 2, 0, 0, 2, 3, 1, 3, 2, 3, 2, 3, 1, 0, 3, 1, 1, 0, 0, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 3, 2, 0, 1, 1, 0, 3, 2, 3, 2, 1, 1, 1, 1, 1, 2, 1, 2, 3, 3, 3, 3, 1, 3, 3, 2, 1, 1, 0, 3, 2, 3, 1, 1, 2, 3, 3, 0, 1, 3, 3, 0, 2, 3, 3, 3, 1, 2, 3, 2, 0, 1, 1, 3, 1, 3, 0, 3, 0, 1, 0, 0, 0, 1, 0, 3, 3, 3, 1, 0, 2, 3, 1, 3, 2, 2, 2, 0, 1, 2, 2, 1, 1, 2, 0, 0, 3, 0, 1, 3, 0, 2, 0, 3, 3, 3, 2, 2, 0, 3, 1, 2, 0, 0, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 1, 3, 1, 3, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 2, 2, 2, 1, 1, 0, 1, 2, 1, 2, 2, 1, 0, 0, 0, 2, 2, 0, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 1, 1, 0, 2, 1], [2, 2, 1, 0, 1, 0, 0, 2, 1, 1, 0, 1, 2], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(divInt(res0,i2), divInt(min(int(5.0), abs(divInt(abs(mod(abs(int(6.0)),in0)),max(int(6.0), int(7.0))))),in2)) != i1:{:\\nin0 = in2\\nin0 *= ( int(5.0) * in0 )\\nb2 = int(7.0) \\le int(7.0)\\n:}\\nif in1 \\le max(int(7.0), mod(min(( in0 - int(7.0) ), int(2.0)),in0)):{:\\nif ( max(mod(abs(( int(1.0) + int(6.0) )),int(6.0)), int(0.0)) \\ge int(1.0) or mod(int(1.0),( max(abs(abs(max(int(5.0), min(min(mod(int(7.0),int(1.0)), res0), min(divInt(abs(int(9.0)),int(1.0)), ( abs(min(in0, int(6.0))) - abs(max(in1, ( abs(min(min(int(0.0), divInt(abs(mod(i0,int(7.0))),int(0.0))), min(int(7.0), min(in0, min(in1, int(9.0)))))) + res0 ))) )))))), i1) + in1 )) == int(0.0) ):{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile b0:{:\\nb1 = i1 \\le min(min(abs(int(7.0)), in0), divInt(min(int(0.0), max(mod(mod(divInt(in0,int(7.0)),mod(( int(7.0) * int(5.0) ),divInt(in0,i0))),min(in0, int(1.0))), min(in0, ( res0 - abs(max(max(( divInt(in1,min(int(2.0), mod(in2,in0))) - mod(( int(0.0) + in1 ),( mod(int(0.0),i0) - int(0.0) )) ), ( int(4.0) * int(4.0) )), abs(int(3.0)))) )))),max(int(2.0), i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 = in1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 42, 42, 6, 3, 1, 9, 6, 3, 1, 3, 37, 3, 151, 33, 42, 13, 21]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 0, 1, 0, 1, 2, 0, 0, 2, 0, 2, 1, 2, 1, 0], [0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 5, 7, 8, 6, 2, 3, 1, 6, 2, 4, 3, 0, 3, 4, 6, 6, 6, 9, 3, 7, 8, 0, 1, 0, 1, 2, 6, 3, 7, 6, 7, 5, 3, 0, 3, 0, 5, 1, 4, 2, 8, 9, 7, 7, 7, 6, 1, 7, 3, 6, 8, 4, 4, 1, 4, 9, 0, 8, 0, 1, 5, 4, 3, 1, 7, 1, 8, 0, 5, 7, 3, 3, 3, 1, 4, 4, 8, 7, 1, 0, 2, 4, 4, 9, 3, 5, 3, 8, 7, 5, 6, 7, 0, 9, 6, 8, 3, 9, 1, 5, 3, 9], [0, 5, 5, 1, 3, 5, 4, 5, 5, 2, 1, 1, 2], [1, 1, 2, 0, 1, 0, 0, 0, 0, 1], [1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 2, 3, 1, 1], [1, 1], [0, 0, 0], [3, 5, 5, 1, 0, 3, 4, 1, 4, 4, 4, 0, 2, 0, 6, 5, 6, 3, 1, 5, 6, 4, 5, 1, 1, 3, 3, 5, 0, 4, 3, 3, 4, 6, 0, 4, 4, 5, 2, 6, 6, 4, 3, 1, 5, 2, 4, 4, 0, 3, 4, 3, 0, 1, 2, 6, 1, 0, 0, 1, 1, 2, 6, 6, 1, 3, 4, 6, 4, 3, 4, 6, 1, 2, 1, 5, 4, 2, 5, 4, 4, 6, 3, 4, 4, 6, 4, 2, 1, 5, 4, 0, 2, 4, 2, 4, 4, 5, 6, 1, 5, 2, 2, 6, 0], [1], [3, 2, 2, 0, 1, 0, 3, 0, 0, 0, 3, 1, 3, 3, 1, 3, 2, 3, 1, 0, 1, 2, 0, 0, 2, 3, 1, 1, 2, 2, 0, 3, 2, 2, 1, 0, 2, 2, 3, 1, 2, 1, 2, 3, 3, 3, 1, 0, 0, 0, 2, 3, 3, 1, 2, 2, 3, 0, 3, 3, 1, 2, 0, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 1, 0, 0, 3, 1, 2, 0, 3, 2, 3, 2, 3, 0, 3, 2, 2, 3, 1, 0, 2, 1, 3, 0, 3, 3, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 0, 3, 3, 3, 2, 1, 1, 2, 1, 3, 2, 1, 3, 0, 1, 2, 3, 1, 2, 3, 2, 3, 0, 1, 2, 3, 1, 3, 2, 3, 0, 2, 1, 0, 1, 2, 0, 3, 2, 0, 2, 2, 0, 1, 3, 2, 1, 2, 1, 0, 0, 3, 1, 1, 2, 0, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 2, 3, 2, 2, 1, 3, 2, 1, 3, 1, 3, 3, 2, 3, 0, 2, 3, 3, 3, 1, 0, 3, 3, 2, 1, 2, 1, 1, 3, 2, 3, 2, 2, 2, 0, 2, 3, 1, 2, 3, 0, 0, 3, 1, 0, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 1, 0, 0, 1, 2, 3, 3, 3, 3, 0, 3, 0, 2, 2, 0, 2, 0, 1, 2, 2, 3, 0, 1, 1, 3, 2, 1, 3, 3, 1, 3, 3, 0, 0, 0, 3, 1, 2, 1, 0, 2, 0, 3, 3, 3, 1, 0, 1, 1, 0, 3, 0, 1, 2, 0, 3, 0, 1, 3, 3, 0, 3, 1, 0, 2, 1, 2, 2, 3, 3, 0, 1, 0, 0, 0, 3, 1, 2, 0, 2, 3, 0, 1, 2, 1, 0, 2, 0, 3, 1, 2, 3, 2, 3, 3, 2, 2, 2, 3, 2, 2, 1, 0, 2, 1, 0, 2, 0, 2, 0, 1, 0, 2, 3, 1, 2, 2, 0, 0, 0, 1, 3, 0, 3, 1, 2, 1, 1, 0, 0, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 2, 0, 0, 3, 1, 2, 2, 1, 1, 3, 2, 0, 2, 0, 3, 3, 1, 0, 3, 0, 3, 1, 3, 2, 2, 0, 1, 1, 1, 2, 0, 0, 3, 0, 0, 3, 1, 1, 2, 0, 2, 0, 0, 1, 0, 3, 0, 1, 3, 0, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 2, 2, 2, 0, 0, 2, 1, 0, 2, 2, 1, 1, 2, 1, 1, 2, 1, 0, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 1, 2, 0, 1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 1, 0, 2, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 2, 2, 1, 0, 2, 0, 2, 0, 0, 0, 0, 2], [2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0, 0, 2, 1, 2, 2, 2, 1, 1, 0, 2, 1, 2, 0, 2, 1, 0, 2, 2, 0, 0, 1, 2, 2, 2, 1, 1, 0, 0, 2, 1, 0, 0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 101, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(mod(( in0 * int(9.0) ),in2), min(in2, i1)) \\l i0:{:\\nloopBreak% = 0\\nwhile abs(int(5.0)) != abs(abs(int(7.0))):{:\\nb1 = not min(mod(min(int(8.0), in0),int(6.0)), divInt(in1,i1)) != ( abs(int(2.0)) * int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = divInt(divInt(in1,max(mod(( int(1.0) - in1 ),( ( min(int(6.0), divInt(int(2.0),( abs(abs(max(int(4.0), in1))) - i0 ))) * i2 ) - ( max(abs(int(3.0)), mod(( max(i0, max(abs(int(0.0)), ( res0 + divInt(( ( ( max(mod(min(divInt(( divInt(int(3.0),in2) - res0 ),abs(int(4.0))), ( in0 + min(( min(( max(i1, abs(( ( max(int(6.0), in2) - ( int(6.0) + abs(res0) ) ) + abs(max(int(6.0), in1)) ))) * int(9.0) ), int(3.0)) - in2 ), min(int(7.0), ( int(8.0) * int(0.0) ))) )),i1), max(abs(min(( int(1.0) * int(0.0) ), mod(int(1.0),max(mod(int(2.0),min(i1, int(6.0))), mod(abs(int(3.0)),mod(max(( abs(in0) * int(7.0) ), mod(max(int(6.0), abs(( max(in0, mod(int(7.0),in2)) - int(5.0) ))),mod(i0,max(divInt(in1,( ( in0 - int(3.0) ) + abs(( int(0.0) * mod(int(3.0),in0) )) )), in1)))),max(int(0.0), int(5.0)))))))), mod(res0,max(divInt(min(i0, ( min(int(1.0), in1) - int(4.0) )),int(2.0)), ( abs(divInt(( int(8.0) * abs(mod(int(9.0),min(int(7.0), min(abs(divInt(abs(in1),( max(abs(max(int(7.0), in2)), min(abs(divInt(int(7.0),mod(int(6.0),int(1.0)))), min(( max(divInt(( mod(i2,( max(int(7.0), divInt(min(res0, res0),max(int(3.0), in1))) + int(6.0) )) * int(8.0) ),int(4.0)), int(4.0)) - in0 ), ( divInt(i1,in2) + ( int(1.0) * i2 ) )))) * in1 ))), int(4.0))))) ),( max(max(min(min(in1, min(i0, divInt(mod(in0,( in1 + int(9.0) )),mod(( abs(in0) + int(0.0) ),int(8.0))))), min(( int(0.0) - abs(abs(int(1.0))) ), abs(abs(i0)))), i1), i2) * min(int(5.0), ( int(4.0) * res0 )) ))) * ( i1 - min(abs(abs(int(3.0))), i0) ) ))))) - int(1.0) ) + int(7.0) ) + i0 ),min(i1, int(1.0))) ))) * ( i1 - max(i2, int(8.0)) ) ),max(min(res0, max(int(0.0), res0)), divInt(int(5.0),divInt(divInt(max(min(i1, int(7.0)), in0),in1),res0))))) + max(int(3.0), ( in1 + mod(min(in0, int(3.0)),divInt(int(3.0),in1)) )) ) )), ( res0 + min(int(1.0), ( min(divInt(min(min(( mod(( abs(( mod(int(4.0),i1) - mod(int(4.0),i2) )) - ( i1 - ( in2 * int(8.0) ) ) ),in1) - ( max(int(7.0), mod(mod(i2,in2),in1)) - int(1.0) ) ), min(in1, abs(int(0.0)))), divInt(int(2.0),int(4.0))),res0), in0) * max(int(4.0), int(9.0)) )) ))),int(3.0)) \\g int(5.0)\\nb2 = b0\\nb1 = mod(in1,in1) \\ge int(3.0)\\nloopBreak% = 0\\nwhile res0 != int(8.0):{:\\nb0 = ( in1 + i2 ) \\le abs(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not ( ( int(5.0) + int(6.0) ) - abs(mod(i1,( in2 - max(min(int(7.0), in1), abs(i0)) ))) ) != min(int(0.0), abs(mod(( i2 - int(9.0) ),int(6.0))))\\nif not not int(8.0) != ( in1 - i2 ):{:\\nb0 = min(in1, in1) == min(int(3.0), int(9.0))\\nloopBreak% = 0\\nwhile ( mod(in2,mod(res0,i1)) \\g int(1.0) or False ):{:\\nin2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(i2, int(5.0)) \\g min(res0, abs(int(3.0))):{:\\nb0 = int(9.0) == i0\\n:}\\n:}\\nb1 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 6, 10, 103, 103, 13, 10, 1, 21, 13, 8, 2, 3, 105, 1, 424, 109, 108, 58, 52]}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 2, 0], [1, 1], [0, 0], [1, 1, 1, 1], [2, 9, 1, 7], [1, 2, 1], [2, 1, 0], [1], [1, 0, 0, 0, 1, 1], [0, 0, 0], [1, 0, 3], [1], [], [2, 2, 1, 4, 4, 3], [], [1, 0, 1, 0, 3, 2, 2, 1, 0, 0, 1, 2, 0, 0], [0, 0, 0], [1], [1, 1, 2], []], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(2.0) \\g i2:{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = ( int(9.0) == i2 or max(( ( int(1.0) - i1 ) - in1 ), int(7.0)) \\g ( in1 * in0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 4, 4, 3, 3, 1, 6, 3, 3, 1, 0, 6, 0, 14, 3, 1, 3, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 2, 1, 1, 2, 0, 0], [1, 1], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [6, 4, 4, 1, 8, 4, 5], [1, 5, 3], [0], [0], [0, 0, 1, 0, 1, 0, 1], [0, 0, 0], [2, 1, 3, 2], [0], [], [3, 6, 3, 1, 0, 6, 1, 4, 4, 6, 0, 2, 2, 6, 2, 5, 1, 2], [0, 0, 1, 0, 1], [1, 0, 3, 0, 1, 3, 1, 0, 3, 0, 0, 1, 1, 0, 0, 2, 0, 3, 3, 1, 2, 0, 0, 0, 3, 0, 3, 3, 1, 0], [1, 1], [0, 0, 0, 1, 0, 1, 1, 2], [2, 0], [1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(6.0)\\nres0 = in0\\nloopBreak% = 0\\nwhile not True:{:\\ni1 *= min(i0, int(4.0))\\nres0 = min(int(4.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(in1, in1) \\g int(1.0):{:\\nb0 = ( int(8.0) != res0 and not i0 \\ge mod(i2,max(min(int(4.0), divInt(i2,res0)), i2)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += max(i1, max(abs(int(5.0)), i2))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 8, 8, 2, 6, 7, 7, 3, 1, 1, 7, 3, 4, 1, 0, 18, 5, 30, 2, 8, 2, 2]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1], [0, 3], [1], [], [], [1], [0], [], [], [], [3, 6, 3, 6], [0], [3, 0, 0, 0, 2, 1, 1], [0], [1], [1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(in0, res0) \\g in0:{:\\nres0 = ( int(0.0) - int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 986, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 4, 1, 7, 1, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [6], [], [], [], [], [], [], [], [], [6], [0], [3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = abs(int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 1, 1], [0, 1, 1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 5, 1, 2, 9, 2, 3, 9, 2], [4, 1], [2, 0], [], [0, 1, 0, 0, 1], [0, 0], [1, 0, 2], [1], [1], [3, 4, 4, 5, 5, 5, 1, 2, 4, 4, 4, 1, 2, 0], [1, 1], [2, 2, 3, 1, 0, 1, 2, 2, 0, 2, 0, 1, 3, 0, 2, 2, 1, 2, 2, 0, 0, 1, 0, 1, 2, 3, 1, 0, 3, 2, 1, 1, 1, 3, 0, 0, 0, 3, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 2], [2, 0, 1, 0, 2, 1, 0], [1, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\nif mod(mod(min(int(8.0), in0),int(1.0)),( ( in1 * ( in1 + int(5.0) ) ) - max(in2, divInt(divInt(int(1.0),( mod(in2,in2) + int(2.0) )),i1)) )) \\le int(9.0):{:\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile not divInt(min(int(2.0), i2),min(( int(3.0) * int(9.0) ), int(2.0))) \\g max(in1, in1):{:\\nin1 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 += abs(i0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 10, 10, 2, 2, 0, 5, 2, 3, 1, 1, 14, 2, 39, 11, 6, 7, 6]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [1, 7], [], [], [], [], [], [], [], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(17.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 0, 1, 0, 2, 1, 0, 2, 2, 1, 2, 2, 0, 0, 1], [1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 6, 3, 2, 7, 8, 8, 0, 5, 4, 4, 0, 9, 5, 2, 1, 3, 1, 1, 8, 1, 1, 6, 2, 3, 3, 0, 5, 4, 4, 1, 5, 9, 3, 5, 7, 3, 0, 2, 4, 8, 6], [0, 5, 4, 4, 1, 2, 5, 3, 1], [2, 1, 0, 0, 0, 2], [], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 0], [1], [0, 1, 1], [4, 4, 0, 1, 3, 1, 1, 4, 3, 6, 1, 1, 5, 2, 1, 5, 4, 3, 6, 1, 4, 0, 5, 2, 4, 1, 2, 0, 6, 2, 1, 3, 1, 2, 0, 0, 6, 5, 2, 1, 4, 3, 4, 2, 0, 4, 1, 6, 2, 3, 3, 0, 3, 4, 5], [1, 1, 0, 1, 1], [3, 2, 2, 1, 3, 3, 3, 0, 0, 0, 2, 3, 2, 1, 3, 0, 2, 3, 0, 0, 2, 0, 0, 1, 3, 3, 0, 2, 1, 0, 2, 1, 2, 0, 2, 3, 2, 2, 3, 0, 1, 1, 3, 2, 1, 2, 1, 0, 0, 0, 1, 2, 0, 3, 3, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 1, 0, 3, 0, 2, 1, 2, 3, 2, 2, 1, 1, 1, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 3, 0, 2, 1, 3, 3, 0, 0, 0, 2, 3, 0, 2, 0, 1, 0, 3, 3, 2, 0, 2, 3, 2, 1, 1, 0, 2, 3, 0, 0, 3, 3, 1, 0, 2, 2, 3, 2, 1, 0, 2, 1, 1, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 2, 3, 0, 0, 3, 1, 0, 2, 0, 1, 0, 0, 0, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [2, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 1, 0, 2, 1, 1, 1, 2, 2, 0, 2, 2, 1, 0, 0, 2, 0, 0, 2, 0, 2, 1, 1, 1, 0], [0, 0, 1, 2, 1, 1, 0, 2, 2, 1, 1, 1, 0, 2, 2, 0, 0, 0, 2, 2, 1, 2, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(( ( int(9.0) + min(min(max(in1, in1), i0), ( max(( int(3.0) + min(i1, ( min(in0, i1) - ( i1 * in1 ) )) ), int(6.0)) - abs(max(in0, divInt(int(3.0),res0))) )) ) - ( int(2.0) + divInt(i1,( min(divInt(mod(min(i1, int(7.0)),int(8.0)),max(mod(int(8.0),( int(0.0) * in2 )), i2)), i1) * int(5.0) )) ) )) \\l ( in2 - min(abs(mod(int(4.0),( mod(( in1 - divInt(int(4.0),in0) ),int(0.0)) - res0 ))), int(9.0)) ):{:\\ni1 += int(5.0)\\nb2 = int(2.0) != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= divInt(in2,int(1.0))\\nb1 = i2 \\le max(in1, ( int(3.0) * mod(max(mod(divInt(int(1.0),int(1.0)),int(8.0)), int(1.0)),i1) ))\\nif False:{:\\nb0 = not int(1.0) \\le divInt(int(6.0),( i2 + i0 ))\\nb0 = divInt(int(2.0),res0) \\g max(i2, mod(int(3.0),abs(abs(i1))))\\nloopBreak% = 0\\nwhile in0 == i1:{:\\nloopBreak% = 0\\nwhile ( min(i2, ( i0 + int(3.0) )) + i0 ) != abs(abs(( res0 * mod(max(( int(0.0) * int(5.0) ), in2),( min(i2, i1) - min(abs(int(4.0)), in1) )) ))):{:\\nin0 = mod(mod(min(( int(4.0) * in1 ), ( int(1.0) + int(5.0) )),( min(divInt(abs(divInt(min(divInt(abs(i2),i0), ( max(in1, i1) + max(int(9.0), res0) )),divInt(i2,int(3.0)))),in0), in0) - i0 )),max(int(5.0), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(3.0) \\ge int(0.0):{:\\nif b0:{:\\nin0 += int(2.0)\\n:}else:{:\\nin1 += min(int(4.0), int(8.0))\\n:}\\n:}else:{:\\nb2 = int(6.0) \\g in2\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 6, 10, 43, 43, 9, 6, 0, 12, 9, 3, 1, 3, 55, 5, 173, 45, 35, 27, 22]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 2, 1, 1, 1, 2, 1, 1], [0, 0, 1, 1], [0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 6, 9, 1, 1, 2, 9, 7, 1, 5, 5, 4, 8, 0, 2, 0, 7, 2, 8], [2, 1, 4, 2], [0, 0, 1, 2], [0], [0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [1, 3, 0, 2, 0], [1], [0, 1], [4, 5, 1, 4, 6, 5, 3, 5, 5, 5, 6, 6, 6, 6, 2, 5, 3, 6], [0, 1, 0], [0, 2, 1, 1, 3, 1, 1, 2, 0, 3, 1, 3, 0, 0, 1, 2, 1, 3, 3, 2, 2, 1, 1, 1, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3, 2, 1, 1, 2, 3, 0, 2, 3, 0, 3, 0, 1, 1, 2, 3, 2, 1, 2, 3, 3, 1, 0, 2, 0, 3, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 1, 2, 0, 1, 0, 2, 0, 2, 1, 2, 1], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nif ( in1 == ( int(4.0) + int(1.0) ) and min(int(6.0), int(9.0)) \\g divInt(in2,max(int(1.0), min(i1, in1))) ):{:\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = int(1.0) \\le ( int(2.0) + max(abs(divInt(mod(int(9.0),int(7.0)),int(1.0))), ( divInt(int(5.0),min(res0, in2)) + int(5.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = in2\\n:}\\nin2 += int(4.0)\\nloopBreak% = 0\\nwhile not b1:{:\\nb2 = max(( int(8.0) + int(0.0) ), ( min(in2, ( abs(res0) - min(res0, int(2.0)) )) + int(0.0) )) == mod(abs(( int(7.0) + mod(max(abs(int(2.0)), res0),divInt(res0,max(i2, int(8.0)))) )),in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = res0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 20, 20, 4, 4, 1, 9, 4, 5, 1, 2, 18, 3, 63, 14, 14, 8, 7]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0], [0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 8, 2, 6, 1, 3, 9, 7, 2, 3, 0, 9, 8, 7, 0, 6, 0, 7, 1, 1, 2, 1, 4, 5, 7, 1, 3, 9, 3, 5, 4, 3, 8, 2, 7, 3, 0, 3, 4, 9, 9, 2, 6], [4, 1, 3, 4, 4, 3, 1, 5, 5], [0, 0, 0, 1, 2, 0], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1], [0, 1, 0], [0, 1, 0, 0], [1, 5, 2, 6, 5, 3, 3, 2, 3, 2, 3, 1, 4, 5, 5, 3, 2, 1, 0, 4, 3, 1, 2, 5, 1, 4, 1, 0, 0, 3, 4, 3, 5, 2, 0, 5, 6, 3], [1], [2, 3, 0, 3, 3, 2, 2, 0, 1, 2, 0, 3, 1, 2, 0, 1, 1, 2, 3, 2, 2, 0, 0, 3, 0, 0, 3, 3, 0, 1, 3, 1, 0, 1, 1, 2, 0, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 2, 3, 0, 3, 1, 2, 1, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 3, 1, 3, 2, 3, 2, 0, 1, 0, 0, 2, 0, 2, 1, 0, 2, 1, 1, 1, 0, 2, 2, 1, 3, 1, 1, 1, 0, 3, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 1, 3, 3, 1, 2, 1, 3, 1, 0, 3, 0, 1, 3, 2, 3, 2, 1, 0, 2, 3, 1, 2, 2, 3, 3, 1, 2, 0, 3, 0, 3, 0, 0, 1, 2, 0, 2, 1, 1, 0, 2, 3, 3, 1, 0, 0, 2, 2, 0, 2, 1, 0, 3, 1, 2, 0, 2, 0, 0, 3, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 1, 0, 0, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 0, 0, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 0, 1, 2, 2, 2, 0, 1, 2, 1, 2, 2, 1, 0, 2, 2, 2, 1, 1, 0, 1, 1, 2], [0, 0, 0, 2, 0, 0, 1, 2, 1, 1, 1, 2, 2, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\nb0 = ( abs(i1) + max(min(( divInt(in2,int(2.0)) + divInt(i2,min(int(5.0), mod(res0,int(8.0)))) ), int(2.0)), mod(abs(divInt(divInt(in2,in0),abs(in0))),i2)) ) \\le abs(max(in0, int(6.0)))\\nif abs(int(1.0)) \\g i2:{:\\nif int(3.0) \\ge int(9.0):{:\\nif divInt(in0,max(abs(max(max(int(7.0), max(abs(min(int(2.0), min(mod(max(i1, abs(int(3.0))),divInt(int(0.0),in1)), int(9.0)))), max(int(8.0), max(max(int(7.0), int(0.0)), int(6.0))))), int(0.0))), abs(int(7.0)))) \\le abs(mod(max(( in2 + int(1.0) ), in2),in0)):{:\\nloopBreak% = 0\\nwhile False:{:\\nb0 = divInt(i2,divInt(int(1.0),i1)) \\le ( int(2.0) * int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\ni0 += int(4.0)\\n:}\\nb1 = in1 \\ge ( mod(int(5.0),abs(int(7.0))) + int(1.0) )\\nif int(3.0) \\g in0:{:\\nb2 = abs(( min(max(abs(abs(int(9.0))), abs(min(max(( int(3.0) - abs(max(int(5.0), ( int(4.0) * abs(int(3.0)) ))) ), i1), abs(i2)))), int(8.0)) - max(mod(min(divInt(int(2.0),in2), ( abs(int(7.0)) - ( ( abs(abs(int(3.0))) - ( i1 * max(in1, max(i1, i0)) ) ) * int(0.0) ) )),( i0 - ( int(3.0) + int(4.0) ) )), in0) )) != mod(min(max(int(9.0), in1), in0),( mod(in2,( int(9.0) + i2 )) + max(int(2.0), divInt(i0,mod(in2,res0))) ))\\n:}\\nloopBreak% = 0\\nwhile abs(in0) != int(6.0):{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 44, 44, 9, 6, 0, 12, 9, 3, 3, 4, 38, 1, 165, 35, 49, 17, 19]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 5], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 -= in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1], [0, 2, 0, 1, 0, 1, 1], [0], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 5, 8, 1, 8, 5, 2, 3], [3, 1, 5], [2, 0, 0, 1], [], [0, 1, 0, 1, 1], [0, 0, 0], [1, 1], [0, 0], [1], [3, 0, 0, 0, 2, 6, 3], [1, 0], [1, 1, 1, 0, 3, 3, 1, 3, 2, 3, 1, 1, 1, 1, 2, 1, 0, 2, 0, 0, 0], [0, 1, 0], [0, 1, 2, 1], [1, 1, 2], [1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\nif int(0.0) \\ge int(0.0):{:\\nb0 = True\\nb0 = int(5.0) \\g in0\\nb1 = min(max(int(8.0), abs(( max(int(1.0), int(8.0)) - int(5.0) ))), int(2.0)) != mod(int(3.0),i0)\\ni0 -= ( i0 * i2 )\\n:}else:{:\\nres0 = in0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 1, 6, 9, 9, 3, 4, 0, 5, 3, 2, 2, 1, 7, 2, 21, 3, 4, 3, 1]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 7, 5, 5, 7, 9, 6, 6, 2, 4, 4, 3, 4, 2, 7, 7, 7, 2, 2, 9, 1, 8], [5], [2], [], [1], [0], [], [], [], [6, 6, 3, 4, 3, 2, 3, 4, 4, 6, 1, 5, 1, 1, 0, 0, 0, 6, 6, 1, 2, 0, 0, 5, 5, 0], [], [2, 2, 1, 2, 2, 2, 3, 0, 3, 2, 3, 1, 1, 2, 2, 3, 2, 3, 2, 1, 2, 1, 1, 1, 2, 3, 1, 2, 2, 1, 3, 0, 2, 3, 3, 2, 2, 1, 0, 0, 2, 0, 3, 3, 0, 2, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 1, 1, 2, 2, 2, 0, 2, 0, 0, 3, 3, 2, 2, 0, 1, 1, 0, 3, 0, 0, 1, 0, 2, 0, 0, 3, 0, 3, 1, 3, 1, 2, 3, 0, 0, 3, 3, 1, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 2, 0, 1, 0, 2, 1, 0, 0, 1, 1, 2], [0, 1, 1, 0, 2, 2, 1, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = divInt(divInt(int(4.0),( ( mod(min(res0, min(mod(min(int(3.0), int(7.0)),( divInt(min(( abs(mod(int(5.0),( int(5.0) + int(7.0) ))) - int(9.0) ), ( max(int(6.0), ( divInt(int(6.0),min(res0, mod(abs(abs(( divInt(int(2.0),in0) - in1 ))),( in0 + max(min(i2, ( int(4.0) * ( abs(in0) * int(4.0) ) )), divInt(abs(in1),in1)) )))) - int(3.0) )) + ( min(( res0 + int(4.0) ), int(2.0)) * i1 ) )),in2) + int(7.0) )), int(7.0))),( divInt(mod(i1,( i1 + i0 )),max(min(divInt(divInt(i0,int(7.0)),int(2.0)), i0), abs(res0))) + res0 )) * int(2.0) ) * i1 )),( i2 * i0 )) != max(i0, min(int(9.0), min(int(1.0), ( max(in2, in2) + max(abs(int(8.0)), i0) ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 23, 23, 1, 1, 0, 1, 1, 0, 0, 0, 26, 0, 103, 31, 23, 17, 14]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 6, 4, 7, 8, 1, 2, 6, 0, 1, 4, 8, 4, 0, 4, 8, 0, 1, 2, 0, 5, 0, 9, 4, 2], [], [], [], [0], [], [1], [1], [], [1, 3, 6, 1, 1, 1, 4, 5, 1, 3, 3, 0, 3, 3, 6, 5, 2], [0, 1], [0, 2, 2, 3, 3, 2, 2, 3, 2, 2, 2, 2, 2, 0, 1, 0, 1, 0, 0, 3, 1, 1, 1, 2, 3, 2, 2, 1, 3, 1, 1, 1, 3, 2, 0, 2, 2, 2, 1, 1, 2, 3, 2, 2, 3, 1, 2, 3, 2, 3, 2, 3, 2, 0, 0, 3, 2, 3, 2, 0, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 0, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 3, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [2, 0, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 0, 2, 0, 0, 1, 1, 0], [1, 2, 2, 2, 2, 0, 1, 1, 0, 2, 1, 0, 2, 2, 0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\ni1 = in0\\nres0 -= divInt(( abs(min(( ( min(mod(mod(( ( ( i1 * int(2.0) ) * i1 ) * int(7.0) ),i1),in1), min(int(6.0), int(4.0))) * int(7.0) ) + divInt(min(( ( int(8.0) - min(int(1.0), int(2.0)) ) - int(6.0) ), max(( in2 + divInt(( divInt(int(0.0),int(1.0)) * divInt(abs(( ( min(int(4.0), ( abs(mod(abs(divInt(abs(mod(i1,in0)),min(mod(abs(divInt(in0,int(8.0))),int(4.0)), int(0.0)))),int(4.0))) - min(min(max(max(int(8.0), int(0.0)), i0), int(1.0)), ( in0 + int(2.0) )) )) * int(0.0) ) * in0 )),int(5.0)) ),res0) ), int(0.0))),int(9.0)) ), int(4.0))) + int(2.0) ),min(in2, i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 26, 26, 0, 0, 0, 1, 0, 1, 1, 0, 17, 2, 86, 26, 19, 15, 12]}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 1], [1, 1], [1, 0], [0, 1, 1], [1, 7, 6], [5], [0, 1], [], [1, 0, 0], [0], [1, 0], [1], [], [6, 4], [1], [1, 0, 1], [], [], [1], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(17.0) != res0:{:\\nloopBreak% = 0\\nwhile False:{:\\nin1 -= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 3, 3, 1, 2, 0, 3, 1, 2, 1, 0, 2, 1, 3, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1], [1, 2, 2, 2, 1], [0, 1, 0], [0, 0], [1, 1, 1, 1], [1, 7, 2, 9], [1, 0, 0, 4], [1, 1, 0], [1], [0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0], [3, 0, 1], [1], [0, 0], [0, 2, 6, 2, 6, 3, 6, 4], [], [0, 3, 0, 2, 2, 1, 1, 0, 0, 1, 3, 0, 0, 0, 1, 0], [1, 1], [1, 0], [], [1, 1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( i0 \\g max(i2, mod(mod(int(1.0),int(7.0)),res0)) or i2 \\l int(2.0) )\\nif b1:{:\\nloopBreak% = 0\\nwhile False:{:\\nif min(res0, in0) \\l res0:{:\\nb0 = int(9.0) \\le in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 4, 4, 4, 3, 1, 7, 4, 3, 1, 2, 8, 0, 16, 2, 2, 0, 2]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [2, 6, 2], [], [], [], [], [], [], [], [], [0], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += int(262.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 0, 2, 0, 0], [1, 1], [0, 1, 0], [1, 1, 1, 1, 1], [2, 4, 1, 5, 3], [3, 4], [0, 2, 1], [], [0, 1, 1, 0], [0, 0], [0, 1], [1], [], [4, 2, 6], [0], [1, 2, 1, 1, 0, 3, 1, 1, 0], [1], [1], [], [1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = int(2.0) \\ge mod(int(4.0),int(1.0))\\nloopBreak% = 0\\nwhile in1 \\le max(int(5.0), int(3.0)):{:\\ni2 = res0\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 5, 5, 2, 3, 0, 4, 2, 2, 1, 0, 3, 1, 9, 1, 1, 0, 1]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [0, 1], [2, 6], [2], [], [], [1], [0], [], [], [], [6, 3, 5, 5, 5], [0], [3, 2, 0, 0, 0, 1, 0], [1], [0], [], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(divInt(res0,in0), in2) == int(26.0):{:\\nin2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 5, 1, 7, 1, 1, 0, 1]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1], [5, 4, 7, 7, 3, 7], [5], [2], [], [1], [0], [], [], [], [6, 6, 0, 4, 5], [], [1, 3, 2, 2, 0, 3, 3, 0, 1, 3, 2, 0, 1, 1, 0, 3, 0, 3, 1, 1], [1, 1, 0], [0, 1, 0, 0, 1, 0], [0], [1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(5.0) != min(mod(divInt(res0,max(min(res0, int(4.0)), min(( i0 + int(7.0) ), int(7.0)))),in1), max(in2, min(int(3.0), int(7.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 20, 3, 6, 1, 2]}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 2, 1, 0, 0], [0], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [4, 3, 4, 6, 5, 6, 1, 9, 8, 3, 4, 9, 7, 6], [2, 5, 2], [1, 1], [], [1, 1, 1], [0, 0, 0], [], [], [0], [2, 3, 0, 0, 3, 3], [1, 1], [1, 1, 1, 1, 3, 3, 2, 1, 2, 0, 1, 2, 3, 2, 2, 3, 1, 0, 0, 1, 3, 1, 0, 1, 1], [0, 0, 0, 1, 0], [2, 2, 0, 2, 0], [1, 2, 1, 1, 2, 1], [1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(4.0) == int(3.0)\\nif int(4.0) != int(6.0):{:\\nb1 = abs(abs(( int(5.0) - ( i2 * int(6.0) ) ))) == ( min(mod(( abs(int(1.0)) - in0 ),i0), int(9.0)) - min(int(8.0), i0) )\\n:}\\nin0 *= int(34.0)\\nin0 -= int(976.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 14, 14, 3, 2, 0, 3, 3, 0, 0, 1, 6, 2, 25, 5, 5, 6, 1]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1], [7, 6, 2, 4], [0], [2], [], [1], [0], [], [], [], [1, 2, 5, 2, 2, 4, 0, 0, 0], [], [2, 1, 2, 2, 0, 0, 2, 2, 2, 3, 3, 1, 0, 2, 0, 3, 1, 0, 0, 1, 2, 2, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 1], [1, 0], [1, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(int(7.0),mod(( i1 - i2 ),divInt(mod(( max(abs(int(6.0)), in2) + divInt(i2,max(int(2.0), i2)) ),in1),int(4.0)))) \\l mod(mod(i0,i0),i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 9, 0, 25, 9, 3, 2, 7]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1], [4, 0, 7], [], [], [], [], [], [], [], [], [3, 1, 5], [1], [3, 0, 2, 1, 2, 1, 2, 1, 0], [0, 1, 0], [1], [1, 2, 1], [1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= max(i1, ( int(4.0) * mod(int(0.0),( int(7.0) - in2 )) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 9, 3, 1, 3, 1]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 7, 2, 8, 0, 8, 2, 2, 3, 0, 5, 1, 6, 3, 1, 2, 6, 5, 2, 3, 7, 8, 9, 3, 8, 0, 1, 4, 0], [3], [1], [], [1], [0], [], [], [], [2, 2, 4, 4, 1, 3, 1, 3, 3, 2, 5, 4, 6, 3, 3, 5, 2, 3, 0, 5, 3], [1, 1], [1, 2, 2, 1, 2, 0, 2, 2, 1, 3, 3, 2, 1, 0, 3, 0, 1, 2, 2, 2, 3, 3, 1, 1, 1, 1, 3, 1, 2, 3, 0, 3, 0, 3, 0, 1, 2, 3, 3, 1, 3, 0, 3, 0, 2, 3, 1, 3, 1, 2, 2, 3, 3, 2, 0, 0, 1, 1, 2, 3, 3, 1, 0, 1, 0, 0, 2, 0, 1, 3, 2, 1, 1, 3, 3, 2, 2, 1, 2, 3, 1, 3, 1, 2, 2, 3, 1, 1, 1, 0, 3, 0, 2, 1, 0, 2, 1, 3, 1, 0, 3, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [1, 2, 2, 2, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 1, 2, 2], [2, 0, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(6.0) \\ge divInt(( int(1.0) * mod(i2,divInt(mod(int(7.0),max(abs(divInt(int(2.0),i2)), abs(in1))),int(8.0))) ),( ( ( abs(max(int(0.0), int(8.0))) + int(2.0) ) + int(2.0) ) * max(int(3.0), ( max(in1, min(i1, max(in0, int(0.0)))) + divInt(max(min(int(5.0), min(i1, min(in0, divInt(abs(int(1.0)),max(int(6.0), mod(( min(max(( in0 - i2 ), int(3.0)), int(1.0)) - ( min(abs(int(2.0)), in2) + int(6.0) ) ),in1)))))), res0),mod(in0,int(5.0))) )) ))\\nin0 -= min(divInt(int(2.0),int(3.0)), abs(min(mod(( int(7.0) + mod(min(int(8.0), min(int(9.0), ( ( min(int(3.0), int(8.0)) * int(0.0) ) * in2 ))),max(i2, divInt(int(1.0),in0))) ),mod(int(4.0),abs(int(0.0)))), i0)))\\nin2 += abs(in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 30, 30, 1, 1, 0, 1, 1, 0, 0, 0, 21, 2, 102, 25, 28, 13, 14]}, {"genotype": [[0], [1], [1], [], [1], [1], [9], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1], [1, 5, 8, 0], [1], [0], [], [0, 1], [0], [2], [], [], [6, 0], [], [3, 0, 1, 2, 1, 3, 2, 1, 3, 0, 1], [0, 0], [1, 0, 2], [1, 2], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not max(res0, int(1.0)) \\g ( int(5.0) - min(( int(8.0) * abs(i0) ), int(0.0)) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 11, 2, 3, 2, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 2, 0, 0], [1, 1], [1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 2, 5, 1, 4, 3, 5, 4, 0], [3, 3, 3], [0, 0], [0], [1, 0, 0, 1, 1], [0, 0, 0], [0, 3], [], [], [1, 0, 0, 4, 3], [0, 1], [1, 3, 0, 1, 1, 2, 0, 3, 1, 1, 3, 1, 1, 2, 1, 1, 0], [0, 0], [1, 0, 2], [0, 0, 2], []], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(62.0) \\ge max(i1, int(2.0)):{:\\ni0 = int(5.0)\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = ( ( i0 + min(int(1.0), int(4.0)) ) \\ge abs(int(3.0)) and int(5.0) \\ge ( int(4.0) + int(0.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 *= in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 10, 10, 3, 2, 1, 5, 3, 2, 0, 0, 5, 2, 17, 2, 3, 3, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 7, 7, 7, 2, 7, 4, 2, 5, 8, 9, 7], [3, 4, 1], [0, 2], [1], [0, 0, 1, 1, 1], [0, 0, 0], [3, 2], [], [], [6, 4, 5, 1, 1, 5, 2, 6, 4], [], [0, 2, 2, 2, 0, 0, 1, 2, 0, 1, 3, 3, 3, 3, 1, 0, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1], [1, 2, 0, 2, 0, 2, 0, 0, 1], [1, 2, 1], [0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( not res0 \\ge divInt(mod(( in1 - in2 ),int(8.0)),( i1 * int(7.0) )) or max(abs(min(abs(int(7.0)), i1)), min(( abs(int(7.0)) - in2 ), min(i2, divInt(min(max(int(2.0), int(7.0)), int(4.0)),int(2.0))))) \\le mod(res0,divInt(int(5.0),int(8.0))) )\\nb2 = int(97.0) \\g in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 12, 12, 3, 2, 1, 5, 3, 2, 0, 0, 9, 0, 37, 8, 9, 3, 5]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1], [9, 8, 7], [], [], [], [], [], [], [], [], [4, 1, 1, 6], [0], [2, 2, 3, 2, 1, 1, 0, 0, 3, 1, 0], [0, 1, 1], [0, 1], [2], [0, 0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( divInt(min(divInt(int(9.0),int(8.0)), i1),i1) * max(int(7.0), res0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 11, 3, 2, 1, 2]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 3, 2, 7, 4, 3, 3, 3, 1, 3, 6, 8, 8, 6, 5, 4, 7, 6, 9, 7, 5, 2, 0, 4, 2, 1, 7, 1, 8, 3, 2, 9, 1, 9, 5, 5, 3, 3, 7, 7, 2, 0, 6], [1, 2], [], [0], [0, 1, 1], [0, 0], [3], [], [0], [4, 1, 4, 1, 6, 5, 5, 1, 0, 4, 4, 3, 6, 2, 4, 2, 4, 3, 1, 0, 0, 2, 0, 6, 0, 3, 2, 3, 5, 6, 6, 2, 0, 5, 1, 1, 5, 1, 3, 0, 5, 2, 4], [1], [3, 2, 0, 1, 2, 3, 0, 3, 3, 2, 3, 3, 3, 2, 0, 2, 0, 2, 0, 2, 1, 0, 1, 1, 2, 2, 2, 3, 3, 3, 2, 2, 0, 2, 3, 2, 3, 0, 3, 0, 3, 3, 0, 3, 0, 3, 3, 3, 0, 2, 1, 2, 2, 2, 3, 1, 1, 0, 0, 0, 3, 0, 2, 2, 2, 2, 1, 3, 1, 2, 1, 1, 1, 3, 1, 2, 2, 1, 1, 0, 2, 1, 0, 3, 2, 1, 2, 3, 0, 1, 3, 1, 0, 1, 3, 2, 3, 3, 3, 0, 3, 3, 1, 1, 0, 2, 3, 0, 0, 2, 2, 1, 1, 1, 0, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 2, 3, 1, 1, 3, 2, 2, 2, 0, 0, 0, 0, 3, 1, 3, 3, 0, 3, 3, 3, 1, 1, 1, 3, 3, 0, 1, 3, 0, 1, 2, 2, 2, 1, 3, 0, 1, 3, 3, 1, 3, 1, 3, 3, 1, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 2, 0, 2, 0, 1, 1, 0, 1, 0, 2, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 2, 2, 1, 0, 0, 2, 0, 1, 1, 0, 0, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 2], [0, 1, 1, 2, 0, 1, 2, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( min(mod(in1,int(5.0)), ( min(i1, min(min(( min(max(min(divInt(in1,( i1 + ( res0 - ( int(1.0) - in2 ) ) )), int(3.0)), int(2.0)), divInt(( ( min(min(abs(divInt(( in2 * ( max(divInt(max(i1, abs(i0)),min(abs(in1), min(in1, max(max(min(in0, divInt(int(7.0),divInt(divInt(( max(int(4.0), int(3.0)) + res0 ),i2),in1))), min(i2, ( ( mod(( int(3.0) - abs(int(3.0)) ),divInt(int(1.0),int(3.0))) * int(6.0) ) + max(int(8.0), ( divInt(int(8.0),int(6.0)) - in1 )) ))), divInt(int(5.0),in0))))), abs(divInt(int(4.0),( min(i1, int(7.0)) + abs(int(6.0)) )))) + i0 ) ),int(9.0))), min(( max(abs(min(i0, max(abs(int(7.0)), int(5.0)))), i2) + mod(abs(i0),res0) ), ( divInt(int(2.0),int(0.0)) + int(4.0) ))), i0) * ( abs(( max(in0, ( i2 * in0 )) - in2 )) - int(2.0) ) ) * min(res0, min(mod(abs(int(1.0)),int(7.0)), min(mod(mod(( res0 * i2 ),i0),in2), max(int(1.0), max(min(i1, min(abs(min(int(8.0), int(3.0))), int(2.0))), abs(abs(i1))))))) ),int(9.0))) * min(in2, int(1.0)) ), ( mod(divInt(int(9.0),max(i1, int(5.0))),max(max(int(5.0), min(int(3.0), abs(abs(int(3.0))))), in0)) - i0 )), int(7.0))) - in2 )) \\g ( i2 * int(7.0) ) and int(2.0) == int(0.0) ):{:\\nin1 -= int(6.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 44, 44, 2, 0, 1, 3, 2, 1, 0, 1, 43, 1, 183, 43, 54, 24, 20]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1], [6, 8], [], [], [], [], [], [], [], [], [2, 2, 3, 0], [0, 1], [3, 3, 1, 2, 0, 1, 3, 0], [1], [2, 1, 2], [1], [0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = abs(max(int(6.0), divInt(i2,int(8.0))))\\nin0 -= abs(i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 8, 1, 3, 1, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [0, 0, 1], [1, 1, 1], [9, 8, 9], [4], [0, 0], [], [0, 1, 0], [0], [2, 1], [1], [], [6, 1, 0, 1], [1], [2, 3, 1, 2, 0, 1, 0, 0, 1], [1, 1], [0], [2], [0, 1]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not divInt(min(int(9.0), mod(res0,int(8.0))),i1) \\le i0\\nb0 = False\\ni1 *= int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 1, 2, 0, 3, 1, 2, 1, 0, 4, 1, 9, 2, 1, 1, 2]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1], [2, 2, 1, 0, 2, 2, 0, 1], [0, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 3, 0, 0, 4, 8, 5, 3, 6, 3, 4, 3, 9, 6, 5, 3, 8, 3, 7, 8, 7, 8, 7, 3, 0, 5, 0, 3, 7, 3, 9, 7, 2, 2, 6, 8, 2, 2, 3, 5, 7, 6, 0, 7, 5, 7, 8, 1, 6, 7, 2, 3, 1, 9, 4, 6, 7, 9, 4, 3, 5, 6, 0, 8, 8, 2, 2, 1, 5, 0, 0, 3, 8, 3, 9, 5, 3, 7, 8, 9, 9, 9, 9, 4, 6, 5, 4, 6, 0, 6, 7, 4, 4, 8, 3, 1, 9, 5, 1, 8, 6, 7, 9, 0, 9, 0, 9, 1, 8, 5, 6, 8, 6, 2, 0, 0, 0, 3, 8, 4, 8, 3, 2, 0, 9, 0, 4, 3, 3, 9, 7, 8, 9, 0, 5, 6, 4, 4, 4, 0, 3, 6, 4, 3, 1, 1, 7, 6, 6, 5, 5, 2, 9, 9, 5, 5, 0, 5, 9, 1, 3, 0, 0, 6, 3, 5, 9, 2, 9, 3, 1, 8, 8, 7, 2, 7, 0, 3], [1, 0, 0, 5, 5, 4, 4, 3], [0, 0, 0, 1], [1, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 0, 2, 2, 2], [], [0, 0], [5, 2, 4, 5, 1, 0, 0, 2, 4, 2, 1, 5, 3, 3, 1, 5, 5, 2, 4, 6, 4, 6, 6, 5, 6, 4, 5, 2, 3, 4, 0, 2, 2, 2, 3, 5, 4, 4, 2, 5, 0, 3, 6, 4, 6, 0, 2, 6, 4, 2, 5, 4, 3, 1, 3, 0, 2, 2, 5, 6, 6, 4, 1, 4, 3, 6, 3, 0, 1, 1, 5, 3, 2, 1, 2, 1, 6, 3, 3, 3, 6, 1, 3, 1, 4, 6, 2, 5, 1, 5, 4, 0, 6, 5, 5, 3, 2, 0, 4, 6, 0, 5, 1, 5, 0, 3, 4, 1, 0, 2, 2, 0, 6, 1, 2, 3, 1, 4, 0, 6, 0, 6, 0, 4, 3, 2, 2, 5, 3, 0, 1, 3, 1, 3, 0, 2, 6, 1, 4, 5, 1, 6, 1, 3, 1, 4, 3, 4, 0, 0, 2, 0, 4, 5, 5, 2, 4, 4, 0, 1, 2, 2, 2, 3, 4, 2, 2, 0, 5, 1, 3, 0, 6, 3, 5, 1, 3, 2, 4, 4, 4, 6, 2, 3, 4, 4, 1, 3, 1, 1, 3, 5, 0, 1, 1, 4, 5, 3, 2, 0, 0], [0], [3, 3, 2, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 3, 3, 1, 2, 2, 2, 2, 0, 0, 2, 3, 2, 3, 3, 1, 1, 0, 0, 3, 3, 2, 0, 3, 0, 2, 2, 0, 1, 2, 1, 3, 0, 0, 3, 2, 2, 2, 2, 0, 2, 3, 3, 1, 3, 3, 1, 1, 2, 1, 1, 1, 2, 0, 3, 2, 2, 0, 0, 2, 1, 2, 1, 2, 3, 3, 1, 1, 1, 2, 0, 1, 1, 3, 0, 0, 0, 3, 3, 3, 3, 2, 3, 0, 0, 3, 3, 3, 3, 1, 0, 2, 3, 2, 0, 3, 3, 3, 2, 2, 1, 0, 1, 2, 3, 0, 1, 3, 0, 1, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 1, 3, 2, 2, 3, 3, 3, 0, 3, 3, 0, 3, 1, 2, 2, 3, 1, 0, 1, 2, 0, 2, 3, 0, 3, 2, 3, 2, 2, 3, 3, 0, 1, 3, 3, 0, 3, 0, 0, 2, 3, 1, 1, 3, 3, 2, 0, 3, 0, 2, 3, 1, 1, 2, 3, 3, 2, 2, 0, 1, 2, 1, 3, 2, 3, 1, 0, 2, 2, 3, 1, 1, 0, 2, 3, 1, 3, 2, 0, 3, 3, 2, 0, 1, 0, 3, 3, 3, 0, 3, 1, 2, 0, 3, 0, 2, 2, 2, 3, 1, 3, 3, 3, 0, 1, 0, 2, 1, 2, 1, 0, 0, 3, 0, 0, 3, 3, 2, 0, 3, 3, 2, 2, 0, 1, 1, 3, 3, 3, 0, 1, 3, 2, 1, 0, 3, 0, 3, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 0, 1, 0, 3, 2, 1, 0, 1, 1, 1, 2, 0, 1, 3, 1, 2, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 1, 3, 0, 3, 1, 3, 0, 2, 2, 0, 3, 3, 1, 1, 3, 1, 3, 1, 3, 0, 1, 2, 3, 2, 3, 2, 0, 3, 2, 3, 1, 0, 0, 1, 1, 1, 3, 0, 0, 3, 2, 1, 0, 2, 3, 2, 0, 1, 3, 1, 2, 0, 3, 3, 1, 0, 3, 3, 0, 0, 0, 3, 3, 1, 3, 3, 3, 1, 2, 0, 1, 3, 3, 0, 2, 1, 2, 3, 3, 0, 3, 1, 3, 2, 3, 1, 3, 3, 1, 0, 1, 2, 0, 1, 0, 1, 2, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 1, 1, 0, 0, 1, 2, 3, 2, 3, 2, 1, 3, 3, 1, 0, 3, 1, 0, 0, 3, 3, 0, 3, 1, 3, 3, 1, 0, 0, 1, 2, 1, 0, 3, 3, 2, 2, 3, 3, 2, 0, 3, 1, 3, 1, 1, 3, 2, 3, 2, 3, 3, 3, 1, 0, 2, 1, 3, 1, 1, 1, 3, 0, 0, 0, 3, 0, 1, 3, 1, 2, 2, 0, 3, 1, 2, 3, 2, 0, 0, 1, 0, 2, 3, 1, 1, 2, 2, 0, 3, 2, 3, 2, 0, 2, 0, 2, 0, 2, 0, 3, 3, 0, 1, 1, 0, 1, 1, 2, 2, 2, 1, 3, 2, 3, 2, 2, 0, 0, 1, 3, 3, 1, 0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 3, 2, 3, 3, 1, 2, 0, 3, 3, 2, 3, 3, 2, 2, 1, 1, 3, 2, 1, 3, 3, 0, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 0, 3, 0, 2, 2, 3, 0, 2, 1, 3, 2, 3, 2, 1, 2, 2, 2, 0, 2, 0, 2, 2, 1, 2, 3, 1, 3, 2, 0, 0, 1, 3, 0, 2, 1, 3, 0, 2, 2, 2, 2, 1, 3, 2, 0, 2, 2, 0, 2, 2, 1, 1, 2, 3, 2, 2, 1, 0, 3, 0, 0, 3, 0, 0, 2, 0, 3, 1, 1, 3, 3, 1, 1, 2, 3, 2, 1, 2, 3, 2, 3, 0, 0, 3, 0, 0, 1, 1, 0, 1, 2, 1, 0, 1, 1, 3, 0, 1, 1, 0, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 3, 0, 3, 1, 2, 3, 0, 1, 3, 0, 2, 0, 0, 1, 0, 3, 2, 3, 3, 0, 1, 1, 2, 1, 2, 2, 1, 3, 0, 3, 2, 3, 3, 3, 0, 0, 0, 1, 3, 2, 2, 2, 2, 3, 1, 2, 0, 0, 2, 1, 0, 0, 0, 3, 2, 3, 0, 2, 2, 3, 2, 0, 3, 0, 2, 2, 3, 2, 0, 1, 0, 0, 3, 1, 3, 0, 2, 3, 2, 2, 1, 0, 3, 0, 0, 2, 2, 1, 3, 2, 0, 3, 1, 0, 1, 3, 0, 2, 2, 3, 3, 1, 0, 1, 1, 3, 2, 0, 1, 0, 3, 0, 0, 3, 2, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 2, 1, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 2, 2, 2, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 0, 2, 0, 1, 1, 2, 2, 2, 0, 0, 1, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 0, 2, 0, 0, 0, 1, 2, 0, 2, 0, 1, 0, 2, 1, 0, 1, 1, 0, 0, 1, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 0, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 0, 1, 0, 1, 2, 0, 1, 0, 0, 2, 0, 0, 2, 1, 0, 0, 1, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 2, 2, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 1, 0, 1, 2, 0, 2, 2, 1, 0, 2, 1, 1, 0, 1, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 0, 0, 2, 1, 2, 1], [0, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 1, 1, 2, 2, 0, 0, 2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 1, 1, 2, 1, 2, 0, 1, 0, 0, 1, 2, 0, 1, 0, 1, 1, 0, 0, 0, 2, 0, 1, 1, 1, 2, 0, 1, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 0, 1, 0, 0, 0, 2, 2, 1, 2, 1, 0, 2, 1, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 2, 0, 2, 0, 1, 1, 2, 1, 0, 2, 2, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 127, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(max(( in2 + ( int(8.0) * i2 ) ), ( ( min(( int(9.0) - min(( max(max(int(3.0), ( divInt(divInt(( in1 * in2 ),( abs(divInt(max(max(int(0.0), int(0.0)), i1),i0)) - max(max(( i0 - min(i2, ( ( in1 + int(4.0) ) - ( int(8.0) * min(i2, i1) ) )) ), min(mod(( ( ( in2 - ( max(max(int(5.0), abs(abs(int(3.0)))), int(6.0)) + ( int(3.0) - int(4.0) ) ) ) - int(3.0) ) - mod(in0,max(mod(divInt(in0,i1),( int(9.0) * divInt(int(6.0),( min(max(int(5.0), int(3.0)), int(8.0)) * ( in2 + int(3.0) ) )) )), int(7.0))) ),max(in2, i2)), in1)), min(max(abs(min(( min(res0, in1) + max(min(abs(max(int(8.0), res0)), ( abs(( res0 * min(abs(max(mod(( int(7.0) - in2 ),int(8.0)), divInt(min(res0, int(7.0)),abs(in1)))), int(3.0)) )) - int(0.0) )), mod(( in2 + mod(i2,divInt(mod(int(5.0),int(0.0)),int(3.0))) ),abs(( ( abs(min(max(in0, max(abs(in1), max(int(7.0), ( ( max(int(3.0), i0) + int(9.0) ) * divInt(i2,mod(max(i2, abs(divInt(max(divInt(divInt(min(max(i2, int(7.0)), min(min(in0, min(in2, in1)), ( min(int(2.0), int(2.0)) * min(min(divInt(in1,max(i2, mod(abs(int(6.0)),int(8.0)))), ( abs(abs(divInt(( in2 + int(2.0) ),divInt(int(2.0),max(mod(abs(int(3.0)),i0), ( divInt(max(int(5.0), int(7.0)),in0) - ( min(int(6.0), abs(( res0 - min(abs(( in1 - int(0.0) )), res0) ))) - abs(abs(abs(i0))) ) )))))) * min(int(7.0), divInt(i2,max(res0, divInt(mod(( min(int(5.0), abs(max(max(in1, int(7.0)), i2))) - ( int(8.0) * mod(int(1.0),in2) ) ),in1),max(in0, i1))))) )), abs(min(mod(in0,max(min(( divInt(i0,int(6.0)) + int(7.0) ), abs(min(max(i2, int(2.0)), max(( int(3.0) - i2 ), abs(in2))))), abs(( mod(divInt(( mod(res0,( int(1.0) + divInt(abs(res0),int(9.0)) )) + in1 ),min(( int(4.0) - i1 ), int(6.0))),int(7.0)) * int(9.0) )))), mod(in1,int(4.0))))) ))),min(int(3.0), mod(in0,res0))),max(abs(mod(( in0 + i0 ),i1)), i1)), ( int(5.0) - int(6.0) )),int(0.0)))),divInt(int(8.0),int(8.0)))) )))), mod(int(2.0),abs(in2)))) + max(int(2.0), min(in0, divInt(mod(i2,abs(max(int(1.0), int(5.0)))),abs(int(0.0))))) ) - abs(int(0.0)) )))) ), max(i1, int(3.0)))), mod(abs(divInt(max(divInt(i2,abs(( max(int(8.0), i1) - res0 ))), int(3.0)),int(9.0))),int(5.0))), min(in0, in0))) )),max(( int(3.0) + in0 ), ( max(mod(res0,int(7.0)), min(int(8.0), mod(i1,abs(min(int(9.0), in0))))) + max(abs(i1), in1) ))) + res0 )), max(abs(int(9.0)), abs(max(abs(int(9.0)), ( i2 * int(9.0) ))))) + max(max(in2, mod(int(4.0),( max(min(i1, abs(int(6.0))), min(divInt(min(int(5.0), min(max(int(4.0), in2), int(6.0))),( in1 - int(0.0) )), i0)) - int(6.0) ))), ( res0 - ( abs(in2) * in2 ) )) ), mod(int(7.0),in0)) ), i2) + ( i0 - int(4.0) ) ) * int(4.0) )), in1) \\g res0:{:\\nloopBreak% = 0\\nwhile ( int(8.0) \\l divInt(min(( abs(mod(int(3.0),min(max(int(1.0), i0), min(int(9.0), in2)))) - i1 ), abs(max(in2, min(int(5.0), max(max(int(1.0), i0), in0))))),int(8.0)) or mod(int(6.0),in1) \\l min(min(( divInt(max(max(mod(i1,abs(int(7.0))), max(int(9.0), int(0.0))), abs(( abs(( min(max(abs(int(9.0)), i0), divInt(int(0.0),max(int(9.0), int(1.0)))) - int(8.0) )) - abs(i2) ))),i2) + i0 ), min(res0, int(5.0))), max(int(6.0), mod(mod(i1,max(int(8.0), mod(abs(( i2 * in0 )),int(6.0)))),i1))) ):{:\\nb0 = ( abs(int(2.0)) - int(0.0) ) != mod(( in1 * abs(mod(max(( i0 * ( res0 * mod(i0,divInt(res0,max(abs(i0), int(0.0)))) ) ), int(0.0)),in1)) ),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = int(8.0)\\nif mod(( ( int(4.0) + abs(( abs(( divInt(i2,i2) - int(8.0) )) + min(max(int(3.0), in2), in0) )) ) + i0 ),min(max(int(2.0), i1), in0)) != i1:{:\\nloopBreak% = 0\\nwhile ( not in0 \\le i0 or b0 ):{:\\nb0 = not abs(i2) \\le res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nb1 = not not mod(min(( max(min(int(0.0), ( i1 + min(abs(mod(min(min(divInt(divInt(int(9.0),int(0.0)),abs(( int(4.0) * max(min(in1, divInt(int(3.0),mod(min(( int(3.0) * mod(int(9.0),mod(max(in2, abs(i1)),divInt(divInt(abs(res0),( int(7.0) - min(mod(max(( int(8.0) * mod(( divInt(i1,divInt(in0,( ( int(9.0) - ( max(int(0.0), abs(divInt(i1,in1))) + int(5.0) ) ) * max(in0, divInt(int(6.0),abs(in1))) ))) - mod(( mod(divInt(int(4.0),max(( i0 * ( ( i0 - divInt(( int(4.0) * int(4.0) ),( min(mod(divInt(int(0.0),i2),abs(i0)), in1) * abs(in2) )) ) * in2 ) ), ( i2 + max(int(3.0), int(6.0)) ))),min(abs(int(4.0)), int(3.0))) - divInt(abs(( int(1.0) - mod(abs(( abs(in1) * in1 )),min(i0, i1)) )),int(1.0)) ),int(7.0)) ),i2) ), int(6.0)),mod(int(6.0),i2)), int(5.0)) )),int(5.0)))) ), min(i2, int(2.0))),int(9.0)))), in0) ))), mod(int(9.0),abs(mod(( int(5.0) - in1 ),int(5.0))))), min(i2, min(i2, max(int(0.0), mod(min(i0, int(5.0)),max(in2, divInt(i1,in0))))))),int(9.0))), i0) )), abs(( min(abs(res0), int(1.0)) * int(3.0) ))) + ( int(0.0) * ( mod(int(0.0),abs(in0)) + max(( min(abs(max(in2, i1)), in0) - int(6.0) ), max(mod(( ( divInt(min(int(3.0), divInt(i2,in1)),mod(int(5.0),in1)) - in1 ) * res0 ),max(divInt(abs(i2),mod(mod(abs(divInt(in0,abs(in1))),( divInt(max(mod(in1,int(9.0)), i1),in0) - max(int(2.0), abs(i1)) )),( max(divInt(mod(int(9.0),i1),abs(in0)), in2) + ( divInt(int(3.0),min(mod(i0,abs(int(1.0))), i1)) * int(8.0) ) ))), min(i1, divInt(( min(abs(int(8.0)), in1) * int(7.0) ),int(2.0))))), max(divInt(in2,int(7.0)), in0))) ) ) ), abs(i2)),i0) \\ge max(( int(0.0) - i0 ), int(3.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 179, 179, 8, 4, 2, 15, 8, 7, 0, 2, 201, 1, 821, 211, 231, 100, 111]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [1, 1, 1, 1, 1, 1], [0, 6, 5, 5, 0, 1], [1], [], [], [1], [0], [], [], [], [4, 2, 3, 1, 6, 6], [0], [2, 2, 1, 3, 0, 2, 2, 2, 3, 1, 0, 1, 1, 0, 1, 0, 3, 1, 0], [1, 1, 1, 1, 0], [0, 0, 1], [1], [0, 0, 0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(divInt(int(0.0),min(in1, divInt(divInt(( min(int(6.0), i2) - int(5.0) ),int(5.0)),in0))),int(0.0)) \\g i1:{:\\nres0 = max(int(1.0), res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 6, 6, 1, 0, 0, 1, 1, 0, 0, 0, 6, 1, 19, 5, 3, 1, 4]}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [0, 0, 0], [1, 1, 1], [1, 6, 0], [2, 2], [0, 1, 0, 1], [], [1, 0, 0, 1], [0, 0], [0, 2], [], [], [6, 6], [], [3, 0, 1, 0, 3, 1, 1], [], [0, 2], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(res0, int(1.0)) == res0\\nb1 = b0\\nb1 = not abs(int(6.0)) == int(0.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 3, 3, 2, 4, 0, 4, 2, 2, 0, 0, 2, 0, 7, 0, 2, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 2, 6], [0], [3, 0, 0], [], [1], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = max(i2, res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1], [2, 1, 1, 0, 0, 2, 0, 1], [1, 1], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 0, 2, 7, 6, 1, 9, 5, 5, 7, 6, 6, 5, 2, 1, 0, 8, 4, 7, 3, 6, 8, 1, 9, 4, 8, 9, 4, 6, 5, 9], [0, 1, 0, 5, 2, 3, 1], [0, 0, 0, 0, 2], [], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [], [], [], [5, 1, 5, 4, 0, 1, 5, 5, 6, 0, 3, 3, 0, 3, 1, 6, 5, 2, 1, 4, 4, 1, 5, 5, 2, 4, 1, 6], [1], [3, 2, 1, 0, 1, 3, 1, 2, 0, 3, 3, 3, 1, 2, 2, 0, 1, 2, 0, 3, 0, 3, 3, 3, 2, 2, 2, 2, 0, 1, 2, 3, 1, 0, 1, 1, 0, 2, 0, 3, 1, 2, 1, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 0, 2, 1, 3, 3, 1, 1, 2, 3, 0, 2, 1, 3, 1, 3, 0, 3, 1, 0, 0, 1, 3, 3, 1, 1, 3, 1, 3, 2, 1, 2, 0, 2, 3, 2, 0, 1, 2, 2, 1, 3, 3, 0, 0, 2, 0, 3, 3, 3, 3, 1, 2, 2, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 1, 0, 1, 2, 0, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 2, 2, 1, 2, 0, 2, 2, 0, 0, 0], [2, 2, 2, 1, 2, 1, 2, 1, 0, 2, 2, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(divInt(int(9.0),in2), int(6.0)) \\l abs(int(0.0)):{:\\nb0 = divInt(i1,max(min(max(int(2.0), ( mod(in2,int(7.0)) * ( in1 * abs(i0) ) )), min(min(min(divInt(mod(( ( i1 * int(6.0) ) - ( min(int(1.0), in2) * int(9.0) ) ),int(5.0)),in2), mod(res0,abs(int(5.0)))), ( int(7.0) - i0 )), in0)), in0)) \\g int(6.0)\\nb0 = int(6.0) \\l min(int(5.0), max(i0, in0))\\nb0 = i1 != divInt(int(2.0),min(abs(int(1.0)), int(0.0)))\\nb0 = mod(abs(res0),( int(8.0) * max(int(4.0), min(in2, min(int(7.0), i2))) )) == i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(36.0) \\ge abs(abs(int(8.0))):{:\\nb2 = int(1.0) \\g abs(int(9.0))\\nin1 -= max(( int(4.0) + divInt(in1,( abs(divInt(i1,int(8.0))) * ( ( int(9.0) * min(abs(in2), in2) ) - mod(i2,abs(min(min(min(int(4.0), ( divInt(in1,int(6.0)) - i1 )), int(5.0)), res0))) ) )) ), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 32, 32, 7, 5, 0, 7, 7, 0, 0, 0, 28, 1, 112, 24, 30, 13, 12]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 7, 9, 2, 7, 2, 8, 2, 2, 1, 9, 2], [], [], [], [], [], [], [], [], [0, 6, 6, 0, 4, 6, 6, 0, 3, 3, 0, 2, 2], [0, 1], [0, 3, 3, 2, 3, 3, 3, 1, 0, 2, 1, 2, 2, 3, 3, 2, 1, 3, 1, 2, 1, 1, 1, 0, 0, 1, 0, 3, 0, 2, 1, 2, 0, 2, 0, 2, 2, 3, 0, 3, 1, 1, 2, 1, 3, 2, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [2, 0, 1, 0, 2, 0, 0, 0, 1, 1, 2, 1], [2, 1, 2, 2, 2, 0, 2], [0, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = res0\\nres0 *= abs(min(divInt(max(min(abs(int(7.0)), i0), ( int(7.0) - ( ( min(min(mod(int(7.0),min(int(9.0), divInt(int(2.0),int(7.0)))), int(2.0)), in1) * res0 ) * int(8.0) ) )),res0), max(i0, ( int(2.0) * ( in0 + divInt(in0,mod(divInt(max(i0, abs(int(2.0))),int(1.0)),( int(9.0) * max(divInt(i2,i2), int(2.0)) ))) ) ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 13, 2, 49, 13, 12, 7, 7]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 2], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1], [5], [0], [2, 0], [0], [0, 1, 0], [0], [3, 0], [], [], [1], [], [0, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( i1 \\l abs(int(5.0)) and b0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 3, 1, 2, 0, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 2, 1, 1, 0, 1], [0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 2, 1, 4, 1, 4, 9, 0, 6, 3, 8, 9, 4, 5, 5, 1, 8, 3, 0, 5, 4, 8, 1, 5, 6, 3], [1, 0, 1, 4, 5], [1, 1, 0, 0], [], [1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 1], [1], [1, 1, 0, 1], [1, 2, 6, 5, 2, 0, 4, 2, 1, 6, 4, 5, 2, 5, 3, 6, 2, 2, 3, 5, 5, 6, 4, 6, 4, 6, 5, 1, 2, 1, 2, 0, 0, 0, 6, 4], [1, 1], [1, 2, 3, 1, 3, 2, 0, 2, 2, 3, 3, 3, 2, 3, 2, 2, 0, 1, 3, 3, 2, 2, 3, 3, 2, 0, 2, 3, 3, 2, 2, 0, 2, 2, 1, 0, 1, 0, 2, 3, 1, 2, 3, 1, 0, 0, 1, 0, 0, 1, 2, 0, 1, 2, 0, 3, 2, 2, 0, 1, 1, 3, 1, 0, 2, 3, 1, 3, 1, 0, 1, 0, 1, 0, 0, 3, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1, 2, 1, 0, 0, 1, 2, 2, 3, 1, 3, 1, 0, 2, 2, 0, 2, 0, 1, 0, 0, 3, 0, 2, 0, 3, 2, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 2, 1, 1, 0, 2, 2, 0, 0, 1, 0, 0, 2, 2, 0, 2, 2, 0, 2, 0, 2, 1, 0, 0], [1, 0, 0, 2, 0, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 0, 2, 0, 2], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(4.0) \\g ( min(int(1.0), min(mod(i1,( ( max(abs(max(( max(( mod(i2,int(2.0)) - min(abs(( ( abs(min(( res0 + ( min(max(divInt(mod(in2,divInt(divInt(int(1.0),i2),int(4.0))),i0), ( min(int(1.0), divInt(min(int(4.0), in1),i2)) + int(9.0) )), i1) * res0 ) ), int(0.0))) + ( in1 * int(6.0) ) ) * mod(in2,abs(( divInt(i2,int(3.0)) - int(8.0) ))) )), abs(int(9.0))) ), in2) - divInt(min(int(4.0), abs(int(5.0))),in0) ), int(5.0))), res0) * int(1.0) ) - i2 )), i2)) - abs(min(abs(divInt(int(8.0),in0)), min(( int(3.0) * in2 ), int(0.0)))) ):{:\\nif b1:{:\\nif divInt(int(5.0),in2) \\l res0:{:\\nin1 -= int(4.0)\\n:}\\n:}else:{:\\nif ( ( abs(int(8.0)) * max(int(1.0), res0) ) * ( mod(in1,( res0 + int(5.0) )) * in2 ) ) \\g i1:{:\\nb1 = False\\n:}else:{:\\ni2 += min(i1, divInt(i2,min(( i0 * int(6.0) ), i0)))\\n:}\\n:}\\n:}else:{:\\nb0 = i0 \\le int(3.0)\\n:}\\nb0 = res0 != in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 27, 27, 5, 4, 0, 7, 5, 2, 1, 4, 36, 2, 119, 32, 26, 20, 14]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 0, 1, 1], [0, 4, 7, 8, 6], [5, 0], [2, 1], [], [0, 1, 1], [0, 0], [2], [], [], [6, 3], [], [3, 1, 2, 0, 1, 0, 1, 3, 1], [1], [1, 2], [], [1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not max(int(0.0), mod(res0,int(4.0))) != in0\\nb1 = int(78.0) \\l abs(int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 2, 2, 0, 3, 2, 1, 0, 0, 2, 0, 9, 1, 2, 0, 1]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1], [5], [3], [2], [], [0, 1], [0], [1], [1], [], [5], [], [0, 1], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb2 = in2 \\ge int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 1, 8, 8, 5, 1, 4, 5, 5, 1, 1], [4], [0, 2], [], [1, 0, 0], [0], [1, 1], [1, 1], [], [0, 2, 5, 1, 2, 6, 2, 2, 6, 1, 6, 4, 1], [], [3, 2, 3, 3, 2, 1, 1, 0, 1, 1, 2, 2, 2, 2, 3, 1, 2, 3, 2, 1, 1, 0, 1, 3, 0, 0, 2, 3, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 2, 0, 0, 0, 2, 1, 3, 2, 1, 3, 2, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 0, 2, 0, 1, 1, 1, 2, 2], [2, 1, 0, 2, 1, 2, 1, 0, 2], [1, 1, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(( min(abs(mod(int(0.0),int(3.0))), i0) * int(1.0) ), int(8.0)) \\le mod(( ( mod(min(int(8.0), ( max(( int(5.0) - int(1.0) ), i2) + int(4.0) )),max(in2, i1)) * ( max(divInt(i2,int(5.0)), divInt(res0,int(5.0))) - ( i2 * divInt(i2,mod(res0,i1)) ) ) ) - res0 ),( int(1.0) + abs(mod(int(1.0),abs(( in1 * i1 )))) )):{:\\nb0 = False\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 12, 12, 1, 2, 0, 3, 1, 2, 2, 0, 13, 0, 51, 17, 9, 9, 8]}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 2, 2, 0, 1, 0, 0], [1, 0, 1], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 1, 5, 2, 9, 7, 3, 6, 5, 7, 9, 8, 4, 9, 5, 6, 4], [1, 5, 1, 1, 1, 0], [2, 1, 0, 2, 0, 1], [0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0], [], [0], [4, 5, 2, 2, 1, 1, 5, 3, 5, 1, 2, 5, 4, 5, 6, 3, 4, 2, 6, 0, 6], [0], [1, 0, 1, 3, 1, 0, 2, 3, 0, 1, 2, 3, 0, 0, 3, 1, 3, 3, 0, 2, 1, 3, 0, 3, 3, 3, 2, 0, 1, 3, 3, 0, 1, 0, 1, 3, 0, 2, 0, 0, 1, 1, 3, 0, 1, 1, 3, 0, 2, 3, 2, 1, 2, 3, 0, 1, 3, 3, 3, 1, 0, 2, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0], [1, 2, 0, 1, 2, 0, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(6.0) \\g in1:{:\\nb2 = int(6.0) != max(int(1.0), in2)\\nif b1:{:\\nloopBreak% = 0\\nwhile ( not not divInt(abs(i2),int(5.0)) \\g ( min(i2, i1) + max(int(2.0), abs(min(i1, ( int(9.0) - abs(in2) )))) ) and max(max(min(mod(in0,int(7.0)), min(max(in2, int(3.0)), i1)), int(6.0)), max(i2, ( in2 - in1 ))) \\g int(5.0) ):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 = int(7.0)\\nb0 = min(res0, int(9.0)) \\g int(8.0)\\nb1 = min(in0, divInt(max(( int(4.0) - mod(abs(in1),int(9.0)) ), min(min(min(int(5.0), i2), ( int(6.0) + res0 )), int(4.0))),i0)) \\l res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 18, 18, 6, 6, 1, 11, 6, 5, 0, 1, 21, 1, 67, 9, 20, 5, 4]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1], [5, 5, 5], [1], [1], [], [0, 1], [0], [2], [], [], [1, 6, 0, 0, 5, 3, 6], [], [3, 0, 2, 2, 0, 2, 3, 1, 0, 2, 1, 0, 2, 0, 3, 3, 0, 1, 0], [1, 1, 1, 1, 0], [1, 1, 2, 1], [1], [0, 0, 1, 0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not max(i1, divInt(divInt(res0,mod(max(int(5.0), i0),divInt(int(5.0),i0))),( in2 - abs(max(in0, int(5.0))) ))) \\g res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 2, 1, 1, 0, 0, 7, 0, 19, 5, 4, 1, 4]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 1, 1, 0], [1, 1, 0], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1], [6, 0, 4, 4, 5, 2], [4, 5, 5], [2, 2], [], [1, 1, 1, 0, 0], [0, 0, 0], [1, 1], [0, 1], [0], [6, 3, 4, 1, 5, 4, 6], [0, 1], [0, 0, 2, 0, 1, 1, 3, 1, 3, 0, 1, 3, 1, 1, 0], [1], [2, 0, 1], [1], [0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile res0 \\le in0:{:\\nloopBreak% = 0\\nwhile divInt(in1,int(6.0)) != int(0.0):{:\\nb2 = abs(int(4.0)) != min(i1, int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = max(int(5.0), int(2.0))\\nin1 -= res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 6, 6, 3, 2, 0, 5, 3, 2, 2, 1, 7, 2, 15, 1, 3, 1, 1]}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 1, 0, 2, 0], [0, 1], [0, 0, 0], [1, 1], [9, 9], [4, 2, 1], [1, 2, 1, 1, 2], [1], [0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0], [2, 3, 1, 0, 0], [1], [1], [4, 3, 5, 3, 2, 1], [], [0, 0, 0, 0, 3, 2, 3, 1, 3, 0, 0, 1], [1], [2, 1, 2], [], [0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( in1 \\le in0 or False ):{:\\nb1 = b2\\n:}else:{:\\nb1 = in2 == in0\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = abs(divInt(max(int(9.0), abs(i2)),i1)) \\g int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 2, 2, 3, 5, 1, 8, 3, 5, 1, 1, 6, 0, 12, 1, 3, 0, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 1, 0, 1, 1, 1, 2, 1], [0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 9, 8, 7, 8, 6, 3, 7, 3, 3, 9, 8, 7, 9, 6, 8, 3, 2, 2, 6, 6, 5, 9, 8, 4, 4, 1, 8, 4, 0, 2, 1, 5, 3, 5, 7, 2, 6], [5, 0, 1, 2, 4, 4], [1, 0, 0, 1, 0], [1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [2, 3, 0, 0, 0], [], [1, 1, 0], [2, 1, 0, 3, 3, 5, 2, 0, 2, 4, 5, 2, 5, 0, 1, 3, 5, 3, 0, 3, 4, 4, 5, 1, 5, 2, 5, 3, 6, 4, 4, 6, 2, 2, 4, 0, 0, 1, 6, 2, 0, 0, 4, 4, 6, 1, 6, 5, 4, 2, 4, 6, 5], [1, 1, 0, 0], [2, 0, 1, 0, 0, 1, 2, 1, 3, 3, 2, 1, 3, 3, 2, 2, 3, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 3, 2, 0, 1, 3, 3, 1, 2, 0, 3, 0, 2, 3, 0, 2, 3, 1, 2, 0, 2, 0, 1, 3, 3, 3, 3, 0, 3, 0, 0, 3, 0, 3, 3, 1, 1, 0, 0, 1, 2, 3, 3, 0, 2, 2, 1, 3, 3, 0, 0, 0, 0, 3, 1, 2, 0, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 2, 1, 0, 3, 2, 2, 0, 1, 0, 0, 2, 3, 2, 0, 0, 0, 3, 3, 3, 1, 2, 3, 0, 3, 2, 1, 2, 3, 3, 3, 1, 0, 0, 2, 1, 0, 2, 2, 0, 0, 2, 3, 3, 1, 1, 0, 3, 1, 2, 2, 1, 2, 1, 1, 0, 2, 0, 1, 1, 3, 1, 0, 1, 3, 0, 1, 3, 0, 3, 0, 1, 3, 0, 3, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 1, 1, 2, 1, 0, 2, 1, 2, 1, 1, 0, 1, 1, 0, 1, 2, 0, 2, 0, 1, 0, 2, 1, 0, 2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 1], [1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 0, 2, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( i2 - int(1.0) ) != i1:{:\\nloopBreak% = 0\\nwhile not i0 \\l int(3.0):{:\\nloopBreak% = 0\\nwhile mod(int(9.0),min(max(divInt(int(8.0),min(max(( divInt(abs(( int(7.0) * ( in0 - mod(in0,mod(int(8.0),in2)) ) )),divInt(int(6.0),max(divInt(i2,int(3.0)), min(max(int(7.0), mod(i0,min(i2, mod(max(in1, ( max(int(3.0), ( in2 * ( i2 - int(3.0) ) )) * max(abs(max(min(in2, abs(i0)), i1)), max(in0, abs(max(int(9.0), int(8.0))))) )),in2)))), in0)))) * int(7.0) ), divInt(max(min(i0, mod(( int(9.0) + max(max(in0, in1), in1) ),in2)), min(int(6.0), ( i1 - in2 ))),i2)), mod(divInt(divInt(int(8.0),int(3.0)),int(2.0)),max(abs(mod(int(2.0),in2)), min(mod(divInt(in0,int(6.0)),res0), in1))))), divInt(abs(( in1 * res0 )),i2)), min(max(min(int(6.0), mod(abs(i2),max(divInt(int(5.0),( min(abs(max(int(9.0), in1)), i0) + divInt(int(8.0),i0) )), divInt(( i1 * res0 ),( abs(min(int(4.0), int(4.0))) + i2 ))))), max(int(1.0), divInt(divInt(int(8.0),( int(4.0) - int(0.0) )),i0))), mod(i0,int(2.0))))) \\g int(1.0):{:\\nif ( b1 or abs(int(5.0)) == in1 ):{:\\nif int(3.0) \\le min(in1, int(5.0)):{:\\nres0 -= max(i1, abs(res0))\\n:}\\n:}else:{:\\nb0 = b0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 -= int(7.0)\\n:}\\nin1 = abs(i2)\\nin1 = max(res0, in2)\\nloopBreak% = 0\\nwhile int(2.0) \\le int(6.0):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 6, 6, 39, 39, 6, 5, 1, 11, 6, 5, 0, 3, 53, 4, 172, 39, 45, 16, 25]}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 1, 0, 0, 1], [0], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 1, 7, 6, 9, 0, 2, 7, 1, 3, 5, 1, 0, 2, 2], [4, 3], [2, 2], [], [1, 0, 1], [0, 0], [1], [0], [1], [5, 3, 4, 4, 4, 6, 1, 3, 5, 6, 5, 5, 3, 5, 2, 0, 4, 0, 3, 4, 1], [0, 0], [3, 1, 1, 2, 2, 0, 3, 3, 3, 3, 0, 1, 1, 3, 2, 0, 1, 1, 0, 0, 3, 1, 3, 2, 3, 3, 0, 2, 2, 1, 0, 1, 2, 2, 0, 0, 3, 2, 0, 1, 0, 3, 3, 2, 1, 2, 3, 0, 0, 0, 2, 1, 0, 2, 2, 3, 1, 0, 2, 2, 0, 2, 1, 0, 1, 2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0], [2, 1, 2, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(int(7.0), int(1.0)) \\le mod(mod(in2,abs(abs(abs(min(in0, int(1.0)))))),int(7.0)):{:\\nb2 = True\\nb2 = min(( in1 * int(6.0) ), int(9.0)) \\ge in1\\n:}else:{:\\nin1 = res0\\ni1 = max(int(0.0), min(( max(min(in0, ( ( int(2.0) - in2 ) * int(7.0) )), mod(divInt(res0,in2),abs(( in2 + int(1.0) )))) - in0 ), max(max(mod(int(3.0),divInt(min(in2, i2),i0)), ( int(5.0) - in1 )), ( divInt(min(int(1.0), i0),mod(divInt(in0,mod(int(0.0),in1)),int(2.0))) - mod(i1,int(2.0)) ))))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 16, 16, 2, 2, 0, 3, 2, 1, 1, 1, 21, 2, 68, 18, 15, 7, 11]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 1, 0, 2, 0, 2, 2, 1, 2, 0, 1, 1, 2, 0, 0], [1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 7, 6, 3, 7, 9, 6, 1, 0, 1, 9, 3, 4, 4, 5, 2, 6, 3, 0, 7, 3, 2, 8, 9, 1, 9, 5, 3, 2, 4, 0, 4, 6, 4, 2, 4, 0, 5, 6, 3, 5, 8, 4, 9, 3, 1, 8, 7, 3, 0, 2, 2, 5, 3, 9, 0, 2, 9, 8, 6, 9, 0, 9, 2, 3, 2, 3, 0, 6], [5, 2, 5, 3, 1, 5, 0, 4, 0, 0, 1, 2], [2, 0, 1, 2, 2, 0, 2, 0], [0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 3, 0, 3, 0, 3, 3, 2, 3, 3, 2, 1, 2, 0, 1, 0], [1, 0], [1, 1, 1], [6, 0, 2, 2, 5, 0, 2, 1, 1, 2, 0, 3, 3, 5, 2, 0, 4, 2, 4, 6, 2, 2, 6, 1, 2, 3, 6, 1, 1, 3, 3, 2, 4, 0, 6, 5, 3, 2, 2, 4, 3, 6, 6, 2, 6, 6, 6, 0, 1, 1, 6, 3, 2, 1, 0, 0, 6, 6, 5, 5, 2, 5, 1, 5, 4, 6, 0, 1, 4, 1, 0, 0, 3], [1, 0, 1, 0, 0], [3, 1, 2, 2, 2, 2, 3, 3, 2, 2, 0, 1, 3, 3, 2, 2, 0, 1, 2, 2, 1, 2, 1, 3, 0, 3, 2, 3, 2, 2, 3, 3, 1, 2, 3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 2, 1, 0, 0, 2, 0, 3, 3, 1, 1, 3, 2, 1, 0, 0, 3, 2, 3, 3, 1, 0, 0, 1, 0, 3, 3, 3, 0, 2, 0, 3, 3, 0, 2, 0, 1, 2, 1, 3, 1, 1, 0, 2, 0, 1, 2, 1, 0, 3, 1, 2, 2, 3, 3, 3, 2, 3, 1, 0, 1, 3, 3, 0, 2, 3, 1, 0, 0, 1, 1, 3, 0, 2, 1, 1, 1, 0, 1, 0, 2, 0, 2, 2, 3, 1, 0, 2, 1, 0, 2, 0, 0, 3, 0, 3, 3, 3, 3, 2, 0, 3, 0, 0, 2, 1, 0, 0, 3, 3, 3, 2, 2, 2, 1, 2, 1, 1, 0, 0, 3, 0, 1, 3, 3, 0, 2, 0, 3, 3, 1, 2, 3, 0, 3, 1, 1, 3, 0, 3, 3, 1, 0, 0, 3, 1, 1, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 1, 1, 3, 1, 0, 1, 0, 3, 2, 3, 1, 1, 3, 3, 3, 1, 3, 2, 0, 1, 3, 0, 3, 1, 2, 1, 2, 0, 0, 2, 3, 0, 2, 2, 2, 0, 0, 0, 1, 3, 0, 1, 3, 1, 1, 3, 0, 3, 3, 2, 1, 1, 1, 0, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 2, 1, 0, 1, 0, 0, 1, 2, 1, 2, 2, 2, 1, 2, 1, 0, 1, 1, 2, 0, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 2, 2, 1, 0, 2, 1, 0, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 0, 1, 1, 2, 0], [1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 2, 0, 2, 1, 1, 0, 2, 1, 2, 0, 1, 0, 2, 2, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(0.0), ( ( mod(divInt(min(abs(divInt(mod(res0,int(4.0)),max(min(mod(divInt(i0,int(7.0)),( divInt(int(6.0),( int(3.0) - max(i2, min(( min(mod(mod(max(abs(int(7.0)), ( max(( ( abs(divInt(abs(( abs(i2) - int(9.0) )),int(6.0))) - ( int(1.0) * in2 ) ) * i0 ), divInt(i2,max(abs(int(0.0)), int(1.0)))) - max(( int(9.0) - i1 ), i1) )),min(mod(max(max(int(3.0), i2), i0),int(4.0)), in0)),abs(min(max(in0, ( in2 - abs(abs(i2)) )), divInt(i0,int(4.0))))), divInt(int(5.0),max(int(2.0), int(6.0)))) - in1 ), ( i2 + int(3.0) ))) )) + mod(int(0.0),in1) )), min(int(7.0), divInt(divInt(min(max(max(divInt(min(int(3.0), res0),int(2.0)), min(max(i2, ( abs(int(8.0)) * i2 )), res0)), int(9.0)), int(1.0)),abs(i1)),divInt(int(9.0),int(5.0))))), int(3.0)))), i2),int(2.0)),in0) + divInt(res0,( mod(abs(int(4.0)),i1) * mod(int(0.0),i1) )) ) - ( in0 - in0 ) )) != abs(i2):{:\\nif abs(min(abs(max(( in1 + max(i0, res0) ), divInt(int(4.0),in2))), in0)) == min(min(min(divInt(( ( int(6.0) * ( int(4.0) - int(2.0) ) ) * i2 ),i2), min(in1, int(4.0))), max(max(in0, mod(res0,max(min(int(0.0), mod(abs(res0),min(int(5.0), int(6.0)))), abs(i2)))), abs(max(int(3.0), res0)))), res0):{:\\nres0 += min(int(5.0), int(8.0))\\n:}else:{:\\nb2 = ( i0 != abs(int(4.0)) and not ( max(i1, i1) \\ge mod(( int(9.0) - res0 ),int(3.0)) or int(1.0) \\g min(int(8.0), in0) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b0:{:\\nb1 = ( b2 and ( int(7.0) != i2 and ( max(mod(abs(int(3.0)),int(0.0)), abs(max(min(int(2.0), max(( i1 + int(2.0) ), abs(i0))), abs(int(5.0))))) \\l divInt(int(3.0),divInt(i0,res0)) or not ( mod(max(res0, ( ( divInt(in2,in2) * i2 ) * int(9.0) )),max(in2, int(0.0))) \\le abs(int(2.0)) and ( not False and int(9.0) \\l abs(i1) ) ) ) ) )\\nif min(max(( int(8.0) - int(6.0) ), int(9.0)), in2) \\l int(0.0):{:\\nloopBreak% = 0\\nwhile not max(mod(int(9.0),abs(min(in1, int(2.0)))), res0) \\g divInt(i0,int(3.0)):{:\\ni1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(2.0) == int(3.0):{:\\ni1 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = b0\\n:}\\nb2 = True\\nloopBreak% = 0\\nwhile b0:{:\\ni0 = int(0.0)\\nin0 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 7, 9, 70, 70, 12, 8, 7, 29, 12, 17, 2, 3, 73, 5, 273, 59, 76, 27, 34]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 0], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [4, 0], [], [], [], [], [], [], [], [], [6, 1], [1], [3, 0, 2, 1, 3, 1], [0], [1, 2], [2, 1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= max(i1, ( int(4.0) - abs(int(0.0)) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 6, 1, 2, 2, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 1, 0], [1], [1, 0, 0, 1], [1, 1, 1, 1, 1], [8, 5, 8, 8, 1], [2, 1], [2, 1, 2], [], [1, 1, 0], [0, 0], [0], [], [], [4, 1, 0], [0, 1], [0, 1, 1, 1, 1, 1], [], [], [0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 == int(8.0):{:\\ni1 = int(5.0)\\nb2 = int(8.0) \\g int(8.0)\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 5, 5, 2, 3, 0, 3, 2, 1, 0, 0, 3, 2, 6, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 2, 8, 8, 5, 1, 9, 9, 4, 1, 7, 2, 1, 3], [5, 1], [2], [], [1, 0, 1], [0, 0], [2], [], [], [0, 4, 5, 2, 1, 2, 0, 6, 1, 4, 4, 0], [1], [2, 0, 2, 3, 1, 3, 2, 1, 3, 3, 2, 3, 3, 1, 3, 3, 0, 0, 3, 3, 0, 2, 2, 1, 1, 0, 1, 0, 3, 3, 2, 0, 1, 1, 2, 1, 0, 2, 2, 0, 3, 2, 1, 0, 0, 3, 1, 2, 1, 3, 1, 2, 1, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 1, 0, 0, 2, 1], [1, 2, 0, 1, 1, 2, 0], [0, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(i0,mod(min(int(8.0), abs(divInt(int(8.0),abs(abs(( abs(abs(int(2.0))) - min(min(in1, in2), min(abs(i2), divInt(( int(8.0) * int(8.0) ),i1))) )))))),int(5.0))) != i2:{:\\ni0 += max(min(divInt(res0,int(1.0)), int(9.0)), mod(int(9.0),i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not ( mod(in1,min(( int(4.0) - in1 ), i0)) - abs(int(1.0)) ) \\g ( int(7.0) * max(int(2.0), ( int(1.0) + int(3.0) )) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 15, 15, 2, 1, 0, 3, 2, 1, 0, 0, 12, 1, 54, 13, 15, 7, 7]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [2, 1, 0, 1, 2, 2, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 1, 6, 7, 0, 9, 5, 1, 6, 1, 5, 9, 0, 2, 8, 9, 6, 5, 1, 6, 8, 7, 5, 3, 1, 4, 2, 8, 1, 1, 0, 7, 8, 7, 5, 1, 3, 5, 4, 3, 3, 4, 0, 0, 0, 5, 1, 2, 6, 4, 6, 5, 4, 5, 2, 0, 3, 2, 2, 2, 9, 2, 3, 5, 7, 1, 5, 8, 5, 4, 5, 6, 5, 0, 0, 8, 5, 7, 1, 5, 9, 1, 0, 1, 9, 6, 0, 0, 5, 7, 5, 7, 4, 7, 8, 4, 3, 1, 4, 0, 1, 0, 3, 0, 2, 7, 0, 3, 1, 2, 6, 0, 2, 8, 0, 1, 0, 1, 9, 2, 9, 7, 4, 8, 4, 2, 5, 5, 0, 5, 8, 3, 7, 3, 8, 5, 2, 2, 6, 0, 9, 1, 9, 9, 2, 6, 3, 0, 6, 3, 9, 3, 9, 0, 4, 9, 0, 7, 8, 7, 8, 5, 8, 6], [2, 3, 0, 5, 2, 0], [1, 1, 1], [0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 1, 0, 3, 2, 1], [0, 0], [0, 1, 1, 1], [4, 6, 4, 1, 4, 1, 4, 1, 0, 2, 1, 2, 0, 1, 4, 2, 4, 6, 5, 2, 3, 3, 0, 2, 3, 0, 4, 4, 4, 5, 6, 2, 2, 5, 1, 1, 2, 3, 3, 0, 1, 0, 4, 4, 3, 2, 5, 5, 4, 5, 3, 5, 4, 0, 2, 5, 1, 6, 0, 4, 2, 4, 4, 0, 2, 6, 6, 5, 5, 0, 0, 3, 5, 3, 1, 4, 5, 3, 5, 2, 6, 6, 6, 2, 0, 3, 5, 0, 4, 2, 2, 2, 0, 1, 4, 3, 1, 2, 3, 4, 0, 6, 2, 1, 5, 3, 5, 0, 2, 0, 3, 4, 2, 2, 4, 3, 0, 4, 1, 1, 1, 2, 5, 6, 1, 3, 4, 0, 6, 2, 4, 0, 3, 2, 0, 6, 5, 4, 5, 0, 0, 5, 1, 1, 1, 1, 5, 6, 2, 0, 6, 5, 0, 3, 6, 4, 6, 3, 6, 5, 5], [0, 1, 1, 0, 1, 1, 1, 1, 0], [3, 3, 2, 2, 1, 2, 2, 0, 3, 3, 2, 0, 1, 3, 0, 0, 3, 3, 2, 1, 3, 1, 3, 3, 3, 0, 1, 2, 0, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 0, 3, 3, 3, 3, 1, 3, 0, 3, 2, 2, 0, 0, 3, 3, 1, 0, 3, 3, 1, 0, 1, 0, 3, 1, 1, 1, 1, 3, 2, 3, 2, 1, 2, 3, 1, 2, 1, 0, 1, 0, 0, 3, 2, 2, 0, 2, 2, 1, 1, 3, 0, 2, 0, 3, 1, 2, 2, 2, 2, 2, 1, 3, 2, 1, 0, 2, 1, 2, 3, 3, 3, 1, 1, 0, 0, 0, 1, 2, 0, 1, 2, 3, 3, 3, 0, 3, 0, 2, 1, 0, 0, 3, 3, 0, 3, 0, 1, 2, 1, 0, 1, 0, 3, 0, 0, 2, 1, 1, 1, 0, 3, 2, 3, 3, 1, 2, 2, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 3, 2, 3, 2, 1, 2, 0, 0, 2, 2, 2, 1, 2, 0, 0, 3, 1, 2, 3, 1, 3, 2, 2, 0, 2, 2, 2, 3, 2, 3, 1, 1, 2, 3, 3, 1, 0, 3, 3, 3, 2, 0, 1, 0, 3, 3, 1, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1, 3, 0, 2, 2, 0, 0, 2, 2, 0, 2, 3, 2, 2, 1, 2, 2, 0, 0, 3, 0, 1, 1, 2, 2, 1, 3, 1, 1, 0, 2, 1, 0, 1, 3, 0, 0, 0, 2, 2, 0, 3, 3, 3, 1, 3, 2, 1, 2, 2, 0, 3, 3, 0, 0, 2, 3, 0, 1, 1, 2, 2, 1, 3, 1, 3, 3, 0, 2, 3, 1, 2, 1, 3, 1, 0, 1, 2, 2, 2, 2, 3, 2, 1, 0, 3, 2, 2, 2, 2, 2, 0, 0, 3, 1, 2, 2, 3, 1, 1, 2, 2, 2, 3, 3, 3, 2, 1, 2, 1, 1, 2, 1, 1, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2, 2, 3, 3, 0, 2, 0, 1, 0, 1, 2, 2, 2, 0, 2, 2, 3, 0, 2, 0, 3, 2, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 0, 2, 3, 1, 0, 1, 3, 0, 1, 3, 2, 3, 3, 3, 2, 2, 2, 0, 3, 1, 2, 2, 1, 3, 3, 0, 0, 1, 2, 0, 3, 3, 1, 3, 1, 3, 2, 0, 1, 3, 2, 3, 1, 3, 1, 1, 3, 0, 2, 3, 1, 1, 0, 1, 1, 3, 3, 3, 2, 2, 0, 0, 1, 2, 2, 1, 2, 3, 3, 0, 0, 1, 2, 3, 2, 1, 3, 2, 2, 2, 0, 1, 2, 2, 1, 2, 2, 3, 2, 2, 1, 1, 0, 3, 1, 1, 1, 3, 3, 2, 1, 3, 0, 1, 0, 3, 3, 1, 3, 0, 0, 1, 1, 1, 3, 1, 2, 3, 0, 2, 3, 3, 0, 3, 0, 3, 3, 3, 1, 2, 2, 3, 1, 3, 3, 1, 2, 3, 3, 1, 0, 3, 1, 1, 3, 3, 1, 0, 2, 3, 0, 1, 0, 2, 0, 0, 3, 2, 0, 2, 3, 3, 1, 1, 2, 1, 3, 1, 1, 1, 2, 2, 1, 3, 2, 0, 2, 1, 0, 1, 3, 3, 2, 1, 2, 1, 1, 2, 1, 3, 1, 0, 1, 1, 1, 0, 0, 3, 0, 3, 2, 1, 0, 0, 3, 0, 3, 3, 2, 0, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 1, 1, 0, 2, 0, 3, 0, 2, 1, 1, 3, 3, 0, 1, 3, 1, 0, 2, 3, 0, 0, 2, 1, 2, 0, 2, 0, 3, 1, 2, 0, 1, 3, 0, 0, 0, 3, 0, 3, 1, 2, 1, 2, 0, 3, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 2, 1, 1, 0, 1, 1, 2, 0, 0, 1, 1, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 0, 2, 0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 2, 1, 1, 0, 0, 1, 2, 1, 0, 1, 1, 1, 0, 2, 2, 1, 2, 1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 2, 0, 1, 1, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 1, 2, 0, 0, 2, 1, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 0, 2, 1, 1, 0, 1, 2, 2, 2, 2, 0, 2, 1, 0, 1, 1, 1, 1, 0, 0, 1, 2], [0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 0, 2, 1, 2, 0, 1, 2, 0, 2, 0, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 2, 0, 0, 1, 1, 2, 0, 1, 1, 0, 2, 2, 2, 0, 2, 2, 0, 1, 2, 2], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 111, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(min(mod(( int(7.0) + ( ( in1 * min(min(divInt(res0,int(3.0)), min(in1, i1)), abs(max(( int(1.0) * max(int(6.0), min(max(max(in1, int(7.0)), ( i1 + ( ( int(0.0) * int(9.0) ) + divInt(( int(5.0) + int(1.0) ),( int(6.0) * int(1.0) )) ) )), int(5.0))) ), in1))) ) * abs(min(min(max(int(9.0), max(i1, abs(( mod(i0,i2) * min(abs(int(0.0)), i1) )))), max(max(int(2.0), i2), int(8.0))), i0)) ) ),max(int(9.0), int(6.0))), int(5.0)), int(1.0)) == max(( min(( int(6.0) + ( max(int(8.0), divInt(int(7.0),i1)) - int(5.0) ) ), in1) * i2 ), max(divInt(( in1 * mod(( int(3.0) - int(1.0) ),min(res0, ( in2 * min(int(4.0), divInt(divInt(divInt(( divInt(int(2.0),max(divInt(int(8.0),i2), ( int(1.0) + divInt(max(max(abs(int(1.0)), int(0.0)), in0),in0) ))) + i0 ),int(7.0)),( i2 + int(8.0) )),divInt(max(abs(abs(in0)), min(i0, divInt(int(7.0),in1))),in1))) ))) ),max(min(in1, max(in2, int(5.0))), ( int(1.0) * res0 ))), int(3.0))):{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = abs(in2) \\ge i1\\ni1 += ( int(5.0) - int(4.0) )\\nif int(3.0) \\l i2:{:\\nif ( True and b1 ):{:\\nin0 += min(( abs(min(int(3.0), ( ( min(abs(( in0 * i0 )), i1) * i0 ) * ( in1 - in1 ) ))) - in0 ), mod(i2,abs(( abs(mod(int(4.0),( in2 * in2 ))) - divInt(mod(( int(0.0) * ( in1 + in2 ) ),abs(int(0.0))),( max(int(0.0), abs(( divInt(in0,mod(( mod(abs(( min(int(5.0), int(1.0)) + divInt(min(abs(int(2.0)), in2),max(max(min(divInt(in1,int(6.0)), i0), min(max(int(4.0), int(6.0)), abs(max(min(mod(i2,int(5.0)), in2), i1)))), int(4.0))) )),int(5.0)) + int(2.0) ),max(res0, mod(( i0 + in1 ),( ( i2 * ( max(mod(mod(int(0.0),mod(divInt(in1,in1),max(i0, int(3.0)))),int(2.0)), ( ( int(2.0) - min(int(2.0), int(9.0)) ) * i2 )) + mod(int(2.0),res0) ) ) - int(3.0) ))))) * abs(res0) ))) + in2 )) ))))\\n:}else:{:\\nin2 = i0\\n:}\\n:}\\nif ( mod(i0,abs(max(abs(int(5.0)), max(mod(int(7.0),mod(divInt(in0,abs(abs(in2))),in0)), ( max(i1, int(1.0)) * int(5.0) ))))) + ( mod(int(8.0),max(int(5.0), min(min(in1, divInt(min(int(4.0), divInt(int(5.0),min(int(6.0), in2))),int(5.0))), divInt(( divInt(( max(divInt(int(0.0),in0), min(divInt(( divInt(mod(( in2 - i2 ),min(int(0.0), mod(( min(int(8.0), int(5.0)) + ( mod(mod(min(min(abs(mod(int(7.0),( int(1.0) * int(5.0) ))), mod(int(9.0),int(1.0))), res0),int(0.0)),( res0 - res0 )) + int(1.0) ) ),( mod(int(9.0),i2) + divInt(( max(max(i0, mod(in0,int(6.0))), in2) - int(0.0) ),divInt(divInt(( i0 + mod(( max(in1, divInt(i2,min(divInt(int(0.0),abs(divInt(min(max(int(5.0), max(min(min(max(abs(i2), i2), mod(max(int(7.0), i0),int(5.0))), abs(i1)), int(7.0))), abs(divInt(max(min(abs(divInt(( ( in1 + abs(int(4.0)) ) + mod(( int(7.0) - abs(min(in0, i1)) ),int(8.0)) ),( i2 + max(min(int(4.0), min(int(3.0), min(( in0 + int(1.0) ), abs(( min(int(4.0), min(int(0.0), int(1.0))) + abs(in1) ))))), divInt(min(int(0.0), int(3.0)),i0)) ))), int(0.0)), int(2.0)),min(min(max(( mod(res0,i2) * int(7.0) ), divInt(divInt(int(0.0),divInt(max(abs(i1), in2),int(3.0))),( abs(mod(int(1.0),abs(( mod(( in0 * int(2.0) ),divInt(divInt(int(6.0),divInt(divInt(abs(( mod(int(0.0),int(2.0)) - in2 )),max(int(8.0), int(0.0))),int(1.0))),max(abs(( int(0.0) * min(i0, int(1.0)) )), i2))) * min(abs(int(9.0)), max(i0, in0)) )))) * int(2.0) ))), int(9.0)), int(7.0))))),min(int(4.0), mod(max(in1, ( abs(min(i2, abs(i2))) + min(abs(min(int(8.0), ( ( min(int(4.0), abs(max(int(2.0), mod(abs(max(int(5.0), in1)),max(int(5.0), int(0.0)))))) * max(max(int(5.0), in0), divInt(min(i0, int(8.0)),in1)) ) * divInt(i1,i1) ))), max(divInt(i1,mod(abs(min(int(3.0), int(7.0))),( int(3.0) * abs(int(8.0)) ))), int(5.0))) )),int(2.0)))))), ( ( int(2.0) + abs(( i2 + mod(int(6.0),in2) )) ) - int(0.0) )))) - min(abs(( int(9.0) * divInt(int(1.0),int(9.0)) )), divInt(int(9.0),max(int(2.0), res0))) ),int(6.0)) ),int(3.0)),int(0.0))) )))),i1) + in0 ),max(in1, min(divInt(int(6.0),i0), res0))), max(i2, abs(abs(mod(in1,abs(abs(int(3.0))))))))) - mod(i0,min(abs(int(9.0)), mod(in0,i2))) ),i0) - ( res0 + in2 ) ),( in1 * int(3.0) ))))) * in2 ) ) != mod(int(9.0),int(0.0)):{:\\ni0 *= i0\\nb1 = ( not True or divInt(in2,max(i1, divInt(int(4.0),int(9.0)))) == min(max(i1, int(0.0)), max(int(7.0), i1)) )\\ni1 += ( max(in2, res0) * divInt(int(8.0),divInt(i2,( i0 * max(int(7.0), ( res0 + int(8.0) )) ))) )\\n:}else:{:\\nif min(in2, i0) \\l in0:{:\\nres0 -= min(in1, max(int(5.0), ( int(8.0) * divInt(res0,abs(int(6.0))) )))\\n:}else:{:\\nin0 *= res0\\n:}\\n:}\\nin2 = in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 5, 11, 165, 165, 6, 3, 2, 12, 6, 6, 2, 4, 161, 9, 666, 174, 175, 87, 93]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 1], [], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 0, 0, 3, 2, 6, 0, 8, 9, 5, 7, 7, 5, 5, 8, 0, 7, 5, 3, 9, 7, 5, 3, 4, 8, 2, 7, 5, 8, 5, 7, 9, 4, 0, 7, 3, 6], [5], [2, 1, 1, 0], [], [0, 0, 1], [0], [1, 0], [1], [], [2, 6, 6, 4, 6, 0, 4, 1, 4, 0, 2, 3, 6, 6, 5, 0, 1, 3, 6, 1, 0, 4, 5, 5, 1, 0, 3, 6, 2, 4, 3, 2, 5, 6, 4, 1, 4, 6, 3, 2, 0, 3, 5, 4, 6, 0, 3, 4, 2, 6, 1, 3], [0], [1, 2, 1, 3, 1, 3, 0, 3, 0, 3, 1, 0, 3, 3, 3, 0, 0, 2, 3, 2, 1, 2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2, 1, 2, 2, 3, 0, 3, 0, 0, 3, 2, 1, 3, 3, 2, 3, 3, 0, 1, 3, 0, 1, 2, 0, 3, 1, 3, 3, 2, 3, 0, 2, 2, 2, 1, 3, 0, 2, 3, 0, 3, 0, 2, 0, 2, 0, 3, 0, 2, 1, 0, 2, 0, 0, 2, 2, 3, 2, 2, 3, 3, 2, 3, 0, 1, 1, 0, 1, 3, 2, 0, 0, 2, 0, 0, 2, 1, 0, 1, 1, 1, 3, 0, 3, 0, 2, 0, 3, 0, 3, 2, 1, 1, 3, 2, 3, 0, 2, 2, 0, 3, 0, 3, 1, 1, 1, 1, 0, 1, 1, 0, 2, 3, 3, 0, 3, 3, 3, 3, 1, 1, 0, 3, 3, 1, 2, 2, 3, 0, 0, 1, 0, 1, 3, 3, 3, 3, 3, 3, 1, 2, 0, 0, 3, 0, 3, 1, 3, 2, 2, 0, 3, 2, 3, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 1, 2, 0, 0, 0, 1, 2, 1, 2, 2, 0, 0, 2, 1, 2, 1, 0, 0, 1, 0, 0, 1, 2, 0, 0, 2, 0, 2, 1, 1, 2, 0, 2, 1, 0, 0, 0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 0, 2, 2, 1, 0, 2, 0, 2, 1, 1, 2, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 83, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = False\\ni2 = int(4.0)\\nb1 = b1\\nb0 = ( int(4.0) + min(int(0.0), max(res0, max(res0, max(int(0.0), in1)))) ) != abs(min(min(res0, i0), ( min(divInt(int(3.0),( max(abs(mod(max(( mod(abs(abs(( ( int(2.0) + mod(( min(in1, min(i1, in1)) + abs(( int(6.0) + max(abs(divInt(max(min(i0, int(0.0)), min(i2, int(8.0))),mod(in0,max(int(9.0), min(min(divInt(max(res0, mod(divInt(( int(5.0) + abs(res0) ),( min(in2, min(i0, ( i1 + ( in0 - abs(res0) ) ))) + mod(int(7.0),i1) )),mod(i0,in1))),( ( min(mod(divInt(abs(max(( max(in2, int(7.0)) + int(5.0) ), in2)),int(5.0)),abs(( i1 - i0 ))), mod(in0,res0)) * mod(int(8.0),i2) ) * int(0.0) )), int(7.0)), int(5.0)))))), min(in1, abs(in0))) )) ),mod(i2,max(in2, min(divInt(int(3.0),int(9.0)), min(( min(res0, ( ( in1 * min(i1, abs(int(7.0))) ) * int(5.0) )) * int(3.0) ), int(4.0)))))) ) * in1 ))),int(8.0)) - int(2.0) ), res0),( max(abs(in0), abs(max(max(abs(int(7.0)), int(5.0)), i2))) - min(min(int(8.0), divInt(divInt(min(i0, in0),int(5.0)),in2)), int(7.0)) ))), abs(abs(max(min(abs(min(int(9.0), ( in1 - res0 ))), abs(i0)), max(int(4.0), max(( divInt(in0,abs(mod(max(int(0.0), in1),mod(i2,int(7.0))))) * int(3.0) ), res0)))))) * int(6.0) )), i1) * in0 )))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 38, 38, 1, 4, 0, 3, 1, 2, 1, 0, 52, 1, 195, 44, 62, 22, 22]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 2, 1, 2, 1, 2, 2, 1, 1, 0], [1, 0, 0, 1], [1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 6, 6, 8, 5, 9, 3, 1, 8, 4, 5, 2, 0, 6, 9, 3, 0, 8, 7, 6, 1, 9, 1, 1, 3, 1, 2, 6, 7, 3, 6, 5, 6, 6, 2, 9, 0, 5, 2, 8, 2, 1, 9, 3, 7, 7, 2, 4, 5, 0, 9, 2, 5, 8, 1, 9, 9, 8, 7, 1, 3, 1, 0, 8, 5, 8, 8, 7, 9, 8, 5, 0, 8], [3, 0, 4, 1, 3, 1, 2, 1], [1, 2, 2, 1], [0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3], [], [1, 0], [5, 0, 1, 2, 3, 4, 3, 2, 4, 1, 2, 2, 3, 1, 5, 3, 5, 0, 1, 6, 5, 6, 0, 1, 6, 4, 4, 0, 4, 6, 4, 5, 4, 1, 3, 6, 3, 5, 2, 2, 1, 6, 2, 1, 5, 2, 2, 0, 0, 2, 4, 4, 6, 0, 2, 0, 2, 1, 5, 5, 6, 0, 5, 0, 4, 1, 0, 4, 4, 3, 2, 0, 6, 0, 6, 2, 1, 4, 3, 6, 2, 3, 0, 1, 0, 4], [1, 0, 0], [3, 2, 3, 0, 0, 0, 0, 1, 3, 3, 2, 2, 3, 0, 3, 1, 2, 2, 1, 2, 3, 1, 3, 3, 2, 3, 1, 1, 2, 1, 2, 1, 0, 0, 0, 1, 2, 1, 0, 3, 0, 3, 1, 0, 0, 1, 3, 1, 1, 2, 0, 0, 1, 3, 0, 2, 1, 2, 2, 0, 1, 3, 1, 3, 3, 0, 3, 2, 1, 0, 0, 2, 3, 0, 1, 0, 3, 3, 2, 1, 2, 1, 2, 0, 2, 3, 2, 1, 1, 0, 1, 2, 2, 3, 3, 2, 3, 2, 3, 3, 1, 2, 2, 3, 1, 0, 1, 1, 2, 0, 1, 1, 3, 3, 1, 2, 2, 0, 1, 2, 2, 3, 2, 2, 3, 1, 3, 1, 2, 2, 3, 0, 0, 1, 0, 3, 2, 0, 3, 3, 2, 2, 0, 0, 2, 3, 2, 0, 2, 1, 3, 2, 3, 3, 0, 0, 0, 0, 3, 3, 2, 0, 0, 3, 2, 2, 1, 1, 2, 0, 1, 0, 3, 2, 2, 1, 0, 1, 3, 0, 3, 2, 3, 0, 2, 0, 0, 0, 3, 0, 2, 1, 0, 1, 2, 1, 2, 2, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 3, 3, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 2, 1, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 1, 0, 3, 0, 0, 3, 3, 2, 0, 3, 0, 2, 2, 1, 2, 2, 3, 0, 0, 2, 0, 0, 3, 3, 3, 1, 0, 3, 1, 3, 1, 3, 1, 1, 1, 0, 2, 2, 2, 2, 3, 2, 2, 1, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 1, 0, 3, 2, 2, 1, 2, 2, 2, 2, 1, 0, 3, 1, 0, 2, 0, 3, 1, 1, 1, 3, 0, 0, 1, 0, 2, 0, 1, 2, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 2, 2, 1, 1, 1, 2, 0, 1, 0, 2, 1, 1, 2, 2, 0, 1, 2, 0, 1, 2, 2, 1, 0, 0, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 2, 1, 1, 1, 2, 0, 1, 0, 1, 0, 1, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 2], [1, 0, 1, 2, 2, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 1, 0, 2, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 2, 0, 1, 2], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= max(divInt(max(i0, i1),i2), in0)\\nloopBreak% = 0\\nwhile int(7.0) \\ge max(min(( ( abs(in1) + abs(int(2.0)) ) - ( ( int(6.0) * ( max(int(6.0), abs(min(( max(int(8.0), int(5.0)) * mod(int(9.0),( int(3.0) - in0 )) ), i2))) * in1 ) ) * int(1.0) ) ), divInt(int(8.0),i1)), abs(i2)):{:\\ni2 = abs(int(4.0))\\nif in0 \\l i1:{:\\nb1 = b2\\n:}else:{:\\nif not int(5.0) \\le max(int(2.0), int(0.0)):{:\\nloopBreak% = 0\\nwhile ( in2 + in0 ) \\g int(6.0):{:\\nin2 = max(i0, ( int(9.0) - ( ( i1 - int(3.0) ) + max(int(0.0), abs(min(res0, max(( int(8.0) * in2 ), res0)))) ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( ( ( min(i0, int(7.0)) - i1 ) \\ge abs(max(divInt(int(6.0),mod(int(1.0),( res0 * ( max(( int(9.0) - int(1.0) ), in1) + int(1.0) ) ))), ( divInt(abs(abs(mod(min(( max(abs(int(3.0)), mod(mod(min(int(1.0), in1),int(2.0)),int(6.0))) * mod(i0,int(7.0)) ), int(3.0)),max(abs(int(6.0)), ( ( in1 - int(5.0) ) - mod(mod(abs(( mod(max(int(6.0), min(int(6.0), divInt(( min(res0, in1) * int(2.0) ),in2))),abs(( in1 - min(max(( mod(i1,in0) + divInt(max(mod(res0,divInt(int(9.0),abs(( abs(abs(in0)) - in2 )))), i2),i2) ), abs(max(( i1 - res0 ), abs(( divInt(int(0.0),int(5.0)) - ( i2 - int(2.0) ) ))))), i1) ))) - max(mod(( int(8.0) * in2 ),int(2.0)), max(i2, min(( max(i2, ( i0 * i0 )) + i2 ), abs(in1)))) )),mod(int(1.0),in1)),int(9.0)) ))))),( int(3.0) + divInt(( res0 + divInt(i0,int(7.0)) ),int(7.0)) )) + i2 ))) and int(2.0) \\g i0 ) or ( ( min(abs(i2), i1) * divInt(mod(( mod(divInt(in2,max(max(in2, ( int(4.0) - mod(res0,int(5.0)) )), max(i0, in2))),int(0.0)) * abs(divInt(i0,int(9.0))) ),in1),min(i1, i0)) ) - max(min(( in1 * max(in1, ( divInt(int(2.0),divInt(divInt(min(in0, i2),mod(i0,res0)),max(abs(max(int(5.0), i0)), max(int(8.0), max(int(1.0), abs(int(9.0))))))) + int(9.0) )) ), int(8.0)), res0) ) == mod(( divInt(divInt(max(( ( int(7.0) + int(1.0) ) + max(i2, ( ( int(3.0) + int(1.0) ) + int(0.0) )) ), mod(int(8.0),int(5.0))),i1),min(mod(mod(int(8.0),( mod(( ( int(8.0) * in1 ) + max(int(7.0), in0) ),divInt(res0,max(int(9.0), int(8.0)))) - int(5.0) )),abs(i2)), in0)) * int(0.0) ),i0) )\\nb1 = mod(i1,int(8.0)) \\g divInt(i0,in1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 74, 74, 8, 4, 2, 12, 8, 4, 0, 2, 86, 3, 319, 90, 72, 48, 43]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 2], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [0, 1], [8, 8], [2], [1], [], [1], [0], [], [], [], [6], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(88.0) == res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [1, 1, 1], [2, 1, 6], [3], [0], [], [1], [0], [], [], [], [3, 5], [1], [3, 1, 0, 1, 1], [], [1], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 *= max(int(2.0), in2)\\nb0 = int(1.0) \\ge int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1, 5, 0, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [5], [], [], [], [], [], [], [], [], [1], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [0, 1, 1, 1], [6, 7, 5, 4], [], [], [], [], [], [], [], [], [3, 5, 1, 0, 1], [1, 1], [1, 2, 3, 2, 0, 1, 1, 2, 0, 0], [0, 0, 0], [1], [1, 0, 1, 1, 0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= int(67.0)\\nin2 += ( max(( i1 - int(5.0) ), int(4.0)) - ( i0 + i1 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 10, 3, 1, 5, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 1], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 0, 1, 1, 0, 0], [0], [1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 8, 9, 0, 8, 3, 2, 8, 4, 1, 2, 6, 0, 6, 3, 4, 2, 8, 9, 6, 4, 5, 0, 6, 4, 1, 4, 3, 3, 7, 7, 4, 9, 7, 8, 7, 8, 1, 5, 6, 7, 1, 7, 7, 0, 7, 7], [4, 3, 3, 3, 1, 5], [2, 1], [0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 3, 3], [], [1], [5, 0, 5, 1, 2, 3, 6, 3, 2, 6, 6, 0, 4, 5, 5, 1, 2, 5, 6, 4, 2, 5, 1, 4, 3, 1, 4, 1, 6, 1, 2, 4, 6, 4, 5, 2, 6, 2, 3, 0, 4, 3, 6, 0, 0, 2], [1, 1, 0], [0, 0, 2, 0, 2, 0, 3, 0, 1, 1, 2, 0, 1, 1, 0, 2, 3, 2, 0, 3, 2, 0, 2, 0, 1, 3, 1, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 1, 2, 3, 1, 3, 3, 0, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 2, 1, 2, 1, 0, 0, 3, 3, 1, 2, 3, 3, 3, 1, 1, 1, 3, 2, 0, 3, 3, 0, 3, 2, 0, 1, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 1, 1, 0, 3, 3, 1, 3, 2, 1, 3, 3, 3, 2, 1, 0, 3, 1, 3, 0, 3, 2, 1, 0, 3, 3, 1, 1, 2, 2, 1, 2, 3, 3, 3, 1, 3, 0, 2, 3, 1, 1, 0, 3, 3, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 0, 2, 2, 1, 0, 0, 1, 2, 1, 1, 2, 3, 3, 1, 2, 3, 0, 2, 1, 1, 2, 0, 2, 1, 1, 3, 3, 1, 1, 3, 1, 1, 0, 0, 1, 2, 1, 3, 3, 2, 0, 3, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0, 1, 2, 2, 0, 1, 0, 1, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 0, 1, 1, 2, 0, 2, 1, 0, 2, 1, 1, 0, 1, 0, 1, 2, 2], [0, 1, 2, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 2, 2, 2], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 \\le i0:{:\\nin2 += mod(i1,mod(i2,max(in0, int(6.0))))\\n:}else:{:\\nb2 = int(7.0) \\ge mod(res0,int(8.0))\\nin0 -= int(9.0)\\ni2 = res0\\n:}\\nb1 = ( divInt(abs(mod(res0,max(( i0 * mod(in1,int(0.0)) ), min(int(8.0), mod(in2,in2))))),i1) \\ge ( i2 - ( in2 - res0 ) ) and ( in1 \\ge max(int(3.0), ( abs(int(2.0)) + abs(min(i2, abs(max(in2, abs(int(8.0)))))) )) and ( int(4.0) \\g abs(max(min(max(divInt(int(1.0),( int(2.0) - i1 )), in1), abs(abs(int(6.0)))), ( min(max(min(int(0.0), int(6.0)), int(3.0)), max(mod(in0,abs(min(i1, min(divInt(in1,int(4.0)), abs(abs(abs(min(max(( min(max(abs(i1), int(2.0)), int(8.0)) - res0 ), abs(min(int(9.0), max(( int(6.0) - min(max(min(divInt(int(4.0),i1), abs(int(5.0))), abs(i2)), min(mod(int(0.0),in1), abs(min(int(6.0), int(4.0))))) ), divInt(divInt(int(1.0),( max(max(abs(int(4.0)), min(res0, ( abs(int(3.0)) + int(3.0) ))), in1) + max(min(int(7.0), mod(int(7.0),in2)), i2) )),( ( int(4.0) - ( ( res0 + divInt(mod(int(9.0),i2),in0) ) - int(7.0) ) ) * divInt(int(8.0),int(7.0)) )))))), ( abs(max(int(8.0), mod(max(i0, divInt(int(1.0),int(5.0))),mod(in1,( int(6.0) * int(7.0) ))))) * min(max(int(1.0), int(7.0)), min(int(7.0), int(0.0))) ))))))))), in0)) * res0 ))) and int(7.0) != divInt(int(7.0),max(abs(divInt(i0,abs(i0))), i2)) ) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 48, 48, 6, 2, 3, 9, 6, 3, 0, 1, 46, 3, 189, 39, 59, 18, 23]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1], [1, 2, 2, 1, 1, 2, 0, 1], [1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 9, 9, 2, 2, 2, 9, 7, 6, 0, 4, 3, 3], [0, 0, 4, 3], [0, 1, 2, 2, 0, 2], [1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0], [3, 1, 1, 1, 1, 0, 2, 2], [0, 1, 1, 1], [1], [6, 5, 3, 1, 2, 5, 0, 1, 6, 2, 4, 4], [], [1, 1, 0, 2, 1, 0, 0, 3, 2, 2, 1, 2, 0, 1, 3, 2, 2, 3, 2, 0, 3, 1, 2, 2, 2, 2, 2, 1, 3, 0, 3, 1, 1, 1, 0, 3, 1, 3, 0, 1, 0, 3, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 2, 2, 1, 2, 0, 1, 1], [1, 2, 1, 0, 2, 1], [1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(4.0) \\l int(1.0) or True )\\nloopBreak% = 0\\nwhile False:{:\\nif False:{:\\nb1 = False\\n:}else:{:\\nb2 = b2\\n:}\\nloopBreak% = 0\\nwhile not res0 \\l ( int(9.0) - in2 ):{:\\nb0 = not in0 \\le min(( ( int(9.0) * ( i1 - int(2.0) ) ) + min(mod(mod(abs(mod(i2,abs(int(2.0)))),mod(divInt(( ( divInt(int(2.0),max(in2, abs(int(9.0)))) * int(7.0) ) - int(6.0) ),i0),min(int(0.0), max(i1, int(4.0))))),res0), max(i2, in1)) ), int(3.0))\\nb2 = in1 \\ge int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 14, 14, 4, 6, 1, 12, 4, 8, 4, 1, 12, 0, 47, 12, 9, 6, 6]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [5, 9], [5], [0], [], [1], [0], [], [], [], [3, 6], [], [0, 3, 1, 3, 0, 1], [], [1, 0], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = in0 != max(int(5.0), min(res0, int(9.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 6, 0, 2, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [7], [], [], [], [], [], [], [], [], [2], [1], [3, 1], [], [2], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= abs(int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [5, 5], [], [], [], [], [], [], [], [], [2, 4], [1], [3, 2, 1, 0, 1], [0], [0], [1, 0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= min(( int(5.0) + in1 ), int(5.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 5, 1, 1, 2, 0]}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [1, 1, 1, 1, 1, 1], [5, 1, 7, 4, 4, 9], [3, 1], [1], [], [1, 1], [0, 0], [], [], [], [0, 6, 0], [], [2, 1, 1, 2, 1, 2, 2, 2, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1], [], [1, 0], [0, 0, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile divInt(int(5.0),int(1.0)) \\ge divInt(int(7.0),( ( mod(i0,int(4.0)) - res0 ) + int(4.0) )):{:\\nb1 = i0 \\g int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 6, 6, 2, 1, 0, 2, 2, 0, 0, 0, 3, 0, 14, 5, 0, 2, 3]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 1, 0, 2, 0, 0, 2, 0], [1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 9, 3, 8, 8, 0, 0, 1, 9, 1, 0, 0, 0, 8, 5, 3, 9, 9, 4, 8, 0, 8, 9, 3, 6, 2, 2, 8, 7, 4, 7, 2, 1, 1, 8, 6, 6, 1, 1, 4, 6, 9, 4, 0, 8, 2, 2, 6, 5, 9, 9, 5], [5, 3, 1, 1, 1], [0, 2], [0], [1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [1, 3, 1, 1], [1, 0, 1], [1, 1, 0], [4, 0, 6, 3, 6, 5, 0, 1, 4, 1, 1, 6, 5, 2, 1, 1, 5, 1, 0, 1, 1, 6, 2, 3, 0, 6, 6, 3, 6, 2, 5, 2, 3, 1, 3, 4, 4, 3, 1, 1, 0, 1, 2, 4, 5, 5, 6, 1, 2, 0, 3, 2], [0, 0, 1, 0], [3, 0, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 2, 3, 3, 2, 2, 1, 3, 2, 0, 2, 1, 3, 3, 2, 1, 2, 3, 1, 3, 1, 0, 3, 2, 1, 3, 0, 3, 2, 2, 3, 3, 2, 1, 2, 2, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 2, 1, 3, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 0, 2, 3, 0, 3, 0, 3, 3, 0, 2, 1, 1, 2, 1, 0, 1, 1, 2, 2, 2, 0, 0, 0, 1, 2, 2, 0, 2, 3, 3, 0, 3, 1, 2, 2, 0, 3, 3, 2, 3, 0, 0, 1, 2, 1, 0, 0, 0, 1, 2, 1, 0, 2, 1, 3, 3, 2, 0, 0, 0, 1, 1, 0, 3, 1, 3, 0, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 3, 3, 0, 1, 2, 0, 2, 3, 2, 3, 1, 1, 3, 1, 3, 0, 3, 2, 1, 3, 1, 1, 0, 3, 2, 1, 1, 3, 1, 2, 1, 1, 2, 3, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 2, 3, 0, 1, 3, 3, 3, 1, 2, 0, 3, 0, 1, 3, 3, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 0, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 2, 2, 2, 1, 0, 0, 2, 0, 2, 0, 2, 1, 2, 2, 0, 0, 1, 1, 0, 2, 1, 2, 1, 0, 0, 1, 2, 1, 0, 2, 2, 0], [1, 2, 2, 1, 2, 1, 1, 0, 2, 1, 2, 0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 0, 2, 0, 2, 2, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(in1, ( min(max(min(min(divInt(mod(abs(abs(abs(( abs(abs(divInt(( int(0.0) - max(mod(i0,( int(1.0) * min(abs(mod(int(9.0),( max(int(3.0), max(int(8.0), res0)) * min(( int(8.0) - min(in0, min(( mod(min(abs(( int(0.0) * ( mod(int(0.0),res0) - in2 ) )), int(1.0)),int(9.0)) - int(1.0) ), int(0.0))) ), mod(( int(0.0) + mod(int(0.0),min(i0, ( mod(i1,int(8.0)) * int(5.0) ))) ),( ( in1 - int(3.0) ) * i1 ))) ))), ( max(i1, max(res0, min(abs(in2), mod(int(9.0),int(9.0))))) + divInt(int(4.0),i2) )) )), int(8.0)) ),int(0.0)))) - divInt(divInt(mod(i1,i1),in2),int(8.0)) )))),( divInt(i1,( abs(abs(i0)) * max(int(9.0), ( mod(i1,min(min(( abs(i1) * res0 ), int(3.0)), ( int(6.0) * i2 ))) - in0 )) )) - i0 )),int(2.0)), mod(int(2.0),res0)), ( int(8.0) * min(abs(( res0 - in0 )), res0) )), int(7.0)), int(4.0)) - i2 )) != min(int(7.0), abs(in2)):{:\\nif max(i2, int(2.0)) \\ge int(1.0):{:\\nin0 = mod(abs(i1),( abs(in0) + min(min(in1, int(1.0)), ( in1 * divInt(max(divInt(max(int(8.0), int(6.0)),min(int(6.0), abs(in0))), max(mod(int(1.0),abs(int(1.0))), int(4.0))),i1) )) ))\\n:}else:{:\\nif max(( int(6.0) + int(9.0) ), min(int(4.0), ( int(0.0) * int(8.0) ))) \\g divInt(min(int(2.0), int(2.0)),i1):{:\\nb0 = False\\n:}else:{:\\ni0 = mod(i1,i2)\\n:}\\n:}\\nif ( True and int(6.0) \\g in1 ):{:\\nin2 *= in2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i1\\nloopBreak% = 0\\nwhile divInt(max(i2, int(5.0)),abs(max(min(int(9.0), ( i0 - abs(in0) )), int(9.0)))) \\g abs(min(i2, int(5.0))):{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 53, 53, 5, 2, 1, 9, 5, 4, 3, 3, 52, 4, 208, 51, 56, 27, 25]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 4], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [2], [1], [], [0, 1], [0], [2], [], [], [5, 0], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not in2 == i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1, 1, 1, 1, 1], [1, 4, 9, 5, 6, 6, 0], [0], [], [], [1], [0], [], [], [], [3, 3, 0, 3, 2, 1, 5, 1, 2, 4], [0], [3, 0, 3, 2, 0, 1, 0, 2, 3, 2, 1, 3, 1, 3, 0, 0, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 2, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0], [1, 1, 2, 0, 1, 0, 1, 1, 2, 2], [1, 0, 0], [0, 0, 1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile max(in0, max(( in0 - int(1.0) ), i0)) \\l divInt(abs(divInt(int(4.0),min(int(9.0), max(in0, i2)))),min(max(int(5.0), int(6.0)), int(6.0))):{:\\ni1 = max(abs(in2), ( mod(( i1 + abs(i2) ),int(0.0)) + in1 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 7, 7, 1, 0, 0, 1, 1, 0, 0, 0, 10, 1, 32, 6, 10, 3, 3]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 3, 9, 9, 6, 7, 3, 9, 5, 3], [1, 0], [], [1, 1], [0, 0, 0, 1, 1, 0], [0, 0], [2, 3, 3, 1], [1], [0], [0, 2, 3, 6, 3, 5, 1, 5, 5, 0, 2, 5, 0, 5, 6, 0, 5, 3, 2], [0], [0, 1, 1, 2, 2, 0, 0, 3, 0, 3, 2, 3, 2, 0, 0, 1, 2, 0, 2, 1, 3, 2, 2, 0, 3, 2, 2, 3, 3, 0, 3, 3, 2, 2, 1, 3, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 3, 3, 0, 3, 0, 2, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 2, 1, 2], [0, 2, 2, 2, 2, 1, 0, 0, 2], [0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not ( ( i0 \\g int(5.0) or int(9.0) \\l ( divInt(i2,in0) + min(res0, min(( min(mod(in0,in2), int(3.0)) * ( i1 * ( int(9.0) * max(mod(( in2 * max(( ( max(abs(in2), abs(min(( divInt(int(9.0),min(( mod(int(6.0),int(7.0)) - i0 ), int(3.0))) + i2 ), in2))) + int(9.0) ) * i0 ), in2) ),res0), abs(max(i0, abs(in2)))) ) ) ), mod(in0,int(5.0)))) ) ) or False ):{:\\ni2 = int(3.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 11, 11, 2, 0, 2, 6, 2, 4, 1, 1, 19, 1, 57, 15, 13, 9, 6]}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 0, 0, 0, 0], [], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 3, 1, 8, 9, 0, 0, 6, 4], [3], [2], [], [1], [0], [], [], [], [0, 5, 1, 4, 2, 0, 6, 1, 0, 0, 5, 4, 4], [1, 1, 0, 1], [3, 2, 0, 3, 2, 2, 2, 1, 3, 1, 0, 0, 2, 1, 1, 1, 0, 3, 2, 1, 3, 3, 0, 0, 0, 0, 1, 3, 0, 3, 3, 1], [1, 0, 1, 1, 0, 0], [1, 0, 0, 2, 0, 2, 1, 2, 2], [0, 1, 2, 1, 1, 1], [1, 0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(mod(i0,min(( divInt(divInt(int(2.0),min(int(3.0), in2)),i1) + ( int(1.0) - int(8.0) ) ), int(9.0))), in1) \\ge abs(( int(0.0) * min(abs(i2), i0) ))\\nres0 -= i1\\ni0 -= i0\\nin2 = int(06.0)\\nin1 -= max(in1, abs(abs(int(4.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 0, 5, 9, 9, 1, 1, 0, 1, 1, 0, 0, 0, 13, 4, 32, 6, 9, 6, 3]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 0], [1], [0, 0, 0], [], [3, 0, 1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b0 or True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 1, 3, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1], [7], [5], [1], [], [1], [0], [], [], [], [0], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(7.0) != i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 0, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0], [1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 5, 2, 8, 0, 4, 4, 8, 0, 6, 8, 8, 9, 2, 3, 6, 8, 1, 6, 7], [4, 3, 4, 2, 5, 2, 0], [2, 0, 1, 0, 1, 2], [1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 2, 1, 0], [0], [1, 0], [3, 3, 0, 2, 3, 5, 3, 3, 3, 5, 3, 4, 0, 3, 3, 2, 6, 4, 6, 1, 6, 4], [1, 0, 1, 1], [3, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 0, 0, 1, 1, 3, 0, 2, 1, 3, 0, 3, 3, 2, 0, 1, 0, 3, 0, 3, 1, 1, 2, 0, 1, 0, 3, 1, 2, 3, 2, 1, 1, 3, 0, 0, 2, 1, 3, 3, 0, 3, 1, 2, 1, 0, 2, 3, 3, 3, 1, 1, 1, 2, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 2, 0, 0, 2, 0, 2, 1, 2, 1, 2, 0, 0, 2, 2, 1], [0, 0, 1, 1, 1, 0, 1, 2, 0, 2], [1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(int(1.0)) \\le ( min(( int(4.0) + in0 ), int(5.0)) + in0 ):{:\\ni0 -= int(2.0)\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = ( mod(i2,in0) \\ge int(8.0) or int(0.0) \\le abs(in2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( ( int(4.0) - min(in0, min(abs(( in0 - int(4.0) )), in0)) ) == min(in2, abs(int(8.0))) and int(0.0) != mod(in0,int(6.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = i0\\nif max(int(8.0), ( abs(( int(8.0) + int(9.0) )) - max(in0, in0) )) == mod(int(2.0),abs(min(i2, min(int(3.0), ( int(6.0) * res0 ))))):{:\\nb0 = not True\\nin1 += mod(abs(abs(max(int(8.0), int(1.0)))),int(6.0))\\n:}else:{:\\nres0 *= divInt(i1,int(7.0))\\nif res0 \\l in1:{:\\nb1 = b2\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 21, 21, 7, 6, 2, 13, 7, 6, 1, 2, 22, 4, 68, 12, 17, 10, 5]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [2, 1, 1, 2, 2, 2, 1], [0, 0, 1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 9, 7, 7, 3, 8, 0, 9, 2, 4, 0, 8, 0, 2, 8, 0, 3, 6, 5, 6, 4, 4, 4, 4, 6, 1, 6, 8, 5, 3, 3, 8, 4, 4, 5, 9, 9, 7, 0, 8, 7, 1, 8, 1, 6, 6, 2, 8, 1, 1, 3, 4, 6, 4, 4, 2, 7, 2, 2, 4, 4, 3, 3, 9, 4, 5, 5, 6, 7, 5, 2, 0, 7, 5, 0, 1, 1, 9, 5, 8, 9, 6, 8, 8, 4, 0, 9, 1, 8, 8, 6, 8, 1, 5, 3, 5, 6, 8, 3, 2, 3, 8, 5, 6, 9, 0, 6, 4, 2, 6, 8, 5, 3, 2, 9, 1, 8, 3, 4, 5, 0, 2, 8, 2, 6, 5, 0, 0, 9, 4, 5, 9, 1, 3, 7, 7, 4, 9, 9, 5, 7, 3, 1, 2, 6, 7, 2, 0, 2, 7, 7, 5, 9, 3, 3, 3, 3, 3, 2, 5, 0, 0, 4], [5, 1, 1, 1], [0], [1], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0], [3, 0], [], [1, 0], [2, 2, 2, 1, 5, 1, 2, 5, 2, 3, 0, 0, 4, 3, 1, 6, 4, 3, 2, 6, 0, 4, 4, 4, 6, 3, 1, 0, 1, 1, 4, 6, 6, 0, 2, 4, 6, 1, 0, 5, 1, 6, 2, 3, 3, 1, 0, 5, 5, 4, 1, 5, 6, 2, 4, 2, 3, 5, 0, 4, 4, 4, 3, 0, 2, 3, 4, 2, 2, 3, 4, 0, 6, 0, 3, 0, 1, 5, 3, 0, 0, 2, 0, 3, 1, 5, 0, 6, 4, 6, 6, 0, 3, 1, 4, 2, 2, 3, 3, 4, 6, 1, 3, 4, 1, 3, 3, 1, 0, 1, 3, 3, 2, 4, 2, 0, 2, 6, 6, 4, 4, 6, 0, 2, 3, 6, 2, 1, 5, 5, 2, 0, 5, 4, 6, 0, 1, 0, 3, 5, 5, 6, 6, 6, 1, 0, 5, 0, 1, 1, 6, 4, 2, 4, 1, 3, 5, 5, 4, 1], [0, 0, 0], [3, 3, 2, 1, 3, 0, 3, 3, 2, 1, 0, 1, 3, 3, 3, 1, 3, 1, 0, 2, 3, 3, 2, 1, 0, 3, 2, 3, 2, 0, 3, 2, 2, 1, 2, 3, 3, 3, 2, 3, 2, 1, 3, 3, 3, 3, 0, 0, 0, 1, 1, 3, 2, 1, 1, 3, 1, 2, 0, 3, 1, 3, 2, 2, 1, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 2, 2, 1, 2, 1, 1, 3, 3, 1, 1, 0, 0, 2, 0, 1, 0, 3, 3, 2, 1, 2, 3, 1, 1, 3, 3, 2, 3, 0, 2, 3, 2, 2, 0, 0, 1, 1, 1, 3, 3, 1, 2, 3, 3, 1, 2, 0, 3, 1, 2, 1, 2, 0, 3, 3, 1, 2, 2, 3, 1, 2, 2, 3, 0, 0, 1, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 2, 2, 0, 3, 2, 0, 3, 2, 2, 0, 2, 3, 0, 0, 1, 3, 3, 1, 2, 2, 2, 2, 0, 2, 0, 1, 0, 3, 0, 1, 0, 0, 0, 2, 2, 2, 3, 2, 0, 3, 1, 3, 1, 2, 0, 0, 0, 2, 2, 2, 0, 0, 1, 3, 1, 0, 0, 0, 0, 2, 1, 3, 3, 2, 0, 1, 1, 2, 2, 0, 2, 0, 0, 3, 1, 3, 1, 2, 3, 2, 0, 1, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 3, 3, 3, 1, 3, 3, 0, 0, 1, 0, 2, 3, 3, 0, 1, 1, 1, 0, 1, 2, 3, 1, 3, 1, 0, 3, 0, 3, 2, 1, 3, 1, 3, 1, 0, 2, 1, 2, 0, 0, 3, 3, 2, 2, 0, 0, 1, 3, 2, 1, 2, 2, 2, 3, 3, 3, 0, 2, 3, 2, 2, 3, 0, 2, 1, 0, 1, 1, 2, 0, 0, 3, 1, 3, 0, 0, 2, 1, 3, 1, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 2, 1, 3, 0, 2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 2, 3, 3, 2, 2, 2, 1, 0, 1, 2, 0, 1, 2, 2, 1, 0, 3, 0, 2, 2, 1, 0, 1, 1, 3, 0, 3, 0, 0, 1, 0, 2, 1, 3, 2, 1, 1, 2, 2, 3, 2, 2, 3, 3, 2, 0, 3, 1, 3, 1, 2, 1, 0, 2, 0, 0, 1, 1, 2, 0, 3, 3, 2, 0, 0, 1, 2, 3, 0, 0, 3, 0, 2, 0, 0, 2, 2, 1, 2, 0, 1, 2, 0, 1, 2, 0, 3, 0, 2, 3, 3, 0, 1, 0, 1, 0, 2, 0, 1, 2, 2, 2, 3, 1, 0, 3, 2, 3, 1, 3, 1, 2, 1, 3, 0, 0, 2, 2, 3, 3, 2, 3, 0, 1, 3, 1, 0, 2, 3, 2, 2, 2, 1, 2, 1, 2, 2, 0, 2, 3, 3, 0, 2, 2, 1, 2, 2, 0, 3, 0, 0, 3, 2, 0, 2, 3, 0, 0, 0, 0, 1, 0, 3, 2, 2, 0, 1, 1, 2, 0, 1, 2, 3, 0, 1, 3, 2, 3, 1, 3, 3, 1, 3, 2, 2, 1, 2, 3, 3, 0, 0, 3, 3, 0, 0, 3, 2, 0, 3, 0, 2, 0, 2, 3, 0, 2, 1, 2, 1, 1, 0, 3, 2, 3, 2, 1, 0, 3, 1, 1, 3, 2, 2, 1, 2, 0, 2, 2, 0, 3, 3, 0, 1, 2, 2, 2, 2, 3, 1, 3, 2, 0, 1, 1, 2, 0, 3, 2, 3, 3, 1, 0, 1, 1, 0, 1, 2, 1, 3, 3, 2, 1, 1, 1, 3, 1, 2, 2, 2, 0, 3, 0, 3, 0, 1, 0, 1, 1, 2, 1, 0, 3, 1, 3, 3, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 0, 3, 0, 2, 3, 2, 1, 1, 0, 1, 3, 2, 1, 1, 1, 3, 2, 3, 1, 2, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 1, 1, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 2, 2, 1, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 2, 0, 0, 2, 1, 1, 1, 0, 0, 1, 2, 0, 1, 2, 1, 1, 0, 2, 1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 2, 2, 1], [0, 1, 2, 2, 1, 1, 1, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 0, 2, 2, 0, 1, 2, 0, 1, 2, 2, 2, 0, 1, 1, 0, 2, 0, 2, 2, 0, 1, 1, 0, 1, 1, 0, 2, 1, 2, 0, 2, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 2, 1, 0, 0, 2, 1, 1, 2, 1, 0, 2, 2, 2, 1, 2, 0, 1, 2, 2, 2, 0, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 96, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( max(max(mod(int(0.0),abs(i2)), min(abs(( int(9.0) + i2 )), int(9.0))), abs(abs(max(int(7.0), abs(int(7.0)))))) != i2 or ( min(min(mod(int(3.0),i1), max(divInt(max(( in2 - abs(( mod(int(8.0),( min(abs(min(( abs(( int(0.0) * abs(min(abs(min(i1, i2)), in2)) )) * int(9.0) ), int(2.0))), abs(( int(4.0) - int(0.0) ))) - max(int(8.0), ( i2 - max(int(0.0), max(divInt(mod(int(2.0),divInt(min(max(max(int(8.0), ( max(int(0.0), mod(min(mod(mod(int(3.0),( int(6.0) + int(5.0) )),max(min(int(6.0), int(4.0)), in0)), i0),( i0 - int(4.0) ))) - in1 )), max(min(( int(4.0) * ( max(int(4.0), int(6.0)) + max(abs(( min(in0, divInt(max(divInt(( i1 - res0 ),int(1.0)), int(6.0)),int(8.0))) * max(abs(int(5.0)), mod(max(abs(int(3.0)), ( in1 + max(int(3.0), ( int(8.0) * ( in0 - min(min(int(4.0), ( ( min(int(4.0), divInt(mod(max(i2, res0),int(5.0)),int(9.0))) + int(9.0) ) + int(7.0) )), i0) ) )) )),int(0.0))) )), ( in1 + int(8.0) )) ) ), int(7.0)), int(1.0))), mod(in1,( ( ( mod(divInt(in1,min(( res0 + min(divInt(divInt(in0,( min(i1, i0) * int(8.0) )),min(max(int(1.0), divInt(divInt(( ( i1 - mod(i1,int(6.0)) ) + in1 ),abs(res0)),int(6.0))), res0)), i0) ), i2)),( divInt(( abs(( in1 * max(int(2.0), min(int(8.0), ( res0 * i1 ))) )) + i0 ),( ( ( in2 * i1 ) * int(1.0) ) + max(int(1.0), res0) )) - i2 )) * in0 ) + in0 ) - ( int(3.0) * abs(min(( i1 * int(4.0) ), int(6.0))) ) ))),( mod(i0,( in2 * in2 )) + max(int(4.0), min(int(4.0), ( min(( in1 - int(2.0) ), abs(i1)) - in2 ))) ))),res0), i2)) )) )) + int(7.0) )) ), in1),i2), in0)), in2) * ( ( ( int(2.0) + min(max(max(int(2.0), abs(min(i0, in1))), int(4.0)), in1) ) * ( max(min(in1, int(4.0)), int(3.0)) * int(3.0) ) ) + in0 ) ) \\g int(9.0) ):{:\\ni0 = ( abs(int(4.0)) - max(int(5.0), i2) )\\n:}else:{:\\nin0 = min(in1, min(( int(5.0) - min(int(6.0), abs(int(7.0))) ), i2))\\n:}\\nif ( int(5.0) + divInt(i2,in0) ) \\g min(min(divInt(( in1 - i0 ),int(2.0)), min(( int(0.0) - ( ( divInt(max(min(min(res0, ( min(( mod(min(i0, ( int(7.0) + in0 )),int(5.0)) * int(0.0) ), mod(i0,i1)) - min(int(1.0), min(in2, in0)) )), divInt(int(1.0),abs(int(9.0)))), int(5.0)),( i0 * int(8.0) )) + ( divInt(( i0 * ( min(mod(int(9.0),max(i2, ( min(divInt(int(6.0),i0), ( in0 * int(8.0) )) * divInt(int(8.0),i1) ))), divInt(abs(abs(( ( ( int(4.0) * in2 ) - int(0.0) ) * mod(i0,int(9.0)) ))),( ( int(1.0) - res0 ) + abs(in1) ))) * divInt(mod(int(8.0),res0),int(8.0)) ) ),int(6.0)) * max(res0, min(i0, in0)) ) ) * int(8.0) ) ), i1)), mod(int(1.0),min(divInt(int(5.0),int(3.0)), ( ( max(( divInt(min(min(mod(in1,abs(int(5.0))), min(int(6.0), mod(int(8.0),i2))), ( i2 * in0 )),int(3.0)) * int(2.0) ), ( in0 - max(max(divInt(in1,res0), int(3.0)), ( min(i1, in0) * max(in1, mod(i1,in0)) )) )) * ( divInt(int(8.0),( in0 + int(5.0) )) + mod(i1,int(6.0)) ) ) * divInt(i0,max(i1, divInt(max(min(in0, int(9.0)), in0),int(0.0)))) )))):{:\\nloopBreak% = 0\\nwhile i2 \\g ( in1 - int(6.0) ):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni2 = ( ( ( max(int(4.0), i0) + abs(( min(int(2.0), min(int(6.0), ( int(8.0) + abs(i2) ))) * res0 )) ) - divInt(( max(max(divInt(max(res0, int(5.0)),min(int(3.0), in1)), mod(min(( divInt(mod(int(2.0),( int(9.0) - mod(( in1 * mod(max(abs(res0), divInt(mod(int(1.0),divInt(mod(i0,min(i2, in0)),max(( res0 - mod(abs(i2),i1) ), in2))),in2)),int(8.0)) ),i2) )),max(( ( i0 + int(3.0) ) * int(4.0) ), divInt(in2,int(5.0)))) * ( max(in1, int(0.0)) * min(( abs(int(2.0)) - max(max(int(8.0), max(mod(mod(int(2.0),mod(abs(max(res0, i0)),min(max(i1, i0), abs(( in0 * max(in2, divInt(in2,mod(max(res0, ( int(6.0) + ( int(5.0) - int(0.0) ) )),res0))) ))))),min(( max(mod(int(0.0),res0), abs(int(9.0))) * int(4.0) ), max(divInt(mod(int(5.0),mod(i1,( divInt(i0,abs(max(in2, int(9.0)))) * ( ( mod(divInt(min(int(1.0), max(mod(i0,int(3.0)), int(7.0))),mod(i1,min(mod(max(abs(int(7.0)), i1),int(4.0)), int(9.0)))),res0) * int(9.0) ) + ( int(5.0) + abs(min(divInt(int(7.0),int(3.0)), int(1.0))) ) ) ))),abs(int(2.0))), ( ( mod(in1,abs(i2)) - abs(in1) ) + int(6.0) )))), i1)), int(7.0)) ), int(2.0)) ) ), divInt(int(0.0),in0)),max(int(2.0), abs(min(mod(( int(7.0) + int(7.0) ),int(5.0)), mod(( int(9.0) - int(3.0) ),( in2 - min(in2, mod(abs(( int(3.0) * int(3.0) )),in1)) ))))))), int(3.0)) - abs(( int(3.0) - int(2.0) )) ),int(5.0)) ) + abs(mod(max(int(0.0), ( int(0.0) - int(4.0) )),i1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 164, 164, 4, 1, 1, 6, 4, 2, 0, 2, 160, 3, 675, 191, 163, 106, 85]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1], [0, 2, 1, 1, 2, 2, 1], [1, 0, 1], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 8, 0, 4, 6, 7, 8, 7, 6, 2, 8, 9, 7, 3, 7, 4, 3, 0, 4, 3, 8, 7, 3, 6, 9, 0, 8, 9, 9, 5, 0, 9, 2, 9, 1, 1, 2, 8, 7, 1, 6, 2, 9, 3, 3, 1, 1, 3, 7, 3, 7, 1, 9, 1, 5, 9, 7, 0, 7, 1, 6, 9, 6, 1, 4, 3, 5, 4], [0, 4, 2, 5, 4, 5, 4], [0, 2, 1, 2], [0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [3, 1, 3, 3, 2, 0, 3, 1, 2], [0, 1], [0], [1, 1, 0, 2, 3, 0, 2, 4, 2, 0, 6, 4, 4, 2, 6, 2, 3, 4, 5, 2, 5, 4, 5, 6, 6, 0, 6, 1, 3, 3, 1, 2, 0, 5, 4, 3, 3, 1, 6, 1, 0, 5, 6, 1, 1, 6, 5, 4, 3, 6, 5, 5, 0, 1, 5, 3, 0, 0, 0, 2, 3, 4, 5, 6, 5, 3, 5, 3, 6, 3], [0], [2, 1, 1, 0, 1, 0, 2, 1, 0, 2, 3, 3, 2, 0, 1, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 3, 0, 3, 1, 3, 3, 2, 0, 0, 3, 3, 1, 1, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 2, 2, 2, 3, 2, 1, 0, 2, 1, 0, 2, 0, 2, 1, 0, 3, 1, 1, 0, 2, 3, 1, 0, 3, 0, 3, 0, 3, 0, 3, 1, 3, 2, 0, 2, 2, 0, 3, 0, 3, 3, 1, 1, 2, 2, 0, 2, 0, 2, 2, 2, 3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 2, 1, 1, 0, 0, 0, 1, 1, 3, 1, 2, 2, 1, 3, 1, 0, 1, 0, 3, 2, 0, 0, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 0, 2, 2, 1, 3, 0, 2, 1, 1, 1, 0, 2, 2, 2, 0, 2, 2, 3, 1, 0, 0, 0, 2, 1, 0, 3, 2, 2, 2, 3, 0, 2, 3, 2, 1, 3, 3, 3, 2, 1, 0, 0, 2, 0, 0, 2, 1, 0, 3, 3, 2, 1, 0, 3, 3, 0, 1, 3, 1, 3, 1, 3, 1, 1, 0, 1, 2, 0, 3, 1, 3, 3, 3, 0, 1, 2, 1, 3, 0, 2, 3, 2, 2, 0, 2, 2, 2, 0, 2, 1, 3, 3, 3, 0, 0, 1, 1, 2, 3, 0, 3, 0, 2, 1, 2, 3, 2, 3, 1, 3, 0, 1, 1, 2, 2, 1, 0, 3, 0, 2, 3, 3, 1, 0, 1, 0, 0, 1, 2, 2, 2, 3, 1, 1, 3, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 1, 0, 1, 2, 0, 1, 1, 0, 0, 0, 1, 0, 2, 1, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 2, 2, 2, 1, 1, 0, 0, 1, 2, 1, 0, 2, 2, 2], [1, 1, 2, 0, 2, 2, 0, 0, 2, 1, 2, 2, 1, 1, 1, 0, 2, 0, 1, 2, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 1, 1, 2], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = divInt(int(2.0),int(1.0))\\nloopBreak% = 0\\nwhile i1 \\l int(8.0):{:\\nb0 = ( i0 \\le ( int(0.0) - i2 ) and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( max(min(divInt(in0,int(4.0)), int(6.0)), int(7.0)) - abs(abs(divInt(( min(max(int(8.0), int(7.0)), min(abs(mod(min(i0, max(int(6.0), max(min(divInt(i2,in1), abs(min(int(2.0), int(8.0)))), min(( ( i2 * int(9.0) ) + int(7.0) ), int(3.0))))),max(mod(int(7.0),mod(( ( min(( int(4.0) * i0 ), mod(int(3.0),res0)) * ( in1 + ( int(0.0) + in1 ) ) ) * abs(int(4.0)) ),int(3.0))), i2))), divInt(max(int(8.0), res0),abs(i2)))) - max(in0, max(in1, min(int(7.0), max(( in2 * divInt(mod(i2,max(in2, min(max(int(3.0), int(6.0)), ( mod(in1,divInt(in2,mod(( mod(abs(min(( max(mod(max(res0, res0),i0), ( ( int(9.0) * int(0.0) ) - res0 )) - i1 ), in0)),int(8.0)) - int(9.0) ),min(int(9.0), ( divInt(int(5.0),min(int(0.0), in0)) + int(9.0) ))))) * i1 )))),min(mod(i2,i0), mod(int(2.0),in2))) ), in1)))) ),( divInt(int(9.0),in0) + in0 )))) ) == ( int(1.0) - i1 )\\nif ( ( mod(divInt(int(1.0),max(res0, ( int(2.0) * int(8.0) ))),int(7.0)) != i1 and not b1 ) or ( False or ( mod(( i0 - mod(mod(min(int(1.0), in2),res0),i1) ),divInt(int(6.0),i1)) - abs(( ( ( max(res0, mod(abs(( int(2.0) - abs(max(abs(mod(int(9.0),in2)), in1)) )),mod(in0,res0))) * divInt(int(3.0),in2) ) + abs(max(mod(int(3.0),in2), min(min(i0, int(1.0)), min(int(1.0), min(int(3.0), min(int(7.0), int(3.0))))))) ) + i1 )) ) \\le int(7.0) ) ):{:\\nloopBreak% = 0\\nwhile ( in2 - max(int(1.0), abs(abs(min(in0, int(9.0))))) ) != mod(int(1.0),max(i0, mod(abs(( ( i0 + ( ( mod(i0,mod(int(5.0),abs(abs(max(i2, in0))))) + int(9.0) ) + int(7.0) ) ) - mod(max(in1, min(in2, divInt(int(0.0),divInt(min(divInt(max(int(7.0), abs(res0)),int(1.0)), int(6.0)),mod(( int(9.0) - in2 ),max(in0, ( min(abs(int(6.0)), in2) * int(1.0) ))))))),in0) )),res0))):{:\\nb2 = not int(4.0) \\le mod(divInt(divInt(abs(int(3.0)),int(5.0)),abs(in0)),int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 69, 69, 7, 4, 4, 16, 7, 9, 2, 1, 70, 1, 282, 76, 68, 33, 43]}, {"genotype": [[0], [1], [0], [], [0], [1], [2], [2], [1], [], [1], [0], [], [], [], [6, 6], [], [2, 1, 0, 0], [0], [], [1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( int(2.0) - res0 ) == res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [9, 7], [4], [1], [], [1], [0], [], [], [], [6, 3, 0], [], [2, 3, 1, 1, 0, 2, 0, 0], [0, 0], [0], [2, 2], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( min(int(9.0), int(7.0)) * res0 ) \\le ( in0 * i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 8, 2, 1, 2, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [0], [0, 1], [1, 1, 0, 1], [3, 0, 8, 0], [4], [2, 0], [], [1, 0], [0], [0], [], [0], [3], [0], [1, 1, 1], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(3.0) \\le int(0.0):{:\\nb2 = b0\\n:}\\nin0 = int(80.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 1, 2, 0, 2, 1, 1, 0, 1, 1, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 1, 1, 1, 1], [1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1], [7, 9, 3, 9, 3, 0, 9], [0, 5, 0], [0, 2, 1, 2], [], [1, 1, 0, 1], [0, 0, 0], [0], [], [], [4, 5, 1, 4, 3, 2], [0], [3, 1, 1, 3, 1, 1, 3, 3, 0, 3, 0, 2, 1, 1, 0, 3, 1, 0, 0], [0], [0, 1, 0, 2, 0, 2], [1], []], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(7.0), int(9.0)) \\l max(int(3.0), int(9.0)):{:\\nb0 = min(abs(in1), min(in2, ( int(3.0) - int(0.0) ))) != i1\\nin1 = abs(int(9.0))\\nb2 = b1\\nb2 = in0 \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 7, 7, 3, 4, 0, 4, 3, 1, 0, 0, 6, 1, 19, 1, 6, 1, 0]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 0, 2, 2, 0, 1, 1], [0, 1, 1, 0, 0], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 0, 7, 2, 1, 2, 7, 6], [2, 3, 0], [0, 0], [], [1, 0, 1, 1, 0, 0], [0, 0, 0], [0, 1, 1], [1, 1], [0, 1, 1], [0, 6, 1, 1, 4, 6, 5, 4, 3], [0, 1, 1, 0], [0, 1, 1, 0, 3, 3, 1, 0, 0, 3, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1], [1], [1, 2, 1, 0, 2], [2, 2], [0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = res0\\nif int(8.0) == int(5.0):{:\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nwhile i1 \\ge max(abs(int(0.0)), i1):{:\\nin1 *= res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif max(in2, int(7.0)) \\l int(2.0):{:\\nif False:{:\\nin1 *= min(abs(int(1.0)), divInt(int(2.0),int(7.0)))\\n:}else:{:\\nb0 = False\\n:}\\n:}else:{:\\nin0 = int(6.0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 9, 9, 3, 2, 0, 6, 3, 3, 2, 3, 9, 4, 20, 1, 5, 2, 1]}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 0, 0, 1, 2, 2, 1, 2, 1, 1], [0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 0, 0, 2, 2, 0, 1, 1, 8, 0, 7, 3, 4, 4, 7, 1, 7, 8, 0, 0, 0, 1, 8, 6, 6], [3, 2, 5], [0, 2, 0, 0, 1, 2], [], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0], [1, 2, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 0], [6, 3, 0, 4, 5, 6, 4, 5, 4, 4, 5, 2, 4, 6, 6, 3, 3, 5, 5, 0, 1, 1, 3, 2, 6, 2, 4, 5, 1, 6, 0, 4, 6, 0], [1], [2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 1, 1, 1, 0, 3, 3, 1, 0, 2, 3, 2, 1, 3, 3, 0, 3, 2, 0, 0, 3, 2, 2, 0, 1, 3, 3, 2, 0, 2, 2, 2, 1, 3, 2, 0, 3, 0, 2, 2, 3, 1, 2, 1, 0, 3, 2, 0, 2, 0, 0, 2, 1, 3, 3, 3, 3, 1, 2, 0, 2, 2, 0, 2, 1, 2, 0, 1, 2, 3, 1, 0, 1, 3, 2, 0, 2, 0, 0, 1, 2, 2, 0, 0, 1, 2, 3, 1, 2, 3, 1, 0, 3, 3, 2, 3, 2, 2, 0, 1, 1, 0, 1, 0, 0, 0, 3, 3, 3, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 2, 1, 2, 1, 0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 1, 0, 1], [0, 1, 1, 0, 2, 1, 0, 1, 1, 2, 1, 0, 1, 2, 0, 2, 2, 0, 2, 1, 1, 2, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nb0 = ( int(6.0) + mod(( res0 - int(2.0) ),( in0 - ( int(0.0) + int(0.0) ) )) ) \\ge int(2.0)\\nb2 = not False\\ni0 *= int(2.0)\\n:}else:{:\\nif False:{:\\nloopBreak% = 0\\nwhile in1 == min(max(int(0.0), in2), ( abs(( int(1.0) - min(max(res0, abs(mod(in1,in2))), max(( ( in1 + int(1.0) ) - max(min(( in1 - ( ( ( int(8.0) * max(mod(in2,abs(i2)), mod(( max(int(0.0), mod(int(7.0),in1)) - abs(( res0 + ( res0 - in0 ) )) ),mod(int(3.0),max(min(min(abs(int(4.0)), mod(in0,( mod(in2,mod(int(4.0),( in2 * int(7.0) ))) + divInt(abs(int(1.0)),i0) ))), int(7.0)), abs(divInt(i1,mod(i1,in0))))))) ) * int(8.0) ) * ( ( i2 + res0 ) * int(0.0) ) ) ), ( abs(int(0.0)) - mod(max(int(0.0), i2),abs(abs(( abs(( ( in1 - int(1.0) ) * int(8.0) )) - in2 )))) )), int(6.0)) ), i1)) )) * res0 )):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif True:{:\\nb0 = i0 != max(min(max(in1, res0), int(6.0)), i0)\\n:}\\n:}\\nb1 = b2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 26, 26, 3, 6, 0, 10, 3, 7, 5, 3, 34, 1, 122, 36, 27, 24, 13]}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 1], [1, 1], [1, 0], [1, 1], [6, 4], [5], [2, 2], [], [0, 0, 1], [0], [1, 0], [0], [], [6, 1], [0], [1, 0, 1], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nres0 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = i1 != int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 4, 4, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 0, 2, 1, 3, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 1, 6, 4, 3, 7, 3, 1, 4, 9, 0], [], [], [], [], [], [], [], [], [2, 2, 1, 5, 1, 2, 4, 3, 4, 6, 3, 0, 3, 3, 0, 1, 1, 5, 4, 5], [1], [3, 2, 2, 3, 2, 1, 2, 0, 1, 2, 0, 2, 3, 2, 2, 0, 3, 2, 0, 0, 2, 3, 2, 1, 2, 3, 1, 3, 3, 3, 2, 0, 1, 2, 3, 2, 1, 0, 3, 2, 2, 0, 0, 0, 3, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 2, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 2], [0, 1, 1, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += max(( ( abs(( int(3.0) - ( i2 - int(8.0) ) )) + ( i1 * ( min(divInt(divInt(in2,max(divInt(i1,i2), ( max(mod(int(1.0),( min(int(6.0), max(min(max(divInt(in1,int(4.0)), mod(max(( int(3.0) - in0 ), min(( mod(in1,res0) * in0 ), abs(i0))),divInt(in0,int(7.0)))), in0), i0)) - i1 )), ( i1 * int(3.0) )) * ( int(1.0) + in2 ) ))),int(4.0)), in1) + int(9.0) ) ) ) + int(0.0) ), in2)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 20, 1, 63, 20, 12, 13, 8]}, {"genotype": [[0], [1], [1], [], [1], [1], [5], [], [], [], [], [], [], [], [], [1, 3, 5], [0], [3, 1, 2, 0, 0], [1], [0], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = min(int(5.0), mod(in0,in2))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 1, 0, 1]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [3, 4], [3], [2], [], [1], [0], [], [], [], [1, 1], [], [1, 2, 2, 3, 1, 0, 0], [1, 1], [2], [], [0, 1]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(3.0) \\ge divInt(mod(abs(int(4.0)),i1),i1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 7, 2, 1, 0, 2]}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 0, 0, 2, 0, 0, 2, 0, 0], [1, 1, 0, 0], [1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1], [5, 7, 3, 9, 8, 0], [2, 3, 4], [1, 1, 2], [], [1, 0, 0, 0, 1, 1, 0], [0, 0, 0], [2, 2, 0, 0], [], [0, 1], [4, 5, 3, 4, 0, 1, 1, 5, 3, 5, 6, 1, 1], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 3, 0, 0, 3, 0, 1, 1, 3, 1, 2, 0, 1], [0], [2, 0, 1], [0, 2, 1], []], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 == in2:{:\\nloopBreak% = 0\\nwhile not not b1:{:\\nin0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(5.0)\\nif i1 \\ge int(7.0):{:\\ni1 = abs(in2)\\n:}\\nin0 *= in2\\nif min(res0, int(3.0)) \\le int(9.0):{:\\ni1 = max(int(8.0), ( i1 - int(0.0) ))\\n:}else:{:\\nb1 = b2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 4, 6, 6, 6, 3, 3, 0, 7, 3, 4, 0, 2, 13, 5, 18, 1, 3, 3, 0]}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [1, 1, 1, 1], [3, 3, 8, 9], [2], [0], [0], [0, 0, 0, 1, 0], [0], [2, 2, 3, 0], [], [], [4, 1, 2, 5, 4, 1, 2, 1, 0, 3, 3, 6], [1], [2, 0, 2, 1, 2, 2, 0, 0, 0, 3, 3, 0, 0, 3, 3, 2, 3, 3, 1, 1, 0, 2, 0, 2, 1, 3, 0, 0, 3, 0], [0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 2, 0, 0, 2, 2], [1, 2, 2, 0], [1, 1, 0, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not ( ( in1 - ( int(3.0) * mod(mod(i1,i2),in2) ) ) == min(min(in1, i1), max(abs(divInt(min(min(int(3.0), int(8.0)), i2),( i1 * mod(int(9.0),abs(i0)) ))), in0)) and b0 ):{:\\nin0 += abs(res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 4, 4, 1, 1, 1, 5, 1, 4, 0, 0, 12, 1, 30, 7, 8, 4, 4]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [3, 2, 2], [2], [1], [], [1], [0], [], [], [], [3], [], [3, 1, 1, 2, 1, 0], [0], [1], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(int(3.0), int(2.0)) == ( int(2.0) * in0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 6, 1, 1, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 0], [], [0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 0, 6, 0, 0, 5, 5, 8, 5, 4, 5, 4, 7, 0, 9, 8, 6, 2, 5, 7, 5, 0, 2, 2, 0], [3], [1, 2, 0, 1, 0, 0, 1, 1], [], [1, 0, 0, 0, 0], [0], [0, 1, 0, 0], [1], [], [2, 5, 6, 0, 5, 0, 1, 4, 4, 6, 6, 5, 4, 3, 3, 4, 6, 0, 0, 2, 1, 1, 4], [0, 0], [0, 1, 2, 1, 3, 3, 3, 1, 2, 2, 1, 0, 3, 2, 0, 1, 2, 3, 1, 2, 3, 3, 2, 1, 2, 3, 0, 0, 3, 3, 3, 0, 3, 3, 1, 0, 3, 0, 3, 3, 3, 3, 2, 3, 2, 2, 1, 2, 2, 1, 2, 1, 3, 1, 1, 2, 1, 1, 0, 0, 1, 1, 3, 3, 3, 1, 1, 0, 2, 1, 0, 1, 2, 2, 3, 2, 0, 1, 0, 0, 1, 3, 3, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 1, 2, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0], [2, 1, 2, 2, 0, 1, 0, 0, 0, 1, 2], [0, 1, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = i2 \\ge int(2.0)\\nb2 = b0\\nin2 = ( int(6.0) * abs(min(max(int(0.0), ( divInt(int(6.0),res0) - min(( i0 * int(0.0) ), mod(max(int(0.0), mod(min(max(( int(5.0) * ( min(in2, i0) + max(min(min(i1, max(abs(int(5.0)), in1)), min(in1, max(max(abs(max(divInt(abs(mod(divInt(int(8.0),mod(( int(5.0) - ( int(4.0) + max(int(5.0), int(4.0)) ) ),divInt(int(7.0),int(0.0)))),res0)),res0), int(9.0))), int(8.0)), max(abs(max(int(6.0), int(2.0))), in2)))), ( int(5.0) + in1 )) ) ), int(7.0)), ( ( min(( in0 + int(5.0) ), in0) - in1 ) * int(0.0) )),min(min(res0, i0), int(2.0)))),min(min(min(int(2.0), i0), i2), i1))) )), int(0.0))) )\\nb1 = False\\nb0 = b0\\nb1 = b1\\ni1 = in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 0, 7, 26, 26, 1, 8, 0, 5, 1, 4, 1, 0, 23, 2, 95, 19, 29, 11, 8]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [0, 0], [], [], [], [], [], [], [], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(00.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1], [2, 0, 1, 2, 0, 0], [1, 1], [1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 1, 0, 4, 9, 5, 3, 0, 5, 9, 4, 9, 5, 5, 9, 5], [2, 1, 4, 1], [0, 2], [1], [1, 0, 0, 1, 1, 1], [0, 0, 0, 0], [1, 3], [1], [], [4, 4, 4, 6, 0, 3, 6, 4, 1, 4, 3, 0, 0, 0, 1, 5], [0, 0], [2, 1, 2, 3, 1, 2, 0, 3, 0, 1, 2, 3, 3, 0, 2, 1, 0, 3, 3, 0, 0, 1, 1, 3, 0, 1, 3, 1, 1, 1, 2, 3, 1, 0, 1, 2, 0, 2, 2, 0, 2, 2, 2, 0, 3, 0, 1, 1, 2, 2, 0, 2, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [2, 2, 0, 2, 0, 1, 0, 2, 1, 2], [1, 2, 1, 1, 1, 2, 2, 0, 1, 1], [1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( int(6.0) - mod(abs(int(3.0)),( in1 * abs(in1) )) ) == int(1.0):{:\\nin1 = ( min(abs(res0), mod(int(0.0),i0)) - min(max(in0, res0), int(4.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = int(95.0)\\nloopBreak% = 0\\nwhile False:{:\\nb0 = ( min(i1, int(3.0)) \\g abs(int(0.0)) or int(5.0) \\le int(9.0) )\\nb2 = divInt(max(int(4.0), in1),int(9.0)) \\g mod(in0,( ( i0 - ( ( ( i0 - abs(i0) ) * int(5.0) ) * int(5.0) ) ) + mod(( i1 - ( in2 - int(9.0) ) ),int(5.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 17, 17, 4, 2, 1, 6, 4, 2, 1, 0, 16, 2, 55, 15, 10, 10, 5]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 2, 6, 3, 5, 7, 4, 3], [4, 4], [0], [0], [0, 1, 1], [0, 0], [3], [], [], [0, 1, 2, 4, 2, 2, 0, 0, 0, 2, 0, 1], [0], [1, 0, 2, 0, 2, 0, 1, 3, 2, 2, 3, 1, 1, 3, 3, 3, 2, 1, 1, 3, 1, 0, 0, 2, 3, 2, 1, 0, 0, 2, 2, 0, 3, 2, 3, 0, 2, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 2, 2, 1, 2, 0, 2, 2], [0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(7.0) \\le i0 and mod(i1,mod(i2,int(4.0))) \\le min(mod(divInt(min(int(2.0), int(6.0)),abs(abs(max(mod(int(3.0),int(5.0)), abs(int(7.0)))))),in1), i2) )\\ni2 = ( min(divInt(int(4.0),i0), i0) + mod(( i0 - abs(divInt(abs(i2),divInt(int(3.0),i0))) ),i1) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 9, 9, 2, 1, 1, 3, 2, 1, 0, 0, 12, 1, 40, 11, 9, 2, 9]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 2, 0, 2, 0, 2, 1, 0], [1, 0, 0], [1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 4, 9, 0, 2, 3, 9, 1, 9, 2, 4, 3, 9, 0, 8, 8, 1, 2, 2, 7, 9, 9, 0, 9, 8], [4, 4, 3, 1, 5, 0], [2, 1, 2, 0], [0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [2, 2, 0, 2, 3, 3, 2, 1], [1], [0, 1], [5, 5, 2, 4, 0, 1, 4, 5, 3, 4, 5, 6, 0, 5, 2, 2, 2, 0, 0], [0, 1, 0, 1], [3, 1, 3, 3, 2, 1, 3, 2, 3, 1, 1, 0, 0, 2, 2, 3, 1, 0, 3, 1, 0, 1, 1, 1, 1, 2, 3, 1, 0, 2, 0, 0, 2, 0, 0, 3, 1, 3, 3, 3, 0, 2, 1, 3, 3, 1, 1, 1, 1, 3, 1, 2, 0, 1, 0, 0, 2, 1, 0, 1, 2, 1, 3, 2, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0], [2, 0, 2, 1, 0, 2, 1, 1, 1, 2, 1, 0, 0, 0, 2, 1], [0, 1, 2, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = abs(int(6.0))\\nin2 += min(abs(mod(int(7.0),max(( min(int(4.0), int(9.0)) - i2 ), in1))), ( ( abs(int(0.0)) * i0 ) - max(int(2.0), i1) ))\\nb2 = not not b1\\nloopBreak% = 0\\nwhile int(39.0) \\le int(19.0):{:\\nb2 = not ( ( int(2.0) \\le int(4.0) and divInt(max(int(3.0), in1),divInt(in2,in0)) \\ge mod(in1,in2) ) and max(int(9.0), abs(max(min(res0, ( int(0.0) - min(min(int(8.0), int(8.0)), int(1.0)) )), int(2.0)))) \\g abs(int(2.0)) )\\nif divInt(i0,int(7.0)) != in2:{:\\nb0 = not False\\n:}\\nif i2 \\l mod(int(9.0),i2):{:\\ni2 = int(9.0)\\n:}else:{:\\ni0 -= mod(int(0.0),max(( int(9.0) - i0 ), int(8.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 26, 26, 6, 4, 2, 14, 6, 8, 1, 2, 19, 4, 67, 12, 16, 7, 7]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 0], [0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 4, 9, 7, 1, 5, 4, 7, 5, 0, 1, 4, 2, 2, 4, 8, 3, 3], [3, 0, 0, 5], [1, 2, 0, 2, 1, 0], [1, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0], [0, 3, 2, 2, 3, 2, 0, 0, 3, 0, 0], [], [0, 1, 1, 0], [1, 2, 3, 6, 4, 6, 3, 6, 5, 5, 4, 3, 0, 1, 5, 3], [0, 1, 0, 1, 1], [1, 1, 3, 2, 3, 1, 2, 1, 2, 1, 1, 3, 1, 1, 2, 3, 0, 3, 1, 3, 1, 0, 0, 0, 1, 0, 3, 2, 1, 3, 1, 2, 3, 2, 1, 2, 0, 0, 0, 3, 2, 3, 1, 0, 1, 1, 2, 0, 0, 3, 3, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2], [0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2], [1, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\ni1 = int(7.0)\\nloopBreak% = 0\\nwhile int(7.0) \\ge max(( min(int(4.0), ( int(9.0) + mod(int(7.0),int(1.0)) )) + max(int(5.0), int(4.0)) ), ( abs(i2) + max(int(7.0), max(int(5.0), in0)) )):{:\\nres0 += in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif res0 \\l int(0.0):{:\\nin0 = res0\\n:}else:{:\\nif ( abs(( int(1.0) * abs(int(4.0)) )) \\l ( max(( int(2.0) - ( in2 + in2 ) ), in1) + abs(mod(max(int(2.0), in0),int(4.0))) ) or int(8.0) != ( i0 + i1 ) ):{:\\nif not not ( not b2 or b0 ):{:\\nin2 += abs(abs(int(3.0)))\\n:}\\n:}else:{:\\nin0 *= int(3.0)\\n:}\\n:}\\n:}\\nb2 = ( b1 and b0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 19, 19, 4, 6, 3, 15, 4, 11, 0, 4, 16, 5, 53, 10, 13, 11, 2]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 2, 0, 2, 0, 1, 0], [0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 7, 2, 4, 6, 8, 3, 8, 3, 7, 2, 4, 5, 0, 9, 2, 2, 9, 2, 2, 3, 3, 2, 9, 4, 6, 9, 1, 5, 3, 3, 5, 1, 7, 6, 4, 0, 7, 6, 7, 4, 4, 2, 5, 2, 4, 9, 0, 8, 5, 1, 7, 3, 6, 8, 9, 3, 7, 7, 4, 9], [4, 0, 2], [2, 0, 1, 0], [], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0], [2, 1, 1, 0], [1, 0], [0, 1, 0], [2, 0, 4, 6, 0, 3, 2, 1, 3, 2, 2, 2, 3, 5, 0, 0, 5, 4, 4, 0, 6, 6, 4, 4, 2, 1, 2, 0, 4, 3, 3, 6, 3, 5, 4, 1, 5, 3, 6, 6, 4, 1, 0, 1, 1, 2, 4, 6, 6, 5, 6, 1, 0, 5, 6], [0], [0, 3, 0, 3, 2, 1, 2, 1, 3, 1, 1, 1, 3, 1, 3, 2, 0, 1, 0, 3, 2, 2, 3, 3, 1, 1, 3, 3, 3, 2, 0, 3, 2, 3, 1, 0, 1, 0, 1, 3, 2, 0, 3, 0, 3, 0, 3, 2, 1, 1, 2, 2, 1, 3, 1, 2, 2, 1, 2, 0, 1, 1, 1, 2, 3, 3, 2, 0, 2, 0, 3, 2, 1, 2, 3, 2, 0, 0, 2, 3, 3, 0, 1, 3, 2, 3, 2, 0, 1, 2, 0, 2, 2, 1, 2, 2, 0, 3, 1, 1, 1, 0, 1, 1, 1, 3, 2, 2, 2, 3, 3, 3, 2, 3, 3, 1, 1, 2, 2, 2, 0, 0, 2, 3, 2, 2, 0, 1, 3, 0, 0, 0, 2, 2, 3, 0, 0, 3, 1, 1, 3, 2, 0, 3, 0, 2, 0, 3, 1, 2, 3, 3, 0, 1, 2, 2, 3, 3, 1, 1, 1, 3, 3, 1, 0, 2, 2, 3, 1, 0, 1, 3, 2, 2, 3, 1, 3, 3, 2, 1, 0, 1, 3, 0, 3, 2, 3, 2, 3, 3, 1, 2, 0, 2, 2, 2, 1, 3, 1, 1, 0, 0, 2, 2, 3, 1, 3, 2, 2, 1, 1, 2, 2, 0, 1, 0, 1, 1, 0, 2, 0, 2, 3, 0, 2, 0, 2, 2, 1, 0, 1, 0, 0, 2, 3, 0, 2, 1, 0, 0, 3, 3, 1, 0, 0, 2, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 1, 1, 0, 0, 2, 2, 2, 1, 2, 0, 1, 2, 2, 1, 2, 2, 2, 2, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 2, 2, 1, 2, 2, 1, 2, 1, 0, 1, 2, 2, 1, 0, 2], [2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 2, 1, 2, 1, 2, 0, 0, 2, 2, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not i2 \\le max(i0, min(( int(3.0) * ( int(4.0) - max(int(7.0), int(2.0)) ) ), int(4.0))):{:\\nif False:{:\\nb2 = min(int(6.0), abs(divInt(in1,int(8.0)))) \\l res0\\n:}else:{:\\nif True:{:\\nb0 = max(divInt(( min(min(int(3.0), int(8.0)), max(abs(max(( i0 * max(mod(min(int(3.0), in0),int(7.0)), i2) ), int(2.0))), min(mod(i1,abs(in0)), abs(i2)))) - abs(( int(4.0) * int(5.0) )) ),divInt(divInt(int(0.0),max(int(9.0), divInt(mod(int(2.0),mod(i2,int(2.0))),int(9.0)))),int(2.0))), ( abs(min(mod(i2,( in0 - max(( int(2.0) * ( abs(( in2 + i0 )) + ( abs(max(i0, int(3.0))) + abs(( abs(divInt(in2,int(3.0))) + divInt(in1,( divInt(int(2.0),mod(( in1 + abs(int(9.0)) ),int(4.0))) + int(6.0) )) )) ) ) ), i0) )), int(9.0))) + int(1.0) )) == int(5.0)\\n:}\\n:}\\nres0 = abs(( ( ( min(max(min(( abs(abs(int(3.0))) - int(3.0) ), ( mod(mod(res0,in1),mod(max(( mod(in1,int(5.0)) - max(i2, i1) ), i2),divInt(mod(min(i0, in1),max(int(1.0), int(7.0))),max(( in0 * min(in0, ( res0 * min(int(6.0), ( min(max(in0, int(4.0)), ( divInt(abs(abs(int(0.0))),int(7.0)) - int(6.0) )) - max(min(int(7.0), in2), mod(( min(int(4.0), in1) + int(4.0) ),max(divInt(mod(abs(int(2.0)),abs(max(divInt(int(5.0),i1), int(2.0)))),abs(in2)), abs(( max(divInt(abs(max(int(4.0), mod(in0,divInt(divInt(mod(int(9.0),min(int(0.0), int(8.0))),res0),res0)))),divInt(divInt(max(int(5.0), abs(divInt(divInt(int(1.0),int(7.0)),( divInt(in1,int(3.0)) * i1 )))),int(6.0)),int(8.0))), i0) - mod(i1,( abs(i1) * ( i2 - ( divInt(int(9.0),in1) * int(3.0) ) ) )) ))))) )) )) ), res0)))) + res0 )), ( max(in2, mod(int(7.0),res0)) + i1 )), min(abs(int(7.0)), i0)) * in2 ) * ( int(4.0) + res0 ) ) - int(9.0) ))\\nb1 = b0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 62, 62, 3, 4, 0, 7, 3, 4, 2, 3, 55, 1, 249, 70, 63, 32, 38]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 2, 1, 0, 2, 1, 1, 0, 2, 1, 0, 2, 2, 1, 2, 0], [1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 3, 0, 2, 3, 9, 8, 5, 0, 3, 9, 1, 4, 4, 5, 4, 4, 8, 2, 8, 6, 0, 9, 3, 9, 7, 9, 1, 0, 6, 3, 6, 9, 5, 3, 5, 1, 9, 4, 2, 7, 6, 0, 9, 0, 9, 1, 4], [1, 4, 4, 5, 4, 0, 4, 4, 2, 0], [1, 0, 2, 0, 0, 2, 0, 1, 0, 0], [0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 0, 2, 2, 1, 3, 3, 1, 0, 2, 3, 2, 2, 0, 0], [0, 1, 0], [1, 1, 1], [1, 1, 5, 2, 2, 0, 0, 5, 5, 2, 5, 1, 6, 5, 3, 3, 5, 5, 0, 6, 5, 3, 5, 3, 2, 2, 5, 1, 3, 4, 0, 0, 3, 2, 3, 3, 3, 4, 3, 1, 0, 0, 6, 0, 5, 0, 4, 2, 5, 1, 0, 4, 4, 6, 2, 5, 2, 3], [1, 0, 0], [0, 1, 1, 3, 1, 0, 3, 1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 2, 2, 0, 2, 0, 2, 3, 1, 3, 3, 1, 2, 1, 3, 2, 0, 3, 1, 1, 3, 0, 1, 2, 3, 2, 1, 1, 1, 2, 0, 3, 0, 0, 0, 2, 1, 0, 2, 2, 1, 1, 0, 3, 3, 0, 2, 0, 2, 2, 0, 1, 1, 2, 1, 3, 2, 3, 3, 0, 1, 3, 0, 0, 0, 1, 2, 3, 1, 3, 3, 3, 2, 1, 3, 0, 0, 0, 2, 0, 2, 0, 1, 3, 1, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 0, 2, 2, 3, 2, 2, 2, 2, 3, 0, 2, 0, 0, 0, 1, 3, 0, 0, 3, 0, 0, 2, 0, 1, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 3, 1, 0, 0, 3, 3, 1, 2, 0, 0, 3, 3, 1, 0, 2, 0, 1, 2, 2, 0, 3, 1, 3, 0, 3, 3, 2, 3, 3, 3, 2, 0, 1, 2, 2, 0, 1, 2, 1, 1, 2, 0, 1, 0, 1, 0, 1, 1, 0, 1, 3, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 0, 2, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 0, 2, 2, 1, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2], [1, 2, 2, 0, 1, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1, 1, 2, 2, 2, 1, 0, 1, 2, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nif not i1 \\g int(5.0):{:\\nif int(9.0) \\le min(int(3.0), i1):{:\\nb1 = b0\\n:}else:{:\\nb2 = abs(int(0.0)) \\le ( mod(in2,mod(int(2.0),int(3.0))) - int(9.0) )\\n:}\\n:}else:{:\\nif int(8.0) != i2:{:\\ni2 *= ( ( i0 * ( i0 + mod(min(int(5.0), min(min(int(0.0), ( int(3.0) - min(( in2 * max(int(9.0), int(1.0)) ), min(in2, int(4.0))) )), ( min(( int(4.0) * int(5.0) ), int(4.0)) * mod(i2,abs(in2)) ))),i1) ) ) * res0 )\\n:}else:{:\\nin2 = mod(int(4.0),in0)\\n:}\\n:}\\nin0 = divInt(divInt(int(8.0),int(2.0)),in2)\\nloopBreak% = 0\\nwhile not not False:{:\\nb0 = max(max(in2, ( i0 - mod(mod(res0,int(8.0)),int(6.0)) )), ( int(0.0) * min(( abs(min(in2, int(9.0))) - min(in0, in2) ), in0) )) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( min(int(9.0), min(min(max(( int(7.0) + abs(i2) ), i2), in2), mod(i1,( in0 - int(9.0) )))) - abs(int(1.0)) ) \\l min(( int(0.0) - max(mod(divInt(max(min(( min(in1, divInt(mod(max(divInt(( mod(mod(abs(i0),( i0 * in0 )),i2) * int(6.0) ),min(in0, in0)), max(in0, in1)),divInt(in0,int(3.0))),max(( ( ( int(6.0) * i1 ) - i0 ) + min(int(9.0), i0) ), int(5.0)))) - abs(int(3.0)) ), res0), i0),abs(max(int(5.0), mod(in2,i0)))),abs(min(int(1.0), in1))), ( i2 * int(9.0) )) ), ( divInt(in2,abs(int(4.0))) - abs(i1) ))\\nloopBreak% = 0\\nwhile ( ( True and b2 ) or not ( not not min(min(( abs(min(abs(( i0 + int(2.0) )), divInt(divInt(in1,int(7.0)),( int(6.0) + int(0.0) )))) - divInt(in1,int(9.0)) ), res0), int(0.0)) \\le i2 or int(9.0) \\le int(1.0) ) ):{:\\nloopBreak% = 0\\nwhile in2 == int(4.0):{:\\nb0 = b1\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = abs(i2) \\l in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 8, 9, 49, 49, 10, 10, 3, 26, 10, 16, 3, 3, 58, 3, 199, 49, 46, 27, 23]}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 1, 2, 0, 2, 0, 1], [0, 1, 0], [1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 6, 7, 9, 4, 7, 1, 7, 2, 6, 6, 5, 1, 2, 2, 3, 5, 5, 7, 9, 0, 6, 6, 5, 9, 9, 6, 3, 0, 2, 1, 9, 8, 3], [1, 1, 2, 5, 5, 4, 0, 2], [0, 0, 2], [1, 0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 3, 2, 2, 2], [], [1, 0], [4, 1, 0, 0, 1, 5, 3, 6, 1, 1, 5, 3, 4, 6, 6, 6, 1, 0, 3, 4, 2, 0, 2, 1, 3, 5, 6, 2, 3, 0, 3, 5, 4, 4, 0, 0, 5, 6, 3, 6, 3, 2], [0, 0], [1, 0, 2, 1, 3, 2, 1, 0, 0, 0, 1, 2, 0, 3, 1, 0, 2, 3, 2, 1, 0, 3, 2, 0, 3, 1, 0, 0, 2, 2, 1, 0, 2, 2, 2, 2, 2, 0, 3, 2, 0, 1, 1, 1, 1, 3, 0, 1, 3, 3, 0, 2, 2, 3, 1, 0, 3, 2, 1, 2, 2, 2, 1, 3, 0, 1, 1, 1, 0, 3, 3, 3, 0, 2, 2, 0, 2, 3, 1, 2, 3, 1, 2, 1, 3, 0, 0, 0, 1, 1, 3, 0, 3, 2, 3, 2, 2, 0, 2, 2, 1, 0, 0, 2, 3, 3, 3, 1, 1, 0, 2, 2, 1, 3, 1, 0, 2, 0, 0, 0, 2, 0, 2, 0, 3, 0, 3, 2, 1, 1, 2, 0, 3, 0, 0, 0, 1, 0, 3, 1, 3, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 2, 2, 0, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0, 1, 0, 0, 0, 1, 2, 0, 1, 1, 2, 1, 2, 2, 2, 1, 2], [0, 1, 2, 1, 2, 2, 0, 1, 1, 0, 0, 2, 1, 1, 2, 0, 0, 0, 1, 2, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(22.0)\\nif i1 \\g divInt(int(6.0),min(( int(7.0) + i0 ), i0)):{:\\nb0 = i1 \\g int(9.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile not ( mod(in2,abs(int(4.0))) == in0 or not divInt(abs(mod(int(7.0),res0)),min(mod(i1,max(int(1.0), i1)), in2)) != ( ( int(7.0) - in0 ) * ( ( ( ( divInt(in1,min(mod(res0,int(2.0)), int(6.0))) - int(6.0) ) * int(5.0) ) * max(res0, int(1.0)) ) + abs(min(res0, divInt(( abs(int(2.0)) - i1 ),max(( int(2.0) - divInt(( mod(int(3.0),abs(i0)) + int(5.0) ),int(5.0)) ), int(7.0))))) ) ) ):{:\\nb0 = ( not not in0 != abs(min(max(in1, ( divInt(i2,( min(int(9.0), ( min(int(0.0), divInt(int(6.0),min(i0, i2))) + i1 )) * int(6.0) )) - int(5.0) )), max(in0, abs(divInt(min(( ( in2 - mod(( int(9.0) * res0 ),i2) ) + ( max(max(abs(int(9.0)), int(6.0)), in0) + mod(( int(3.0) + max(int(0.0), i0) ),mod(in0,in2)) ) ), in1),( in1 - mod(i0,abs(i0)) )))))) and abs(( int(2.0) * int(1.0) )) \\le ( in2 + abs(res0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in0 \\l res0:{:\\nb2 = not int(9.0) == in0\\n:}\\ni2 = max(int(8.0), abs(int(3.0)))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 35, 35, 8, 3, 2, 15, 8, 7, 0, 2, 42, 2, 142, 38, 30, 21, 17]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 1, 2, 0, 1], [0], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 9, 2, 4, 7, 1, 5, 4, 1, 6, 2, 2, 0, 8, 8, 9, 1, 2, 4, 7, 6, 2, 5, 0, 4, 6, 1, 9, 0, 4, 6, 1, 4, 9, 1, 1, 5, 9, 0, 1, 1, 2, 1, 3, 9, 0, 7, 9, 4, 3, 5, 8, 4, 0, 5, 7, 5, 6, 0, 5, 8, 5, 0, 7, 7, 0, 9, 1, 8, 0, 0, 1, 3, 1, 9, 4, 4, 8, 9, 5, 0, 7, 5, 0, 9, 6, 0, 9, 3, 9, 8, 0, 6, 9, 4, 7, 4, 3, 6, 5, 0, 8, 3, 8, 6, 0], [3, 1, 0, 2, 3, 1, 0], [1, 0, 2], [0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 3, 3, 3], [], [1], [3, 0, 3, 2, 6, 5, 4, 3, 3, 6, 3, 6, 0, 3, 4, 2, 6, 2, 3, 6, 6, 3, 3, 3, 4, 3, 3, 3, 6, 6, 6, 0, 6, 5, 4, 5, 5, 4, 5, 0, 3, 5, 5, 0, 0, 1, 4, 2, 2, 2, 0, 0, 2, 3, 4, 3, 4, 6, 5, 5, 5, 0, 4, 2, 1, 0, 1, 0, 5, 4, 2, 5, 6, 1, 5, 0, 1, 2, 6, 4, 4, 3, 3, 4, 2, 3, 4, 0, 4, 5, 6, 2, 5, 0, 2, 0, 6, 6, 1, 3, 3, 0, 5, 6, 4, 6, 5, 1, 1, 1, 2], [0], [3, 1, 1, 2, 1, 2, 2, 3, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 2, 1, 2, 1, 0, 2, 2, 0, 2, 0, 2, 0, 3, 2, 2, 0, 2, 0, 2, 2, 3, 1, 2, 3, 3, 2, 0, 3, 3, 0, 3, 0, 0, 2, 2, 0, 2, 3, 1, 2, 1, 0, 0, 3, 0, 0, 2, 2, 3, 3, 0, 3, 1, 2, 3, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 3, 1, 3, 0, 0, 1, 3, 3, 2, 1, 1, 3, 1, 2, 2, 0, 3, 1, 3, 2, 3, 2, 0, 0, 1, 3, 3, 1, 2, 3, 3, 1, 2, 1, 0, 2, 3, 1, 2, 3, 0, 2, 1, 2, 3, 2, 0, 3, 1, 3, 1, 0, 0, 3, 2, 2, 1, 0, 0, 2, 0, 3, 2, 2, 1, 3, 3, 2, 3, 3, 3, 1, 2, 3, 0, 0, 3, 3, 3, 0, 0, 0, 2, 0, 2, 0, 2, 0, 1, 1, 2, 2, 1, 1, 3, 2, 0, 0, 2, 2, 1, 1, 3, 0, 0, 0, 1, 2, 1, 3, 0, 3, 1, 0, 0, 2, 1, 1, 1, 1, 0, 0, 1, 0, 3, 1, 3, 0, 3, 3, 3, 1, 0, 3, 2, 1, 1, 0, 3, 0, 1, 1, 3, 2, 1, 2, 1, 2, 0, 3, 0, 3, 2, 1, 2, 0, 2, 1, 2, 3, 1, 3, 1, 1, 0, 1, 2, 2, 0, 2, 2, 3, 0, 1, 0, 0, 0, 1, 0, 2, 3, 2, 3, 3, 0, 2, 1, 3, 1, 1, 3, 1, 2, 1, 3, 0, 1, 3, 3, 1, 1, 3, 3, 3, 2, 3, 2, 1, 2, 1, 2, 0, 2, 3, 3, 2, 1, 3, 3, 0, 2, 2, 2, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 3, 0, 3, 3, 2, 1, 0, 0, 0, 2, 0, 3, 0, 2, 3, 2, 2, 3, 1, 1, 1, 2, 1, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 3, 1, 3, 2, 1, 2, 3, 3, 3, 1, 0, 2, 1, 3, 2, 1, 3, 1, 3, 1, 0, 3, 3, 0, 3, 0, 2, 0, 2, 3, 0, 2, 0, 2, 1, 1, 0, 3, 1, 2, 3, 2, 3, 2, 0, 2, 0, 0, 0, 3, 3, 1, 1, 1, 0, 2, 3, 1, 3, 2, 0, 2, 3, 0, 2, 0, 2, 3, 1, 3, 1, 3, 3, 0, 3, 0, 3, 0, 0, 2, 3, 2, 0, 3, 3, 0, 3, 3, 1, 1, 3, 1, 0, 0, 0, 3, 1, 0, 0, 0, 0, 1, 0, 3, 1, 3, 3, 3, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0], [2, 1, 0, 0, 2, 1, 0, 2, 1, 0, 0, 2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 1, 0, 0, 2, 0, 2, 2, 1, 0, 0, 1, 1, 0, 0, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 2, 1, 0, 2, 2, 0, 0, 1, 1, 0, 0, 2, 0, 2, 1, 0, 1, 1, 2, 2, 1, 1, 1, 2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 1, 2, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 2, 2, 2, 1, 2, 0, 2, 1, 1, 2, 2, 2, 0], [1, 2, 1, 2, 1, 0, 0, 2, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 2, 2, 2, 1, 0, 1, 1, 2, 2, 0, 1, 0, 1, 2, 1, 1, 0, 0, 2, 0, 0, 1, 2, 0, 2, 2, 2, 2, 2, 1], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 112, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not not abs(int(0.0)) \\ge int(9.0)\\nin0 = mod(int(9.0),divInt(( max(( divInt(min(int(2.0), ( int(4.0) - min(( ( ( mod(int(7.0),mod(int(1.0),i0)) * divInt(( in0 - mod(i2,( res0 * abs(divInt(mod(in2,( in1 - ( ( max(int(5.0), ( min(abs(divInt(in0,max(min(in0, min(res0, in0)), mod(mod(res0,divInt(abs(int(4.0)),divInt(int(1.0),i0))),in0)))), min(in1, i2)) + ( divInt(max(max(res0, abs(int(6.0))), ( abs(i2) + int(2.0) )),( int(2.0) * abs(max(( divInt(mod(int(0.0),max(int(8.0), max(in0, res0))),int(8.0)) + abs(abs(( int(9.0) - int(1.0) ))) ), min(int(2.0), divInt(( res0 + max(int(4.0), abs(( min(mod(in0,in0), int(7.0)) - max(min(int(6.0), ( min(abs(int(2.0)), ( int(5.0) + in0 )) - ( min(int(0.0), divInt(abs(in1),divInt(int(4.0),( abs(divInt(in0,max(int(6.0), min(int(1.0), in0)))) - in0 )))) - min(mod(divInt(int(9.0),res0),res0), ( res0 - max(mod(divInt(int(0.0),max(min(mod(min(abs(max(int(4.0), ( abs(i0) + res0 ))), abs(abs(min(in2, in1)))),in2), divInt(in2,( in1 * divInt(in2,int(6.0)) ))), int(1.0))),( mod(int(4.0),int(9.0)) * max(divInt(i0,in0), divInt(( int(1.0) * int(1.0) ),abs(in2))) )), in2) )) ) )), i0) ))) ),int(5.0))))) )) - mod(int(9.0),max(i0, max(int(0.0), i1))) ) )) + in1 ) - divInt(int(1.0),int(1.0)) ) )),int(2.0))) )) ),int(1.0)) ) - i2 ) * i2 ), int(3.0)) )),i2) * abs(int(9.0)) ), max(i0, min(abs(abs(int(0.0))), i0))) + min(mod(int(7.0),int(9.0)), i2) ),min(in0, int(4.0))))\\nif not int(3.0) \\g max(mod(int(5.0),mod(int(8.0),mod(in1,max(in0, min(divInt(int(4.0),divInt(in1,divInt(int(0.0),mod(min(int(5.0), abs(int(7.0))),int(5.0))))), res0))))), int(6.0)):{:\\nb0 = not not ( ( ( divInt(in2,mod(( min(in2, int(0.0)) - in2 ),i0)) + in1 ) \\l int(5.0) and ( i2 == mod(abs(( max(min(i1, ( int(8.0) - max(int(5.0), int(0.0)) )), max(int(7.0), ( int(7.0) * abs(i0) ))) - int(0.0) )),abs(max(int(9.0), int(1.0)))) and max(max(abs(mod(min(divInt(int(8.0),( int(0.0) - ( i1 + ( min(max(( int(0.0) + max(max(i0, divInt(divInt(mod(max(in2, int(1.0)),in1),( i2 * int(3.0) )),divInt(int(1.0),in2))), abs(res0)) ), max(abs(divInt(int(9.0),i1)), in2)), i0) + mod(i1,min(i2, divInt(max(( ( abs(int(4.0)) + int(4.0) ) - int(8.0) ), divInt(int(9.0),int(5.0))),( max(int(0.0), int(7.0)) * ( int(5.0) + ( max(min(max(int(0.0), max(mod(int(9.0),mod(min(abs(min(int(6.0), res0)), divInt(int(0.0),max(divInt(int(9.0),abs(int(3.0))), max(int(9.0), in1)))),abs(min(in1, min(in0, ( in0 * mod(abs(in1),divInt(i2,mod(int(8.0),int(0.0)))) )))))), in0)), min(int(6.0), mod(min(divInt(max(( in1 * divInt(i0,in1) ), in2),min(min(int(9.0), int(4.0)), int(7.0))), res0),mod(min(int(4.0), min(mod(i2,divInt(max(in2, ( i0 * ( abs(int(3.0)) * min(int(6.0), min(min(i2, abs(i0)), abs(res0))) ) )),res0)), mod(abs(( i1 * max(abs(in0), min(abs(int(5.0)), int(0.0))) )),max(int(8.0), in0)))),i0)))), in2) - max(int(3.0), res0) ) ) )))) ) ) )), in1),res0)), in2), int(8.0)) \\ge i1 ) ) and abs(int(6.0)) \\g abs(abs(min(int(0.0), i1))) )\\n:}else:{:\\nb2 = i1 \\l i2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 107, 107, 7, 3, 3, 15, 7, 8, 0, 1, 111, 1, 461, 117, 127, 48, 69]}, {"genotype": [[0], [1], [0], [], [0], [0, 1], [3, 7], [4], [2], [], [1], [0], [], [], [], [5], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(37.0) \\le in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [3, 7], [], [], [], [], [], [], [], [], [2], [0], [2, 1, 1], [1], [], [], [1]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = mod(int(3.0),int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1], [2, 0, 4, 6], [], [], [], [], [], [], [], [], [3, 0, 3, 3, 3, 1], [0], [2, 3, 2, 3, 3, 1, 2, 3, 3, 0, 1, 2, 0, 1, 3, 2, 0, 1, 0, 3, 3, 0], [0, 0, 0, 1, 1], [1, 2, 2, 0, 2, 1, 2, 2], [1, 0, 2], [0, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( max(( abs(abs(int(2.0))) - ( min(abs(i0), int(0.0)) + divInt(in0,int(4.0)) ) ), max(divInt(in0,int(6.0)), in0)) * abs(abs(i1)) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 22, 5, 8, 3, 2]}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 2, 0, 0, 1], [1], [1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1], [8, 5, 3, 3, 3, 5, 5], [3, 1], [2, 1, 1], [], [0, 1, 1], [0, 0], [0], [], [], [0, 5, 0, 6, 6, 5, 6], [1, 0], [1, 1, 0, 2, 1, 3, 3, 1, 1, 3, 0, 2, 3, 3, 0, 2, 1, 3, 3, 0, 3, 1, 0], [1, 0, 1], [2, 2, 1, 1, 2, 0, 2, 2], [1, 1], [0, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= int(8.0)\\nloopBreak% = 0\\nwhile b2:{:\\nb1 = int(5.0) \\ge in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = divInt(int(3.0),abs(abs(int(3.0)))) \\g int(3.0)\\ni0 = max(res0, ( max(abs(res0), divInt(int(5.0),min(abs(in2), abs(int(5.0))))) - res0 ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 7, 7, 2, 3, 0, 3, 2, 1, 0, 0, 7, 2, 23, 3, 8, 2, 2]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [1], [1, 1], [1, 1], [0, 0], [], [], [], [0], [], [1], [0], [], [1, 0, 2], [1, 1], [1, 2, 0, 1], [0], [], [2, 2, 1], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\ni1 *= int(0.0)\\ni0 *= ( i2 - int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 0, 0, 0, 1, 0, 1, 1, 0, 3, 2, 4, 1, 0, 3, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 0], [], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 0, 5, 5, 7, 0, 0, 2, 7, 1, 6, 8, 6, 6, 7, 0, 9, 4, 1, 6, 5, 5, 7, 6, 3, 1, 6, 3, 8, 7], [], [], [], [], [], [], [], [], [0, 5, 0, 3, 4, 5, 0, 3, 2, 2, 1, 2, 3, 0, 0, 4, 0, 2, 0, 6, 5, 3, 0, 6, 1, 1, 1, 5, 1, 5, 2, 2, 0], [1, 0, 1, 0], [2, 2, 2, 2, 2, 2, 1, 1, 0, 2, 3, 2, 1, 2, 2, 0, 3, 2, 3, 1, 3, 0, 3, 0, 2, 0, 3, 3, 0, 2, 3, 0, 2, 2, 2, 2, 1, 0, 1, 2, 1, 3, 1, 0, 1, 1, 3, 2, 3, 0, 3, 2, 3, 0, 0, 3, 1, 1, 3, 0, 3, 3, 3, 3, 3, 0, 0, 1, 2, 3, 3, 2, 2, 3, 3, 0, 2, 3, 3, 2, 1, 2, 3, 0, 3, 3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 0, 3, 3, 1, 3, 1, 2, 1, 3, 0, 1, 3, 0, 0, 2, 3, 2, 0, 3, 0, 3, 0, 1, 3, 2, 2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 3, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [2, 2, 2, 0, 2, 1, 0, 2, 0, 1, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 2, 0, 2, 2, 1, 0, 0, 2, 0, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 2], [0, 2, 1, 2, 2, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 2, 0, 0, 2, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += divInt(mod(mod(divInt(( divInt(int(4.0),int(4.0)) * in2 ),mod(abs(( int(0.0) - ( ( i0 * abs(( abs(int(5.0)) * min(in0, abs(in1)) )) ) + divInt(in2,max(min(i0, ( abs(in0) - ( ( ( ( int(5.0) + i2 ) * int(7.0) ) - ( int(0.0) - min(int(0.0), i2) ) ) - int(2.0) ) )), int(7.0))) ) )),max(divInt(max(i1, min(( abs(i2) * in0 ), max(int(1.0), int(6.0)))),max(i0, abs(abs(max(min(min(i0, in1), int(8.0)), mod(abs(min(( ( abs(abs(i0)) + ( max(min(( int(6.0) - mod(min(i2, abs(min(int(6.0), int(7.0)))),abs(int(0.0))) ), int(9.0)), ( ( mod(int(4.0),i0) - abs(max(int(1.0), min(int(6.0), mod(int(5.0),abs(res0))))) ) - int(5.0) )) - abs(in2) ) ) - in0 ), ( abs(( i0 * min(res0, max(i1, int(7.0))) )) + abs(( ( i1 + int(6.0) ) * i1 )) ))),int(3.0))))))), in2))),int(1.0)),int(6.0)),int(3.0))\\ni1 = divInt(abs(int(8.0)),int(7.0))\\nin2 += i2\\ni2 = i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 33, 4, 135, 35, 40, 24, 13]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 0], [1, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 9, 0, 8, 0, 8, 2, 5, 4, 0, 3, 0, 2, 6, 6, 4, 7, 5, 0, 0, 4, 3, 1, 8, 4, 0, 3, 4, 5, 8, 8, 9, 4, 2, 8, 5, 7, 2, 5], [5, 5, 0, 5, 5, 0, 2, 5, 5], [0, 2, 2, 2, 2], [1, 1, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 1, 1, 3, 1, 1, 3, 2, 0], [1, 1, 1, 1], [1, 0, 0], [2, 4, 5, 3, 5, 2, 0, 4, 1, 0, 3, 2, 2, 4, 3, 4, 5, 2, 3, 1, 2, 4, 6, 6, 5, 3, 6, 6, 2, 5, 3, 4, 1, 4, 4, 1, 4, 2, 6, 0, 2, 0, 1, 6, 0, 2, 0, 4, 2], [1, 0, 0, 1], [2, 1, 1, 0, 2, 3, 0, 0, 2, 2, 3, 0, 1, 2, 2, 0, 0, 3, 2, 2, 1, 2, 3, 3, 2, 3, 0, 3, 3, 0, 2, 2, 2, 3, 0, 1, 0, 3, 3, 3, 2, 1, 0, 3, 1, 2, 0, 0, 0, 0, 1, 1, 1, 0, 2, 1, 3, 3, 1, 2, 0, 2, 1, 1, 3, 2, 3, 0, 1, 0, 2, 1, 1, 3, 1, 0, 1, 2, 3, 1, 1, 3, 2, 0, 1, 2, 1, 2, 1, 0, 1, 3, 3, 2, 2, 0, 3, 1, 1, 0, 0, 2, 2, 1, 0, 1, 2, 3, 0, 2, 3, 1, 2, 1, 1, 3, 0, 2, 1, 0, 3, 0, 3, 0, 2, 0, 2, 2, 3, 2, 1, 2, 0, 3, 2, 1, 2, 1, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 2, 1, 1], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 2, 1, 2, 1, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 0, 2, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 2, 0], [0, 0, 1, 1, 1, 2, 2, 1, 0, 2, 1, 2, 1, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile mod(int(9.0),int(0.0)) != i2:{:\\nif not ( abs(in1) + in2 ) != ( ( min(in0, int(9.0)) + mod(divInt(in2,i2),abs(( mod(int(0.0),( max(abs(mod(max(i0, min(abs(in1), ( ( ( abs(i1) - int(8.0) ) - i0 ) - abs(max(min(mod(int(0.0),in0), abs(int(8.0))), divInt(i2,i2))) ))),in1)), in0) * int(2.0) )) * int(5.0) ))) ) - int(4.0) ):{:\\nin1 += in2\\n:}else:{:\\nloopBreak% = 0\\nwhile ( False or False ):{:\\nif ( False or divInt(int(0.0),min(abs(int(3.0)), divInt(i2,( int(0.0) * int(2.0) )))) \\l min(( min(in0, int(6.0)) - i1 ), ( int(6.0) * int(4.0) )) ):{:\\nb0 = abs(int(7.0)) != i2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nb2 = divInt(abs(int(0.0)),int(0.0)) != min(divInt(res0,int(4.0)), divInt(int(3.0),( int(1.0) - res0 )))\\nb2 = ( int(8.0) \\l max(max(( mod(in2,min(int(4.0), int(0.0))) + in0 ), res0), ( mod(int(3.0),res0) + int(4.0) )) and not divInt(min(i2, divInt(abs(int(5.0)),( int(8.0) * int(8.0) ))),abs(in2)) == mod(int(9.0),in0) )\\nin1 = max(i1, min(in1, ( in1 * ( divInt(abs(( int(4.0) + mod(i1,min(( int(2.0) * ( int(8.0) + in1 ) ), i2)) )),( divInt(res0,mod(i0,i2)) + i0 )) + i1 ) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = int(5.0) != ( ( mod(int(7.0),res0) + i0 ) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i0 != in1:{:\\ni2 -= divInt(int(2.0),int(5.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 7, 8, 40, 40, 9, 5, 3, 19, 9, 10, 4, 3, 49, 4, 161, 46, 30, 25, 23]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1, 2], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 2, 2, 0, 2, 2, 1, 0, 1], [0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 6, 2, 5, 9, 9, 0, 2, 8, 0, 0, 6, 5, 3, 8, 6, 0, 0, 8, 1, 0, 4, 4, 0, 0, 3, 3, 0, 7, 2, 8, 4, 0, 5, 9, 0, 3, 8, 9, 2, 3, 3, 5, 2, 3, 5, 9, 7, 7, 1, 6, 9, 1, 4, 8, 4, 9, 9, 4, 2, 5, 2, 4, 2, 4, 0, 8, 8, 1, 3, 0, 1, 4, 3, 6, 9, 4, 1, 5, 5, 7, 0, 4, 4, 0, 2, 3, 7, 5, 3, 5, 2, 6, 4, 0, 8, 0, 5, 9, 0, 5, 7, 3, 5, 7, 1, 9, 0, 1, 1, 1, 0, 2, 3, 9, 1, 8, 6, 2, 3, 7, 0, 1, 6, 3, 3, 3, 9, 9, 7, 9, 9, 8, 7, 2, 4, 5, 8, 4, 2, 0, 8, 3, 9, 5, 2, 0, 2, 7, 6, 6, 9, 2, 0, 1, 2, 3, 8, 6, 3, 5, 0, 6, 0, 4, 6, 7, 4, 1, 6, 7, 0, 6, 0, 3, 1, 4, 7, 5, 6, 3, 9, 6, 3, 7, 0, 0], [3, 1, 3, 2, 5, 0, 0, 4, 1], [2, 2, 2], [0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 3, 2, 2], [], [1, 1, 1], [0, 6, 1, 5, 4, 1, 4, 2, 6, 6, 3, 6, 0, 4, 1, 1, 4, 2, 1, 0, 2, 6, 1, 6, 5, 6, 2, 0, 0, 3, 4, 3, 6, 2, 2, 1, 1, 5, 3, 6, 3, 0, 5, 3, 0, 6, 0, 2, 0, 1, 0, 1, 4, 1, 0, 6, 4, 1, 1, 5, 1, 6, 6, 1, 5, 4, 1, 1, 1, 6, 0, 4, 5, 0, 1, 1, 4, 1, 6, 5, 5, 3, 5, 0, 2, 4, 4, 1, 4, 3, 0, 0, 3, 5, 0, 2, 6, 2, 1, 3, 2, 5, 2, 4, 0, 4, 1, 2, 6, 2, 3, 0, 6, 2, 1, 3, 3, 4, 0, 5, 2, 1, 1, 0, 3, 2, 0, 5, 0, 1, 2, 6, 2, 4, 0, 4, 0, 2, 3, 1, 2, 4, 5, 5, 6, 6, 2, 6, 2, 0, 6, 2, 2, 5, 6, 3, 0, 5, 1, 3, 3, 5, 0, 2, 5, 4, 4, 3, 3, 2, 6, 3, 4, 6, 2, 6, 1, 3, 2, 3, 2, 0, 2, 2, 0, 0, 3, 6, 5, 2, 5, 6, 4, 2, 4, 4, 2, 6, 0, 0], [0, 0, 1, 1], [2, 2, 1, 0, 3, 2, 0, 1, 1, 3, 2, 1, 3, 1, 3, 2, 0, 2, 2, 2, 3, 0, 1, 0, 0, 2, 3, 0, 3, 2, 0, 3, 0, 3, 2, 1, 1, 0, 2, 1, 3, 2, 2, 3, 3, 0, 2, 3, 0, 3, 2, 0, 2, 2, 0, 1, 2, 1, 3, 3, 1, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 3, 0, 3, 3, 3, 1, 3, 2, 0, 0, 0, 2, 3, 3, 1, 2, 3, 3, 2, 0, 0, 1, 2, 1, 3, 2, 3, 3, 0, 2, 1, 1, 2, 0, 2, 0, 3, 0, 0, 2, 0, 2, 1, 2, 2, 3, 1, 1, 0, 2, 2, 0, 2, 1, 0, 3, 0, 3, 0, 3, 2, 0, 1, 1, 0, 2, 3, 2, 2, 2, 0, 1, 2, 1, 0, 3, 0, 2, 1, 3, 0, 2, 1, 1, 3, 0, 3, 3, 3, 2, 3, 0, 0, 3, 1, 1, 0, 0, 1, 3, 0, 1, 2, 2, 2, 2, 0, 2, 0, 1, 0, 1, 0, 3, 1, 2, 0, 3, 3, 2, 2, 2, 0, 3, 3, 0, 3, 1, 1, 3, 2, 2, 1, 3, 3, 2, 3, 2, 0, 2, 2, 2, 0, 2, 0, 1, 1, 3, 3, 2, 3, 3, 3, 1, 0, 1, 0, 2, 1, 1, 1, 1, 0, 3, 2, 1, 1, 2, 2, 2, 0, 1, 3, 1, 3, 2, 2, 0, 3, 2, 3, 1, 1, 2, 1, 0, 2, 2, 2, 2, 2, 0, 2, 3, 3, 1, 2, 2, 1, 2, 0, 3, 3, 0, 0, 1, 0, 3, 1, 1, 0, 1, 1, 2, 0, 3, 1, 2, 2, 3, 3, 3, 0, 3, 2, 3, 0, 0, 2, 0, 3, 1, 0, 0, 3, 2, 0, 0, 3, 3, 2, 0, 1, 2, 2, 2, 3, 0, 2, 2, 0, 2, 2, 1, 1, 0, 0, 1, 3, 2, 1, 3, 0, 2, 0, 3, 3, 3, 1, 0, 0, 2, 2, 0, 1, 2, 0, 3, 2, 3, 1, 3, 1, 1, 2, 1, 0, 1, 0, 0, 1, 2, 1, 2, 0, 3, 3, 2, 0, 3, 1, 3, 3, 2, 3, 2, 2, 2, 2, 3, 0, 1, 2, 3, 3, 1, 2, 2, 2, 1, 1, 2, 2, 3, 1, 2, 3, 2, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 3, 3, 2, 2, 2, 0, 3, 1, 0, 2, 3, 0, 0, 3, 2, 0, 1, 3, 2, 2, 1, 3, 1, 1, 2, 3, 2, 0, 1, 1, 0, 2, 3, 2, 3, 3, 3, 0, 3, 3, 0, 3, 0, 3, 1, 3, 2, 3, 1, 0, 0, 1, 1, 2, 1, 0, 3, 1, 3, 3, 0, 3, 2, 1, 0, 1, 1, 0, 1, 1, 3, 3, 3, 2, 2, 2, 3, 0, 3, 0, 3, 3, 0, 1, 1, 3, 1, 2, 2, 2, 1, 3, 2, 3, 3, 2, 3, 0, 3, 2, 3, 1, 2, 2, 1, 2, 3, 2, 1, 0, 2, 3, 3, 0, 2, 2, 3, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 2, 3, 2, 3, 3, 1, 1, 1, 3, 3, 2, 2, 2, 3, 0, 3, 2, 3, 2, 0, 2, 1, 1, 3, 2, 2, 1, 1, 3, 3, 1, 1, 1, 0, 1, 2, 3, 1, 3, 2, 0, 2, 0, 1, 2, 2, 3, 1, 3, 0, 0, 3, 1, 2, 2, 0, 3, 3, 2, 2, 2, 3, 1, 2, 0, 2, 1, 0, 3, 2, 2, 2, 0, 1, 1, 1, 1, 0, 1, 3, 3, 1, 0, 2, 2, 2, 3, 1, 0, 2, 3, 2, 3, 3, 0, 2, 2, 1, 3, 2, 1, 2, 1, 0, 1, 0, 3, 0, 3, 0, 2, 0, 3, 0, 0, 0, 0, 3, 2, 1, 1, 2, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 3, 1, 0, 3, 3, 0, 2, 2, 2, 1, 3, 0, 2, 2, 0, 2, 1, 0, 0, 1, 3, 1, 1, 0, 3, 1, 0, 3, 0, 0, 1, 0, 2, 3, 1, 2, 3, 0, 3, 0, 0, 1, 3, 3, 2, 3, 3, 0, 1, 0, 0, 3, 1, 1, 2, 1, 2, 3, 2, 0, 0, 0, 3, 2, 3, 3, 1, 0, 2, 1, 0, 2, 2, 3, 0, 1, 3, 1, 1, 0, 3, 2, 2, 3, 2, 3, 0, 0, 0, 3, 2, 0, 2, 2, 3, 1, 3, 2, 0, 2, 1, 3, 0, 3, 2, 1, 1, 0, 2, 1, 1, 2, 1, 3, 1, 1, 3, 0, 1, 0, 2, 1, 1, 0, 1, 0, 0, 1, 3, 3, 2, 2, 2, 0, 2, 3, 0, 1, 1, 0, 1, 2, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 1, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 1, 2, 1, 1, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 2, 2, 2, 0, 0, 0, 0, 2, 2, 1, 2, 2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 2, 1, 1, 1, 1, 0, 2, 0, 1, 2, 1, 2, 2, 2, 0, 0, 0, 2, 1, 2, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 1, 0, 0, 0, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 2, 1, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 0, 2, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 2, 0, 2, 0, 2, 1, 2], [1, 0, 1, 2, 2, 0, 1, 1, 0, 1, 2, 2, 1, 0, 2, 2, 0, 1, 2, 2, 2, 1, 0, 2, 2, 2, 1, 0, 0, 1, 0, 2, 0, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 0, 2, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 2, 0, 0, 1, 0, 2, 2, 2, 1, 0, 0, 0, 2, 1, 0, 1, 2, 0, 2, 2, 2, 0, 0, 0, 2, 1, 0, 1, 1, 2, 2, 2, 0, 1, 2, 2, 0, 2, 1, 2, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 2, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 106, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = divInt(( int(3.0) - res0 ),max(( i1 + int(4.0) ), int(6.0)))\\nb2 = ( max(mod(int(2.0),abs(int(5.0))), min(divInt(in2,mod(( mod(abs(in1),int(9.0)) - i1 ),in1)), divInt(abs(i2),abs(( res0 * min(res0, max(( int(9.0) * int(0.0) ), in0)) ))))) \\ge ( int(2.0) + abs(divInt(( min(min(res0, ( max(i0, abs(( in1 - ( mod(i1,int(8.0)) - ( int(0.0) + max(max(int(0.0), i1), int(6.0)) ) ) ))) - int(5.0) )), int(3.0)) * ( mod(abs(in1),int(8.0)) * int(6.0) ) ),i2)) ) and b2 )\\nif ( max(i1, max(min(max(int(0.0), min(( i0 - i2 ), res0)), divInt(max(min(int(0.0), divInt(min(min(( i1 + res0 ), int(8.0)), mod(int(1.0),min(( abs(min(in2, mod(int(0.0),int(4.0)))) * divInt(res0,mod(i2,min(i0, i0))) ), divInt(in0,( int(4.0) * ( ( min(int(0.0), int(0.0)) + in1 ) - ( ( in0 * ( int(3.0) * res0 ) ) * min(i2, min(i2, min(mod(i1,int(3.0)), int(0.0)))) ) ) ))))),i1)), ( min(( ( mod(in2,int(7.0)) - ( int(2.0) + in0 ) ) * abs(res0) ), ( int(8.0) * abs(in0) )) * mod(int(4.0),int(0.0)) )),max(i0, max(min(min(mod(abs(in2),in0), abs(int(5.0))), int(9.0)), i0)))), res0)) - int(0.0) ) \\g min(i0, int(3.0)):{:\\nif ( mod(divInt(( i2 + mod(i0,int(8.0)) ),i1),int(9.0)) + i0 ) \\ge max(int(2.0), divInt(i1,max(abs(divInt(( ( in1 - abs(abs(i1)) ) + min(int(3.0), int(3.0)) ),min(mod(divInt(int(5.0),min(min(( abs(mod(i0,( ( ( res0 * mod(in1,int(2.0)) ) + int(3.0) ) * abs(max(( abs(abs(abs(int(5.0)))) - i1 ), int(9.0))) ))) * i1 ), ( int(7.0) + int(7.0) )), int(1.0))),int(6.0)), in2))), abs(divInt(int(9.0),int(1.0)))))):{:\\nif ( mod(divInt(( i1 * int(4.0) ),max(int(8.0), min(( ( res0 * abs(( abs(int(4.0)) - int(9.0) )) ) + ( int(9.0) * res0 ) ), ( mod(( mod(mod(i1,mod(min(max(int(4.0), ( ( int(2.0) * mod(in2,max(max(in1, i1), int(5.0))) ) * i1 )), min(int(2.0), int(4.0))),i1)),int(2.0)) * int(4.0) ),mod(res0,abs(int(0.0)))) - ( divInt(max(abs(min(i0, abs(divInt(min(in1, in2),divInt(i0,abs(int(8.0))))))), i1),i1) + max(( in1 + i1 ), abs(max(( res0 + int(8.0) ), mod(mod(divInt(max(in2, ( ( in2 * ( ( int(1.0) - int(3.0) ) - in0 ) ) * in2 )),int(0.0)),max(mod(int(1.0),max(i0, mod(i2,min(abs(min(int(4.0), in1)), in1)))), mod(( i1 - int(3.0) ),mod(in1,max(( abs(int(6.0)) - max(int(9.0), int(4.0)) ), mod(int(1.0),in0)))))),int(5.0))))) ) )))),i0) == i0 or ( int(5.0) != ( int(7.0) - ( in0 * abs(abs(mod(in2,abs(int(0.0))))) ) ) and min(min(mod(min(( ( ( ( abs(i0) - int(4.0) ) + ( max(abs(int(4.0)), mod(( divInt(int(0.0),int(2.0)) - ( ( max(int(3.0), ( max(( int(7.0) + i2 ), ( res0 + i2 )) - mod(i1,int(5.0)) )) - in0 ) + i2 ) ),max(abs(divInt(mod(mod(in2,max(int(3.0), i2)),( min(in1, i0) + min(divInt(in1,int(5.0)), min(( ( int(2.0) + min(int(6.0), int(4.0)) ) + ( min(mod(i1,int(0.0)), int(8.0)) + i2 ) ), divInt(abs(( min(min(min(res0, max(abs(i2), abs(in0))), abs(int(0.0))), abs(divInt(abs(int(5.0)),i0))) - res0 )),int(9.0)))) )),int(0.0))), ( int(5.0) * i2 )))) + abs(int(7.0)) ) ) + abs(abs(i1)) ) - min(divInt(int(3.0),in0), int(5.0)) ), int(7.0)),in0), int(1.0)), int(9.0)) \\l abs(abs(min(divInt(mod(( max(in1, min(i0, min(min(in2, int(0.0)), int(1.0)))) - max(int(1.0), divInt(divInt(mod(int(1.0),max(( min(abs(( min(i2, max(( min(int(0.0), ( mod(int(2.0),( max(( int(3.0) + i1 ), ( min(min(i1, ( divInt(abs(int(9.0)),i0) * int(1.0) )), int(8.0)) + int(6.0) )) + in0 )) - int(2.0) )) - i2 ), i0)) * int(3.0) )), ( abs(( abs(min(int(7.0), int(0.0))) + int(1.0) )) + min(min(( mod(( max(in2, min(( min(( i0 - ( int(6.0) + int(3.0) ) ), max(( divInt(int(3.0),int(3.0)) * min(max(int(9.0), int(9.0)), int(7.0)) ), i1)) * int(9.0) ), mod(min(int(9.0), abs(mod(i2,( res0 * int(8.0) )))),( ( max(int(7.0), min(i2, in1)) - min(int(2.0), ( mod(i0,min(min(mod(divInt(( abs(int(4.0)) + ( in1 + mod(int(5.0),i0) ) ),max(( ( ( i2 + int(8.0) ) * int(4.0) ) - int(2.0) ), int(0.0))),in0), int(8.0)), max(max(int(3.0), i1), ( divInt(( min(int(9.0), i2) + ( min(( min(min(in1, ( mod(int(5.0),abs(divInt(int(2.0),( int(0.0) - in2 )))) * int(2.0) )), in2) + max(res0, abs(res0)) ), ( i2 * min(res0, i2) )) * i0 ) ),res0) * max(( int(7.0) + int(6.0) ), ( ( max(( ( i2 + i2 ) + divInt(in2,res0) ), in0) * abs(int(6.0)) ) - i0 )) )))) + min(abs(in2), ( ( ( int(9.0) - max(i1, ( mod(in0,( int(2.0) - in0 )) * in2 )) ) * int(0.0) ) * max(int(1.0), int(2.0)) )) )) ) + i0 )))) - max(int(3.0), i2) ),abs(in2)) * in1 ), int(8.0)), in1) )) * divInt(min(int(6.0), ( abs(in0) + min(in0, i2) )),int(3.0)) ), min(abs(( abs(min(res0, int(5.0))) * in0 )), in1))),abs(int(0.0))),int(6.0))) ),( int(0.0) - ( abs(( res0 * i2 )) + res0 ) )),max(divInt(min(min(int(4.0), i1), ( int(6.0) + in0 )),mod(divInt(max(i2, int(7.0)),abs(int(4.0))),int(1.0))), in0)), max(mod(divInt(min(mod(min(i2, i0),i2), max(( i2 + divInt(( abs(int(6.0)) - max(divInt(i0,( int(7.0) + abs(i0) )), min(( int(0.0) + int(6.0) ), in0)) ),( int(0.0) + int(3.0) )) ), divInt(int(1.0),abs(int(4.0))))),int(7.0)),min(res0, int(5.0))), in2)))) ) ):{:\\ni2 = ( int(6.0) * int(3.0) )\\n:}else:{:\\nloopBreak% = 0\\nwhile in2 \\l int(9.0):{:\\nloopBreak% = 0\\nwhile res0 \\le in1:{:\\ni2 -= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = not not abs(max(mod(( ( in1 - ( abs(in1) + int(3.0) ) ) * int(7.0) ),i2), int(0.0))) \\g ( res0 - i0 )\\n:}\\n:}else:{:\\ni0 -= int(0.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 188, 188, 9, 3, 3, 15, 9, 6, 0, 3, 200, 4, 815, 226, 205, 135, 93]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1, 1], [3, 3, 1, 9], [2], [2], [], [1], [0], [], [], [], [1, 3, 6, 6, 1, 6, 5, 5, 5], [1], [2, 2, 0, 3, 0, 0, 3, 3, 2, 0, 1, 3, 3, 2, 2, 1, 0, 1, 3, 0, 0, 1, 0], [1, 1, 0, 0, 1], [2, 1, 1, 1, 0, 2], [1, 1, 2], [1, 1, 0]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(mod(i1,abs(in0)),res0) == max(max(( res0 - int(3.0) ), max(min(( divInt(int(3.0),i1) - int(1.0) ), abs(res0)), in2)), int(9.0))\\nin2 *= in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 9, 1, 23, 5, 6, 3, 3]}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 1, 2, 0, 1, 1, 0], [1, 1], [1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 6, 4, 8, 3, 4, 9, 5, 0, 7, 8, 1, 3, 6, 6, 8, 6, 6, 2, 3, 7, 7, 5, 6, 2, 9, 4, 2, 5, 2, 4, 4, 4, 4, 8, 4, 1, 5, 5, 7, 3, 9, 9, 1, 1], [5, 2, 3, 0, 3, 2], [1, 1, 2], [1], [1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [3, 2, 2], [], [], [5, 4, 2, 4, 3, 1, 2, 2, 0, 4, 1, 6, 4, 6, 5, 3, 4, 4, 0, 4, 3, 4, 6, 1, 6, 3, 4, 4, 0, 2, 2, 0, 3, 0, 0, 1, 1, 5, 2, 3, 1, 6, 4, 3, 6, 0, 4, 4, 6, 0], [1, 0, 0], [3, 0, 3, 3, 1, 0, 2, 2, 0, 2, 2, 1, 1, 3, 3, 2, 1, 3, 1, 2, 2, 1, 1, 2, 2, 2, 3, 0, 1, 0, 2, 0, 0, 0, 2, 3, 2, 0, 3, 3, 0, 2, 3, 0, 2, 2, 3, 0, 0, 2, 3, 2, 1, 1, 2, 0, 0, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 0, 1, 2, 2, 3, 3, 1, 0, 3, 1, 1, 2, 1, 3, 3, 2, 0, 1, 1, 3, 1, 3, 1, 3, 1, 3, 0, 2, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 0, 3, 0, 0, 0, 2, 0, 3, 0, 2, 2, 2, 3, 3, 0, 2, 2, 0, 0, 0, 0, 1, 3, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 2, 2, 3, 0, 3, 2, 1, 0, 2, 3, 3, 2, 3, 3, 2, 1, 1, 0, 2, 2, 0, 1, 0, 0, 2, 2, 1, 0, 2, 3, 0, 2, 2, 2, 1, 1, 1, 1, 0, 1, 3, 0, 0, 2, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 2, 0, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 2, 1, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 1, 0, 0, 2, 0, 1, 1, 0, 1, 1, 2, 1, 0, 1, 0, 2], [0, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += max(in1, min(abs(int(8.0)), i2))\\nloopBreak% = 0\\nwhile ( mod(in1,mod(( int(1.0) - int(6.0) ),min(abs(( int(4.0) + min(int(8.0), ( mod(int(3.0),int(4.0)) - ( divInt(( abs(in0) + int(9.0) ),i1) * ( i2 - i2 ) ) )) )), i0))) * ( max(mod(in1,max(min(i1, ( min(res0, mod(( max(in1, res0) - ( min(mod(int(5.0),int(0.0)), ( in2 + in0 )) * max(abs(int(7.0)), int(8.0)) ) ),abs(max(abs(abs(int(1.0))), int(3.0))))) * in1 )), int(6.0))), divInt(divInt(min(min(int(6.0), in1), abs(int(8.0))),int(6.0)),divInt(int(6.0),abs(min(mod(i0,int(2.0)), int(3.0)))))) * abs(int(7.0)) ) ) != min(int(7.0), abs(int(5.0))):{:\\nb1 = max(in1, divInt(( in0 * in1 ),res0)) == int(6.0)\\nloopBreak% = 0\\nwhile i1 \\ge int(2.0):{:\\nres0 = mod(int(9.0),int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( not in0 \\l min(in1, in1) or not i0 \\ge ( i2 - min(i2, mod(( mod(abs(min(i0, ( ( in0 * i0 ) * i0 ))),i1) * int(2.0) ),max(( divInt(int(5.0),int(2.0)) - int(4.0) ), int(4.0)))) ) )\\ni1 = max(in2, int(4.0))\\nb2 = int(4.0) == ( divInt(min(i2, max(( int(8.0) * in0 ), mod(max(abs(divInt(max(min(divInt(int(4.0),int(1.0)), i1), ( mod(res0,int(5.0)) - in1 )),in0)), divInt(divInt(int(5.0),res0),( max(i0, mod(mod(divInt(int(7.0),int(3.0)),int(9.0)),int(9.0))) * in1 ))),int(1.0)))),min(in1, res0)) + mod(i0,abs(int(1.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 46, 46, 6, 3, 1, 9, 6, 3, 0, 0, 50, 3, 185, 49, 43, 23, 27]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [0, 1, 1], [1, 1, 1, 1, 1, 1], [2, 8, 0, 8, 8, 3], [3], [2], [], [1], [0], [], [], [], [5, 0, 4, 1, 3, 1, 2], [0, 1], [0, 0, 1, 3, 3, 1, 3, 2, 3, 1, 2, 3, 1, 1, 2, 0, 3, 2, 0, 0, 3, 1], [0, 0, 1, 0], [2, 0, 1, 2, 1, 2, 2], [0, 2, 1, 1], [0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in2 \\ge i0\\nin1 = int(2.0)\\ni1 += abs(min(int(8.0), max(( abs(int(0.0)) * ( max(int(8.0), int(8.0)) - divInt(in0,abs(( i1 - i2 ))) ) ), abs(int(3.0)))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 6, 6, 1, 1, 0, 1, 1, 0, 0, 0, 7, 2, 22, 4, 7, 4, 1]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 7, 4, 6, 0, 8, 5, 9, 9], [4, 0, 4], [0], [0, 0], [0, 0, 1, 1, 1], [0, 0, 0], [3, 3], [], [], [4, 6, 4, 2], [1], [1, 3, 1, 1, 3, 0, 1, 3, 1, 3, 1, 2, 0, 3, 1, 2, 3, 3, 1, 3, 0, 1, 1], [0, 0], [0, 0, 0, 2, 2, 1, 2, 2], [0, 1, 2], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += int(62.0)\\nb0 = ( ( min(int(5.0), int(7.0)) \\le min(res0, int(4.0)) and min(int(6.0), abs(int(0.0))) \\l ( in1 - abs(int(8.0)) ) ) and ( max(abs(int(5.0)), abs(i2)) * int(9.0) ) \\le int(9.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 11, 11, 3, 1, 2, 5, 3, 2, 0, 0, 4, 1, 23, 2, 8, 3, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 3], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 *= in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 0, 1, 0, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 6, 4, 2, 2, 1, 1, 6, 2, 5, 5, 6, 0, 7, 5, 1, 0, 3, 2, 2, 4, 0, 3, 4, 5, 8, 3, 8, 6, 2, 1, 2, 4, 8, 3, 6, 0, 9, 4, 9, 7, 5, 8, 6, 3, 5, 2, 4, 6, 9, 4, 1, 7, 8, 1, 0, 1, 2, 4, 4, 3, 7, 4, 7, 7, 1, 5, 6, 9, 0, 7, 5, 3, 0, 0, 9, 1, 2, 1, 9, 1, 4, 7, 2, 8, 6, 2, 8, 6, 8, 8, 0, 8, 7, 7, 2, 9, 0, 4, 2, 8, 0, 1, 0, 7, 1, 1, 7, 2, 1], [5, 2, 3, 3, 0, 3, 0, 1, 3, 3, 5, 3, 0, 1, 5, 1], [1, 0, 2, 2, 0], [1, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 0], [], [1, 1, 0, 0, 1, 1], [4, 6, 2, 0, 5, 6, 5, 0, 5, 4, 5, 3, 1, 1, 2, 2, 4, 1, 6, 6, 5, 1, 2, 4, 1, 5, 6, 5, 6, 1, 3, 2, 2, 5, 2, 2, 1, 5, 6, 1, 2, 3, 5, 4, 1, 1, 0, 1, 0, 3, 2, 5, 6, 5, 2, 0, 2, 6, 0, 5, 5, 5, 2, 5, 4, 3, 0, 0, 6, 6, 6, 3, 6, 2, 3, 5, 1, 1, 4, 4, 6, 4, 2, 3, 1, 0, 0, 3, 6, 1, 1, 6, 5, 5, 0, 0, 3, 6, 6, 4, 6, 4, 2, 6, 6, 2, 6, 3, 3, 5, 2, 6, 6, 4, 2, 4], [1, 0, 1, 0, 1, 1], [3, 1, 3, 3, 2, 3, 1, 2, 0, 1, 2, 1, 1, 2, 1, 0, 1, 1, 0, 3, 3, 1, 2, 2, 0, 0, 0, 2, 1, 2, 3, 0, 3, 3, 0, 3, 2, 0, 3, 3, 2, 3, 0, 0, 1, 0, 1, 0, 1, 2, 2, 3, 2, 3, 3, 0, 2, 1, 3, 0, 2, 0, 2, 1, 1, 1, 3, 2, 1, 3, 1, 2, 1, 2, 0, 1, 3, 1, 1, 2, 3, 1, 2, 2, 1, 0, 3, 2, 0, 2, 2, 1, 0, 2, 3, 0, 1, 1, 3, 2, 0, 3, 0, 0, 1, 1, 0, 3, 3, 2, 0, 3, 1, 2, 1, 2, 2, 0, 1, 0, 0, 0, 3, 3, 1, 1, 3, 3, 3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 1, 0, 2, 1, 1, 3, 2, 3, 3, 3, 3, 3, 0, 3, 2, 3, 0, 0, 3, 0, 2, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 3, 2, 0, 2, 3, 1, 2, 2, 1, 1, 1, 1, 0, 2, 3, 1, 0, 0, 1, 0, 0, 2, 3, 1, 0, 1, 0, 2, 3, 0, 0, 1, 1, 1, 2, 2, 0, 2, 0, 3, 2, 2, 3, 2, 2, 3, 1, 0, 2, 3, 0, 3, 1, 2, 2, 1, 0, 3, 2, 0, 1, 2, 2, 3, 1, 2, 2, 2, 3, 1, 3, 1, 2, 0, 3, 3, 1, 1, 2, 2, 1, 0, 1, 3, 1, 3, 1, 1, 2, 2, 0, 2, 0, 0, 1, 1, 3, 3, 0, 0, 3, 3, 2, 2, 1, 2, 3, 3, 1, 3, 0, 0, 1, 2, 2, 3, 2, 3, 3, 1, 2, 0, 2, 0, 2, 3, 2, 1, 0, 0, 2, 0, 2, 2, 0, 2, 1, 1, 1, 1, 2, 1, 3, 0, 2, 3, 0, 2, 3, 2, 1, 2, 3, 0, 0, 0, 2, 3, 1, 3, 2, 3, 0, 3, 3, 1, 2, 3, 2, 3, 3, 2, 1, 0, 1, 2, 3, 2, 0, 1, 3, 0, 0, 0, 0, 3, 3, 1, 3, 1, 0, 2, 1, 3, 3, 0, 2, 1, 3, 0, 3, 3, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 3, 3, 3, 1, 2, 3, 3, 3, 2, 1, 0, 1, 0, 2, 3, 2, 2, 2, 1, 2, 0, 1, 1, 3, 1, 3, 0, 1, 1, 3, 0, 3, 0, 1, 3, 3, 0, 0, 2, 2, 3, 0, 2, 2, 3, 3, 0, 1, 1, 0, 3, 2, 0, 1, 0, 0, 0, 2, 1, 0, 3, 2, 1, 0, 0, 1, 3, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [2, 0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 1, 0, 2, 2, 1, 2, 2, 0, 2, 1, 0, 2, 2, 1, 0, 1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 2, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 2, 0, 2, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 2, 0, 1, 2, 1, 2, 2, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 1, 0, 0, 2, 0, 2, 0, 1, 2, 0], [1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 0, 1, 1, 2, 0, 1, 0, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 1, 0, 0, 0, 1, 2, 0, 1, 2, 0, 0, 2, 2, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 2, 1, 0, 0, 1, 1, 1, 1, 2], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 86, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= abs(int(9.0))\\nb1 = min(max(mod(abs(int(6.0)),mod(res0,int(6.0))), ( int(4.0) - int(2.0) )), mod(int(2.0),i2)) != int(1.0)\\nif not int(1.0) == i0:{:\\nb0 = ( ( abs(abs(int(6.0))) \\ge divInt(divInt(in2,res0),in2) or ( int(2.0) - mod(min(i0, max(abs(in2), abs(mod(in1,min(max(( min(in2, in0) - int(5.0) ), i1), int(5.0)))))),i1) ) \\ge int(6.0) ) or divInt(divInt(abs(divInt(abs(max(i2, divInt(int(0.0),abs(i2)))),( in1 + ( int(7.0) + int(5.0) ) ))),int(1.0)),abs(mod(int(0.0),min(int(3.0), divInt(int(2.0),divInt(i1,int(2.0))))))) \\l abs(int(4.0)) )\\n:}else:{:\\nres0 = int(0.0)\\nres0 *= ( max(int(3.0), mod(( int(4.0) * in2 ),min(mod(i1,( ( int(5.0) - i2 ) - ( abs(in1) + int(8.0) ) )), int(3.0)))) - abs(( i1 - max(in2, res0) )) )\\nloopBreak% = 0\\nwhile int(8.0) \\ge int(6.0):{:\\nloopBreak% = 0\\nwhile in2 \\l min(max(divInt(res0,max(int(2.0), ( int(1.0) * divInt(mod(i1,int(2.0)),in0) ))), i2), i2):{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif abs(abs(int(4.0))) \\g int(8.0):{:\\nloopBreak% = 0\\nwhile abs(max(max(in2, i2), mod(min(i2, abs(( ( i1 + int(3.0) ) - in2 ))),( int(6.0) + int(0.0) )))) \\ge min(( abs(abs(max(max(min(res0, abs(( abs(i1) - i2 ))), abs(in0)), mod(int(9.0),in2)))) + in1 ), i1):{:\\nif i1 \\ge int(4.0):{:\\nif int(9.0) != i0:{:\\nloopBreak% = 0\\nwhile i1 \\ge ( max(( i0 * ( min(int(7.0), ( ( int(5.0) * int(8.0) ) * int(6.0) )) * int(3.0) ) ), in0) + ( abs(int(5.0)) + i2 ) ):{:\\nif in2 \\l int(2.0):{:\\nb0 = res0 \\g in2\\n:}else:{:\\ni2 = divInt(max(int(4.0), i0),int(6.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif i2 != ( abs(res0) * i0 ):{:\\nloopBreak% = 0\\nwhile int(9.0) \\g int(4.0):{:\\nin2 *= int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 *= ( mod(in2,( i2 - abs(divInt(mod(min(( divInt(abs(int(7.0)),in2) + ( abs(in1) + max(int(8.0), divInt(( int(1.0) + in0 ),min(( i0 - int(0.0) ), mod(( min(int(1.0), ( ( divInt(abs(int(2.0)),min(int(4.0), ( i0 * min(min(int(4.0), int(3.0)), ( divInt(int(7.0),res0) + int(4.0) )) ))) - max(int(7.0), min(int(7.0), int(1.0))) ) * divInt(mod(res0,divInt(res0,in0)),int(5.0)) )) + int(6.0) ),abs(min(res0, i2)))))) ) ), min(abs(( ( int(9.0) + ( min(max(int(0.0), abs(in0)), in2) * int(7.0) ) ) * mod(mod(min(mod(max(abs(int(5.0)), ( i1 - divInt(i1,divInt(max(( int(3.0) - in1 ), in1),divInt(res0,mod(divInt(in1,divInt(int(0.0),int(0.0))),int(9.0))))) )),int(1.0)), divInt(int(2.0),abs(i2))),( abs(in0) * ( abs(( int(1.0) + ( min(i1, i0) * i0 ) )) - divInt(min(int(9.0), min(mod(abs(in0),min(min(int(1.0), ( max(divInt(min(min(( int(4.0) + res0 ), int(7.0)), ( abs(( i1 - int(2.0) )) + min(i1, res0) )),in2), in2) * abs(max(int(8.0), abs(int(6.0)))) )), i0)), mod(int(2.0),abs(min(i0, divInt(int(8.0),abs(in0))))))),abs(max(int(6.0), divInt(divInt(min(( int(8.0) * ( mod(min(( min(min(min(int(8.0), mod(abs(abs(abs(( int(0.0) - res0 )))),int(8.0))), res0), mod(min(divInt(( divInt(int(7.0),mod(in1,int(7.0))) + int(2.0) ),min(int(9.0), abs(res0))), int(0.0)),int(4.0))) + max(in1, min(i2, int(2.0))) ), min(abs(res0), res0)),divInt(divInt(min(i2, ( divInt(abs(min(res0, int(8.0))),int(0.0)) - in0 )),max(( in0 - int(1.0) ), in2)),i2)) - res0 ) ), ( int(0.0) - res0 )),abs(divInt(int(7.0),in1))),i2)))) ) )),int(1.0)) )), min(int(1.0), int(7.0)))),int(2.0)),int(1.0))) )) * in1 )\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 21, 21, 11, 10, 111, 111, 16, 5, 2, 20, 16, 4, 0, 6, 116, 6, 453, 116, 116, 60, 60]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 1], [0, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 0, 0, 3, 9, 2, 9, 0, 0, 0], [4, 3], [1], [], [1, 0, 1], [0, 0], [1], [1], [0, 1], [3, 1, 0, 3, 1, 0, 2, 2, 0, 2, 5, 6], [1], [1, 2, 1, 0, 2, 0, 3, 3, 1, 1, 1, 3, 2, 0, 3, 3, 1, 0, 2, 2, 0, 3, 3, 0, 3, 3, 0, 0, 1, 3, 3, 1, 3, 2, 3, 0, 0, 2, 1, 1, 3, 0, 1], [1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 1, 0, 2, 1, 2, 0], [0, 1, 1, 1], [1, 0, 1, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(9.0) \\le mod(int(9.0),in0):{:\\nif False:{:\\ni1 += ( i0 - min(min(int(0.0), int(0.0)), int(3.0)) )\\n:}else:{:\\nb1 = min(( in0 - abs(min(int(9.0), i1)) ), divInt(mod(i0,abs(max(i2, max(max(i2, i0), int(2.0))))),min(abs(int(9.0)), max(( abs(i2) - in2 ), divInt(int(0.0),int(0.0)))))) \\ge min(res0, int(0.0))\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 11, 11, 2, 1, 0, 3, 2, 1, 1, 2, 12, 1, 43, 7, 14, 4, 4]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 1, 1, 1], [1, 0, 1, 0], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 0, 2, 7, 6, 5, 6, 2, 4, 4, 2, 8, 8, 7, 6, 8, 8, 4, 5, 7, 0, 9], [5, 5, 0, 3], [1, 1], [], [0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0], [2, 2, 1, 1], [0, 0], [0, 1], [3, 5, 4, 0, 5, 4, 3, 5, 6, 4, 2, 0, 4, 1, 4, 6, 4, 0, 3, 3, 2, 0, 2, 1, 0, 5], [1], [1, 3, 3, 1, 3, 1, 3, 0, 0, 3, 1, 1, 3, 3, 0, 2, 2, 1, 2, 3, 1, 3, 2, 0, 1, 3, 3, 0, 2, 0, 3, 2, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 3, 1, 2, 1, 3, 0, 0, 2, 0, 0, 2, 0, 3, 1, 0, 0, 0, 3, 1, 0, 1, 0, 1, 2, 2, 2, 3, 0, 1, 2, 3, 3, 3, 1, 0, 0, 2, 0, 3, 1, 3, 3, 3, 2, 1, 0, 0, 0, 3, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 2, 0, 1, 2, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 1, 2, 2, 2, 0, 2, 0, 0], [1, 0, 2, 1, 0, 2, 0, 2, 0, 2, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not int(0.0) != min(min(int(7.0), min(int(0.0), abs(in0))), in2):{:\\nif True:{:\\nloopBreak% = 0\\nwhile min(int(2.0), int(7.0)) != max(abs(in1), ( divInt(int(6.0),divInt(max(int(5.0), max(( i0 - int(6.0) ), min(abs(in2), ( in1 + min(mod(in0,( ( divInt(divInt(int(2.0),mod(int(4.0),( int(4.0) * int(2.0) ))),min(int(8.0), ( int(8.0) - max(in2, res0) ))) + ( in1 * i2 ) ) + mod(i0,min(int(7.0), in1)) )), i1) )))),in1)) * min(int(6.0), res0) )):{:\\nif int(8.0) \\l in1:{:\\ni0 += int(8.0)\\n:}else:{:\\nb1 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = divInt(mod(( min(in0, int(4.0)) * ( max(abs(abs(int(5.0))), in0) - i2 ) ),( i0 + abs(int(7.0)) )),min(abs(min(divInt(int(0.0),i2), i1)), i0)) \\ge min(in2, int(9.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 23, 23, 4, 2, 0, 8, 4, 4, 2, 2, 26, 1, 94, 21, 25, 12, 10]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1], [4, 3], [], [], [], [], [], [], [], [], [6, 4], [0, 1], [1, 1], [], [], [2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(4.0)\\nin1 *= int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 992, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 2, 0, 2, 1, 0, 0], [0, 1], [0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 8, 6, 7, 4, 3, 6, 2, 0, 7, 7, 8, 0, 3, 5, 8, 1, 5, 7, 5, 4, 4, 4, 3, 6, 5, 7, 9, 5, 4, 2, 7, 5, 4, 7, 0, 1, 4, 0, 8, 8, 1, 5, 3, 3, 7, 0, 2, 4, 9, 7, 3, 9, 5, 4, 2, 8, 9, 7, 8, 9, 7, 1, 8, 1, 7, 6, 1, 9, 1, 5, 5, 2, 6, 1, 3, 1, 6, 7, 3, 8, 0, 8, 0], [5, 4, 1, 3, 4], [1, 0, 1, 0, 2, 0], [], [1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0], [1], [1], [4, 0, 1, 5, 3, 6, 4, 2, 3, 1, 0, 4, 0, 4, 6, 5, 3, 3, 3, 6, 0, 4, 1, 6, 1, 3, 1, 5, 3, 1, 5, 1, 0, 1, 1, 1, 1, 3, 0, 4, 4, 5, 1, 3, 3, 0, 1, 6, 3, 1, 5, 4, 1, 3, 6, 5, 5, 6, 0, 2, 5, 4, 6, 6, 6, 6, 1, 6, 2, 2, 2, 4, 3, 6, 3, 4, 5, 1, 4, 2, 3, 4, 2, 0], [1], [0, 1, 3, 2, 3, 2, 0, 2, 3, 2, 2, 1, 1, 2, 3, 0, 0, 1, 3, 0, 3, 0, 2, 1, 2, 0, 2, 3, 3, 0, 3, 0, 0, 2, 3, 0, 2, 2, 3, 2, 3, 3, 3, 3, 0, 2, 3, 2, 3, 1, 2, 0, 3, 3, 1, 1, 3, 2, 3, 0, 1, 1, 3, 1, 0, 3, 1, 3, 2, 0, 3, 2, 3, 3, 2, 1, 3, 0, 2, 0, 0, 1, 2, 0, 1, 1, 2, 0, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 2, 2, 2, 1, 1, 0, 1, 3, 2, 0, 3, 0, 3, 0, 1, 2, 0, 2, 3, 2, 3, 3, 0, 1, 1, 0, 1, 3, 1, 0, 0, 1, 2, 1, 3, 2, 1, 0, 2, 3, 3, 3, 1, 3, 2, 3, 3, 0, 2, 1, 3, 3, 0, 0, 0, 3, 2, 0, 1, 3, 1, 0, 1, 1, 0, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 2, 1, 2, 1, 0, 1, 3, 1, 2, 0, 2, 3, 0, 3, 3, 0, 0, 0, 2, 0, 2, 0, 2, 3, 2, 2, 3, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 2, 0, 2, 3, 2, 2, 1, 3, 0, 0, 1, 1, 2, 2, 0, 2, 0, 3, 1, 2, 1, 2, 1, 0, 2, 0, 3, 3, 2, 0, 2, 1, 0, 2, 3, 1, 3, 2, 0, 2, 2, 2, 1, 3, 2, 3, 2, 1, 3, 2, 1, 0, 2, 2, 3, 0, 0, 2, 3, 0, 2, 2, 1, 2, 2, 1, 2, 3, 2, 1, 0, 3, 3, 2, 3, 2, 2, 1, 0, 3, 3, 3, 0, 0, 1, 1, 0, 2, 2, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 1, 2, 0, 0, 2, 2, 0, 2, 3, 3, 1, 1, 0, 0, 0, 2, 2, 3, 3, 2, 3, 3, 1, 0, 0, 1, 1, 1, 3, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 2, 1, 0, 1, 2, 0, 1, 2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 0, 1, 2, 1, 0, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 2, 2, 0, 0, 1, 2, 0, 1, 2, 1, 1, 2, 2, 1, 2, 1, 0, 0, 1, 2, 1, 1, 0, 1, 2], [1, 1, 1, 0, 2, 0, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in1 != int(6.0)\\ni0 -= max(( abs(mod(i1,( max(divInt(( int(0.0) - int(8.0) ),mod(min(in2, in0),int(6.0))), max(res0, min(in1, ( int(7.0) - ( i2 + ( max(min(in0, min(i1, i0)), divInt(min(in1, divInt(divInt(min(( max(max(max(abs(i0), mod(max(( abs(int(4.0)) * ( in1 + abs(max(int(3.0), int(6.0))) ) ), min(divInt(max(res0, int(2.0)),int(0.0)), abs(int(7.0)))),in2)), min(int(7.0), max(mod(in0,abs(mod(abs(min(mod(int(8.0),min(in0, ( in0 - res0 ))), int(0.0))),( i0 - int(3.0) )))), int(5.0)))), divInt(in1,divInt(i1,divInt(max(abs(max(res0, ( abs(int(8.0)) - ( ( ( int(1.0) + int(5.0) ) - i1 ) + int(7.0) ) ))), min(mod(in0,min(i1, min(in2, int(5.0)))), divInt(in0,( min(divInt(max(abs(i1), int(4.0)),int(4.0)), in2) * int(4.0) )))),max(int(3.0), i1))))) * i0 ), int(6.0)),mod(int(5.0),min(( int(7.0) - i1 ), ( abs(abs(min(int(9.0), min(mod(max(abs(i1), divInt(int(5.0),abs(abs(i1)))),i1), in0)))) - min(( i0 * int(4.0) ), abs(int(2.0))) )))),in1)),int(7.0))) + int(5.0) ) ) )))) * in1 ))) * divInt(int(4.0),mod(abs(mod(int(7.0),int(0.0))),( max(( max(abs(( int(1.0) + divInt(int(4.0),in2) )), int(0.0)) * min(int(8.0), mod(i1,mod(abs(in0),abs(max(in0, i0))))) ), i1) * ( res0 - divInt(in0,mod(max(mod(( min(int(8.0), int(1.0)) * max(int(5.0), int(3.0)) ),i1), int(3.0)),int(7.0))) ) ))) ), in2)\\nif in1 \\le divInt(i1,divInt(min(( divInt(int(0.0),min(in0, res0)) - int(2.0) ), int(4.0)),divInt(divInt(in2,( in2 + abs(int(9.0)) )),mod(int(7.0),divInt(int(3.0),res0))))):{:\\nb0 = divInt(i0,abs(min(( i2 + mod(int(9.0),in2) ), mod(min(int(5.0), max(( in1 + ( ( ( int(4.0) - abs(mod(min(mod(int(2.0),max(( int(8.0) - res0 ), ( mod(abs(res0),res0) - ( max(res0, mod(( int(9.0) - divInt(divInt(int(7.0),divInt(max(divInt(int(8.0),i1), abs(abs(divInt(max(( divInt(int(9.0),res0) * abs(max(min(i2, i2), int(7.0))) ), int(1.0)),i2)))),( ( int(8.0) - int(1.0) ) * int(7.0) ))),int(6.0)) ),mod(int(1.0),in1))) + int(9.0) ) ))), int(1.0)),int(5.0))) ) - int(5.0) ) - int(2.0) ) ), int(6.0))),( min(int(1.0), mod(divInt(in0,res0),in0)) + int(3.0) ))))) \\g divInt(in1,in2)\\nloopBreak% = 0\\nwhile mod(mod(i1,mod(max(abs(int(1.0)), int(6.0)),in1)),i2) \\ge in0:{:\\nb1 = divInt(divInt(max(max(divInt(min(max(int(7.0), in1), i2),int(3.0)), int(8.0)), int(0.0)),abs(int(8.0))),int(0.0)) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = False\\nb2 = b0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 85, 85, 5, 6, 0, 7, 5, 2, 1, 1, 84, 1, 354, 98, 88, 40, 59]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [6, 0], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [0, 1], [5, 3], [5], [2], [], [1], [0], [], [], [], [4, 6, 3, 4], [1], [0, 3, 0, 0, 1], [], [0], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += res0\\nb2 = min(in0, in1) != int(53.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 5, 0, 1, 1, 0]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 1], [0, 0, 0], [0, 0], [1, 1, 1], [4, 1, 6], [5, 0], [2, 2, 2], [], [1, 1, 0, 0, 0], [0, 0], [0, 1, 1], [1, 0], [1, 0, 0], [6, 6, 0, 2, 1], [], [1, 0, 0, 2, 2, 0, 2, 3, 1, 0, 0, 1], [0, 0, 1], [1], [1, 0], [1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(4.0) != res0:{:\\nif res0 \\l ( ( i0 - mod(max(int(1.0), i2),i1) ) + int(6.0) ):{:\\nif b2:{:\\nb2 = False\\n:}\\n:}\\n:}else:{:\\nb2 = True\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 3, 3, 2, 3, 0, 5, 2, 3, 2, 3, 5, 0, 12, 3, 1, 2, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [2], [2], [], [1], [0], [], [], [], [3, 0, 5], [], [2, 0, 0, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(in0,i0) == in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 2, 2, 0, 0, 1, 1, 0], [0, 1], [0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 9, 5, 7, 0, 1, 5, 5, 9, 9, 8, 8, 1, 2, 8, 7, 0, 2, 1, 9, 1, 0, 8, 2, 5], [2, 4, 5], [2, 0, 2, 2], [], [1, 1, 0, 1, 0], [0, 0, 0], [0, 1], [1], [1], [5, 0, 3, 5, 5, 1, 2, 2, 3, 5, 1, 5, 3, 5, 0, 3, 6, 6, 6, 3, 6, 5, 6, 3, 3], [1, 1, 1, 1], [1, 0, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 2, 2, 0, 1, 2, 3, 3, 3, 0, 1, 2, 0, 2, 0, 3, 1, 1, 3, 1, 1, 1, 2, 1, 0, 0, 2, 3, 3, 1, 2, 0, 2, 2, 2, 3, 2, 3, 2, 3, 1, 0, 1, 3, 1, 1, 3, 3, 0, 0, 1, 1, 0, 3, 2, 2, 2, 0, 1, 1, 3, 0, 1, 0, 3, 0, 2, 0, 0, 0, 1, 1, 0, 2, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 2, 2, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 0, 2], [1, 1, 1, 0, 0, 0, 2, 0, 2, 1, 0, 0, 2, 1, 0, 1, 0, 1, 2], [0, 1, 0, 0, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(3.0) == in2\\ni0 -= ( ( int(0.0) - ( divInt(mod(int(9.0),max(int(5.0), divInt(( divInt(in0,int(7.0)) - ( max(abs(abs(in2)), int(0.0)) + ( in2 + ( i1 + min(int(1.0), int(5.0)) ) ) ) ),max(int(5.0), int(9.0))))),int(9.0)) * ( int(8.0) + i2 ) ) ) * i2 )\\nif mod(min(max(int(8.0), ( in0 - mod(( ( min(divInt(max(( max(int(1.0), in2) + int(2.0) ), max(int(8.0), int(7.0))),min(max(i1, in2), int(0.0))), int(2.0)) + in0 ) * abs(( divInt(( in2 - int(1.0) ),int(9.0)) + min(i0, int(1.0)) )) ),in0) )), abs(res0)),divInt(res0,res0)) \\le in0:{:\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = int(0.0) != int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\n:}else:{:\\nres0 -= in2\\n:}\\nres0 += ( in0 - int(2.0) )\\nin0 *= int(5.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 9, 9, 2, 7, 26, 26, 3, 4, 0, 5, 3, 2, 1, 1, 25, 4, 88, 24, 17, 19, 9]}, {"genotype": [[0], [0, 1, 1, 1], [0, 2, 2, 1], [1, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 9, 6, 7, 7, 4, 6, 4, 2], [2, 3, 2], [0], [0], [1, 1, 0, 0, 1], [0, 0, 0], [3, 1], [0], [0], [6, 3, 2, 5, 2, 1, 4, 0, 4, 2], [1], [2, 1, 3, 1, 3, 3, 0, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 2, 3, 0, 1, 3, 2, 0, 0, 2, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1, 0, 1], [1, 1, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(3.0) + min(int(7.0), max(max(res0, int(9.0)), ( mod(int(6.0),int(7.0)) - in0 ))) ) == mod(int(7.0),int(4.0))\\nloopBreak% = 0\\nwhile i2 \\ge divInt(min(in2, int(6.0)),min(( i2 - i1 ), ( in1 + int(4.0) ))):{:\\nif ( True and int(2.0) == i0 ):{:\\nin1 -= i2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 10, 10, 3, 1, 1, 5, 3, 2, 1, 1, 10, 1, 31, 7, 5, 5, 3]}, {"genotype": [[0], [1], [0], [], [0], [], [], [5], [1], [], [1], [0], [], [], [], [3, 4], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in0 != in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [7], [], [], [], [], [], [], [], [], [5, 2], [0], [3, 0, 1], [], [0], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = min(i2, int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 5], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 2, 2, 2, 1, 0], [1, 0, 1], [1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 0, 0, 3, 0, 5, 1, 8, 3, 5, 9, 1, 5, 5, 6, 0, 7, 8, 3, 0, 2, 9, 7, 7, 5, 4, 3, 3, 4, 7, 4, 3, 3, 2, 3, 3, 3, 6, 9, 1, 6, 4, 7, 9], [0, 3, 1, 1, 1], [1, 0, 0, 1], [], [0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [1, 1], [1, 0], [0], [5, 2, 2, 5, 5, 6, 5, 3, 3, 3, 3, 0, 3, 2, 0, 2, 1, 0, 5, 1, 0, 0, 1, 4, 1, 4, 0, 4, 6, 1, 5, 1, 6, 0, 2, 4], [0], [0, 1, 2, 1, 1, 3, 1, 0, 0, 3, 3, 2, 3, 1, 2, 0, 1, 2, 2, 1, 0, 0, 0, 1, 3, 0, 2, 1, 2, 2, 0, 0, 2, 2, 0, 3, 1, 0, 1, 3, 3, 2, 1, 3, 2, 0, 2, 1, 0, 3, 1, 1, 2, 1, 1, 3, 1, 2, 0, 1, 2, 2, 2, 2, 3, 1, 0, 1, 3, 2, 2, 3, 1, 0, 2, 0, 2, 0, 3, 2, 3, 3, 1, 0, 2, 0, 3, 1, 2, 0, 2, 2, 1, 1, 1, 2, 2, 0, 3, 2, 1, 3, 0, 2, 3, 2, 2, 1, 1, 3, 0, 2, 1, 1, 3, 2, 2, 2, 1, 3, 3, 0, 0, 1, 3, 3, 3, 1, 3, 1, 0, 3, 3, 1, 3, 0, 1, 2, 1, 3, 3, 2, 1, 3, 3, 2, 3, 1, 1, 0, 3, 0, 1, 3, 2, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 2, 1, 1, 0, 2, 0, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 0, 2, 0], [1, 1, 2, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i2\\nb1 = False\\nb0 = int(7.0) \\l divInt(int(3.0),int(0.0))\\nloopBreak% = 0\\nwhile max(int(0.0), i2) \\ge in2:{:\\nif True:{:\\nloopBreak% = 0\\nwhile min(abs(( min(int(3.0), ( in2 - int(0.0) )) - ( ( int(5.0) * res0 ) * in2 ) )), in0) \\g int(1.0):{:\\nb0 = max(in0, ( int(8.0) + mod(( in0 + in0 ),mod(( i0 * min(int(3.0), in0) ),int(5.0))) )) \\g min(min(divInt(int(9.0),abs(( i2 + ( int(1.0) + i0 ) ))), min(int(5.0), int(5.0))), ( int(6.0) - int(0.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = min(int(7.0), mod(i2,int(8.0))) \\g ( ( divInt(divInt(max(int(3.0), i1),int(0.0)),max(( ( min(int(2.0), i0) + ( in2 + mod(i1,abs(divInt(min(min(int(9.0), i0), mod(i0,min(int(7.0), divInt(i1,mod(mod(int(7.0),int(5.0)),int(4.0)))))),mod(( in1 + min(( int(3.0) - abs(i1) ), divInt(max(( mod(int(3.0),int(4.0)) - max(in1, ( int(7.0) - int(4.0) )) ), min(mod(divInt(( int(3.0) - abs(min(i0, in1)) ),int(3.0)),abs(abs(max(int(2.0), abs(int(3.0)))))), res0)),max(max(int(3.0), abs(i1)), int(3.0)))) ),mod(int(6.0),max(abs(divInt(int(9.0),max(abs(( min(int(1.0), int(6.0)) + in2 )), abs(i1)))), int(4.0))))))) ) ) * min(( res0 + i0 ), int(7.0)) ), i2)) + int(9.0) ) - in1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 45, 45, 5, 4, 0, 7, 5, 2, 2, 1, 36, 1, 161, 42, 39, 22, 20]}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 1, 2, 2, 0], [0, 0, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 4, 2, 2, 5, 6, 1, 0, 5, 6, 1, 0, 5, 9, 9, 6, 3, 0, 9, 0, 8, 9], [2, 4, 2, 1, 0, 3], [0], [0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0], [3, 3, 1, 2, 3, 2], [0], [1, 0], [5, 4, 5, 6, 1, 0, 3, 0, 4, 1, 3, 1, 1, 1, 2, 0, 3, 6, 5, 4], [0], [0, 1, 1, 3, 3, 1, 1, 2, 0, 3, 3, 0, 2, 0, 1, 2, 2, 1, 2, 1, 2, 3, 0, 2, 0, 0, 1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 3, 3, 1, 3, 0, 0, 2, 3, 1, 3, 3, 1, 3, 0, 3, 3, 3, 1, 3, 0, 2, 3, 1, 0, 2, 0, 3, 2, 3, 3, 1, 1, 2, 1, 1, 0, 2, 0, 2, 1, 1, 1, 3, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [2, 0, 0, 2, 1, 0, 2, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1], [1, 1, 0, 0, 2, 1, 2, 0, 2, 0, 2, 2, 2, 2, 1], [1, 0, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 == int(0.0):{:\\nb0 = ( ( int(4.0) \\le abs(min(int(4.0), int(2.0))) and True ) or not ( ( in1 - min(abs(in2), ( res0 - int(2.0) )) ) == ( mod(int(5.0),( int(6.0) + divInt(max(i1, ( i0 + in0 )),int(1.0)) )) * ( ( mod(int(0.0),( int(5.0) - ( i0 * in1 ) )) + i1 ) * min(abs(int(6.0)), min(in0, i1)) ) ) or ( abs(int(1.0)) + abs(max(int(0.0), abs(i1))) ) \\g abs(abs(abs(int(5.0)))) ) )\\n:}else:{:\\nif min(i1, ( abs(int(9.0)) * i2 )) \\l ( i0 * abs(( max(min(int(9.0), int(6.0)), mod(int(3.0),int(0.0))) * in0 )) ):{:\\nloopBreak% = 0\\nwhile not ( res0 * ( int(9.0) - int(0.0) ) ) \\ge int(8.0):{:\\nin2 = max(int(9.0), in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 23, 23, 6, 1, 3, 12, 6, 6, 1, 2, 20, 1, 82, 19, 21, 15, 4]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 1, 1, 2, 1, 0, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 0, 1, 1, 2, 1, 2, 2, 2, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 0, 0, 4, 7, 8, 6, 3, 1, 1, 6, 0, 7, 1, 8, 8, 5, 1, 0, 1, 4, 5, 7, 6, 1, 1, 2, 6, 0, 2, 7, 8, 7, 0, 7, 6, 5, 6, 2, 8, 6, 6, 0, 1, 0, 5, 6, 7, 6, 8, 6, 9, 1, 8, 2, 8, 3, 2, 3, 8, 5, 3, 8, 6, 5, 9, 7, 5, 8, 9, 8, 6, 8, 4], [3, 1, 0, 1, 2, 2, 4, 2, 1, 2, 0, 2], [2, 1, 2, 2, 0, 1, 0, 2], [], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0], [3, 4, 2, 6, 2, 3, 5, 6, 4, 4, 2, 3, 4, 3, 3, 6, 3, 1, 6, 6, 0, 6, 1, 3, 1, 5, 6, 2, 6, 0, 4, 5, 1, 5, 4, 6, 4, 1, 4, 6, 5, 1, 5, 1, 2, 5, 6, 0, 1, 3, 3, 0, 0, 6, 1, 1, 2, 6, 2, 2, 2, 2, 0, 4, 2, 2, 4, 1, 1, 4, 4, 3], [0, 0, 0, 1, 1, 1, 0, 0, 1], [1, 1, 1, 3, 0, 1, 3, 1, 2, 2, 0, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 3, 3, 2, 0, 1, 0, 0, 2, 3, 3, 0, 1, 1, 1, 0, 3, 0, 0, 0, 2, 1, 2, 1, 1, 0, 3, 3, 1, 1, 3, 2, 3, 3, 1, 3, 3, 3, 2, 3, 0, 3, 1, 1, 3, 3, 0, 1, 3, 1, 1, 1, 3, 3, 3, 1, 0, 2, 1, 3, 3, 3, 2, 1, 2, 0, 2, 2, 0, 2, 0, 2, 1, 0, 0, 3, 2, 2, 1, 3, 2, 2, 0, 2, 0, 0, 2, 1, 2, 3, 1, 0, 0, 2, 3, 0, 1, 0, 0, 3, 2, 0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 0, 0, 3, 0, 3, 0, 2, 3, 1, 2, 3, 3, 0, 1, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 1, 3, 2, 0, 0, 2, 1, 2, 1, 3, 3, 2, 2, 3, 0, 1, 1, 3, 2, 1, 3, 2, 2, 1, 2, 1, 3, 1, 3, 0, 3, 3, 1, 1, 3, 0, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 0, 3, 2, 1, 3, 0, 0, 0, 3, 2, 2, 1, 0, 2, 3, 3, 1, 1, 1, 3, 3, 1, 0, 1, 0, 1, 0, 3, 3, 1, 2, 1, 2, 3, 1, 3, 0, 0, 1, 1, 2, 3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 0, 1, 0, 3, 0, 2, 2, 2, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 0, 0, 0, 2, 0, 0, 1, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 2, 2, 2, 0, 1, 0, 0, 1, 2, 2, 0, 1, 0, 2, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 1, 2, 2, 0, 0, 2, 2, 0, 1, 2, 2, 0, 1], [2, 2, 1, 0, 0, 0, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 1, 0, 2, 2, 0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(9.0)\\nloopBreak% = 0\\nwhile False:{:\\nin1 = int(2.0)\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(0.0) \\ge abs(i2):{:\\nb1 = int(0.0) \\g abs(int(4.0))\\nb2 = False\\n:}else:{:\\nres0 = ( ( i2 * mod(min(in0, int(7.0)),int(8.0)) ) * divInt(min(min(min(int(6.0), ( abs(min(( in2 - int(3.0) ), res0)) + in1 )), mod(min(max(in1, int(1.0)), int(1.0)),int(6.0))), i2),abs(in0)) )\\n:}\\nloopBreak% = 0\\nwhile in1 \\l in0:{:\\nin0 += ( int(0.0) + ( int(7.0) + int(1.0) ) )\\nif res0 \\g max(min(int(8.0), int(8.0)), abs(divInt(max(max(int(5.0), abs(max(abs(divInt(max(in0, min(int(1.0), int(0.0))),max(min(i1, int(1.0)), max(int(4.0), int(5.0))))), int(7.0)))), max(min(abs(int(6.0)), res0), ( int(1.0) + abs(abs(min(( int(1.0) * mod(res0,( ( i0 * divInt(res0,divInt(int(2.0),i1)) ) + in0 )) ), min(( mod(int(6.0),max(( ( i1 - ( in2 - res0 ) ) + ( int(0.0) - divInt(abs(int(2.0)),i2) ) ), res0)) - mod(max(i0, int(7.0)),in1) ), in2)))) ))),abs(( i1 + mod(( in2 + in1 ),int(8.0)) ))))):{:\\nif False:{:\\nif int(7.0) == int(0.0):{:\\nres0 *= int(7.0)\\n:}else:{:\\nif in1 == i1:{:\\nb2 = abs(abs(in1)) \\le res0\\n:}\\n:}\\n:}\\n:}else:{:\\nin2 *= abs(i1)\\n:}\\nin2 = min(i1, ( max(int(6.0), ( min(min(i2, int(5.0)), max(int(6.0), in2)) * int(2.0) )) * mod(res0,divInt(int(8.0),i0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nif int(6.0) == int(6.0):{:\\nb0 = b1\\n:}\\ni1 = abs(( in0 + in0 ))\\nb0 = not False\\nif True:{:\\ni0 += ( int(0.0) + ( int(1.0) + abs(min(( mod(max(i0, int(0.0)),int(5.0)) - min(( int(6.0) - abs(( mod(int(7.0),divInt(int(6.0),min(int(8.0), abs(res0)))) - min(max(int(6.0), int(9.0)), max(i1, max(max(( i1 * i2 ), mod(divInt(( int(1.0) * int(8.0) ),res0),min(mod(int(2.0),min(i2, i2)), i2))), abs(( ( int(8.0) - i2 ) + ( max(abs(int(3.0)), int(2.0)) * int(3.0) ) ))))) )) ), abs(min(int(8.0), i0))) ), int(5.0))) ) )\\n:}else:{:\\nif in1 \\g int(3.0):{:\\nloopBreak% = 0\\nwhile i2 == min(abs(int(8.0)), ( int(6.0) * ( abs(int(5.0)) + min(i2, in1) ) )):{:\\nloopBreak% = 0\\nwhile int(9.0) \\l int(7.0):{:\\nb2 = divInt(max(int(5.0), mod(int(8.0),divInt(abs(mod(abs(min(int(9.0), i1)),int(8.0))),i1))),max(in1, mod(divInt(divInt(int(6.0),in1),int(8.0)),int(4.0)))) == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 29, 29, 13, 16, 75, 75, 12, 8, 0, 21, 12, 9, 7, 8, 72, 9, 269, 59, 72, 36, 27]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 0, 1, 1, 1], [0, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 9, 8, 3, 4, 8, 8, 3, 5, 3, 9, 4, 6, 8, 4, 7, 3, 3, 5, 8, 1], [5, 4, 3, 5, 2], [2, 1, 2, 1], [0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [2, 1, 1, 1, 1, 2, 3], [0, 0, 0, 1], [0, 1], [5, 3, 5, 3, 0, 2, 0, 5, 6, 4, 3, 2, 4, 6, 5, 6, 3, 3, 0, 1, 3, 0, 0, 4, 2, 2, 0, 5, 0, 0, 0, 4, 5, 6], [1], [1, 2, 2, 2, 3, 3, 1, 3, 3, 1, 3, 2, 0, 2, 2, 0, 1, 0, 3, 1, 1, 2, 3, 0, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 2, 2, 2, 3, 3, 3, 1, 3, 3, 2, 3, 0, 2, 0, 3, 2, 2, 2, 2, 3, 3, 0, 3, 1, 0, 1, 0, 1, 0, 3, 1, 2, 0, 0, 0, 0, 0, 3, 3, 2, 1, 3, 1, 1, 2, 3, 0, 1, 2, 0, 2, 0, 1, 1, 0, 0, 2, 3, 0, 3, 0, 0, 1, 2, 0, 2, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [2, 0, 0, 0, 1, 1, 0, 2, 1, 2, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 1, 1, 2, 2], [2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 0, 0, 2, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not int(8.0) != ( divInt(mod(abs(min(int(2.0), min(min(int(9.0), max(mod(in2,mod(( in0 * int(8.0) ),in2)), max(int(3.0), int(4.0)))), ( min(in0, int(8.0)) + ( i0 * int(8.0) ) )))),i2),i0) + int(3.0) )\\nif in2 \\le ( res0 + mod(in1,in0) ):{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile True:{:\\nif ( divInt(( abs(max(abs(int(5.0)), min(max(( min(i2, divInt(in1,min(divInt(( ( ( min(abs(res0), max(int(3.0), in2)) + int(9.0) ) * res0 ) - int(4.0) ),in0), abs(int(6.0))))) - divInt(in0,i0) ), i1), in0))) * i0 ),min(max(( int(8.0) + max(int(4.0), int(7.0)) ), mod(max(i0, int(3.0)),( in1 + divInt(i2,int(3.0)) ))), int(5.0))) * i2 ) \\ge i0:{:\\nb1 = True\\n:}else:{:\\nb2 = False\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 += divInt(abs(i0),abs(i0))\\nb1 = not ( i0 != int(8.0) and divInt(in1,( int(1.0) + in2 )) == res0 )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 22, 22, 5, 4, 1, 12, 5, 7, 4, 2, 34, 1, 106, 27, 24, 15, 13]}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 1, 0], [1], [1, 0, 1], [1, 1], [8, 6], [1], [1, 2], [], [0, 0, 1], [0], [2, 0], [], [], [0, 5, 2, 3, 2, 6, 6, 1, 3, 2, 5, 5, 2], [0, 1], [0, 0, 3, 2, 0, 2, 3, 3, 2, 0, 0, 2, 0, 0, 2, 2, 1, 2, 0, 0, 3, 1, 0, 3, 0], [1, 1, 0, 1, 1, 0, 1], [2, 2, 0, 0, 2], [1, 1, 1], [1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not b1:{:\\ni0 = in2\\nb2 = i2 \\g abs(mod(in0,divInt(abs(min(( i2 - res0 ), mod(res0,i1))),divInt(( int(8.0) - mod(in0,i2) ),min(int(6.0), in2)))))\\nin2 -= abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 2, 2, 1, 2, 0, 3, 1, 2, 0, 0, 13, 2, 25, 7, 5, 3, 5]}, {"genotype": [[0], [1], [0], [], [1], [1], [2], [], [], [], [], [], [], [], [], [4, 0, 2, 5, 6, 1, 2], [1], [3, 3, 2, 0, 0, 2, 2, 0, 0, 0, 3, 3, 0, 1], [0, 1, 0], [0, 0, 2, 0], [0, 1, 1], [0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += min(min(( i0 - i2 ), divInt(( in2 - res0 ),i1)), abs(min(i2, int(2.0))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 14, 3, 4, 3, 1]}, {"genotype": [[0], [1], [0], [], [0], [1], [2], [1], [0], [], [1], [0], [], [], [], [3, 5], [], [3, 1, 0, 0], [], [1], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(int(2.0), in0) \\g in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [1], [5], [], [], [], [], [], [], [], [], [5, 4, 4, 5, 1], [1, 0], [2, 1, 2, 0, 0, 0], [0, 0], [], [1, 2, 0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= ( int(5.0) * ( in1 + in1 ) )\\nin2 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 6, 2, 0, 3, 0]}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [1], [0, 0], [1, 1, 1, 1, 1], [2, 8, 2, 2, 2], [4, 2], [0, 2], [], [1, 1, 0, 0], [0, 0], [2, 1], [1], [], [3, 6], [], [2, 1, 2, 1, 1, 1, 0, 2, 3, 1, 0], [0, 0, 0], [2], [1, 0, 1], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( int(2.0) - ( int(8.0) + int(2.0) ) ) \\le int(2.0)\\nloopBreak% = 0\\nwhile in0 == ( abs(int(2.0)) - res0 ):{:\\nb2 = not False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 5, 5, 2, 2, 0, 4, 2, 2, 1, 0, 2, 0, 11, 3, 1, 3, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 0, 1, 0], [0, 1], [0, 1, 0], [1, 1, 1, 1, 1], [3, 8, 7, 7, 6], [1, 5], [2, 2, 0, 2], [0], [0, 0, 0, 1, 0, 1], [0, 0], [1, 0, 3, 0], [0], [0], [2, 4, 1, 5, 6, 0, 6, 2], [1], [1, 0, 3, 3, 2, 2, 0, 2, 0, 3, 3, 0, 1, 2, 0, 3, 0, 1, 1, 0, 1], [1, 1, 1, 1], [0, 0, 2, 1, 2], [0], [1, 0, 1, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb2 = ( int(3.0) \\g i2 and b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 += min(min(mod(divInt(i1,mod(in2,abs(max(res0, int(8.0))))),mod(i0,abs(res0))), int(7.0)), int(7.0))\\nb2 = i2 != int(6.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 5, 5, 2, 4, 1, 6, 2, 4, 1, 1, 8, 1, 21, 4, 5, 1, 4]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1], [2, 2, 2, 2, 1, 1, 0], [0, 1, 0, 1], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 4, 0, 6, 6, 2, 5, 7, 6, 3, 4, 1, 7, 2, 0, 8, 6], [1, 1, 0, 0], [2, 2, 0, 2], [0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0], [2, 0, 3, 1, 2, 0], [1], [0, 1], [0, 3, 1, 3, 0, 6, 6, 4, 3, 4, 4, 6, 0, 3, 0, 1, 2, 6, 1, 4, 0, 5, 5, 0], [1], [2, 0, 0, 2, 1, 3, 3, 2, 2, 2, 0, 2, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 3, 1, 2, 1, 0, 2, 2, 1, 0, 3, 2, 3, 0, 0, 3, 1, 0, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 1, 2, 1, 3, 1, 2, 0, 2, 0, 0, 2, 2, 0, 0, 2, 3, 1, 2, 0, 0, 3, 3, 3, 0, 2, 2, 3, 1, 1, 0, 2, 3, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [2, 0, 2, 1, 2, 0, 2, 2, 1, 2, 2, 2, 0, 1, 0, 2, 1, 1, 2, 2, 2], [0, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 0, 0, 2, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not b2:{:\\nloopBreak% = 0\\nwhile ( False and ( i0 + in0 ) \\g ( int(1.0) * abs(min(mod(divInt(divInt(i1,mod(int(5.0),( abs(( max(abs(min(int(2.0), abs(( abs(int(4.0)) * divInt(int(0.0),in0) )))), ( mod(int(6.0),i0) - max(( abs(res0) - res0 ), abs(int(6.0))) )) - in1 )) * int(2.0) ))),in0),abs(int(5.0))), min(int(7.0), int(6.0)))) ) ):{:\\nif not in1 \\g ( in1 - max(int(3.0), mod(int(4.0),min(int(1.0), ( res0 * ( i0 * in0 ) )))) ):{:\\nloopBreak% = 0\\nwhile divInt(( i0 * i1 ),( abs(int(7.0)) + ( i2 + res0 ) )) \\l max(max(abs(i1), mod(( abs(int(2.0)) * int(0.0) ),in1)), divInt(abs(i0),int(8.0))):{:\\nb2 = int(6.0) \\l in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = b2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 -= i0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 19, 19, 4, 4, 1, 10, 4, 6, 1, 2, 24, 1, 87, 24, 21, 15, 10]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [9, 6], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += int(96.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [4, 0], [5], [0], [], [1], [0], [], [], [], [3, 6, 0], [], [3, 3, 1, 0, 2, 0, 1, 0], [0], [1, 1], [0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(max(int(4.0), in0), ( res0 + int(0.0) )) != i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 8, 1, 2, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 1, 1], [1, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 6, 4, 2, 2, 0, 2, 9, 4, 5, 4, 1, 3, 0, 7, 4, 3, 1, 3, 5, 5, 0, 5, 6, 0, 8, 4, 3, 7, 9, 2, 4, 6, 3, 4, 0, 1, 1, 7, 6, 7, 0, 4, 8, 9, 4, 9, 4, 2, 5, 2, 2, 7, 4, 1, 5, 0, 0, 5, 9, 7, 9, 9, 1, 7, 9, 5, 3, 9, 2, 1], [5, 2, 3, 5, 0], [1, 2, 2, 1, 1, 0, 2], [], [1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0], [], [], [3, 2, 1, 2, 6, 2, 5, 4, 4, 6, 6, 3, 4, 4, 6, 1, 3, 1, 2, 0, 4, 0, 4, 2, 6, 1, 3, 0, 4, 4, 3, 3, 6, 6, 3, 3, 1, 0, 3, 5, 0, 4, 0, 0, 6, 4, 2, 2, 3, 2, 6, 5, 1, 6, 0, 5, 1, 5, 3, 5, 3, 5, 4, 1, 4, 6, 0, 4, 6, 4, 2, 1, 4, 3, 2], [0, 1, 1, 1], [0, 2, 0, 2, 1, 0, 0, 1, 1, 2, 1, 0, 2, 3, 0, 2, 2, 2, 3, 2, 1, 1, 3, 1, 3, 3, 2, 1, 3, 2, 2, 1, 2, 2, 2, 1, 3, 0, 3, 1, 0, 2, 3, 3, 2, 2, 3, 2, 0, 1, 2, 3, 0, 2, 3, 0, 3, 1, 3, 0, 0, 2, 1, 2, 3, 0, 1, 3, 3, 2, 3, 2, 2, 2, 1, 2, 1, 2, 1, 3, 2, 1, 3, 1, 1, 1, 3, 3, 1, 1, 0, 2, 3, 0, 0, 0, 1, 2, 3, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 1, 3, 3, 3, 3, 3, 1, 2, 3, 1, 1, 1, 0, 2, 3, 2, 3, 0, 3, 3, 0, 3, 2, 0, 0, 0, 2, 1, 0, 1, 2, 1, 3, 0, 1, 1, 3, 1, 2, 3, 2, 3, 3, 0, 2, 2, 3, 2, 2, 1, 1, 0, 3, 2, 3, 2, 1, 3, 2, 1, 1, 2, 0, 0, 2, 0, 1, 1, 3, 3, 3, 2, 1, 2, 0, 3, 1, 3, 3, 1, 2, 0, 0, 0, 1, 0, 0, 3, 0, 1, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2, 1, 2, 2, 3, 2, 0, 2, 0, 3, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 1, 3, 0, 1, 3, 0, 0, 3, 3, 1, 3, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 3, 3, 2, 2, 0, 2, 2, 2, 3, 1, 0, 1, 2, 1, 0, 3, 2, 3, 2, 1, 3, 3, 3, 0, 3, 3, 1, 0, 1, 3, 3, 1, 3, 3, 3, 1, 0, 0, 3, 3, 2, 3, 0, 0, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 2, 0, 1, 2, 2, 0, 1, 2, 0, 1, 0, 2, 0, 1, 2, 1, 2, 0, 1, 1, 1, 2, 2, 2, 0, 1, 0, 1, 0, 2, 0, 1, 0, 2, 0, 0, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 1, 0, 0, 2, 1, 2, 0, 2, 2, 1, 2, 1, 0, 1], [2, 1, 0, 0, 2, 0, 1, 2, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 1, 1, 0, 0, 2, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 != ( i2 * mod(int(6.0),i1) ):{:\\ni2 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(2.0)\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = int(6.0) == mod(int(4.0),in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nin1 += mod(min(in1, ( ( ( min(divInt(int(2.0),int(2.0)), min(int(0.0), max(min(divInt(int(2.0),min(divInt(divInt(int(9.0),mod(( divInt(int(4.0),abs(res0)) + min(int(5.0), res0) ),divInt(abs(min(mod(mod(abs(mod(in0,int(4.0))),divInt(min(in1, ( max(in1, abs(int(1.0))) * abs(res0) )),i1)),( int(3.0) + divInt(min(in0, int(0.0)),max(abs(( min(( ( mod(int(7.0),mod(int(4.0),( int(3.0) - max(( int(1.0) * min(int(3.0), int(5.0)) ), int(5.0)) ))) - abs(min(int(0.0), int(5.0))) ) + i1 ), mod(max(i2, i0),in1)) + int(6.0) )), ( abs(i0) - in1 ))) )), int(0.0))),int(8.0)))),mod(int(4.0),( i2 * res0 ))), i1)), int(3.0)), max(abs(min(max(max(int(7.0), ( max(int(9.0), int(2.0)) + int(4.0) )), in0), divInt(abs(( abs(i0) + abs(min(in1, max(divInt(in1,in0), in0))) )),divInt(int(6.0),res0)))), int(3.0))))) - mod(int(4.0),min(res0, int(0.0))) ) + int(1.0) ) + max(int(1.0), mod(min(mod(abs(min(in0, mod(( max(divInt(divInt(int(7.0),int(6.0)),in0), min(mod(abs(( int(7.0) - min(( int(0.0) - int(4.0) ), ( i1 + i0 )) )),mod(in0,int(8.0))), int(9.0))) + min(abs(max(( int(4.0) * divInt(in2,abs(int(9.0))) ), max(abs(int(4.0)), mod(i0,in1)))), i0) ),int(2.0)))),i0), res0),max(in1, int(5.0)))) )),int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= int(2.0)\\nloopBreak% = 0\\nwhile ( ( i2 * in0 ) * divInt(( ( mod(int(7.0),( ( abs(divInt(i2,( res0 - min(divInt(mod(( int(4.0) + in2 ),( i1 + divInt(res0,min(int(1.0), min(i0, int(5.0)))) )),abs(in2)), i1) ))) * min(abs(int(0.0)), abs(int(0.0))) ) * mod(in2,in0) )) - in2 ) * ( in0 * in2 ) ),in1) ) \\ge i1:{:\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = int(5.0) != min(abs(( mod(in1,( ( mod(abs(int(9.0)),res0) * int(7.0) ) - ( int(9.0) + i0 ) )) * abs(( max(( int(9.0) + min(min(abs(in1), max(abs(int(1.0)), res0)), int(7.0)) ), min(abs(int(9.0)), abs(max(abs(int(5.0)), in1)))) * i2 )) )), max(min(mod(max(i1, in1),int(3.0)), int(9.0)), int(2.0)))\\nb2 = in0 \\l ( i2 + int(1.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 72, 72, 5, 7, 0, 8, 5, 3, 0, 0, 75, 4, 301, 80, 78, 41, 42]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [4], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 0, 2, 0, 0], [0, 0], [1, 0, 1], [1, 1, 1, 1], [3, 5, 4, 6], [3], [1, 0], [], [0, 0, 0, 1], [0], [0, 2, 1], [0], [1, 0], [6, 0, 0, 4, 6], [1, 1], [0, 1, 2, 1, 3, 0, 3, 0, 3, 3, 2, 1, 1], [1, 1], [2, 0, 2, 2], [2, 0], [1, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nres0 *= i0\\nif not True:{:\\nb0 = int(3.0) \\ge mod(int(5.0),abs(i0))\\n:}\\n:}else:{:\\nin1 += min(res0, abs(abs(divInt(int(4.0),int(6.0)))))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 4, 4, 1, 2, 0, 4, 1, 3, 1, 2, 5, 2, 13, 2, 4, 2, 2]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [2, 1, 2, 2, 1, 1, 0, 2, 0, 1, 0, 0], [0, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 7, 9, 7, 6, 9, 4, 3, 6, 1, 0, 0, 8, 5, 2, 7, 9, 1], [5, 5, 1, 2, 4, 0], [1, 2, 0, 0, 2, 0, 2], [1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 3, 0, 2, 3, 0, 1, 2, 2], [0], [1, 0], [5, 5, 0, 2, 5, 5, 5, 5, 0, 6, 1, 5, 1, 0, 6, 1, 6, 6, 0, 0, 6, 4, 2, 4, 0, 1, 2, 6, 5, 5, 6, 3, 5, 1, 6, 6, 0, 6, 2, 0, 4, 5, 1, 6, 6], [0, 0, 0, 0], [0, 2, 0, 3, 1, 1, 3, 2, 0, 2, 1, 3, 0, 1, 3, 0, 0, 1, 2, 3, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 2, 3, 0, 0, 3, 2, 2, 2, 0, 2, 0, 1, 0, 2, 3, 0, 0, 2, 3, 1, 2, 3, 3, 1, 1, 1, 0, 3, 0, 2, 2, 3, 0, 3, 0, 3, 1, 3, 0, 1, 3, 3, 3, 3, 0, 2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 1, 2, 0, 2, 3, 1, 2, 1, 0, 0, 3, 0, 2, 0, 3, 0, 3, 0, 1, 1, 2, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [2, 2, 0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 2, 0, 0, 2, 0, 0, 2, 0, 1, 2, 2, 0, 0, 0, 1], [1, 2, 0, 2, 2, 0, 0, 2, 2, 0, 2], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b1:{:\\nin2 = in2\\n:}else:{:\\nif ( b2 or not mod(i0,abs(int(4.0))) != int(9.0) ):{:\\nloopBreak% = 0\\nwhile ( b0 and True ):{:\\ni2 = abs(( in2 - divInt(int(7.0),min(in2, int(9.0))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nin2 = min(in2, i0)\\nb0 = int(7.0) != ( abs(divInt(res0,i1)) * in2 )\\nloopBreak% = 0\\nwhile i1 \\g i0:{:\\nres0 = ( divInt(i1,res0) + int(6.0) )\\nb2 = res0 == i0\\nb0 = not not i0 \\le ( max(res0, in1) * max(divInt(divInt(mod(i2,mod(in1,int(9.0))),i0),( abs(i1) * i2 )), mod(max(int(4.0), ( max(max(int(3.0), int(6.0)), int(1.0)) + res0 )),min(in2, ( divInt(abs(in2),min(res0, min(int(0.0), abs(in0)))) + int(0.0) )))) )\\nb2 = min(min(abs(min(in2, mod(mod(( max(i1, abs(( res0 * int(8.0) ))) * abs(int(5.0)) ),mod(res0,divInt(min(int(2.0), mod(int(7.0),i0)),res0))),min(i2, ( i0 + min(in1, max(in2, int(9.0))) ))))), int(1.0)), ( i1 * res0 )) \\l res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 19, 19, 6, 7, 2, 15, 6, 9, 1, 2, 45, 4, 113, 26, 27, 11, 15]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 4], [1], [0], [], [], [0], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [2, 3], [4], [2], [], [1], [0], [], [], [], [5], [], [0, 2, 1, 1], [0], [], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = in2 \\le ( int(2.0) * int(3.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1], [2, 0, 0, 0, 0, 2, 0, 1, 0], [1, 1], [1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 6, 1, 3, 7, 2, 5, 6, 6, 7, 7, 4, 0, 7, 8, 6, 8, 9, 9, 0, 5, 9, 7, 0, 6, 4, 8, 7, 7, 7, 4, 2, 7, 8, 0, 0, 2, 1, 9, 8, 5, 7, 4, 4, 9, 0, 3, 0, 9, 7, 4, 5, 4, 7, 6, 8, 6, 2, 6, 5, 4, 8, 5, 7, 3, 1, 6, 6, 0, 4, 6, 4, 2, 6, 2, 7, 2, 1, 2, 4, 0, 2, 1, 0, 1, 4, 8, 7, 3], [1, 2, 2, 1], [2], [0], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0], [2, 2, 2, 3], [], [], [1, 4, 0, 1, 5, 4, 0, 1, 4, 2, 1, 1, 1, 6, 3, 2, 6, 2, 3, 2, 4, 6, 3, 1, 1, 6, 3, 0, 4, 5, 2, 6, 5, 4, 2, 6, 0, 5, 1, 4, 2, 0, 6, 1, 6, 0, 6, 6, 2, 3, 4, 0, 4, 0, 6, 6, 5, 5, 1, 0, 5, 0, 1, 4, 4, 3, 0, 4, 5, 3, 6, 5, 1, 3, 2, 6, 0, 3, 6, 0, 2, 1, 0, 4, 6, 5, 3, 1, 6, 0, 2, 4, 3, 0, 5], [1, 1, 0, 0, 0, 0], [2, 0, 2, 0, 0, 2, 2, 3, 1, 0, 0, 0, 1, 1, 1, 1, 3, 0, 0, 0, 2, 3, 2, 3, 2, 3, 0, 3, 1, 0, 0, 2, 2, 3, 1, 3, 0, 1, 2, 2, 3, 1, 0, 1, 1, 3, 2, 3, 2, 3, 2, 0, 1, 3, 1, 2, 1, 0, 1, 3, 2, 3, 2, 0, 0, 0, 0, 0, 1, 2, 2, 3, 2, 0, 3, 3, 3, 3, 3, 2, 2, 1, 3, 0, 3, 2, 3, 2, 1, 1, 1, 3, 2, 1, 3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 0, 2, 3, 2, 0, 2, 1, 3, 1, 0, 3, 1, 3, 0, 1, 1, 1, 0, 1, 3, 0, 3, 0, 3, 3, 1, 2, 3, 2, 0, 2, 1, 3, 1, 0, 0, 0, 1, 2, 2, 2, 3, 1, 0, 3, 3, 0, 3, 3, 3, 1, 3, 0, 3, 3, 0, 0, 2, 2, 2, 1, 0, 3, 1, 2, 2, 3, 2, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 0, 2, 0, 2, 3, 1, 1, 2, 0, 0, 1, 3, 1, 0, 0, 2, 2, 1, 0, 3, 3, 1, 3, 0, 0, 1, 0, 3, 2, 2, 0, 3, 2, 2, 3, 1, 3, 1, 1, 3, 0, 2, 0, 2, 0, 0, 2, 2, 2, 3, 2, 2, 0, 3, 2, 2, 3, 1, 0, 1, 0, 3, 2, 1, 2, 2, 0, 1, 1, 2, 1, 0, 3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 0, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 3, 2, 2, 2, 3, 3, 3, 1, 1, 2, 1, 0, 0, 1, 1, 2, 1, 2, 2, 2, 3, 0, 2, 0, 0, 2, 2, 0, 1, 3, 0, 3, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 3, 2, 1, 3, 1, 2, 0, 1, 1, 3, 0, 3, 0, 2, 0, 3, 1, 1, 2, 0, 3, 2, 3, 3, 3, 1, 0, 1, 3, 1, 0, 1, 3, 2, 1, 1, 0, 0, 2, 1, 1, 3, 2, 0, 0, 2, 1, 2, 2, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 1, 2, 0, 2, 0, 0, 2, 1, 0, 0, 2, 1, 1, 2, 0, 2, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 0, 1, 1, 0, 1, 2, 2, 0, 2, 0, 0, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2], [2, 2, 0, 0, 1, 1, 0, 0, 2, 1, 0, 1, 1, 1, 1, 2, 2, 2, 0, 1, 2, 0, 0, 0, 1, 1, 0, 2, 2, 1, 1, 1, 1, 1, 2, 2, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not not divInt(i1,mod(in1,i0)) \\g ( mod(max(int(4.0), i1),in2) * in1 ):{:\\ni0 *= int(4.0)\\ni1 += int(6.0)\\nb2 = not int(1.0) == int(3.0)\\nin1 = min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( i1 == ( min(( min(divInt(min(i1, max(int(7.0), res0)),in0), ( ( max(int(2.0), min(i2, int(5.0))) + divInt(( abs(int(6.0)) - res0 ),int(6.0)) ) - int(7.0) )) + max(divInt(max(( max(mod(i2,int(7.0)), max(int(4.0), divInt(int(0.0),in0))) + int(7.0) ), max(mod(abs(( i2 * in1 )),res0), in0)),i1), int(8.0)) ), divInt(mod(min(( i1 - min(abs(max(min(abs(( mod(int(6.0),min(res0, min(mod(abs(mod(int(8.0),int(9.0))),int(9.0)), abs(mod(int(0.0),abs(min(divInt(int(5.0),in0), divInt(( int(9.0) + divInt(int(7.0),i0) ),divInt(abs(divInt(in1,( int(0.0) - max(int(6.0), in2) ))),min(int(4.0), min(i2, int(8.0)))))))))))) - int(7.0) )), int(7.0)), res0)), int(7.0)) ), max(in2, min(in1, max(abs(int(4.0)), ( min(( i2 - ( int(2.0) - abs(int(7.0)) ) ), res0) * i0 ))))),in2),int(8.0))) * ( ( divInt(min(int(0.0), i1),min(abs(in1), max(min(min(int(0.0), abs(i2)), max(max(i0, res0), divInt(mod(divInt(int(2.0),i1),abs(int(1.0))),divInt(( min(( ( mod(res0,( abs(mod(i0,mod(divInt(min(res0, ( res0 * mod(min(int(9.0), int(8.0)),divInt(i2,in0)) )),int(5.0)),max(int(7.0), in1)))) + i0 )) - ( ( int(4.0) * in1 ) + abs(max(int(4.0), max(i0, res0))) ) ) + int(9.0) ), res0) + max(divInt(( in2 - max(divInt(divInt(max(int(0.0), max(int(3.0), int(0.0))),abs(in2)),( i1 - divInt(i0,in2) )), ( ( mod(max(divInt(divInt(i0,max(( divInt(abs(int(9.0)),i1) + int(7.0) ), in1)),max(( int(4.0) * ( divInt(in1,int(5.0)) * int(4.0) ) ), divInt(int(7.0),in0))), max(divInt(mod(min(mod(max(divInt(max(i0, int(6.0)),in1), min(max(( divInt(( mod(mod(int(8.0),int(6.0)),int(2.0)) - abs(( mod(( abs(min(abs(int(6.0)), int(5.0))) - mod(int(4.0),in2) ),in0) - int(8.0) )) ),int(5.0)) - ( int(7.0) - ( divInt(( min(res0, mod(in2,i1)) * divInt(divInt(in0,int(3.0)),min(i2, abs(int(1.0)))) ),res0) * int(6.0) ) ) ), int(6.0)), i0)),int(0.0)), in0),int(4.0)),int(6.0)), int(4.0))),abs(divInt(int(2.0),abs(int(6.0))))) + mod(res0,int(2.0)) ) - int(7.0) )) ),max(i0, max(i2, divInt(i1,max(int(2.0), int(1.0)))))), ( i0 - abs(divInt(max(abs(max(int(2.0), in1)), int(4.0)),abs(int(0.0)))) )) ),res0)))), int(2.0)))) + max(divInt(int(1.0),int(0.0)), in2) ) + in0 ) ) and ( int(1.0) + int(4.0) ) \\g abs(divInt(i1,res0)) ):{:\\ni0 = divInt(int(8.0),divInt(divInt(int(7.0),i2),int(3.0)))\\nin1 = in0\\ni0 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 2, 7, 90, 90, 4, 1, 1, 8, 4, 4, 0, 0, 95, 6, 371, 103, 89, 42, 63]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0, 2], [], [0], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 2, 0, 0, 0], [1, 0], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 1, 7, 6, 8, 3, 9, 4, 7, 2, 0, 9, 9, 5, 6, 8, 7, 3, 9, 7, 0, 0, 0, 6, 8, 9, 4, 0, 6, 4, 6, 3, 7, 4, 0, 6, 8, 2, 4], [5, 5, 0], [1, 2, 2], [], [1, 1, 0, 0, 1], [0, 0, 0], [1, 1], [0, 0], [0], [4, 5, 3, 6, 4, 6, 6, 0, 1, 6, 2, 6, 6, 0, 3, 6, 5, 2, 4, 5, 1, 1, 3, 5, 2, 6, 4, 0, 5, 3, 4, 1, 2, 4, 2, 4, 2, 6, 1, 1], [], [0, 2, 3, 3, 2, 2, 3, 2, 0, 3, 2, 1, 3, 1, 2, 3, 0, 1, 1, 0, 2, 1, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 1, 0, 2, 1, 3, 3, 3, 2, 1, 2, 3, 1, 3, 3, 3, 2, 3, 3, 2, 1, 2, 0, 1, 2, 2, 2, 0, 3, 1, 2, 2, 1, 0, 1, 1, 1, 2, 3, 2, 2, 1, 3, 0, 0, 1, 1, 3, 2, 0, 3, 2, 2, 3, 2, 1, 2, 0, 2, 2, 3, 1, 3, 0, 0, 0, 0, 3, 1, 2, 0, 0, 1, 3, 3, 0, 0, 0, 2, 2, 1, 2, 0, 3, 2, 3, 0, 2, 1, 0, 1, 0, 0, 1, 3, 3, 3, 2, 1, 2, 1, 1, 1, 0, 1, 2, 1, 0, 3, 2, 0, 2, 1, 3, 2, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 2, 1, 1, 2, 0, 0, 1, 0, 0, 1, 0, 2, 2, 0, 0, 2], [1, 2, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 2], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 != ( max(max(divInt(( min(divInt(in2,min(( int(1.0) - max(int(7.0), mod(abs(in0),int(1.0))) ), int(7.0))), res0) * divInt(int(6.0),int(8.0)) ),divInt(int(3.0),( divInt(mod(( in1 - res0 ),res0),divInt(i0,i1)) * int(9.0) ))), res0), int(4.0)) - i2 ):{:\\nif divInt(int(7.0),res0) != mod(int(2.0),max(min(max(( int(0.0) + mod(min(int(9.0), max(min(max(mod(max(min(( int(9.0) * divInt(res0,int(5.0)) ), ( ( ( i0 - min(int(6.0), mod(mod(int(8.0),in0),int(7.0))) ) + int(3.0) ) - int(9.0) )), ( max(( ( int(7.0) + abs(res0) ) * in2 ), int(0.0)) + int(0.0) )),max(( i2 * max(mod(mod(abs(( int(0.0) * mod(in1,mod(mod(min(int(6.0), min(in2, i1)),i1),in0)) )),max(int(8.0), ( in2 * i2 ))),int(9.0)), min(min(res0, in1), i0)) ), ( divInt(int(4.0),divInt(in2,max(divInt(min(in0, ( int(0.0) + in1 )),int(6.0)), i1))) + i2 ))), int(4.0)), abs(abs(min(mod(int(6.0),( int(3.0) + int(7.0) )), int(4.0))))), in1)),int(0.0)) ), ( int(6.0) * i2 )), min(( in1 + ( int(8.0) * abs(divInt(int(2.0),int(4.0))) ) ), i2)), res0)):{:\\nb1 = True\\n:}\\nb2 = True\\nb2 = i1 \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 40, 40, 3, 3, 0, 5, 3, 2, 2, 1, 40, 0, 160, 47, 33, 22, 25]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 0, 0, 0, 1], [0, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 3, 3, 0, 7, 9, 0, 2, 6, 3, 5, 0, 4, 6, 7, 2, 2, 7, 4, 0, 6, 4, 8, 3, 8, 1, 8, 1, 4, 8, 8, 8, 4, 8, 6, 4, 9, 0, 8, 5, 5, 8, 4, 0, 9, 6, 7, 2, 5, 7, 2, 8, 4, 3, 1, 1, 7, 9, 2, 6, 3, 1, 5, 8, 1, 4, 3, 7, 4, 6, 6, 9, 0, 2, 6, 6, 9, 4, 4, 1, 5, 6, 1, 0, 6, 1, 6, 6, 9, 0, 7, 3, 2, 2, 0, 0, 3, 0, 3, 1, 6, 1, 3, 3, 9, 6, 2, 8, 9, 3, 0, 2, 6, 4, 4, 1, 2, 0, 7, 9, 1, 3, 9, 6, 7, 9, 3, 2, 7, 0, 7, 3, 7, 1, 9, 2, 5, 3, 5, 0, 1, 2, 2, 8, 2, 6, 8, 9, 3, 1, 3, 9, 0, 6, 4, 2, 1, 1, 9, 1, 6, 2, 2, 5, 6, 7, 1, 7, 2, 9, 5, 9, 1, 8, 1, 6, 4, 0, 1, 4, 0, 5, 9, 3, 3, 1, 1, 9, 9, 8, 3, 6, 0], [2, 0], [0, 0, 2], [], [1, 0, 0, 0, 1], [0, 0], [2, 0, 1], [1], [1], [2, 2, 1, 5, 1, 6, 2, 2, 5, 1, 1, 3, 1, 6, 6, 2, 3, 4, 0, 3, 3, 3, 6, 2, 5, 3, 4, 5, 3, 0, 4, 3, 2, 1, 3, 4, 2, 4, 4, 5, 2, 1, 1, 5, 3, 1, 0, 2, 4, 0, 6, 6, 3, 4, 3, 0, 2, 0, 3, 3, 5, 4, 3, 5, 0, 2, 5, 0, 0, 5, 5, 6, 6, 1, 1, 2, 2, 3, 5, 5, 0, 0, 1, 1, 3, 3, 3, 4, 6, 5, 5, 2, 6, 4, 4, 4, 5, 5, 4, 6, 0, 5, 0, 2, 3, 3, 4, 0, 0, 2, 3, 6, 5, 4, 5, 0, 6, 2, 2, 3, 5, 5, 0, 5, 5, 4, 5, 6, 6, 2, 4, 1, 0, 5, 1, 4, 6, 4, 5, 2, 4, 3, 0, 4, 6, 0, 2, 4, 0, 4, 5, 6, 3, 5, 2, 4, 3, 6, 2, 4, 6, 1, 0, 6, 5, 5, 2, 2, 6, 4, 3, 4, 3, 5, 0, 2, 4, 3, 6, 0], [0, 1, 1], [1, 2, 3, 1, 1, 3, 2, 1, 3, 1, 3, 3, 1, 2, 2, 3, 2, 2, 2, 1, 2, 0, 1, 0, 1, 2, 2, 1, 0, 2, 3, 0, 0, 1, 0, 3, 2, 3, 3, 1, 3, 1, 1, 3, 0, 3, 2, 2, 2, 3, 1, 2, 1, 0, 2, 3, 1, 2, 1, 2, 2, 0, 3, 3, 3, 0, 1, 1, 0, 0, 0, 3, 3, 3, 2, 2, 2, 3, 2, 1, 0, 2, 1, 3, 2, 3, 2, 0, 1, 0, 0, 1, 0, 0, 3, 2, 1, 2, 2, 0, 2, 2, 2, 0, 2, 0, 3, 0, 2, 2, 3, 3, 2, 3, 0, 0, 0, 2, 2, 0, 2, 2, 1, 1, 3, 3, 2, 1, 2, 3, 0, 3, 1, 1, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 2, 3, 2, 1, 3, 1, 3, 2, 3, 3, 2, 3, 2, 2, 1, 1, 2, 3, 0, 3, 0, 2, 1, 0, 2, 1, 2, 2, 1, 0, 1, 2, 3, 2, 1, 3, 3, 2, 3, 1, 3, 3, 1, 2, 2, 0, 1, 2, 1, 2, 2, 0, 2, 3, 3, 1, 2, 0, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 0, 3, 3, 0, 2, 3, 0, 0, 3, 3, 1, 2, 1, 0, 3, 0, 3, 1, 1, 2, 2, 0, 0, 2, 0, 1, 2, 2, 1, 0, 0, 3, 0, 1, 0, 2, 2, 3, 0, 2, 3, 0, 2, 1, 1, 0, 3, 3, 2, 0, 0, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 1, 2, 1, 1, 1, 3, 0, 1, 3, 2, 0, 3, 0, 3, 0, 2, 1, 0, 3, 1, 0, 3, 2, 2, 2, 2, 0, 2, 3, 0, 1, 1, 0, 3, 1, 1, 3, 1, 3, 2, 2, 3, 2, 3, 1, 1, 0, 2, 3, 3, 2, 2, 0, 2, 1, 1, 2, 1, 3, 0, 2, 0, 3, 3, 3, 1, 3, 1, 0, 2, 2, 1, 0, 1, 3, 0, 2, 3, 0, 2, 2, 0, 2, 1, 0, 0, 0, 3, 1, 2, 2, 2, 1, 3, 0, 2, 0, 3, 3, 3, 0, 1, 3, 0, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 1, 1, 0, 2, 0, 1, 3, 2, 1, 2, 1, 0, 3, 3, 0, 2, 0, 0, 1, 1, 0, 1, 3, 2, 0, 1, 3, 1, 0, 3, 3, 1, 0, 1, 2, 0, 1, 3, 3, 3, 2, 1, 3, 3, 2, 0, 0, 0, 2, 0, 1, 3, 3, 0, 0, 0, 2, 0, 2, 3, 2, 0, 0, 2, 2, 1, 0, 2, 0, 0, 1, 3, 0, 0, 2, 1, 2, 3, 2, 2, 1, 2, 3, 3, 0, 2, 2, 3, 2, 0, 3, 3, 3, 1, 1, 2, 2, 1, 0, 3, 2, 1, 2, 0, 1, 3, 2, 2, 2, 0, 0, 2, 0, 1, 1, 2, 1, 1, 1, 3, 1, 2, 2, 0, 1, 0, 1, 1, 2, 3, 0, 2, 0, 3, 2, 2, 3, 2, 1, 3, 3, 3, 3, 1, 1, 1, 0, 0, 1, 2, 3, 0, 2, 0, 3, 0, 0, 3, 3, 0, 0, 3, 2, 0, 1, 3, 1, 2, 2, 1, 1, 2, 3, 2, 0, 1, 2, 3, 0, 0, 2, 1, 2, 1, 3, 0, 3, 0, 2, 2, 3, 2, 3, 1, 2, 2, 1, 2, 2, 0, 3, 3, 3, 1, 3, 3, 1, 3, 3, 2, 2, 3, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3, 2, 1, 1, 2, 1, 2, 3, 2, 1, 3, 0, 0, 0, 3, 1, 2, 0, 2, 1, 0, 1, 2, 0, 2, 1, 0, 3, 1, 3, 1, 3, 2, 0, 2, 1, 3, 2, 0, 2, 1, 3, 2, 2, 3, 0, 3, 2, 1, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 0, 1, 3, 1, 3, 3, 3, 2, 2, 0, 2, 0, 3, 2, 0, 3, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 2, 3, 0, 2, 3, 2, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 3, 0, 2, 1, 2, 3, 0, 1, 0, 0, 1, 3, 2, 3, 1, 3, 3, 1, 3, 1, 1, 1, 1, 3, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 1, 3, 0, 3, 0, 1, 3, 0, 1, 2, 1, 1, 2, 2, 3, 0, 3, 1, 1, 1, 0, 3, 2, 1, 2, 1, 1, 3, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 2, 0, 1, 0, 2, 1, 2, 1, 0, 0, 1, 0, 2, 2, 2, 0, 0, 2, 1, 2, 1, 0, 0, 0, 1, 2, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 1, 1, 0, 1, 1, 1, 1, 0, 2, 0, 0, 1, 2, 0, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 0, 1, 2, 0, 2, 2, 0, 2, 1, 1, 0, 0, 2, 2, 0, 1, 0, 0, 2, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0, 2, 1, 2, 2, 2, 0, 1, 0, 2, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 0, 2, 2, 1, 1, 2, 1, 0, 2, 0, 1, 2, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 2, 2, 1, 0, 0, 2, 1, 1, 1, 2, 1, 1, 0, 2, 1, 0, 0, 1, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 2, 0, 1, 2, 2, 1, 1, 2, 2, 0, 1, 1, 2, 0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 0, 0, 2, 1, 0, 0, 2, 2, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 111, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(1.0) == ( max(int(3.0), int(3.0)) + abs(divInt(int(0.0),min(int(7.0), max(min(int(9.0), mod(( abs(( divInt(mod(int(0.0),( i2 - int(2.0) )),i2) - int(6.0) )) - ( ( int(3.0) * i1 ) * divInt(max(in2, i1),int(5.0)) ) ),res0)), abs(( max(min(int(0.0), min(int(4.0), int(6.0))), max(i2, min(mod(( ( abs(int(7.0)) - mod(int(2.0),i2) ) + ( abs(int(2.0)) + ( int(7.0) * ( ( in2 - abs(min(min(i1, int(4.0)), int(0.0))) ) - i1 ) ) ) ),in0), i1))) - abs(max(abs(mod(( divInt(max(( int(6.0) * res0 ), mod(int(4.0),min(mod(min(( res0 - int(8.0) ), i2),in0), int(3.0)))),in1) - i0 ),min(divInt(int(8.0),( ( in0 + ( ( divInt(in0,( in0 * max(res0, ( mod(abs(abs(( min(i2, in2) - in0 ))),( divInt(in1,( divInt(int(1.0),int(8.0)) + max(min(( int(1.0) + ( min(in2, abs(int(4.0))) - int(8.0) ) ), int(8.0)), int(8.0)) )) - in0 )) - i0 )) )) - divInt(int(4.0),int(8.0)) ) * in1 ) ) + ( ( int(6.0) + mod(max(mod(int(4.0),min(int(9.0), min(mod(min(min(mod(abs(( ( int(0.0) * int(8.0) ) - divInt(min(in0, max(i2, mod(int(5.0),i1))),mod(int(5.0),( ( int(8.0) * in0 ) - int(4.0) ))) )),mod(min(( int(0.0) - min(max(divInt(min(int(9.0), min(max(int(6.0), divInt(mod(in1,int(7.0)),( int(2.0) + mod(mod(i2,( min(abs(int(5.0)), divInt(in1,max(( int(7.0) - divInt(divInt(int(2.0),in1),int(8.0)) ), ( ( int(4.0) * in2 ) - max(min(i2, divInt(max(i1, i1),max(max(int(3.0), mod(int(1.0),in2)), max(in0, min(int(1.0), int(7.0)))))), mod(( i1 * i0 ),divInt(i2,int(9.0)))) )))) + ( ( int(2.0) * in1 ) * i0 ) )),abs(res0)) ))), int(6.0))),res0), ( ( min(in0, mod(min(in1, divInt(int(3.0),int(1.0))),in0)) * max(abs(mod(i0,i2)), min(int(5.0), max(abs(min(abs(max(max(mod(max(int(8.0), divInt(int(1.0),int(4.0))),int(3.0)), min(i0, int(7.0))), max(mod(in0,min(in0, min(in2, mod(int(4.0),in1)))), abs(int(6.0))))), in0)), abs(divInt(( divInt(divInt(in2,divInt(min(i0, int(6.0)),int(9.0))),i2) - max(int(0.0), int(2.0)) ),abs(int(6.0))))))) ) * min(mod(divInt(abs(( abs(int(6.0)) * int(9.0) )),in2),( min(abs(divInt(mod(i0,( int(4.0) * int(4.0) )),mod(int(1.0),max(i0, ( in2 * max(min(min(int(5.0), abs(int(6.0))), in2), ( ( int(1.0) + res0 ) - int(0.0) )) ))))), abs(res0)) * divInt(min(i1, divInt(divInt(i1,mod(int(6.0),i2)),i2)),in0) )), max(int(1.0), mod(( mod(int(6.0),min(in2, ( in2 * min(abs(abs(i0)), int(6.0)) ))) - abs(i0) ),int(9.0)))) )), int(0.0)) ), max(mod(divInt(int(7.0),divInt(int(3.0),int(2.0))),mod(int(2.0),int(0.0))), i1)),divInt(i1,int(0.0)))), max(( int(3.0) - ( int(0.0) * in0 ) ), min(min(in0, divInt(in0,in1)), int(3.0)))), int(1.0)),res0), int(6.0)))), min(divInt(in2,int(1.0)), min(int(3.0), in2))),max(max(int(3.0), i2), int(9.0))) ) * mod(res0,int(6.0)) ) )), max(min(min(divInt(int(2.0),abs(min(divInt(in1,in1), in1))), ( in2 + int(8.0) )), min(max(in2, in1), res0)), mod(i0,( min(( in2 - i0 ), divInt(( int(9.0) - i2 ),divInt(in0,in0))) * int(3.0) )))))), max(in1, i0))) )))))) ):{:\\ni0 = mod(int(0.0),mod(max(divInt(( int(2.0) + ( max(min(i2, ( ( min(mod(in0,abs(min(min(int(6.0), int(4.0)), divInt(( int(4.0) + res0 ),min(( int(1.0) - ( in2 - int(2.0) ) ), min(divInt(( mod(in1,in2) - mod(i0,int(0.0)) ),int(7.0)), ( int(9.0) * int(1.0) ))))))), int(3.0)) * max(int(9.0), mod(( res0 - int(6.0) ),i2)) ) - int(7.0) )), int(9.0)) - ( max(i2, mod(in0,min(( divInt(max(( int(3.0) + abs(min(min(abs(int(2.0)), int(7.0)), int(0.0))) ), in2),in2) + int(7.0) ), ( max(i0, divInt(in2,abs(in2))) + in1 )))) * abs(abs(in2)) ) ) ),res0), min(divInt(res0,int(3.0)), max(int(7.0), ( mod(int(1.0),int(9.0)) - ( min(mod(i2,int(2.0)), mod(abs(in1),i1)) - mod(int(5.0),( int(3.0) * abs(i0) )) ) )))),abs(in2)))\\n:}else:{:\\nloopBreak% = 0\\nwhile not b0:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 *= mod(divInt(abs(divInt(max(int(5.0), ( ( int(0.0) - mod(( in1 - min(abs(max(int(1.0), min(min(int(2.0), abs(min(( ( abs(res0) - in1 ) * in2 ), int(2.0)))), ( abs(int(8.0)) - int(2.0) )))), mod(max(( int(6.0) - int(8.0) ), mod(int(9.0),divInt(max(( int(3.0) * abs(i2) ), in1),in0))),max(int(1.0), ( i0 - divInt(int(3.0),in1) )))) ),int(9.0)) ) * divInt(res0,( int(0.0) - i0 )) )),min(int(6.0), abs(int(4.0))))),min(( i2 - ( int(2.0) - max(divInt(in1,( int(1.0) * abs(divInt(( abs(i0) + max(divInt(int(1.0),in1), int(9.0)) ),( mod(in2,res0) + in0 ))) )), divInt(in2,mod(i2,int(1.0)))) ) ), abs(int(6.0)))),abs(min(max(mod(divInt(in1,( in0 * max(( res0 - max(i2, in1) ), int(2.0)) )),mod(divInt(( max(max(min(max(int(2.0), int(5.0)), int(6.0)), ( abs(res0) + divInt(max(mod(i1,i0), res0),in2) )), ( int(7.0) + mod(in2,int(1.0)) )) * i2 ),i2),abs(res0))), ( int(7.0) * ( min(in1, int(2.0)) - in0 ) )), in1)))\\nb2 = int(9.0) \\l min(divInt(min(int(5.0), min(min(int(9.0), min(int(1.0), int(8.0))), int(1.0))),int(6.0)), min(int(4.0), mod(mod(in0,divInt(divInt(abs(divInt(mod(divInt(int(0.0),max(in2, max(i0, int(1.0)))),min(i2, int(4.0))),mod(int(0.0),int(5.0)))),( ( min(in1, min(int(9.0), int(3.0))) + int(3.0) ) + in0 )),max(mod(int(1.0),divInt(int(1.0),int(9.0))), min(int(9.0), int(8.0))))),res0)))\\ni0 -= int(360.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 193, 193, 2, 3, 0, 5, 2, 3, 1, 1, 180, 3, 781, 222, 191, 102, 122]}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1], [2, 0, 0, 1, 1, 2, 1], [0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 5, 1, 8, 7, 2, 2, 4, 3, 2, 5, 8, 5, 2, 6, 7, 3, 0, 1, 3, 2, 8, 9, 8, 1, 1, 5, 3, 5, 5, 2, 2], [5, 4], [2], [], [0, 0, 1, 1], [0, 0], [2, 1], [0], [1, 0], [5, 5, 4, 4, 3, 1, 2, 0, 6, 4, 3, 4, 5, 3, 1, 4, 3, 0, 1, 1, 0, 5, 1, 0, 5, 6, 2, 3, 4, 4, 5, 1, 4, 0, 2, 5, 5, 1, 1, 0, 6, 3, 2, 3, 0, 6, 0, 6, 6, 6, 6, 4, 0, 5, 3], [0, 1, 1, 0], [1, 2, 2, 1, 0, 1, 1, 3, 2, 0, 0, 2, 1, 3, 2, 3, 3, 0, 1, 1, 0, 3, 0, 2, 3, 3, 2, 2, 2, 2, 3, 3, 2, 1, 2, 0, 2, 3, 2, 1, 0, 3, 2, 3, 2, 2, 2, 0, 2, 0, 1, 2, 3, 2, 0, 2, 3, 0, 2, 1, 3, 2, 1, 3, 3, 2, 0, 3, 0, 0, 3, 3, 0, 2, 1, 2, 2, 0, 0, 2, 2, 3, 0, 0, 2, 2, 1, 1, 2, 2, 1, 0, 2, 0, 1, 2, 0, 3, 2, 3, 1, 3, 3, 1, 2, 1, 1, 0, 3, 2, 3, 2, 0, 2, 0, 0, 3, 0, 3, 1, 0, 3, 2, 3, 0, 3, 3, 1, 2, 1, 2, 0, 1, 0, 0, 0, 2, 2, 0, 2, 3, 3, 0, 2, 3, 0, 0, 2, 0, 1, 0, 2, 2, 0, 3, 2, 2, 1, 2, 2, 3, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 1, 2, 1, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 1, 2, 0, 1, 1, 2, 2, 0, 2, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 2, 0, 2], [0, 2, 0, 2, 0, 1, 1, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 0, 0, 2, 0, 2, 1, 2, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 88, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not True:{:\\nin2 = int(5.0)\\n:}else:{:\\nb2 = mod(mod(int(0.0),in2),int(5.0)) != int(1.0)\\nin1 += max(( in1 * in0 ), ( int(8.0) + abs(mod(max(abs(i1), int(7.0)),int(2.0))) ))\\ni2 *= i0\\nif max(res0, ( abs(min(( divInt(( divInt(max(max(( int(2.0) + mod(in1,( abs(divInt(int(4.0),in0)) - abs(( abs(divInt(( mod(in1,divInt(in2,int(3.0))) - divInt(abs(( in0 * ( max(i1, mod(int(2.0),abs(mod(int(5.0),min(max(( in1 - abs(in0) ), i0), min(max(i1, mod(int(8.0),( mod(i1,i0) - mod(divInt(max(in2, i1),( mod(int(5.0),int(2.0)) * ( mod(int(6.0),i0) * mod(in2,int(7.0)) ) )),( res0 - abs(( abs(int(3.0)) * min(abs(int(0.0)), divInt(int(1.0),int(3.0))) )) )) ))), i2)))))) + abs(divInt(min(mod(in0,divInt(in1,in1)), abs(in2)),abs(int(2.0)))) ) )),i1) ),max(mod(min(in1, min(min(int(8.0), ( int(9.0) * ( i0 - int(8.0) ) )), i2)),in2), in2))) + ( ( i1 + ( min(abs(i1), divInt(abs(i0),res0)) * divInt(in0,int(1.0)) ) ) + i2 ) )) )) ), mod(divInt(in0,min(( divInt(int(1.0),mod(divInt(abs(int(5.0)),mod(int(3.0),i0)),res0)) * i0 ), res0)),res0)), res0),res0) - int(5.0) ),in1) * int(5.0) ), i0)) - int(2.0) )) \\le in2:{:\\nin0 = int(2.0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 33, 33, 2, 1, 0, 4, 2, 2, 1, 2, 55, 4, 178, 56, 38, 25, 33]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 1], [1, 1, 1, 1, 1], [7, 2, 7, 7, 8], [0, 3], [1, 0], [], [1, 0, 1], [0, 0], [2], [], [], [0, 6, 5, 6], [0], [2, 2, 1, 3, 1, 1, 1, 0, 0, 2, 1, 0], [1, 1, 1], [2], [], [0, 1, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(mod(int(7.0),abs(int(2.0))),int(7.0)) \\l int(7.0)\\nb0 = not i0 \\ge res0\\nin2 = divInt(int(8.0),res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 5, 5, 2, 2, 0, 3, 2, 1, 0, 0, 4, 1, 12, 3, 1, 0, 3]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 0, 1, 2, 0], [0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 1, 5, 8, 7, 1, 7, 1, 7, 1, 5, 7, 7, 4, 7, 7, 8, 5, 6, 5, 9, 9, 0, 3, 7, 4, 0, 8, 2, 1, 2, 3, 3, 9, 5, 2, 9, 9, 4, 0, 2, 3, 2, 3, 0, 1, 1, 0, 1, 6, 2, 7, 5, 6, 8, 3, 7, 6, 1, 5, 8, 4, 7, 8, 7, 3, 6, 2, 8, 5, 0, 4, 2, 1, 2, 9, 7, 7, 5, 5], [0, 3, 5, 3, 3, 1, 0], [2, 1, 0, 2], [0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 3], [], [1, 1, 1, 0], [0, 1, 5, 0, 6, 4, 5, 6, 5, 6, 6, 6, 0, 5, 6, 4, 2, 3, 0, 5, 2, 4, 5, 6, 1, 2, 2, 5, 0, 6, 3, 1, 1, 1, 5, 2, 1, 3, 2, 5, 1, 6, 6, 0, 5, 5, 6, 0, 6, 5, 3, 6, 2, 5, 5, 6, 0, 0, 3, 1, 2, 0, 1, 6, 6, 6, 2, 2, 0, 3, 3, 2, 4, 2, 5, 3, 3, 1, 4, 3, 4, 3, 0, 3, 3, 2, 3, 1, 3, 2, 4, 1, 3, 6, 6, 3, 1], [0], [0, 2, 1, 0, 0, 0, 3, 3, 3, 2, 0, 1, 2, 1, 2, 1, 1, 3, 2, 1, 2, 0, 1, 3, 3, 3, 0, 0, 2, 3, 0, 0, 0, 2, 0, 1, 3, 0, 3, 3, 1, 1, 3, 3, 2, 1, 2, 0, 2, 2, 3, 3, 2, 1, 2, 2, 2, 2, 3, 0, 1, 3, 2, 2, 0, 2, 0, 2, 3, 0, 2, 2, 2, 0, 1, 0, 0, 3, 3, 1, 3, 2, 0, 2, 0, 2, 1, 1, 3, 0, 2, 3, 3, 2, 3, 0, 0, 3, 3, 0, 2, 1, 1, 3, 1, 0, 3, 0, 0, 1, 0, 0, 3, 3, 2, 2, 2, 0, 2, 0, 2, 3, 3, 3, 2, 0, 0, 1, 0, 1, 2, 0, 1, 1, 2, 0, 0, 2, 3, 1, 2, 3, 2, 0, 3, 0, 1, 1, 0, 1, 1, 0, 2, 2, 0, 1, 2, 3, 2, 3, 2, 3, 1, 2, 0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 3, 1, 0, 0, 1, 3, 1, 3, 3, 2, 1, 3, 0, 3, 1, 0, 3, 0, 3, 2, 0, 0, 2, 0, 3, 2, 3, 1, 3, 1, 2, 0, 0, 3, 2, 0, 0, 1, 0, 3, 2, 3, 0, 3, 2, 1, 1, 3, 1, 3, 0, 2, 0, 2, 2, 0, 1, 3, 3, 3, 3, 2, 3, 2, 1, 3, 2, 0, 2, 3, 2, 3, 0, 3, 1, 3, 1, 0, 3, 2, 1, 3, 2, 3, 2, 0, 3, 3, 1, 2, 0, 1, 3, 3, 1, 0, 2, 0, 2, 3, 1, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1, 3, 3, 0, 1, 1, 3, 1, 2, 3, 3, 3, 3, 0, 1, 3, 0, 2, 0, 0, 3, 2, 2, 3, 2, 1, 0, 1, 2, 3, 0, 3, 2, 2, 3, 1, 3, 0, 2, 1, 0, 1, 2, 0, 0, 3, 1, 3, 2, 0, 1, 0, 3, 0, 2, 0, 0, 1, 2, 0, 3, 3, 1, 0, 3, 1, 0, 3, 1, 1, 3, 3, 3, 1, 3, 2, 1, 2, 1, 1, 1, 2, 0, 3, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 2, 2, 0, 1, 1, 2, 1, 0, 2, 0, 2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 0, 0, 1, 2, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1, 1, 0, 2, 1, 1, 2, 1, 0, 1, 2, 1, 2, 0, 1, 0, 0, 2, 0, 2, 1, 2, 0, 0, 1, 0, 2, 0, 1, 2, 0, 1, 1, 1, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 1, 1, 1], [0, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 1, 0, 1, 2], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not b2:{:\\nb1 = i0 \\l ( int(3.0) + i1 )\\n:}else:{:\\nif in2 \\ge i0:{:\\nif max(min(min(( res0 * int(7.0) ), ( int(4.0) - ( int(1.0) - int(5.0) ) )), abs(mod(int(8.0),mod(in1,int(7.0))))), abs(min(max(in2, res0), mod(max(in2, res0),res0)))) != mod(res0,int(1.0)):{:\\nb0 = not abs(i0) \\ge max(min(int(7.0), int(1.0)), abs(min(( int(7.0) + ( in2 - ( ( abs(abs(( int(1.0) + ( ( divInt(( max(res0, int(5.0)) + abs(( ( in1 + ( i2 - ( max(in0, mod(divInt(mod(i0,int(7.0)),in2),i2)) - abs(max(int(7.0), max(divInt(in1,mod(in2,divInt(int(4.0),int(7.0)))), min(res0, divInt(abs(min(divInt(min(i1, i2),max(abs(i2), ( int(7.0) - int(8.0) ))), min(int(5.0), in2))),max(i0, res0)))))) ) ) ) - int(6.0) )) ),in0) * i1 ) - max(max(( ( mod(i1,divInt(i1,( max(max(max(( in2 * i2 ), int(5.0)), i1), int(9.0)) * mod(in0,int(9.0)) ))) - int(0.0) ) * mod(i2,in2) ), ( abs(int(3.0)) * divInt(min(divInt(i1,abs(res0)), int(7.0)),int(4.0)) )), res0) ) ))) + int(0.0) ) + int(8.0) ) ) ), i0)))\\n:}else:{:\\nin2 = ( divInt(in2,int(2.0)) + divInt(min(divInt(abs(divInt(min(int(1.0), ( res0 - divInt(i0,( int(2.0) + divInt(res0,mod(int(3.0),divInt(int(3.0),abs(int(9.0))))) )) )),in2)),in0), int(5.0)),max(int(2.0), max(abs(mod(int(9.0),min(res0, min(int(9.0), i2)))), max(in2, max(divInt(in2,res0), mod(i0,min(mod(abs(int(4.0)),max(int(0.0), divInt(i0,in0))), max(( i1 * i2 ), int(2.0))))))))) )\\n:}\\n:}else:{:\\nif ( i0 \\ge abs(( max(i1, min(mod(int(3.0),int(2.0)), max(int(3.0), abs(res0)))) + divInt(res0,divInt(( res0 - int(0.0) ),max(abs(min(max(divInt(min(( int(1.0) + min(mod(i2,( abs(( min(i2, abs(int(1.0))) * max(int(0.0), i0) )) + abs(( int(1.0) - min(mod(min(divInt(in0,max(min(int(6.0), mod(in0,int(2.0))), abs(min(int(7.0), i2)))), ( in1 + mod(max(int(5.0), ( int(6.0) + i2 )),divInt(int(8.0),( ( in2 * in0 ) - int(3.0) ))) )),abs(min(in0, int(7.0)))), int(6.0)) )) )), max(int(1.0), ( max(max(abs(abs(i1)), int(5.0)), abs(in1)) + divInt(in0,in1) ))) ), abs(mod(divInt(min(mod(int(8.0),in0), int(4.0)),( max(i0, min(mod(divInt(abs(int(7.0)),min(in0, ( int(8.0) + in0 ))),int(7.0)), ( i2 + in0 ))) - min(int(3.0), min(( i1 + int(6.0) ), in0)) )),abs(i2)))),( in1 - i1 )), int(2.0)), divInt(in0,min(min(int(8.0), res0), min(int(5.0), res0))))), min(int(0.0), int(4.0))))) )) and abs(abs(max(int(2.0), max(divInt(int(1.0),( int(2.0) * int(9.0) )), int(7.0))))) \\g mod(in0,max(int(7.0), int(5.0))) ):{:\\nb2 = i1 \\l int(5.0)\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 82, 82, 7, 4, 1, 11, 7, 4, 0, 4, 97, 1, 373, 94, 101, 43, 51]}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [0], [1, 0], [1, 1, 1], [6, 2, 2], [5, 0], [1], [], [1, 0, 1], [0, 0], [2], [], [0], [4, 3, 3], [0], [1, 0, 0, 1, 1], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) != in1:{:\\nin0 = in0\\n:}\\nb1 = not int(2.0) \\l int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1, 3, 1, 5, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1], [9], [], [], [], [], [], [], [], [], [5], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [5, 6], [], [], [], [], [], [], [], [], [1], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += int(56.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [0, 1], [4, 4], [], [0], [], [0], [], [1], [0], [], [3], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = int(44.0)\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 0, 0, 1, 2, 2, 0, 1], [1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 5, 2, 6, 2, 5, 9, 5], [1, 3, 0, 4, 5], [1, 1, 1, 0, 1, 2, 0], [1], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 2, 0], [], [1, 0], [5, 2, 5, 3, 1, 2, 3, 5, 6], [1, 0, 0], [1, 0, 0, 1, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0], [], [0, 2], [2], []], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(56.0) \\g in2:{:\\nif i2 \\ge int(5.0):{:\\nb1 = b1\\n:}else:{:\\nloopBreak% = 0\\nwhile ( min(abs(in2), int(2.0)) \\l int(6.0) or not in0 \\le int(2.0) ):{:\\ni1 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin0 = int(5.0)\\nb1 = int(9.0) != int(5.0)\\nif not b0:{:\\nloopBreak% = 0\\nwhile b1:{:\\nin2 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = not b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 5, 6, 9, 9, 5, 7, 1, 13, 5, 8, 0, 2, 9, 3, 16, 0, 2, 1, 0]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 2, 0], [1, 1, 1], [0], [1, 1, 1, 1, 1, 1, 1], [1, 6, 7, 8, 2, 5, 0], [2, 3, 4, 3], [0], [0, 1], [0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0], [3, 3, 1, 1], [0, 1], [], [6, 3, 2, 2, 2, 6, 0, 1, 1, 6], [], [3, 3, 3, 1, 0, 0, 2, 1, 1, 2, 0, 0, 2, 0, 0, 2, 3, 0, 1, 0, 3, 0, 2, 1, 3, 1, 0, 1], [0, 0, 1, 0, 0], [0, 1, 1, 2, 2, 0], [1, 2, 1, 0], [1]], "fitness": 99, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( min(max(max(int(1.0), res0), in0), ( int(6.0) - int(7.0) )) == ( i2 * i2 ) and True ) or mod(i2,res0) \\ge ( abs(i0) - int(8.0) ) ):{:\\nloopBreak% = 0\\nwhile i1 \\le abs(i1):{:\\nloopBreak% = 0\\nwhile False:{:\\nb0 = ( int(2.0) + min(int(5.0), res0) ) \\ge int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 3, 1, 7, 7, 4, 1, 2, 8, 4, 4, 2, 0, 10, 0, 28, 5, 6, 4, 1]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 0, 0, 1], [1], [1, 1, 0, 1], [1, 1, 1, 1], [6, 9, 8, 3], [5], [2], [], [0, 1], [0], [1], [0], [], [5, 6, 2, 4, 0, 5, 3, 3, 4, 6, 5], [1, 1, 0], [1, 0, 3, 0, 0, 3, 3, 0, 2, 2, 0, 0, 1, 2, 0, 1, 2, 1, 0], [1, 1, 0, 1], [1, 0, 1], [2, 2, 1], [1, 1, 1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nin2 *= int(6.0)\\nres0 *= i2\\nb2 = max(in1, i0) != min(max(in2, mod(mod(in0,in0),int(9.0))), ( in1 - int(8.0) ))\\nres0 = mod(int(3.0),in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 990, "mapping_values": [1, 5, 5, 1, 4, 4, 4, 1, 1, 0, 2, 1, 1, 1, 0, 11, 3, 19, 4, 3, 3, 3]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0], [], [1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 8, 3, 6, 2, 0, 4, 3, 8, 8, 2], [4, 2], [2, 2], [], [1, 1], [0, 0], [], [], [], [1, 6, 4, 1, 0, 0, 1, 5, 4, 3, 3], [0, 0, 1, 1], [2, 3, 1, 0, 2, 1, 2, 0, 1, 0, 2, 1, 3, 0, 0, 0, 2, 3, 1, 3, 2, 1, 3, 1, 2, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1], [2, 1, 2, 0, 2], [1, 0, 2, 1, 0, 0], [1, 1, 1]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = ( abs(int(2.0)) - res0 )\\nin1 = ( int(8.0) + mod(i1,int(3.0)) )\\ni0 *= i0\\nb2 = ( int(6.0) - max(i1, in2) ) \\le in1\\nin0 += ( abs(int(2.0)) + min(mod(int(0.0),abs(int(4.0))), mod(int(3.0),int(8.0))) )\\nb2 = int(82.0) == in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 0, 6, 11, 11, 2, 2, 0, 2, 2, 0, 0, 0, 11, 4, 29, 7, 5, 6, 3]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 3], [0], [1, 0], [1], [0, 0, 1], [0], [3, 0], [], [], [2], [], [3, 0, 1, 1], [], [0], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( b0 or min(i2, int(8.0)) \\l int(3.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 2, 1, 3, 1, 2, 0, 0, 1, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [8], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 992, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1, 1, 1], [5, 8, 7, 9], [], [], [], [], [], [], [], [], [3, 6, 0, 1], [0, 0], [3, 2, 1, 2, 1, 1, 3, 0, 0, 1], [1, 0], [1, 1], [0], [0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = max(divInt(int(5.0),( int(8.0) + int(7.0) )), max(res0, i0))\\ni1 = int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 10, 2, 2, 1, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1], [2, 0, 1, 0, 2, 1, 1], [1, 1], [1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1], [5, 8, 6, 6, 5, 3], [0, 2, 5, 1], [0, 0, 0, 1], [], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0], [0, 2], [], [], [5, 2, 6, 1, 0, 2, 5, 5, 4, 6, 0], [0, 0], [0, 0, 1, 3, 1, 1, 3, 3, 0, 1, 0, 0, 1, 2, 2, 0, 1, 3, 0, 2, 0, 0], [0, 1, 1], [1, 2, 0, 2], [0], [0, 0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in2 \\l i2:{:\\nres0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b0\\ni1 = max(int(8.0), int(6.0))\\nloopBreak% = 0\\nwhile abs(min(i0, int(6.0))) == i2:{:\\nb0 = not in2 != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( divInt(in2,int(3.0)) + abs(in1) ) \\g divInt(res0,i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 7, 7, 2, 5, 6, 6, 4, 4, 0, 6, 4, 2, 0, 0, 11, 2, 22, 3, 4, 1, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [1, 1, 1, 1, 1], [7, 1, 6, 7, 1], [], [], [], [], [], [], [], [], [4, 3, 4, 2, 2, 5], [0, 1], [2, 1, 1, 3, 3, 2, 2, 3, 3, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1], [1, 0, 0, 1], [0, 1], [1, 0]], "fitness": 99, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = ( int(7.0) + int(1.0) )\\nin0 -= max(min(mod(divInt(min(max(in1, i2), int(6.0)),i2),in2), int(7.0)), int(1.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 16, 3, 4, 2, 2]}, {"genotype": [[0], [1], [1], [], [0], [], [], [2], [0], [], [1], [0], [], [], [], [1, 1], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i1 == i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [1], [], [0, 0], [], [2, 1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [0, 1], [], [], [], [], [], [], [], [], [6, 1, 3, 2], [0], [2, 3, 0, 2, 2, 0, 0, 3, 1, 1], [0, 1, 0], [2, 1], [0, 1], [1]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = ( abs(i1) + mod(( in0 - i2 ),max(int(0.0), int(1.0))) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 10, 3, 2, 2, 1]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 0, 2, 1], [0, 1, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 1, 0, 4, 0, 3, 8, 7, 6, 2, 4], [2, 4, 1], [2, 1], [1], [1, 0, 0, 0, 1, 1], [0, 0, 0], [1, 3, 0], [1], [0], [4, 2, 4, 3, 1, 5, 3, 4, 6, 1], [0], [1, 3, 1, 0, 2, 1, 1, 1, 3, 2, 3, 2, 3, 2, 2, 2, 0, 2, 0, 3, 1, 1, 2, 3, 1, 0, 2, 0, 3, 2, 3, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 2, 2, 1, 1, 2, 2], [2, 2], [0, 1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(5.0) == max(int(7.0), in1):{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = ( b1 or divInt(int(1.0),int(0.0)) \\le int(4.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(mod(abs(( abs(divInt(( divInt(i2,divInt(in1,max(int(0.0), int(3.0)))) * mod(max(int(8.0), in0),mod(i1,abs(divInt(abs(int(7.0)),int(6.0))))) ),in2)) * in0 )),in1), int(2.0)) \\g int(4.0):{:\\nres0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 12, 12, 3, 2, 1, 6, 3, 3, 1, 1, 10, 1, 39, 10, 8, 2, 8]}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 2, 1, 1, 0, 1, 2, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 3, 6, 9, 2, 2, 1, 2, 3, 8, 3, 4, 6, 4, 9, 2, 9, 8, 3, 0, 7, 8, 0, 4, 6, 5, 8, 6, 9, 2, 0, 3, 8, 6, 9, 5, 7, 3, 1, 8, 6, 5, 5, 0, 6, 5, 5, 2, 6, 5, 9, 5, 9, 3, 9, 1, 2, 2, 4, 6, 8, 0, 9, 0, 0, 6, 3, 8, 9, 4, 1, 4, 2, 0, 0, 9, 7, 6, 5, 5, 4, 6, 2, 6, 0, 6, 1, 1, 5, 1, 9, 1, 3, 4, 4, 9, 8, 7, 0, 4, 1, 6, 9, 6, 7, 5, 1, 6, 1], [3, 4, 0, 3, 0, 1, 0], [1, 0, 1, 0, 2, 0, 2], [1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 3, 1, 1, 1, 0, 1, 2, 0], [0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1], [4, 3, 5, 2, 3, 0, 3, 4, 1, 3, 4, 6, 0, 5, 5, 5, 0, 1, 2, 2, 6, 3, 0, 4, 5, 4, 1, 4, 4, 0, 3, 2, 6, 6, 2, 5, 3, 5, 6, 6, 0, 0, 3, 1, 6, 4, 1, 1, 4, 2, 5, 5, 4, 3, 6, 2, 2, 4, 1, 5, 3, 6, 1, 6, 4, 1, 1, 4, 0, 0, 6, 4, 5, 5, 5, 2, 5, 4, 0, 6, 0, 3, 5, 4, 1, 4, 0, 1, 2, 4, 2, 3, 0, 2, 5, 6, 2, 1, 5, 1, 6, 0, 2, 6, 2, 3, 1, 3, 1, 4, 0, 4], [1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 0, 0, 2, 2, 3, 3, 1, 0, 0, 3, 2, 2, 2, 3, 0, 3, 2, 3, 3, 1, 2, 0, 3, 1, 2, 2, 1, 2, 2, 2, 3, 0, 1, 2, 0, 3, 0, 0, 3, 0, 2, 2, 2, 1, 1, 0, 2, 3, 1, 3, 1, 3, 3, 2, 0, 1, 1, 2, 0, 0, 2, 2, 0, 2, 1, 1, 3, 3, 1, 2, 1, 0, 0, 3, 3, 1, 0, 0, 0, 3, 0, 0, 2, 0, 1, 3, 0, 1, 0, 3, 3, 1, 1, 3, 3, 1, 3, 3, 1, 0, 2, 2, 2, 3, 1, 2, 0, 2, 0, 2, 3, 3, 3, 2, 0, 0, 2, 1, 2, 3, 0, 0, 2, 1, 1, 1, 2, 3, 2, 1, 3, 1, 1, 3, 3, 0, 1, 0, 2, 2, 1, 0, 0, 3, 3, 2, 1, 3, 3, 1, 2, 2, 3, 1, 1, 2, 0, 3, 0, 3, 3, 3, 1, 2, 3, 0, 1, 3, 1, 2, 3, 1, 0, 2, 0, 0, 3, 1, 3, 3, 1, 3, 1, 2, 3, 3, 0, 2, 0, 1, 3, 0, 3, 0, 2, 0, 3, 1, 3, 1, 0, 2, 2, 1, 1, 3, 2, 3, 1, 0, 0, 2, 1, 2, 1, 3, 3, 1, 1, 0, 1, 1, 3, 3, 3, 0, 0, 2, 3, 3, 0, 3, 3, 3, 1, 0, 0, 3, 1, 1, 2, 3, 2, 0, 1, 3, 0, 1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 0, 0, 2, 3, 0, 1, 1, 2, 0, 3, 2, 0, 2, 3, 3, 3, 3, 0, 0, 0, 2, 1, 2, 2, 1, 3, 3, 2, 1, 0, 2, 2, 3, 3, 2, 2, 3, 3, 1, 2, 0, 1, 1, 1, 2, 2, 1, 2, 3, 1, 1, 3, 3, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0, 1, 3, 0, 2, 2, 0, 3, 3, 3, 0, 2, 2, 1, 0, 1, 3, 2, 0, 1, 3, 1, 1, 2, 1, 2, 0, 1, 2, 2, 3, 3, 3, 2, 3, 1, 3, 1, 3, 1, 0, 1, 2, 2, 2, 0, 0, 3, 2, 0, 0, 2, 0, 1, 1, 2, 1, 3, 3, 2, 3, 1, 2, 3, 1, 3, 2, 3, 3, 3, 3, 3, 1, 3, 2, 3, 3, 1, 0, 3, 3, 1, 0, 1, 3, 1, 3, 1, 1, 1, 3, 3, 1, 2, 3, 3, 0, 0, 2, 0, 0, 3, 0, 1, 0, 2, 1, 2, 2, 2, 2, 0, 2, 0, 1, 1, 1, 1, 3, 0, 0, 0, 0, 3, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [2, 1, 1, 1, 2, 0, 0, 2, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 0, 1, 0, 0, 2, 2, 2, 1, 2, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 2, 0, 0, 2, 1, 1, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 2, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 0, 0, 2, 1, 0, 2, 0, 2, 2, 1, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 0, 2, 1, 0, 2], [2, 2, 1, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 1, 0, 2, 2, 0, 0, 2, 1, 0, 1, 2, 1, 2, 2, 1, 1, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= int(0.0)\\nif in0 \\ge in2:{:\\ni2 *= ( ( abs(max(int(0.0), in0)) - i0 ) - max(( ( ( max(in0, abs(mod(min(min(int(3.0), divInt(in1,abs(int(6.0)))), divInt(divInt(int(9.0),mod(( divInt(min(i1, int(2.0)),divInt(in0,max(in1, res0))) + max(i0, ( divInt(mod(int(2.0),int(1.0)),in2) * ( min(int(2.0), max(int(3.0), max(max(( in2 + int(8.0) ), int(3.0)), ( in2 + i0 )))) - divInt(divInt(i1,divInt(int(4.0),int(6.0))),max(max(int(4.0), mod(int(9.0),i2)), i2)) ) )) ),max(max(int(2.0), res0), in0))),i0)),abs(in1)))) - in2 ) + divInt(in1,int(9.0)) ) + min(i1, int(8.0)) ), in1) )\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nif ( max(abs(int(3.0)), int(0.0)) \\le abs(min(int(7.0), abs(abs(int(8.0))))) or True ):{:\\nif in1 \\l divInt(divInt(mod(abs(int(0.0)),( i0 * divInt(in0,( abs(max(abs(divInt(i2,res0)), mod(int(4.0),( abs(res0) - i2 )))) + ( int(6.0) + int(5.0) ) )) )),int(8.0)),( abs(( int(6.0) + max(int(9.0), int(2.0)) )) - abs(abs(in2)) )):{:\\nb1 = False\\n:}\\n:}else:{:\\nif int(0.0) \\ge in0:{:\\nin2 = mod(( int(3.0) + res0 ),res0)\\n:}else:{:\\nif min(min(( int(8.0) * max(min(int(6.0), mod(( min(int(9.0), int(5.0)) * divInt(i0,min(i0, min(max(abs(int(7.0)), mod(abs(in0),int(3.0))), min(int(1.0), mod(max(int(8.0), i1),divInt(res0,in1)))))) ),min(int(6.0), min(abs(int(5.0)), abs(int(5.0)))))), mod(abs(max(i1, mod(i1,int(0.0)))),abs(in1))) ), max(i2, ( in2 + min(int(6.0), min(int(5.0), in2)) ))), divInt(mod(int(5.0),int(2.0)),max(divInt(min(int(6.0), in1),in0), divInt(int(5.0),mod(int(9.0),max(min(int(5.0), int(9.0)), res0)))))) \\l int(3.0):{:\\nb0 = False\\n:}else:{:\\nb1 = b0\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(9.0)\\n:}\\nif False:{:\\ni2 *= min(max(min(in1, i1), ( max(min(in2, abs(max(abs(int(1.0)), in0))), res0) - max(int(2.0), int(2.0)) )), divInt(min(mod(i1,int(4.0)), abs(res0)),int(6.0)))\\nin1 += ( ( int(8.0) - i1 ) * ( ( int(0.0) - divInt(int(9.0),i1) ) * in1 ) )\\ni0 *= mod(abs(i0),int(0.0))\\n:}else:{:\\nb2 = int(0.0) \\g mod(res0,min(( in1 - ( min(abs(max(max(in2, in2), in2)), ( int(6.0) - ( divInt(int(3.0),abs(abs(( int(8.0) + i2 )))) + divInt(( min(abs(divInt(mod(max(max(int(9.0), mod(in2,int(4.0))), int(1.0)),int(4.0)),mod(( int(2.0) * ( min(int(0.0), int(0.0)) + abs(max(min(in1, int(9.0)), i0)) ) ),res0))), abs(i0)) + in0 ),in2) ) )) + in1 ) ), int(7.0)))\\nloopBreak% = 0\\nwhile abs(i1) \\l divInt(divInt(in1,abs(max(min(i0, ( mod(int(6.0),i1) + int(5.0) )), min(mod(i2,int(5.0)), max(int(4.0), int(6.0)))))),divInt(int(2.0),( in1 * int(6.0) ))):{:\\ni2 *= divInt(divInt(abs(abs(max(( min(int(0.0), min(int(6.0), max(int(1.0), in0))) * int(1.0) ), ( mod(divInt(i0,i2),min(( in2 * res0 ), divInt(i2,int(5.0)))) - int(1.0) )))),divInt(int(9.0),min(abs(( max(int(1.0), ( min(int(3.0), abs(( min(abs(abs(max(min(int(4.0), max(divInt(abs(min(int(4.0), i1)),min(max(int(9.0), in2), int(8.0))), max(int(7.0), max(int(0.0), int(4.0))))), int(1.0)))), max(max(int(6.0), divInt(min(abs(i1), res0),( i0 * i2 ))), max(res0, int(9.0)))) + i2 ))) + ( int(6.0) * divInt(divInt(mod(( in0 - ( i1 + int(7.0) ) ),int(5.0)),int(1.0)),int(6.0)) ) )) * min(in0, i1) )), in1))),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not b2\\n:}\\nin1 -= abs(int(1.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 22, 22, 8, 14, 110, 110, 7, 7, 1, 16, 7, 9, 5, 6, 112, 9, 445, 105, 127, 53, 60]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 2, 1, 0], [1, 1, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 5, 0, 7, 1, 9, 4, 8, 0, 9, 6, 6, 5, 9, 6, 5, 2, 9, 1, 8, 5], [5, 2, 2], [1, 0], [0], [1, 0, 0, 1, 1, 0, 0], [0, 0, 0], [2, 3, 1, 0], [1], [0], [6, 1, 4, 1, 0, 1, 2, 6, 1, 4, 6, 5, 3, 3, 5, 0, 5, 4, 2, 5, 6, 4, 6, 4], [1], [1, 3, 1, 1, 2, 1, 0, 0, 0, 3, 3, 2, 2, 0, 0, 3, 2, 0, 2, 0, 1, 3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 3, 2, 0, 3, 1, 2, 2, 1, 0, 2, 0, 3, 1, 3, 2, 0, 1, 2, 2, 3, 1, 2, 3, 3, 0, 3, 0, 0, 1, 1, 3, 0, 2, 1, 0, 0, 0, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 0, 1, 3, 1, 3, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 0, 0, 1], [2, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(1.0) != min(int(0.0), int(9.0)):{:\\nloopBreak% = 0\\nwhile not ( divInt(int(5.0),res0) == i1 and in1 == min(max(( divInt(i1,i0) * max(mod(i1,divInt(i2,int(0.0))), min(max(divInt(max(( max(( mod(res0,int(7.0)) - max(( i1 + max(int(1.0), divInt(( int(9.0) - in1 ),( res0 + abs(int(4.0)) ))) ), min(divInt(in2,int(8.0)), mod(( min(int(0.0), ( max(min(in0, max(in0, in2)), int(9.0)) - int(6.0) )) + min(i0, mod(int(6.0),in2)) ),in1))) ), i2) - ( int(5.0) - int(9.0) ) ), in2),int(6.0)), int(5.0)), ( int(2.0) + int(9.0) ))) ), int(1.0)), divInt(res0,int(8.0))) ):{:\\nif False:{:\\nin1 *= min(int(5.0), max(res0, in1))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 3, 2, 23, 23, 3, 2, 1, 7, 3, 4, 1, 1, 24, 1, 86, 21, 19, 11, 11]}, {"genotype": [[0], [1], [1], [], [0], [], [], [1], [2], [], [1], [0], [], [], [], [4, 3, 2], [], [3, 0, 0, 0], [], [1], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(in1, in0) \\g i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 0, 1], [6, 6, 5, 3, 4, 0, 5, 5], [3, 1], [2, 1, 0], [1], [0, 1, 0, 1], [0, 0], [3, 0], [], [], [0, 3, 4, 0, 2, 4], [], [1, 3, 2, 1, 1, 3, 2, 0, 1, 2, 0, 0, 3, 2, 3, 3, 2, 0, 3, 0, 2, 0, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0], [1, 0, 2, 2, 2, 2], [1], [1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( int(6.0) \\ge max(mod(int(6.0),int(5.0)), min(mod(i0,int(3.0)), divInt(in0,in1))) or b1 )\\nb0 = abs(mod(abs(abs(mod(i0,abs(i2)))),divInt(in1,( int(4.0) - int(0.0) )))) \\g int(55.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 8, 8, 2, 3, 1, 4, 2, 2, 0, 0, 6, 0, 26, 7, 6, 1, 6]}, {"genotype": [[0], [0, 1, 1, 1], [0, 2, 2, 0], [0, 1], [0, 1], [1, 1, 1], [1, 9, 6], [5, 1, 1], [0], [], [1, 1, 0, 1], [0, 0, 0], [2], [], [0], [2, 0, 6, 6, 3], [1], [1, 1, 3, 0, 0, 1, 0, 0], [], [2], [0], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(1.0) != int(9.0)\\nif abs(i2) \\g i0:{:\\nloopBreak% = 0\\nwhile not int(6.0) \\g res0:{:\\nres0 += in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 3, 3, 3, 1, 0, 4, 3, 1, 0, 1, 5, 1, 8, 0, 1, 1, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 2, 5, 3, 5, 2, 8, 7, 4, 3, 1, 3, 0, 5, 5, 8, 2, 4], [5], [2, 1, 2], [], [0, 0, 1], [0], [0, 2], [], [], [0, 2, 2, 5, 5, 3, 0, 0, 6, 0], [0], [3, 1, 3, 2, 0, 2, 2, 2, 2, 3, 3, 3, 1, 3, 2, 2, 3, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 1, 2, 2, 0, 1, 3, 1, 3, 2, 3, 3, 1, 3, 0, 1, 1, 1, 2, 0, 1, 2, 2, 1, 1, 2, 1, 2, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [2, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 1], [0, 2, 1, 0, 0, 2, 2, 0, 1, 0, 2, 1], [1, 1, 0, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b1\\ni0 = abs(int(5.0))\\nb2 = not max(( i2 + mod(( ( ( max(max(abs(int(5.0)), abs(( mod(abs(i2),in2) * int(2.0) ))), int(5.0)) - int(3.0) ) + int(5.0) ) + int(2.0) ),( divInt(( ( in2 * int(8.0) ) * mod(( in0 + int(7.0) ),abs(int(4.0))) ),abs(mod(min(min(int(3.0), max(i0, int(1.0))), int(3.0)),int(0.0)))) - ( i0 + int(5.0) ) )) ), divInt(( int(5.0) * int(8.0) ),divInt(int(2.0),( int(4.0) - res0 )))) != i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 19, 19, 1, 3, 0, 3, 1, 2, 0, 0, 10, 1, 59, 19, 12, 12, 7]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1, 1], [0, 3, 9, 1], [1], [2], [], [1], [0], [], [], [], [2], [], [1, 3, 1, 3, 1, 0], [], [1, 0], [], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(03.0) \\g max(int(9.0), min(int(1.0), i2))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 6, 0, 2, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 0, 0, 2, 0], [0, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 5, 6, 8, 0, 2, 1, 5, 4, 3, 2, 2, 9, 1, 2, 0, 1, 8, 7], [4, 5, 4, 2], [2], [1], [0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0], [2, 2, 2, 3], [], [0], [0, 3, 5, 0, 0, 3, 5, 5, 1, 5, 5, 0, 1, 3, 2, 3, 5, 1, 4, 6, 0, 5, 6, 3, 0, 5, 3], [0, 1], [0, 2, 1, 0, 0, 2, 1, 2, 2, 2, 1, 2, 2, 3, 1, 3, 2, 1, 3, 0, 0, 0, 2, 3, 0, 1, 2, 0, 0, 1, 0, 3, 1, 2, 3, 1, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 0, 3, 3, 2, 0, 2, 0, 3, 1, 2, 3, 0, 3, 1, 3, 2, 0, 1, 3, 0, 1, 3, 0, 1, 1, 3, 1, 2, 2, 0, 3, 2, 0, 0, 0, 2, 0, 0, 3, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0], [2, 1, 0, 2, 1, 2, 1, 2, 0, 1, 0, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 2, 1, 1, 2, 1, 0, 2], [0, 1, 0, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not not not ( i0 \\le ( int(9.0) + in0 ) or in2 != ( int(1.0) - ( divInt(mod(int(5.0),( ( abs(int(6.0)) - max(( int(8.0) - min(i0, i0) ), in0) ) + ( abs(in2) - int(0.0) ) )),divInt(in2,i1)) * int(2.0) ) ) ):{:\\nin2 = in2\\ni0 -= max(int(1.0), divInt(abs(int(5.0)),int(4.0)))\\nloopBreak% = 0\\nwhile i1 \\le ( max(in0, int(3.0)) - abs(min(max(mod(i2,min(abs(mod(in0,divInt(in2,abs(int(2.0))))), divInt(max(i1, abs(int(2.0))),min(( in1 * int(9.0) ), min(res0, int(1.0)))))), min(i0, int(2.0))), int(0.0))) ):{:\\nb2 = min(int(1.0), mod(( in2 - min(( res0 + in0 ), i0) ),( in2 * in0 ))) == min(int(8.0), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 20, 20, 4, 1, 1, 8, 4, 4, 0, 1, 27, 2, 87, 21, 21, 13, 9]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [3, 2], [3], [2], [], [1], [0], [], [], [], [3], [], [3, 0, 1, 3, 1], [], [1, 2], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(in0, int(3.0)) \\ge abs(int(2.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 5, 0, 2, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [9, 3, 6], [], [], [], [], [], [], [], [], [0], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(936.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [0, 1, 1], [1, 1, 1, 1, 1, 0, 1], [9, 2, 2, 4, 3, 7, 0], [4], [1], [0], [0, 0, 0, 1], [0], [3, 2, 1], [0], [], [4, 2, 6, 5, 3, 3, 2, 5, 4], [0, 1], [3, 2, 3, 3, 1, 0, 3, 1, 2, 1, 3, 3, 2, 3, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 0, 0, 0, 0], [1, 2, 2, 0, 1, 0, 2], [0, 0, 0, 1, 1, 2], []], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( not True and max(( abs(abs(int(9.0))) + in1 ), min(int(2.0), ( int(2.0) + max(min(( abs(i2) + int(4.0) ), ( res0 - in2 )), int(3.0)) ))) \\le ( in0 - in0 ) )\\ni2 = int(70.0)\\nin2 *= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 7, 7, 1, 1, 1, 4, 1, 3, 1, 0, 9, 2, 25, 5, 7, 6, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 6, 3, 3, 7, 6], [0], [1], [], [1], [0], [], [], [], [4, 2, 6, 3, 5, 3, 1, 4, 4, 6, 2], [1], [2, 2, 2, 3, 2, 3, 1, 2, 0, 0, 0, 1, 1, 3, 0, 1, 2, 1, 3, 2, 1, 2, 0, 0, 2, 3, 2, 0, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [1, 2, 1, 1, 0], [2, 0, 2, 1, 0, 0], [0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 *= divInt(divInt(mod(max(( abs(int(0.0)) + ( i2 * res0 ) ), in0),int(0.0)),int(6.0)),max(in2, int(3.0)))\\nb1 = ( int(3.0) - max(mod(int(7.0),( in0 + i1 )), ( min(mod(in1,int(6.0)), in1) + res0 )) ) \\l i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 11, 1, 32, 10, 5, 6, 5]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 2, 2, 1, 1, 0, 1], [0, 1, 0], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 0, 7, 4, 7, 5, 0, 2, 7], [3, 0, 3], [2, 2, 1], [], [0, 1, 1, 0, 0, 1], [0, 0, 0], [0, 2, 1], [0], [0, 1], [4, 0, 4, 3, 2, 4, 0, 4, 3, 3, 4, 1], [1, 0], [0, 2, 3, 1, 1, 0, 3, 1, 3, 2, 0, 2, 0, 3, 3, 0, 2, 0, 3, 1, 0, 1, 0, 1, 3, 3, 3, 0, 1, 0, 3, 1, 1, 1], [0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 0, 2, 2], [2, 1, 2], [0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nloopBreak% = 0\\nwhile in1 \\ge ( min(int(0.0), int(3.0)) * i0 ):{:\\nif min(int(0.0), max(divInt(in1,mod(in0,min(max(i2, ( in1 - max(int(7.0), i0) )), int(4.0)))), in1)) \\l int(7.0):{:\\nb2 = not True\\n:}else:{:\\nin0 *= max(min(abs(in0), int(5.0)), in1)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(int(0.0))\\nb1 = int(2.0) \\ge int(7.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 10, 10, 3, 3, 0, 6, 3, 3, 1, 2, 12, 2, 34, 4, 10, 3, 2]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 6, 7, 4, 7, 0, 1, 5, 6, 7, 9, 4, 2, 1, 6, 3, 4, 2, 0, 4, 7, 9, 7, 7, 6, 7], [], [], [], [], [], [], [], [], [0, 5, 2, 2, 0, 5, 3, 6, 0, 3, 0, 0, 5, 4, 3, 5, 5, 2, 3, 0, 4], [0, 1], [3, 2, 3, 1, 0, 3, 3, 2, 3, 0, 3, 2, 3, 1, 0, 1, 3, 2, 1, 3, 1, 2, 3, 0, 3, 2, 0, 0, 3, 3, 3, 3, 3, 2, 1, 3, 2, 0, 1, 2, 0, 2, 2, 3, 0, 0, 1, 3, 3, 1, 1, 2, 3, 0, 2, 0, 1, 0, 1, 3, 3, 0, 0, 2, 2, 1, 0, 1, 2, 2, 3, 1, 2, 1, 2, 2, 3, 2, 2, 1, 1, 2, 3, 3, 3, 2, 1, 1, 3, 3, 2, 1, 3, 0, 0, 1, 0, 2, 1, 3, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 1, 2, 0, 2, 1, 0, 2, 2, 0, 2, 2, 2, 2, 2, 1, 1, 0], [2, 0, 0, 0, 1, 0, 0, 1, 2, 1, 2, 2, 2, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = abs(( max(int(7.0), in2) * abs(max(( abs(i2) + min(mod(min(int(5.0), i2),int(6.0)), min(( int(7.0) + max(int(4.0), divInt(abs(i0),min(divInt(in2,in0), abs(min(max(max(max(( int(7.0) + abs(divInt(res0,int(0.0))) ), mod(i0,( divInt(min(in0, i0),int(1.0)) - abs(max(int(5.0), int(6.0))) ))), ( min(i0, ( in2 + int(7.0) )) + in1 )), int(9.0)), abs(abs(in0))))))) ), in2)) ), divInt(( int(4.0) - in2 ),int(2.0)))) ))\\ni2 *= mod(divInt(min(int(1.0), ( int(6.0) - ( ( abs(( ( int(3.0) * int(4.0) ) * mod(abs(abs(abs(mod(int(2.0),int(0.0))))),abs(max(mod(int(4.0),max(in0, i0)), int(7.0)))) )) * in1 ) - divInt(int(9.0),min(int(7.0), int(7.0))) ) )),int(6.0)),int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 27, 27, 0, 0, 0, 0, 0, 0, 0, 0, 21, 2, 104, 26, 32, 14, 13]}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 1, 0], [0], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 8, 6, 8, 9, 8, 6, 1, 7, 9, 4, 1, 3, 3, 4, 0, 3, 8, 1, 9], [1, 4, 4], [1, 0, 2, 0, 1], [0], [1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0], [2, 3, 0, 2, 0], [], [0], [1, 3, 1, 6, 5, 2, 4, 1, 6, 2, 0, 0, 3, 3, 0], [], [2, 1, 1, 1, 1, 2, 2, 0, 3, 2, 3, 2, 1, 3, 1, 0, 1, 0, 0, 2, 2, 2, 0, 3, 2, 1, 3, 3, 3, 2, 0, 2, 0, 1, 3, 3, 2, 3, 0, 0, 2, 3, 2, 1, 1, 1, 1, 1, 3, 2, 1, 0, 2, 0, 3, 2, 2, 2, 2, 1, 1, 0, 1, 3, 0, 3, 1, 0, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 2, 1, 0, 1, 0, 2, 0, 0, 2, 2, 0, 2], [0, 0, 2, 2, 0, 2, 2, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = divInt(int(1.0),int(5.0)) \\g int(7.0)\\nif not int(8.0) \\le mod(divInt(i1,min(( min(divInt(int(6.0),min(int(8.0), in0)), int(9.0)) + i1 ), res0)),divInt(( ( in2 + abs(divInt(int(8.0),max(min(max(( i2 * ( in1 * int(6.0) ) ), min(abs(( min(i1, res0) + mod(min(( int(1.0) * int(7.0) ), int(9.0)),int(4.0)) )), int(1.0))), abs(mod(int(3.0),i2))), divInt(i0,abs(( ( mod(divInt(int(3.0),int(4.0)),i0) * int(0.0) ) - min(in0, abs(int(3.0))) )))))) ) - in0 ),int(8.0))):{:\\nb0 = ( b2 and mod(int(1.0),i0) \\le int(9.0) )\\n:}\\nb0 = not b1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 22, 22, 3, 5, 1, 8, 3, 5, 0, 1, 15, 0, 73, 21, 15, 9, 12]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 2, 1, 0, 2, 0, 0, 1, 2, 0, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 0, 0, 9, 3, 8, 1, 1, 4, 6, 6, 0, 2, 0, 3, 6, 4, 0, 4, 9, 3, 1, 6, 5, 5, 4, 5, 9, 6, 1, 5, 2, 0, 8, 4, 6, 9, 8, 0, 2, 5, 4, 0, 0, 0, 2, 8, 0, 5, 8, 0, 1, 3, 4, 3, 2, 1, 6, 0, 0, 5, 0, 2, 6, 1, 3, 1, 7, 1, 2, 8, 3, 9, 9, 1, 4, 6, 4, 6, 6, 5, 9, 3, 1, 1, 1, 4, 4, 7, 5, 7, 3, 1, 0, 4, 3, 3, 8, 4, 9, 1, 3, 0, 7, 5, 5, 2, 2, 0, 4, 6, 4, 2, 6, 0, 3, 1, 4, 9, 5, 6, 1, 4, 7, 2, 8, 2, 2, 6, 5, 7, 3, 8, 4, 5, 0, 1, 8, 5, 3, 2, 0, 1, 2, 0, 9, 0, 6, 5, 5, 0, 5, 0, 1, 0, 8, 0, 4, 1, 1, 5, 9, 2, 6, 6, 2, 3, 0, 2, 4, 2, 0, 1, 8, 0, 9, 6, 1, 3, 5, 8, 2, 1, 4, 9, 4, 6, 4, 6, 6, 4, 3, 3, 1, 8, 1, 3, 7, 8, 1, 3, 0, 6, 9, 5, 0, 4, 6, 8, 0, 5, 0, 0, 8, 8, 3, 9, 2, 2, 6, 3, 1, 8, 0, 8, 9, 7], [0, 0, 2, 4, 1, 3, 4, 0, 2, 3, 5, 2, 1], [0, 0, 2, 1, 0, 0], [1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 2, 3, 1, 2], [1, 0], [1, 1, 1, 0], [1, 1, 0, 3, 5, 0, 3, 4, 5, 5, 5, 6, 3, 1, 4, 3, 0, 0, 1, 3, 3, 0, 0, 1, 1, 3, 2, 2, 4, 2, 5, 6, 2, 6, 5, 2, 6, 5, 3, 2, 4, 6, 2, 1, 2, 6, 1, 3, 6, 6, 1, 1, 5, 3, 1, 1, 2, 4, 2, 4, 5, 1, 1, 2, 0, 3, 1, 6, 0, 6, 3, 3, 4, 3, 1, 4, 1, 0, 3, 2, 3, 1, 3, 0, 1, 6, 2, 4, 4, 4, 5, 6, 3, 6, 0, 4, 3, 3, 4, 2, 4, 5, 0, 0, 1, 2, 0, 5, 5, 0, 5, 5, 2, 0, 1, 5, 6, 3, 4, 2, 3, 1, 3, 5, 3, 0, 4, 2, 4, 0, 4, 4, 5, 1, 4, 3, 6, 3, 5, 2, 1, 4, 4, 5, 4, 3, 1, 6, 0, 3, 2, 3, 5, 0, 2, 4, 5, 4, 3, 5, 0, 4, 1, 4, 2, 2, 0, 4, 6, 3, 3, 5, 1, 5, 2, 4, 1, 6, 0, 0, 5, 6, 4, 3, 5, 6, 1, 4, 5, 2, 6, 0, 1, 1, 4, 4, 2, 3, 0, 1, 6, 6, 6, 4, 3, 1, 6, 2, 1, 3, 3, 4, 6, 3, 5, 4, 6, 1, 5, 3, 3, 2, 1, 6, 0, 1, 1, 5, 4, 6, 4, 5, 2, 2, 0, 0, 1, 5, 2, 2, 6, 5, 3, 5, 1, 3, 1, 3, 5, 4, 6, 2, 1, 1, 1, 5, 3, 2, 6, 5, 6, 2, 6, 5, 5, 6], [1, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 3, 3, 2, 3, 1, 1, 1, 0, 2, 1, 0, 3, 0, 3, 0, 0, 2, 1, 2, 3, 3, 2, 3, 3, 3, 1, 1, 0, 1, 2, 3, 2, 2, 2, 0, 3, 3, 2, 3, 1, 2, 2, 2, 0, 3, 2, 2, 2, 3, 1, 3, 2, 0, 2, 3, 1, 1, 2, 1, 1, 3, 1, 2, 1, 2, 3, 3, 1, 3, 0, 2, 2, 2, 3, 1, 3, 3, 0, 3, 2, 2, 0, 3, 3, 0, 2, 3, 2, 2, 0, 2, 1, 3, 0, 0, 1, 3, 3, 0, 2, 1, 0, 3, 1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 1, 3, 0, 3, 3, 2, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 1, 2, 3, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 0, 2, 2, 1, 0, 2, 0, 3, 1, 1, 1, 2, 1, 0, 3, 0, 2, 3, 0, 0, 1, 1, 3, 0, 2, 3, 2, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 2, 3, 0, 2, 3, 2, 3, 3, 3, 3, 1, 1, 1, 3, 3, 1, 2, 1, 0, 3, 0, 2, 2, 2, 3, 2, 1, 0, 1, 0, 3, 3, 3, 3, 2, 3, 3, 2, 3, 1, 1, 2, 1, 2, 2, 0, 2, 3, 0, 1, 0, 2, 2, 2, 0, 2, 2, 3, 3, 3, 2, 2, 2, 3, 3, 2, 1, 3, 2, 3, 1, 0, 3, 1, 0, 0, 0, 0, 1, 0, 2, 2, 3, 1, 3, 1, 3, 2, 2, 3, 2, 0, 2, 0, 0, 1, 3, 3, 0, 3, 2, 1, 0, 2, 1, 3, 1, 1, 2, 1, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 0, 1, 0, 3, 3, 1, 0, 0, 1, 0, 1, 3, 3, 3, 0, 2, 1, 0, 1, 1, 2, 0, 3, 1, 1, 1, 1, 3, 2, 3, 3, 3, 0, 2, 0, 2, 3, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 3, 3, 2, 0, 2, 0, 2, 3, 2, 0, 3, 2, 3, 3, 1, 1, 3, 2, 0, 2, 3, 2, 0, 0, 2, 2, 2, 1, 0, 2, 1, 3, 2, 2, 2, 0, 0, 2, 2, 3, 0, 1, 3, 2, 1, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 3, 3, 3, 3, 2, 1, 3, 3, 0, 0, 3, 3, 2, 0, 0, 2, 3, 3, 0, 0, 2, 1, 0, 2, 2, 2, 2, 1, 2, 0, 1, 2, 0, 3, 3, 1, 2, 0, 0, 1, 1, 3, 0, 0, 0, 0, 0, 3, 0, 1, 2, 0, 3, 3, 1, 1, 3, 3, 3, 3, 2, 1, 2, 3, 2, 3, 0, 2, 1, 0, 1, 3, 2, 0, 1, 0, 0, 2, 0, 1, 1, 3, 3, 3, 0, 3, 3, 2, 1, 1, 0, 1, 1, 2, 2, 0, 2, 2, 2, 1, 0, 0, 0, 2, 1, 2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 0, 2, 2, 2, 1, 1, 1, 1, 2, 3, 1, 3, 2, 3, 1, 3, 0, 2, 2, 0, 2, 1, 2, 3, 3, 2, 0, 3, 2, 3, 3, 3, 2, 0, 0, 2, 3, 0, 1, 0, 2, 1, 3, 1, 1, 2, 1, 1, 3, 1, 1, 1, 0, 3, 1, 3, 1, 3, 2, 0, 0, 1, 1, 0, 3, 3, 3, 0, 2, 2, 2, 1, 1, 0, 3, 2, 0, 3, 3, 3, 2, 1, 0, 3, 1, 0, 3, 2, 3, 2, 2, 1, 1, 1, 0, 0, 3, 0, 2, 3, 1, 0, 2, 3, 2, 1, 3, 1, 0, 3, 2, 1, 3, 2, 0, 0, 2, 0, 1, 3, 3, 1, 2, 3, 0, 3, 0, 0, 3, 3, 0, 1, 0, 1, 1, 3, 3, 1, 1, 2, 2, 0, 0, 1, 0, 2, 2, 1, 0, 1, 3, 3, 1, 0, 3, 2, 1, 0, 2, 1, 0, 0, 3, 0, 3, 3, 0, 3, 1, 1, 0, 1, 3, 1, 1, 0, 3, 1, 3, 0, 3, 1, 2, 3, 3, 3, 1, 1, 1, 0, 2, 1, 1, 2, 3, 0, 3, 3, 0, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 0, 1, 0, 1, 3, 1, 0, 0, 3, 3, 1, 1, 1, 0, 3, 3, 1, 3, 0, 0, 3, 2, 1, 0, 1, 0, 3, 3, 2, 0, 3, 2, 1, 0, 0, 0, 0, 2, 2, 1, 3, 1, 3, 0, 0, 3, 2, 0, 3, 3, 3, 0, 2, 2, 2, 1, 1, 0, 3, 2, 0, 1, 2, 2, 3, 0, 0, 3, 0, 1, 2, 1, 1, 2, 2, 2, 2, 2, 3, 2, 3, 2, 1, 2, 0, 1, 3, 0, 3, 1, 2, 2, 1, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 3, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 0, 2, 2, 2, 0, 3, 0, 0, 2, 1, 1, 1, 3, 1, 0, 3, 2, 2, 2, 1, 2, 1, 3, 0, 2, 3, 0, 0, 0, 3, 3, 2, 3, 1, 2, 1, 1, 3, 0, 1, 1, 3, 3, 0, 0, 0, 2, 2, 2, 3, 2, 0, 3, 1, 1, 0, 3, 2, 1, 3, 0, 0, 3, 2, 3, 0, 0, 1, 3, 3, 1, 3, 3, 1, 0, 3, 3, 3, 1, 2, 2, 0, 3, 3, 0, 3, 3, 1, 2, 3, 3, 0, 0, 1, 2, 3, 1, 0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 0, 3, 2, 0, 2, 0, 1, 0, 3, 3, 0, 3, 1, 3, 3, 3, 1, 1, 2, 0, 3, 2, 0, 2, 3, 3, 1, 0, 1, 1, 3, 0, 2, 2, 0, 3, 2, 3, 1, 0, 0, 0, 2, 2, 3, 2, 0, 3, 0, 0, 1, 0, 2, 2, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 2, 2, 2, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 0, 0, 2, 2, 0, 2, 2, 1, 1, 2, 0, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 2, 1, 0, 2, 2, 1, 1, 2, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 2, 1, 0, 1, 0, 2, 2, 1, 2, 0, 1, 1, 2, 2, 0, 1, 0, 2, 2, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 0, 1, 0, 1, 2, 0, 0, 1, 1, 0, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 1, 2, 0, 1, 0, 2, 1, 0, 1, 0, 1, 1, 1, 0, 2, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 0, 2, 0, 2, 1, 0, 0, 0, 1, 1, 2, 2, 0, 1, 0, 2, 1, 1, 1, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 1, 2, 0, 0, 1, 2, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 1, 1, 1, 2, 0, 2, 2, 1, 2, 0, 2, 0, 0, 0, 1, 1, 0, 2, 0, 1, 0, 2, 1, 2, 2, 2, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0, 0, 2, 1, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 1], [2, 0, 1, 0, 0, 2, 1, 2, 0, 0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0, 0, 2, 2, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 2, 0, 2, 2, 1, 2, 0, 1, 1, 1, 1, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 0, 1, 1, 0, 2, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 163, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i1 \\l i1\\nb0 = i0 \\l max(min(( abs(int(7.0)) * int(1.0) ), int(0.0)), in0)\\nif divInt(int(0.0),in2) == abs(i0):{:\\nin0 += abs(in1)\\n:}else:{:\\nb2 = in2 \\le divInt(int(9.0),( abs(min(( max(min(abs(int(3.0)), int(8.0)), in2) - int(1.0) ), ( abs(mod(( divInt(in2,max(abs(( min(int(1.0), ( ( ( res0 + max(( ( ( min(int(4.0), min(( in0 + mod(abs(int(6.0)),int(6.0)) ), divInt(int(0.0),int(2.0)))) * abs(int(0.0)) ) - ( int(3.0) * divInt(min(abs(int(6.0)), abs(i1)),( ( ( max(int(4.0), max(abs(in1), min(divInt(divInt(in0,max(max(i0, ( abs(( ( i0 + ( int(0.0) + min(i1, in0) ) ) + int(4.0) )) - abs(abs(in0)) )), divInt(int(9.0),i0))),abs(int(3.0))), int(1.0)))) - max(i0, int(6.0)) ) - min(abs(min(divInt(i1,int(5.0)), abs(i1))), max(min(mod(abs(abs(in0)),i2), max(max(abs(min(max(min(i2, divInt(( in1 * int(5.0) ),( min(abs(max(int(4.0), max(int(5.0), int(9.0)))), divInt(min(int(6.0), int(1.0)),( i2 * divInt(( int(5.0) - in2 ),divInt(res0,min(int(2.0), int(0.0)))) ))) - int(8.0) ))), divInt(int(4.0),i2)), max(res0, ( abs(in2) - i2 )))), int(6.0)), int(9.0))), max(res0, ( min(mod(max(int(8.0), int(0.0)),min(abs(abs(in2)), max(abs(in0), ( min(i2, divInt(max(mod(max(abs(abs(min(int(2.0), int(5.0)))), int(4.0)),max(min(int(0.0), divInt(int(0.0),in1)), abs(res0))), divInt(mod(divInt(abs(divInt(int(0.0),i2)),int(2.0)),i1),min(max(max(abs(divInt(max(abs(( max(int(8.0), int(0.0)) - ( int(5.0) * divInt(( i2 - divInt(max(res0, int(8.0)),i1) ),mod(( ( in0 + divInt(( min(min(min(mod(( divInt(abs(max(divInt(int(0.0),min(mod(max(int(1.0), res0),min(int(3.0), res0)), i1)), i1)),in2) + int(4.0) ),in0), mod(( max(int(3.0), abs(int(2.0))) * min(( ( min(( i1 * ( i1 * i2 ) ), int(1.0)) - max(max(in1, min(( int(6.0) * i2 ), ( int(0.0) - abs(int(0.0)) ))), int(5.0)) ) * ( int(0.0) * in1 ) ), in2) ),max(max(i1, i1), mod(( i2 + i0 ),in0)))), i1), res0) - int(2.0) ),i0) ) + max(max(int(6.0), res0), in0) ),int(1.0))) ) )), in0),int(3.0))), abs(min(min(in1, mod(int(1.0),in0)), int(7.0)))), int(1.0)), ( i1 - max(int(2.0), int(8.0)) )))),int(3.0))) * int(9.0) )))), max(( min(max(abs(in1), mod(i1,mod(min(( i0 + int(9.0) ), in0),i2))), in0) - int(1.0) ), i1)) * ( in0 + divInt(max(min(mod(i0,( i1 * ( abs(divInt(res0,max(divInt(min(max(int(4.0), int(6.0)), min(( i2 * divInt(max(( in1 + in1 ), mod(divInt(divInt(int(4.0),in1),mod(int(6.0),max(( ( mod(in2,res0) * ( ( max(in0, int(6.0)) * min(( int(5.0) + divInt(( ( res0 * divInt(i0,mod(( mod(in1,int(9.0)) * abs(abs(max(min(mod(int(3.0),max(abs(in0), in0)), min(min(( in1 + i2 ), mod(min(min(in1, in2), ( int(1.0) + i0 )),mod(( ( ( int(1.0) + ( i0 * int(1.0) ) ) * divInt(i1,min(min(int(4.0), divInt(i2,i0)), int(4.0))) ) * int(7.0) ),min(in2, in2)))), i0)), in2))) ),in2)) ) * abs(i2) ),int(5.0)) ), mod(i0,abs(abs(int(7.0))))) ) + int(3.0) ) ) * max(abs(min(abs(( int(1.0) - mod(min(divInt(abs(i1),divInt(int(0.0),in2)), int(4.0)),max(( res0 * int(3.0) ), in0)) )), in1)), mod(i2,int(3.0))) ), int(8.0)))),min(min(min(in0, max(max(( int(4.0) + int(9.0) ), i1), int(1.0))), int(3.0)), ( ( in0 + ( divInt(( int(0.0) + in2 ),in0) * i0 ) ) - mod(int(7.0),( ( int(5.0) - ( abs(abs(min(( max(int(5.0), in1) - min(abs(int(2.0)), i2) ), in1))) - ( divInt(( int(2.0) - int(0.0) ),int(4.0)) - int(6.0) ) ) ) - divInt(max(int(4.0), max(( max(int(2.0), min(i0, ( mod(in1,( int(6.0) + divInt(abs(abs(( in1 - min(( min(min(max(( in2 + i1 ), mod(min(in1, int(0.0)),in0)), mod(int(3.0),min(int(1.0), int(4.0)))), ( int(9.0) * int(5.0) )) * min(int(6.0), int(1.0)) ), int(4.0)) ))),res0) )) + min(int(7.0), max(int(2.0), min(( in0 * in2 ), int(8.0)))) ))) - int(2.0) ), i2)),max(max(max(i1, ( mod(divInt(int(2.0),int(6.0)),in1) * max(( in1 * min(min(max(( int(5.0) + in2 ), min(int(7.0), in1)), min(mod(min(( ( int(3.0) - int(8.0) ) * int(4.0) ), in0),i1), min(res0, ( max(int(5.0), i0) * ( max(mod(int(0.0),max(int(1.0), in0)), min(( int(8.0) * abs(( i2 - in0 )) ), ( in2 * int(5.0) ))) * abs(abs(int(3.0))) ) )))), ( min(i0, max(i2, in1)) - abs(max(in2, int(2.0))) )) ), in1) )), int(0.0)), int(1.0))) )) )))),min(abs(int(2.0)), int(0.0))) ), ( ( in0 + in2 ) * int(9.0) ))),i0), ( divInt(int(0.0),in1) * int(6.0) )))) + max(abs(int(5.0)), i1) ) )), min(( int(5.0) + in1 ), ( int(0.0) + i2 ))), i2),min(i0, max(abs(in1), max(int(5.0), int(0.0))))) ) )))) ) + res0 )) ) ) + int(1.0) ), min(int(0.0), int(8.0))) ) * in0 ) - max(int(0.0), min(in0, min(int(4.0), mod(abs(max(min(int(1.0), int(1.0)), int(5.0))),in2)))) )) * ( int(9.0) + int(2.0) ) )), ( min(i1, max(abs(in2), abs(( int(6.0) * int(6.0) )))) + divInt(max(int(2.0), ( ( i2 + in1 ) * i1 )),res0) ))) + int(3.0) ),i0)) - int(0.0) ))) + min(int(2.0), i0) ))\\n:}\\nloopBreak% = 0\\nwhile in2 \\g min(max(int(4.0), int(2.0)), int(0.0)):{:\\nb1 = res0 \\ge min(min(int(1.0), min(in1, in0)), min(( int(8.0) + in2 ), int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i1\\nin1 -= abs(max(divInt(in2,max(divInt(int(9.0),i2), res0)), i0))\\nif not False:{:\\nb0 = i1 \\le mod(( int(6.0) * abs(int(1.0)) ),min(i1, in1))\\n:}else:{:\\nin1 += min(( i2 * abs(min(min(in0, ( ( mod(int(3.0),int(5.0)) * i0 ) - abs(mod(i1,int(8.0))) )), mod(mod(max(res0, res0),abs(res0)),int(2.0)))) ), ( int(1.0) * int(4.0) ))\\n:}\\nif not ( divInt(divInt(divInt(( max(( max(divInt(int(9.0),mod(in1,int(4.0))), max(in0, abs(int(6.0)))) + mod(( int(4.0) - i1 ),res0) ), i2) - i1 ),( ( min(in0, in0) - in1 ) - abs(int(6.0)) )),int(6.0)),divInt(int(4.0),int(3.0))) + ( abs(int(3.0)) * res0 ) ) \\l in0:{:\\nin2 += divInt(in1,divInt(( ( res0 + max(i1, in2) ) - ( int(1.0) + int(8.0) ) ),int(1.0)))\\n:}else:{:\\nin0 -= abs(int(3.0))\\nloopBreak% = 0\\nwhile ( in0 == min(( mod(( int(7.0) + divInt(int(8.0),abs(i2)) ),divInt(min(i1, res0),i0)) + min(min(divInt(max(int(1.0), ( int(3.0) + int(0.0) )),max(i1, int(6.0))), int(9.0)), min(abs(i1), in2)) ), in1) or True ):{:\\nif mod(( ( min(mod(res0,max(int(5.0), int(0.0))), in1) - min(( int(4.0) * abs(in2) ), i2) ) * max(( abs(i2) + i0 ), int(6.0)) ),abs(abs(int(8.0)))) \\ge min(max(int(0.0), i0), min(min(max(int(5.0), divInt(( i1 - min(min(in2, max(max(int(0.0), ( max(abs(i2), i2) - int(0.0) )), mod(max(int(8.0), res0),in2))), in0) ),( in2 + int(8.0) ))), ( i1 * in0 )), i1)):{:\\nin0 = in2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(divInt(in1,( res0 - int(3.0) )), i2) != min(abs(i1), max(int(9.0), abs(abs(min(int(2.0), int(2.0)))))):{:\\nloopBreak% = 0\\nwhile mod(i1,abs(mod(i1,mod(abs(min(int(6.0), in2)),int(3.0))))) == int(1.0):{:\\nb0 = not abs(in0) \\g divInt(mod(i2,max(mod(abs(int(8.0)),res0), in2)),res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += ( ( max(mod(res0,max(in2, in2)), int(0.0)) + res0 ) - ( ( int(8.0) + int(9.0) ) + int(7.0) ) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 22, 22, 8, 14, 228, 228, 13, 6, 1, 19, 13, 6, 2, 4, 266, 8, 1023, 250, 287, 146, 110]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 2, 2, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 9, 6, 1, 8, 0, 5, 9, 4, 1, 8, 2, 3, 7, 2, 2, 9, 6, 7, 5, 5, 2, 4, 2, 4, 3, 6, 0, 6, 3, 9, 4, 8, 0, 9, 9, 9, 0], [0, 3, 3, 1, 3, 3, 1, 0, 3], [1, 2, 0, 2], [0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 1], [0, 1], [0, 1, 1], [4, 0, 6, 2, 1, 5, 4, 3, 3, 1, 1, 5, 1, 6, 4, 4, 3, 0, 6, 2, 4, 5, 2, 3, 4, 3, 4, 2, 1, 4, 3, 4, 6, 5, 0, 4, 5, 6, 6, 1, 5, 0, 1, 5, 6, 1, 5, 3, 2], [1, 0, 1, 1], [0, 2, 1, 2, 3, 1, 0, 3, 3, 2, 0, 3, 0, 2, 0, 3, 2, 0, 1, 2, 0, 2, 3, 1, 0, 0, 3, 1, 2, 1, 2, 2, 0, 2, 2, 3, 0, 1, 3, 3, 3, 1, 1, 1, 2, 3, 3, 3, 1, 0, 0, 0, 0, 3, 2, 2, 3, 0, 2, 2, 0, 1, 2, 0, 2, 2, 3, 3, 0, 3, 1, 1, 2, 0, 2, 3, 0, 0, 3, 2, 2, 0, 2, 3, 1, 1, 0, 1, 2, 3, 1, 2, 1, 0, 2, 0, 1, 3, 2, 2, 3, 1, 1, 2, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 2, 1, 3, 2, 3, 1, 2, 1, 0, 0, 2, 2, 0, 0, 1, 0, 2, 3, 2, 1, 1, 0, 1, 0, 3, 0, 0, 2, 0, 1, 0, 1, 2, 1, 1, 3, 3, 0, 0, 2, 1, 1, 3, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [2, 2, 0, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 0, 1, 2], [2, 1, 0, 2, 1, 0, 2, 2, 0, 1, 1, 2, 0, 0, 0, 1, 1, 0, 1, 2, 2, 0, 2, 2], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in1 \\l divInt(int(1.0),( abs(int(4.0)) * i0 ))\\nif abs(min(( res0 - abs(i2) ), divInt(i1,abs(( in2 + int(9.0) ))))) \\ge divInt(in1,( min(int(6.0), in0) * in0 )):{:\\ni1 -= abs(int(1.0))\\n:}\\nloopBreak% = 0\\nwhile ( int(8.0) + mod(( i1 * ( divInt(min(in2, int(0.0)),max(min(min(int(5.0), int(9.0)), int(4.0)), mod(min(max(min(int(1.0), i1), res0), in1),in1))) * max(mod(divInt(min(in0, divInt(( i0 + int(8.0) ),mod(res0,mod(( max(max(i2, max(int(2.0), int(3.0))), ( in1 - divInt(max(in2, i2),abs(divInt(( in0 - ( abs(int(7.0)) * int(2.0) ) ),in1))) )) + int(2.0) ),( max(int(9.0), ( int(6.0) + in0 )) + ( in1 - int(7.0) ) ))))),max(divInt(divInt(abs(int(5.0)),int(5.0)),( i2 - i1 )), int(2.0))),in1), int(4.0)) ) ),in0) ) \\ge in1:{:\\nloopBreak% = 0\\nwhile ( int(2.0) + res0 ) \\g divInt(int(4.0),max(( abs(int(3.0)) - mod(int(6.0),in2) ), i0)):{:\\nif divInt(( in1 * in2 ),int(0.0)) \\ge res0:{:\\nb2 = True\\n:}else:{:\\nb0 = divInt(abs(( int(6.0) * int(3.0) )),res0) \\ge int(9.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif abs(i0) \\g i1:{:\\nin2 += mod(res0,int(4.0))\\n:}else:{:\\nb2 = ( i1 \\l int(8.0) and ( False and ( int(0.0) * int(9.0) ) \\ge min(max(in2, in0), mod(int(9.0),int(9.0))) ) )\\n:}\\ni2 *= abs(int(0.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 5, 8, 39, 39, 9, 4, 2, 13, 9, 4, 2, 3, 49, 4, 158, 42, 32, 24, 21]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [8, 3], [4], [0], [], [1], [0], [], [], [], [0], [], [1, 2, 1, 0], [1], [], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(8.0) \\le mod(int(3.0),i0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 1, 2, 1, 0], [1], [1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 3, 9, 3, 2, 7, 5, 1, 2, 3, 9, 0, 3, 1, 0], [1, 1], [2, 1, 2], [], [1, 1, 0], [0, 0], [0], [], [], [3, 0, 5, 6, 4, 6, 3, 3, 5, 6, 1, 2, 3], [1, 0], [2, 1, 3, 0, 0, 2, 3, 1, 0, 1, 2, 1, 2, 1, 3, 3, 3, 2, 3, 3, 1, 1, 3, 2, 2, 1, 0, 3, 1, 1, 3, 1, 0, 2, 2, 0, 0, 3, 1, 0, 3, 3, 2, 0, 1, 1, 3, 2, 0, 3, 1, 1, 3, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [2, 2, 1, 1, 2, 0, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2], [0, 0, 1, 1, 2, 0, 2, 2], [0, 1, 1, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += ( int(0.0) + abs(i0) )\\nb2 = in2 \\g ( abs(int(9.0)) - res0 )\\nloopBreak% = 0\\nwhile int(3.0) \\g divInt(int(9.0),( int(3.0) - max(max(abs(( min(abs(int(2.0)), int(7.0)) * max(( mod(int(5.0),in1) + min(int(1.0), int(2.0)) ), max(int(3.0), res0)) )), mod(( in0 * in0 ),min(int(9.0), in2))), max(max(( res0 * int(0.0) ), int(3.0)), min(mod(i1,abs(int(1.0))), int(0.0)))) )):{:\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = abs(in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 16, 16, 2, 3, 0, 3, 2, 1, 0, 0, 13, 2, 54, 11, 16, 8, 4]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 1, 0, 2, 0, 2, 0, 0, 1], [0, 0, 1], [1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 4, 1, 9, 3, 4, 6, 0, 9, 6, 8, 4, 0, 1, 6, 6, 1, 8, 7, 2, 1, 7, 2, 3, 7, 1, 2, 0, 2, 3, 5, 9], [2, 2, 4, 2, 5], [0, 0, 2, 1], [], [0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0], [2, 2, 0], [], [1, 0], [6, 6, 5, 5, 6, 3, 1, 2, 3, 3, 5, 4, 1, 0, 5, 0, 2, 0, 4, 4, 6, 3, 3, 1, 6, 2, 6, 6, 1, 2, 0, 1, 2, 2, 4, 6, 1, 2, 6, 4], [0, 1, 0], [3, 3, 2, 0, 2, 0, 3, 3, 2, 1, 3, 2, 3, 1, 1, 3, 1, 0, 0, 3, 0, 2, 0, 1, 2, 2, 0, 3, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 1, 3, 0, 1, 2, 3, 3, 3, 0, 2, 1, 2, 0, 2, 2, 1, 2, 0, 0, 2, 0, 1, 1, 0, 1, 2, 0, 0, 2, 0, 1, 0, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 2, 0, 0, 1, 0, 0, 3, 2, 1, 0, 2, 1, 2, 1, 0, 3, 1, 2, 2, 2, 2, 3, 2, 1, 0, 0, 3, 0, 0, 2, 0, 2, 1, 0, 0, 3, 2, 3, 3, 3, 0, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 2, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 2, 2], [2, 1, 0, 1, 0, 2, 1, 1, 0, 2, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not max(abs(mod(res0,mod(res0,max(max(mod(int(2.0),max(( min(int(4.0), int(1.0)) * abs(int(9.0)) ), in2)), in2), max(res0, divInt(in0,int(3.0))))))), mod(mod(i1,min(min(( mod(i2,int(4.0)) - int(6.0) ), divInt(int(0.0),divInt(int(9.0),divInt(int(6.0),int(8.0))))), min(in0, int(4.0)))),divInt(min(min(abs(in0), ( int(0.0) + mod(in2,mod(divInt(int(1.0),( in1 - i1 )),mod(i0,int(6.0)))) )), int(6.0)),in2))) == int(1.0):{:\\ni0 = divInt(i2,i0)\\nb0 = ( in1 + int(8.0) ) == in1\\nif not b0:{:\\nb2 = max(( max(max(max(int(7.0), divInt(res0,int(2.0))), in0), ( in0 * i1 )) - int(1.0) ), res0) \\le i2\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile min(( int(7.0) - res0 ), mod(int(2.0),divInt(int(3.0),res0))) == max(int(7.0), divInt(divInt(( ( min(( int(1.0) + i1 ), i2) * abs(i0) ) - i1 ),mod(i2,mod(int(2.0),i2))),in1)):{:\\nres0 -= max(( max(abs(abs(i1)), int(0.0)) - i2 ), int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(3.0) != res0\\n:}\\nin1 = int(59.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 32, 32, 5, 4, 0, 8, 5, 3, 0, 2, 40, 3, 129, 35, 26, 13, 23]}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 8, 6, 4, 7, 8, 8, 1, 8, 4, 4, 9, 9, 1, 7, 2, 5, 1, 3, 5, 1, 6, 7, 6, 3, 9, 6, 5, 4, 8, 3, 3, 7, 8, 5, 4, 0, 2, 9, 2, 1, 6, 9, 7, 2, 6, 3, 9, 4, 4, 2, 7, 3, 4, 3, 7, 8, 2, 9, 7, 8, 2, 7, 8, 1, 0, 2, 6, 6, 1, 1, 6, 7, 2, 1, 7, 3, 6, 2, 3, 6, 7, 7, 1, 7, 3, 2], [0, 5, 1], [0, 2, 2, 2, 0], [1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0], [1, 2, 1, 0, 3, 0, 2], [0, 1], [1], [2, 0, 2, 3, 5, 0, 4, 6, 4, 5, 0, 2, 3, 4, 1, 4, 6, 2, 3, 4, 4, 1, 0, 0, 4, 0, 4, 6, 3, 3, 1, 4, 0, 5, 3, 6, 3, 1, 5, 2, 5, 5, 2, 4, 5, 2, 2, 1, 2, 3, 4, 2, 2, 5, 5, 2, 5, 3, 1, 4, 1, 6, 5, 1, 0, 4, 3, 0, 3, 6, 3, 0, 5, 1, 4, 2, 5, 4, 5, 0, 0, 2, 1, 0, 6, 5, 1, 4, 1, 3], [0, 0, 1], [1, 3, 2, 3, 2, 2, 3, 2, 3, 1, 3, 1, 3, 3, 0, 0, 0, 3, 3, 0, 0, 1, 0, 3, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 3, 3, 2, 0, 1, 1, 3, 1, 3, 3, 0, 3, 2, 1, 2, 0, 0, 2, 3, 3, 0, 2, 2, 2, 1, 3, 1, 0, 2, 3, 1, 0, 1, 3, 3, 3, 3, 3, 0, 1, 1, 2, 1, 3, 1, 2, 3, 0, 1, 2, 2, 2, 0, 2, 1, 1, 3, 3, 3, 0, 3, 2, 0, 2, 0, 0, 2, 2, 2, 0, 0, 1, 2, 3, 1, 1, 3, 0, 3, 3, 2, 2, 3, 1, 0, 2, 3, 3, 1, 2, 0, 2, 0, 3, 2, 2, 2, 3, 0, 2, 3, 2, 0, 3, 2, 3, 0, 3, 2, 1, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 1, 2, 1, 3, 0, 2, 1, 3, 0, 3, 1, 2, 2, 3, 1, 3, 3, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 1, 2, 0, 0, 2, 2, 3, 0, 3, 0, 3, 3, 3, 1, 0, 2, 2, 3, 3, 2, 1, 2, 0, 0, 3, 2, 0, 2, 0, 0, 2, 0, 0, 3, 3, 0, 0, 3, 3, 0, 1, 2, 1, 2, 3, 1, 3, 2, 0, 1, 1, 3, 2, 3, 1, 2, 2, 0, 2, 0, 1, 2, 1, 3, 3, 3, 3, 2, 2, 3, 3, 2, 2, 2, 1, 0, 2, 0, 3, 2, 2, 2, 0, 2, 0, 3, 1, 2, 2, 2, 1, 2, 3, 0, 2, 1, 3, 1, 1, 2, 3, 3, 1, 1, 0, 0, 2, 3, 1, 2, 0, 1, 0, 2, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 3, 1, 0, 0, 3, 1, 3, 1, 3, 3, 0, 3, 1, 0, 0, 1, 2, 2, 0, 0, 0, 3, 1, 3, 1, 2, 2, 3, 2, 3, 3, 1, 1, 3, 2, 0, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 3, 0, 3, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 2, 2, 0, 1, 2, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 1, 2, 1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 0, 1, 1, 0, 0, 2, 2, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 0, 2, 0, 2, 0, 1, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 2, 2, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 2, 2, 1, 2, 1, 0, 0, 1, 2, 2, 2, 2, 0, 0, 1, 0, 0, 0, 2], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 92, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = int(92.0)\\nif True:{:\\nloopBreak% = 0\\nwhile not False:{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( b2 or not max(( min(( mod(max(mod(abs(int(8.0)),abs(int(6.0))), abs(max(i0, i2))),in0) - min(min(in2, i0), int(4.0)) ), in1) - min(int(7.0), ( ( int(8.0) - int(8.0) ) - int(1.0) )) ), int(8.0)) \\l mod(int(4.0),( ( min(abs(res0), abs(min(( in1 - int(4.0) ), int(9.0)))) + max(int(9.0), abs(min(in2, abs(divInt(int(1.0),( i0 * i2 )))))) ) * ( min(max(in0, ( ( divInt(int(7.0),max(int(2.0), in1)) - ( min(int(5.0), i1) - int(1.0) ) ) + min(min(max(max(max(in1, int(3.0)), int(5.0)), mod(int(1.0),min(int(6.0), divInt(abs(res0),int(7.0))))), ( divInt(( i2 + ( int(6.0) * int(3.0) ) ),min(max(abs(in0), max(( in1 - ( in1 + i1 ) ), ( ( ( i0 + i0 ) + int(9.0) ) + ( min(int(6.0), int(5.0)) + max(in1, min(min(mod(( abs(int(4.0)) * i0 ),mod(min(max(int(8.0), divInt(in1,( res0 - max(( divInt(mod(min(in0, mod(abs(mod(in0,abs(( abs(i1) - abs(divInt(int(3.0),int(3.0))) )))),int(7.0))),( mod(int(8.0),in1) - i0 )),int(5.0)) * int(4.0) ), in2) ))), in0),int(0.0))), mod(int(2.0),max(res0, divInt(int(9.0),max(in0, abs(int(2.0))))))), ( ( max(int(1.0), max(abs(int(6.0)), i1)) * int(9.0) ) * in2 ))) ) ))), ( divInt(i2,int(7.0)) + ( divInt(in2,in2) + int(2.0) ) ))) + i2 )), divInt(int(6.0),( in1 - in2 ))) )), ( divInt(min(i2, max(i2, max(min(min(int(3.0), i1), ( ( abs(abs(( int(9.0) * mod(i2,in0) ))) - max(( in1 - divInt(i2,i2) ), divInt(in2,in2)) ) - abs(min(i2, in2)) )), abs(max(in0, int(4.0)))))),mod(int(4.0),divInt(abs(int(2.0)),abs(( i1 * int(7.0) ))))) * int(3.0) )) * min(divInt(min(int(4.0), ( divInt(in1,mod(i1,int(3.0))) + mod(int(7.0),abs(min(abs(min(mod(mod(abs(min(( ( ( int(8.0) + res0 ) * mod(in2,max(( mod(divInt(i1,( i0 * min(int(2.0), ( ( ( int(9.0) - divInt(abs(in1),mod(int(7.0),max(int(8.0), int(2.0)))) ) * divInt(abs(abs(int(7.0))),int(8.0)) ) - in0 )) )),i0) + divInt(max(int(1.0), ( in0 + int(0.0) )),res0) ), mod(abs(( abs(in0) - ( i0 * in2 ) )),( ( abs(min(int(2.0), i1)) * in1 ) * max(int(6.0), min(int(6.0), abs(max(i2, min(int(1.0), in2))))) )))) ) * in1 ), int(1.0))),( ( in2 + i0 ) + i0 )),min(int(6.0), max(int(7.0), ( ( min(divInt(max(min(int(2.0), int(1.0)), min(( i2 - int(7.0) ), int(3.0))),( int(6.0) + int(2.0) )), int(3.0)) + i1 ) + i0 )))), res0)), int(6.0)))) )),int(7.0)), int(7.0)) ) )) ):{:\\nb2 = int(1.0) != int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = int(3.0)\\ni1 *= abs(in1)\\nb0 = min(i1, int(2.0)) \\g in0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 88, 88, 3, 5, 1, 10, 3, 7, 2, 1, 90, 3, 372, 100, 98, 58, 43]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1], [5, 8, 2, 4, 7, 1, 8], [4], [0], [], [1], [0], [], [], [], [5, 0, 1], [], [3, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 1], [0, 0], [0, 0]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = min(int(5.0), in2) \\le ( min(divInt(i0,min(max(divInt(( int(8.0) + int(2.0) ),int(4.0)), int(7.0)), int(1.0))), int(8.0)) + i1 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 18, 4, 4, 2, 2]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1], [1], [5], [0, 0], [], [0, 1], [0], [1], [1], [], [2], [], [1, 0], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\nb0 = int(1.0) != i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 2, 1, 2, 0, 1, 0, 1, 2, 2, 1, 0], [1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 1, 3, 4, 8, 1, 5, 5, 5, 5, 9, 4, 1, 0, 1, 9, 7, 5, 9, 5, 7, 3, 4, 4, 1], [2, 5, 5, 2, 1, 3], [2, 1, 2, 0, 1, 2], [1, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0], [3, 2, 1, 2, 2, 3, 1, 1, 1, 0], [0, 0, 1, 0], [1], [2, 0, 3, 4, 2, 6, 5, 4, 6, 3, 5, 6, 1, 2, 0, 4, 3, 5], [1, 0, 0], [1, 1, 1, 0, 2, 3, 3, 3, 0, 0, 3, 1, 3, 1, 0, 3, 0, 0, 1, 1, 1, 1, 3, 2, 3, 1, 1, 3, 0, 0, 3, 3, 1, 0, 3, 3, 3, 1, 1, 1, 1, 2, 1, 3, 0, 0, 3, 3, 3, 0, 2, 2, 1, 3, 2, 2, 0, 2, 1, 1, 1, 1, 0, 3, 3, 1, 0, 2, 2, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0], [2, 1, 0, 1, 1, 1, 0, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 1, 0, 2], [0, 1, 2, 1], [1, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(7.0) == int(4.0)\\nloopBreak% = 0\\nwhile ( not int(3.0) != i2 or mod(abs(max(min(i0, in0), max(int(1.0), max(int(3.0), in1)))),max(i2, res0)) != int(4.0) ):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not not ( True or int(8.0) == int(1.0) ):{:\\nb2 = False\\nin2 += int(5.0)\\nin1 = min(mod(abs(int(5.0)),int(5.0)), max(res0, in0))\\nb0 = True\\nif abs(max(int(5.0), in2)) \\g max(max(max(int(9.0), int(4.0)), int(1.0)), int(0.0)):{:\\nloopBreak% = 0\\nwhile divInt(int(1.0),max(res0, i1)) \\ge max(max(abs(i2), divInt(mod(int(9.0),min(divInt(( i0 - ( int(7.0) * int(5.0) ) ),int(9.0)), int(5.0))),in1)), abs(max(int(7.0), in0))):{:\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = divInt(( min(abs(int(3.0)), int(4.0)) - int(4.0) ),int(1.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 27, 27, 6, 6, 2, 16, 6, 10, 4, 1, 18, 3, 75, 10, 23, 4, 7]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1], [6], [4], [0], [], [1], [0], [], [], [], [4, 6, 1], [], [3, 1, 0, 3, 0, 0], [], [1, 1], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = max(int(6.0), in1) \\le max(res0, i1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 6, 0, 2, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [3, 1], [0], [2, 1], [0], [0, 0, 1], [0], [3, 0], [], [], [0], [], [1, 3, 3, 0, 3, 1], [], [1, 2, 2], [], []], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( b1 and int(3.0) \\l max(abs(i0), abs(int(1.0))) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 2, 1, 3, 1, 2, 0, 0, 1, 0, 6, 0, 3, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 0, 0, 2, 0, 2, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 1, 1, 0, 9, 0, 6, 4, 6, 3, 0, 1, 0, 2, 5, 8, 6, 7, 7, 4, 1, 2, 1, 6, 5, 7, 3, 2, 1, 3, 2, 6, 5, 6, 2, 5, 5, 7, 5, 7, 7, 3, 6, 2, 6, 4, 8], [1, 0, 3, 3, 2, 4, 0, 1, 3], [1, 1, 1], [1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 1, 3, 2, 2, 0], [0], [1], [3, 0, 1, 6, 4, 0, 1, 2, 4, 4, 2, 0, 1, 3, 6, 4, 2, 1, 1, 5, 1, 3, 2, 2, 0, 1, 1, 1, 2, 3, 6, 4, 1, 0, 4, 3, 1, 0, 0, 6, 0, 5, 2, 1, 0, 1, 2, 5, 2, 5, 3, 4, 5, 4, 4, 4, 3, 1, 3, 3, 5, 3, 0, 0], [0, 1, 1], [2, 0, 2, 0, 2, 2, 1, 2, 2, 2, 0, 3, 0, 0, 2, 3, 0, 0, 3, 0, 2, 3, 1, 3, 0, 2, 3, 2, 1, 2, 0, 0, 1, 1, 2, 3, 1, 1, 2, 3, 0, 2, 1, 0, 0, 0, 3, 1, 0, 1, 3, 0, 1, 0, 3, 3, 3, 1, 1, 1, 0, 3, 0, 0, 1, 2, 1, 0, 2, 1, 3, 0, 3, 1, 1, 0, 0, 0, 2, 1, 3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 2, 3, 2, 3, 3, 1, 2, 3, 3, 0, 2, 1, 3, 0, 2, 3, 1, 3, 2, 1, 2, 3, 0, 2, 1, 3, 0, 0, 2, 3, 2, 2, 0, 3, 0, 2, 2, 2, 1, 3, 2, 3, 0, 0, 2, 3, 0, 1, 2, 0, 0, 3, 1, 0, 2, 1, 0, 3, 1, 0, 3, 2, 0, 0, 3, 1, 1, 0, 2, 3, 3, 3, 2, 0, 0, 3, 0, 3, 3, 3, 3, 0, 0, 0, 1, 2, 1, 0, 0, 3, 3, 3, 3, 1, 0, 0, 1, 3, 3, 2, 3, 2, 2, 3, 1, 0, 1, 0, 2, 0, 2, 3, 2, 3, 0, 1, 2, 1, 1, 0, 3, 0, 2, 2, 0, 1, 1, 3, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 0, 2, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 0, 0, 1, 2, 2, 2, 1, 1, 0, 1, 1, 2, 2, 0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 1, 1, 2, 1, 1, 2, 2, 2], [2, 2, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 1, 2, 0, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( in0 * mod(i0,( mod(int(7.0),( ( divInt(i1,abs(res0)) * in1 ) * ( max(i0, i1) * min(i2, ( abs(int(3.0)) + max(in1, mod(min(mod(int(1.0),mod(in1,i2)), int(1.0)),int(0.0))) )) ) )) * ( min(int(9.0), int(0.0)) + divInt(min(i0, ( int(6.0) * i1 )),in0) ) )) ) \\g res0 or abs(int(4.0)) \\l in1 ):{:\\ni2 = int(6.0)\\nloopBreak% = 0\\nwhile ( abs(i1) \\ge int(3.0) or ( i1 \\ge abs(abs(max(int(0.0), int(1.0)))) and True ) ):{:\\nif ( int(0.0) == in2 or min(i1, in0) \\le int(2.0) ):{:\\ni2 *= ( int(5.0) + i2 )\\n:}else:{:\\ni0 *= mod(int(8.0),max(i1, min(int(6.0), int(7.0))))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i1 \\l i1:{:\\nb1 = not not i2 \\g ( int(7.0) + abs(int(4.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = min(min(mod(max(abs(int(1.0)), int(2.0)),mod(( abs(mod(abs(max(int(1.0), ( max(min(in0, divInt(int(6.0),max(res0, mod(max(int(5.0), abs(mod(int(7.0),mod(abs(in1),( int(3.0) + min(i1, i0) ))))),( abs(divInt(divInt(in1,abs(in0)),divInt(( ( int(2.0) - min(mod(max(i1, i0),divInt(max(i0, int(1.0)),mod(res0,i0))), max(int(3.0), in2)) ) * ( int(2.0) + i2 ) ),max(int(6.0), i1)))) - min(( i0 - i1 ), min(int(5.0), int(6.0))) ))))), i2) - ( max(max(abs(( in2 * i2 )), min(in2, abs(min(min(abs(in0), in1), in2)))), int(2.0)) - ( int(5.0) - in1 ) ) ))),in1)) + min(abs(abs(min(int(5.0), in1))), in0) ),int(7.0))), max(max(( abs(( ( max(int(5.0), i1) + int(7.0) ) - in0 )) + mod(in0,divInt(max(( abs(in2) + int(7.0) ), mod(int(3.0),int(6.0))),in0)) ), abs(i0)), divInt(divInt(i0,int(2.0)),int(6.0)))), abs(int(4.0))) \\ge int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 48, 48, 9, 3, 4, 17, 9, 8, 1, 1, 64, 3, 220, 51, 60, 27, 26]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 0], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 0], [1, 1, 1], [1, 8, 5], [2], [0], [], [1, 0], [0], [1], [1], [], [2, 1], [0], [3, 1, 2, 1, 3, 3, 1, 0], [1], [2, 2, 2], [], [0]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile abs(int(1.0)) == divInt(int(8.0),abs(abs(int(5.0)))):{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 3, 3, 1, 1, 0, 2, 1, 1, 1, 0, 2, 1, 8, 1, 3, 0, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 1, 1, 2, 1, 1, 0, 2, 2, 2, 1, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 2, 4, 3, 7, 2, 5, 6, 6, 8, 4, 0, 4, 9, 4, 1, 2, 8, 3, 8, 5, 8, 7, 8, 6, 6, 7, 4, 7, 6, 9, 4, 5, 0, 6, 0, 5, 4, 9, 0, 1, 9, 8, 5, 0, 6, 9, 1, 3, 1, 3, 8, 0, 1, 7, 3, 8, 5, 3, 3, 0, 3, 6, 1, 8, 2, 5, 8, 1, 0, 5, 5, 9, 9, 9, 4, 1, 0, 1, 0, 2, 0, 0, 1], [0, 0, 5, 2, 2, 5, 1, 1, 3, 3], [1, 1, 2, 1, 1, 1, 1, 2, 1, 0], [], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 2, 2, 2, 1, 0], [1], [1, 1, 1, 1, 0], [2, 1, 4, 2, 4, 4, 4, 4, 6, 0, 3, 4, 2, 3, 2, 5, 4, 2, 1, 1, 1, 0, 2, 5, 6, 6, 6, 3, 1, 2, 0, 2, 0, 5, 6, 1, 6, 3, 3, 6, 3, 5, 1, 3, 3, 0, 5, 2, 1, 0, 4, 5, 5, 3, 4, 2, 4, 1, 4, 1, 0, 4, 6, 4, 6, 5, 2, 2, 3, 4, 2, 4, 1, 4, 2, 0, 3, 1, 0, 5, 1, 0, 5, 0, 5, 3, 3, 0, 1, 6, 3, 5], [1, 1, 0, 0, 0, 0, 1], [2, 1, 3, 2, 2, 0, 0, 0, 2, 2, 2, 1, 1, 0, 0, 2, 2, 0, 3, 0, 0, 3, 0, 2, 0, 2, 2, 2, 1, 3, 3, 0, 0, 0, 1, 3, 2, 1, 2, 1, 0, 2, 0, 2, 2, 3, 3, 2, 0, 3, 0, 1, 0, 2, 3, 1, 1, 2, 2, 3, 1, 1, 3, 3, 1, 0, 0, 1, 2, 3, 1, 3, 2, 3, 1, 1, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 1, 3, 1, 1, 1, 0, 2, 3, 1, 1, 2, 2, 2, 3, 3, 2, 3, 2, 3, 0, 0, 3, 3, 2, 0, 0, 1, 2, 2, 1, 1, 2, 1, 3, 2, 1, 0, 1, 1, 0, 0, 0, 1, 2, 0, 0, 1, 0, 2, 2, 0, 3, 0, 0, 1, 1, 0, 0, 0, 2, 3, 1, 0, 0, 1, 1, 2, 1, 3, 2, 2, 1, 3, 1, 1, 0, 0, 0, 2, 0, 3, 1, 0, 2, 2, 3, 2, 0, 2, 3, 0, 2, 1, 3, 3, 2, 3, 1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 0, 1, 1, 3, 0, 1, 3, 3, 2, 2, 0, 1, 2, 3, 2, 2, 1, 1, 0, 0, 2, 1, 1, 0, 1, 3, 3, 0, 3, 1, 2, 2, 3, 1, 1, 0, 1, 0, 2, 1, 3, 2, 2, 0, 3, 0, 1, 2, 0, 2, 3, 1, 3, 0, 3, 3, 3, 0, 2, 2, 2, 3, 3, 2, 3, 3, 1, 2, 0, 1, 0, 1, 0, 0, 3, 0, 0, 1, 2, 3, 1, 3, 1, 3, 1, 0, 3, 0, 0, 2, 1, 2, 0, 3, 3, 0, 2, 2, 3, 2, 0, 3, 2, 2, 1, 2, 1, 0, 1, 0, 3, 0, 0, 2, 3, 2, 1, 2, 3, 2, 0, 2, 0, 2, 1, 3, 1, 1, 1, 1, 3, 2, 0, 1, 1, 2, 1, 3, 3, 2, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1, 0, 0, 0, 1, 2, 1, 1, 2, 1, 0, 2, 0, 0, 1, 0, 2, 1, 0, 2, 1, 0, 2, 2, 0, 1, 1, 2, 1, 1, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 1, 0, 1, 1, 2, 1, 1, 2, 2, 1], [1, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 2, 1, 2, 1, 1, 1, 2, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(6.0) - abs(divInt(( i2 + i1 ),in1)) ) \\l ( divInt(mod(int(0.0),int(2.0)),i2) - in1 ):{:\\nin1 *= ( ( in1 + min(in1, res0) ) + max(i0, ( in0 + divInt(divInt(( int(4.0) + min(max(in1, i2), in0) ),int(3.0)),min(( int(7.0) * ( int(2.0) + i2 ) ), ( in2 + ( divInt(min(min(( in1 - min(i2, int(5.0)) ), i1), divInt(max(int(6.0), int(6.0)),( mod(abs(int(8.0)),int(4.0)) * abs(max(int(0.0), i1)) ))),i1) + int(4.0) ) ))) )) )\\n:}else:{:\\nb1 = not divInt(min(int(9.0), abs(divInt(abs(int(4.0)),int(1.0)))),max(( int(2.0) * mod(mod(i0,int(8.0)),( int(3.0) - max(i2, in2) )) ), int(8.0))) \\l min(int(5.0), int(8.0))\\n:}\\nloopBreak% = 0\\nwhile int(7.0) != res0:{:\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = divInt(max(int(8.0), int(6.0)),mod(divInt(divInt(min(abs(( abs(( min(res0, res0) - max(min(mod(in0,i1), int(6.0)), ( mod(int(7.0),int(4.0)) * mod(int(7.0),min(mod(int(6.0),i2), int(9.0))) )) )) + int(4.0) )), i0),i2),i0),int(5.0))) == ( in2 * res0 )\\ni1 -= int(0.0)\\nif res0 == mod(divInt(in0,min(in0, res0)),int(6.0)):{:\\nif b1:{:\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = int(0.0) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif not not in2 \\g i1:{:\\nif not False:{:\\nin0 = ( max(int(5.0), in0) + i0 )\\n:}\\n:}else:{:\\nin2 = int(4.0)\\n:}\\n:}\\n:}else:{:\\ni2 = int(9.0)\\n:}\\ni1 = ( int(0.0) - abs(divInt(divInt(int(1.0),max(int(9.0), int(8.0))),i0)) )\\nb2 = in1 \\g in2\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile mod(in2,max(int(5.0), in0)) \\ge divInt(divInt(abs(( in1 - ( max(i2, divInt(int(0.0),min(abs(( min(int(6.0), min(divInt(max(( min(int(9.0), ( ( ( in1 + int(1.0) ) + int(3.0) ) + abs(i1) )) + int(1.0) ), max(min(( mod(in1,int(3.0)) - divInt(abs(( mod(int(8.0),int(0.0)) - i1 )),i0) ), mod(int(1.0),int(7.0))), in1)),int(3.0)), max(min(res0, abs(int(8.0))), ( divInt(abs(int(5.0)),int(3.0)) * in1 )))) - int(3.0) )), res0))) - divInt(int(0.0),min(( ( in2 + max(i2, int(3.0)) ) * ( i2 - mod(max(int(6.0), abs(in0)),max(max(max(in1, divInt(( mod(abs(abs(mod(min(abs(int(1.0)), mod(i2,int(8.0))),in1))),int(2.0)) * i1 ),in1)), abs(i2)), i0)) ) ), int(5.0))) ) )),( abs(int(8.0)) - min(int(1.0), min(int(0.0), in0)) )),abs(i1)):{:\\nb0 = i0 \\ge divInt(int(5.0),divInt(in2,abs(max(i1, mod(mod(min(mod(i0,max(divInt(( int(5.0) - divInt(int(9.0),in2) ),int(9.0)), i0)), max(in2, in0)),( abs(( int(9.0) - divInt(max(mod(in0,( i0 * divInt(int(4.0),max(int(1.0), int(0.0))) )), int(1.0)),int(0.0)) )) * abs(divInt(i1,int(2.0))) )),int(0.0))))))\\nres0 += ( int(0.0) - abs(max(mod(in0,int(1.0)), in2)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 22, 22, 9, 13, 85, 85, 10, 10, 0, 19, 10, 9, 1, 5, 92, 7, 338, 93, 75, 44, 52]}, {"genotype": [[0], [1], [0], [], [0], [], [], [3], [0], [], [0, 1], [0], [2], [], [], [6, 3, 5], [], [2, 0, 0, 0], [0], [], [0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not ( res0 + in0 ) \\ge in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 2, 1, 1, 0, 0, 3, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 4], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [0], [], [0, 0], [], [2, 1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 0, 1], [0], [1, 1, 1], [1, 1, 1], [0, 5, 5], [1], [], [], [0, 1], [0], [2], [], [1], [6, 1, 3, 1, 3, 6, 0, 2, 6], [0, 0, 1], [1, 1, 0, 2, 2, 3, 3, 1, 0, 0, 0, 0, 0], [0, 1], [0, 1], [0, 2], [1]], "fitness": 99, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(0.0)\\nif not int(5.0) \\g i1:{:\\nin0 = ( mod(min(max(int(5.0), i1), in0),res0) + i0 )\\n:}else:{:\\ni2 *= res0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 3, 3, 1, 0, 0, 2, 1, 1, 0, 1, 9, 3, 13, 2, 2, 2, 1]}, {"genotype": [[0], [1], [1], [], [1], [1], [4], [], [], [], [], [], [], [], [], [3, 0], [0], [2, 0, 1], [0], [], [2], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = ( i0 * int(4.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 0, 2, 2, 1, 1, 2, 2, 2, 1, 1, 0, 0, 2, 1, 0], [0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 7, 8, 4, 2, 3, 3, 2, 0, 0, 5, 1, 9, 2, 2, 8, 0, 2, 3, 0, 4, 1, 2, 9, 4, 8, 5, 9, 1, 0], [4, 0, 2, 5, 3, 0, 0, 2, 3], [2, 0, 0, 0, 0, 0, 2, 2, 1], [1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 2, 0, 1, 1, 1, 0], [0, 1, 0], [0, 1, 1], [1, 2, 4, 5, 2, 0, 1, 2, 6, 2, 6, 3, 1, 4, 2, 1, 1, 5, 0, 1, 6, 0, 3, 0, 0, 5, 2, 1, 1, 6, 0, 6, 1, 1, 0, 3, 2, 4, 1, 2], [1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2, 0, 2, 2, 1, 2, 0, 1, 1, 2, 0, 3, 3, 1, 1, 0, 2, 0, 0, 3, 1, 3, 3, 1, 2, 2, 3, 2, 2, 2, 3, 0, 0, 0, 3, 2, 2, 1, 1, 3, 3, 1, 2, 2, 3, 0, 1, 3, 2, 3, 2, 0, 3, 1, 3, 1, 0, 2, 0, 2, 3, 1, 2, 2, 3, 0, 0, 2, 3, 3, 1, 0, 1, 0, 3, 1, 2, 0, 2, 0, 0, 1, 2, 0, 1, 0, 0, 0, 3, 3, 0, 2, 0, 2, 2, 2, 0, 0, 3, 1, 2, 1, 2, 0, 2, 1, 3, 0, 3, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 2, 2, 2, 0, 0, 0, 2, 0, 1, 0, 1, 1, 2, 2, 2, 1, 1, 0, 1, 2, 2, 2, 2, 1], [1, 2, 2, 0, 1, 0, 0, 1, 2, 1, 0, 0, 0, 2], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\ni1 -= int(0.0)\\n:}\\nloopBreak% = 0\\nwhile not int(7.0) \\le int(7.0):{:\\nloopBreak% = 0\\nwhile i2 \\l in1:{:\\nin2 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( int(8.0) == i0 or int(4.0) != int(2.0) )\\nloopBreak% = 0\\nwhile ( not b0 or True ):{:\\nif int(3.0) \\ge ( i1 * i2 ):{:\\nif int(3.0) \\l ( res0 + mod(mod(int(2.0),mod(i2,int(0.0))),int(0.0)) ):{:\\nb0 = False\\n:}else:{:\\nb0 = mod(res0,min(abs(int(5.0)), int(1.0))) \\l in0\\n:}\\n:}else:{:\\nb0 = ( i1 - in1 ) == abs(int(9.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = True\\nloopBreak% = 0\\nwhile b2:{:\\ni2 += abs(min(int(2.0), ( mod(min(divInt(divInt(divInt(min(i1, i1),in2),abs(divInt(divInt(int(2.0),int(8.0)),min(max(int(0.0), ( divInt(min(i0, int(2.0)),max(( max(mod(i1,abs(int(3.0))), abs(int(0.0))) + res0 ), ( i0 - divInt(abs(int(4.0)),mod(divInt(max(in0, i0),divInt(max(min(int(1.0), i0), int(2.0)),in2)),max(int(9.0), mod(i2,mod(i1,i1))))) ))) * int(4.0) )), ( res0 - int(8.0) ))))),i0), res0),i1) + abs(abs(i1)) )))\\nb1 = ( i0 + mod(( mod(in0,i2) + abs(int(5.0)) ),divInt(int(9.0),divInt(in1,( int(1.0) * abs(i1) )))) ) \\ge max(i2, int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 16, 16, 7, 9, 31, 31, 9, 9, 2, 19, 9, 10, 3, 3, 40, 3, 126, 33, 25, 14, 22]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2, 2], [], [0, 0], [], [2, 0], [], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 5, 7, 0, 4, 0, 2, 1, 7, 3, 9, 2, 4, 0, 6], [4, 0, 0], [2, 1], [0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0], [3, 3, 0, 3, 2], [], [], [5, 5, 3, 5, 5, 4, 3, 3, 4, 6], [], [3, 3, 0, 1, 2, 3, 1, 1, 3, 1, 1, 1, 3, 2, 1, 0, 2, 1, 3, 3, 2, 3, 3, 1, 0, 2, 2, 2, 0, 0, 1, 2, 1, 1, 3, 1, 3, 1, 3, 0, 2, 0, 1, 2, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 2, 2, 0, 0, 1, 2, 1, 1, 1], [2, 2, 0, 0, 2], [1, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( b1 and ( not max(min(in2, int(7.0)), ( min(int(5.0), int(7.0)) * abs(int(0.0)) )) \\le int(4.0) and int(0.0) \\l abs(mod(int(2.0),in2)) ) ) or ( int(1.0) * min(min(divInt(max(abs(int(7.0)), in0),( divInt(( in2 + in2 ),int(3.0)) + divInt(int(9.0),int(2.0)) )), max(int(4.0), max(int(0.0), max(in1, divInt(in0,int(6.0)))))), ( in0 * in1 )) ) \\l res0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 15, 15, 3, 2, 3, 8, 3, 5, 0, 0, 10, 0, 47, 10, 12, 5, 5]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [1], [0, 0, 0, 0], [], [3, 1, 2, 1], [0, 1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( True or not False )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 4, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 1], [], [1, 1, 0, 1], [1], [4], [], [1, 1], [], [0], [], [0], [], [], [4, 5, 4, 5, 0, 6], [1, 0, 0], [0, 3, 0, 1, 0], [], [0], [0], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 += in2\\nin1 = min(in2, int(4.0))\\nb1 = b1\\ni0 = res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 6, 3, 5, 0, 1, 1, 0]}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 1, 0, 1, 2, 1], [0, 0, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 4, 8, 6, 7, 5, 0, 8, 2, 7, 9, 3, 1, 4, 0, 9, 6, 6, 1, 1, 9, 3, 2, 1, 9, 8, 6], [1, 0, 5], [], [], [0, 1, 1, 1], [0, 0, 0], [2], [], [1, 1, 0], [0, 4, 5, 1, 6, 2, 2, 0, 4, 1, 5, 3, 2, 6, 1, 5, 3, 5, 6, 6, 4, 0, 4, 6, 4, 5, 5, 1, 2, 4, 3, 3, 6], [1, 1, 1, 0, 0], [3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 3, 0, 1, 2, 3, 1, 1, 0, 0, 1, 0, 3, 3, 2, 2, 2, 1, 0, 2, 3, 1, 3, 1, 0, 0, 3, 2, 1, 2, 1, 3, 3, 3, 2, 2, 0, 0, 0, 3, 0, 0, 0, 2, 2, 1, 0, 2, 3, 3, 3, 3, 2, 3, 0, 1, 2, 1, 3, 0, 2, 0, 3, 1, 0, 0, 3, 3, 0, 1, 2, 2, 0, 2, 2, 1, 1, 2, 3, 1, 1, 3, 1, 0, 2, 0, 1, 1, 3, 2, 2, 1, 2, 3, 2, 0, 1, 1, 3, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2], [2, 1, 2, 1, 2, 2, 0, 0, 0, 1, 2, 0, 1, 1, 2, 2, 0, 2], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not min(abs(i0), divInt(in1,int(6.0))) \\g in2:{:\\nif int(5.0) \\l min(abs(min(i1, int(4.0))), ( abs(int(8.0)) * int(6.0) )):{:\\nres0 -= i2\\n:}else:{:\\ni2 *= i0\\n:}\\nin1 -= int(7.0)\\n:}else:{:\\ni1 = in2\\nif min(abs(( mod(( int(5.0) * in0 ),divInt(abs(int(0.0)),min(int(8.0), i2))) * res0 )), abs(divInt(int(2.0),divInt(int(7.0),abs(min(min(( divInt(i1,in2) + in0 ), min(in2, res0)), res0)))))) != ( ( int(9.0) + in1 ) + divInt(min(abs(abs(min(mod(min(i0, int(3.0)),( int(1.0) - max(in1, ( res0 * max(int(4.0), in1) )) )), in2))), max(min(in2, int(0.0)), ( ( i1 + ( divInt(int(9.0),int(6.0)) - ( min(int(6.0), int(1.0)) - min(int(1.0), i2) ) ) ) * ( in1 * int(9.0) ) ))),int(3.0)) ):{:\\nin0 = min(( ( int(2.0) + mod(max(mod(in0,int(1.0)), int(9.0)),abs(res0)) ) * int(8.0) ), int(6.0))\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 28, 28, 3, 0, 0, 4, 3, 1, 0, 3, 33, 5, 111, 26, 29, 18, 11]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 1, 2, 0, 2, 2, 0, 2, 2, 2, 1, 0, 2, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 0, 4, 3, 2, 2, 4, 9, 9, 2, 5, 1, 4, 5, 4, 0, 6, 2, 9, 4, 2, 5, 1, 4, 5, 8, 4, 6, 7, 9, 0, 5, 9, 9, 6, 1, 5, 1, 5, 0, 0, 6, 6, 3, 6, 9, 7, 2, 3, 2, 6, 2, 0, 3, 2, 6, 6, 8, 9, 8, 6, 0, 8, 4, 5, 5, 0, 7, 4, 1, 5, 1, 6, 1, 2], [2, 1, 2, 2, 2, 2, 4, 5, 1, 3, 2, 2, 2], [0, 1, 2, 2, 0, 2, 0, 0, 0, 1], [0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 0, 1, 3, 3, 3, 0, 1, 2], [0, 0, 1, 1], [0, 0, 1, 1, 1], [1, 3, 2, 5, 5, 5, 5, 1, 2, 0, 4, 0, 2, 6, 5, 4, 5, 6, 2, 0, 5, 6, 2, 4, 4, 5, 1, 0, 4, 4, 3, 2, 0, 6, 0, 6, 6, 0, 5, 0, 3, 3, 6, 0, 3, 2, 1, 3, 6, 3, 3, 5, 4, 3, 0, 2, 3, 3, 1, 2, 3, 6, 1, 1, 4, 1, 4, 6, 0, 6, 2, 4, 3, 5, 2, 3], [0, 0], [2, 2, 3, 0, 2, 3, 2, 1, 1, 0, 1, 3, 2, 0, 3, 3, 2, 1, 3, 0, 0, 0, 2, 3, 0, 3, 1, 3, 1, 0, 2, 0, 2, 1, 2, 0, 1, 3, 3, 0, 0, 3, 2, 0, 1, 1, 0, 0, 0, 2, 2, 2, 3, 0, 0, 2, 3, 0, 3, 2, 1, 0, 1, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 2, 1, 3, 3, 0, 3, 0, 2, 3, 2, 2, 3, 0, 3, 2, 2, 3, 1, 1, 0, 1, 2, 3, 1, 0, 1, 3, 0, 2, 3, 1, 1, 2, 3, 1, 3, 0, 0, 2, 2, 2, 0, 2, 2, 0, 3, 0, 1, 0, 2, 3, 3, 1, 1, 0, 2, 0, 1, 3, 3, 2, 0, 2, 3, 1, 2, 0, 3, 1, 2, 0, 0, 1, 0, 1, 2, 1, 2, 3, 0, 2, 3, 2, 1, 2, 1, 1, 0, 1, 2, 3, 1, 2, 2, 3, 3, 2, 2, 0, 3, 0, 0, 1, 2, 2, 2, 3, 0, 2, 2, 3, 1, 2, 3, 1, 2, 1, 3, 1, 3, 1, 3, 0, 1, 0, 3, 1, 0, 1, 2, 0, 0, 3, 0, 3, 2, 1, 1, 1, 1, 2, 0, 3, 0, 3, 2, 0, 3, 1, 2, 2, 3, 1, 1, 3, 0, 1, 2, 0, 3, 3, 3, 2, 1, 2, 3, 2, 2, 0, 1, 0, 0, 2, 2, 0, 1, 3, 0, 2, 0, 2, 1, 1, 2, 3, 3, 1, 3, 2, 0, 0, 2, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 3, 2, 3, 0, 1, 2, 2, 1, 3, 3, 1, 1, 0, 0, 0, 1, 3, 1, 3, 2, 3, 0, 3, 1], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [0, 2, 0, 2, 0, 1, 1, 2, 2, 0, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 2, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 2, 0, 0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 2, 2, 2], [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 0, 0, 2, 1, 2, 0, 2, 0, 0, 2, 2, 1, 1, 1, 2, 1, 0, 2, 0, 0, 2, 2, 2, 2, 2], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not not mod(mod(min(i1, mod(abs(( int(8.0) + int(8.0) )),in0)),int(0.0)),min(( i2 - abs(min(( int(4.0) + max(in2, in2) ), in2)) ), ( max(in2, abs(int(3.0))) - abs(int(2.0)) ))) == i1:{:\\nb0 = True\\ni2 = divInt(i0,( int(2.0) + divInt(in1,int(4.0)) ))\\n:}\\nloopBreak% = 0\\nwhile min(min(i0, i2), min(mod(res0,int(9.0)), int(9.0))) \\g in2:{:\\nb1 = in1 == in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nloopBreak% = 0\\nwhile ( ( mod(abs(res0),i2) * ( max(i0, min(mod(int(2.0),in2), int(5.0))) - mod(int(1.0),int(4.0)) ) ) + ( res0 - i2 ) ) == abs(in1):{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in1 == int(5.0):{:\\nif False:{:\\nif mod(int(4.0),max(min(in2, abs(i1)), ( max(divInt(( abs(i0) + max(divInt(( abs(int(0.0)) + int(6.0) ),in1), int(2.0)) ),( abs(int(9.0)) + in1 )), int(4.0)) * max(in0, mod(min(int(2.0), int(5.0)),( max(int(1.0), max(i2, i0)) - mod(divInt(divInt(res0,( divInt(i0,max(res0, int(4.0))) * res0 )),( max(max(int(5.0), int(8.0)), i0) + ( in2 * int(4.0) ) )),min(min(( i0 + mod(max(int(6.0), mod(in0,max(int(7.0), mod(in0,res0)))),int(9.0)) ), i0), int(0.0))) ))) ))) == mod(int(5.0),divInt(abs(in0),mod(abs(mod(int(9.0),mod(int(9.0),int(6.0)))),i2))):{:\\ni1 = int(1.0)\\n:}else:{:\\nb0 = divInt(abs(int(5.0)),mod(( min(abs(( mod(in0,abs(res0)) + in0 )), int(1.0)) * ( divInt(mod(min(in0, ( divInt(abs(int(5.0)),divInt(max(int(0.0), ( int(0.0) * max(int(6.0), min(int(6.0), max(in2, int(3.0)))) )),in1)) - min(int(6.0), in0) )),int(9.0)),( i0 - i2 )) - max(in0, abs(( int(7.0) * int(2.0) ))) ) ),int(3.0))) \\le int(2.0)\\n:}\\n:}else:{:\\nif ( ( in0 - abs(i1) ) != min(divInt(i2,min(int(6.0), ( divInt(min(int(2.0), int(0.0)),abs(in0)) + int(3.0) ))), divInt(res0,max(abs(abs(mod(int(2.0),( max(( ( i1 * int(6.0) ) + i1 ), in1) + mod(divInt(i1,int(6.0)),max(in1, ( res0 * mod(int(8.0),int(9.0)) ))) )))), ( abs(min(int(8.0), abs(mod(i0,res0)))) * divInt(i2,abs(abs(int(6.0)))) )))) and ( int(0.0) \\g int(8.0) and ( int(4.0) \\ge int(5.0) or b2 ) ) ):{:\\nb0 = min(int(5.0), int(0.0)) == int(7.0)\\n:}else:{:\\nb0 = ( min(mod(abs(in1),int(4.0)), mod(( int(1.0) * min(abs(int(5.0)), int(1.0)) ),in0)) * in2 ) == i2\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = False\\nb1 = not int(6.0) == min(int(1.0), abs(( abs(in0) * abs(int(2.0)) )))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 18, 18, 8, 10, 76, 76, 13, 10, 3, 25, 13, 12, 4, 5, 76, 2, 302, 78, 74, 35, 43]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 2, 2, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 2, 2, 2, 1, 2, 9, 1, 9, 9, 8, 8, 5, 0, 8, 8, 5, 1, 9, 6, 8, 0, 6, 2, 1, 0, 8, 3, 6, 7, 7, 4, 8, 1, 6, 3, 7, 4, 8, 7, 0, 4, 9, 8, 7, 0, 9, 6, 9, 9, 9, 6, 3, 9, 7, 1, 2, 2, 4, 8, 1, 7, 7, 7, 5, 4, 7, 0, 8, 6, 3, 3, 8, 6, 6, 0, 9, 0, 0, 6, 9, 3, 1, 4, 5, 7, 2, 0, 0, 4, 5, 8, 3, 9, 6, 8, 2, 7, 4, 8, 3, 9, 2, 8, 6, 5, 2, 3], [4, 0, 5, 2, 1, 4, 4, 4, 3, 4, 1, 3, 3, 0, 4], [1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 3, 3, 2, 2, 0], [0], [0, 0, 1], [2, 6, 3, 3, 5, 1, 3, 6, 6, 5, 6, 3, 4, 2, 1, 6, 2, 1, 5, 5, 6, 5, 0, 1, 1, 4, 2, 0, 3, 1, 3, 5, 3, 5, 2, 1, 3, 4, 1, 2, 4, 1, 4, 3, 6, 3, 0, 0, 3, 6, 6, 4, 2, 3, 6, 3, 4, 2, 5, 1, 0, 3, 1, 3, 5, 2, 5, 6, 2, 5, 2, 3, 3, 5, 0, 3, 1, 2, 2, 3, 6, 3, 1, 0, 0, 4, 5, 3, 3, 3, 6, 2, 0, 2, 3, 3, 0, 6, 4, 3, 1, 5, 2, 2, 5, 0, 4, 4, 2, 3, 1, 5, 3, 2, 4, 1, 1, 4, 4, 3, 5, 2, 3, 0, 5], [1, 0, 1, 0], [1, 3, 0, 0, 2, 1, 1, 2, 1, 0, 3, 0, 0, 0, 0, 2, 1, 3, 2, 1, 0, 2, 2, 0, 2, 0, 3, 1, 3, 2, 0, 2, 2, 2, 3, 3, 3, 0, 1, 2, 3, 1, 1, 3, 1, 0, 1, 3, 3, 2, 3, 0, 3, 3, 0, 1, 1, 0, 0, 0, 3, 3, 1, 2, 1, 1, 2, 1, 2, 2, 3, 2, 1, 1, 1, 3, 0, 3, 1, 2, 2, 0, 0, 3, 0, 1, 3, 2, 2, 0, 0, 3, 3, 1, 2, 2, 3, 1, 0, 0, 0, 3, 2, 1, 0, 0, 2, 3, 2, 2, 2, 0, 2, 1, 0, 2, 2, 3, 1, 1, 2, 2, 0, 0, 1, 2, 2, 1, 3, 3, 0, 0, 2, 2, 2, 2, 1, 2, 0, 2, 2, 3, 1, 0, 3, 3, 3, 1, 1, 2, 0, 1, 0, 1, 0, 3, 3, 1, 3, 0, 1, 1, 1, 3, 1, 2, 2, 0, 3, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 2, 3, 1, 2, 3, 2, 0, 3, 3, 0, 2, 1, 2, 2, 0, 3, 2, 0, 0, 0, 1, 2, 1, 2, 2, 1, 2, 3, 0, 1, 1, 3, 0, 2, 3, 3, 2, 0, 1, 3, 2, 1, 0, 2, 0, 1, 2, 0, 2, 0, 3, 2, 3, 0, 2, 3, 2, 3, 1, 3, 2, 0, 0, 1, 3, 3, 1, 2, 3, 0, 0, 1, 0, 1, 3, 0, 3, 3, 1, 0, 1, 2, 0, 3, 0, 2, 1, 1, 2, 2, 2, 0, 0, 0, 2, 3, 0, 2, 2, 3, 1, 1, 3, 3, 3, 3, 3, 0, 2, 3, 0, 3, 2, 3, 1, 1, 3, 2, 0, 3, 3, 2, 2, 3, 1, 2, 3, 1, 0, 0, 3, 3, 0, 0, 2, 1, 1, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 0, 1, 1, 2, 3, 1, 2, 0, 3, 2, 1, 0, 2, 3, 0, 1, 0, 1, 2, 1, 0, 2, 1, 3, 1, 3, 1, 2, 1, 2, 2, 3, 0, 3, 2, 3, 1, 2, 2, 0, 3, 0, 2, 0, 3, 1, 3, 0, 0, 0, 1, 2, 2, 0, 3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 2, 1, 3, 3, 1, 0, 1, 3, 2, 1, 1, 3, 3, 2, 0, 3, 3, 2, 0, 0, 1, 1, 0, 1, 3, 2, 2, 2, 2, 1, 0, 1, 2, 3, 0, 1, 0, 1, 2, 0, 0, 2, 2, 0, 2, 1, 0, 1, 2, 2, 2, 0, 1, 3, 1, 3, 1, 3, 0, 0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 2, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 2, 1, 2, 0, 1, 1, 1, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 1, 0, 0, 1, 2, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 0, 0, 2, 2, 1, 2, 0, 0, 1, 1, 0, 0, 1, 0, 2, 0, 2, 2, 2], [1, 0, 0, 0, 2, 1, 1, 2, 1, 2, 2, 2, 0, 1, 2, 2, 1, 0, 2, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0, 2, 0, 2, 1, 0, 0, 0, 1, 2, 2, 0, 2, 0, 1, 2, 0, 2, 2, 1, 1, 0, 2, 2, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(3.0) \\le max(i2, res0)\\nb1 = mod(int(7.0),int(2.0)) \\l mod(int(2.0),in0)\\nb1 = max(in0, in2) != i1\\nin0 -= res0\\nloopBreak% = 0\\nwhile True:{:\\nif ( ( int(2.0) + max(mod(int(1.0),res0), ( divInt(in2,( res0 + min(int(2.0), max(divInt(in0,( ( divInt(abs(max(min(in1, int(9.0)), divInt(max(int(1.0), int(9.0)),abs(int(9.0))))),i2) + int(8.0) ) * abs(max(mod(max(i1, min(max(res0, int(8.0)), int(5.0))),i2), i1)) )), in2)) )) - max(abs(int(0.0)), divInt(int(8.0),int(8.0))) )) ) == mod(int(5.0),( divInt(max(mod(int(1.0),int(9.0)), int(6.0)),abs(in2)) - min(int(8.0), divInt(mod(res0,in2),max(i0, int(0.0)))) )) or max(( mod(i1,i1) * max(min(int(6.0), ( ( min(int(2.0), in1) - i2 ) * i0 )), abs(divInt(int(1.0),in0))) ), i1) \\g mod(abs(( ( ( in0 * divInt(int(0.0),in2) ) * ( ( abs(int(8.0)) + int(3.0) ) - divInt(( in0 * in2 ),int(6.0)) ) ) * divInt(( int(7.0) - max(max(i2, i1), ( mod(mod(mod(int(7.0),( in0 + mod(mod(max(int(4.0), in1),max(max(min(int(8.0), int(1.0)), divInt(i1,int(6.0))), i2)),int(3.0)) )),in1),abs(min(int(7.0), min(i1, int(4.0))))) * int(8.0) )) ),int(7.0)) )),abs(int(0.0))) ):{:\\nloopBreak% = 0\\nwhile ( ( in1 - max(in0, int(4.0)) ) - mod(res0,int(9.0)) ) \\le in0:{:\\nb0 = i0 \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif res0 \\le int(8.0):{:\\nin1 += i2\\nloopBreak% = 0\\nwhile ( ( in0 - int(7.0) ) \\ge ( int(0.0) * min(res0, mod(abs(int(9.0)),divInt(max(divInt(in0,min(abs(in1), divInt(int(6.0),( ( i2 + min(( in2 - i1 ), i0) ) - int(9.0) )))), ( int(9.0) * mod(divInt(int(9.0),mod(min(in0, int(6.0)),int(3.0))),abs(i1)) )),mod(min(min(( in0 - int(9.0) ), min(( int(7.0) * in2 ), divInt(i2,int(1.0)))), divInt(in2,divInt(res0,abs(( abs(i2) + ( max(mod(min(int(2.0), min(( in2 + i2 ), int(2.0))),max(abs(int(4.0)), mod(max(in0, in0),int(8.0)))), in2) + int(1.0) ) ))))),max(i0, min(abs(int(7.0)), in0)))))) ) and ( int(7.0) \\le divInt(i1,min(i2, divInt(int(7.0),int(5.0)))) and ( ( ( ( i2 * in0 ) + res0 ) * ( min(in0, ( ( max(int(4.0), int(7.0)) - min(min(min(abs(min(i1, mod(min(i0, max(divInt(abs(int(0.0)),int(8.0)), abs(divInt(i0,min(abs(( ( min(int(6.0), ( min(int(3.0), in1) + in2 )) + min(min(in0, in0), ( int(3.0) + int(8.0) )) ) - int(6.0) )), abs(in0)))))),res0))), min(i2, abs(abs(max(( i0 * int(6.0) ), int(0.0)))))), ( min(int(9.0), mod(i2,max(mod(int(0.0),in0), divInt(abs(in0),int(0.0))))) * i0 )), int(6.0)) ) + ( int(9.0) * res0 ) )) + mod(int(3.0),abs(int(1.0))) ) ) \\g max(int(4.0), ( int(5.0) - mod(( min(in1, min(divInt(min(int(7.0), mod(mod(in0,abs(i1)),mod(in2,abs(int(2.0))))),max(i2, i2)), in2)) * int(0.0) ),( ( i0 + abs(in1) ) * in1 )) )) or int(0.0) \\ge min(mod(i2,int(4.0)), divInt(int(5.0),( int(8.0) * min(max(int(3.0), in0), int(9.0)) ))) ) ) ):{:\\nif max(mod(int(6.0),int(8.0)), min(min(mod(i1,max(min(mod(in2,in0), int(2.0)), int(7.0))), i2), int(4.0))) \\ge abs(mod(( ( mod(int(8.0),in1) - int(3.0) ) - ( min(i1, int(9.0)) + i1 ) ),int(2.0))):{:\\nb0 = mod(in1,in1) \\l ( divInt(in0,( int(8.0) * in2 )) * int(6.0) )\\n:}else:{:\\nloopBreak% = 0\\nwhile not not b0:{:\\ni2 = divInt(( mod(in0,int(5.0)) + abs(int(2.0)) ),abs(int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = abs(i0) \\le in2\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 7, 10, 109, 109, 15, 7, 4, 23, 15, 8, 1, 3, 125, 4, 459, 120, 109, 57, 65]}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [1, 0], [1], [0, 1, 0, 1, 1, 1, 1], [1, 3, 4, 9, 2, 7, 8], [4, 2], [1], [0], [1, 0, 0, 1, 0, 0], [0, 0], [2, 3, 2, 0], [], [0], [4, 0, 5, 5], [0], [1, 1, 0, 0, 3, 2, 1, 2, 1, 2, 1, 0], [1, 1, 1], [2], [], [1, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(13.0) \\le int(49.0):{:\\nif not ( in1 == i0 and not b1 ):{:\\nin2 = abs(mod(int(2.0),divInt(int(7.0),mod(int(8.0),in2))))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 2, 1, 7, 7, 2, 1, 1, 6, 2, 4, 0, 1, 4, 1, 12, 3, 1, 0, 3]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 1, 2, 0, 1, 1, 1, 1], [1], [0, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 1, 7, 4, 6, 8, 2, 9, 7, 5, 6, 5, 5, 2, 3, 5, 5, 4, 0, 1, 5, 7, 3, 3], [1, 3, 5], [2, 2, 2, 0], [], [0, 1, 1, 1], [0, 0, 0], [0], [], [], [1, 4, 5, 5, 6, 3, 5, 6, 0, 0, 0, 0, 0, 5, 4, 1, 5, 2, 4, 3, 5, 4, 5, 1, 0, 1, 0, 4, 3], [0, 1, 0, 1], [3, 3, 0, 3, 2, 3, 2, 3, 1, 1, 0, 3, 3, 0, 2, 0, 2, 0, 3, 3, 0, 1, 2, 3, 2, 0, 0, 3, 3, 1, 3, 1, 3, 1, 0, 3, 3, 3, 1, 2, 0, 1, 0, 3, 2, 3, 3, 3, 2, 1, 1, 1, 3, 2, 3, 0, 2, 0, 2, 2, 3, 3, 3, 1, 0, 2, 2, 1, 1, 3, 3, 0, 0, 3, 1, 3, 0, 3, 2, 2, 3, 0, 3, 1, 1, 3, 1, 0, 0, 2, 0, 2, 1, 0, 3, 1, 1, 1, 1, 2, 0, 2, 1, 0, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 2, 2, 2, 2, 0, 1, 2, 1, 1, 2, 0, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 0, 2, 1], [0, 0, 1, 2, 1, 2, 0, 2], [1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\ni1 = min(max(in1, min(( max(mod(max(int(4.0), int(7.0)),in2), min(abs(in2), mod(res0,( in0 + abs(abs(in2)) )))) + int(1.0) ), mod(abs(divInt(res0,i0)),min(max(int(7.0), abs(int(4.0))), max(int(6.0), i0))))), max(abs(min(int(8.0), ( i0 - int(2.0) ))), i0))\\nloopBreak% = 0\\nwhile abs(mod(abs(min(max(mod(int(9.0),int(7.0)), int(5.0)), abs(divInt(abs(i0),mod(in2,divInt(( max(abs(min(int(6.0), in1)), divInt(( int(5.0) * int(5.0) ),min(abs(i1), in2))) - max(int(2.0), abs(i2)) ),abs(( mod(abs(in1),min(int(3.0), int(5.0))) * abs(int(5.0)) )))))))),in0)) \\g in2:{:\\nin1 += mod(in2,divInt(int(4.0),i1))\\ni0 = max(int(0.0), int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(5.0)\\nb2 = int(7.0) \\ge divInt(i0,mod(int(3.0),in1))\\nb0 = in0 != int(3.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 1, 7, 25, 25, 3, 4, 0, 4, 3, 1, 0, 0, 29, 4, 106, 21, 35, 8, 15]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 0, 2, 3, 5, 9, 7, 8, 2, 0, 5], [], [], [], [], [], [], [], [], [3, 1, 4, 3, 1, 3, 0, 0, 1], [1], [3, 3, 1, 3, 1, 2, 1, 2, 0, 2, 2, 2, 1, 2, 0, 2, 1, 2, 0, 3, 1, 0, 3, 1, 2, 2, 2, 0, 0, 2, 1, 1, 3, 1, 1, 2, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [2, 0, 0, 1, 1, 0], [0, 1, 2, 2, 0, 2, 1, 1], [0, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += abs(min(int(5.0), min(int(7.0), divInt(int(0.0),divInt(i1,mod(( mod(int(2.0),( in1 - ( int(3.0) * ( in0 * max(int(5.0), i1) ) ) )) + max(int(9.0), mod(( mod(in0,i0) * ( int(7.0) - int(8.0) ) ),min(int(2.0), int(0.0)))) ),( divInt(i0,i1) - int(5.0) )))))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 40, 14, 6, 8, 7]}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [4], [], [], [1], [0], [], [], [], [6, 0, 3, 0, 6], [1], [0, 0, 2, 0, 0], [1], [], [2], [0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile res0 \\le i0:{:\\nin0 *= divInt(i0,res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 5, 1, 5, 1, 0, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 6, 0, 8, 2, 4, 6], [3], [1], [], [1], [0], [], [], [], [6, 4, 6], [], [3, 1, 1, 3, 2, 0, 2, 3, 1, 1, 2, 3, 2, 2, 3, 1, 0, 1, 2, 2, 1, 3, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0], [0, 2, 0, 2, 1, 2], [0, 0, 1, 1, 2, 1], [1]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(int(2.0), int(2.0)) \\ge abs(( res0 + mod(min(int(4.0), int(6.0)),( abs(( ( max(int(0.0), in1) + int(8.0) ) - ( ( int(2.0) - abs(int(4.0)) ) * int(6.0) ) )) - res0 )) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 9, 9, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 25, 7, 6, 6, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 2, 2, 0, 2, 2, 1, 1, 1, 2, 0, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 9, 1, 5, 7, 2, 5, 2, 3, 6, 8, 8, 2, 7, 8, 2, 7, 7, 4, 6, 1, 3, 6, 9, 0, 7, 2, 9, 6, 7, 5, 4, 4, 0, 5, 6, 6, 2, 9, 6, 0, 2, 8, 4, 5, 5, 8, 8, 2, 8, 4, 0, 1, 9, 9, 4, 8, 8, 3, 3], [1, 1, 5, 5, 2, 4, 4, 2], [2, 2, 0, 0, 2], [0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 1, 2, 1, 0], [1, 0], [0, 1, 0], [6, 3, 0, 5, 2, 5, 5, 0, 2, 5, 4, 1, 2, 4, 3, 5, 2, 1, 6, 6, 3, 4, 2, 6, 5, 3, 3, 4, 4, 6, 3, 0, 4, 3, 1, 6, 0, 1, 5, 5, 5, 6, 5, 3, 2, 2, 2, 1, 0, 5, 6, 4, 4, 5, 4, 2, 6, 0, 0, 0, 2, 0, 5, 0, 6, 5, 1, 4, 5, 5, 4, 0, 3, 0], [1, 0, 1, 0, 0, 0], [3, 2, 2, 3, 1, 0, 1, 1, 0, 3, 2, 0, 3, 0, 3, 0, 1, 0, 0, 1, 3, 0, 0, 3, 0, 0, 2, 3, 2, 3, 2, 0, 1, 1, 1, 2, 3, 0, 1, 2, 1, 3, 3, 1, 3, 0, 2, 1, 2, 1, 3, 0, 3, 0, 3, 0, 0, 2, 0, 1, 0, 0, 2, 2, 1, 2, 1, 2, 1, 1, 2, 3, 3, 0, 3, 3, 3, 3, 3, 3, 2, 2, 3, 0, 3, 1, 0, 0, 1, 1, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 0, 3, 1, 3, 0, 2, 2, 3, 3, 2, 1, 3, 3, 2, 2, 2, 3, 0, 0, 2, 0, 2, 2, 3, 3, 2, 0, 2, 1, 1, 2, 1, 1, 1, 0, 3, 1, 1, 0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 3, 3, 0, 3, 0, 2, 3, 1, 1, 3, 3, 1, 2, 0, 0, 0, 3, 3, 2, 2, 0, 2, 1, 0, 3, 3, 2, 2, 3, 3, 1, 2, 2, 0, 3, 2, 2, 1, 0, 3, 0, 0, 2, 0, 1, 0, 1, 0, 1, 3, 1, 2, 3, 0, 0, 3, 0, 3, 0, 1, 1, 3, 2, 2, 1, 3, 0, 1, 1, 0, 0, 3, 0, 1, 1, 3, 0, 1, 0, 2, 3, 3, 2, 2, 0, 1, 3, 0, 3, 2, 0, 3, 0, 0, 3, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 3, 3, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 0, 0, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 2, 0, 1, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2], [2, 0, 1, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 0, 0, 0, 2, 2, 1, 0, 1, 0, 1, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = b2\\nres0 *= min(mod(( min(int(5.0), in0) + int(5.0) ),int(9.0)), i0)\\nloopBreak% = 0\\nwhile max(mod(in2,max(i2, max(in2, int(1.0)))), in2) \\g i0:{:\\nloopBreak% = 0\\nwhile int(5.0) \\g max(i2, in2):{:\\nin1 = abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i2 != ( min(( min(( in1 - int(7.0) ), int(2.0)) * int(5.0) ), ( min(in0, int(2.0)) * mod(int(3.0),max(min(int(6.0), abs(in2)), ( int(8.0) - ( int(8.0) - max(i2, max(i1, abs(res0))) ) ))) )) * res0 ):{:\\nloopBreak% = 0\\nwhile ( ( in0 - int(2.0) ) != in1 and i2 == ( ( int(7.0) + mod(int(8.0),( int(2.0) - int(7.0) )) ) - mod(min(abs(res0), abs(min(min(max(min(max(divInt(( min(in2, min(int(7.0), in0)) * in0 ),int(4.0)), int(6.0)), min(int(1.0), ( in1 + max(max(int(3.0), ( int(6.0) + int(9.0) )), in1) ))), min(int(0.0), max(res0, ( divInt(max(abs(mod(int(7.0),min(max(( ( mod(max(in0, i0),( in1 + mod(divInt(max(abs(( in0 * mod(int(2.0),int(9.0)) )), ( int(6.0) * int(7.0) )),int(5.0)),i1) )) - abs(int(4.0)) ) + int(4.0) ), res0), divInt(mod(int(0.0),i0),( ( divInt(i1,( abs(min(abs(in2), max(in2, ( max(int(5.0), int(6.0)) - max(min(int(6.0), divInt(in2,res0)), in2) )))) + min(abs(mod(( in0 - ( int(2.0) * i2 ) ),abs(max(mod(divInt(min(max(int(9.0), ( ( i2 - abs(divInt(( int(6.0) + i2 ),max(i1, i0))) ) * ( in2 * int(0.0) ) )), res0),int(2.0)),in1), int(8.0))))), min(int(4.0), mod(abs(in1),in2))) )) * max(in1, abs(i2)) ) * int(5.0) ))))), int(5.0)),min(( ( int(8.0) - max(res0, int(8.0)) ) + int(2.0) ), i0)) + i0 )))), min(i0, int(8.0))), int(4.0)))),min(i2, int(0.0))) ) ):{:\\ni0 -= in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = divInt(abs(abs(divInt(divInt(res0,int(1.0)),abs(in2)))),abs(( i1 - abs(in1) )))\\nb0 = not not False\\nif in2 \\le min(int(9.0), int(9.0)):{:\\nin2 = int(4.0)\\nif not True:{:\\nloopBreak% = 0\\nwhile b0:{:\\nin1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif int(8.0) \\le in0:{:\\nb2 = mod(( int(8.0) - int(3.0) ),abs(abs(int(3.0)))) == i0\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 17, 17, 8, 9, 61, 61, 8, 5, 1, 16, 8, 8, 2, 3, 74, 6, 258, 59, 70, 36, 25]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [0, 3], [0], [0], [], [1], [0], [], [], [], [1], [], [0, 2, 1, 1], [0], [], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i1 \\l ( int(0.0) * int(3.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 2, 0], [0, 1, 1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 4, 5, 4, 6, 4, 3, 0, 2, 3, 1, 2, 3, 9, 5, 6, 7, 0], [3, 0, 3], [], [], [1, 1, 1], [0, 0, 0], [], [], [0], [1, 2, 6, 3, 0, 1, 3, 4, 5, 1, 3, 5, 2, 1, 0, 1, 3, 1, 0, 6, 3, 2, 6, 1, 6], [1], [1, 3, 2, 0, 3, 2, 2, 3, 2, 0, 3, 3, 2, 3, 3, 2, 3, 0, 2, 0, 2, 0, 1, 3, 2, 0, 1, 1, 3, 0, 3, 3, 0, 3, 1, 2, 3, 0, 2, 0, 1, 3, 3, 1, 1, 1, 1, 3, 2, 1, 2, 2, 0, 2, 0, 3, 2, 3, 1, 1, 2, 2, 1, 0, 1, 3, 0, 2, 1, 0, 3, 2, 1, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 3, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [2, 0, 0, 1, 0, 2, 0, 2, 2, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0, 1, 2, 1, 0], [1, 0, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(7.0) \\ge abs(divInt(i1,min(mod(mod(min(divInt(i2,max(min(divInt(abs(min(( abs(res0) - mod(in0,divInt(i0,int(9.0))) ), abs(( i1 + int(4.0) )))),int(5.0)), max(in0, min(max(in1, abs(int(4.0))), ( min(in2, ( i1 * int(6.0) )) * abs(max(int(4.0), int(3.0))) )))), int(0.0))), int(2.0)),abs(divInt(int(3.0),( ( in0 * ( in2 * abs(mod(min(int(1.0), int(2.0)),divInt(( int(3.0) - i2 ),int(9.0)))) ) ) + max(i1, ( int(5.0) * i0 )) )))),abs(( int(6.0) - i1 ))), ( divInt(in0,i1) - max(i0, int(7.0)) )))):{:\\nloopBreak% = 0\\nwhile res0 \\l in0:{:\\nloopBreak% = 0\\nwhile min(int(0.0), i2) \\ge res0:{:\\ni1 -= res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 3, 1, 19, 19, 3, 0, 0, 3, 3, 0, 0, 1, 25, 1, 88, 22, 23, 12, 11]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [1], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 1, 1, 5, 3, 7, 2, 5, 4, 3, 7, 7, 8, 9, 8], [2, 0, 0, 2, 4, 0], [2, 2, 1, 0, 1], [0], [0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [3, 1], [0], [], [3, 6, 5, 6, 0, 1, 5, 3, 4, 4, 4, 1, 0, 1, 3, 5], [], [0, 2, 2, 2, 0, 2, 1, 1, 0, 2, 3, 3, 2, 1, 2, 1, 3, 2, 0, 0, 0, 3, 1, 0, 0, 3, 3, 2, 3, 0, 0, 1, 1, 1, 1, 3, 2, 0, 0, 0, 2, 1, 3, 1, 0, 3, 1, 1, 3, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 2, 2, 2, 0, 1, 1, 0], [0, 1, 0, 2, 1, 1, 1, 0], [0, 1, 0, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( in0 == divInt(mod(( res0 + ( int(0.0) - int(2.0) ) ),in2),( min(min(( int(1.0) + divInt(int(1.0),min(( res0 * i0 ), i1)) ), max(int(5.0), in2)), in0) - abs(abs(( abs(in1) - in1 ))) )) and int(3.0) \\l int(7.0) )\\nb2 = True\\nloopBreak% = 0\\nwhile int(2.0) \\l int(5.0):{:\\nb1 = min(( in1 - i1 ), i0) == ( int(4.0) + max(int(3.0), i1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = max(int(7.0), int(7.0)) \\le min(int(8.0), int(9.0))\\nb1 = divInt(in0,in2) \\l int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 16, 16, 6, 5, 1, 8, 6, 2, 1, 0, 16, 0, 55, 12, 11, 8, 4]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [2, 2, 3, 0], [0, 0], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = i2\\nin0 = i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 1, 0], [0], [0, 1, 0], [1, 1, 1, 1], [2, 9, 2, 4], [3, 3, 1, 1], [2, 1], [1], [1, 1, 0, 1, 1], [0, 0, 0, 0], [3], [], [0], [3, 3, 0, 0, 0, 0, 4, 6, 6], [1], [0, 0, 2, 1, 3, 2, 1, 1, 0, 3, 0, 3, 0, 1, 0, 3, 0, 0], [1, 1], [2, 2, 1, 2], [0], [1, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in0 \\ge in0:{:\\nb2 = mod(int(2.0),abs(mod(int(9.0),int(2.0)))) \\ge i0\\ni0 += abs(i0)\\n:}\\nb1 = ( max(i0, int(4.0)) \\g in1 or abs(res0) \\g res0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 4, 4, 4, 2, 1, 5, 4, 1, 0, 1, 9, 1, 18, 2, 4, 1, 2]}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1], [2, 0, 2, 1, 2, 2, 1, 0, 0], [0, 1, 1, 0], [1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 8, 3, 6, 6, 8, 2, 5, 3, 3, 9, 9, 1, 4, 1, 3, 8, 1, 8, 8, 7, 9, 5, 4, 4, 9, 3, 6, 0, 8, 3, 4, 2, 7, 1, 8, 5, 6, 5, 3, 0, 3, 6, 0, 6, 3, 4, 2, 9, 3, 0, 3, 7, 6, 4], [4, 5, 0, 0, 4, 0], [2, 2, 1], [1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 3, 3, 3, 2, 2, 1], [0, 0], [1, 0], [2, 4, 4, 0, 6, 3, 4, 6, 5, 2, 0, 3, 4, 3, 6, 0, 4, 6, 4, 4, 5, 5, 3, 1, 2, 4, 4, 6, 6, 1, 1, 5, 2, 5, 2, 6, 6, 0, 0, 1, 1, 2, 5], [0, 1, 1], [1, 1, 1, 3, 0, 2, 2, 3, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 0, 3, 3, 3, 3, 2, 3, 1, 1, 1, 2, 1, 1, 3, 3, 0, 3, 2, 0, 2, 1, 2, 1, 3, 1, 1, 0, 1, 3, 3, 0, 1, 1, 2, 3, 1, 0, 2, 0, 3, 2, 2, 0, 2, 1, 1, 3, 2, 1, 2, 3, 0, 1, 2, 2, 2, 1, 0, 1, 2, 0, 0, 0, 3, 1, 0, 0, 0, 0, 2, 3, 2, 3, 1, 2, 2, 2, 0, 2, 3, 2, 1, 3, 1, 3, 2, 0, 3, 1, 2, 3, 2, 3, 1, 0, 3, 3, 1, 1, 2, 0, 1, 1, 1, 3, 1, 0, 2, 1, 0, 3, 1, 3, 0, 3, 1, 1, 1, 2, 2, 0, 2, 2, 2, 1, 3, 0, 0, 3, 2, 1, 3, 3, 2, 3, 3, 0, 1, 1, 2, 2, 0, 3, 3, 2, 2, 1, 3, 2, 2, 3, 1, 1, 2, 1, 1, 3, 0, 1, 2, 0, 3, 1, 1, 2, 3, 1, 3, 3, 3, 1, 3, 1, 2, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 2, 2, 0, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 2, 0, 2, 2, 1, 2, 2], [2, 0, 1, 1, 1, 0, 0, 1, 2, 2, 1, 1, 0, 1, 2, 2, 0, 0, 0, 2, 1, 0, 1, 0, 1, 2, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\ni2 = int(5.0)\\nloopBreak% = 0\\nwhile int(0.0) \\le int(8.0):{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(in1, divInt(mod(min(( ( in1 * i0 ) + mod(( res0 - in0 ),in1) ), divInt(res0,( in2 - abs(abs(min(max(divInt(min(int(3.0), int(6.0)),int(6.0)), ( int(8.0) - int(2.0) )), min(max(i2, abs(( i0 + ( int(5.0) + ( int(3.0) - abs(int(3.0)) ) ) ))), int(9.0))))) ))),in0),int(9.0))) != abs(max(in1, int(1.0))):{:\\nif ( ( int(4.0) \\l ( min(int(1.0), in0) * mod(res0,abs(divInt(( i0 * ( int(3.0) - int(8.0) ) ),max(( int(1.0) - ( max(in1, int(8.0)) + divInt(( divInt(int(8.0),res0) - int(7.0) ),( in1 * in1 )) ) ), in2)))) ) or max(int(9.0), in2) \\l in0 ) and ( i1 \\le i2 or not not mod(max(mod(min(int(5.0), divInt(divInt(mod(in1,( abs(divInt(int(4.0),abs(int(4.0)))) * min(( in1 + max(int(9.0), mod(abs(divInt(abs(int(3.0)),res0)),abs(min(int(6.0), int(0.0))))) ), divInt(res0,int(8.0))) )),int(3.0)),int(4.0))),min(int(2.0), i1)), ( int(7.0) + i1 )),min(int(1.0), abs(in2))) \\l min(int(8.0), int(5.0)) ) ):{:\\ni2 += int(6.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 *= mod(divInt(i2,( ( divInt(int(5.0),abs(res0)) - res0 ) + abs(divInt(int(3.0),max(abs(divInt(max(max(i0, int(0.0)), int(3.0)),mod(( i0 - min(max(mod(( int(6.0) + abs(( divInt(min(int(0.0), int(6.0)),mod(int(3.0),int(4.0))) - abs(i1) )) ),int(2.0)), ( i1 * min(int(9.0), int(3.0)) )), ( abs(int(0.0)) + abs(max(abs(int(3.0)), abs(int(7.0)))) )) ),divInt(i2,in2)))), int(6.0)))) )),int(4.0))\\nb1 = True\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 4, 5, 56, 56, 6, 3, 3, 14, 6, 8, 2, 2, 43, 3, 198, 53, 49, 27, 28]}, {"genotype": [[0], [1], [0], [], [0], [], [], [2], [0], [], [1], [0], [], [], [], [2, 3], [], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i2 == in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [2], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [1, 1, 0, 2, 2, 1, 1], [0, 1], [0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 7, 9, 5, 8, 6, 2, 3, 7, 9, 4, 0, 2, 0, 2, 9, 5, 7, 9, 2, 3, 1, 5, 3, 5, 9, 1, 8, 9, 2, 1, 0, 9, 8, 2, 3], [2, 3, 4], [0, 0], [1], [1, 0, 0, 0, 1, 1], [0, 0, 0], [3, 1, 1], [0, 1], [0], [5, 5, 4, 4, 1, 1, 1, 0, 6, 1, 1, 4, 3, 4, 1, 1, 1, 1, 0, 2, 5, 3, 0, 2, 4, 2, 3, 0, 0, 1, 6, 3, 4, 6, 5, 6, 0, 4, 5, 3], [0, 0, 0], [1, 2, 2, 1, 0, 3, 3, 3, 1, 1, 3, 2, 0, 3, 2, 2, 3, 3, 0, 3, 2, 1, 2, 2, 2, 0, 1, 3, 2, 3, 0, 0, 3, 0, 0, 0, 2, 2, 0, 2, 3, 1, 3, 2, 3, 1, 1, 3, 2, 2, 1, 0, 0, 0, 2, 2, 1, 3, 2, 2, 1, 1, 2, 1, 0, 2, 0, 1, 2, 2, 2, 2, 0, 1, 3, 2, 2, 3, 0, 0, 3, 2, 3, 1, 3, 1, 1, 0, 2, 2, 1, 1, 0, 2, 3, 3, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 2, 0, 1, 3, 1, 2, 0, 3, 2, 2, 3, 1, 1, 2, 2, 2, 2, 2, 1, 1, 0, 0, 3, 2, 1, 0, 0, 3, 3, 2, 0, 3, 1, 0, 3, 2, 1, 1, 0, 0, 2, 0, 1, 3, 3, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 0, 0, 2, 1, 0, 0, 2, 2, 1, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2], [2, 0, 2, 2, 2, 0, 0, 1, 0, 1, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(4.0) == divInt(divInt(int(5.0),in2),max(max(max(int(7.0), int(9.0)), abs(mod(in2,abs(( mod(abs(abs(in1)),abs(mod(int(5.0),( ( ( in1 * int(8.0) ) + max(( max(i1, i1) * min(i1, i0) ), res0) ) * mod(( i1 * ( min(int(6.0), abs(( max(int(2.0), int(3.0)) + min(mod(( int(7.0) + i1 ),in1), in0) ))) - ( ( int(9.0) + min(( ( int(4.0) - int(0.0) ) + ( int(2.0) - in1 ) ), mod(i1,int(0.0))) ) * divInt(( ( ( i1 * int(2.0) ) * abs(( mod(abs(i1),i1) - max(( abs(int(9.0)) + min(int(5.0), int(7.0)) ), i0) )) ) + mod(( int(9.0) + int(2.0) ),i2) ),( abs(min(int(3.0), int(1.0))) + in2 )) ) ) ),in0) )))) * i0 ))))), i2))\\nin1 = i2\\nb0 = ( True or False )\\nif min(abs(int(5.0)), ( in0 - int(3.0) )) \\ge min(int(5.0), ( i0 + abs(( mod(min(int(9.0), int(1.0)),( mod(( mod(mod(int(8.0),int(9.0)),i0) + i1 ),min(( int(2.0) - res0 ), in0)) * min(abs(mod(in1,max(int(1.0), res0))), abs(( int(0.0) + int(9.0) ))) )) - in2 )) )):{:\\nloopBreak% = 0\\nwhile res0 \\le mod(i0,int(8.0)):{:\\nin1 = max(abs(int(2.0)), in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = int(3.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 2, 5, 37, 37, 3, 2, 1, 6, 3, 3, 2, 1, 40, 3, 154, 45, 35, 28, 17]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [], [], [5], [2], [], [1], [0], [], [], [], [0, 1, 0, 3, 6], [1], [3, 0, 0, 0, 0], [], [0], [2], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(i0, i1) != i0\\nin0 *= res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 5, 1, 5, 0, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1], [0, 5, 0, 7, 8, 7, 1], [], [], [], [], [], [], [], [], [0, 3, 3, 3, 4, 2, 6, 2], [1], [2, 2, 3, 3, 0, 1, 3, 3, 3, 3, 3, 0, 0, 3, 1, 2, 2, 0, 0, 1, 3, 2, 1, 0, 1, 2, 1, 2, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 2, 1, 0, 0, 0, 2, 1, 2], [1, 2, 2, 0], [0, 0, 0, 1]], "fitness": 99, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= ( ( min(abs(in0), int(0.0)) * max(min(min(min(abs(in0), in0), max(int(5.0), divInt(divInt(in1,i2),int(0.0)))), abs(divInt(int(7.0),res0))), int(8.0)) ) * mod(int(7.0),( int(1.0) + i2 )) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 30, 7, 9, 4, 4]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [1, 1, 1, 1, 1], [7, 1, 0, 2, 7], [5, 1], [2, 2], [], [1, 1], [0, 0], [], [], [], [4, 5, 1, 3, 2, 1, 6, 6, 4, 6], [], [3, 3, 0, 1, 0, 0, 3, 2, 2, 2, 3, 1, 0, 2, 2, 0, 2, 2, 0, 0, 1, 0, 1, 2, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 2, 0], [0, 1, 2, 1, 2, 1], [1, 1]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(min(in1, int(7.0)), in2) != i1\\nb2 = abs(( ( mod(min(int(1.0), in0),mod(( i2 + ( ( i1 - res0 ) * int(0.0) ) ),res0)) - int(2.0) ) * ( in1 - int(7.0) ) )) \\g res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 5, 5, 2, 2, 0, 2, 2, 0, 0, 0, 10, 0, 27, 8, 4, 6, 2]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [], [], [2], [], [0, 0, 0], [], [2, 1, 1], [1, 1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not False:{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 1, 0, 3, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 2, 0, 2, 1, 1], [1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 1, 4, 0, 3, 3, 5, 9, 6, 9, 3, 4, 1, 5, 5, 1, 8, 6], [2, 0, 1, 5, 1], [2, 0, 0], [1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [2, 1, 3, 1, 0], [0, 0], [1, 0], [1, 3, 0, 1, 6, 1, 0, 6, 5, 0, 0, 0, 5, 4, 2, 5, 5, 1, 6, 4, 4, 2], [1, 0, 1], [2, 3, 0, 3, 1, 0, 1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 0, 3, 0, 1, 2, 3, 2, 3, 1, 2, 1, 2, 3, 3, 0, 2, 0, 3, 0, 1, 2, 2, 3, 0, 0, 2, 1, 1, 1, 0, 2, 1, 2, 1, 3, 2, 2, 0, 2, 0, 1, 3, 0, 1, 0, 3, 2, 1, 3, 0, 0, 0, 2, 2, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 2, 2, 2, 2, 2, 0, 2, 1, 0, 2, 2, 2, 1], [2, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 2, 0], [1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= mod(abs(in0),max(int(4.0), i0))\\nloopBreak% = 0\\nwhile not int(5.0) == int(1.0):{:\\ni1 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nif int(0.0) \\l int(3.0):{:\\nif ( min(abs(abs(( divInt(res0,abs(i1)) + int(3.0) ))), ( abs(( abs(int(5.0)) + ( int(9.0) - divInt(min(abs(i0), divInt(res0,max(in2, int(6.0)))),( mod(min(i0, i0),( int(9.0) - int(3.0) )) + int(4.0) )) ) )) - i0 )) \\g ( int(1.0) + ( int(5.0) + abs(( ( in2 + ( in1 - int(5.0) ) ) + abs(i2) )) ) ) or True ):{:\\nin2 += int(1.0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile in2 != abs(( int(8.0) - max(i1, res0) )):{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = in1 \\g ( ( int(6.0) * in1 ) + i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 19, 19, 5, 3, 1, 10, 5, 5, 2, 2, 22, 3, 73, 19, 16, 16, 5]}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 0, 2, 2, 1, 1], [0, 0, 1], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 7, 3, 0, 0, 4, 6, 6, 2, 3, 7, 9, 3, 8, 0, 1, 8, 9, 9, 4, 8, 1, 6, 5, 0, 3, 5, 7, 2, 5, 5, 8, 4], [1, 5, 0, 1], [2, 1, 0, 2], [1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0], [3, 3, 0, 1, 1, 1], [0, 1, 1], [1, 0], [5, 3, 5, 4, 0, 0, 2, 5, 2, 3, 1, 4, 3, 2, 5, 4, 3, 3, 0, 5, 1, 5, 4, 6, 1, 0, 5, 3, 2, 5], [], [0, 3, 2, 3, 2, 1, 2, 1, 1, 3, 2, 2, 2, 1, 2, 2, 2, 2, 3, 3, 2, 2, 0, 0, 1, 3, 3, 2, 3, 3, 0, 0, 2, 2, 2, 0, 3, 0, 1, 3, 1, 2, 0, 3, 3, 0, 1, 1, 1, 1, 3, 0, 1, 1, 0, 1, 1, 0, 2, 1, 3, 2, 3, 1, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2, 3, 2, 1, 3, 2, 1, 2, 1, 2, 1, 1, 2, 2, 0, 3, 1, 3, 3, 0, 2, 2, 0, 0, 3, 3, 2, 3, 1, 3, 0, 1, 3, 0, 2, 2, 3, 0, 1, 0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 1, 0, 2, 3, 0, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 2, 1, 2, 1, 2, 1, 0, 2, 0, 2, 0, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 2, 1], [2, 1, 1, 1, 0, 2, 1, 0, 2, 0, 2, 0, 1, 2, 1, 0, 1, 2, 2, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( b2 or in2 \\g min(( abs(mod(int(6.0),divInt(int(6.0),int(7.0)))) * max(divInt(mod(( int(3.0) - mod(mod(divInt(( abs(max(( divInt(in0,in2) - int(0.0) ), abs(max(( min(abs(in1), i0) - ( ( mod(i0,min(i2, int(0.0))) + abs(int(4.0)) ) * ( in2 - min(max(i2, int(6.0)), int(6.0)) ) ) ), int(2.0))))) + int(3.0) ),abs(in0)),int(7.0)),int(9.0)) ),i1),int(3.0)), int(8.0)) ), in1) ) or divInt(int(0.0),max(( max(int(1.0), int(8.0)) * ( int(9.0) + in0 ) ), i2)) != int(9.0) ):{:\\nb1 = True\\nif ( max(divInt(int(4.0),( abs(int(8.0)) * int(1.0) )), divInt(abs(mod(int(6.0),abs(( int(5.0) + divInt(int(0.0),( int(3.0) - int(5.0) )) )))),( divInt(in2,max(int(7.0), abs(abs(in1)))) * ( ( in0 - in0 ) + abs(min(( max(int(2.0), abs(i0)) - int(5.0) ), max(in2, mod(divInt(max(i1, int(5.0)),in2),in1)))) ) ))) * res0 ) \\l ( abs(i1) * i0 ):{:\\nloopBreak% = 0\\nwhile mod(divInt(in2,int(8.0)),in0) \\g ( max(i2, int(4.0)) + in2 ):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = False\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 34, 34, 4, 4, 2, 10, 4, 6, 3, 2, 30, 0, 134, 39, 31, 20, 19]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 2, 2, 0, 1, 2, 0], [0, 0, 1], [0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 9, 3, 9, 6, 3, 4, 1, 9, 9, 9, 0, 0, 4, 9, 1, 3, 3, 8, 0, 8], [3, 1, 4], [0, 1, 0, 1, 0], [], [0, 0, 0, 1, 0, 1, 1], [0, 0, 0], [0, 1, 1, 1], [1, 1, 1], [1, 0], [0, 0, 5, 0, 5, 1, 5, 5, 2, 2, 6, 4, 4, 4, 3, 4, 3, 3, 0, 5, 3, 0, 4, 3, 0, 2, 0, 0, 3, 1, 3], [0, 0, 0], [1, 2, 0, 0, 0, 3, 3, 1, 2, 3, 2, 0, 2, 2, 0, 1, 3, 0, 2, 3, 0, 3, 2, 2, 2, 1, 2, 3, 0, 3, 3, 0, 3, 1, 1, 1, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 0, 1, 0, 3, 0, 2, 1, 3, 3, 2, 2, 1, 3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 1, 1, 3, 2, 1, 2, 3, 0, 2, 2, 2, 0, 3, 1, 0, 2, 2, 3, 0, 1, 0, 1, 2, 3, 1, 0, 0, 3, 0, 2, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 1, 2, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 0, 1, 0], [2, 2, 1, 2, 0, 0, 0, 1, 1, 1, 2, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = b1\\nb0 = False\\ni0 = int(3.0)\\nb1 = False\\nif mod(i0,in2) \\ge i0:{:\\nif False:{:\\nb0 = min(max(int(6.0), ( abs(divInt(in2,( divInt(i1,int(9.0)) * min(in2, ( abs(in2) * abs(divInt(( ( int(3.0) - ( min(i2, min(abs(i2), max(int(9.0), int(6.0)))) * int(3.0) ) ) + min(min(int(4.0), res0), divInt(in1,in1)) ),in1)) )) ))) + in0 )), min(in1, int(1.0))) \\g in0\\n:}\\n:}else:{:\\nin0 = abs(i0)\\nloopBreak% = 0\\nwhile mod(int(9.0),abs(max(( ( int(9.0) + min(abs(min(in2, abs(divInt(int(9.0),int(0.0))))), ( int(0.0) - abs(int(4.0)) )) ) - int(9.0) ), abs(mod(int(1.0),( min(in0, ( mod(divInt(i0,abs(int(3.0))),in1) - mod(( min(in0, int(3.0)) * i0 ),int(8.0)) )) + ( max(int(0.0), i2) + i0 ) )))))) \\le min(i0, mod(int(8.0),in0)):{:\\ni1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 22, 22, 3, 5, 0, 7, 3, 4, 3, 2, 31, 3, 102, 25, 27, 13, 12]}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [1], [1, 1], [1], [0], [2], [], [], [1], [0], [], [], [], [3, 0, 4, 6, 1], [1, 0], [0, 0, 1, 0], [], [], [1], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 == i0:{:\\nin1 -= int(0.0)\\nres0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 5, 2, 4, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 2, 2, 2, 0, 2, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 8, 2, 2, 1, 2, 6, 1, 2, 7, 6, 7, 8, 2, 2, 4, 1, 0, 4, 3, 2, 1, 1, 6, 2, 6, 7, 5, 1, 0, 1, 4, 7, 5, 5, 2, 8, 8, 2, 4, 2, 8, 1, 3, 5, 4, 2, 8, 2, 1, 0, 6, 9, 3, 2, 0, 7, 8, 4, 1, 6, 4, 9, 5, 8, 4, 4, 4, 5, 1, 8, 6, 0, 9, 1, 4, 4, 7], [1, 1, 5, 5, 4, 2, 4, 5, 1, 4, 0], [0, 0, 0, 1, 2, 2, 1], [1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 3, 0, 3, 1, 3, 1, 2, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 5, 2, 5, 1, 2, 0, 1, 4, 6, 6, 2, 2, 4, 3, 4, 6, 3, 5, 6, 2, 5, 2, 2, 0, 3, 2, 3, 6, 6, 0, 5, 2, 3, 0, 0, 1, 6, 2, 4, 5, 6, 3, 2, 1, 6, 1, 6, 2, 2, 4, 1, 4, 6, 0, 5, 4, 1, 3, 3, 6, 2, 5, 0, 3, 0, 4], [1, 1, 0, 0], [0, 3, 2, 0, 1, 2, 2, 0, 2, 2, 3, 1, 3, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 0, 2, 2, 3, 3, 3, 2, 0, 3, 0, 1, 2, 3, 2, 0, 3, 2, 2, 1, 2, 2, 2, 1, 1, 0, 3, 2, 1, 0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 3, 1, 2, 1, 3, 1, 2, 3, 1, 3, 1, 2, 2, 0, 0, 3, 2, 0, 1, 1, 2, 2, 3, 1, 3, 1, 1, 0, 1, 0, 2, 0, 0, 2, 1, 2, 3, 1, 3, 2, 3, 2, 2, 3, 2, 0, 1, 1, 3, 1, 0, 3, 0, 2, 2, 1, 3, 2, 0, 3, 3, 1, 2, 1, 0, 0, 1, 2, 1, 1, 1, 1, 3, 0, 1, 2, 1, 0, 0, 0, 3, 1, 2, 3, 3, 2, 1, 2, 3, 2, 2, 1, 3, 3, 1, 2, 0, 2, 1, 2, 3, 3, 2, 2, 0, 2, 3, 2, 1, 2, 3, 0, 1, 2, 1, 0, 2, 1, 2, 0, 3, 2, 1, 2, 3, 3, 1, 2, 1, 3, 1, 3, 1, 2, 0, 3, 2, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 3, 1, 0, 1, 1, 1, 2, 3, 1, 0, 1, 2, 2, 3, 3, 3, 3, 0, 0, 1, 0, 2, 3, 1, 3, 1, 0, 2, 3, 1, 1, 2, 3, 0, 0, 2, 0, 2, 1, 2, 1, 2, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 2, 1, 0, 0, 3, 0, 3, 0, 1, 0, 2, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 2, 0, 1, 1, 0, 2, 0, 2, 1, 2, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 2, 1, 2, 0, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 1, 2, 0, 1, 0, 2, 1, 2, 0, 1, 2, 0, 2, 2, 1, 0, 0, 0, 1, 0, 0, 2, 1, 0, 2, 2, 1, 2, 1, 1, 2, 1, 0, 2, 2, 2, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 82, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( i0 \\g min(divInt(i1,int(1.0)), divInt(divInt(in2,mod(( max(int(0.0), abs(int(3.0))) + ( int(8.0) + divInt(int(2.0),int(2.0)) ) ),int(1.0))),i2)) or False )\\nloopBreak% = 0\\nwhile ( mod(int(2.0),in2) \\g ( ( min(max(max(( i1 + min(i2, int(6.0)) ), mod(abs(( i0 - min(( ( int(1.0) * mod(( mod(int(2.0),int(7.0)) + i1 ),abs(divInt(int(6.0),in1))) ) - ( ( res0 + int(7.0) ) * int(8.0) ) ), int(2.0)) )),( res0 - i2 ))), max(int(2.0), ( int(4.0) * abs(int(1.0)) ))), ( min(int(0.0), min(int(4.0), mod(( i2 + in1 ),max(( in0 - int(3.0) ), int(2.0))))) * ( divInt(max(int(1.0), max(int(1.0), int(6.0))),in1) + int(2.0) ) )) * res0 ) * mod(in0,in2) ) or divInt(int(6.0),( abs(int(7.0)) - max(( abs(( mod(max(( res0 + int(5.0) ), int(1.0)),max(int(0.0), i2)) + abs(in2) )) + ( ( int(1.0) - abs(divInt(i2,max(abs(int(4.0)), divInt(int(7.0),i2)))) ) + i0 ) ), int(5.0)) )) != ( int(5.0) + int(2.0) ) ):{:\\nin0 *= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(8.0) != max(i2, int(2.0)):{:\\nif mod(int(4.0),in0) \\le res0:{:\\nif res0 == min(int(2.0), mod(max(max(( int(8.0) - ( max(mod(( int(1.0) + abs(max(int(3.0), ( i0 * mod(int(5.0),divInt(min(max(mod(mod(in2,mod(min(mod(int(4.0),( abs(i2) * int(2.0) )), divInt(int(8.0),in0)),( int(2.0) - mod(i0,min(( int(1.0) * ( min(abs(int(0.0)), mod(int(6.0),min(int(9.0), max(int(3.0), ( i0 - min(divInt(i1,res0), i2) ))))) - in1 ) ), ( ( ( int(2.0) * min(int(0.0), min(int(7.0), in2)) ) - int(8.0) ) + int(4.0) ))) ))),int(1.0)), divInt(abs(int(6.0)),res0)), int(4.0)),( divInt(abs(max(abs(min(in0, i2)), int(9.0))),i1) * mod(abs(int(5.0)),min(int(8.0), res0)) ))) ))) ),divInt(min(int(4.0), int(4.0)),mod(abs(i1),res0))), divInt(i2,mod(int(4.0),mod(int(5.0),divInt(int(1.0),i2))))) * in1 ) ), i1), int(8.0)),( in1 * res0 ))):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni0 += in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nloopBreak% = 0\\nwhile in1 \\le int(6.0):{:\\nb0 = ( int(0.0) != int(9.0) or mod(i1,int(1.0)) \\g abs(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\nloopBreak% = 0\\nwhile ( True or not False ):{:\\nin0 = divInt(int(4.0),res0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = True\\n:}else:{:\\ni2 = in2\\nloopBreak% = 0\\nwhile abs(i0) \\le min(in0, int(4.0)):{:\\nloopBreak% = 0\\nwhile True:{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = i0 \\l divInt(int(7.0),in1)\\nb1 = True\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 20, 20, 10, 10, 80, 80, 11, 7, 4, 25, 11, 14, 8, 4, 68, 4, 281, 80, 57, 40, 42]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 1, 1, 1], [3, 3, 9, 7, 9], [3, 2], [0], [1, 0], [0, 0, 0, 0, 0, 1, 1], [0, 0], [2, 3, 2, 1, 3], [0], [], [1, 0, 5, 0], [], [2, 0, 2, 1, 2, 3, 1, 3, 1, 0, 1, 0, 0, 3, 1], [1, 1, 1], [0, 1, 2], [], [1, 1, 0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not ( not True or ( mod(i1,mod(int(3.0),divInt(min(int(3.0), max(int(9.0), i0)),int(7.0)))) \\ge in2 and i0 == abs(int(9.0)) ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 2, 1, 2, 7, 2, 5, 1, 0, 4, 0, 15, 3, 3, 0, 3]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1], [8], [], [0, 0], [], [0], [], [0], [], [], [5, 2], [1], [2, 0, 1], [0], [], [1, 1], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 -= ( i2 - int(8.0) )\\nb0 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 0]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [1], [1, 1], [1, 1, 1, 1], [0, 8, 3, 3], [5, 2], [], [1], [0, 1, 1], [0, 0], [3], [], [], [5, 0, 6, 6, 4, 4, 6, 0], [0, 0], [2, 1, 2, 0, 3, 1, 1, 0, 0, 0, 2, 2, 0, 0, 1], [0, 0, 1, 1], [2], [0, 0], [1, 0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( int(0.0) + ( i0 + abs(int(8.0)) ) )\\nloopBreak% = 0\\nwhile ( int(3.0) != res0 or res0 == in1 ):{:\\nin1 = mod(divInt(res0,i0),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 4, 4, 2, 0, 1, 3, 2, 1, 0, 0, 8, 2, 15, 4, 1, 2, 2]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 9, 2, 4, 3, 4, 4, 5, 3, 4, 0, 8, 1, 6, 2, 3, 6, 7, 8, 7, 4, 4, 9, 5, 9, 9, 6, 6, 6, 6, 2, 7, 5, 8, 1, 5, 8, 4, 2, 2, 5, 9, 1, 8, 7, 7, 9, 5, 9, 4, 9, 0, 2, 9, 1, 3, 0, 1, 6, 4, 3, 9, 6, 4, 1, 5, 0], [0], [], [], [1], [0], [], [], [0], [2, 5, 1, 2, 3, 1, 3, 2, 4, 1, 3, 2, 4, 4, 2, 2, 5, 1, 6, 0, 0, 4, 4, 4, 2, 2, 1, 1, 0, 1, 5, 0, 5, 4, 6, 2, 6, 3, 4, 2, 5, 0, 2, 1, 2, 4, 5, 4, 1, 3, 3, 2, 3, 6, 6, 6, 4, 1, 2, 3, 6, 2, 0, 5, 4, 4, 4, 6, 1], [1], [3, 3, 2, 2, 0, 2, 3, 0, 0, 0, 3, 1, 0, 1, 3, 0, 0, 2, 2, 2, 0, 2, 3, 2, 2, 3, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 0, 3, 2, 2, 0, 1, 1, 2, 2, 0, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 2, 0, 2, 1, 0, 2, 1, 0, 3, 2, 2, 1, 0, 2, 3, 1, 2, 3, 3, 2, 2, 2, 2, 3, 2, 3, 1, 0, 3, 2, 2, 3, 3, 2, 2, 1, 1, 3, 1, 3, 2, 1, 0, 0, 2, 3, 1, 1, 0, 1, 1, 1, 0, 0, 0, 3, 1, 1, 0, 0, 2, 0, 1, 3, 2, 1, 1, 0, 0, 3, 3, 3, 2, 2, 1, 1, 1, 2, 0, 2, 1, 1, 3, 2, 2, 2, 1, 1, 2, 2, 3, 2, 2, 3, 3, 1, 0, 0, 3, 1, 0, 3, 3, 2, 1, 1, 2, 3, 2, 3, 1, 3, 3, 3, 3, 0, 1, 2, 1, 0, 3, 3, 0, 3, 0, 2, 2, 0, 3, 3, 2, 0, 3, 1, 1, 2, 0, 2, 2, 1, 0, 1, 0, 0, 1, 2, 3, 1, 0, 2, 2, 3, 0, 1, 2, 0, 3, 3, 0, 3, 3, 1, 3, 1, 2, 0, 2, 3, 3, 1, 2, 3, 0, 3, 0, 0, 3, 2, 1, 2, 1, 1, 1, 0, 3, 0, 1, 2, 2, 1, 2, 0, 3, 3, 1, 2, 0, 2, 3, 3, 1, 2, 2, 1, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 3, 3, 3, 2, 1, 1, 2, 1, 1, 3, 0, 3, 3, 0, 1, 0, 3, 0, 0, 0, 2, 2, 0, 1, 3, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 0, 1, 0, 1, 2, 0, 0, 0, 1, 1, 2, 0, 1, 1, 2, 2, 0, 0, 1, 0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 2, 2, 1, 0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 0, 2, 0, 2], [2, 1, 0, 2, 1, 0, 2, 0, 0, 2, 2, 2, 1, 1, 0, 0, 2, 1, 0, 1, 2, 0, 1, 1, 2, 0, 0, 0, 1, 1, 1, 0, 2, 2, 1, 0, 2, 2, 0, 0, 1, 0, 0, 2, 0, 1], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 84, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif max(max(mod(( i2 * mod(max(in2, i1),i2) ),min(int(1.0), in0)), int(8.0)), abs(i1)) \\l in0:{:\\ni2 -= ( ( ( in1 + mod(min(divInt(( min(i1, divInt(int(9.0),( divInt(int(2.0),in0) * divInt(int(4.0),i2) ))) - in1 ),abs(mod(divInt(in1,int(3.0)),int(4.0)))), ( ( i2 + divInt(mod(( mod(min(( abs(min(( ( ( i2 * ( int(4.0) + in2 ) ) + ( int(5.0) * i1 ) ) * max(( divInt(int(3.0),res0) * divInt(min(int(4.0), ( max(abs(( ( ( ( min(( min(int(0.0), i0) - min(divInt(( max(max(mod(( int(8.0) - int(1.0) ),abs(int(6.0))), min(( int(2.0) + i0 ), in1)), ( max(int(3.0), int(6.0)) + in1 )) * int(7.0) ),int(8.0)), int(7.0)) ), in1) - i2 ) + i2 ) - max(int(4.0), int(4.0)) ) * i1 )), i1) + ( i0 - int(9.0) ) )),abs(mod(int(5.0),int(9.0)))) ), i1) ), in2)) - abs(min(min(mod(divInt(int(9.0),int(6.0)),int(6.0)), ( i0 * divInt(int(6.0),int(6.0)) )), max(mod(divInt(mod(int(2.0),int(7.0)),mod(( min(( ( min(abs(int(5.0)), in2) + in1 ) + abs(int(8.0)) ), res0) + abs(abs(( int(1.0) - int(5.0) ))) ),( max(( abs(int(8.0)) - abs(abs(min(abs(i2), int(4.0)))) ), divInt(int(2.0),res0)) - abs(min(in0, abs(in1))) ))),( divInt(i2,abs(abs(( in2 + min(int(2.0), int(5.0)) )))) * divInt(i0,( divInt(int(9.0),i2) * int(1.0) )) )), i1))) ), i2),int(8.0)) - divInt(min(int(7.0), in1),divInt(mod(min(in2, int(7.0)),mod(in1,min(max(i1, min(abs(int(9.0)), min(int(5.0), ( in0 + divInt(abs(max(int(9.0), ( abs(in0) * abs(i2) ))),in0) )))), max(( int(4.0) * mod(int(9.0),int(0.0)) ), int(2.0))))),res0)) ),min(res0, int(9.0))),divInt(( int(1.0) + ( res0 + abs(min(int(3.0), ( in1 - mod(min(max(int(0.0), mod(( int(1.0) + i1 ),i2)), abs(max(int(6.0), int(4.0)))),max(int(3.0), in0)) ))) ) ),res0)) ) + min(min(max(mod(int(9.0),int(6.0)), mod(int(4.0),int(1.0))), max(i2, min(abs(i0), int(5.0)))), in2) )),min(in1, in1)) ) * in1 ) + mod(( res0 - int(0.0) ),abs(i1)) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 68, 68, 1, 0, 0, 1, 1, 0, 0, 1, 69, 1, 296, 85, 75, 46, 40]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [0, 1, 0], [1, 1, 1, 1, 1, 1], [7, 6, 7, 8, 6, 9], [3, 0], [1, 1], [], [1, 1], [0, 0], [], [], [], [1, 2, 4, 5], [1], [1, 0, 3, 0, 2, 2, 2, 3, 1, 1, 1, 1, 1, 0], [0, 1, 1], [2, 1], [2, 1], [1, 0]], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = int(7.0) \\ge i1\\ni2 *= abs(in1)\\nb1 = ( mod(divInt(max(int(6.0), int(7.0)),int(8.0)),int(6.0)) - int(9.0) ) \\l in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 6, 6, 2, 2, 0, 2, 2, 0, 0, 0, 4, 1, 14, 3, 2, 2, 2]}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 1], [1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 0, 0, 8, 2, 7, 4, 0], [3], [1, 2, 2], [], [0, 1, 0], [0], [1, 0], [1], [], [2, 2, 4, 1, 4, 0, 0, 1, 4, 5], [0], [3, 0, 2, 1, 0, 2, 3, 2, 3, 2, 2, 2, 0, 2, 3, 0, 1, 2, 3, 2, 0, 3, 3, 1, 3, 0, 0, 1, 0, 3, 2, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 2, 0, 1, 2, 2, 2], [2, 1, 1, 1], [1, 1, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb1 = min(i2, ( int(5.0) * i2 )) \\ge ( min(mod(min(mod(( ( in1 - mod(abs(i1),int(1.0)) ) - divInt(min(mod(in1,max(abs(int(0.0)), abs(i0))), i0),int(0.0)) ),i1), abs(mod(int(8.0),int(2.0)))),int(7.0)), int(4.0)) - int(0.0) )\\nin1 = in2\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 9, 9, 1, 3, 0, 3, 1, 2, 1, 0, 10, 1, 37, 10, 9, 4, 6]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 1, 0], [0, 0, 1, 1, 1, 1, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 3, 1, 1, 0, 8, 6, 4, 0, 2, 4, 7, 8, 9, 6, 1, 1, 5, 5, 0, 3, 3, 5, 6, 1, 3, 1, 7, 2, 9, 0, 1, 7, 7, 6, 7, 6, 2, 6, 6, 4, 8, 9, 9, 1, 0, 9, 2, 4], [4, 4, 5, 2, 0, 4], [1, 2, 2], [0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [2, 0, 0, 3, 1], [1], [1, 0], [4, 1, 5, 3, 2, 4, 2, 5, 2, 6, 5, 1, 2, 0, 4, 4, 4, 6, 2, 3, 6, 2, 6, 5, 4, 3, 3, 4, 2, 6, 2, 1, 6, 5, 0, 1, 1, 2, 5, 6, 4, 4, 2, 2, 4, 2, 3, 4, 3, 5, 6, 3, 2, 4, 4, 3, 4, 2, 6, 0, 6, 3], [0], [0, 3, 3, 0, 0, 0, 2, 3, 0, 2, 1, 1, 2, 3, 3, 3, 3, 3, 0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 1, 0, 2, 1, 3, 2, 0, 1, 3, 3, 0, 2, 0, 1, 0, 0, 3, 0, 2, 3, 3, 1, 3, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 2, 1, 2, 1, 0, 2, 1, 2, 2, 0, 3, 1, 2, 1, 0, 2, 2, 0, 3, 0, 0, 2, 0, 2, 1, 3, 2, 1, 3, 1, 3, 2, 2, 0, 2, 1, 2, 3, 3, 0, 2, 0, 0, 2, 2, 3, 0, 1, 1, 2, 3, 2, 1, 1, 3, 0, 0, 2, 3, 3, 2, 3, 1, 1, 0, 0, 0, 2, 2, 3, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 2, 2, 2, 0, 1, 0, 2, 2, 2, 1, 1, 1, 3, 1, 3, 1, 2, 3, 2, 2, 2, 2, 1, 3, 1, 0, 1, 2, 0, 0, 0, 3, 3, 1, 0, 0, 2, 1, 3, 3, 2, 2, 2, 1, 1, 3, 0, 2, 3, 2, 3, 2, 3, 3, 0, 1, 0, 1, 1, 0, 3, 1, 0, 2, 1, 2, 0, 1, 3, 1, 0, 1, 3, 1, 1, 2, 2, 1, 0, 0], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 2, 1, 2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 0, 1, 2, 0, 1, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 0, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 0, 2], [0, 0, 0, 0, 1, 2, 0, 1, 1, 1, 2, 0, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 0, 1, 2, 2, 0, 1, 1, 2], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in1 \\le max(abs(i1), in2):{:\\nif not in0 \\le divInt(abs(i2),divInt(int(0.0),int(5.0))):{:\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nwhile divInt(abs(min(min(min(min(in1, int(3.0)), ( min(abs(min(abs(min(max(mod(max(abs(( ( int(1.0) + i2 ) + divInt(int(1.0),max(( in2 + int(0.0) ), abs(abs(i2)))) )), mod(res0,int(8.0))),in2), i1), min(i2, ( abs(abs(int(6.0))) + min(i0, int(4.0)) )))), int(0.0))), in1) - in1 )), in1), res0)),divInt(divInt(( int(2.0) * divInt(int(4.0),( int(7.0) + i2 )) ),( int(8.0) - ( ( in0 - min(int(9.0), ( int(6.0) - res0 )) ) * ( divInt(i2,max(res0, in2)) + divInt(in1,mod(int(1.0),abs(( int(1.0) * max(int(5.0), min(mod(( in0 - divInt(int(5.0),( max(abs(in0), ( in1 - i2 )) - ( ( min(res0, int(0.0)) * int(3.0) ) - mod(max(( int(3.0) * int(5.0) ), abs(i2)),i1) ) )) ),( abs(max(( min(int(6.0), int(1.0)) - res0 ), in2)) - i0 )), ( ( abs(i1) - i1 ) * i2 ))) )))) ) ) )),mod(in2,res0))) != in1:{:\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile ( ( in1 - i2 ) + mod(mod(i2,max(abs(divInt(divInt(mod(in1,int(3.0)),i2),mod(mod(( int(1.0) - int(7.0) ),int(2.0)),abs(int(9.0))))), max(int(0.0), ( abs(divInt(divInt(divInt(mod(int(1.0),min(int(7.0), in0)),int(7.0)),divInt(in1,in0)),in2)) * abs(min(int(6.0), res0)) )))),in0) ) == divInt(int(7.0),min(abs(mod(divInt(( int(6.0) * int(2.0) ),abs(i2)),( max(divInt(min(( max(min(in1, int(6.0)), in1) + int(6.0) ), int(4.0)),in0), abs(int(8.0))) - in1 ))), mod(int(9.0),( i2 - int(9.0) )))):{:\\nloopBreak% = 0\\nwhile ( min(int(1.0), res0) \\l int(0.0) and False ):{:\\ni0 = abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nb2 = int(2.0) \\le ( divInt(int(4.0),res0) * in0 )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 7, 2, 50, 50, 6, 3, 1, 11, 6, 5, 1, 2, 62, 1, 232, 66, 55, 32, 34]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 8, 9, 5, 3, 2, 3, 7, 1, 9, 2, 2, 5], [4], [2], [], [1], [0], [], [], [], [5, 1, 3, 4, 6, 0, 5, 0, 0, 5, 3, 4, 2, 6, 6, 6, 3, 3, 1, 6, 0], [], [3, 3, 0, 2, 2, 3, 3, 1, 0, 3, 3, 3, 3, 2, 2, 1, 2, 2, 0, 0, 2, 3, 0, 2, 2, 0, 3, 2, 2, 2, 2, 3, 0, 1, 0, 3, 0, 1, 1, 1, 1, 3, 0, 3, 0, 1, 0, 1, 1, 2, 1, 2, 2, 1, 0, 3, 0, 0, 2, 3, 0, 2, 2, 3, 0, 0, 1, 2, 2, 0, 2, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [2, 0, 1, 0, 2, 0, 0, 2, 1, 0, 2, 2, 1, 0, 1, 2, 0], [0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 1, 2, 2], [0, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = abs(min(in2, divInt(mod(max(min(int(1.0), i1), abs(min(min(abs(( ( int(1.0) + mod(( in0 + in1 ),( max(res0, divInt(( i0 + min(( ( ( ( abs(in2) * int(8.0) ) * i0 ) * abs(i0) ) * int(9.0) ), int(5.0)) ),int(3.0))) + int(2.0) )) ) * max(in2, min(in0, int(3.0))) )), in1), int(7.0)))),int(1.0)),mod(int(9.0),( ( int(2.0) + i2 ) * max(res0, res0) ))))) \\le divInt(abs(res0),( ( min(in0, in0) + int(2.0) ) - ( ( i1 * divInt(res0,int(5.0)) ) * i0 ) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 14, 14, 1, 1, 0, 1, 1, 0, 0, 0, 21, 0, 74, 22, 17, 15, 7]}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 0, 2, 0, 2, 1, 1], [0, 1, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 0, 8, 8, 6, 8, 4, 1, 4, 9, 1, 2, 5, 3, 5, 6, 4, 6, 8, 3, 3, 0, 9, 2, 1, 0, 4, 5, 5, 0, 5, 2, 0, 3, 3, 6, 4], [5, 4, 0, 5, 1], [0, 1, 2], [], [1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0], [], [1, 1], [5, 1, 6, 5, 0, 4, 2, 6, 1, 1, 2, 4, 1, 5, 5, 3, 2, 3, 6, 4, 0, 0, 5, 6, 4, 5, 5, 6, 6, 2, 6, 5], [0, 1], [0, 1, 2, 0, 2, 3, 1, 3, 1, 1, 3, 1, 3, 0, 0, 3, 3, 1, 0, 1, 2, 3, 3, 3, 3, 2, 2, 1, 1, 2, 2, 2, 2, 2, 0, 0, 1, 2, 2, 3, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 3, 0, 1, 0, 2, 0, 3, 3, 1, 1, 2, 0, 1, 1, 3, 1, 3, 0, 3, 3, 2, 0, 1, 3, 3, 0, 0, 1, 3, 1, 1, 0, 2, 1, 2, 1, 3, 2, 2, 1, 1, 1, 2, 3, 0, 3, 3, 3, 3, 1, 0, 2, 1, 3, 1, 3, 1, 1, 0, 2, 3, 0, 1, 3, 0, 2, 3, 0, 3, 0, 2, 0, 3, 0, 0, 0, 1, 0, 1, 3, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 2, 1, 2, 2, 2, 0, 1, 0, 1, 1, 2, 1, 1, 1, 0, 2, 1, 0, 1], [1, 1, 0, 0, 0, 2, 0, 1, 1, 2, 2, 1, 0, 0, 2, 0, 2], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 != int(5.0):{:\\nloopBreak% = 0\\nwhile b0:{:\\nb1 = ( i1 - ( min(int(3.0), min(int(0.0), int(8.0))) - max(int(8.0), abs(res0)) ) ) \\le in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile max(max(int(6.0), i0), int(8.0)) \\l mod(min(max(min(abs(divInt(( int(4.0) + int(1.0) ),mod(mod(( mod(divInt(in1,i2),int(4.0)) + divInt(( abs(( mod(int(9.0),int(1.0)) + ( int(2.0) * int(5.0) ) )) + ( ( mod(mod(( max(res0, int(3.0)) - i1 ),mod(i1,abs(min(int(5.0), int(6.0))))),( i2 - int(4.0) )) * int(6.0) ) * min(int(8.0), abs(in1)) ) ),abs(max(( i1 - int(3.0) ), abs(abs(in2))))) ),in2),int(3.0)))), abs(int(0.0))), int(9.0)), in0),( int(2.0) + ( int(1.0) + min(( divInt(int(0.0),int(4.0)) * int(5.0) ), mod(max(i2, min(max(max(abs(int(5.0)), in0), divInt(int(0.0),max(int(5.0), max(int(2.0), int(0.0))))), res0)),divInt(max(in1, int(3.0)),min(i0, ( abs(i0) + max(in2, mod(res0,min(in1, in2))) ))))) ) )):{:\\nin2 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(3.0) != res0:{:\\nb2 = int(6.0) \\g max(i2, res0)\\n:}else:{:\\nin2 *= int(4.0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 4, 4, 38, 38, 5, 3, 0, 6, 5, 1, 0, 2, 32, 2, 135, 32, 35, 17, 16]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 1, 2, 0, 0, 2, 1, 1, 0], [1, 0, 0], [1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 4, 0, 3, 9, 6, 5, 5, 7, 7, 1, 5, 2, 4, 6, 4, 1, 8, 2, 8, 5, 8], [0, 5, 0, 3], [2, 0, 0, 0], [], [1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [1, 0, 2], [1], [1, 1], [4, 3, 1, 6, 5, 3, 1, 5, 4, 3, 5, 5, 0, 5, 4, 5, 2, 1, 1, 5, 1, 4, 3], [0, 1, 0], [0, 1, 2, 0, 2, 2, 1, 2, 2, 3, 2, 1, 1, 1, 1, 3, 0, 3, 0, 1, 3, 3, 2, 3, 1, 0, 2, 0, 3, 0, 1, 1, 3, 2, 3, 0, 1, 2, 1, 1, 1, 2, 3, 2, 0, 1, 2, 3, 1, 0, 2, 1, 0, 2, 0, 2, 3, 3, 3, 0, 1, 1, 0, 0, 2, 0, 3, 1, 2, 0, 3, 1, 0, 1, 2, 3, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 2, 1, 0, 1, 1, 1, 2, 0, 0, 0, 2, 0, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 0], [0, 1, 1, 0, 0, 0, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 \\l int(7.0):{:\\nin0 = ( i1 - ( divInt(int(7.0),( mod(max(( int(4.0) - int(0.0) ), int(3.0)),int(9.0)) + abs(res0) )) - max(in2, int(6.0)) ) )\\nif min(max(mod(max(int(5.0), in0),( i1 + max(in2, int(5.0)) )), int(7.0)), abs(divInt(min(in1, int(7.0)),( int(1.0) - int(5.0) )))) != int(2.0):{:\\nin0 -= divInt(min(( in2 * int(4.0) ), divInt(min(int(6.0), in2),( int(4.0) * i0 ))),mod(in2,( abs(min(max(in1, int(1.0)), int(8.0))) * in2 )))\\n:}else:{:\\nb2 = False\\n:}\\nif i2 \\l ( i1 + abs(int(2.0)) ):{:\\ni1 = ( in2 * max(int(8.0), i1) )\\n:}else:{:\\nb0 = b0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not int(5.0) \\ge ( max(in1, int(8.0)) + in0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 23, 23, 4, 4, 0, 7, 4, 3, 1, 2, 23, 3, 79, 19, 17, 13, 7]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [], [], [0], [], [0], [], [1], [0], [], [3, 1], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\nin0 *= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 1, 0, 2, 0, 0, 1, 2, 0, 0], [1, 0, 0], [0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 8, 7, 7, 5, 9, 9, 5, 2, 5, 0, 9, 3, 8, 5, 9, 7, 7, 0, 7, 6, 0, 3, 6, 4, 4, 6, 7, 8, 9, 6, 6, 7, 5, 3, 3, 9, 8, 7, 7, 0, 7, 1, 7, 8, 4, 7, 8, 8, 8, 8, 8, 2, 1, 5, 1, 7, 8, 0, 5, 6, 1, 7, 7, 5, 2, 7, 1, 5, 2, 0, 9, 5], [1, 5, 3, 4, 5], [0, 0, 2, 0], [], [1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [0], [], [1, 0], [4, 2, 0, 6, 0, 1, 2, 4, 1, 4, 2, 1, 3, 0, 6, 0, 5, 6, 4, 1, 4, 6, 3, 5, 3, 3, 4, 2, 3, 5, 0, 1, 1, 3, 2, 5, 2, 3, 2, 4, 0, 1, 0, 6, 6, 4, 5, 5, 5, 5, 1, 2, 1, 0, 1, 2, 1, 4, 1, 4, 3, 3, 3, 6, 2, 6, 4, 6, 5, 2, 6, 0, 5, 5], [1, 0, 0, 0], [0, 1, 1, 0, 1, 2, 1, 2, 3, 1, 2, 0, 0, 3, 0, 3, 0, 3, 0, 2, 2, 1, 1, 0, 1, 2, 2, 3, 3, 3, 3, 3, 2, 3, 3, 0, 3, 3, 2, 2, 3, 0, 2, 3, 1, 0, 0, 1, 2, 2, 3, 2, 2, 2, 0, 0, 2, 0, 2, 1, 0, 0, 0, 2, 3, 1, 2, 0, 1, 0, 2, 3, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 2, 0, 2, 3, 2, 2, 1, 1, 3, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 1, 1, 3, 0, 2, 1, 3, 1, 2, 3, 0, 2, 1, 0, 3, 1, 3, 0, 3, 3, 3, 3, 1, 0, 0, 3, 0, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 1, 0, 0, 3, 3, 2, 2, 3, 2, 2, 0, 0, 1, 2, 3, 1, 2, 3, 2, 3, 3, 0, 3, 2, 0, 2, 2, 1, 1, 0, 3, 1, 0, 1, 3, 2, 3, 1, 2, 0, 2, 1, 3, 1, 3, 1, 2, 2, 1, 2, 1, 0, 3, 2, 2, 2, 0, 3, 1, 1, 2, 3, 1, 1, 1, 1, 3, 1, 2, 0, 1, 3, 0, 0, 0, 3, 2, 0, 3, 3, 1, 1, 1, 1, 2, 1, 0, 3, 3, 0, 2, 2, 2, 0, 0, 1, 3, 0, 2, 0, 2, 0, 2, 1, 1, 2, 1, 3, 2, 1, 3, 0, 2, 3, 0, 2, 2, 3, 2, 0, 3, 1, 1, 2, 0, 1, 0, 1, 0, 2, 1, 3, 1, 0, 2, 3, 3, 2, 1, 1, 2, 2, 0, 3, 2, 0, 2, 2, 0, 3, 0, 3, 3, 1, 2, 2, 1, 0, 1, 1, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [2, 1, 1, 1, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 2, 0, 2, 2, 2, 0, 1, 1, 0, 2, 2, 2, 1, 0, 0, 2, 0, 1, 1, 2, 1, 2, 1, 2, 0, 1, 0, 2, 2, 1, 1, 2, 0, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 0, 1], [2, 1, 2, 1, 0, 0, 1, 2, 2, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1, 0, 2, 2, 0, 1, 0, 2, 0, 2, 1, 2, 2], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0]], "fitness": 99, "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 \\g int(2.0):{:\\nb0 = int(8.0) != i2\\ni0 *= int(8.0)\\nif b0:{:\\nb2 = divInt(int(7.0),mod(abs(int(7.0)),mod(res0,i0))) \\ge max(i1, max(i2, max(in1, divInt(mod(int(5.0),int(9.0)),i1))))\\n:}else:{:\\nin1 = int(9.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = divInt(( abs(abs(min(min(abs(( min(min(i1, min(abs(mod(mod(max(in0, ( max(int(5.0), i0) - res0 )),int(2.0)),( ( max(mod(( divInt(i0,in2) * ( res0 - ( int(5.0) + in1 ) ) ),i1), in1) + ( abs(int(0.0)) - divInt(res0,int(9.0)) ) ) * in0 ))), ( min(in2, ( mod(in0,in0) * int(3.0) )) * int(8.0) ))), ( mod(divInt(divInt(in1,( abs(mod(( int(5.0) - int(9.0) ),min(i2, int(7.0)))) - mod(( divInt(in0,in2) + max(( abs(int(7.0)) * int(0.0) ), min(i0, ( int(7.0) * min(int(6.0), divInt(abs(i1),divInt(int(0.0),i1))) ))) ),min(int(3.0), abs(in0))) )),abs(abs(min(max(int(6.0), i2), in2)))),max(i2, int(4.0))) + min(( int(4.0) + mod(int(6.0),abs(divInt(int(7.0),mod(int(8.0),in0)))) ), i2) )) * abs(abs(( ( max(( ( in1 + i0 ) + int(9.0) ), ( min(int(6.0), mod(min(divInt(abs(min(i1, max(divInt(i0,( ( int(6.0) - int(7.0) ) * res0 )), max(int(5.0), res0)))),int(3.0)), abs(( max(int(3.0), divInt(in1,( int(9.0) + abs(int(8.0)) ))) + max(int(7.0), divInt(divInt(int(7.0),divInt(int(0.0),in2)),abs(( divInt(( in2 + min(int(7.0), int(1.0)) ),( max(int(7.0), int(8.0)) - int(4.0) )) * int(7.0) )))) ))),min(int(8.0), ( in2 * int(8.0) )))) * abs(in2) )) + i1 ) * i2 ))) )), abs(divInt(i1,max(max(int(8.0), int(8.0)), int(8.0))))), int(2.0)))) * mod(int(1.0),i0) ),abs(min(i1, ( mod(( i2 - i1 ),int(5.0)) + max(in1, mod(i1,divInt(in1,mod(int(1.0),int(7.0))))) ))))\\nif divInt(int(8.0),max(divInt(int(0.0),abs(in0)), ( max(in0, ( ( max(mod(in0,abs(int(5.0))), int(6.0)) * mod(res0,int(1.0)) ) * i2 )) + int(7.0) ))) \\le res0:{:\\nin1 = ( int(7.0) - abs(int(5.0)) )\\nb0 = res0 != ( abs(abs(mod(int(2.0),int(7.0)))) + divInt(( in2 * abs(( i2 + ( ( res0 * max(i0, min(max(int(1.0), divInt(( int(5.0) - in2 ),int(2.0))), int(0.0))) ) * ( in2 * int(9.0) ) ) )) ),int(5.0)) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 74, 74, 5, 4, 0, 6, 5, 1, 0, 2, 74, 4, 302, 88, 70, 45, 44]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 2, 1, 1, 0, 1, 2, 2, 1, 1, 0], [1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 8, 9, 6, 7, 4, 0, 4, 0, 5, 5, 9, 1, 6, 0, 4, 0], [5, 0, 1, 5, 3, 1], [2, 1, 1, 1, 1, 0, 0, 2], [], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [2, 0, 0, 1], [1], [], [5, 5, 1, 6, 3, 3, 4, 5, 6, 0, 2, 6, 5, 6, 6, 4, 2, 2], [1, 0], [0, 0, 2, 2, 3, 2, 0, 1, 1, 1, 3, 2, 3, 2, 3, 2, 1, 3, 2, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 1, 0, 2, 3, 2, 1, 3, 1, 2, 1, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 3, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 1, 2, 2, 2], [1, 0, 2, 1, 2, 2, 1, 1, 1, 2, 2, 0], [1, 0, 1, 1]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not in2 != in2\\nloopBreak% = 0\\nwhile b1:{:\\ni1 -= ( mod(min(( res0 + int(8.0) ), int(1.0)),int(8.0)) * abs(( min(( min(divInt(int(9.0),min(mod(in0,int(6.0)), int(7.0))), int(4.0)) - in0 ), in1) * int(0.0) )) )\\nin2 = res0\\nb1 = i0 \\l int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b1\\nloopBreak% = 0\\nwhile i2 \\g mod(int(0.0),res0):{:\\nloopBreak% = 0\\nwhile int(5.0) != in2:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( max(( int(5.0) * abs(int(9.0)) ), ( int(1.0) - res0 )) - abs(int(6.0)) ) \\ge ( ( int(0.0) - res0 ) * in1 )\\nb2 = ( ( abs(int(4.0)) * i2 ) + int(0.0) ) \\g i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 11, 11, 3, 8, 18, 18, 6, 8, 0, 10, 6, 4, 1, 0, 18, 2, 58, 15, 9, 12, 4]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 1, 2, 1, 1], [0, 0], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 9, 3, 0, 4, 7, 0, 7, 3, 6, 2, 5, 2, 8, 5], [2, 0], [1], [], [1, 0, 1], [0, 0], [1], [0], [0, 1], [4, 5, 6, 4, 6, 5, 6, 6, 6, 3], [1, 1], [2, 1, 3, 2, 0, 1, 3, 1, 3, 3, 3, 3, 1, 3, 2, 1, 3, 1, 2, 1, 2, 1, 0, 3, 1, 2, 2, 3, 0, 1, 1, 0, 3, 2, 1, 1, 3, 0, 0, 1, 1, 0, 2, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1], [1, 2, 0, 0], [0, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(4.0) - abs(( in1 * int(7.0) )) ) == min(int(9.0), min(abs(max(min(int(3.0), abs(divInt(int(0.0),max(int(4.0), divInt(int(7.0),divInt(int(0.0),in2)))))), max(int(7.0), divInt(divInt(min(res0, int(3.0)),int(6.0)),in1)))), min(mod(int(2.0),int(5.0)), max(res0, in2)))):{:\\nb1 = True\\nif int(2.0) \\l int(8.0):{:\\nres0 += res0\\n:}else:{:\\nres0 += mod(int(5.0),in0)\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 2, 3, 16, 16, 2, 1, 0, 3, 2, 1, 1, 2, 10, 2, 45, 9, 12, 4, 7]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 4, 6, 6, 9, 8, 1, 2, 4], [0], [0], [0], [0, 0, 1], [0], [3, 1], [0], [], [1, 3, 4, 2, 2, 0, 6, 1, 3, 5, 4, 4, 2, 0], [1], [2, 2, 0, 2, 1, 2, 1, 1, 0, 2, 3, 2, 2, 0, 0, 1, 2, 3, 1, 0, 0, 3, 2, 2, 3, 1, 2, 3, 2, 2, 2, 0, 3, 0, 0, 3, 0, 1, 1, 0, 3, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 2, 0, 1, 2, 0, 1], [2, 2, 2, 2, 0, 0, 2], [0, 0, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= divInt(divInt(in0,divInt(int(8.0),( int(5.0) * int(4.0) ))),in1)\\nb0 = ( True and ( min(( ( i2 * i2 ) * int(6.0) ), divInt(min(int(6.0), i0),res0)) + abs(mod(divInt(min(int(9.0), mod(max(( ( divInt(i1,abs(in0)) + in2 ) * min(in1, int(8.0)) ), int(1.0)),in1)),max(int(2.0), i2)),int(4.0))) ) \\l i0 )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 10, 10, 1, 1, 1, 3, 1, 2, 1, 0, 14, 1, 45, 14, 8, 7, 8]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 2, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 6, 6, 9, 1, 2, 7, 2, 2, 3, 3, 8, 1], [5, 1, 1, 2], [2, 0, 2], [], [1, 0, 1, 1, 1], [0, 0, 0, 0], [0], [], [1], [3, 1, 1, 2, 4, 4, 5, 5, 3, 2, 0, 4, 1, 6, 3, 1, 3, 5, 3, 6, 2, 1, 6], [0, 0, 1, 1, 0], [0, 2, 1, 0, 0, 3, 0, 2, 3, 3, 2, 3, 1, 3, 2, 0, 0, 1, 0, 0, 1, 3, 0, 0, 2, 3, 0, 1, 0, 3, 3, 2, 0, 2, 1, 3, 0, 1, 0, 1, 2, 1, 2, 0, 0, 1, 3, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0], [2, 1, 2, 0, 2, 0, 0, 2, 0, 1, 0], [1, 2, 2, 2, 0, 2, 0, 0], [1, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in0 != mod(int(1.0),i1):{:\\ni1 = i2\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = abs(in1) \\g ( max(abs(( min(int(6.0), abs(mod(in1,in2))) - int(6.0) )), in2) * in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = int(9.0) \\g min(i2, i0)\\nin1 = ( min(i1, int(1.0)) * res0 )\\nin0 *= abs(min(mod(i1,( int(2.0) + max(in0, int(7.0)) )), in2))\\nin0 *= int(22.0)\\nloopBreak% = 0\\nwhile ( int(3.0) + ( res0 + i2 ) ) == int(38.0):{:\\ni1 = min(res0, int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 13, 13, 4, 3, 0, 5, 4, 1, 0, 1, 23, 5, 49, 9, 11, 8, 3]}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 3, 4, 1, 2, 4, 2, 0, 1, 2], [4], [], [], [1], [0], [], [], [0], [0, 5, 6, 1, 3, 0, 3, 5, 2, 6, 5, 5, 3, 4], [0], [1, 2, 1, 1, 2, 2, 3, 0, 0, 1, 2, 3, 2, 2, 3, 1, 3, 2, 0, 3, 2, 1, 0, 3, 0, 3, 2, 0, 3, 0, 3, 3, 2, 0, 3, 0, 1, 2, 0, 3, 1, 2, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [1, 2, 1, 1, 2, 1, 2, 0, 1, 1, 0, 2], [2, 1, 0, 1, 2, 1, 2], [0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) \\le ( int(3.0) * int(4.0) ):{:\\ni0 = divInt(( max(in2, res0) - int(1.0) ),( abs(( divInt(max(int(2.0), max(( i1 + abs(mod(int(4.0),in0)) ), max(i0, abs(( in0 - min(in2, max(max(( i2 * min(res0, int(2.0)) ), divInt(in2,abs(int(0.0)))), mod(in2,in0))) ))))),int(1.0)) - int(2.0) )) * in1 ))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 10, 10, 1, 0, 0, 1, 1, 0, 0, 1, 14, 1, 47, 12, 12, 7, 5]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1], [2, 0, 2, 0, 0, 1, 2, 0], [1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 2, 0, 2, 2, 8, 0, 9, 8, 7, 8, 8, 9, 8, 7, 8, 7, 3, 5, 1, 5, 9], [5, 5, 3], [2, 2, 0, 0], [1], [1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0], [1, 1, 3, 2, 1, 0], [1, 1, 0], [], [3, 5, 2, 5, 5, 3, 1, 5, 3, 0, 2, 0, 5, 5, 0, 3, 6, 4, 2, 6, 4, 6, 1, 5], [0, 0], [3, 3, 0, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2, 3, 3, 2, 3, 0, 0, 3, 0, 2, 2, 0, 1, 2, 1, 0, 1, 3, 1, 0, 2, 0, 3, 2, 0, 3, 1, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 0, 2, 3, 2, 3, 1, 1, 1, 3, 2, 1, 3, 1, 0, 1, 2, 1, 1, 3, 2, 2, 0, 1, 3, 3, 1, 2, 1, 0, 1, 2, 2, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 2], [1, 0, 0, 0, 0, 1, 0, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(abs(in0), in2) != int(9.0):{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\ni2 = ( int(6.0) - divInt(in2,in2) )\\nb2 = in0 != mod(( ( max(abs(mod(abs(i1),in2)), min(in0, ( ( i0 + int(2.0) ) + mod(int(0.0),i2) ))) + int(2.0) ) + max(int(2.0), i0) ),mod(in2,max(mod(in2,max(int(8.0), max(( int(0.0) - i0 ), divInt(max(int(9.0), ( int(8.0) + in0 )),( res0 * in1 ))))), mod(min(( min(int(7.0), int(8.0)) - int(8.0) ), min(divInt(int(9.0),abs(int(8.0))), i2)),int(7.0)))))\\nb0 = ( not True or divInt(int(8.0),int(7.0)) \\ge min(mod(divInt(res0,int(3.0)),min(abs(int(5.0)), mod(int(1.0),in1))), int(5.0)) )\\nloopBreak% = 0\\nwhile b0:{:\\nres0 = ( divInt(i1,in2) + int(9.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 23, 23, 3, 4, 1, 9, 3, 6, 3, 0, 24, 2, 87, 24, 18, 10, 14]}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 0, 2, 0], [0, 0, 0, 1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 5, 2, 4, 3, 8, 4, 7, 2, 6, 3, 1, 8, 8, 8, 8, 7, 2, 8, 7, 3, 8, 1, 5, 1, 6, 5, 2, 4, 8, 0, 5, 9, 0, 7, 6, 0, 7, 0, 9], [0, 0, 4, 2, 5, 0, 2, 5, 0], [2], [1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 3, 3, 2], [], [0, 1, 1], [6, 2, 0, 2, 5, 4, 4, 1, 1, 4, 0, 1, 0, 3, 4, 0, 5, 6, 6, 0, 6, 3, 4, 2, 2, 4, 3, 6, 1, 3, 4, 2, 3, 1, 2, 0, 5, 5, 3, 5, 4, 2, 1, 3, 2], [1, 1], [1, 3, 1, 3, 0, 2, 2, 0, 2, 2, 0, 2, 0, 1, 0, 2, 3, 1, 3, 2, 2, 2, 2, 1, 1, 1, 2, 0, 3, 2, 0, 3, 1, 2, 3, 0, 0, 2, 2, 2, 3, 1, 3, 0, 2, 3, 0, 1, 2, 1, 2, 3, 3, 0, 0, 2, 3, 1, 3, 0, 2, 1, 0, 0, 1, 3, 1, 2, 3, 3, 1, 2, 0, 3, 3, 1, 0, 3, 2, 0, 1, 1, 1, 1, 0, 3, 3, 0, 1, 1, 2, 2, 3, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 3, 3, 2, 1, 2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 2, 3, 3, 0, 2, 2, 3, 1, 3, 0, 1, 1, 2, 1, 1, 0, 1, 1, 0, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 1, 1, 1, 0, 3, 0, 3, 3, 0, 1, 2, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 2, 1, 0, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 2, 2], [2, 2, 2, 2, 2, 1, 2, 0, 2, 1, 2, 1, 1, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 0, 1, 0, 2], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not int(2.0) \\l max(int(4.0), abs(res0)):{:\\nif divInt(divInt(i2,( ( i0 * mod(i2,int(5.0)) ) * in2 )),( max(int(2.0), min(( ( mod(mod(int(4.0),int(3.0)),int(8.0)) * ( in1 * abs(( in1 * abs(int(4.0)) )) ) ) - divInt(max(i1, i1),( ( ( min(int(7.0), min(in1, ( abs(i0) * int(2.0) ))) + ( int(6.0) * ( abs(min(i1, i0)) - ( min(int(3.0), abs(in0)) * ( int(1.0) - in1 ) ) ) ) ) - i0 ) * int(8.0) )) ), abs(int(8.0)))) * mod(max(abs(int(8.0)), mod(in2,max(abs(int(8.0)), res0))),min(( res0 * int(7.0) ), int(2.0))) )) \\l int(8.0):{:\\nif ( ( int(7.0) \\le i0 or max(min(res0, int(3.0)), int(8.0)) == ( ( max(( mod(int(1.0),int(5.0)) + divInt(in0,in1) ), max(i2, i2)) * min(max(divInt(int(1.0),divInt(in1,in0)), res0), divInt(i1,mod(( in0 * int(6.0) ),( max(min(in1, ( divInt(max(int(5.0), max(i2, int(2.0))),int(4.0)) - ( int(8.0) + int(0.0) ) )), in0) - int(5.0) )))) ) - int(9.0) ) ) or ( ( not i1 != abs(( int(0.0) + i2 )) and i0 \\l in2 ) or int(7.0) == ( int(6.0) - max(int(0.0), int(7.0)) ) ) ):{:\\nin2 += int(0.0)\\n:}else:{:\\nb2 = in0 != max(in2, abs(abs(in1)))\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(9.0) \\l divInt(i2,i1):{:\\nin0 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 41, 41, 9, 1, 4, 15, 9, 6, 0, 3, 45, 2, 160, 41, 35, 27, 16]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 7, 8, 5, 0, 5, 1, 4, 6, 9, 2, 1, 9, 5, 7], [], [], [], [], [], [], [], [], [6, 1, 0, 4, 5, 5, 1, 5, 4, 2, 1, 2, 1], [0], [3, 3, 2, 3, 2, 0, 2, 2, 0, 3, 3, 2, 3, 3, 2, 3, 3, 1, 3, 0, 3, 1, 1, 1, 3, 2, 0, 0, 0, 1, 3, 1, 1, 1, 3, 2, 3, 1, 2, 0, 0, 0, 1, 1, 1, 3, 3, 2, 1, 3, 2, 3, 1, 0, 2, 3, 1, 3, 2, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 2, 1, 2, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 0, 2, 2, 2, 0], [0, 2, 1, 2, 1, 2, 0, 1, 0], [0, 0, 1, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = min(abs(( max(divInt(i1,divInt(( i0 + abs(abs(mod(max(min(( min(min(int(7.0), max(in1, max(int(0.0), int(7.0)))), int(8.0)) * min(( in2 - in2 ), i1) ), int(5.0)), max(int(0.0), int(5.0))),int(1.0)))) ),min(( max(int(4.0), ( in2 * in1 )) - i2 ), int(6.0)))), int(9.0)) * int(2.0) )), abs(min(mod(int(1.0),abs(( abs(int(9.0)) + i1 ))), ( abs(int(5.0)) - min(( int(7.0) + i2 ), i1) ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 1, 1, 0, 1, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 62, 13, 21, 9, 4]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 1, 1, 1, 0, 2, 0, 2, 1, 0], [0, 0, 1], [1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 3, 0, 2, 9, 7, 9, 5, 4, 7, 2, 4, 5, 6, 6, 4, 2, 5, 8, 3, 4, 8, 4, 6, 2, 7, 6, 0, 9, 0, 4, 1, 4, 5, 7, 6, 7, 6, 2, 8, 0, 8, 6, 0, 6, 4, 0, 1, 8, 5, 0, 5, 1, 6, 2, 0, 2, 4, 7, 8, 6, 1, 9, 6, 2, 5], [1, 3, 2, 4, 4], [2, 0, 1, 0, 1], [1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 3, 3, 1], [1], [1, 0], [2, 0, 1, 4, 2, 3, 0, 3, 4, 5, 1, 5, 5, 3, 2, 3, 5, 4, 4, 0, 1, 6, 4, 4, 5, 4, 0, 4, 3, 4, 5, 1, 3, 1, 6, 6, 0, 6, 2, 4, 6, 0, 1, 0, 0, 4, 6, 3, 4, 3, 5, 1, 6, 6, 5, 1, 3, 3, 0, 3, 4, 6, 0, 3, 3, 0, 4, 0, 6, 3], [0, 1, 1, 1], [2, 1, 1, 1, 3, 1, 3, 2, 1, 0, 1, 1, 3, 3, 2, 3, 0, 1, 3, 1, 2, 2, 1, 0, 1, 3, 2, 3, 3, 3, 2, 1, 0, 3, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 3, 2, 3, 2, 2, 2, 1, 1, 1, 3, 3, 0, 1, 0, 0, 3, 2, 1, 2, 0, 2, 2, 3, 3, 3, 0, 0, 0, 1, 2, 0, 2, 3, 0, 3, 1, 2, 2, 3, 1, 2, 2, 0, 1, 2, 3, 0, 3, 1, 0, 2, 0, 3, 3, 1, 0, 3, 3, 1, 2, 0, 2, 1, 1, 0, 2, 1, 0, 2, 3, 3, 2, 1, 3, 1, 2, 0, 0, 3, 1, 0, 1, 1, 3, 0, 2, 2, 0, 3, 3, 0, 2, 3, 1, 2, 2, 2, 0, 3, 1, 0, 2, 3, 1, 0, 1, 0, 3, 3, 3, 3, 2, 2, 0, 2, 0, 3, 3, 1, 0, 2, 1, 0, 3, 0, 3, 3, 0, 0, 0, 2, 2, 0, 1, 2, 3, 3, 1, 0, 2, 2, 2, 2, 3, 1, 3, 3, 0, 3, 0, 0, 2, 3, 1, 2, 1, 0, 1, 0, 2, 0, 0, 3, 1, 2, 0, 1, 2, 1, 0, 3, 3, 3, 1, 3, 0, 1, 1, 2, 3, 3, 1, 3, 2, 2, 0, 1, 3, 1, 2, 3, 0, 2, 2, 2, 0, 2, 3, 2, 3, 2, 3, 2, 0, 3, 3, 0, 0, 1, 1, 0, 3, 3, 2, 1, 1, 0, 3, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 2, 1, 1, 1, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 1, 2, 2, 0, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 2, 1, 2, 0, 2, 0, 1, 2, 0, 2, 2, 2, 2, 1, 1, 2, 2, 0, 2, 0], [0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 0, 0, 0, 1, 1, 2, 2, 2, 1, 2, 1, 1, 0, 2, 0, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\ni2 = ( int(2.0) + int(4.0) )\\n:}else:{:\\ni0 *= int(3.0)\\n:}\\nb0 = min(int(0.0), max(( int(2.0) + i1 ), int(9.0))) \\g int(7.0)\\nin1 -= max(abs(( max(i2, int(9.0)) * max(int(5.0), ( ( int(4.0) + in0 ) * int(7.0) )) )), max(mod(abs(min(max(( int(2.0) - i0 ), max(int(4.0), in0)), int(5.0))),in1), ( int(6.0) + int(6.0) )))\\nif b1:{:\\nb0 = ( ( ( ( int(4.0) * ( in2 + max(int(2.0), int(5.0)) ) ) + i1 ) \\ge mod(int(8.0),in2) or int(3.0) == min(divInt(abs(mod(( divInt(int(4.0),int(8.0)) + int(4.0) ),max(min(in2, int(6.0)), in0))),i2), max(( int(2.0) - mod(in0,( divInt(min(max(min(in2, in1), in1), int(7.0)),mod(i0,( min(i1, max(int(6.0), divInt(divInt(min(int(0.0), ( divInt(res0,int(9.0)) - divInt(abs(in1),max(int(0.0), in1)) )),mod(in2,min(min(int(4.0), in1), max(max(int(1.0), ( i0 * divInt(int(4.0),int(5.0)) )), in1)))),( int(7.0) * in0 )))) * divInt(min(max(( int(6.0) - abs(int(7.0)) ), mod(in1,in2)), abs(int(6.0))),i1) ))) * int(2.0) )) ), int(8.0))) ) or min(in0, divInt(( i1 - min(abs(res0), ( abs(int(0.0)) - divInt(( divInt(res0,abs(int(8.0))) + i0 ),divInt(max(int(6.0), res0),int(0.0))) )) ),i2)) \\le max(abs(max(min(( mod(in1,( res0 * max(min(int(6.0), i0), ( int(4.0) + i1 )) )) - min(i0, abs(max(i0, in1))) ), res0), divInt(( in0 * int(0.0) ),( abs(max(int(1.0), in1)) - ( ( mod(mod(min(int(8.0), max(min(in0, abs(in2)), i1)),mod(max(int(5.0), mod(int(0.0),res0)),int(5.0))),res0) * ( in2 * i1 ) ) * abs(int(1.0)) ) )))), ( in0 - int(6.0) )) )\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nin0 *= mod(int(2.0),i0)\\nb1 = min(abs(min(int(0.0), max(in0, int(2.0)))), int(4.0)) \\le mod(abs(min(int(7.0), abs(divInt(( in1 - int(8.0) ),abs(int(6.0)))))),mod(abs(res0),( mod(( i0 * divInt(abs(mod(max(mod(max(divInt(in0,abs(abs(in0))), i0),int(1.0)), int(9.0)),in1)),min(abs(( int(6.0) * int(2.0) )), i0)) ),min(res0, in0)) - int(5.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 3, 7, 67, 67, 5, 5, 2, 10, 5, 5, 1, 2, 70, 4, 275, 69, 73, 37, 35]}, {"genotype": [[0], [1], [1], [], [1], [1], [5], [], [], [], [], [], [], [], [], [4, 4, 5], [0], [3, 0, 3, 1, 0], [], [0, 0], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = min(in1, min(int(5.0), in2))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 0, 2, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [1, 1], [1], [3], [1], [], [], [1], [0], [], [], [], [0, 2, 0, 4, 2], [0, 0], [0, 0, 1, 0], [], [], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i0 \\g i2:{:\\ni0 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 5, 2, 4, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [0, 1], [0, 1], [1, 1, 1, 1, 1], [8, 3, 8, 6, 2], [5, 3], [0, 2, 0], [1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0], [3, 2, 0, 3, 2, 1, 0], [1], [1], [6, 6], [1], [1, 0, 3, 3, 3, 1, 1, 1, 1], [], [2, 0, 2], [2], []], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( int(8.0) != res0 or abs(min(abs(int(3.0)), int(8.0))) \\ge int(6.0) ):{:\\nloopBreak% = 0\\nwhile not b0:{:\\nb2 = ( not False or b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 *= int(2.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 5, 5, 2, 3, 2, 9, 2, 7, 1, 1, 2, 1, 9, 0, 3, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 2, 0], [1, 1, 1, 0], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 1, 2, 5, 6, 0, 2, 9, 4, 1, 5, 4, 3, 5, 9, 3, 2], [4, 1, 3, 2], [2, 1], [0], [0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0], [0, 3, 2, 1], [0], [0], [5, 3, 1, 6, 3, 6, 2, 6, 3, 5, 4, 5, 0], [0, 1], [2, 1, 1, 2, 0, 0, 1, 1, 0, 2, 3, 1, 0, 0, 3, 3, 3, 2, 0, 3, 3, 2, 2, 1, 1, 2, 3, 3, 0, 2, 1, 3, 0, 1, 1, 2, 0, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 2, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 1, 2, 2, 2, 0, 0, 2, 2, 1, 1], [2, 0, 2, 0, 2, 1, 2, 0], [1, 1, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = ( int(4.0) * int(8.0) )\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile ( in0 + i1 ) \\le int(1.0):{:\\nloopBreak% = 0\\nwhile int(2.0) \\g res0:{:\\nb1 = ( mod(max(int(5.0), in0),res0) \\ge max(abs(abs(( i2 * abs(min(( ( int(6.0) + int(0.0) ) * mod(min(abs(res0), ( int(2.0) - abs(in0) )),int(9.0)) ), int(4.0))) ))), mod(in2,divInt(( divInt(int(1.0),int(5.0)) * int(4.0) ),int(3.0)))) and not True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(5.0) == max(max(divInt(in1,int(9.0)), int(3.0)), int(2.0)):{:\\nin2 += i0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 18, 18, 4, 2, 1, 8, 4, 4, 1, 1, 13, 2, 53, 13, 11, 8, 6]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 1, 0, 1, 1], [1], [0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 0, 5, 5, 3, 6, 9, 5, 4, 0, 2], [0, 4], [0, 2, 1, 1], [1], [0, 1, 0, 1, 0, 0], [0, 0], [2, 3, 0, 0], [], [], [4, 2, 0, 0, 0, 5, 3, 0, 4, 4, 4, 1, 1, 3], [0, 1], [3, 2, 0, 1, 2, 2, 0, 0, 2, 2, 3, 1, 2, 1, 3, 1, 3, 0, 1, 0, 3, 2, 3, 2, 0, 2, 0, 1, 1, 1, 3, 3, 1, 1, 2, 0, 2, 1, 0, 2, 0, 1, 3, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 0, 2, 2, 2], [2, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not max(( in1 * int(4.0) ), divInt(divInt(i2,i0),divInt(divInt(max(int(7.0), divInt(int(0.0),max(int(5.0), max(i0, int(5.0))))),i0),max(divInt(min(mod(in2,( in0 - int(3.0) )), int(6.0)),int(9.0)), abs(abs(int(5.0))))))) \\l int(4.0):{:\\nb0 = ( ( i0 + mod(int(0.0),in1) ) \\le divInt(in1,int(2.0)) or b2 )\\nin1 = abs(i1)\\ni1 -= in0\\nb1 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 12, 12, 2, 4, 1, 6, 2, 4, 0, 0, 14, 2, 45, 12, 9, 4, 9]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 0, 2, 0, 2, 2, 2, 0, 1], [1, 1, 1, 1, 0], [1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 2, 7, 7, 1, 4, 9, 3, 5, 5, 9, 2, 7, 5, 9, 0, 4, 7, 0, 2, 2, 1, 8, 7, 9, 5, 9, 0, 0, 8, 2, 4, 7, 3, 3], [4, 3, 1, 1], [2, 2, 0, 2], [], [1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1], [1], [0], [1, 3, 4, 3, 4, 0, 1, 4, 2, 0, 1, 3, 4, 5, 6, 6, 4, 1, 3, 5, 5, 1, 6, 2, 4, 1, 5, 5, 1, 5, 2], [1, 1, 1], [0, 2, 2, 3, 3, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 3, 0, 1, 1, 3, 1, 3, 2, 0, 0, 2, 3, 3, 3, 2, 2, 2, 2, 1, 2, 2, 1, 2, 3, 2, 1, 1, 3, 2, 3, 0, 0, 2, 3, 1, 3, 2, 1, 3, 3, 3, 0, 2, 1, 3, 2, 3, 0, 0, 3, 1, 1, 2, 0, 1, 2, 3, 0, 2, 3, 1, 3, 3, 0, 1, 3, 1, 1, 0, 2, 0, 1, 0, 2, 0, 1, 2, 0, 2, 0, 2, 3, 0, 0, 0, 2, 0, 2, 0, 1, 1, 2, 1, 3, 1, 1, 3, 3, 1, 2, 1, 0, 2, 1, 2, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 2, 2, 2, 1, 0, 0, 0, 0], [1, 2, 1, 0, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 0, 2, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\le mod(( min(min(( int(8.0) - in0 ), int(7.0)), int(2.0)) * int(7.0) ),int(7.0)):{:\\nin1 -= int(1.0)\\nb2 = int(4.0) \\ge in0\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = divInt(max(in1, int(9.0)),int(3.0)) \\g max(int(5.0), max(divInt(i0,i1), mod(max(min(abs(( ( ( mod(int(5.0),divInt(( int(9.0) + ( abs(( int(2.0) - int(7.0) )) - abs(divInt(abs(in1),i2)) ) ),divInt(max(int(5.0), min(mod(int(9.0),max(abs(min(i0, ( int(0.0) + max(( abs(i1) + in0 ), max(int(4.0), int(7.0))) ))), divInt(in1,int(0.0)))), ( max(in2, divInt(abs(int(2.0)),abs(abs(res0)))) - int(2.0) ))),max(int(1.0), int(8.0))))) - res0 ) - mod(in1,int(7.0)) ) * i1 )), divInt(in0,int(9.0))), mod(in2,divInt(in2,divInt(min(i1, res0),i2)))),mod(in1,( i1 - int(5.0) )))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(90.0) \\g mod(int(0.0),min(int(8.0), int(2.0))):{:\\nloopBreak% = 0\\nwhile b2:{:\\nif False:{:\\nin2 -= min(min(int(4.0), divInt(int(7.0),in2)), ( int(3.0) + ( int(3.0) * i1 ) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 5, 5, 36, 36, 4, 4, 0, 7, 4, 3, 1, 1, 31, 3, 124, 33, 28, 17, 19]}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [0, 4, 0, 2], [0, 0], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = in1\\ni0 = i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [8, 8], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= int(88.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 6, 4, 7, 7, 3, 0], [5], [1, 0, 0], [], [0, 0, 1], [0], [0, 2], [], [], [2, 6, 2, 0, 0, 5, 1, 2, 4, 5, 2], [1], [2, 2, 0, 1, 1, 2, 3, 3, 1, 1, 1, 3, 3, 2, 3, 2, 3, 2, 3, 2, 0, 2, 0, 0, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 2, 0, 1], [2, 1, 2, 1, 2], [1, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\ni2 *= ( ( res0 - int(3.0) ) * int(1.0) )\\nb0 = not mod(min(min(int(6.0), int(4.0)), int(7.0)),max(max(divInt(abs(( min(divInt(max(mod(i2,divInt(i0,i0)), in2),int(7.0)), i1) - i2 )),( int(3.0) * in1 )), int(0.0)), in2)) != i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 8, 8, 1, 3, 0, 3, 1, 2, 0, 0, 11, 1, 34, 9, 7, 5, 5]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 1, 2, 2, 0, 1, 0], [0, 1, 0], [0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 1, 7, 8, 7, 1, 9, 9, 5, 3, 7, 2, 6, 0, 7, 2, 0, 0, 3, 3, 0, 3, 0, 7, 7, 0, 1, 2, 4, 7, 7, 0, 7, 2, 3, 1, 2, 3, 3, 6, 7, 1, 0, 8, 7, 8, 2, 9, 5, 9, 7, 9], [1, 0, 0, 3], [1], [1], [1, 1, 0, 0, 1, 1], [0, 0, 0, 0], [1, 3], [0], [0, 0], [6, 0, 2, 4, 1, 6, 2, 1, 1, 3, 0, 2, 5, 1, 4, 5, 3, 2, 1, 0, 0, 2, 2, 2, 5, 5, 2, 0, 3, 0, 0, 2, 0, 5, 3, 6, 4, 2, 4, 5, 2, 1, 2, 3, 2, 5, 0, 5, 1, 3, 5, 2, 1], [0, 1, 0], [0, 1, 2, 0, 1, 2, 2, 3, 1, 3, 3, 0, 2, 1, 0, 0, 2, 1, 2, 1, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 3, 1, 3, 0, 0, 3, 1, 2, 0, 3, 1, 3, 2, 0, 0, 3, 2, 2, 3, 2, 2, 1, 2, 0, 0, 2, 2, 1, 1, 2, 0, 2, 3, 1, 0, 2, 0, 1, 3, 3, 2, 3, 0, 2, 3, 1, 3, 2, 0, 1, 1, 1, 2, 1, 1, 0, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 1, 3, 2, 0, 1, 3, 3, 1, 1, 2, 2, 2, 3, 3, 3, 3, 0, 3, 1, 1, 0, 3, 2, 3, 3, 1, 0, 3, 1, 1, 3, 2, 2, 1, 2, 0, 2, 0, 3, 3, 1, 3, 1, 1, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 1, 0, 1, 1, 1, 3, 0, 1, 1, 3, 3, 3, 3, 2, 1, 2, 2, 3, 3, 2, 3, 1, 0, 3, 0, 0, 0, 0, 0, 0, 2, 1, 3, 2, 2, 3, 1, 2, 2, 2, 3, 3, 0, 1, 0, 2, 2, 3, 0, 1, 3, 1, 1, 1, 0, 3, 0, 0, 0, 2, 0, 3, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 2, 1, 2, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 2, 0, 1, 1, 0, 0, 2, 2, 1, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 2, 2, 0, 0, 2, 2], [2, 0, 2, 1, 1, 0, 0, 1, 2, 1, 1, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 1, 2], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif res0 \\g int(5.0):{:\\nb1 = ( i0 * int(9.0) ) \\l ( divInt(max(int(1.0), max(min(i2, ( int(7.0) + in1 )), i1)),mod(int(8.0),( int(7.0) * res0 ))) - mod(( ( ( i2 - mod(i1,i1) ) + in0 ) + min(int(1.0), min(i0, i2)) ),abs(int(9.0))) )\\nloopBreak% = 0\\nwhile True:{:\\nif ( ( in2 - abs(int(9.0)) ) \\l abs(mod(i1,in1)) or min(mod(divInt(max(( mod(int(5.0),mod(in2,in0)) * divInt(divInt(int(3.0),int(7.0)),divInt(i2,( min(int(2.0), i1) - divInt(i0,int(6.0)) ))) ), min(min(( min(i0, divInt(min(int(0.0), min(( i2 - int(7.0) ), int(2.0))),int(0.0))) + ( int(0.0) * int(3.0) ) ), i2), max(max(abs(int(3.0)), abs(int(0.0))), min(abs(max(abs(int(3.0)), min(divInt(i2,int(0.0)), abs(min(int(7.0), int(7.0)))))), ( ( mod(min(abs(min(max(in2, min(int(0.0), int(1.0))), in2)), abs(mod(min(abs(int(2.0)), i2),abs(int(4.0))))),int(7.0)) + min(( ( int(7.0) * ( i0 * ( in0 + max(max(int(0.0), min(int(7.0), int(2.0))), i0) ) ) ) + ( min(divInt(abs(divInt(( i0 + int(3.0) ),int(1.0))),i2), abs(int(2.0))) * i0 ) ), int(3.0)) ) + int(3.0) ))))),int(6.0)),max(in2, int(7.0))), int(1.0)) \\ge abs(min(max(max(divInt(int(0.0),( divInt(min(min(divInt(abs(int(8.0)),in0), abs(res0)), in1),i2) * in1 )), in2), i2), ( int(7.0) * max(divInt(mod(min(int(8.0), divInt(( mod(abs(abs(i1)),int(2.0)) * i2 ),divInt(( min(in0, int(9.0)) - min(int(5.0), int(9.0)) ),int(7.0)))),i2),abs(in2)), i0) ))) ):{:\\nin2 = i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 *= divInt(in2,abs(i2))\\ni1 = int(9.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 53, 53, 4, 1, 1, 6, 4, 2, 1, 2, 53, 3, 216, 53, 60, 26, 28]}, {"genotype": [[0], [1], [0], [], [0], [1, 1], [8, 5], [1], [2], [], [1], [0], [], [], [], [2, 6], [], [3, 2, 2, 0, 0, 1, 3, 1], [1, 1], [2, 2], [], [1, 0]], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = abs(mod(divInt(i2,res0),int(8.0))) \\g abs(int(5.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 8, 2, 2, 0, 2]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 2, 0, 0, 0], [0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 8, 4, 4, 3, 6, 0, 5, 3, 6, 9, 1, 5, 7, 0, 9, 7, 5, 4, 4, 6, 2, 8, 8, 6, 5, 3, 7, 8, 7, 8, 0, 1, 6, 2, 3, 2, 8, 5, 5, 7, 3, 5, 5, 0, 8, 0, 2, 2], [5, 4, 3, 2], [1, 0, 1], [], [1, 1, 0, 1, 1, 0], [0, 0, 0, 0], [1, 1], [1, 1], [0], [2, 1, 1, 4, 6, 4, 2, 4, 3, 1, 6, 3, 2, 3, 1, 2, 6, 3, 2, 2, 0, 6, 6, 6, 5, 2, 3, 6, 2, 0, 3, 6, 3, 3, 2, 3, 1, 0, 2, 1, 2, 3, 1, 6, 2, 3, 1, 2, 3, 3, 6, 5, 0, 5, 3, 4, 4, 2], [1], [1, 0, 3, 0, 1, 0, 2, 1, 2, 2, 2, 0, 3, 0, 3, 2, 2, 2, 2, 3, 0, 2, 2, 0, 0, 0, 1, 0, 3, 2, 3, 2, 1, 0, 2, 0, 0, 1, 2, 1, 3, 2, 1, 2, 2, 0, 3, 3, 2, 2, 1, 3, 1, 2, 2, 0, 2, 2, 0, 2, 3, 1, 3, 0, 1, 3, 1, 0, 0, 0, 2, 1, 2, 3, 0, 2, 1, 1, 2, 3, 2, 0, 1, 0, 2, 2, 0, 0, 2, 1, 2, 2, 2, 1, 3, 2, 0, 2, 0, 0, 3, 1, 2, 2, 1, 3, 0, 1, 2, 2, 0, 0, 0, 0, 1, 1, 2, 0, 3, 0, 2, 0, 3, 3, 3, 1, 3, 3, 0, 1, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 0, 3, 2, 0, 2, 2, 3, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 3, 2, 1, 1, 2, 3, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 2, 2, 2, 2, 1, 1, 2, 3, 0, 1, 2, 2, 3, 0, 3, 0, 1, 0, 2, 1, 0, 3, 1, 2, 2, 0, 3, 3, 2, 0, 2, 1, 2, 3, 3, 1, 1, 3, 2, 0, 1, 0, 3, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 0, 0, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 1, 2, 0, 2, 2, 0, 0, 2, 0, 0, 2, 0, 0, 1, 2, 1, 2, 1], [1, 2, 1, 2, 2, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 2, 2, 0, 1, 0, 1, 0, 0, 1, 2, 2, 2, 2, 2, 1, 1, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(8.0) != i2:{:\\nb1 = min(i1, int(4.0)) \\le i1\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile divInt(int(8.0),( divInt(( in1 - abs(res0) ),abs(divInt(( divInt(( max(in1, divInt(divInt(i2,in1),in0)) * int(4.0) ),i1) - max(( abs(divInt(int(4.0),res0)) * ( in0 * i2 ) ), int(3.0)) ),mod(int(6.0),abs(( int(0.0) + ( ( in0 + max(max(( ( int(5.0) + max(int(3.0), ( mod(i1,( ( i2 - ( abs(int(6.0)) - max(res0, int(9.0)) ) ) - min(int(1.0), in0) )) - i2 )) ) * i2 ), ( int(5.0) + ( min(i0, ( int(7.0) + int(0.0) )) - ( abs(mod(res0,int(9.0))) - res0 ) ) )), divInt(mod(res0,in2),divInt(int(7.0),mod(mod(( int(5.0) + max(mod(i2,( in0 * res0 )), min(int(4.0), divInt(( int(4.0) * min(i2, int(6.0)) ),mod(( i0 + in0 ),res0)))) ),in0),int(2.0))))) ) - int(8.0) ) )))))) + ( in0 - max(i2, mod(in0,abs(max(min(int(8.0), min(max(i1, int(6.0)), max(int(5.0), i0))), int(3.0))))) ) )) \\ge int(7.0):{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = abs(mod(int(8.0),min(i2, abs(divInt(in0,( mod(abs(divInt(int(7.0),int(8.0))),( divInt(( int(0.0) + int(1.0) ),int(6.0)) - divInt(min(mod(int(2.0),int(3.0)), ( min(i1, divInt(abs(int(2.0)),res0)) * i2 )),in0) )) * ( i1 * int(8.0) ) )))))) == ( ( ( ( int(5.0) * int(5.0) ) * ( min(i2, int(7.0)) - mod(mod(min(in0, abs(in0)),int(3.0)),res0) ) ) - ( int(5.0) * in2 ) ) + min(int(5.0), divInt(( i0 * min(max(divInt(in2,mod(int(0.0),( abs(max(int(8.0), int(0.0))) * abs(( in0 + int(2.0) )) ))), in1), max(in1, int(2.0))) ),i2)) )\\n:}\\nb1 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 50, 50, 4, 3, 0, 6, 4, 2, 2, 1, 58, 1, 219, 70, 42, 39, 32]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 8, 6, 6, 5, 0, 6, 8, 0, 8, 7, 7, 1, 6, 8, 1, 8, 6, 1, 6, 6, 5, 8, 8, 7, 7, 3, 3, 4, 0, 3, 7], [1, 4], [1, 0], [0, 0, 1], [0, 1, 0, 0, 0, 1, 0], [0, 0], [3, 3, 3, 1, 0], [0], [], [2, 0, 3, 6, 1, 4, 6, 1, 4, 0, 0, 0, 3, 4, 5, 5, 4, 0, 3, 4, 0, 2, 2, 3, 0], [], [3, 3, 2, 3, 1, 0, 3, 1, 1, 1, 1, 2, 0, 0, 3, 0, 2, 0, 3, 3, 0, 0, 2, 1, 3, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 1, 0, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 2, 3, 0, 3, 2, 1, 1, 1, 1, 3, 3, 2, 3, 0, 0, 3, 1, 3, 2, 0, 1, 1, 1, 2, 3, 1, 3, 3, 1, 0, 3, 2, 0, 1, 2, 2, 3, 0, 2, 3, 2, 1, 1, 2, 0, 2, 1, 0, 2, 2, 3, 2, 3, 0, 0, 1, 2, 2, 1, 3, 1, 1, 2, 3, 3, 0, 0, 1, 1, 1, 3, 2, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 1, 2, 2, 1, 0, 2, 1, 2, 2, 2, 2, 0, 0, 2, 1, 1, 2], [2, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( max(min(divInt(abs(int(8.0)),i2), min(int(7.0), int(8.0))), int(6.0)) \\g int(6.0) and ( ( True and mod(i0,in0) \\le max(res0, divInt(i1,max(max(in1, res0), divInt(int(5.0),min(max(( max(( mod(( int(0.0) * min(max(max(int(6.0), i1), int(8.0)), in1) ),max(int(0.0), i0)) - min(divInt(int(8.0),abs(( min(mod(min(i0, min(( int(7.0) + int(7.0) ), int(1.0))),int(6.0)), max(abs(( abs(i0) * in0 )), max(int(8.0), min(( in1 + int(1.0) ), int(8.0))))) * int(6.0) ))), mod(abs(int(1.0)),max(abs(int(6.0)), in2))) ), abs(divInt(in2,int(6.0)))) - divInt(mod(abs(in1),( abs(divInt(int(5.0),int(8.0))) + mod(i0,divInt(int(8.0),in0)) )),( ( min(mod(min(in1, i0),int(7.0)), divInt(( int(7.0) + abs(int(3.0)) ),int(3.0))) + ( max(max(i2, i2), int(4.0)) + int(0.0) ) ) + int(3.0) )) ), abs(( in0 - int(7.0) ))), i0))))) ) or b0 ) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 33, 33, 2, 2, 3, 7, 2, 5, 1, 0, 25, 0, 123, 29, 36, 13, 16]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 1, 1, 2, 2, 0, 0, 0], [0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 4, 8, 4, 2, 8, 9, 8, 3, 6, 2, 0, 4, 0, 3, 3, 2, 0, 3, 2, 2, 7], [1, 5, 2, 0, 3, 2], [1, 0, 0, 1, 0], [0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [2, 3, 2, 0, 0, 1, 2, 2], [0], [1, 0, 0, 1], [3, 5, 2, 0, 3, 5, 1, 2, 1, 5, 5, 1, 1, 4, 3, 0, 2, 1, 6, 4, 1, 0, 3], [1, 0, 0, 0], [2, 1, 3, 1, 0, 0, 1, 1, 0, 1, 3, 0, 2, 1, 0, 0, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 0, 3, 2, 1, 2, 3, 1, 0, 3, 2, 2, 1, 2, 3, 2, 0, 1, 3, 1, 3, 0, 3, 1, 1, 3, 1, 3, 0, 3, 1, 1, 1, 1, 2, 0, 3, 0, 0, 3, 2, 0, 1, 3, 1, 1, 2, 1, 0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 0, 0, 2, 1, 1, 1, 2, 1, 1, 0, 1, 2, 0], [0, 2, 2, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 += divInt(int(0.0),abs(int(4.0)))\\nif in2 \\g i2:{:\\nif not ( not b1 and b0 ):{:\\nif int(4.0) != int(8.0):{:\\nb0 = i0 == int(4.0)\\n:}\\n:}\\nin0 = abs(in2)\\nb1 = True\\nif ( int(2.0) * i1 ) \\l i2:{:\\nloopBreak% = 0\\nwhile not not abs(max(mod(i1,in2), divInt(( ( int(8.0) * in2 ) - i1 ),min(( int(9.0) + mod(min(int(8.0), i1),abs(mod(mod(int(3.0),divInt(max(mod(in1,int(6.0)), max(int(2.0), max(in0, abs(int(0.0))))),int(4.0))),max(int(0.0), max(i0, min(int(3.0), int(3.0))))))) ), int(2.0))))) \\ge int(0.0):{:\\ni2 = mod(i1,max(res0, in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 = abs(mod(i0,int(3.0)))\\n:}\\n:}else:{:\\nb0 = min(int(2.0), int(2.0)) == divInt(int(7.0),in0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 23, 23, 6, 5, 1, 14, 6, 8, 1, 4, 23, 4, 74, 15, 17, 5, 11]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1], [3, 8, 2], [0], [0], [], [1], [0], [], [], [], [3, 6, 5], [1], [1, 3, 3, 3, 0, 1, 0, 1], [], [2, 0, 0], [0], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(3.0) \\l abs(min(min(in0, int(8.0)), res0))\\nin2 += int(2.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 3, 1, 8, 0, 3, 1, 0]}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [1, 1], [0, 0], [1, 1, 1], [7, 2, 6], [4, 1], [0, 2, 0], [], [1, 0, 1, 0], [0, 0], [0, 1], [0], [], [3, 1], [], [0, 2, 1, 1, 0, 1], [0], [], [1], []], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in0 \\le ( int(7.0) - int(2.0) ):{:\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = i1 \\g int(6.0)\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 3, 3, 2, 3, 0, 4, 2, 2, 1, 0, 2, 0, 6, 1, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 1, 2, 0, 0, 2, 0, 0], [1, 1], [0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 4, 9, 7, 3, 6, 3, 9, 7, 9, 6, 8, 1, 9, 0, 5, 2, 9, 4, 1, 1, 7, 5, 8, 7, 0, 9, 7, 9, 8, 0, 2, 2, 1, 8, 4, 6, 4, 6, 8, 9, 1, 7, 6, 0, 1, 8, 7, 2, 4], [2, 4, 1, 3], [2, 0, 1, 0, 1, 0, 2], [0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 0], [], [], [0, 4, 1, 4, 0, 6, 2, 3, 0, 6, 1, 0, 5, 5, 2, 2, 3, 2, 2, 2, 6, 1, 6, 4, 6, 2, 3, 3, 4, 1, 6, 6, 1, 2, 5, 5, 3, 3, 3, 4, 6, 1, 5, 3, 6, 2, 6, 4, 6, 2, 2, 2, 0, 0, 2], [1, 1, 0, 1, 1], [3, 2, 1, 3, 2, 0, 2, 0, 2, 2, 3, 1, 1, 0, 1, 3, 1, 2, 2, 3, 1, 0, 1, 1, 3, 1, 3, 2, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 1, 2, 0, 0, 3, 3, 3, 3, 2, 0, 1, 2, 2, 3, 0, 2, 1, 0, 0, 3, 1, 0, 3, 2, 3, 2, 2, 3, 1, 0, 1, 0, 3, 3, 3, 3, 1, 2, 2, 1, 2, 0, 3, 0, 2, 3, 2, 0, 3, 1, 3, 0, 3, 3, 1, 1, 3, 1, 1, 1, 1, 2, 0, 2, 0, 3, 1, 2, 1, 0, 1, 2, 0, 3, 3, 1, 2, 0, 2, 0, 3, 1, 1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 1, 2, 2, 1, 2, 0, 1, 2, 2, 2, 3, 0, 2, 3, 1, 1, 3, 2, 3, 3, 1, 2, 3, 0, 3, 2, 0, 2, 0, 1, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 1, 1, 0, 3, 3, 0, 2, 0, 0, 1, 2, 0, 0, 3, 1, 3, 3, 1, 2, 0, 2, 3, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 2, 1, 0, 2, 1, 2, 1, 2, 0, 0, 1, 2, 1, 0, 0, 1, 1, 2, 2, 0, 2, 1, 0, 1, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 2, 1, 0, 0, 1, 0, 0], [0, 0, 1, 2, 0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 1, 1, 2, 0, 2, 2, 2, 0, 1, 2], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = min(( int(2.0) + abs(divInt(i0,( in1 + divInt(mod(max(int(9.0), int(4.0)),i1),int(9.0)) ))) ), min(int(7.0), ( divInt(abs(int(3.0)),in1) - int(6.0) ))) == int(3.0)\\nb0 = b1\\nb0 = ( max(int(9.0), abs(divInt(int(7.0),int(9.0)))) \\le max(abs(i0), divInt(min(min(max(res0, int(6.0)), ( i2 * in0 )), abs(max(min(min(( i0 + int(8.0) ), mod(mod(max(res0, ( int(1.0) * i1 )),i0),max(int(9.0), in2))), abs(( abs(divInt(( min(int(0.0), in2) * int(5.0) ),i2)) + abs(max(min(max(int(2.0), divInt(divInt(int(9.0),mod(i2,abs(in0))),( min(( i2 - max(int(4.0), abs(i2)) ), abs(abs(int(1.0)))) * int(1.0) ))), min(int(7.0), int(5.0))), int(8.0))) ))), int(7.0)))),divInt(i2,( res0 - min(int(0.0), ( int(9.0) * i1 )) )))) and ( int(7.0) \\g divInt(res0,min(max(int(9.0), divInt(in1,mod(res0,min(int(8.0), int(0.0))))), int(2.0))) or ( b1 and b0 ) ) )\\ni2 *= mod(int(2.0),int(1.0))\\nloopBreak% = 0\\nwhile in0 \\ge divInt(( in0 + in1 ),int(8.0)):{:\\ni1 -= ( mod(int(4.0),mod(res0,int(6.0))) - ( ( mod(min(res0, ( min(int(4.0), int(6.0)) * min(mod(abs(abs(int(8.0))),divInt(min(i1, min(mod(i2,divInt(in2,int(9.0))), mod(divInt(mod(in2,min(max(abs(in0), in0), in0)),int(1.0)),int(7.0)))),in1)), max(min(res0, ( i1 + in2 )), int(6.0))) )),divInt(in0,res0)) * min(int(0.0), max(min(int(1.0), divInt(i2,( min(int(8.0), int(7.0)) * ( int(2.0) * mod(res0,in1) ) ))), res0)) ) + i2 ) )\\ni2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\ni2 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 10, 10, 2, 8, 51, 51, 4, 7, 3, 11, 4, 7, 0, 0, 55, 5, 204, 51, 52, 24, 31]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1], [6, 7], [1], [2, 0], [], [1, 0], [0], [0], [], [], [6, 2, 2, 0, 1], [], [3, 0, 0, 2, 0, 2, 1, 3, 2, 0, 0, 1], [1, 1, 0], [0, 0], [0], [0, 1]], "fitness": 99, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(res0, i2) \\g divInt(i2,mod(int(6.0),min(( i0 + i1 ), int(7.0)))):{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 1, 0, 0, 5, 0, 12, 3, 2, 1, 2]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 0, 1], [5, 9, 0, 9], [0], [0], [], [1], [0], [], [], [], [], [], [2, 1, 1, 1], [1], [], [], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = mod(int(5.0),int(9.0)) \\l int(09.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 4, 1, 0, 0, 1]}, {"genotype": [[0], [1], [1], [], [1], [1], [6], [], [], [], [], [], [], [], [], [0, 6], [1], [3, 1, 0], [], [1], [0], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += max(int(6.0), res0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0], [], [0], [], [1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 0, 1, 0, 1, 2, 1, 1, 1, 0, 2, 0, 0], [0, 1, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 0, 1, 2, 2, 0, 3, 6, 6, 6, 1, 4, 5, 6, 9, 2, 3, 8, 5, 2, 8, 3, 6, 3, 2, 2, 0, 0, 5, 5, 2, 9, 5, 5, 0, 1, 1, 4, 5, 8, 0, 0, 1, 7, 4, 4, 3, 4, 7, 6, 0, 6, 0, 7, 4, 3, 7, 4, 6, 0, 6, 0], [4, 0, 5, 5, 5, 1], [2, 0, 1, 0], [1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 3, 2, 0], [1], [1, 1, 1], [6, 0, 1, 5, 5, 0, 1, 0, 5, 5, 2, 5, 2, 0, 6, 1, 1, 2, 3, 0, 5, 5, 1, 1, 2, 3, 3, 1, 5, 5, 2, 2, 3, 3, 0, 5, 6, 4, 0, 5, 4, 3, 4, 1, 4, 1, 3, 5, 2, 0, 3, 3, 3, 1, 1, 4, 1, 1, 3, 1, 2, 5, 0], [0, 0, 1, 0, 0, 1, 0, 0], [0, 2, 3, 3, 1, 2, 3, 1, 1, 3, 0, 3, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 1, 3, 0, 3, 3, 0, 3, 1, 1, 1, 0, 1, 2, 2, 3, 3, 3, 0, 3, 2, 2, 0, 2, 3, 2, 2, 0, 2, 0, 1, 1, 2, 2, 3, 1, 2, 3, 1, 2, 0, 3, 1, 0, 0, 3, 1, 2, 0, 3, 2, 1, 1, 3, 3, 3, 2, 0, 2, 0, 1, 2, 0, 2, 3, 0, 3, 0, 0, 0, 2, 0, 2, 1, 3, 2, 0, 1, 3, 2, 3, 2, 3, 2, 3, 2, 2, 2, 2, 0, 1, 3, 3, 0, 3, 3, 1, 3, 1, 0, 0, 1, 1, 2, 3, 2, 0, 1, 2, 3, 0, 0, 1, 1, 1, 3, 3, 0, 1, 3, 3, 3, 1, 3, 2, 1, 3, 0, 1, 2, 2, 1, 3, 1, 1, 1, 0, 2, 2, 1, 1, 0, 0, 2, 0, 1, 0, 2, 2, 2, 3, 0, 2, 3, 1, 1, 0, 3, 2, 1, 2, 3, 2, 0, 0, 1, 1, 3, 1, 0, 0, 1, 2, 1, 1, 3, 3, 0, 3, 3, 1, 1, 1, 1, 0, 3, 3, 0, 1, 1, 1, 0, 2, 1, 3, 2, 0, 2, 1, 1, 1, 1, 1, 2, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 0, 1, 0, 1, 2, 1, 1, 2, 1], [2, 0, 1, 0, 1, 1, 1, 0, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 0, 0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1]], "fitness": 99, "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif res0 \\le ( min(min(int(6.0), ( abs(int(9.0)) * int(0.0) )), max(i0, abs(( i1 + mod(in2,in2) )))) - ( ( i0 + i1 ) - i0 ) ):{:\\nin2 = int(1.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile max(in2, abs(abs(i2))) \\l max(int(2.0), int(2.0)):{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 = int(0.0)\\nb0 = i2 != int(3.0)\\ni0 -= ( ( min(max(min(res0, min(divInt(( i1 - ( abs(divInt(( i1 + mod(i2,int(6.0)) ),int(6.0))) - mod(( max(int(6.0), divInt(min(int(1.0), ( in0 * min(int(4.0), i0) )),in2)) * max(int(5.0), divInt(in2,max(( int(6.0) - int(9.0) ), min(max(abs(mod(i1,( i1 * int(2.0) ))), ( i2 - ( min(in0, min(in0, i1)) * in2 ) )), mod(in2,mod(int(3.0),min(( i2 * int(8.0) ), min(( max(mod(min(( min(( ( divInt(( i2 - int(5.0) ),min(abs(in0), abs(max(int(2.0), max(int(8.0), in0))))) * i0 ) * int(3.0) ), int(6.0)) - divInt(min(divInt(in2,int(3.0)), mod(max(res0, in1),int(2.0))),int(2.0)) ), int(0.0)),min(abs(i0), int(0.0))), abs(min(min(int(5.0), max(mod(int(5.0),max(in2, int(2.0))), ( mod(int(9.0),max(int(5.0), int(5.0))) * int(0.0) ))), in1))) * mod(( int(1.0) + int(1.0) ),in0) ), in1)))))))) ),divInt(i1,int(4.0))) ) ),in1), divInt(( divInt(max(i1, mod(min(int(5.0), int(8.0)),in0)),abs(divInt(int(0.0),( min(( in2 + i2 ), int(0.0)) - int(1.0) )))) + max(int(7.0), i0) ),in0))), int(4.0)), mod(int(4.0),int(3.0))) + min(max(in0, abs(max(int(4.0), int(7.0)))), int(6.0)) ) - int(0.0) )\\nif in0 != max(abs(i1), int(6.0)):{:\\ni1 = int(0.0)\\nin1 = int(7.0)\\ni1 += i1\\nin0 = divInt(int(4.0),max(( i1 - mod(int(3.0),int(7.0)) ), int(4.0)))\\n:}else:{:\\nif int(6.0) != int(0.0):{:\\ni2 = mod(int(6.0),in2)\\n:}else:{:\\nb1 = ( not b0 or int(0.0) \\g i0 )\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 15, 15, 4, 11, 63, 63, 6, 4, 1, 10, 6, 4, 1, 3, 63, 8, 229, 55, 56, 30, 27]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [0, 6], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 0, 1, 3, 7, 1, 6, 3, 6, 9, 0, 5, 0, 9], [], [], [], [], [], [], [], [], [4, 4, 6, 1, 4, 2, 2, 5, 6, 0], [1, 0], [3, 1, 1, 3, 3, 2, 2, 3, 2, 1, 0, 1, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 1, 2, 1, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 0, 0, 2, 1, 0, 2, 3, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 2, 0, 0, 1, 1, 2, 2, 2, 1], [1, 0, 0, 1, 2, 1, 2, 1], [0, 1, 1, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 -= min(int(8.0), int(0.0))\\nin1 = abs(min(( ( min(( int(1.0) + res0 ), int(3.0)) + int(7.0) ) - int(1.0) ), divInt(( i1 * max(in1, max(int(6.0), mod(int(3.0),mod(int(6.0),int(9.0))))) ),abs(mod(mod(( int(0.0) - abs(abs(mod(( int(5.0) * i2 ),i2))) ),( int(0.0) - in2 )),mod(max(res0, i0),int(9.0)))))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 46, 14, 10, 8, 7]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [1, 1], [8, 5], [], [], [], [], [], [], [], [], [6, 3, 4], [1, 1], [3, 1, 1, 0], [], [1], [2, 0], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= max(int(8.0), int(5.0))\\nin0 += in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 4, 0, 1, 2, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [3], [], [], [], [], [], [], [], [], [5, 2, 3], [0], [2, 0, 2, 1, 0], [1, 1], [], [], [1, 0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = mod(i2,divInt(int(3.0),in0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 2, 0, 0, 2]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 0, 0, 9, 5, 1, 8, 3, 5, 3, 9], [1], [1, 2, 2], [], [1, 0], [0], [0], [], [], [6, 3, 6, 3, 6, 1, 5, 3, 6, 3, 0, 2], [], [2, 3, 0, 2, 1, 3, 3, 1, 1, 2, 3, 1, 3, 2, 1, 2, 3, 2, 1, 3, 0, 0, 1, 2, 0, 0, 1, 3, 2, 2, 2, 0, 2, 0, 2, 1, 3, 0, 0, 2, 1, 1, 3, 0, 3, 2, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [2, 1, 1, 0, 2, 0, 0, 1, 2, 1, 0], [1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( abs(res0) - divInt(int(3.0),max(max(int(2.0), int(0.0)), ( min(int(0.0), abs(mod(int(9.0),( min(mod(int(5.0),min(in0, res0)), int(1.0)) * ( in0 + res0 ) )))) + int(8.0) ))) ) \\g max(divInt(mod(mod(i1,mod(in2,mod(int(3.0),abs(in0)))),res0),( int(5.0) - int(3.0) )), max(in0, min(divInt(int(9.0),i0), i2)))\\nb2 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 12, 12, 1, 3, 0, 2, 1, 1, 0, 0, 12, 0, 49, 14, 11, 5, 9]}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 2, 0], [0, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 2, 9, 9, 2, 6, 0, 2, 7, 5, 2], [1, 3], [2, 1], [], [1, 1, 0], [0, 0], [0], [], [1], [0, 5, 4, 3, 1, 4, 1, 3, 1, 6, 1, 0, 6, 0, 2, 3], [0], [2, 0, 1, 2, 2, 0, 1, 3, 3, 1, 1, 1, 3, 2, 3, 3, 2, 2, 0, 2, 1, 0, 0, 0, 2, 2, 3, 0, 0, 3, 3, 3, 2, 1, 3, 1, 1, 0, 2, 0, 2, 2, 3, 0, 3, 3, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [2, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0], [0, 2, 2, 2, 2, 2, 0, 2, 2], [1, 1, 1, 0]], "fitness": 99, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif mod(i0,int(0.0)) \\g ( ( in2 + int(4.0) ) * abs(abs(int(2.0))) ):{:\\nb2 = int(9.0) \\ge int(9.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile b1:{:\\nin1 = abs(( min(min(( ( in0 * ( int(2.0) * i1 ) ) * in1 ), i1), mod(mod(max(in0, i1),abs(min(min(( int(6.0) * min(int(0.0), int(2.0)) ), res0), divInt(i1,( ( min(i0, max(min(int(7.0), res0), i0)) + i2 ) * int(5.0) ))))),int(2.0))) * in0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 12, 12, 2, 2, 0, 3, 2, 1, 0, 1, 16, 1, 53, 13, 13, 9, 4]}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 0, 0], [0, 0, 1, 0], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 6, 6, 6, 9, 5, 6, 7, 5, 2, 1, 5, 3, 2, 1, 1, 3, 7, 0, 4, 6, 5, 1, 7, 9, 5, 4, 4, 6, 7, 8, 3, 7, 6, 9, 6, 7, 2, 9, 8, 1], [2, 3, 0], [2, 0, 2], [], [1, 0, 1, 0, 1, 0], [0, 0, 0], [0, 1, 1], [1, 1], [0, 0, 0], [5, 0, 3, 6, 0, 1, 5, 3, 2, 3, 4, 1, 5, 5, 6, 1, 0, 6, 3, 5, 4, 0, 4, 4, 2, 1, 3, 1, 2, 4, 5, 5, 0, 1, 6, 2, 6, 3], [0], [0, 1, 1, 0, 1, 2, 1, 3, 2, 2, 0, 1, 2, 2, 2, 0, 3, 0, 0, 1, 2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 0, 3, 2, 3, 0, 3, 1, 2, 2, 3, 2, 3, 1, 1, 0, 2, 3, 3, 1, 2, 0, 3, 1, 0, 3, 3, 3, 0, 3, 2, 3, 2, 1, 2, 3, 1, 2, 0, 3, 2, 1, 3, 0, 0, 1, 3, 2, 2, 2, 0, 3, 2, 2, 1, 2, 2, 3, 2, 3, 0, 0, 0, 2, 1, 3, 1, 1, 3, 3, 0, 0, 0, 1, 3, 1, 2, 0, 1, 1, 3, 1, 2, 2, 1, 0, 3, 0, 1, 1, 2, 3, 3, 0, 2, 3, 1, 3, 2, 3, 3, 1, 0, 0, 1, 0, 0, 1, 3, 1, 3, 2, 1, 1, 1, 3, 2, 3, 1, 1, 2, 1, 3, 1, 3, 3, 0, 0, 3, 0, 0, 3, 0, 2, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 2, 0, 2, 2, 2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 0, 0, 1, 2, 1, 0, 0, 1, 0, 1, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2], [0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif in2 == int(5.0):{:\\nif b2:{:\\ni0 = int(2.0)\\n:}\\n:}\\nloopBreak% = 0\\nwhile in0 \\ge int(6.0):{:\\nif False:{:\\nb0 = divInt(int(6.0),min(divInt(( res0 + int(6.0) ),mod(( ( i0 * min(i1, in2) ) * int(9.0) ),( max(in0, int(5.0)) * int(6.0) ))), ( ( mod(( ( i2 * min(( max(in0, abs(int(7.0))) * divInt(( min(mod(abs(int(5.0)),int(2.0)), in1) - ( abs(abs(int(1.0))) * ( i1 - abs(int(5.0)) ) ) ),in2) ), max(abs(max(in2, min(( min(divInt(int(3.0),divInt(abs(int(2.0)),( res0 + abs(mod(int(1.0),max(i1, i0))) ))), int(1.0)) * abs(( ( ( res0 + min(( ( int(3.0) + ( divInt(min(divInt(max(in0, in2),in1), divInt(int(7.0),abs(int(0.0)))),int(4.0)) + max(min(i0, in1), in1) ) ) + int(6.0) ), min(int(5.0), divInt(i2,int(1.0)))) ) - int(7.0) ) + max(int(9.0), ( mod(int(5.0),i1) + min(in0, int(4.0)) )) )) ), int(4.0)))), divInt(max(abs(i1), ( min(int(6.0), abs(( min(min(int(7.0), i2), in1) + int(8.0) ))) * in2 )),in2))) ) + int(3.0) ),min(int(7.0), min(mod(int(6.0),int(9.0)), int(6.0)))) + max(( max(int(7.0), int(2.0)) * mod(int(9.0),max(int(8.0), max(abs(i0), i1))) ), max(res0, i2)) ) + abs(res0) ))) \\l divInt(int(1.0),in0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 42, 42, 3, 3, 0, 6, 3, 3, 2, 3, 38, 1, 165, 42, 44, 24, 18]}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 7, 3, 2, 8, 7, 2, 9, 5, 1, 9, 9, 9, 1, 2, 4, 4, 5, 3, 1, 4, 4], [0, 3], [1, 2], [], [0, 0, 0, 1, 1], [0, 0], [1, 2, 2], [0], [], [0, 2, 6, 6, 4, 4, 3, 4, 0, 0, 4, 5, 1, 0, 4, 6, 3, 6, 4, 4, 3, 5], [], [3, 1, 2, 0, 1, 0, 2, 3, 2, 0, 3, 2, 1, 3, 1, 1, 0, 2, 3, 3, 2, 0, 0, 3, 2, 2, 2, 3, 1, 1, 0, 0, 2, 0, 1, 3, 0, 2, 2, 2, 2, 2, 2, 2, 3, 0, 1, 2, 2, 1, 2, 3, 1, 0, 0, 0, 0, 2, 1, 3, 1, 2, 2, 0, 2, 1, 2, 0, 3, 1, 1, 2, 0, 3, 0, 0, 1, 1, 0, 3, 0, 2, 2, 1, 1, 1, 2, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 0, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 1, 1, 2, 0, 0, 1, 2, 2, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile True:{:\\nb1 = not not max(int(2.0), mod(i0,int(6.0))) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( max(( res0 - max(( int(7.0) * max(int(3.0), int(2.0)) ), res0) ), ( abs(abs(divInt(in1,in1))) * min(mod(( ( min(int(8.0), int(7.0)) * in0 ) * in1 ),( i0 * int(2.0) )), max(i0, ( divInt(mod(( divInt(( ( max(in1, int(9.0)) - mod(mod(int(5.0),divInt(min(int(1.0), in2),i1)),i0) ) - in1 ),mod(int(9.0),max(int(9.0), mod(( res0 * divInt(int(9.0),divInt(in0,max(int(1.0), int(2.0)))) ),mod(res0,abs(in1)))))) + in1 ),int(4.0)),int(4.0)) + in0 ))) )) - max(in2, ( ( int(5.0) * int(3.0) ) * int(1.0) )) ) \\ge ( int(4.0) - int(4.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 23, 23, 2, 2, 0, 5, 2, 3, 1, 0, 22, 0, 89, 29, 15, 15, 14]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 1, 2, 0, 2, 0], [0, 0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 2, 1, 0, 0, 9, 6, 3], [3, 4, 3], [2, 0, 0], [], [0, 1, 0, 0, 1, 1], [0, 0, 0], [2, 1, 0], [1], [1, 0], [3, 3, 4, 1, 6, 5, 3, 5, 1, 2, 6, 3, 6, 5, 6, 2], [0, 0, 1], [0, 2, 1, 3, 3, 0, 1, 2, 3, 1, 2, 1, 0, 3, 2, 2, 3, 0, 1, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 0, 0, 1, 2, 0, 2, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 2, 2], [2, 0, 1, 2, 1, 2, 2], [0, 0, 0, 0]], "fitness": 99, "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = in0\\nif not divInt(int(8.0),max(max(in1, int(8.0)), ( max(int(2.0), ( int(1.0) * i1 )) + abs(divInt(( abs(res0) - int(0.0) ),( in2 * ( in0 - int(0.0) ) ))) ))) \\ge int(9.0):{:\\nin2 = i1\\nb2 = False\\n:}else:{:\\nif b0:{:\\nb0 = i2 \\le divInt(int(6.0),res0)\\n:}\\n:}\\nloopBreak% = 0\\nwhile in0 \\ge int(3.0):{:\\nres0 *= ( in2 * divInt(res0,i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 9, 9, 3, 3, 0, 6, 3, 3, 1, 2, 16, 3, 37, 10, 5, 7, 4]}, {"genotype": [[0], [1], [0], [], [0], [], [], [], [1], [], [0, 0], [], [2, 1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 1, 1, 1], [1], [0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 7, 1, 3, 8, 9, 6, 5, 0], [3, 3], [1, 2, 2], [], [0, 0, 1, 1], [0, 0], [0, 2], [], [], [1, 1, 3, 2, 5, 2, 3, 2, 0, 4, 1, 4, 5, 5, 5, 3, 1, 2], [1, 0], [3, 2, 0, 1, 0, 3, 3, 3, 0, 3, 3, 3, 2, 0, 2, 2, 1, 1, 3, 1, 0, 3, 1, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 3, 0, 3, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 1, 1, 2, 0, 1, 0, 1, 2, 1, 0, 1, 2], [0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 1, 0]], "fitness": 99, "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = not abs(( i1 + int(2.0) )) \\ge i1\\nin0 *= max(max(abs(i2), min(max(min(divInt(in2,( divInt(int(2.0),int(7.0)) * max(int(1.0), i2) )), abs(int(3.0))), divInt(int(8.0),( max(( ( ( in0 * i2 ) + int(9.0) ) + int(6.0) ), min(mod(divInt(i0,in1),i1), max(in1, abs(int(5.0))))) - int(0.0) ))), in2)), in2)\\nb2 = in2 \\ge in0\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 10, 10, 2, 3, 0, 4, 2, 2, 0, 0, 18, 2, 50, 11, 13, 7, 5]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 7, 7, 6, 6, 4, 3, 8, 5, 9, 2, 4, 4, 4, 7, 1, 2, 7, 3, 9, 1, 6, 9, 8, 0, 1, 7, 3, 9, 0, 7, 8, 6, 0, 7, 4, 6, 0, 0, 6, 6, 2, 2], [2], [2], [], [0, 1], [0], [2], [], [], [0, 1, 4, 3, 5, 3, 4, 4, 5, 3, 2, 6, 3, 2, 6, 2, 1, 2, 3, 1, 3, 3, 6, 2, 0, 1, 3, 0, 0, 4, 6, 6, 5, 4, 0, 3, 2], [1, 0], [2, 3, 0, 3, 1, 1, 2, 2, 2, 0, 0, 3, 3, 3, 1, 2, 1, 3, 0, 0, 3, 1, 2, 3, 2, 2, 0, 2, 0, 1, 1, 1, 3, 3, 2, 3, 3, 2, 1, 2, 1, 0, 0, 3, 2, 2, 1, 2, 2, 2, 0, 1, 0, 2, 2, 1, 1, 3, 0, 3, 3, 3, 1, 1, 2, 0, 1, 1, 2, 2, 3, 3, 0, 3, 2, 2, 3, 3, 2, 2, 0, 3, 1, 1, 2, 1, 0, 2, 1, 0, 2, 3, 1, 2, 0, 3, 3, 2, 3, 2, 1, 1, 2, 2, 1, 1, 2, 3, 1, 3, 3, 2, 3, 0, 0, 2, 3, 3, 1, 3, 2, 3, 1, 3, 1, 1, 2, 3, 1, 0, 0, 1, 2, 1, 1, 3, 0, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 0, 0, 3, 0, 0, 0, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 2, 0, 3, 2, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 2, 1, 0, 0, 1, 0, 1, 0, 1, 2, 1, 0, 2, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += ( min(i1, min(int(8.0), int(7.0))) - divInt(divInt(mod(in1,in0),abs(abs(abs(int(7.0))))),( int(7.0) - abs(in2) )) )\\nb2 = not in0 == abs(int(6.0))\\nin1 = divInt(max(( ( in1 - mod(in2,int(6.0)) ) + int(4.0) ), int(3.0)),abs(abs(( max(min(divInt(int(8.0),( int(5.0) - in0 )), i2), max(mod(divInt(int(9.0),divInt(divInt(( res0 * int(2.0) ),in0),mod(( int(4.0) - int(4.0) ),max(i2, abs(min(max(int(4.0), int(7.0)), mod(res0,int(1.0)))))))),int(2.0)), ( divInt(min(min(i2, abs(mod(divInt(min(abs(( divInt(i1,abs(int(7.0))) + int(3.0) )), divInt(int(9.0),i2)),divInt(int(1.0),in0)),( abs(int(6.0)) + divInt(i1,min(abs(mod(abs(divInt(int(9.0),int(8.0))),divInt(divInt(int(0.0),int(1.0)),mod(max(int(7.0), abs(abs(( abs(in0) - in0 )))),mod(abs(min(int(3.0), min(( min(int(9.0), max(int(0.0), int(7.0))) + ( max(int(8.0), res0) - i2 ) ), int(6.0)))),mod(int(0.0),int(7.0))))))), max(i0, int(4.0)))) )))), int(6.0)),max(( i1 + ( min(divInt(in0,max(i0, i0)), max(in1, res0)) - res0 ) ), max(mod(in2,in1), ( ( ( int(0.0) * i0 ) - int(0.0) ) + int(6.0) )))) * divInt(in0,min(mod(int(6.0),int(2.0)), int(2.0))) ))) + i2 ))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 44, 44, 1, 1, 0, 2, 1, 1, 0, 0, 37, 2, 172, 49, 44, 20, 30]}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 1, 0], [1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 3, 6, 0, 1, 5, 0, 3, 6], [2], [], [1], [0, 1, 0], [0], [3, 1], [1], [], [1, 4, 2, 6, 5, 3, 6, 4, 3], [1, 0, 1], [3, 0, 3, 3, 3, 3, 0, 3, 1, 1, 3, 3, 1, 0, 2, 0, 0, 1, 2, 1, 3, 1, 0, 3, 1, 1, 1], [1, 0], [1, 1, 1, 2, 1, 0, 1, 1, 2, 0], [0, 0, 2], [0]], "fitness": 99, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( max(i1, max(max(abs(max(in1, min(int(0.0), int(0.0)))), max(max(int(3.0), i2), divInt(res0,in2))), int(6.0))) == ( int(0.0) + abs(int(1.0)) ) or False ):{:\\nin0 += res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = min(int(5.0), int(0.0))\\nin0 *= int(36.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 10, 10, 1, 0, 1, 3, 1, 2, 1, 0, 9, 3, 27, 2, 10, 3, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 0, 2, 1, 1, 2, 2, 2, 1, 1, 1], [1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 3, 7, 7, 8, 6, 4, 2, 3, 1, 7, 8, 4, 5, 1, 8, 4, 0, 0, 0, 5, 4, 3, 8, 6, 0, 7, 1, 5, 5, 6, 9, 4, 7, 3, 3, 1, 1, 4, 7, 8, 5, 9, 7, 3, 2, 5, 9, 7, 2, 3, 7, 6, 0, 4, 0, 2, 4, 5, 2, 0, 4, 5, 1, 9, 3, 1, 8, 0, 5, 3, 1, 1, 9, 3, 1, 9, 9, 5, 5, 9, 2, 4, 8, 6, 6, 0, 5, 5, 8, 3, 7], [0, 5, 3, 4, 1, 2, 2, 4, 3], [1, 1, 0, 0, 2, 0, 2], [0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 3, 0, 2, 1, 2, 2, 3, 3, 0, 0, 3, 0], [1, 1], [1, 0, 0], [0, 5, 1, 1, 3, 6, 3, 3, 1, 2, 1, 0, 5, 1, 6, 3, 1, 5, 4, 4, 0, 0, 2, 5, 3, 5, 0, 1, 1, 2, 1, 1, 3, 0, 2, 0, 4, 2, 3, 5, 1, 4, 6, 0, 4, 3, 3, 1, 3, 5, 4, 6, 3, 0, 3, 6, 2, 0, 5, 2, 5, 5, 6, 2, 4, 0, 6, 2, 5, 4, 4, 3, 0, 1, 5, 5, 1, 3, 3, 4, 3, 3, 5, 5, 0, 4, 5, 4, 0, 3, 2], [1, 0, 0, 1], [2, 1, 0, 3, 2, 2, 2, 0, 2, 1, 3, 0, 0, 2, 3, 1, 0, 0, 2, 2, 2, 0, 0, 1, 3, 1, 2, 1, 2, 0, 1, 3, 2, 2, 2, 1, 1, 0, 2, 3, 0, 2, 2, 3, 3, 2, 3, 0, 2, 0, 1, 1, 2, 3, 1, 1, 3, 1, 1, 2, 2, 1, 1, 3, 1, 0, 2, 0, 3, 3, 3, 0, 0, 1, 0, 1, 1, 2, 0, 2, 1, 3, 1, 2, 0, 2, 0, 3, 2, 1, 1, 2, 2, 1, 3, 2, 1, 1, 0, 0, 2, 0, 2, 0, 3, 1, 1, 1, 0, 0, 1, 3, 1, 3, 3, 1, 1, 2, 0, 0, 3, 2, 3, 0, 2, 1, 2, 1, 1, 1, 1, 3, 2, 3, 2, 0, 2, 3, 3, 1, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 2, 0, 3, 0, 2, 3, 0, 3, 0, 3, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 2, 3, 3, 2, 0, 1, 1, 3, 0, 3, 2, 1, 2, 1, 0, 0, 3, 2, 2, 3, 1, 2, 1, 2, 1, 2, 3, 1, 0, 3, 2, 3, 1, 3, 1, 3, 2, 0, 2, 1, 3, 1, 1, 1, 1, 0, 2, 3, 3, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 2, 0, 0, 1, 2, 3, 0, 0, 2, 0, 2, 1, 1, 1, 3, 0, 0, 1, 0, 3, 0, 1, 2, 3, 2, 0, 3, 1, 2, 0, 3, 1, 2, 2, 1, 0, 1, 2, 0, 2, 2, 2, 3, 0, 0, 3, 2, 2, 3, 2, 2, 1, 1, 1, 3, 0, 3, 3, 0, 2, 2, 3, 3, 0, 2, 0, 0, 0, 3, 0, 1, 2, 0, 2, 3, 2, 1, 2, 2, 0, 2, 3, 2, 0, 0, 0, 1, 0, 0, 2, 3, 1, 0, 1, 0, 3, 1, 2, 1, 2, 2, 3, 1, 3, 3, 1, 1, 0, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 2, 1, 1, 1, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0, 1, 1, 2, 1, 0, 2, 1, 0, 1, 2, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0, 2, 0, 2, 2, 1, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 2, 1, 2, 0, 2, 1, 1, 1, 0, 1, 2], [0, 1, 2, 0, 2, 0, 0, 1, 2, 1, 0, 0, 2, 1, 1, 0, 2, 1, 2, 1, 0, 2, 0, 2, 0, 2, 1, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 2, 1, 0, 0, 2, 1, 2, 2, 1, 0, 2, 2, 2, 1, 2, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 101, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nif ( ( divInt(int(5.0),i0) \\l max(mod(( ( in2 + mod(int(6.0),max(i1, i1)) ) - ( min(int(3.0), in0) * res0 ) ),mod(mod(divInt(in0,in0),int(7.0)),abs(int(7.0)))), ( int(8.0) + mod(i1,int(6.0)) )) and max(divInt(( divInt(int(4.0),int(2.0)) * i2 ),mod(max(i1, ( ( max(min(( abs(i0) + mod(in2,int(3.0)) ), int(1.0)), mod(abs(int(7.0)),int(8.0))) + min(int(4.0), int(5.0)) ) - ( divInt(int(1.0),int(8.0)) * abs(int(4.0)) ) )),i1)), ( res0 - min(min(abs(in0), i1), int(0.0)) )) != in2 ) and ( b1 or not False ) ):{:\\nb1 = not int(0.0) \\ge int(0.0)\\n:}else:{:\\nin1 += ( in1 + ( int(5.0) * min(int(4.0), ( i0 - mod(i0,abs(( int(3.0) - int(8.0) ))) )) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif divInt(( int(6.0) + max(( int(0.0) * int(7.0) ), i2) ),in2) \\le mod(in0,mod(in2,abs(int(1.0)))):{:\\ni0 = int(5.0)\\n:}\\nb0 = not ( int(5.0) \\g i1 or i1 == int(6.0) )\\nif min(int(9.0), min(min(int(4.0), int(7.0)), ( i2 - i1 ))) == max(divInt(max(i1, ( int(3.0) * ( int(3.0) - int(1.0) ) )),int(1.0)), int(4.0)):{:\\nloopBreak% = 0\\nwhile abs(divInt(max(mod(in0,divInt(min(abs(int(7.0)), max(min(int(8.0), i0), max(abs(abs(abs(abs(( ( i2 + min(i0, mod(max(in1, max(i2, max(in0, divInt(divInt(in2,( mod(i1,in1) * divInt(( mod(int(5.0),mod(( int(9.0) + int(7.0) ),int(3.0))) * ( divInt(mod(divInt(int(2.0),mod(mod(res0,divInt(int(5.0),divInt(min(max(( i0 + int(9.0) ), int(7.0)), max(in1, max(( int(2.0) * ( int(3.0) - in0 ) ), in0))),max(mod(( min(int(7.0), ( int(6.0) - mod(int(0.0),( abs(int(4.0)) + i1 )) )) + max(divInt(max(int(0.0), max(int(2.0), max(( in0 - ( int(4.0) - min(int(5.0), int(2.0)) ) ), int(0.0)))),int(4.0)), in2) ),divInt(abs(min(in1, res0)),in0)), i0)))),in0)),abs(abs(int(5.0)))),int(1.0)) + int(9.0) ) ),int(3.0)) )),int(1.0))))),mod(res0,i2))) ) - int(8.0) ))))), divInt(max(i0, in2),divInt(i2,mod(int(0.0),int(5.0))))))),int(3.0))), abs(in2)),in2)) \\le int(1.0):{:\\nloopBreak% = 0\\nwhile ( b0 or b2 ):{:\\nb0 = ( b2 or res0 \\ge abs(i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 = int(19.0)\\ni0 += ( min(mod(res0,max(int(3.0), ( i2 * max(int(1.0), divInt(( int(9.0) - in2 ),int(9.0))) ))), ( in1 * ( ( mod(min(in1, in0),min(( ( abs(( ( int(5.0) - int(5.0) ) + int(9.0) )) + max(i0, min(abs(i1), ( divInt(max(abs(in2), ( in2 * i1 )),in0) - min(in0, int(2.0)) ))) ) * mod(in1,divInt(abs(( int(4.0) * ( mod(in0,( max(( in0 - in2 ), in2) + int(8.0) )) * i0 ) )),in1)) ), ( max(int(6.0), in2) * int(6.0) ))) * in1 ) - max(int(0.0), ( int(5.0) * mod(mod(min(int(5.0), max(abs(int(8.0)), int(3.0))),i0),divInt(in0,i2)) )) ) )) - int(7.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 6, 7, 93, 93, 9, 7, 6, 24, 9, 15, 2, 3, 91, 4, 360, 104, 77, 53, 53]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [4, 3], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1], [1], [], [], [], [], [], [], [], [], [2], [1], [1], [], [], [0], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [7, 3], [1], [1], [], [1], [0], [], [], [], [3, 3, 0, 2], [], [3, 0, 2, 1, 3, 2, 1, 3, 0, 0, 0], [0, 1], [0, 2, 1], [2], [0]], "fitness": 99, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = min(in0, ( int(7.0) * abs(divInt(int(3.0),max(in0, i0))) )) \\g i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 11, 2, 3, 1, 1]}, {"genotype": [[0], [1], [1], [], [0], [1], [1], [3], [2], [], [1], [0], [], [], [], [3, 2, 5, 3], [], [2, 0, 0, 3, 2, 0, 1, 0], [1, 0], [0], [0], [1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(in0,i2) \\ge min(( in2 + int(1.0) ), in0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 4, 0, 8, 2, 1, 1, 1]}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [2, 2, 0, 2, 1, 0, 1, 1, 2, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 7, 5, 2, 7, 7, 9, 7, 1, 9, 7, 3, 8, 7, 2, 1, 6, 4, 1, 5, 4, 2, 6, 0, 1, 0, 2, 3, 5, 0, 9, 6, 9, 0, 4, 4, 6, 5, 2, 5, 5, 5, 6, 7, 1, 2, 9, 3, 5, 6, 3, 0, 8, 2, 1, 6, 6], [2, 1, 3, 0, 5, 1, 3, 2, 4, 0], [1, 1, 0, 2, 0, 2, 1], [0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 2, 3, 0, 3, 2, 2, 1, 2, 3, 3, 2, 0, 2, 2], [0, 1], [1, 0, 1], [6, 3, 1, 0, 2, 4, 0, 1, 1, 0, 0, 6, 3, 5, 5, 2, 5, 4, 2, 3, 1, 4, 6, 1, 5, 0, 1, 5, 3, 2, 1, 1, 6, 4, 3, 6, 4, 6, 3, 0, 5, 5, 0, 0, 0, 1, 3, 1, 0, 0, 1, 2, 3, 2, 6, 2, 2, 3, 0, 6, 1, 4, 2, 2, 3, 3, 5, 6, 5, 2, 2, 4, 6, 1, 5], [1, 1, 1], [1, 0, 0, 3, 0, 0, 0, 0, 0, 3, 2, 3, 3, 1, 2, 2, 2, 0, 0, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 1, 2, 0, 3, 2, 3, 0, 0, 3, 3, 3, 1, 1, 1, 0, 0, 3, 0, 3, 3, 2, 1, 0, 2, 0, 0, 0, 3, 0, 2, 1, 2, 1, 2, 0, 3, 3, 0, 2, 0, 1, 0, 0, 2, 1, 1, 3, 2, 2, 2, 2, 3, 1, 0, 2, 2, 3, 0, 0, 2, 1, 2, 0, 2, 3, 0, 3, 2, 3, 3, 3, 3, 0, 2, 1, 3, 1, 1, 0, 3, 2, 2, 1, 1, 2, 3, 0, 2, 0, 2, 2, 3, 2, 0, 0, 1, 2, 2, 0, 2, 3, 3, 2, 2, 1, 2, 2, 2, 2, 3, 3, 2, 0, 0, 1, 1, 1, 3, 1, 1, 0, 0, 2, 2, 1, 3, 1, 1, 2, 1, 1, 0, 0, 1, 2, 2, 1, 1, 3, 0, 3, 1, 1, 0, 0, 0, 2, 2, 3, 1, 1, 1, 0, 3, 3, 3, 1, 3, 0, 3, 2, 2, 3, 1, 0, 1, 1, 2, 1, 0, 0, 2, 2, 1, 0, 0, 0, 2, 2, 2, 3, 1, 2, 2, 1, 2, 0, 0, 1, 1, 0, 0, 2, 0, 3, 0, 1, 2, 0, 2, 1, 2, 0, 2, 1, 3, 0, 0, 2, 2, 2, 2, 2, 0, 0, 3, 1, 0, 2, 2, 0, 0, 0, 0, 2, 1, 1, 3, 1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 2, 1, 2, 0, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 2, 1, 1, 1, 0, 2, 1, 2, 2, 2, 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0, 2, 1, 1, 1, 0, 2], [1, 0, 1, 2, 0, 2, 2, 2, 0, 1, 1, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0]], "fitness": 99, "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif True:{:\\nif int(7.0) == res0:{:\\nb1 = ( in0 \\g max(i1, i0) and not ( b1 or i2 \\ge in1 ) )\\n:}\\nif ( i0 \\l abs(( max(abs(int(0.0)), mod(divInt(( i1 - i1 ),mod(int(7.0),min(max(mod(( int(5.0) + abs(min(divInt(int(2.0),( i0 - abs(( max(i0, res0) * abs(abs(max(int(7.0), int(7.0)))) )) )), int(9.0))) ),in0), in2), min(in2, abs(abs(divInt(int(7.0),i2))))))),divInt(in2,in1))) + i2 )) or not not False ):{:\\nin0 *= max(i1, divInt(int(1.0),divInt(int(9.0),divInt(in1,max(max(res0, mod(i1,int(7.0))), in2)))))\\n:}else:{:\\ni0 *= i1\\n:}\\n:}else:{:\\nb0 = not ( divInt(int(3.0),int(8.0)) != min(( ( ( divInt(abs(int(7.0)),in2) * divInt(mod(max(in0, i2),( int(2.0) + mod(i1,( abs(i1) - abs(divInt(abs(max(min(max(res0, ( int(1.0) - max(int(6.0), int(4.0)) )), in1), abs(divInt(mod(int(1.0),int(5.0)),mod(min(in0, ( res0 * ( divInt(abs(mod(in1,res0)),int(4.0)) * mod(( in0 * ( abs(min(divInt(mod(int(2.0),( ( mod(divInt(max(min(( i0 * in2 ), int(6.0)), int(0.0)),int(1.0)),min(int(0.0), int(2.0))) - in2 ) - i0 )),mod(( int(3.0) + max(int(5.0), int(0.0)) ),( int(9.0) + int(6.0) ))), i0)) + i0 ) ),int(9.0)) ) )),mod(mod(int(0.0),int(4.0)),max(i1, max(int(4.0), int(6.0))))))))),in0)) )) )),i1) ) + i0 ) - ( ( max(int(5.0), int(2.0)) - int(5.0) ) - i0 ) ), abs(abs(abs(int(5.0))))) or abs(i1) \\g min(( mod(abs(int(5.0)),i2) - int(6.0) ), int(7.0)) )\\nb2 = ( mod(int(1.0),in0) \\ge i2 or not mod(( int(2.0) * res0 ),i2) == i2 )\\n:}\\nloopBreak% = 0\\nwhile ( mod(( max(int(9.0), divInt(( int(3.0) * ( in0 * i0 ) ),int(5.0))) - int(6.0) ),res0) * i1 ) \\le mod(in1,max(i2, int(3.0))):{:\\nb0 = b2\\ni2 -= ( in0 - ( int(0.0) - divInt(in0,divInt(int(8.0),max(in2, res0))) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not not ( mod(divInt(( divInt(in2,i2) - min(int(2.0), i2) ),divInt(divInt(in1,res0),i1)),in2) + divInt(int(1.0),int(6.0)) ) \\l abs(int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 4, 8, 58, 58, 10, 7, 5, 26, 10, 16, 2, 3, 75, 3, 258, 76, 52, 35, 44]}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0], [1, 1], [1, 1], [1, 1, 1, 1, 1], [5, 8, 4, 5, 3], [4, 3, 5], [], [1], [1, 0, 1, 1], [0, 0, 0], [3], [], [], [4, 1, 4, 5, 3, 2, 4], [0, 1], [0, 3, 1, 0, 1, 0, 1, 1, 3, 2, 3, 1, 0, 0], [1], [1, 2, 2], [2], [0]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile in1 \\le max(int(5.0), i1):{:\\nloopBreak% = 0\\nwhile ( int(8.0) \\ge in1 or int(4.0) != int(5.0) ):{:\\nin2 = abs(divInt(abs(int(3.0)),in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 5, 5, 3, 0, 1, 4, 3, 1, 0, 0, 7, 2, 14, 1, 3, 1, 1]}, {"genotype": [[0], [1], [1], [], [1], [1, 1, 1, 1, 1, 1, 1], [2, 7, 1, 0, 6, 4, 0], [], [], [], [], [], [], [], [], [2, 6, 6, 5, 5, 3, 5, 5], [1], [3, 3, 0, 2, 1, 3, 0, 3, 1, 3, 1, 3, 0, 2, 3, 2, 2, 0, 2, 2, 2, 1, 0, 3, 1, 1, 0, 0, 3, 1], [1, 1, 1, 0, 1, 0, 1], [1, 2, 1, 0, 0, 1, 2, 0, 2], [0, 1, 1], [0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 += max(abs(res0), divInt(int(2.0),max(res0, min(int(7.0), min(int(1.0), max(in2, mod(abs(divInt(( in2 - divInt(( mod(int(0.0),in0) - min(int(6.0), int(4.0)) ),in2) ),in2)),abs(int(0.0)))))))))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 30, 7, 9, 3, 5]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 5, 3, 1, 5, 3, 8, 5, 8, 1, 0, 1, 0, 7, 9, 3, 1, 5, 4, 9], [1, 4], [2, 2, 2], [0, 1], [0, 0, 1, 0, 0, 1], [0, 0], [3, 3, 0, 1], [1], [], [4, 1, 2, 0, 0, 6, 4, 5, 2, 2, 3, 0, 0, 5, 0, 2, 1, 2, 3, 2, 0, 0, 1, 5, 3], [], [2, 1, 0, 3, 2, 1, 2, 0, 2, 2, 2, 0, 0, 2, 1, 0, 2, 0, 3, 0, 3, 2, 0, 1, 3, 2, 0, 2, 0, 3, 2, 1, 0, 3, 1, 0, 2, 3, 2, 2, 0, 1, 3, 3, 0, 3, 2, 2, 2, 0, 3, 3, 1, 1, 3, 1, 0, 1, 2, 1, 1, 2, 1, 1, 3, 2, 3, 2, 1, 2, 3, 3, 1, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 3, 0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 0, 2, 1, 2], [0, 0, 1, 2, 0, 2, 0, 1, 2], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( ( ( int(0.0) + in1 ) \\g abs(mod(int(2.0),( i1 + mod(divInt(mod(i2,i0),mod(int(5.0),i0)),divInt(res0,min(in1, min(( in2 - int(3.0) ), max(( i2 * divInt(i2,min(divInt(int(1.0),in0), min(int(5.0), i0))) ), mod(max(divInt(divInt(i0,int(3.0)),min(min(in2, min(mod(( ( i0 + min(min(int(8.0), int(5.0)), max(int(8.0), i2)) ) * int(1.0) ),divInt(int(0.0),int(1.0))), mod(int(0.0),int(7.0)))), max(( min(( int(9.0) + ( abs(abs(int(3.0))) - i1 ) ), i2) * in0 ), i2))), i0),i0)))))) ))) and b2 ) or False )\\nb2 = int(1.0) \\le min(abs(divInt(i1,in2)), divInt(mod(max(int(5.0), int(4.0)),int(9.0)),abs(in0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 21, 21, 2, 3, 2, 6, 2, 4, 1, 0, 25, 0, 93, 26, 21, 9, 17]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [4, 1, 1, 1], [0, 0], [0, 0], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = i1\\ni1 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1], [1, 1, 7], [4], [0], [], [1], [0], [], [], [], [3, 0, 1, 3, 2], [], [2, 0, 3, 0, 3, 2, 3, 0, 3, 1, 3, 2, 1, 1, 0, 0], [0, 0, 1], [0, 2, 1, 2, 1], [2, 0], [1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( in0 * min(i0, abs(( max(i1, abs(int(1.0))) + max(mod(int(1.0),int(7.0)), in0) ))) ) \\le i2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 16, 3, 5, 2, 1]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 2, 1, 0, 0, 1, 1, 2, 2, 0], [0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 3, 8, 0, 7, 0, 0, 9, 8, 9, 9, 3, 1, 9, 7, 6, 1, 7, 4, 0, 1, 7, 6, 1, 0, 6, 4, 3, 2, 6, 2, 2, 5, 1, 3, 7, 9, 2, 5, 8, 7, 9, 4, 7, 8, 2, 8, 7, 3, 9, 3, 6, 2, 3, 0, 1, 3, 7, 8, 9, 7, 0, 9, 3, 6, 8, 4], [4, 0, 5, 0, 0], [1, 0, 1, 0, 1, 2], [], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 2, 2, 1, 2, 0], [0, 1], [1, 0], [0, 3, 3, 3, 1, 3, 1, 1, 6, 2, 1, 6, 5, 3, 3, 5, 6, 3, 6, 1, 6, 1, 5, 2, 5, 5, 1, 1, 4, 5, 6, 1, 0, 3, 2, 0, 1, 2, 4, 5, 1, 1, 5, 6, 0, 3, 2, 5, 1, 4, 0, 4, 4, 6, 3, 6, 6, 0, 6, 4, 0, 2, 6, 2, 1, 0, 1, 1, 3, 0], [0, 0, 1, 0], [1, 0, 1, 2, 0, 2, 3, 2, 0, 3, 1, 3, 2, 2, 2, 2, 1, 0, 0, 2, 2, 0, 3, 1, 1, 0, 3, 2, 3, 1, 0, 0, 1, 3, 2, 0, 2, 1, 3, 2, 1, 3, 0, 0, 2, 1, 3, 2, 1, 1, 0, 2, 2, 3, 3, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 2, 0, 0, 3, 2, 3, 2, 2, 2, 3, 1, 2, 0, 2, 3, 2, 0, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 2, 3, 0, 1, 3, 0, 1, 3, 3, 0, 2, 0, 3, 1, 2, 3, 2, 2, 3, 0, 2, 0, 2, 2, 3, 1, 3, 0, 3, 3, 3, 0, 3, 2, 3, 1, 2, 1, 2, 0, 1, 1, 3, 1, 0, 1, 1, 2, 1, 3, 0, 3, 0, 3, 1, 2, 3, 1, 2, 0, 1, 2, 3, 3, 1, 2, 2, 1, 3, 3, 2, 2, 2, 0, 0, 1, 3, 1, 1, 2, 1, 3, 0, 1, 0, 2, 1, 3, 2, 0, 2, 3, 2, 0, 0, 0, 2, 0, 2, 1, 1, 1, 1, 2, 1, 2, 0, 3, 3, 3, 0, 3, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 2, 2, 0, 2, 1, 2, 0, 3, 3, 1, 2, 1, 1, 0, 1, 3, 2, 1, 3, 3, 2, 2, 1, 0, 3, 2, 3, 3, 3, 2, 3, 3, 1, 3, 1, 0, 3, 3, 1, 0, 3, 2, 2, 3, 0, 3, 3, 3, 1, 1, 1, 1, 0, 3, 2, 1, 0, 1, 1, 1, 1, 1, 2, 0, 3, 1, 2, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 2, 1, 0, 2, 1, 2, 0, 1, 0, 1, 1, 2, 0, 2, 2, 1, 2, 2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 2, 2, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 2, 2, 0, 2, 2, 1, 2, 0, 1, 2, 0, 1, 0, 0, 0, 1, 1, 2, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 0, 1, 2, 0, 2, 1, 2], [2, 1, 0, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 2, 2, 2, 1, 0, 2, 2, 2, 2, 0, 0, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1]], "fitness": 99, "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = True\\ni0 = int(0.0)\\nin0 = in0\\nif int(5.0) \\le divInt(in0,divInt(max(mod(i1,min(int(3.0), abs(divInt(divInt(divInt(divInt(int(8.0),in0),i1),( ( i1 * max(int(0.0), int(7.0)) ) - res0 )),min(( abs(int(0.0)) + i2 ), i1))))), int(0.0)),max(mod(res0,( int(9.0) * abs(mod(int(8.0),min(in2, in0))) )), divInt(int(9.0),max(( int(9.0) * int(3.0) ), in0))))):{:\\nin2 += ( divInt(min(max(res0, in0), int(1.0)),res0) * i1 )\\nb0 = not not False\\n:}else:{:\\nb1 = max(mod(res0,int(9.0)), i1) \\l ( in2 + i2 )\\nb0 = abs(mod(min(( ( divInt(abs(int(7.0)),mod(in2,( abs(( in2 + max(abs(int(6.0)), abs(abs(max(min(max(abs(max(( abs(i1) + int(1.0) ), max(i1, int(7.0)))), min(abs(in1), divInt(in2,abs(int(4.0))))), divInt(max(( ( max(res0, divInt(i1,( ( abs(int(0.0)) - max(i0, min(abs(abs(in0)), min(divInt(min(int(1.0), ( int(7.0) + ( i2 - int(6.0) ) )),int(1.0)), abs(int(0.0))))) ) * i0 ))) * int(6.0) ) * int(4.0) ), ( int(3.0) - abs(i1) )),abs(i2))), min(int(2.0), divInt(abs(int(6.0)),mod(in1,int(2.0)))))))) )) + mod(abs(max(int(2.0), ( ( int(5.0) * abs(min(( ( divInt(in2,i1) * int(1.0) ) * max(int(3.0), int(7.0)) ), ( int(9.0) * abs(i1) ))) ) + int(2.0) ))),in2) ))) + divInt(int(5.0),min(( res0 * mod(max(divInt(i0,in0), i2),divInt(in2,( int(8.0) - int(7.0) ))) ), int(9.0))) ) * int(4.0) ), ( int(7.0) * ( i1 - min(min(min(in1, max(i0, max(abs(in1), in1))), res0), min(in0, res0)) ) )),abs(( mod(res0,divInt(int(8.0),( i0 - abs(min(int(2.0), divInt(int(8.0),int(7.0)))) ))) * res0 )))) != int(3.0)\\n:}\\nb1 = not min(( int(9.0) * max(min(( ( int(3.0) - in1 ) * max(( min(min(max(divInt(min(min(int(6.0), abs(int(2.0))), i0),abs(abs(int(3.0)))), i2), min(divInt(( max(res0, abs(min(abs(int(0.0)), int(1.0)))) * int(3.0) ),int(7.0)), i2)), max(( int(8.0) - i1 ), int(9.0))) + int(7.0) ), int(0.0)) ), int(9.0)), int(3.0)) ), mod(i0,abs(int(6.0)))) \\l mod(i1,i1)\\nloopBreak% = 0\\nwhile b2:{:\\nif in0 \\l int(8.0):{:\\ni0 = int(4.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 3, 9, 68, 68, 5, 6, 0, 11, 5, 6, 2, 2, 70, 4, 286, 70, 82, 37, 34]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [2, 0, 2, 1, 0, 1], [1, 0], [0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 1, 6, 9, 0, 4, 2, 8, 4, 1, 5, 2, 1, 6, 9, 3, 3, 5, 4, 2, 2, 5, 3, 2, 2, 8, 1, 2, 3, 2, 9, 8, 9, 7, 2, 8, 3, 2, 7, 7, 9, 7, 9, 2, 8, 7, 8, 8, 7, 3, 6, 7, 7, 2, 4, 2, 1, 8, 7, 9, 9, 1, 3, 4, 6, 4, 1, 5, 2, 5, 0], [2, 0], [2, 0], [], [1, 1, 0], [0, 0], [0], [], [1], [5, 6, 1, 1, 4, 2, 6, 6, 2, 4, 6, 5, 6, 6, 5, 4, 3, 6, 2, 5, 2, 1, 4, 5, 6, 5, 0, 5, 3, 3, 2, 2, 4, 3, 5, 4, 1, 4, 5, 0, 3, 3, 3, 6, 4, 2, 0, 6, 1, 2, 6, 5, 4, 0, 1, 0, 4, 5, 4, 1, 0, 2, 3, 2, 1, 1, 2, 0, 0, 4, 4, 6, 0], [0, 1, 1], [3, 1, 2, 2, 3, 2, 2, 2, 2, 1, 2, 3, 0, 0, 1, 0, 0, 1, 0, 1, 3, 3, 2, 2, 2, 3, 3, 2, 1, 0, 0, 2, 1, 1, 3, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1, 0, 3, 2, 0, 3, 2, 0, 1, 3, 2, 0, 3, 2, 0, 2, 3, 3, 1, 2, 3, 2, 3, 0, 0, 1, 2, 0, 1, 3, 1, 3, 1, 2, 2, 1, 0, 1, 2, 0, 1, 2, 0, 1, 3, 1, 2, 0, 3, 2, 1, 1, 2, 2, 3, 2, 3, 2, 1, 2, 2, 3, 1, 3, 0, 1, 3, 2, 3, 3, 3, 2, 0, 3, 0, 0, 3, 3, 2, 3, 2, 1, 3, 3, 2, 3, 3, 0, 0, 0, 0, 2, 0, 2, 1, 3, 0, 3, 3, 3, 2, 3, 1, 3, 3, 2, 0, 2, 3, 3, 1, 1, 3, 3, 0, 0, 1, 3, 1, 2, 0, 1, 2, 2, 2, 1, 3, 1, 3, 0, 1, 1, 0, 1, 1, 0, 0, 2, 0, 2, 2, 0, 2, 0, 1, 0, 2, 0, 1, 1, 3, 0, 1, 1, 2, 3, 3, 1, 1, 0, 3, 3, 0, 3, 3, 1, 2, 1, 3, 3, 2, 0, 3, 2, 1, 3, 3, 3, 1, 2, 3, 3, 2, 2, 2, 1, 2, 3, 3, 0, 3, 3, 1, 0, 3, 0, 1, 0, 3, 0, 0, 2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 3, 1, 0, 2, 1, 3, 1, 3, 3, 3, 1, 2, 3, 1, 0, 0, 1, 3, 2, 1, 3, 2, 1, 2, 1, 1, 1, 0, 3, 2, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 3, 1, 1, 3, 2, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 0, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1, 0, 2, 2, 2, 1, 0, 1, 2, 0, 2, 0, 1, 1, 2, 1, 0, 2, 2, 2, 1, 2, 1, 2, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 0, 2, 1, 2, 1, 2, 0, 1, 0, 0, 2, 1, 2], [2, 0, 2, 2, 1, 1, 2, 0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 0, 2, 2, 1, 1, 1, 0, 1, 0, 0, 1, 0, 2, 2, 2, 1, 1, 1, 0, 2, 1, 2, 0, 2, 2, 0, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 82, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile min(int(2.0), ( ( max(mod(( ( ( int(3.0) * divInt(max(in2, res0),int(1.0)) ) + i1 ) * i1 ),int(6.0)), in1) * int(9.0) ) - max(min(divInt(( ( min(min(mod(int(0.0),i2), res0), ( int(4.0) - int(2.0) )) * min(res0, i2) ) + min(max(min(max(max(min(in1, int(8.0)), res0), min(( in2 - min(mod(res0,int(4.0)), abs(( res0 - abs(mod(in2,mod(min(abs(int(1.0)), mod(max(mod(max(in1, in0),int(5.0)), ( res0 - int(2.0) )),abs(int(1.0)))),abs(int(6.0))))) ))) ), ( ( int(9.0) + i2 ) + int(3.0) ))), mod(in2,int(3.0))), mod(i2,int(5.0))), abs(int(4.0))) ),( i1 + max(( int(2.0) - int(2.0) ), divInt(( max(( abs(divInt(int(5.0),divInt(( max(int(3.0), abs(in1)) * int(2.0) ),max(divInt(abs(min(abs(( in2 - abs(res0) )), in2)),max(abs(divInt(abs(( int(2.0) + max(max(( max(abs(i0), in2) * in0 ), in0), ( i2 * ( int(8.0) - max(i2, max(max(min(( min(int(1.0), max(min(( in1 - mod(abs(abs(int(2.0))),int(3.0)) ), abs(max(in0, in2))), int(2.0))) - min(int(9.0), divInt(in1,int(8.0))) ), ( divInt(divInt(int(9.0),max(int(7.0), abs(i1))),int(2.0)) + int(8.0) )), in1), int(3.0))) ) )) )),int(2.0))), in2)), i0)))) - mod(in0,( ( in0 + ( in0 + int(7.0) ) ) - res0 )) ), ( in1 + int(7.0) )) * int(9.0) ),min(i2, int(7.0)))) )), int(9.0)), ( abs(min(int(2.0), int(8.0))) * i0 )) )) == max(max(res0, abs(max(int(7.0), ( int(8.0) * min(abs(( i1 - abs(divInt(int(8.0),abs(max(abs(int(7.0)), divInt(max(abs(( mod(( int(3.0) - ( abs(min(i2, min(min(int(6.0), res0), abs(in2)))) - int(7.0) ) ),in1) + max(i0, i1) )), ( abs(int(7.0)) * mod(min(mod(int(2.0),divInt(min(int(4.0), abs(min(abs(int(2.0)), i0))),( int(1.0) - max(int(8.0), abs(max(abs(int(7.0)), mod(min(int(9.0), in1),in2)))) ))), int(9.0)),max(( int(1.0) * min(mod(int(3.0),( int(4.0) + int(6.0) )), int(4.0)) ), in1)) )),min(( i1 * ( i0 * i2 ) ), ( in0 + abs(i2) ))))))) )), i1) )))), i1):{:\\nb2 = i2 \\l i0\\nif b0:{:\\ni0 = int(1.0)\\n:}else:{:\\nin1 -= mod(divInt(in1,int(5.0)),max(int(2.0), int(5.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 += abs(( int(0.0) + i0 ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 72, 72, 2, 2, 0, 3, 2, 1, 0, 1, 73, 3, 311, 75, 94, 46, 31]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 9, 7, 0, 3, 0, 2, 9, 4, 9, 5, 9, 0, 3, 4, 5, 6, 3, 6], [], [], [], [], [], [], [], [], [2, 3, 1, 3, 5, 2, 0, 3, 6, 3, 2, 6, 2, 6, 0, 2, 3, 5, 6, 6, 6], [1], [3, 2, 3, 0, 3, 2, 3, 0, 0, 3, 3, 2, 3, 2, 2, 2, 1, 0, 3, 1, 3, 2, 3, 0, 3, 2, 2, 3, 0, 1, 0, 0, 3, 3, 2, 3, 1, 1, 1, 2, 1, 1, 0, 1, 2, 1, 3, 1, 0, 3, 2, 0, 1, 0, 1, 3, 1, 3, 2, 1, 2, 1, 3, 3, 0, 2, 3, 3, 2, 0, 1, 3, 0, 2, 1, 2, 0, 2, 0, 3, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 2, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 0, 2, 1, 2, 0, 1, 2, 1], [1, 2, 1, 2, 2, 2, 2, 1, 0, 1, 2, 2, 1, 1, 1, 2], [1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 -= max(( abs(in0) * max(mod(min(i1, in0),abs(min(( min(( mod(( int(3.0) - in2 ),min(int(4.0), max(( min(i2, max(( ( min(i0, int(9.0)) * in0 ) * res0 ), abs(max(( min(int(7.0), int(0.0)) * int(3.0) ), ( int(0.0) * int(2.0) ))))) - in0 ), int(9.0)))) + ( int(4.0) - max(int(9.0), i2) ) ), min(( res0 * int(5.0) ), i2)) * int(9.0) ), min(int(0.0), abs(( int(3.0) - ( int(4.0) - max(abs(res0), ( min(max(divInt(i0,int(5.0)), abs(i2)), divInt(int(6.0),( in0 - mod(in2,max(res0, res0)) ))) * int(3.0) )) ) )))))), res0) ), int(6.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 85, 20, 25, 16, 5]}, {"genotype": [[0], [0, 0, 1, 1, 1], [1, 2, 0, 0, 0], [0], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 7, 3, 4, 3, 1, 9, 4, 5, 7, 0, 9, 8, 6, 8, 7, 2, 1, 2, 5, 9, 1, 2, 0, 5, 0, 2, 4, 2, 5, 6, 1, 2, 1, 2, 1, 0, 0, 6, 2, 4, 8, 8, 6, 9, 3, 9, 9, 1, 5, 4, 6, 4, 3, 2, 4, 6, 0, 9, 6, 3, 9, 6, 2, 0, 8, 3, 8, 9, 0, 8, 0, 3, 3, 2, 8, 3, 7, 6, 9, 4, 4, 0, 8, 3, 7, 9, 0, 8, 7, 9, 6, 1, 1, 1, 3, 5, 2, 4, 2, 4, 5, 6, 2, 5], [1, 0, 5, 0, 5], [2, 2, 0], [1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [3, 3, 1], [1], [1], [2, 1, 0, 0, 0, 0, 5, 0, 1, 5, 3, 3, 5, 5, 0, 1, 2, 2, 6, 0, 6, 3, 4, 6, 4, 2, 4, 4, 0, 6, 0, 6, 2, 5, 5, 1, 4, 1, 2, 3, 4, 6, 4, 4, 1, 0, 5, 1, 3, 5, 1, 3, 2, 3, 2, 5, 1, 5, 6, 0, 6, 5, 0, 2, 0, 5, 6, 3, 4, 2, 0, 3, 6, 4, 3, 5, 2, 6, 1, 5, 0, 6, 4, 0, 3, 0, 3, 2, 2, 0, 3, 2, 6, 2, 4, 5, 0, 2, 3, 5, 6, 6, 5, 3, 1, 1, 1, 1, 5, 4, 4, 6, 2, 1], [1], [3, 3, 1, 0, 2, 0, 1, 1, 1, 2, 2, 0, 2, 3, 1, 3, 0, 3, 0, 0, 3, 0, 2, 2, 2, 2, 3, 2, 2, 3, 2, 1, 2, 1, 1, 0, 0, 1, 3, 0, 0, 2, 3, 2, 2, 0, 0, 1, 3, 1, 0, 2, 0, 1, 3, 0, 0, 0, 0, 1, 3, 2, 0, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 2, 3, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 0, 3, 0, 1, 2, 2, 2, 1, 3, 3, 3, 2, 1, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 2, 0, 2, 1, 3, 1, 2, 2, 0, 3, 3, 3, 3, 3, 1, 1, 1, 2, 3, 3, 0, 1, 2, 3, 2, 2, 3, 3, 3, 0, 3, 3, 3, 0, 3, 1, 1, 3, 2, 0, 3, 0, 0, 3, 0, 3, 3, 3, 0, 0, 2, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 0, 1, 3, 2, 1, 3, 1, 3, 1, 3, 0, 2, 0, 0, 3, 0, 3, 0, 0, 3, 3, 3, 3, 1, 2, 2, 1, 1, 2, 1, 3, 2, 2, 2, 1, 0, 1, 3, 2, 3, 2, 1, 1, 0, 2, 2, 1, 3, 1, 1, 3, 3, 1, 2, 3, 2, 3, 2, 1, 2, 2, 3, 0, 1, 0, 3, 0, 0, 3, 3, 3, 0, 2, 3, 2, 2, 1, 3, 0, 3, 0, 1, 1, 1, 0, 2, 2, 2, 3, 3, 1, 0, 0, 0, 2, 3, 1, 3, 2, 2, 3, 2, 1, 0, 3, 0, 2, 0, 2, 1, 2, 1, 3, 2, 0, 2, 1, 1, 0, 3, 1, 3, 2, 2, 1, 3, 2, 3, 1, 1, 2, 2, 2, 0, 3, 2, 3, 2, 3, 0, 2, 0, 3, 2, 3, 2, 1, 0, 3, 1, 2, 0, 1, 0, 2, 1, 3, 2, 0, 3, 1, 0, 3, 3, 1, 2, 1, 2, 3, 0, 3, 0, 3, 3, 0, 0, 2, 2, 2, 0, 3, 0, 2, 0, 0, 1, 1, 1, 3, 3, 2, 3, 1, 1, 0, 3, 0, 1, 2, 0, 0, 2, 1, 3, 3, 1, 0, 2, 2, 0, 1, 3, 2, 1, 1, 0, 1, 2, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1, 1, 3, 3, 3, 2, 2, 0, 2, 3, 2, 0, 1, 0, 1, 3, 2, 1, 2, 0, 1, 0, 1, 3, 1, 0, 1, 3, 0, 3, 3, 2, 3, 1, 2, 0, 0, 0, 0, 2, 0, 1, 0, 3, 2, 0, 0, 1, 2, 1, 2, 3, 2, 0, 1, 0, 3, 1, 1, 2, 2, 1, 1, 1, 2, 0, 3, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 0, 0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 2, 0, 1, 0, 2, 1, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 0, 2, 0, 1, 1, 2, 0, 2, 2, 0, 2, 0, 0, 0, 1, 1, 2, 2, 1, 2, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 0, 0, 2, 2, 0, 1, 0, 1, 1, 1, 2, 0, 1, 2, 0, 0, 2, 2, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 0, 1], [2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 2, 1, 2, 1, 0, 2, 2, 2, 0, 1, 1, 2, 2, 0, 1, 1, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 2, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0]], "fitness": 99, "tree_depth": 117, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( max(min(int(5.0), i2), ( i1 * int(7.0) )) \\g int(7.0) or int(3.0) \\l ( mod(i0,( max(int(4.0), max(i0, min(i0, i0))) + abs(in2) )) - divInt(( divInt(divInt(max(mod(( abs(divInt(int(3.0),mod(int(1.0),int(9.0)))) + i0 ),i1), int(4.0)),min(in2, in0)),( max(( divInt(in0,in2) * int(5.0) ), min(int(7.0), in2)) + ( i0 + int(0.0) ) )) - max(i1, i2) ),i2) ) )\\nif ( res0 != int(9.0) and False ):{:\\ni0 += min(divInt(res0,min(in0, divInt(divInt(int(8.0),int(6.0)),int(8.0)))), divInt(int(7.0),in1))\\n:}else:{:\\nb2 = divInt(abs(res0),int(2.0)) \\l divInt(int(1.0),( ( divInt(divInt(( ( in1 - max(i2, int(2.0)) ) * ( ( ( int(5.0) - min(max(min(( int(9.0) * in1 ), max(( in1 - i0 ), max(res0, min(min(int(1.0), divInt(i0,( int(2.0) + max(int(0.0), mod(( res0 * max(max(max(abs(abs(int(5.0))), int(0.0)), int(2.0)), mod(max(min(i2, int(4.0)), mod(min(( ( min(max(abs(in2), abs(abs(abs(in2)))), max(int(2.0), int(5.0))) * min(( i1 * min(in1, i1) ), min(i2, abs(min(max(in0, in1), divInt(int(6.0),res0))))) ) + in1 ), min(abs(max(abs(abs(max(abs(int(1.0)), mod(min(in1, int(2.0)),abs(mod(int(1.0),abs(int(2.0)))))))), abs(int(1.0)))), max(i1, divInt(i0,in2)))),abs(i1))),abs(in0))) ),in2)) ))), abs(min(abs(min(int(0.0), divInt(( int(0.0) - int(6.0) ),divInt(int(2.0),max(( ( mod(int(4.0),i1) - int(8.0) ) * max(divInt(abs(( int(8.0) * int(6.0) )),in0), divInt(( int(9.0) + min(int(3.0), int(9.0)) ),abs(abs(int(9.0))))) ), ( min(( abs(mod(int(1.0),( divInt(min(i2, int(5.0)),in0) - min(i2, in2) ))) - min(max(max(i1, divInt(abs(( divInt(int(4.0),abs(in2)) * max(res0, int(6.0)) )),int(4.0))), int(3.0)), i0) ), ( divInt(divInt(abs(max(int(2.0), res0)),in2),i0) + mod(min(int(4.0), min(( divInt(min(( int(6.0) + i2 ), max(i0, ( in2 + divInt(int(0.0),mod(int(9.0),min(( res0 * ( int(6.0) * int(3.0) ) ), in0))) ))),max(int(9.0), abs(( mod(int(6.0),max(( min(int(2.0), int(0.0)) + ( divInt(divInt(in1,abs(mod(min(divInt(max(i2, ( i0 - max(( abs(divInt(int(8.0),in0)) - min(int(3.0), ( res0 + int(8.0) )) ), in1) )),mod(int(9.0),min(( in0 * min(int(0.0), in2) ), abs(abs(int(8.0)))))), mod(int(0.0),mod(min(i2, max(res0, min(max(i1, in2), mod(( ( i0 - max(res0, divInt(in1,i0)) ) * int(3.0) ),int(3.0))))),int(2.0)))),max(abs(( min(int(8.0), int(3.0)) * in0 )), max(i0, int(7.0)))))),( in0 - i2 )) + mod(int(6.0),abs(min(int(9.0), i2))) ) ), divInt(( i0 * int(4.0) ),min(divInt(int(4.0),int(0.0)), in0)))) - int(8.0) )))) - ( ( ( i2 - int(3.0) ) - int(7.0) ) - mod(res0,divInt(i2,int(9.0))) ) ), int(0.0))),abs(abs(min(( divInt(in1,mod(max(mod(in2,int(8.0)), i0),int(7.0))) - max(divInt(int(9.0),( i2 + int(6.0) )), in0) ), int(1.0))))) )) * abs(int(1.0)) )))))), in2)))))), int(1.0)), abs(res0)) ) - max(max(( abs(int(3.0)) * divInt(res0,in2) ), in0), i1) ) - mod(i1,int(5.0)) ) ),i1),max(( i1 + in2 ), int(2.0))) + divInt(int(4.0),mod(abs(mod(in1,int(2.0))),in1)) ) - min(int(4.0), int(5.0)) ))\\n:}\\nb0 = mod(mod(int(6.0),int(2.0)),int(5.0)) != divInt(res0,max(i2, i1))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 106, 106, 5, 3, 2, 8, 5, 3, 1, 1, 114, 1, 468, 123, 126, 57, 67]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [1, 1, 1], [5, 1, 5], [0, 3], [2], [0], [0, 1, 1], [0, 0], [3], [], [], [3, 5, 3, 0, 6, 1, 3], [1], [0, 1, 0, 0, 3, 2, 3, 0, 1, 2, 3, 0, 0, 1], [0, 0], [0, 2, 0], [2, 2, 0], []], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( in0 \\l int(5.0) and in2 \\ge in0 )\\ni0 *= min(( abs(res0) * int(1.0) ), ( min(i1, in0) + int(5.0) ))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 3, 3, 2, 1, 1, 3, 2, 1, 0, 0, 7, 1, 14, 2, 3, 3, 0]}, {"genotype": [[0], [0, 0, 1, 1], [0, 1, 2, 1], [1], [1, 0, 0], [1, 0, 1, 1], [6, 6, 7, 4], [5, 1], [1, 0], [1], [0, 1, 0, 1, 0], [0, 0], [3, 1, 1], [0, 0], [], [5, 3, 0, 2], [1], [2, 0, 0, 0, 3, 1, 1, 3, 1], [0], [2, 2], [0, 2], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 += ( in0 * i0 )\\nb1 = ( i2 != abs(int(6.0)) or True )\\nloopBreak% = 0\\nwhile int(67.0) \\g abs(int(4.0)):{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 4, 4, 2, 2, 1, 5, 2, 3, 2, 0, 4, 1, 9, 1, 2, 2, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 1, 0, 0, 0], [0], [1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1], [8, 0, 5, 8, 1, 9, 5], [3], [2], [], [0, 1], [0], [1], [1], [0], [3, 3, 4, 1, 3, 6, 4, 1, 0, 3, 4], [0, 0, 1], [2, 3, 3, 3, 1, 0, 0, 3, 3, 2, 1, 2, 3, 3, 1, 1, 1, 0, 0, 3, 0, 3, 0, 2, 1, 1, 0, 0], [1, 1, 0, 1], [2, 0, 1, 1, 2, 2, 1, 1, 0], [1, 1], [0, 1, 1]], "fitness": 99, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif False:{:\\nin0 = divInt(abs(min(max(int(8.0), in0), in1)),max(abs(mod(int(0.0),( abs(max(int(5.0), int(8.0))) - int(1.0) ))), i1))\\nb2 = in0 \\ge max(res0, min(in1, mod(int(9.0),int(5.0))))\\ni1 = i0\\nin0 -= in1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 7, 7, 1, 1, 0, 2, 1, 1, 1, 1, 11, 3, 28, 4, 9, 2, 3]}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 2, 0], [1, 1], [1, 1], [1, 1], [9, 5], [0], [], [], [1, 0], [0], [1], [0], [], [1, 3, 3, 6, 2, 2, 0], [0, 1], [2, 2, 1, 3, 0, 0, 1, 0, 0, 0], [0, 0], [0], [2, 0, 0], []], "fitness": 99, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 = ( ( int(9.0) * min(in0, in0) ) + int(5.0) )\\nloopBreak% = 0\\nwhile res0 \\l i2:{:\\nloopBreak% = 0\\nwhile True:{:\\ni2 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 2, 2, 1, 0, 0, 2, 1, 1, 1, 0, 7, 2, 10, 2, 1, 3, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [5, 0], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 = i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 0, 0, 1], [2, 0, 0, 1, 0], [0], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 5, 2, 8, 5, 9, 9, 2, 9, 0, 1, 3, 8, 1, 9, 5, 6], [2], [0, 1], [1], [0, 0, 0, 1, 0, 0], [0], [0, 2, 3, 2, 1], [1], [1], [2, 6, 6, 4, 1, 6, 0, 0, 0, 2, 2, 0, 4, 0, 4, 5, 4, 4, 3, 0, 1, 0, 0, 1, 0, 5, 4, 5, 0, 1, 3], [1, 0, 0], [0, 3, 3, 0, 0, 2, 1, 3, 2, 0, 3, 1, 2, 1, 2, 3, 3, 3, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 2, 2, 3, 2, 1, 1, 3, 0, 3, 1, 2, 3, 0, 3, 2, 1, 2, 3, 0, 1, 2, 2, 0, 1, 3, 0, 3, 0, 2, 0, 1, 3, 3, 3, 0, 1, 2, 0, 0, 0, 0, 1, 2, 0, 2, 3, 0, 0, 1, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 0, 3, 3, 3, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 2, 0, 1, 1, 1, 2, 1, 2, 2, 1], [1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\ni2 -= res0\\n:}else:{:\\nres0 = max(abs(in1), i1)\\nres0 = mod(int(1.0),min(divInt(i0,min(int(5.0), divInt(int(5.0),divInt(abs(min(max(mod(min(int(2.0), int(8.0)),( int(5.0) - ( abs(min(( ( ( abs(( int(9.0) - int(9.0) )) + max(i0, max(int(2.0), mod(min(i0, min(divInt(int(9.0),( abs(i2) - int(0.0) )), ( ( i2 + int(1.0) ) - min(i0, max(in1, mod(i0,int(3.0)))) ))),max(max(abs(in1), int(8.0)), divInt(in2,in1))))) ) - in1 ) * in0 ), int(1.0))) - mod(i0,mod(max(i1, i0),int(9.0))) ) )), i0), i1)),( ( int(5.0) - i0 ) + ( divInt(in2,int(6.0)) - in1 ) ))))), abs(abs(max(in2, i0)))))\\nb1 = not ( i1 == in0 or not False )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 5, 5, 1, 4, 18, 18, 1, 2, 1, 6, 1, 5, 1, 1, 31, 3, 95, 24, 25, 13, 12]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1], [2, 2, 1, 2, 0, 2, 0], [0, 1, 0, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 4, 0, 1, 0, 5, 1, 1, 4, 1, 1, 9, 7, 5, 8, 9, 0, 5, 8, 2, 3, 0, 8, 6, 0, 3, 8, 7, 2, 9, 9], [2, 5, 0], [0, 1], [], [0, 1, 0, 1, 1], [0, 0, 0], [0, 1], [0], [0, 0], [2, 4, 0, 2, 3, 1, 2, 6, 4, 6, 6, 3, 3, 2, 4, 6, 0, 3, 0, 6, 0, 2, 3, 6, 5, 5, 0, 1, 4, 1, 6, 1, 0, 0, 4, 2, 3, 0, 0], [1, 0], [3, 0, 3, 3, 2, 0, 2, 2, 1, 0, 2, 2, 0, 2, 3, 1, 0, 3, 1, 2, 2, 3, 1, 0, 3, 0, 3, 1, 0, 0, 1, 3, 3, 2, 3, 0, 3, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 1, 0, 2, 2, 0, 3, 1, 1, 2, 1, 0, 3, 1, 3, 2, 2, 2, 2, 2, 0, 0, 2, 1, 3, 3, 1, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 2, 3, 2, 0, 2, 3, 2, 3, 2, 3, 0, 3, 2, 3, 3, 0, 0, 1, 1, 0, 3, 2, 2, 1, 3, 1, 2, 0, 3, 3, 1, 3, 1, 0, 1, 3, 1, 2, 1, 2, 1, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 1, 2, 2, 0, 2, 0, 2, 1, 1, 2, 1, 0], [1, 1, 1, 2, 0, 0, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nloopBreak% = 0\\nwhile min(i2, min(min(( in1 - ( mod(int(7.0),i0) - mod(( i2 - divInt(min(int(2.0), in0),max(int(4.0), mod(( max(int(0.0), i1) * abs(i2) ),abs(int(1.0))))) ),res0) ) ), in1), int(0.0))) == min(min(( min(res0, max(int(5.0), res0)) + mod(in0,min(( int(1.0) + max(in0, i2) ), int(1.0))) ), in1), divInt(mod(res0,abs(int(4.0))),int(1.0))):{:\\ni0 += divInt(int(1.0),in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\ni0 = max(int(9.0), min(divInt(divInt(mod(divInt(( res0 * i0 ),( int(7.0) - min(max(int(5.0), int(8.0)), abs(i2)) )),in0),divInt(res0,in2)),in2), i0))\\n:}\\n:}\\nloopBreak% = 0\\nwhile i1 != int(90.0):{:\\nb1 = abs(abs(( in1 - mod(max(( i1 * ( min(( abs(divInt(max(res0, abs(( abs(min(i1, i0)) + int(5.0) ))),int(8.0))) + i0 ), abs(( ( int(2.0) - min(int(3.0), mod(in1,abs(max(int(0.0), max(int(8.0), i2))))) ) + int(6.0) ))) - abs(int(0.0)) ) ), divInt(int(3.0),mod(int(8.0),max(in0, int(7.0))))),mod(min(i0, int(2.0)),divInt(i0,int(9.0)))) ))) \\l int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 4, 3, 32, 32, 3, 2, 0, 5, 3, 2, 1, 2, 39, 2, 140, 35, 37, 16, 20]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [1, 1, 1, 1], [8, 0, 8, 5], [1], [2, 0], [], [1, 0], [0], [1], [1], [], [3, 0, 6, 0, 0], [], [3, 2, 3, 3, 2, 3, 3, 2, 0, 2, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0], [1, 2, 0, 1, 2], [2, 0, 2], [0]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = max(( abs(min(( max(abs(divInt(in0,( int(8.0) * i0 ))), int(0.0)) + res0 ), i0)) * int(8.0) ), int(5.0)) \\g i0\\nb0 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 4, 4, 1, 2, 0, 2, 1, 1, 1, 0, 5, 0, 18, 4, 5, 3, 1]}, {"genotype": [[0], [1], [0], [], [0], [], [], [1], [1], [], [1], [0], [], [], [], [1, 3, 5], [], [2, 0, 0, 0], [0], [], [1], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = ( i1 - in0 ) \\g in2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 4, 1, 0, 1, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [], [], [5, 3], [0], [1], [0, 1, 1], [0, 0], [3], [], [], [4, 6, 2, 5, 5, 6, 0, 5, 0], [0], [2, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0], [1, 1], [1], [], [1, 1]], "fitness": 99, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( mod(in1,res0) != mod(i2,in2) or in2 \\ge max(res0, i0) )\\nin2 = i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 2, 1, 1, 3, 2, 1, 0, 0, 9, 1, 11, 2, 1, 0, 2]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [4, 5], [], [], [], [], [], [], [], [], [3, 5], [0], [2, 1, 2, 1, 0], [1, 1], [], [], [1, 0]], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = mod(int(4.0),divInt(int(5.0),in2))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 5, 2, 0, 0, 2]}, {"genotype": [[0], [1], [1], [], [1], [0, 1], [2, 7], [], [], [], [], [], [], [], [], [0], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 = int(27.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 1, 0], [], [0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 5, 8, 3, 9, 9, 3, 9, 6, 2, 5, 3, 4], [1, 5, 1], [2, 2], [1], [1, 0, 1, 0, 1], [0, 0, 0], [3, 2], [], [], [0, 4, 6, 0, 6, 6, 3, 2, 3, 1, 0, 6], [1, 1], [2, 2, 3, 0, 2, 3, 1, 2, 1, 3, 2, 2, 1, 0, 0, 2, 3, 1, 2, 0, 1, 3, 1, 1, 1, 3, 0, 2, 3, 0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0], [1, 2, 1, 1, 2, 1, 0], [1, 0, 1, 1, 2, 1, 0, 2], [1, 1, 0]], "fitness": 99, "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = mod(mod(max(i0, ( abs(int(3.0)) - ( int(5.0) + max(( divInt(int(8.0),in1) - res0 ), ( max(int(3.0), ( i0 - int(9.0) )) * abs(int(9.0)) )) ) )),int(3.0)),int(9.0)) \\g max(res0, ( min(res0, int(6.0)) - int(2.0) ))\\nb2 = ( in0 != i2 or not in0 \\g int(5.0) )\\ni1 += i0\\nres0 *= int(34.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 13, 13, 3, 2, 1, 5, 3, 2, 0, 0, 12, 2, 38, 9, 7, 8, 3]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 1], [0], [0], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 = i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 1, 0, 2, 2, 1, 2, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 7, 1, 6, 1, 4, 8, 0, 5, 4, 9, 3, 4, 2, 2, 3, 8, 8, 0, 7, 1, 3, 4, 3, 0, 4, 0, 9, 5, 0, 8, 3, 2, 8, 2, 7, 6, 4, 7, 9, 0, 0, 0, 8, 2, 6, 0, 2, 6, 1, 8, 8, 2, 8, 4, 2, 9, 2, 2, 4, 8, 4, 9, 6, 0, 5, 0, 0, 1, 7, 2, 5, 3, 3, 6, 7, 4, 3, 0, 6, 1, 8, 6, 3], [0, 0, 2, 4, 1, 2, 3, 5, 1, 0, 2, 5, 0, 5, 0], [0, 2, 2, 1, 2, 2, 1, 0], [0, 0, 1, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 2, 2, 1, 0, 1, 2, 2, 2, 2, 3, 2, 3, 2, 1, 2, 1, 2, 1, 0], [1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1], [2, 0, 3, 4, 4, 3, 3, 1, 1, 6, 6, 2, 0, 4, 5, 1, 2, 2, 3, 5, 4, 1, 4, 4, 1, 0, 6, 1, 0, 5, 2, 0, 0, 3, 2, 6, 2, 6, 4, 5, 3, 5, 4, 4, 4, 1, 0, 6, 1, 4, 4, 0, 6, 5, 1, 2, 2, 2, 0, 4, 6, 3, 5, 2, 5, 2, 0, 5, 0, 3, 3, 4, 1, 4], [1, 1, 1, 1, 1, 0], [1, 3, 1, 1, 2, 3, 1, 0, 1, 2, 0, 2, 2, 1, 2, 0, 2, 0, 0, 0, 3, 2, 1, 2, 1, 2, 2, 3, 2, 1, 2, 0, 0, 0, 1, 3, 2, 1, 3, 2, 0, 3, 2, 0, 0, 0, 1, 1, 3, 1, 2, 3, 0, 3, 3, 3, 3, 2, 3, 3, 1, 0, 1, 1, 0, 3, 3, 3, 1, 0, 0, 2, 0, 2, 0, 3, 1, 2, 3, 2, 3, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 3, 0, 1, 0, 1, 1, 3, 0, 1, 1, 3, 3, 0, 1, 3, 3, 1, 0, 2, 3, 0, 3, 0, 3, 3, 0, 3, 3, 1, 1, 3, 3, 3, 1, 0, 0, 0, 2, 3, 0, 1, 2, 2, 3, 2, 2, 0, 0, 1, 2, 1, 0, 3, 1, 3, 3, 2, 3, 1, 1, 1, 2, 2, 2, 1, 0, 3, 2, 1, 3, 0, 2, 1, 3, 2, 0, 0, 0, 3, 2, 2, 0, 1, 3, 2, 2, 2, 1, 1, 0, 2, 1, 1, 1, 3, 3, 3, 3, 3, 1, 0, 3, 1, 3, 2, 1, 2, 2, 2, 2, 2, 1, 0, 1, 3, 3, 2, 3, 2, 0, 3, 0, 1, 0, 0, 1, 2, 1, 2, 2, 1, 0, 0, 0, 1, 1, 3, 1, 3, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 3, 3, 2, 3, 1, 1, 0, 1, 3, 0, 2, 2, 3, 1, 2, 1, 1, 1, 3, 2, 3, 3, 2, 2, 3, 0, 0, 1, 1, 3, 2, 3, 3, 2, 3, 3, 3, 1, 2, 3, 0, 3, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 3, 0, 0, 3, 1, 3, 0, 0, 1, 3, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 1, 2, 2, 0, 2, 0, 2, 1, 0, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 0, 0, 2, 2, 1, 1, 1, 0, 2, 2, 2, 1, 1, 2, 0, 2, 1, 0, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2], [1, 2, 2, 2, 2, 2, 2, 0, 1, 1, 0, 0, 1, 1, 0, 1, 2, 1, 2, 0, 1, 1, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 1, 0, 1, 1, 0, 2], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(9.0) \\l min(int(6.0), int(7.0)):{:\\ni2 -= divInt(abs(int(1.0)),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( int(6.0) \\l divInt(in0,( ( int(1.0) * ( in1 * ( in1 * in0 ) ) ) * in0 )) and b0 ):{:\\nloopBreak% = 0\\nwhile min(mod(int(4.0),( int(8.0) * ( mod(abs(( int(0.0) * ( i1 + i1 ) )),res0) - int(5.0) ) )), min(divInt(int(4.0),abs(divInt(res0,min(divInt(i2,i0), in1)))), int(9.0))) == int(3.0):{:\\nb2 = abs(int(4.0)) \\le divInt(min(in2, abs(min(abs(abs(mod(min(min(int(2.0), i1), int(2.0)),int(3.0)))), i2))),abs(max(abs(int(8.0)), i2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile in0 \\g ( in2 - ( in1 + abs(int(8.0)) ) ):{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif ( ( min(( abs(int(0.0)) + divInt(( int(7.0) - i1 ),( ( mod(in1,int(1.0)) - min(in1, int(3.0)) ) + i1 )) ), int(4.0)) - int(3.0) ) == abs(i0) and not not False ):{:\\nloopBreak% = 0\\nwhile b1:{:\\nif True:{:\\nloopBreak% = 0\\nwhile int(0.0) \\ge int(4.0):{:\\nif not max(min(res0, int(0.0)), abs(abs(int(9.0)))) != i1:{:\\ni0 *= ( abs(in2) - max(i2, abs(min(i0, min(max(int(5.0), int(0.0)), max(max(min(int(8.0), i0), in0), i2))))) )\\n:}else:{:\\nres0 *= ( min(i2, int(3.0)) + divInt(( abs(mod(divInt(res0,in1),int(2.0))) - divInt(int(8.0),in2) ),abs(int(2.0))) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif max(max(mod(max(int(7.0), int(6.0)),int(4.0)), divInt(( ( int(7.0) - in0 ) + min(( int(9.0) * abs(in2) ), divInt(int(0.0),abs(mod(in1,in1)))) ),in1)), abs(divInt(divInt(i1,int(0.0)),max(mod(( divInt(int(0.0),int(8.0)) + i0 ),mod(int(2.0),int(6.0))), int(0.0))))) \\g max(abs(min(abs(max(int(2.0), res0)), min(int(6.0), max(mod(int(1.0),mod(divInt(( ( mod(int(8.0),i1) + int(8.0) ) + max(abs(( abs(mod(in1,abs(in1))) * int(2.0) )), i0) ),res0),int(8.0))), divInt(int(4.0),mod(mod(int(2.0),in2),i1)))))), i2):{:\\ni2 -= int(9.0)\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(2.0) \\l max(int(2.0), abs(int(4.0))):{:\\nif not i2 == i0:{:\\nb2 = not not in1 != res0\\n:}else:{:\\nin0 *= int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile mod(( ( int(4.0) + abs(abs(mod(max(int(9.0), int(6.0)),in2))) ) + int(0.0) ),min(i2, mod(( max(int(5.0), ( int(0.0) - int(0.0) )) + int(1.0) ),abs(( min(max(divInt(( min(in2, i2) - int(7.0) ),int(2.0)), min(mod(max(abs(( abs(abs(min(int(5.0), divInt(max(i0, abs(int(3.0))),divInt(max(int(3.0), int(6.0)),( int(7.0) - int(4.0) )))))) + int(3.0) )), int(0.0)),int(6.0)), abs(in2))), i0) * abs(int(1.0)) ))))) \\l max(in0, in0):{:\\nif ( not ( not True or int(8.0) != abs(int(6.0)) ) and int(3.0) \\l in1 ):{:\\nb2 = not True\\n:}else:{:\\nloopBreak% = 0\\nwhile not True:{:\\ni1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 26, 26, 15, 11, 85, 85, 15, 8, 4, 38, 15, 23, 6, 7, 74, 6, 307, 72, 82, 38, 39]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1], [1, 2, 0, 0, 2, 2, 0, 0], [0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 2, 6, 8, 0, 0, 5, 2, 5, 4, 1, 3], [2, 3, 3], [0, 1, 2, 1, 2], [], [1, 0, 0, 0, 1, 1], [0, 0, 0], [0, 1, 0], [0], [0, 0, 1], [6, 5, 5, 1, 6, 6, 2, 1, 0, 2, 6, 5, 0, 4, 4, 5, 1], [1, 0], [1, 0, 1, 2, 1, 3, 3, 3, 1, 3, 1, 2, 0, 0, 3, 3, 3, 0, 1, 2, 1, 2, 0, 3, 0, 3, 3, 0, 1, 2, 2, 0, 1, 2, 2, 0, 0, 0, 3, 2, 3, 1, 0, 3, 3, 1, 2, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [2, 2, 2, 0, 1, 0, 0, 1, 1, 0, 1, 1, 2, 1], [2, 1, 2, 1, 2], [0, 1, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 *= int(8.0)\\nif in2 == int(2.0):{:\\nin2 = ( int(2.0) - abs(abs(abs(int(6.0)))) )\\nb0 = b1\\nif True:{:\\nif b2:{:\\nb1 = min(int(8.0), divInt(i1,res0)) \\ge max(min(min(res0, int(0.0)), mod(int(0.0),divInt(i2,max(i1, max(min(i0, int(5.0)), ( mod(i2,int(2.0)) * ( ( res0 - in2 ) * i0 ) )))))), max(divInt(max(int(5.0), in1),abs(max(int(4.0), mod(int(1.0),in1)))), in2))\\n:}else:{:\\nb2 = int(3.0) \\ge i1\\n:}\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 3, 5, 13, 13, 3, 5, 0, 6, 3, 3, 1, 3, 17, 2, 52, 10, 14, 5, 6]}, {"genotype": [[0], [1], [0], [], [0], [1, 1, 1, 0, 1], [5, 0, 0, 1, 8], [0], [1], [], [1], [0], [], [], [], [6, 4, 1, 1, 4], [], [3, 2, 0, 2, 2, 2, 3, 1, 1, 1, 2, 0, 0, 3, 0, 0, 1], [0, 0, 1, 1, 1], [1, 2, 1], [2, 2], [1, 0, 1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = max(( res0 * ( mod(divInt(abs(int(5.0)),int(0.0)),int(0.0)) * mod(in1,i1) ) ), max(i1, in1)) \\l int(18.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 5, 0, 17, 5, 3, 2, 3]}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1], [2, 2, 0, 1, 2, 1, 1], [0, 0, 1], [1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 6, 3, 5, 8, 5, 6, 3, 0, 2, 8, 9, 1, 2], [4, 5, 2, 3], [2, 1, 1], [1], [0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0], [0, 1, 3], [0], [0, 1], [5, 6, 0, 0, 3, 2, 1, 5, 1, 6, 3, 3, 4, 3, 2, 1], [1, 0], [3, 0, 1, 0, 0, 1, 0, 3, 2, 2, 0, 0, 1, 1, 2, 3, 0, 1, 3, 2, 1, 3, 1, 3, 3, 1, 2, 1, 1, 2, 0, 2, 3, 1, 2, 3, 2, 0, 1, 1, 2, 2, 0, 0, 1, 3, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 2, 1, 1], [1, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b2:{:\\nif min(in2, int(1.0)) \\le res0:{:\\ni0 -= i0\\n:}else:{:\\nb1 = int(2.0) != in0\\n:}\\nloopBreak% = 0\\nwhile True:{:\\ni2 = max(divInt(mod(i1,in2),int(8.0)), int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = ( mod(max(i1, int(3.0)),min(mod(int(5.0),max(int(8.0), min(max(int(5.0), divInt(int(6.0),int(3.0))), divInt(res0,( abs(int(0.0)) + divInt(max(mod(in0,int(2.0)), int(8.0)),mod(divInt(in0,in1),int(9.0))) ))))), max(in0, i2))) == int(1.0) or i1 \\ge int(2.0) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 3, 4, 16, 16, 4, 3, 1, 7, 4, 3, 1, 2, 16, 2, 51, 11, 10, 2, 10]}, {"genotype": [[0], [1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1], [8, 8, 2, 9, 2, 3, 5], [], [], [], [], [], [], [], [], [0, 6, 1, 3, 1, 0, 4], [1], [3, 3, 3, 2, 3, 0, 0, 3, 3, 2, 2, 1, 0, 2, 1, 3, 2, 0, 3, 2, 1, 2, 1, 0, 1, 2, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1], [2, 1, 2, 1, 1, 2, 0, 2], [0, 1, 0, 1, 1], [1, 0, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 += abs(max(abs(( max(res0, i1) - max(abs(mod(divInt(int(8.0),in0),( int(8.0) + min(( i1 - abs(mod(int(2.0),( int(9.0) - i0 ))) ), int(2.0)) ))), mod(int(3.0),in1)) )), int(5.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 29, 8, 8, 5, 4]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [1], [5], [3], [1], [], [1], [0], [], [], [], [1, 0, 1, 1], [1], [0, 0, 2, 1, 0], [1], [], [0], [1]], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 += i0\\nb1 = i1 \\ge mod(int(5.0),i1)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 5, 1, 0, 1, 1]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 0, 1], [0], [0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1], [7, 0, 1, 2, 9, 7, 9], [4], [1, 2], [], [0, 1, 0], [0], [2, 0], [], [0], [5, 4, 6, 0, 3, 4, 3, 1, 6, 1], [1, 1, 1], [3, 2, 3, 1, 0, 2, 2, 2, 0, 2, 3, 0, 0, 2, 0, 1, 2, 1, 3, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0], [2, 1, 2, 2], [0, 1, 0, 0, 2, 0, 1], [0, 1, 0]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not abs(( max(int(7.0), in2) + divInt(mod(( in1 - ( abs(res0) + i0 ) ),divInt(in0,int(0.0))),( int(1.0) + abs(in1) )) )) \\le int(2.0):{:\\nb1 = b2\\nin0 *= int(9.0)\\ni1 += res0\\n:}\\ni1 -= int(79.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 7, 7, 1, 2, 0, 3, 1, 2, 0, 1, 10, 3, 24, 7, 4, 7, 3]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1], [4, 0, 5], [3], [2], [], [1], [0], [], [], [], [1], [], [1, 3, 0, 1], [], [0], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(40.0) \\ge min(i1, int(5.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 0, 1, 0, 0]}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0], [0, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 3, 2, 9, 1, 8, 5, 5, 3, 6, 6, 2, 7], [2, 5, 1], [1], [], [1, 1, 1], [0, 0, 0], [], [], [0], [5, 0, 3, 1, 4, 6, 0, 4, 2, 1, 4, 1, 3, 2, 4, 2, 3, 6, 5, 2, 6, 2, 0, 0, 5, 0, 6, 0], [0], [2, 1, 1, 0, 2, 0, 3, 0, 3, 2, 2, 0, 0, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 1, 3, 0, 2, 3, 3, 0, 1, 2, 0, 3, 0, 1, 0, 2, 3, 0, 1, 2, 3, 3, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 2, 3, 3, 1, 0, 2, 1, 2, 0, 3, 2, 0, 1, 0, 2, 1, 3, 2, 3, 0, 3, 0, 0, 1, 2, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [2, 0, 2, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 2, 1, 0, 2, 2, 0, 2], [0, 0, 2, 1, 0, 2, 2, 2, 2, 1, 1, 2, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(int(8.0),int(8.0)) == in2:{:\\nloopBreak% = 0\\nwhile ( i0 + abs(in0) ) != min(( ( i1 + in1 ) * divInt(res0,int(3.0)) ), i0):{:\\nin1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = abs(( mod(abs(min(int(2.0), abs(i1))),mod(min(max(in1, int(9.0)), ( i1 - max(in0, int(1.0)) )),i2)) + ( max(in1, int(8.0)) * mod(abs(max(divInt(i2,( max(in0, abs(( ( res0 * in2 ) * i2 ))) * divInt(( max(min(int(5.0), res0), ( int(5.0) - ( i2 - abs(mod(i0,int(3.0))) ) )) * i0 ),( int(6.0) + abs(mod(min(in2, abs(i0)),res0)) )) )), int(6.0))),mod(int(2.0),int(7.0))) ) )) \\g i0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 2, 2, 14, 14, 3, 1, 0, 3, 3, 0, 0, 1, 28, 1, 84, 23, 20, 13, 10]}, {"genotype": [[0], [1], [0], [], [0], [1], [4], [2], [2], [], [1], [0], [], [], [], [6], [], [0, 3, 1], [], [2], [], []], "fitness": 99, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = res0 == abs(int(4.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 3, 0, 1, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0], [1], [0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 2, 1, 2, 9, 7, 0, 3, 2, 1, 5, 0, 0, 5, 4, 8, 2, 6, 1, 0, 5, 8, 0, 1, 9, 5, 1, 3, 2, 4, 4, 8, 8, 2, 7, 4, 7, 6, 9, 0, 0, 1, 5, 4, 9, 2, 4, 2, 9, 4, 1, 5, 9, 6, 1, 1, 6, 6, 5, 1, 6, 4, 5, 0, 0, 6, 7, 4, 2, 3, 0, 8, 1, 7, 4], [0, 5], [2], [], [0, 1, 1], [0, 0], [2], [], [], [4, 6, 1, 3, 2, 2, 3, 1, 4, 0, 4, 3, 5, 6, 3, 6, 6, 5, 0, 3, 4, 5, 3, 1, 4, 5, 3, 4, 4, 0, 1, 2, 2, 2, 2, 3, 0, 5, 6, 4, 2, 0, 0, 0, 4, 2, 6, 2, 6, 0, 2, 3, 4, 4, 6, 5, 1, 1, 5, 4, 4, 0, 4, 2, 3, 4, 2, 1, 3, 2, 4, 6, 3, 3, 3], [0, 1], [0, 0, 1, 3, 3, 2, 1, 3, 3, 0, 1, 3, 2, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 0, 2, 2, 0, 2, 3, 2, 0, 1, 2, 3, 3, 0, 3, 1, 0, 3, 2, 3, 2, 1, 0, 1, 2, 2, 3, 3, 0, 2, 0, 2, 3, 1, 0, 2, 2, 2, 2, 0, 1, 3, 3, 1, 2, 0, 0, 2, 1, 1, 3, 3, 3, 1, 1, 0, 0, 3, 1, 2, 3, 1, 3, 1, 0, 3, 1, 2, 2, 2, 2, 3, 3, 1, 2, 0, 3, 3, 0, 2, 2, 3, 3, 0, 2, 1, 1, 3, 0, 2, 3, 3, 1, 2, 2, 1, 2, 3, 2, 1, 3, 2, 1, 0, 3, 3, 2, 3, 0, 3, 2, 0, 2, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 2, 0, 2, 0, 3, 2, 1, 1, 3, 1, 1, 3, 2, 3, 3, 2, 1, 3, 2, 2, 2, 1, 3, 2, 1, 2, 1, 2, 2, 0, 1, 0, 3, 3, 0, 0, 1, 1, 2, 3, 3, 0, 3, 3, 0, 3, 0, 3, 1, 2, 3, 0, 3, 0, 1, 0, 2, 1, 2, 3, 0, 2, 3, 2, 1, 1, 2, 0, 3, 1, 1, 1, 2, 2, 1, 2, 3, 0, 1, 0, 0, 1, 2, 2, 3, 1, 2, 0, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1, 0, 3, 3, 0, 1, 3, 2, 3, 2, 3, 1, 1, 1, 0, 1, 1, 1, 2, 3, 3, 2, 0, 3, 2, 0, 0, 2, 1, 3, 2, 1, 3, 3, 1, 0, 0, 2, 3, 0, 0, 3, 3, 0, 1, 3, 0, 1, 0, 3, 2, 1, 2, 3, 2, 0, 2, 0, 0, 1, 0, 0, 0, 3, 2, 1, 1, 2, 3, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 0, 1, 2, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 0, 1, 2, 0, 2, 1, 1, 1, 2, 2, 0, 0, 1, 0, 0, 1, 0, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 1, 0, 2, 2, 0, 2, 2, 2, 1, 0, 2, 1, 0, 2, 1, 1, 1, 2, 1, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2], [2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 2, 0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 2, 2, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 0, 0, 2, 2, 1, 2, 2], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0]], "fitness": 99, "tree_depth": 126, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile not in1 \\l res0:{:\\nb2 = int(2.0) != max(min(( int(2.0) * max(abs(i1), int(7.0)) ), max(( ( int(2.0) * int(1.0) ) * int(2.0) ), mod(( ( in0 * i2 ) * i2 ),( in0 - int(9.0) )))), int(7.0))\\ni1 = ( in1 + mod(mod(i0,( max(mod(in1,int(0.0)), mod(abs(max(in0, min(int(3.0), in2))),min(( min(divInt(int(2.0),res0), int(1.0)) * mod(divInt(max(max(in0, divInt(res0,divInt(max(int(5.0), res0),( ( ( divInt(in2,int(0.0)) + min(max(int(0.0), mod(i0,in0)), ( int(5.0) + int(4.0) )) ) + min(min(min(int(8.0), int(2.0)), in1), in2) ) - min(int(6.0), ( max(int(1.0), abs(int(0.0))) * in0 )) )))), min(int(5.0), divInt(( ( mod(abs(abs(int(8.0))),mod(i1,abs(min(in1, ( divInt(max(abs(in2), ( int(0.0) + int(1.0) )),min(in0, divInt(abs(max(int(9.0), ( ( int(5.0) + mod(max(( int(1.0) * max(( int(3.0) - in1 ), abs(abs(mod(min(in1, min(mod(i0,mod(i1,mod(( i2 + max(i2, min(mod(( i2 + ( i2 - mod(in0,min(( int(2.0) - int(4.0) ), max(int(4.0), int(8.0)))) ) ),min(mod(abs(abs(( int(8.0) * abs(( mod(( int(2.0) + max(divInt(int(7.0),divInt(int(4.0),divInt(( i0 * int(7.0) ),in2))), max(max(res0, in1), int(6.0))) ),int(9.0)) * ( max(abs(i2), abs(max(i0, max(i0, abs(int(0.0)))))) * mod(min(i0, max(in1, int(0.0))),i2) ) )) ))),( int(1.0) + ( min(res0, ( abs(mod(int(5.0),int(4.0))) * mod(i2,abs(int(9.0))) )) - int(2.0) ) )), int(4.0))), divInt(( int(2.0) - mod(min(res0, int(9.0)),i0) ),i2))) ),int(4.0)))), mod(mod(abs(int(1.0)),( in0 + abs(abs(max(in1, int(5.0)))) )),int(9.0)))),min(in1, int(6.0)))))) ), int(1.0)),res0) ) + abs(max(in2, int(1.0))) ))),min(mod(abs(divInt(max(int(6.0), int(6.0)),int(5.0))),i1), int(1.0))))) - int(6.0) ))))) + int(4.0) ) - ( max(max(mod(i1,abs(( in2 * in1 ))), ( int(5.0) + max(divInt(int(0.0),min(max(int(0.0), in1), i0)), ( abs(in1) + i2 )) )), min(abs(in0), int(6.0))) * min(in1, int(7.0)) ) ),i2))),abs(mod(int(4.0),( min(divInt(i1,divInt(in0,i2)), int(2.0)) * in1 )))),res0) ), in0))) - min(divInt(int(3.0),int(0.0)), ( abs(int(8.0)) * in0 )) )),int(1.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 *= int(74.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 1, 3, 77, 77, 2, 1, 0, 3, 2, 1, 0, 0, 75, 2, 320, 86, 85, 43, 44]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 2, 2, 0, 1, 0, 1, 1], [1, 1, 0], [0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 7, 2, 1, 8, 4, 2, 1, 6, 7, 9, 0, 9, 0, 9, 1, 2, 6, 5, 1, 5, 1, 5, 2, 1, 4, 8, 4, 2, 4, 7], [4, 0, 4, 4, 2], [2, 0, 2, 0, 1], [0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0], [1, 2, 1, 3, 0, 3, 1], [1, 0, 0], [1], [3, 2, 0, 3, 3, 5, 4, 1, 2, 2, 0, 1, 5, 3, 5, 5, 5, 6, 6, 3, 4, 3, 4], [0, 0], [0, 2, 0, 2, 2, 0, 2, 2, 1, 2, 2, 0, 1, 3, 3, 3, 1, 3, 2, 1, 1, 2, 1, 2, 0, 0, 2, 3, 2, 0, 3, 2, 1, 1, 3, 2, 1, 0, 3, 2, 0, 2, 0, 1, 0, 2, 1, 1, 3, 3, 1, 3, 2, 2, 2, 1, 3, 3, 0, 2, 0, 0, 1, 3, 3, 1, 2, 3, 2, 2, 3, 1, 2, 2, 1, 1, 2, 3, 0, 0, 1, 1, 1, 3, 2, 1, 3, 0, 1, 1, 2, 1, 0, 1, 2, 2, 3, 1, 0, 0, 1, 3, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0], [2, 0, 2, 2, 0, 2, 1, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 2, 2, 0], [2, 0, 1, 2, 2, 1, 0, 1, 1, 1, 2, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile False:{:\\nb2 = in0 \\le ( i2 * mod(divInt(i0,divInt(mod(int(3.0),divInt(divInt(in0,int(1.0)),abs(min(abs(int(7.0)), abs(divInt(int(2.0),int(1.0))))))),divInt(int(8.0),divInt(in0,in2)))),divInt(min(mod(in1,abs(( int(4.0) + int(2.0) ))), max(( int(1.0) - i1 ), min(( i2 * ( i2 * int(6.0) ) ), i0))),( int(7.0) - int(9.0) ))) )\\nloopBreak% = 0\\nwhile not True:{:\\nif ( min(abs(int(0.0)), min(( mod(divInt(int(9.0),abs(min(i1, mod(in2,in0)))),int(0.0)) + abs(min(int(9.0), divInt(abs(mod(divInt(abs(int(1.0)),( divInt(int(2.0),int(6.0)) - mod(min(in2, in2),int(5.0)) )),int(1.0))),int(5.0)))) ), abs(( int(1.0) - abs(in2) )))) \\l int(5.0) and b0 ):{:\\nres0 = int(2.0)\\n:}else:{:\\nb2 = ( int(1.0) - res0 ) \\le int(4.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = ( ( abs(int(8.0)) * in1 ) + in0 )\\nb0 = ( int(4.0) \\le min(int(2.0), in1) or int(4.0) == int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 9, 9, 3, 6, 32, 32, 5, 5, 2, 12, 5, 7, 3, 1, 23, 2, 106, 31, 22, 12, 19]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 1, 0, 1, 1, 2, 6, 8, 7], [4, 1, 3], [2], [1], [0, 0, 1, 0, 1, 1], [0, 0, 0], [2, 2, 3], [], [0], [6, 2, 4, 5, 6, 2, 6, 0], [1], [1, 3, 2, 0, 3, 2, 0, 1, 0, 2, 2, 0, 1, 3, 3, 2, 3, 1, 1, 0, 2, 0, 0, 1, 1, 3, 3, 1, 1], [1, 0, 0, 1, 0, 1], [0, 2, 2, 0, 2, 2, 1], [0, 1, 0, 2], [1, 0, 0]], "fitness": 99, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(59.0)\\nif not not min(mod(i2,abs(( in1 - int(1.0) ))), in2) \\le ( divInt(res0,int(0.0)) + abs(min(( abs(int(1.0)) * int(1.0) ), i2)) ):{:\\nb2 = ( divInt(res0,i0) \\g int(2.0) or int(6.0) \\ge abs(max(int(8.0), int(7.0))) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 997, "mapping_values": [1, 3, 3, 1, 2, 10, 10, 3, 1, 1, 6, 3, 3, 0, 1, 8, 1, 29, 6, 7, 4, 3]}, {"genotype": [[0], [1], [1], [], [0], [1, 1], [4, 1], [3], [0], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = int(4.0) \\ge int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 0], [0, 1, 1, 1, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 0, 5, 5, 9, 4, 8, 4, 8, 3, 9, 6, 9, 9, 9, 1, 0, 5, 8, 1, 4, 2, 1, 5, 9, 3, 6, 3, 2, 6, 9, 0, 5, 7, 5, 8, 9, 4, 8, 1, 0, 5, 5, 3, 4, 0, 3, 2, 5, 2, 8, 8, 0, 1, 6, 3, 6, 5, 9, 1, 4, 6, 7, 5, 0, 6, 7, 9, 0, 6, 8, 5, 3, 2, 9, 6, 2, 2, 3, 1, 5, 8, 5, 9, 8, 7, 0, 6, 3, 9, 6, 8, 2], [1, 2, 5, 5, 3], [1, 0], [], [1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0], [], [0], [5, 3, 6, 1, 3, 1, 5, 4, 2, 2, 0, 2, 6, 2, 5, 6, 6, 3, 4, 4, 5, 5, 0, 3, 3, 6, 3, 0, 3, 0, 1, 2, 5, 1, 5, 5, 4, 2, 0, 5, 4, 5, 5, 4, 1, 0, 4, 6, 0, 4, 5, 0, 0, 2, 3, 5, 6, 2, 2, 3, 6, 2, 3, 4, 6, 3, 5, 0, 2, 4, 2, 6, 6, 6, 6, 4, 6, 0, 4, 5, 0, 0], [1], [0, 1, 2, 2, 3, 0, 0, 3, 3, 3, 3, 1, 0, 3, 2, 1, 3, 2, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 0, 1, 2, 1, 1, 3, 3, 2, 0, 0, 0, 3, 0, 0, 2, 2, 2, 2, 1, 0, 2, 3, 0, 3, 3, 1, 1, 0, 3, 2, 0, 0, 0, 0, 3, 1, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 1, 3, 2, 3, 3, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 3, 3, 3, 0, 2, 2, 3, 3, 0, 2, 3, 1, 0, 1, 3, 2, 1, 1, 3, 1, 1, 1, 3, 0, 2, 0, 1, 0, 2, 0, 1, 1, 0, 3, 2, 3, 2, 1, 2, 0, 2, 3, 2, 3, 2, 3, 2, 1, 3, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0, 3, 2, 3, 0, 2, 3, 3, 1, 3, 2, 1, 1, 3, 1, 1, 1, 2, 3, 1, 1, 1, 1, 0, 3, 2, 1, 2, 3, 2, 3, 3, 0, 3, 3, 3, 3, 0, 2, 1, 2, 1, 2, 2, 2, 0, 3, 3, 0, 2, 0, 2, 1, 1, 0, 0, 2, 1, 1, 3, 2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 1, 1, 0, 3, 3, 3, 3, 1, 2, 2, 3, 0, 3, 1, 0, 2, 0, 0, 2, 1, 0, 2, 0, 2, 3, 1, 0, 3, 0, 1, 1, 2, 2, 0, 0, 1, 2, 3, 3, 1, 3, 3, 0, 3, 1, 3, 2, 0, 2, 1, 3, 2, 2, 1, 0, 3, 3, 3, 0, 2, 2, 2, 2, 2, 3, 2, 2, 1, 1, 2, 2, 0, 1, 0, 2, 3, 0, 1, 2, 0, 2, 1, 2, 3, 0, 0, 1, 1, 3, 3, 1, 1, 2, 2, 1, 3, 3, 3, 0, 2, 3, 0, 0, 2, 1, 2, 2, 3, 3, 0, 2, 1, 3, 2, 0, 1, 3, 2, 1, 3, 0, 3, 1, 1, 2, 3, 2, 2, 1, 3, 0, 1, 0, 3, 1, 0, 3, 3, 1, 1, 2, 0, 1, 0, 1, 0, 3, 1, 1, 1, 3, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 2, 1, 2, 1, 0, 1, 1, 1, 1, 1, 2, 0, 1, 2, 2, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 2, 1, 0, 1, 2, 2, 0, 1, 2, 0, 0, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 0, 2, 0, 1, 0, 0, 2, 0, 0, 2, 0, 2, 1, 2, 1, 1, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 1, 0, 2, 1, 2, 2, 0, 2, 1, 2], [0, 0, 0, 0, 2, 0, 2, 2, 1, 1, 0, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 0, 0, 2, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 1, 2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 2], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 86, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = in2 \\g int(4.0)\\nif b0:{:\\nloopBreak% = 0\\nwhile ( ( min(in0, res0) + abs(max(abs(max(int(7.0), i1)), min(mod(int(0.0),max(( mod(int(5.0),in0) + i1 ), in2)), int(5.0)))) ) + divInt(in1,( i2 + i2 )) ) == int(9.0):{:\\nloopBreak% = 0\\nwhile divInt(int(4.0),int(8.0)) != max(max(mod(i0,i2), res0), max(i2, in2)):{:\\nloopBreak% = 0\\nwhile ( mod(divInt(divInt(int(4.0),res0),mod(max(res0, abs(min(int(8.0), int(3.0)))),in0)),max(mod(in1,in1), in2)) * in2 ) != abs(int(9.0)):{:\\nloopBreak% = 0\\nwhile abs(( min(max(max(i0, divInt(in0,max(in0, int(6.0)))), int(9.0)), min(( min(max(int(9.0), min(int(9.0), mod(mod(mod(int(1.0),res0),in0),( min(max(max(i0, ( ( min(max(in0, ( min(int(0.0), i0) + int(5.0) )), max(( int(8.0) * int(1.0) ), abs(int(4.0)))) * int(2.0) ) - int(1.0) )), abs(i1)), mod(i2,int(5.0))) - in2 )))), ( i1 + int(9.0) )) * int(3.0) ), in2)) * max(divInt(abs(( int(6.0) * ( in2 + ( abs(( max(( min(( int(3.0) * max(mod(( int(2.0) * int(6.0) ),mod(int(9.0),int(0.0))), int(5.0)) ), int(7.0)) + mod(in1,i2) ), abs(divInt(abs(i0),divInt(min(max(int(5.0), abs(( int(8.0) * int(9.0) ))), min(int(4.0), int(8.0))),int(1.0))))) - ( min(int(0.0), int(5.0)) * int(5.0) ) )) + int(3.0) ) ) )),in2), min(divInt(int(4.0),( abs(mod(abs(max(in1, abs(abs(abs(max(in2, divInt(int(0.0),( int(3.0) + mod(divInt(( in2 * max(max(in1, ( i1 + divInt(int(2.0),int(5.0)) )), i0) ),in1),( int(2.0) - int(8.0) )) )))))))),max(divInt(int(8.0),abs(int(0.0))), ( max(divInt(divInt(abs(min(int(1.0), int(6.0))),res0),abs(min(max(min(int(3.0), ( ( min(i0, abs(int(6.0))) * in1 ) + ( in2 - i0 ) )), divInt(int(5.0),i0)), divInt(i2,( min(int(9.0), in0) - min(in2, int(1.0)) ))))), int(4.0)) - divInt(divInt(res0,i2),int(6.0)) )))) + mod(abs(min(int(7.0), abs(max(i2, abs(int(5.0)))))),max(mod(in0,divInt(int(0.0),max(( mod(int(6.0),res0) + max(abs(max(i2, divInt(( divInt(divInt(divInt(abs(( mod(int(7.0),int(9.0)) + divInt(divInt(in0,int(0.0)),in1) )),divInt(min(res0, int(6.0)),divInt(in0,( int(8.0) - ( max(in2, i0) * int(5.0) ) )))),int(3.0)),abs(abs(int(2.0)))) + int(9.0) ),( ( int(6.0) + min(min(abs(i2), ( min(in1, i2) * ( int(2.0) + divInt(mod(max(max(res0, mod(int(2.0),max(( res0 + int(3.0) ), max(( int(1.0) * min(res0, abs(int(5.0))) ), int(8.0))))), ( max(divInt(( int(5.0) * abs(res0) ),int(9.0)), in1) * abs(int(8.0)) )),res0),min(abs(int(7.0)), int(0.0))) ) )), mod(i0,int(6.0))) ) + in1 )))), int(3.0)) ), in2))), max(int(9.0), int(6.0)))) )), int(8.0))) )) \\ge abs(int(2.0)):{:\\ni0 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 7, 7, 5, 2, 94, 94, 5, 2, 0, 6, 5, 1, 0, 1, 82, 1, 373, 97, 101, 46, 52]}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 1], [], [0, 0, 1, 0], [1, 1, 1, 1], [6, 9, 1, 9], [0, 2, 2], [1, 1, 2, 2, 2, 2], [1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0], [0, 3, 0, 3, 3, 2, 0], [], [], [6, 3, 0, 1], [0], [1, 1, 1, 1, 0, 0, 0], [], [], [], []], "fitness": 99, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b1\\nb2 = ( b2 or ( ( int(6.0) \\l int(9.0) or int(1.0) == int(9.0) ) and not res0 == in0 ) )\\ni0 = i1\\nb2 = b2\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 4, 4, 0, 4, 4, 4, 3, 6, 3, 10, 3, 7, 0, 0, 4, 1, 7, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [8, 5], [], [], [], [], [], [], [], [], [5, 6], [1], [2, 1, 3, 0, 1], [0], [0], [2, 1], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= ( int(8.0) - min(res0, int(5.0)) )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 5, 1, 1, 2, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [0], [], [0], [], [1], [0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = True\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [1], [0, 1], [1, 1, 1, 1, 1, 1], [9, 2, 6, 8, 8, 4], [3, 4], [1], [], [1, 0, 0, 1], [0, 0], [2, 2], [], [], [3, 2], [0], [1, 0, 3, 1, 3, 1, 2, 3, 1, 3, 1, 1], [1], [0, 2, 2, 2], [], [1]], "fitness": 99, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile int(9.0) \\ge in0:{:\\nb1 = not not min(int(2.0), abs(int(6.0))) \\le mod(abs(int(8.0)),abs(int(8.0)))\\ni2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 1, 2, 6, 6, 2, 1, 0, 4, 2, 2, 0, 0, 2, 1, 12, 1, 4, 0, 1]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [1, 0, 7], [], [], [], [], [], [], [], [], [4], [0], [1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = int(107.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [1, 1], [7, 4], [], [], [], [], [], [], [], [], [4], [0], [3, 3, 1, 1], [], [2, 1], [], []], "fitness": 99, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin1 = abs(max(int(7.0), int(4.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 2, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 1, 1], [0], [1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 1, 0, 1, 4, 4, 6, 2, 6, 6, 9], [5, 5], [1, 0, 1], [], [1, 1, 0, 0], [0, 0], [1, 1], [1, 1], [0], [0, 5, 3, 2, 1, 2, 0, 4, 1, 1], [1], [2, 1, 3, 0, 3, 1, 3, 2, 2, 3, 3, 1, 0, 2, 0, 2, 0, 0, 2, 3, 1, 0, 1, 3, 2, 3, 0, 1, 0, 1, 3, 1, 1, 1, 1, 2, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 2], [0, 2, 1, 0, 1, 0, 1], [0, 1]], "fitness": 99, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif divInt(int(1.0),max(i0, min(int(5.0), max(( ( min(min(int(1.0), in2), mod(in0,( i2 + i1 ))) * ( min(int(0.0), i2) - int(1.0) ) ) + min(( min(i0, int(4.0)) - in1 ), int(4.0)) ), abs(int(6.0)))))) != int(2.0):{:\\ni1 += int(6.0)\\nb1 = int(6.0) != ( i1 - int(9.0) )\\nb0 = False\\n:}\\nb1 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 5, 5, 1, 4, 12, 12, 2, 3, 0, 4, 2, 2, 2, 1, 10, 1, 38, 8, 9, 7, 2]}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 0, 2, 1, 1, 0, 0], [1, 1], [0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 0, 9, 9, 9, 1, 8, 2, 1, 2, 9, 5, 4, 8, 9, 4, 8, 5, 2, 3, 5, 4, 1, 1, 2, 0, 7, 0, 3, 0, 2, 3, 3, 7, 8, 1, 8, 7, 3, 1, 0, 5, 3, 8, 9, 7, 6, 0, 1, 4, 7, 6], [2, 5, 2, 3, 0], [2, 0, 2, 2], [], [0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0], [2, 2, 1, 2], [0], [], [6, 2, 3, 0, 4, 2, 6, 1, 0, 4, 4, 1, 4, 6, 3, 5, 2, 6, 6, 0, 5, 2, 0, 1, 1, 5, 6, 2, 0, 3, 5, 6, 4, 1, 1, 2, 2, 4, 1, 4, 6, 2, 0, 5, 3, 1, 4, 5, 2, 6, 6, 0, 0, 1, 2, 4, 2, 1], [1, 1], [1, 2, 0, 0, 0, 3, 0, 3, 0, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 3, 0, 3, 1, 1, 3, 3, 2, 3, 3, 3, 3, 0, 3, 0, 0, 2, 3, 0, 2, 3, 1, 1, 0, 2, 0, 2, 3, 0, 2, 3, 0, 3, 3, 2, 2, 0, 3, 2, 2, 3, 1, 0, 1, 3, 3, 1, 2, 1, 0, 0, 2, 3, 0, 2, 3, 1, 3, 3, 0, 1, 2, 3, 0, 1, 0, 0, 3, 1, 1, 2, 2, 2, 1, 3, 2, 0, 3, 2, 0, 3, 3, 1, 0, 1, 2, 2, 1, 1, 1, 1, 1, 3, 0, 2, 1, 1, 0, 2, 2, 2, 3, 1, 3, 3, 3, 1, 2, 0, 2, 2, 3, 1, 1, 3, 2, 2, 1, 3, 1, 1, 0, 1, 2, 3, 2, 3, 2, 2, 1, 1, 0, 2, 0, 0, 3, 1, 0, 2, 3, 2, 2, 0, 0, 1, 1, 0, 3, 2, 0, 1, 3, 2, 2, 1, 0, 3, 2, 1, 3, 1, 2, 3, 2, 1, 2, 1, 0, 0, 0, 0, 3, 1, 0, 2, 3, 1, 2, 0, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 1, 1, 3, 3, 2, 3, 3, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1, 2, 0, 0, 2, 0, 0, 2, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 2, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 0, 1, 2], [0, 0, 2, 0, 2, 2, 1, 0, 1, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 1, 1, 1, 1, 0, 0, 1, 2, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not int(9.0) == ( res0 + i2 )\\nloopBreak% = 0\\nwhile in0 != max(i0, abs(in1)):{:\\ni2 += res0\\nloopBreak% = 0\\nwhile not True:{:\\ni1 *= int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not ( int(9.0) + i0 ) == divInt(( in1 * in1 ),i1)\\nb2 = min(in1, min(int(9.0), int(9.0))) \\ge abs(min(mod(min(abs(max(max(res0, min(in0, in2)), ( max(i2, divInt(min(int(1.0), int(8.0)),res0)) * divInt(res0,( min(i0, divInt(min(in2, abs(min(mod(mod(i2,min(mod(divInt(min(int(2.0), i0),int(1.0)),abs(abs(int(2.0)))), ( int(9.0) - i1 ))),i1), ( abs(in2) + ( max(int(5.0), abs(min(res0, int(4.0)))) - divInt(min(i2, int(8.0)),i0) ) )))),in0)) + min(int(9.0), int(4.0)) )) ))), ( divInt(mod(int(8.0),abs(( in2 + max(( res0 * max(min(int(5.0), in1), int(2.0)) ), mod(divInt(int(3.0),int(5.0)),int(4.0))) ))),int(1.0)) - int(1.0) )),min(i1, mod(int(2.0),int(0.0)))), i1))\\nb2 = mod(( ( min(int(7.0), min(max(abs(int(0.0)), ( i2 * mod(( min(int(3.0), int(0.0)) + min(( divInt(int(2.0),max(int(3.0), int(3.0))) - i2 ), int(7.0)) ),( min(( min(( ( int(8.0) - int(1.0) ) + in1 ), ( i1 * in1 )) - min(int(8.0), res0) ), ( abs(divInt(divInt(i2,i0),int(7.0))) - int(3.0) )) - in2 )) )), abs(( in0 - int(1.0) )))) + min(mod(mod(int(0.0),i1),abs(( int(5.0) + abs(int(3.0)) ))), mod(max(( int(8.0) - divInt(int(9.0),in1) ), in2),i2)) ) * res0 ),max(int(7.0), res0)) \\l mod(min(int(6.0), ( i0 + ( int(0.0) + min(min(mod(abs(i0),i1), ( int(1.0) + int(4.0) )), int(7.0)) ) )),max(min(mod(max(abs(int(6.0)), i2),in1), i2), i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 8, 8, 2, 6, 52, 52, 5, 4, 0, 9, 5, 4, 1, 0, 58, 2, 220, 55, 57, 30, 27]}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [1, 1, 1, 1, 1, 1, 1], [4, 0, 8, 1, 5, 3, 9], [0, 5, 2, 5], [2, 2], [1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0], [3, 3, 2, 2, 3, 2, 2, 0], [], [], [0, 6, 1, 3], [], [1, 3, 2, 1, 0, 2, 1, 1, 1, 1, 2, 3, 3, 0, 0, 1, 0], [0, 1, 1], [2, 2, 2], [2], [1, 1]], "fitness": 99, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile ( ( int(4.0) \\l abs(( int(0.0) * i0 )) or not not ( mod(int(8.0),int(1.0)) != int(5.0) and not int(3.0) == mod(abs(abs(res0)),i1) ) ) and int(9.0) != in0 ):{:\\nb2 = not b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 1, 1, 7, 7, 4, 2, 3, 12, 4, 8, 0, 0, 4, 0, 17, 3, 3, 1, 2]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [2], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 1, 2, 0, 1, 2, 1, 1, 2, 0, 1, 0], [1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 7, 2, 8, 2, 4, 8, 8, 3, 2, 7, 1, 7, 7, 9, 2, 2, 0, 3, 3, 7, 8, 1, 1, 0, 4, 1, 2, 5, 9, 4, 4, 6, 5, 9], [4, 3, 0, 3, 1, 0], [1, 1, 0, 0, 2], [1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3, 1, 0, 1], [0, 0], [1, 1, 1], [1, 3, 6, 4, 5, 1, 1, 6, 6, 0, 4, 0, 4, 5, 5, 1, 4, 4, 6, 4, 6, 3, 4, 0, 6, 6, 3, 6, 2, 6, 3, 4, 4, 3, 2, 5, 3, 6, 5], [1, 1, 0, 0, 1], [2, 3, 2, 1, 3, 3, 3, 1, 1, 2, 1, 0, 0, 0, 1, 2, 3, 0, 2, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 1, 1, 1, 2, 1, 3, 2, 0, 0, 0, 2, 2, 0, 0, 3, 3, 1, 2, 1, 1, 2, 2, 0, 1, 1, 1, 2, 0, 3, 1, 3, 1, 3, 0, 3, 3, 3, 0, 2, 1, 0, 2, 0, 2, 0, 3, 1, 1, 1, 2, 0, 0, 0, 1, 3, 2, 2, 2, 1, 2, 3, 0, 3, 0, 2, 3, 1, 0, 1, 1, 0, 3, 1, 1, 3, 3, 3, 2, 0, 1, 0, 2, 1, 3, 2, 0, 0, 3, 0, 3, 2, 1, 0, 0, 1, 3, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 0, 1, 2, 2, 1, 0, 1, 0, 2, 2, 2, 2, 0, 1, 0, 2], [2, 0, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni1 *= divInt(abs(divInt(int(1.0),min(min(min(int(0.0), int(7.0)), divInt(int(2.0),in0)), res0))),in1)\\nloopBreak% = 0\\nwhile int(8.0) \\le mod(abs(in2),( i1 + int(2.0) )):{:\\nb1 = ( ( divInt(( mod(( ( divInt(int(4.0),divInt(mod(i1,int(8.0)),int(8.0))) - int(3.0) ) - ( int(2.0) + max(( res0 * res0 ), i0) ) ),( divInt(in1,i0) * max(max(int(7.0), ( int(1.0) - int(7.0) )), mod(divInt(in1,int(7.0)),int(9.0))) )) + int(2.0) ),mod(in2,min(int(2.0), max(int(0.0), max(in2, min(max(abs(i1), divInt(int(3.0),in1)), divInt(in1,mod(res0,abs(int(3.0)))))))))) * int(7.0) ) \\ge int(8.0) or divInt(in1,res0) \\l in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(1.0) \\ge max(( divInt(mod(int(1.0),( min(in1, max(i0, ( min(int(0.0), res0) + int(4.0) ))) - int(1.0) )),res0) + abs(int(2.0)) ), int(5.0)):{:\\nin0 -= abs(abs(abs(( res0 + int(9.0) ))))\\nb1 = True\\nif i2 \\g divInt(int(4.0),min(divInt(res0,in0), max(in1, min(mod(int(4.0),in1), in0)))):{:\\nb0 = b0\\n:}else:{:\\nb2 = int(6.0) \\l abs(i2)\\n:}\\nif True:{:\\nin2 = in0\\n:}else:{:\\nres0 = int(5.0)\\n:}\\n:}else:{:\\nin2 += int(9.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 4, 9, 36, 36, 6, 5, 1, 10, 6, 4, 2, 3, 39, 5, 132, 35, 27, 16, 22]}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0], [1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 5, 5, 9, 7, 0, 2, 5, 7, 4, 3, 9, 6, 4, 8, 8, 2, 6, 7, 7, 7, 3, 9, 9, 1, 7, 2, 4, 1, 6, 6, 4, 4, 8, 1, 3, 9, 1, 6, 6, 6, 8, 5, 4, 9, 1], [3, 4, 3, 4, 3, 0, 2, 0, 5], [0, 2, 2, 0], [0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 3, 3, 0], [0], [1, 0], [0, 4, 3, 2, 3, 3, 3, 1, 5, 0, 5, 3, 1, 5, 6, 6, 3, 5, 2, 5, 5, 3, 4, 1, 4, 2, 6, 1, 0, 5, 4, 5, 1, 6, 0, 3, 3, 5, 4, 4, 6, 2, 0, 0, 1, 0, 3, 2, 4, 6, 4, 6, 2, 5, 5, 6, 5, 4, 2, 6, 1, 6, 3, 6], [1, 1, 1, 0], [2, 1, 1, 0, 3, 3, 3, 0, 0, 3, 1, 2, 0, 2, 1, 2, 0, 1, 0, 1, 2, 0, 2, 0, 2, 0, 0, 3, 3, 3, 2, 1, 2, 1, 2, 2, 2, 0, 0, 1, 0, 3, 3, 1, 0, 3, 2, 0, 1, 0, 3, 0, 2, 0, 0, 2, 3, 0, 2, 0, 2, 1, 1, 2, 3, 3, 1, 3, 2, 3, 3, 1, 2, 3, 3, 2, 2, 1, 0, 3, 1, 2, 0, 2, 3, 1, 1, 2, 0, 1, 0, 0, 3, 0, 1, 1, 3, 0, 2, 3, 2, 0, 2, 0, 0, 2, 2, 1, 3, 0, 0, 0, 1, 0, 1, 3, 2, 2, 3, 1, 0, 0, 1, 2, 3, 1, 3, 0, 2, 2, 2, 0, 1, 0, 2, 2, 1, 1, 3, 1, 0, 0, 3, 0, 0, 0, 0, 3, 1, 0, 2, 1, 1, 1, 2, 1, 3, 3, 3, 2, 3, 2, 2, 1, 1, 3, 0, 3, 0, 3, 0, 1, 0, 1, 0, 3, 1, 2, 0, 2, 0, 0, 2, 3, 3, 2, 2, 0, 1, 1, 2, 3, 0, 3, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 0, 1, 1, 2, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2, 0, 0, 0, 2, 2, 0, 0, 2], [1, 1, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 0, 2, 1, 0, 2, 1, 0, 1, 2, 0], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= mod(int(9.0),int(9.0))\\nin1 -= in0\\nb0 = min(min(min(i2, in0), min(int(5.0), mod(in0,divInt(int(5.0),divInt(in0,int(9.0)))))), i1) \\ge int(7.0)\\nloopBreak% = 0\\nwhile True:{:\\nin2 += ( i0 - ( in2 * ( in0 - i1 ) ) )\\nif min(min(max(( int(0.0) * divInt(int(2.0),divInt(( divInt(in2,res0) * int(5.0) ),res0)) ), max(min(int(7.0), in0), abs(( in2 - int(4.0) )))), i2), min(in2, mod(in2,in0))) \\le ( max(in1, mod(i1,( int(3.0) * int(9.0) ))) - divInt(min(abs(int(6.0)), abs(mod(abs(min(int(4.0), divInt(abs(min(mod(( int(8.0) - in1 ),max(int(8.0), mod(i2,( max(int(2.0), int(6.0)) - mod(res0,int(7.0)) )))), i1)),i0))),abs(in2)))),int(7.0)) ):{:\\nb2 = int(7.0) \\ge abs(in1)\\n:}else:{:\\nloopBreak% = 0\\nwhile divInt(min(( in2 - ( i1 * res0 ) ), ( mod(int(3.0),max(i0, in0)) * in0 )),int(9.0)) \\le in2:{:\\nloopBreak% = 0\\nwhile int(9.0) \\ge min(( mod(min(int(1.0), in1),in1) + int(7.0) ), ( min(int(2.0), max(res0, divInt(divInt(mod(i2,int(4.0)),i0),mod(mod(int(1.0),int(6.0)),min(int(6.0), i0))))) * i1 )):{:\\nif max(i0, in0) \\l i2:{:\\nb2 = ( ( ( in1 == min(int(4.0), res0) and b0 ) or divInt(int(4.0),int(8.0)) \\l int(1.0) ) or divInt(int(3.0),min(max(max(divInt(abs(( ( int(9.0) - int(1.0) ) + min(in1, min(res0, min(i2, int(6.0)))) )),in2), int(6.0)), in2), abs(int(6.0)))) != ( res0 * mod(in2,in1) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 = ( abs(min(( ( res0 - int(8.0) ) + int(5.0) ), ( min(i1, abs(mod(res0,mod(int(4.0),int(9.0))))) - ( in0 * res0 ) ))) + int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 12, 12, 5, 7, 47, 47, 9, 4, 3, 14, 9, 5, 1, 2, 64, 4, 203, 52, 44, 26, 29]}, {"genotype": [[0], [1], [1], [], [0], [1, 1, 0, 1], [1, 7, 5, 8], [4], [0], [], [1], [0], [], [], [], [0, 3], [], [2, 0, 3, 2, 1, 1, 0, 1], [0, 1], [1], [1], [0]], "fitness": 99, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = ( i0 - max(divInt(int(1.0),int(7.0)), in0) ) \\le int(58.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 8, 2, 1, 1, 1]}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 0], [0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 7, 0, 1, 7, 3, 2, 0, 1, 2, 7, 3, 3, 0, 4, 0, 8, 0], [1, 0, 1], [2, 2], [1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0], [2, 3, 1, 3, 1, 2], [0, 0], [1], [6, 3, 1, 6, 5, 5, 5, 0, 1, 3, 5, 6, 3, 4, 4, 6, 6, 3, 6, 3, 3, 0, 2, 6, 2, 5, 2, 6, 4, 5, 2, 5, 0], [1], [3, 2, 3, 2, 1, 3, 0, 0, 2, 0, 2, 1, 1, 2, 0, 2, 2, 3, 1, 0, 3, 2, 0, 3, 2, 3, 0, 0, 3, 2, 0, 1, 1, 0, 3, 3, 2, 0, 3, 0, 0, 1, 0, 2, 2, 0, 2, 2, 3, 0, 0, 3, 0, 2, 3, 1, 1, 3, 3, 2, 3, 0, 3, 0, 1, 3, 2, 0, 0, 3, 2, 0, 1, 0, 2, 1, 0, 1, 2, 0, 0, 1, 2, 2, 3, 0, 2, 3, 0, 1, 3, 1, 2, 0, 2, 2, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 2, 1, 2, 1, 1, 0, 2, 1], [2, 0, 1, 0, 0, 1, 1, 2, 0, 0, 1, 2, 1, 0, 0, 2, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1]], "fitness": 99, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif not max(( min(( int(0.0) * abs(res0) ), in0) + ( i1 - ( int(2.0) + int(7.0) ) ) ), ( res0 + ( ( max(int(0.0), in2) - max(divInt(in2,max(mod(max(in2, i0),max(( i1 - int(1.0) ), int(7.0))), in0)), min(abs(( in2 * max(res0, in0) )), int(3.0))) ) + in1 ) )) \\g divInt(divInt(in1,divInt(mod(min(res0, res0),max(in0, ( min(int(2.0), int(0.0)) + abs(abs(( max(res0, abs(in0)) - int(1.0) ))) ))),max(( in0 * i0 ), max(( i2 - int(2.0) ), res0)))),( int(7.0) + i2 )):{:\\nb2 = ( True or ( True or int(3.0) \\l mod(in2,i2) ) )\\n:}else:{:\\nres0 += int(3.0)\\n:}\\nb2 = not ( ( min(in1, ( abs(in2) * int(0.0) )) - max(int(4.0), ( i2 + mod(mod(int(0.0),in2),int(8.0)) )) ) - i0 ) \\g int(0.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 987, "mapping_values": [1, 4, 4, 1, 3, 19, 19, 3, 2, 2, 9, 3, 6, 2, 1, 33, 1, 101, 27, 23, 19, 9]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [0, 0, 0, 2, 1, 1], [0], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 6, 6, 1, 8, 7, 0, 8, 5, 9, 1, 6, 5, 3, 3, 0, 4, 8, 6, 2, 3, 8, 5, 4, 5, 2, 6, 8, 2], [2, 0, 4], [2, 0, 2, 1, 0, 2, 1], [0], [0, 1, 0, 0, 1, 1, 0], [0, 0, 0], [3, 0, 0, 0], [], [1], [3, 0, 4, 3, 5, 1, 0, 0, 3, 4, 6, 0, 2, 1, 3, 2, 5, 6, 4], [0], [0, 1, 2, 1, 3, 3, 2, 1, 3, 1, 1, 3, 2, 0, 2, 2, 1, 1, 3, 1, 2, 2, 1, 1, 3, 2, 3, 1, 3, 2, 2, 0, 0, 2, 1, 3, 0, 3, 3, 0, 1, 2, 1, 1, 1, 3, 2, 0, 1, 2, 3, 1, 0, 1, 1, 0, 3, 2, 3, 3, 0, 3, 3, 2, 2, 2, 3, 1, 1, 1, 2, 2, 2, 3, 0, 3, 0, 1, 0, 1, 2, 3, 2, 1, 1, 2, 0, 1, 0, 0, 1, 3, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 2, 2, 2, 1, 0, 2, 1, 1, 0, 1, 2, 0, 1, 1, 0, 2, 1], [1, 2, 0, 0, 0, 2, 0, 2, 1, 2, 0, 2, 0, 2], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1]], "fitness": 99, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( in0 == int(2.0) and b0 )\\nb2 = b1\\ni0 = ( int(8.0) - min(max(( int(6.0) * min(int(6.0), int(1.0)) ), min(divInt(in1,mod(( int(8.0) + int(7.0) ),max(int(0.0), ( ( int(8.0) + int(5.0) ) + max(divInt(abs(int(9.0)),abs(( divInt(in0,in2) * ( int(1.0) + abs(i1) ) ))), max(min(i0, int(6.0)), divInt(int(5.0),int(3.0)))) )))), int(3.0))), abs(mod(i0,int(0.0)))) )\\nif ( max(int(4.0), in0) * int(8.0) ) \\l int(6.0):{:\\nb0 = in1 \\le max(( min(max(res0, abs(min(( divInt(( max(int(2.0), int(3.0)) - int(8.0) ),( ( mod(max(i0, min(i2, int(5.0))),i1) * int(4.0) ) + mod(abs(mod(int(5.0),int(2.0))),( in0 * int(6.0) )) )) + i2 ), in2))), int(8.0)) * max(res0, in1) ), int(2.0))\\n:}else:{:\\nb2 = b1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 1, 5, 30, 30, 3, 7, 1, 7, 3, 4, 0, 1, 19, 1, 95, 24, 23, 14, 10]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [2], [0], [0, 0, 0], [], [3, 1, 1], [1, 0], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = ( False and True )\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 3, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [3, 6], [1], [0], [], [], [1], []], "fitness": 99, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin0 -= res0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [0], [0, 1, 1], [5, 5, 7], [1], [2], [], [1], [0], [], [], [], [], [], [1, 1], [], [], [], []], "fitness": 99, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = int(55.0) \\g int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [], [], [1, 0, 2], [], [0, 0], [], [0, 1], [1], [], [], [], [], [], [], [], []], "fitness": 99, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = b0\\nb2 = False\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 3, 0, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 0, 1, 1], [2, 0, 2, 2, 0, 0], [1, 1, 0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 8, 9, 0, 4, 4, 9, 3, 5, 7, 1, 6, 6, 6, 0, 8, 7, 1, 1, 0, 5, 3, 3, 0, 5, 9, 2, 3, 8, 4, 9, 6, 6, 1, 5, 1, 3, 2, 2, 9, 6, 5, 7, 5, 4, 1, 3, 8, 1, 8, 4, 1, 8, 5, 8, 1, 6, 9, 0, 6, 6, 8, 5, 7, 4, 4, 5, 1, 7, 7, 4, 6, 8, 7, 4, 7, 9, 0, 1, 4, 5, 2, 9, 4, 2, 3, 9, 6, 5, 3, 5, 8, 2, 3, 8, 7, 3, 1, 0, 9, 8, 0, 9, 3, 0, 9, 0, 9, 6, 7, 0, 0, 3, 0, 5, 9, 2, 7, 4, 8, 0], [4, 1, 3, 3, 0], [1, 2], [], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [], [], [0], [1, 0, 1, 0, 6, 0, 4, 4, 2, 4, 4, 2, 6, 5, 0, 6, 5, 3, 3, 0, 6, 5, 1, 4, 6, 0, 6, 2, 2, 1, 6, 2, 4, 2, 4, 6, 1, 3, 0, 3, 6, 4, 4, 4, 5, 6, 3, 2, 3, 6, 1, 1, 6, 2, 4, 1, 3, 2, 2, 5, 0, 6, 4, 3, 0, 1, 0, 2, 2, 4, 0, 5, 3, 0, 2, 3, 3, 5, 5, 0, 5, 4, 6, 1, 5, 6, 5, 3, 5, 4, 1, 1, 1, 5, 2, 3, 1, 2, 5, 4, 6, 1, 1, 0, 5, 4, 1, 0, 6, 4, 4, 5, 0, 0, 3, 5, 3, 6, 3, 5, 5], [1], [0, 2, 2, 3, 0, 1, 3, 3, 3, 2, 1, 3, 3, 0, 3, 3, 2, 0, 3, 1, 1, 2, 1, 0, 2, 1, 2, 1, 0, 3, 1, 2, 2, 1, 1, 3, 0, 3, 2, 2, 1, 0, 1, 2, 0, 2, 1, 2, 3, 3, 0, 3, 1, 3, 3, 2, 2, 2, 3, 2, 0, 0, 1, 2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 1, 3, 3, 2, 3, 0, 3, 2, 0, 3, 3, 3, 3, 2, 3, 1, 3, 3, 3, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 3, 1, 2, 3, 2, 2, 0, 1, 0, 0, 0, 2, 0, 3, 0, 3, 3, 0, 2, 2, 2, 3, 3, 0, 0, 2, 3, 3, 1, 3, 1, 3, 0, 3, 2, 0, 2, 0, 3, 3, 1, 0, 0, 2, 3, 2, 0, 0, 0, 2, 3, 1, 0, 3, 3, 2, 2, 1, 0, 3, 0, 1, 2, 2, 3, 2, 3, 2, 3, 0, 1, 3, 1, 1, 1, 3, 3, 1, 3, 2, 1, 3, 2, 2, 3, 0, 3, 1, 0, 3, 2, 3, 0, 2, 2, 0, 3, 0, 2, 3, 1, 3, 1, 0, 1, 3, 2, 2, 0, 3, 2, 3, 0, 3, 2, 1, 1, 3, 0, 0, 1, 0, 3, 3, 1, 0, 2, 3, 3, 0, 2, 1, 3, 3, 2, 2, 0, 3, 2, 0, 1, 0, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 3, 2, 2, 1, 0, 3, 3, 0, 3, 2, 3, 1, 3, 2, 0, 2, 2, 0, 3, 0, 2, 3, 2, 3, 0, 1, 3, 2, 0, 3, 1, 1, 2, 2, 3, 2, 2, 2, 3, 0, 0, 3, 2, 1, 1, 1, 3, 0, 1, 1, 2, 1, 3, 1, 1, 1, 2, 1, 0, 0, 3, 0, 1, 1, 2, 3, 3, 3, 2, 0, 2, 3, 0, 1, 3, 2, 0, 3, 3, 3, 3, 2, 3, 3, 2, 1, 0, 3, 2, 3, 3, 0, 1, 0, 2, 0, 0, 1, 1, 3, 2, 1, 1, 0, 2, 1, 3, 3, 2, 3, 1, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 3, 0, 0, 3, 3, 2, 0, 3, 3, 3, 1, 2, 1, 1, 3, 2, 0, 0, 0, 3, 1, 2, 0, 1, 2, 3, 0, 0, 0, 0, 2, 1, 2, 2, 3, 0, 3, 0, 1, 1, 1, 1, 3, 2, 3, 0, 2, 3, 2, 3, 3, 0, 3, 3, 0, 1, 2, 0, 2, 2, 3, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0, 2, 1, 2, 1, 3, 3, 3, 2, 0, 2, 0, 0, 3, 2, 0, 2, 2, 2, 0, 3, 1, 1, 1, 0, 3, 3, 1, 2, 0, 1, 3, 3, 3, 3, 2, 1, 1, 1, 2, 3, 0, 1, 3, 0, 0, 2, 3, 1, 0, 2, 1, 1, 1, 2, 1, 2, 3, 0, 1, 0, 3, 0, 0, 1, 0], [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 2, 1, 0, 1, 2, 2, 2, 2, 0, 1, 2, 0, 1, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 1, 0, 1, 2, 2, 1, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 2, 2, 2, 0, 0, 1, 1, 0, 1, 2, 1, 1, 0, 2, 0, 0, 2, 1, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 2, 2, 1, 0, 1, 1, 2, 1, 1, 2, 1, 0, 2, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 1, 1, 1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 0, 1, 2, 1, 2, 2, 1, 1, 2, 1], [0, 0, 1, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 1, 0, 2, 2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 2, 0, 1, 0, 0, 2, 1, 1, 2, 2, 0, 1, 0, 2, 2, 0, 1, 2, 0, 2, 0, 1, 1, 0, 1, 1, 2, 0, 2, 1, 1, 0, 0, 0, 1, 2, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0]], "fitness": 99, "tree_depth": 119, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nloopBreak% = 0\\nwhile i1 \\le divInt(divInt(min(i0, int(7.0)),min(min(abs(( int(4.0) + max(min(i1, max(abs(( i0 + abs(int(8.0)) )), int(9.0))), mod(int(0.0),res0)) )), mod(int(4.0),mod(int(4.0),i0))), abs(int(9.0)))),( divInt(int(3.0),int(5.0)) - abs(in1) )):{:\\nb1 = min(mod(divInt(int(7.0),in1),int(1.0)), mod(i2,divInt(int(6.0),divInt(max(abs(in1), min(int(6.0), max(min(divInt(( mod(abs(( in1 + i2 )),int(6.0)) * ( int(0.0) * int(8.0) ) ),int(7.0)), divInt(int(1.0),res0)), mod(( in2 * i0 ),int(1.0))))),abs(abs(divInt(min(res0, min(( in2 + max(min(min(min(mod(max(int(0.0), min(max(abs(in0), ( mod(int(5.0),in0) + int(3.0) )), abs(( ( ( ( ( max(int(3.0), divInt(min(( ( i0 * int(0.0) ) * res0 ), in2),i1)) + mod(in1,max(res0, abs(max(i0, ( divInt(divInt(max(max(res0, i2), ( abs(max(int(5.0), min(int(9.0), max(i2, min(( i1 + ( res0 + min(min(int(2.0), i2), in1) ) ), divInt(max(( i2 * in1 ), res0),( abs(int(3.0)) - i1 ))))))) + max(max(( ( int(8.0) - in0 ) - min(i0, int(4.0)) ), mod(( abs(( min(( min(in0, int(9.0)) + min(int(6.0), int(6.0)) ), int(1.0)) * abs(abs(int(5.0))) )) + min(mod(int(1.0),max(( ( max(res0, max(int(3.0), in1)) - max(( min(in1, ( ( in1 + max(in2, ( min(int(2.0), max(int(2.0), res0)) * int(9.0) )) ) * min(mod(mod(in0,abs(( abs(i2) + abs(( int(6.0) * int(5.0) )) ))),min(in0, res0)), int(7.0)) )) * i1 ), min(max(int(5.0), i1), mod(max(min(res0, ( int(4.0) - max(abs(( divInt(i2,max(( in1 * int(1.0) ), i1)) + int(3.0) )), int(8.0)) )), int(1.0)),in0))) ) * mod(int(8.0),int(4.0)) ), int(1.0))), int(8.0)) ),divInt(max(( ( int(5.0) - i2 ) - min(abs(i2), min(divInt(min(int(8.0), abs(( in2 * divInt(( i0 + max(res0, mod(abs(( abs(in1) - int(1.0) )),max(divInt(in0,abs(int(6.0))), int(9.0)))) ),mod(( min(divInt(divInt(( min(i0, i1) + min(( int(0.0) + int(6.0) ), int(6.0)) ),abs(i0)),int(8.0)), int(5.0)) * divInt(int(7.0),max(int(4.0), int(4.0))) ),int(5.0))) ))),( int(1.0) - i2 )), i2)) ), min(in1, int(7.0))),int(7.0)))), ( abs(abs(max(( i0 - mod(min(in2, int(4.0)),max(( in0 * max(abs(max(max(mod(abs(max(mod(int(6.0),i0), min(divInt(abs(max(i2, int(8.0))),in0), mod(in0,in2)))),int(7.0)), int(4.0)), abs(( int(7.0) * int(9.0) )))), in2) ), ( int(0.0) + min(max(divInt(min(int(1.0), int(4.0)),int(5.0)), int(2.0)), mod(mod(int(9.0),i0),int(4.0))) ))) ), in2))) - in1 )) )),int(2.0)),int(3.0)) + int(9.0) ))))) ) * int(6.0) ) * int(5.0) ) + abs(res0) ) - i1 )))),abs(max(( in2 * min(min(abs(int(3.0)), ( int(5.0) + int(8.0) )), min(mod(res0,in2), in0)) ), min(int(2.0), mod(in2,int(3.0)))))), ( min(in1, i1) * i1 )), i1), ( int(8.0) + ( ( abs(in2) - max(i2, int(7.0)) ) - int(3.0) ) )), int(1.0)) ), int(0.0))),min(( min(in0, ( max(( max(max(i1, abs(abs(i2))), int(9.0)) + mod(in2,mod(mod(min(( in1 - res0 ), i1),i1),int(8.0))) ), mod(int(0.0),int(9.0))) - i0 )) * ( int(3.0) + divInt(int(0.0),abs(abs(abs(divInt(in2,( in1 * i1 )))))) ) ), max(( i0 - ( ( divInt(res0,max(int(9.0), int(0.0))) - int(9.0) ) + in1 ) ), min(min(int(6.0), ( in1 + int(7.0) )), max(abs(max(abs(( int(0.0) + int(0.0) )), int(3.0))), mod(abs(in2),int(0.0))))))))))))) \\g max(i0, i0)\\nloopBreak% = 0\\nwhile mod(max(int(5.0), in0),divInt(int(9.0),int(2.0))) \\ge int(7.0):{:\\nif ( int(4.0) - ( abs(in2) * int(8.0) ) ) \\ge in0:{:\\nres0 += max(in0, in2)\\n:}\\nb2 = int(0.0) \\l in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 3, 3, 122, 122, 5, 2, 0, 5, 5, 0, 0, 1, 121, 1, 519, 130, 147, 72, 59]}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 1, 2, 2, 1, 0, 2, 0, 2, 1], [0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 5, 2, 7, 2, 2, 9, 2, 3, 9, 1, 5, 8, 0, 5, 6, 0, 9, 1, 0, 6, 6, 4, 5, 1, 7, 1, 8, 0, 3, 8, 4, 6, 4, 5, 2, 7, 8, 2, 7, 2, 5, 2, 6, 0], [4, 2, 2, 4, 4, 5, 4, 5, 4, 4, 1], [2, 2, 2, 2, 1, 0], [0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 3, 0, 2, 3], [], [1, 1, 1], [3, 0, 6, 4, 5, 5, 6, 0, 4, 3, 6, 0, 2, 6, 6, 3, 1, 6, 2, 5, 6, 6, 6, 3, 2, 3, 2, 0, 1, 3, 2, 3, 5, 2, 5, 1, 0, 2, 1, 4, 2], [0, 1], [2, 0, 2, 2, 1, 2, 1, 2, 0, 0, 0, 0, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 2, 2, 1, 3, 0, 0, 1, 2, 1, 1, 3, 1, 0, 1, 2, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2, 1, 3, 1, 3, 2, 1, 2, 2, 2, 2, 0, 1, 0, 3, 2, 3, 2, 3, 0, 1, 0, 3, 0, 0, 0, 0, 3, 3, 1, 2, 1, 3, 3, 2, 0, 0, 2, 2, 0, 0, 0, 1, 2, 3, 1, 0, 3, 3, 0, 0, 2, 2, 1, 2, 2, 1, 3, 0, 1, 0, 0, 2, 1, 3, 1, 3, 0, 3, 0, 1, 0, 2, 1, 3, 2, 0, 3, 2, 3, 1, 1, 3, 2, 1, 2, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 3, 2, 1, 2, 3, 0, 3, 1, 0, 2, 0, 2, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 2, 1, 2, 0, 1, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0], [0, 2, 0, 1, 0, 2, 0, 1, 2, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1]], "fitness": 99, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( in0 + ( mod(int(7.0),( int(8.0) * mod(i0,res0) )) + in1 ) ) \\le in2:{:\\nloopBreak% = 0\\nwhile int(5.0) == int(2.0):{:\\nif not int(7.0) == max(( in2 - mod(res0,int(2.0)) ), int(2.0)):{:\\nb2 = ( ( int(9.0) + min(i0, in1) ) * int(2.0) ) \\le ( int(3.0) + int(9.0) )\\n:}else:{:\\nb2 = max(int(1.0), in0) \\le int(5.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif ( abs(max(abs(int(8.0)), max(max(abs(int(0.0)), int(5.0)), divInt(int(6.0),abs(int(0.0)))))) - abs(mod(int(9.0),mod(( mod(divInt(res0,int(1.0)),i0) * abs(mod(abs(( abs(i2) - int(0.0) )),res0)) ),max(res0, in0)))) ) != i1:{:\\nloopBreak% = 0\\nwhile not not res0 \\le max(min(int(6.0), ( int(6.0) - abs(max(mod(i2,in2), mod(divInt(res0,res0),res0))) )), int(4.0)):{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = mod(abs(int(5.0)),i2)\\n:}\\nloopBreak% = 0\\nwhile min(max(in0, i2), ( mod(int(1.0),mod(divInt(int(7.0),min(i0, int(1.0))),i1)) + in0 )) != ( int(8.0) - abs(int(0.0)) ):{:\\ni2 -= abs(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( max(in2, int(3.0)) \\le i2 and b1 ):{:\\nb0 = not ( ( int(8.0) - max(mod(in2,max(mod(min(int(4.0), int(6.0)),min(( int(4.0) + divInt(int(5.0),i1) ), int(2.0))), i0)), ( ( int(7.0) + int(8.0) ) * int(2.0) )) ) \\le int(7.0) and min(( int(2.0) * ( min(i2, min(int(5.0), i1)) - divInt(in1,mod(i2,int(2.0))) ) ), int(6.0)) \\g int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 13, 13, 7, 6, 46, 46, 11, 6, 2, 19, 11, 8, 0, 3, 41, 2, 158, 40, 33, 20, 21]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 2, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 2, 1, 1], [0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 6, 0, 0, 0, 4, 9, 0, 3, 8, 5, 7, 1, 6, 8, 2, 3, 1, 9, 3, 1, 2, 2, 8, 0, 5, 0, 4, 4, 9, 6, 1, 0, 7, 8, 0, 4, 7, 5, 9, 5, 6, 7, 2, 3, 5, 8, 2, 5, 3, 1, 0, 7, 6, 9, 9, 5, 0, 4, 1, 7, 0, 1], [3, 3, 1, 3, 3, 3, 1, 4, 2, 0, 0], [0, 0, 0, 2, 1], [0, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 3, 3, 2, 3, 2], [1, 1, 1], [1, 1, 1, 0], [0, 6, 4, 1, 4, 0, 0, 1, 3, 0, 0, 6, 4, 4, 0, 3, 6, 3, 4, 5, 0, 5, 4, 0, 5, 0, 4, 2, 6, 1, 0, 5, 1, 1, 2, 0, 4, 1, 0, 0, 6, 4, 6, 3, 6, 5, 4, 0, 4, 1, 5, 5, 1, 5, 4, 5, 0, 5, 3, 6, 3, 5, 4, 2, 3, 5, 1, 1, 2, 0, 4, 2, 3, 3, 5, 1, 6, 5], [1, 0, 0, 0, 0, 1, 0], [1, 1, 2, 2, 2, 2, 0, 3, 0, 0, 1, 1, 0, 3, 0, 1, 1, 1, 1, 2, 1, 3, 1, 2, 0, 1, 3, 0, 2, 3, 1, 2, 1, 0, 1, 1, 1, 0, 1, 3, 3, 3, 1, 1, 0, 1, 1, 0, 3, 2, 2, 3, 3, 3, 3, 1, 3, 1, 1, 2, 2, 3, 3, 0, 2, 3, 0, 1, 2, 3, 3, 0, 3, 1, 0, 2, 3, 3, 2, 2, 0, 1, 3, 3, 0, 1, 2, 1, 0, 0, 3, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 1, 2, 0, 1, 1, 3, 3, 0, 3, 1, 3, 2, 0, 1, 1, 3, 0, 0, 2, 3, 2, 1, 0, 0, 3, 3, 2, 2, 3, 0, 2, 1, 1, 2, 0, 2, 3, 3, 1, 1, 0, 0, 0, 0, 0, 2, 3, 0, 3, 3, 2, 0, 3, 3, 0, 2, 0, 2, 3, 1, 0, 0, 2, 0, 2, 3, 1, 2, 3, 2, 0, 3, 1, 3, 3, 3, 3, 3, 2, 1, 2, 2, 3, 3, 3, 2, 0, 0, 2, 3, 3, 0, 1, 3, 1, 3, 2, 0, 0, 2, 0, 2, 0, 1, 1, 1, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 1, 2, 1, 1, 0, 3, 2, 1, 2, 1, 3, 0, 2, 2, 0, 3, 0, 1, 3, 3, 1, 3, 2, 0, 2, 1, 2, 2, 0, 1, 0, 2, 2, 0, 2, 0, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0], [2, 1, 2, 1, 0, 2, 2, 2, 0, 2, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 0, 2, 0, 0, 0, 1, 1, 0, 2, 1, 0, 2, 0, 2, 1, 2, 1, 0, 0, 1, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 2, 2, 1, 2, 1, 0, 2, 0, 0, 2], [1, 2, 0, 0, 2, 1, 1, 0, 2, 0, 1, 1, 0, 2, 1, 1, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 1, 0, 1, 1, 1, 0, 2], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]], "fitness": 99, "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni0 -= int(3.0)\\nres0 = int(1.0)\\nif False:{:\\nin1 = ( ( ( divInt(i1,abs(in1)) * i0 ) + int(6.0) ) + int(0.0) )\\nif False:{:\\ni0 = i1\\n:}else:{:\\nin0 = max(i0, int(0.0))\\n:}\\n:}else:{:\\nb0 = int(0.0) \\ge int(4.0)\\nif False:{:\\ni0 *= int(9.0)\\n:}else:{:\\nb0 = mod(int(0.0),abs(int(3.0))) \\ge divInt(res0,int(8.0))\\n:}\\n:}\\nloopBreak% = 0\\nwhile max(in1, mod(min(int(5.0), divInt(int(7.0),in1)),int(1.0))) \\g int(6.0):{:\\nb0 = int(8.0) \\ge i0\\nin0 = int(2.0)\\nif abs(abs(abs(int(3.0)))) \\ge int(1.0):{:\\nloopBreak% = 0\\nwhile ( res0 \\ge int(9.0) and ( int(3.0) \\g in0 or not min(divInt(( abs(min(max(abs(int(1.0)), abs(int(2.0))), int(2.0))) - mod(( max(min(in1, ( abs(in2) - int(8.0) )), ( abs(abs(i0)) + min(int(0.0), in2) )) * divInt(max(abs(mod(( in1 + int(5.0) ),min(abs(i0), int(0.0)))), ( int(4.0) - in2 )),i0) ),min(in1, max(i2, int(4.0)))) ),divInt(int(9.0),min(res0, max(( int(6.0) - divInt(i1,int(1.0)) ), int(0.0))))), abs(min(i0, min(int(7.0), abs(( in2 + int(8.0) )))))) \\le int(0.0) ) ):{:\\nb2 = ( min(i1, i1) == divInt(min(mod(int(4.0),i2), i0),min(max(( mod(max(in1, ( int(7.0) * int(5.0) )),( i1 - mod(min(abs(int(9.0)), int(5.0)),i0) )) - i0 ), res0), in1)) or not res0 \\l mod(max(in0, min(abs(mod(res0,min(abs(in2), ( in1 * divInt(max(int(6.0), i0),in1) )))), ( i1 * divInt(abs(int(7.0)),divInt(max(( in2 + min(int(2.0), min(max(min(max(max(( int(3.0) - divInt(divInt(min(min(abs(( in2 * i1 )), ( min(min(in2, int(5.0)), abs(int(8.0))) * min(( in1 + in2 ), ( i0 + divInt(in2,int(2.0)) )) )), int(5.0)),int(3.0)),min(max(in0, res0), abs(abs(in0)))) ), in2), in1), i2), int(1.0)), ( int(0.0) + int(7.0) ))) ), in0),max(( int(6.0) * ( int(9.0) * abs(in2) ) ), divInt(( i1 - max(i1, int(9.0)) ),min(abs(int(5.0)), min(divInt(i2,( int(0.0) + mod(( i0 - int(4.0) ),in1) )), divInt(mod(i2,( in0 - in0 )),in2))))))) ))),( int(1.0) - min(i1, res0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( ( int(7.0) + in2 ) * abs(int(0.0)) ) \\l int(1.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 18, 18, 6, 12, 64, 64, 11, 5, 3, 19, 11, 8, 3, 4, 78, 7, 267, 60, 72, 34, 28]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [2, 0, 1, 2, 1, 1], [0, 0], [1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 0, 8, 7, 5, 9, 1, 0, 6, 0, 6, 3, 1, 9, 6, 6, 2], [4, 2], [], [0], [0, 1, 0, 1], [0, 0], [3, 1], [1], [0, 0], [6, 3, 0, 1, 3, 1, 1, 0, 3, 3, 5, 5, 6, 2, 0, 2, 0, 6, 5, 4, 0, 6, 0, 1, 2], [1, 0, 1, 1], [0, 3, 1, 0, 1, 3, 0, 2, 2, 1, 0, 3, 3, 0, 3, 0, 0, 3, 0, 3, 1, 2, 2, 3, 0, 0, 3, 1, 3, 3, 3, 1, 0, 2, 2, 3, 0, 1, 0, 2, 1, 3, 2, 0, 0, 3, 2, 0, 0, 3, 3, 1, 3, 1, 1, 2, 1, 3, 1, 2, 1, 3, 3, 2, 0, 0, 3, 1, 3, 3, 3, 1, 0, 2, 2, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [2, 2, 0, 2, 0, 0, 2, 1, 0, 2, 1, 2, 0, 0, 0, 1, 0, 0, 1, 2, 0, 1, 1, 1, 2], [1, 2, 0, 2, 1, 2, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 1]], "fitness": 99, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( res0 \\le abs(int(1.0)) and False ):{:\\nin0 -= i0\\ni1 = int(9.0)\\nif abs(in0) == ( ( int(0.0) * i1 ) + min(abs(i1), min(i0, in0)) ):{:\\nin0 *= min(in2, abs(int(8.0)))\\n:}\\nin2 -= ( ( max(res0, i2) * min(int(7.0), abs(max(abs(int(5.0)), i0))) ) * divInt(mod(min(i2, int(9.0)),i0),mod(int(1.0),min(divInt(res0,in2), min(mod(in1,i0), max(min(int(0.0), min(int(6.0), int(0.0))), mod(int(6.0),max(int(3.0), mod(int(1.0),abs(min(divInt(res0,i0), max(int(9.0), max(max(abs(int(6.0)), i1), mod(( i2 * int(6.0) ),int(2.0)))))))))))))) )\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 6, 6, 2, 4, 18, 18, 2, 0, 1, 4, 2, 2, 1, 2, 25, 4, 78, 14, 25, 8, 9]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [8, 1], [], [], [], [], [], [], [], [], [5], [1], [1], [], [], [2], []], "fitness": 99, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nin2 *= int(81.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 0, 6, 1, 0, 3, 1, 8, 5, 5, 9, 3, 6, 2, 9], [5, 1], [0, 2], [], [0, 1, 1], [0, 0], [2], [], [], [4, 6, 3, 4, 1, 3, 1, 3, 2, 6, 2, 1, 0, 2, 4, 1, 3, 1, 0, 1, 4, 6, 4, 4, 1], [1], [2, 2, 1, 2, 2, 2, 0, 3, 0, 0, 2, 0, 1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 3, 2, 3, 3, 1, 3, 2, 3, 0, 0, 2, 0, 2, 2, 2, 0, 3, 2, 3, 1, 1, 0, 0, 0, 2, 1, 3, 3, 0, 3, 1, 0, 0, 2, 3, 1, 0, 0, 3, 0, 1, 1, 3, 3, 0, 1, 1, 3, 2, 3, 2, 0, 0, 1, 3, 1, 1, 3, 0, 0], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [2, 1, 0, 0, 1, 1, 0, 1, 2, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0, 2, 1, 2], [1, 2, 2, 1, 1, 1, 1, 0, 2, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0]], "fitness": 99, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = not ( mod(int(1.0),divInt(divInt(mod(in1,abs(res0)),in0),( in1 - int(7.0) ))) * max(( min(min(mod(i1,in0), int(0.0)), mod(( max(mod(max(min(int(6.0), max(( abs(i1) * in0 ), divInt(i2,( ( ( res0 - max(( max(int(1.0), int(0.0)) - i2 ), i1) ) - i0 ) - mod(int(3.0),max(max(i2, abs(int(1.0))), in1)) )))), i1),( min(int(8.0), in0) + i1 )), abs(i0)) * int(5.0) ),int(5.0))) - abs(abs(i1)) ), int(9.0)) ) != int(3.0)\\nb2 = min(divInt(abs(( in1 - res0 )),int(6.0)), max(int(2.0), int(9.0))) \\g abs(in1)\\nin1 -= i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "other_info": {}, "test_fitness": 991, "mapping_values": [1, 3, 3, 0, 3, 16, 16, 2, 2, 0, 3, 2, 1, 0, 0, 25, 1, 83, 21, 22, 12, 10]}, {"genotype": [[0], [1], [1], [], [1], [0, 0, 1], [2, 3, 5], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(235.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 2, 6, 1, 1, 8, 7, 8, 3, 2, 8, 0, 2, 1, 8, 5, 2, 9, 1, 2, 3, 4, 5, 0], [4], [], [], [1], [0], [], [], [1], [3, 6, 4, 3, 4, 2, 1, 6, 1, 2, 3, 3, 3, 4, 0, 5, 6, 5, 6, 2], [0, 1], [3, 1, 2, 3, 0, 2, 3, 2, 1, 1, 0, 3, 1, 3, 2, 3, 2, 1, 1, 2, 3, 0, 1, 0, 2, 3, 2, 3, 0, 2, 1, 2, 0, 1, 3, 2, 0, 3, 1, 1, 2, 3, 0, 1, 3, 1, 0, 1, 2, 3, 1, 2, 1, 0, 3, 2, 1, 0, 2, 3, 2, 2, 1, 0, 1, 2, 0, 3, 0, 2, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 1, 2, 0, 1, 3, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 2, 0, 1, 1, 1, 0, 1, 2, 2, 1, 0, 1, 1, 1, 0, 0, 2, 1, 2, 0], [2, 1, 1, 1, 2, 0, 1, 2, 2, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0]], "fitness": 100, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif min(int(2.0), divInt(abs(in0),( min(mod(int(6.0),int(2.0)), res0) * max(int(6.0), max(divInt(max(( int(1.0) - int(1.0) ), ( min(in1, int(8.0)) - in0 )),mod(max(( abs(in1) - ( int(7.0) * divInt(i2,int(8.0)) ) ), abs(mod(i1,max(int(3.0), int(2.0))))),divInt(min(res0, int(8.0)),max(int(0.0), i1)))), int(2.0))) ))) \\le ( max(int(1.0), ( int(8.0) + i2 )) - max(divInt(int(5.0),in0), mod(min(( ( int(2.0) * in0 ) * int(9.0) ), mod(in0,min(in1, divInt(abs(( int(1.0) + i0 )),max(in2, int(2.0)))))),( int(3.0) - abs(int(4.0)) ))) ):{:\\nres0 = ( in2 + int(5.0) )\\n:}else:{:\\nres0 -= min(i2, int(0.0))\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 3, 3, 1, 2, 25, 25, 1, 0, 0, 1, 1, 0, 0, 1, 20, 2, 87, 23, 21, 13, 11]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 8, 2, 9, 9, 3, 0, 3, 5, 8, 3, 8, 6, 9, 8, 4, 4, 7, 4, 4, 4, 9, 5, 2, 2, 1, 9, 1, 9, 4, 2, 2], [3], [1], [], [1], [0], [], [], [], [6, 2, 4, 2, 1, 5, 4, 4, 3, 6, 1, 5, 4, 0, 3, 1, 0, 4, 0, 5, 6, 3, 2, 0, 1, 4, 5, 5, 1, 3, 1, 4, 3, 3, 0, 0, 6, 6, 3, 6, 3, 1, 4, 1, 0, 0, 6, 1, 4, 4, 3, 6, 0, 4, 6, 2, 1, 1, 3], [0, 1], [3, 0, 3, 2, 3, 2, 0, 0, 2, 0, 2, 1, 2, 1, 3, 3, 0, 3, 3, 3, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 2, 2, 3, 0, 3, 0, 2, 0, 0, 2, 1, 2, 0, 2, 0, 2, 3, 0, 2, 0, 0, 3, 0, 2, 2, 0, 2, 2, 3, 2, 0, 1, 0, 0, 0, 1, 3, 0, 3, 1, 3, 3, 3, 0, 2, 0, 1, 2, 1, 1, 0, 2, 0, 2, 2, 2, 3, 3, 2, 3, 1, 3, 0, 0, 2, 0, 0, 2, 2, 3, 1, 3, 3, 2, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 2, 1, 3, 3, 1, 3, 3, 0, 1, 2, 1, 1, 0, 2, 2, 3, 1, 0, 0, 2, 0, 3, 0, 2, 0, 1, 1, 1, 2, 3, 3, 1, 2, 1, 0, 0, 1, 0, 2, 1, 3, 2, 1, 0, 0, 2, 2, 0, 3, 1, 1, 3, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 1, 0, 0, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 2, 0, 1, 2, 1, 1, 1, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 2, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 0, 0, 2, 2], [2, 1, 0, 2, 0, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 2, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0]], "fitness": 100, "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = max(i2, abs(( min(( in1 * i2 ), ( i1 - ( int(1.0) + ( int(9.0) * max(abs(in2), max(max(max(int(8.0), min(in1, ( abs(( int(2.0) + abs(min(min(mod(divInt(abs(in1),min(in0, divInt(res0,i1))),( int(9.0) + ( in2 - mod(in1,mod(max(i0, mod(in0,i1)),min(i0, divInt(( in1 * ( divInt(min(mod(i0,int(9.0)), in2),res0) + in0 ) ),int(3.0))))) ) )), max(i2, max(int(0.0), max(max(abs(i0), ( i1 + int(3.0) )), mod(int(5.0),int(8.0)))))), in1)) )) - mod(in2,( mod(( max(abs(( min(int(3.0), min(in2, i1)) * ( in0 * i1 ) )), ( divInt(abs(int(8.0)),abs(min(( min(( min(min(( in1 - in0 ), ( int(6.0) + mod(int(9.0),in0) )), int(8.0)) + i0 ), ( int(4.0) * max(abs(int(4.0)), max(max(i0, int(7.0)), mod(int(4.0),int(4.0)))) )) - res0 ), divInt(mod(max(int(4.0), res0),in0),mod(res0,max(in0, divInt(i1,int(9.0)))))))) * int(5.0) )) + int(2.0) ),divInt(max(max(int(2.0), divInt(int(1.0),in1)), i1),int(9.0))) - i0 )) ))), divInt(int(1.0),max(( int(9.0) + i0 ), res0))), ( ( i1 + max(int(4.0), int(2.0)) ) + min(in1, max(abs(max(in1, in0)), min(min(abs(res0), i0), int(2.0)))) ))) ) ) )) * in1 )))\\nres0 -= i2\\nb1 = i1 \\ge divInt(i1,abs(in0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 3, 3, 0, 3, 33, 33, 1, 1, 0, 1, 1, 0, 0, 0, 59, 2, 189, 48, 51, 26, 23]}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 0, 1, 2, 2, 2, 1, 0], [0, 1, 0, 1], [0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 4, 3, 0, 1, 8, 1, 9, 9, 4, 8, 6, 7, 0, 8, 5, 5], [2, 3, 0, 2, 1], [1, 0, 2, 0, 0], [0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0], [2, 0, 1, 1, 0, 3, 3, 3, 2, 1], [0, 0, 0], [0, 0], [6, 1, 3, 4, 2, 5, 2, 6, 1, 6, 6, 5, 5, 4, 4, 4, 0, 1, 6], [0, 0], [1, 1, 2, 2, 0, 3, 1, 3, 2, 0, 0, 3, 2, 0, 0, 1, 0, 1, 2, 3, 0, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 3, 0, 1, 2, 3, 0, 1, 0, 1, 3, 0, 0, 0, 1, 1, 2, 1, 0, 0, 3, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 0, 2, 2, 0, 2, 2, 1], [1, 0, 1, 1, 2, 1, 1, 1], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]], "fitness": 100, "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb1 = not b0\\nif True:{:\\nb2 = True\\nb0 = b0\\nloopBreak% = 0\\nwhile ( ( int(5.0) == int(0.0) and mod(( res0 - abs(int(4.0)) ),max(divInt(i1,in0), min(( in1 + i2 ), int(3.0)))) \\ge in2 ) or int(0.0) \\l divInt(abs(i2),( int(1.0) - mod(res0,( int(8.0) - mod(mod(divInt(divInt(int(1.0),( ( ( ( divInt(int(9.0),abs(min(i1, int(9.0)))) * divInt(abs(res0),int(4.0)) ) - res0 ) - int(8.0) ) - abs(in2) )),in2),in1),int(6.0)) )) )) ):{:\\nif ( int(7.0) == divInt(int(0.0),in1) and in1 \\g max(i0, int(8.0)) ):{:\\nloopBreak% = 0\\nwhile not True:{:\\ni1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(5.0)\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 9, 9, 4, 5, 18, 18, 5, 5, 3, 15, 5, 10, 3, 2, 19, 2, 63, 19, 9, 8, 11]}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 0], [0], [1, 1, 1], [1, 1, 1, 1, 1], [6, 6, 9, 6, 9], [3], [], [], [1], [0], [], [], [1], [0, 5, 1, 3, 4, 6], [1, 1, 1], [1, 3, 2, 2, 3, 0, 0, 1, 1, 0, 1, 1], [1, 0], [2, 0], [1, 1, 1, 0], [1]], "fitness": 100, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif int(6.0) \\ge abs(mod(( min(i0, in2) - int(6.0) ),int(9.0))):{:\\ni1 -= in0\\n:}else:{:\\nin1 -= int(6.0)\\n:}\\nres0 += int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 989, "mapping_values": [1, 4, 4, 1, 3, 5, 5, 1, 0, 0, 1, 1, 0, 0, 1, 6, 3, 12, 2, 2, 4, 1]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 5, 5, 4, 1, 9, 1], [3], [0], [], [1], [0], [], [], [], [6, 1, 4, 2, 3, 6, 3, 5, 4, 5, 0, 6], [1], [3, 2, 0, 2, 3, 3, 0, 0, 1, 2, 2, 3, 0, 1, 1, 0, 1, 0, 3, 2, 3, 0, 2, 3, 2, 3, 0, 1, 3, 2, 3, 0, 0, 1, 0, 1, 3, 1], [0, 0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 2, 0, 1, 2, 2], [0, 2, 0, 2], [1, 1, 0, 0, 1]], "fitness": 100, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += max(( i1 * ( max(max(in1, i2), int(2.0)) + mod(mod(min(in0, int(9.0)),int(5.0)),res0) ) ), int(5.0))\\nb0 = in0 \\ge min(divInt(max(in2, divInt(abs(( min(in1, int(4.0)) * max(mod(abs(in2),i0), int(1.0)) )),res0)),int(9.0)), abs(int(1.0)))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 2, 2, 0, 2, 8, 8, 1, 1, 0, 1, 1, 0, 0, 0, 12, 1, 38, 8, 11, 4, 5]}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 2, 0, 1, 0, 0, 0, 0], [0], [1, 1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 4, 5, 4, 2, 9, 8, 8, 6, 9, 9, 8, 0, 2, 9, 3, 4, 1, 6, 6, 7, 0, 0, 2], [0, 1, 0, 0], [0, 0, 0, 0, 0], [], [1, 0, 0, 1, 1, 1], [0, 0, 0, 0], [2, 0], [], [1], [6, 3, 5, 3, 2, 6, 1, 0, 4, 0, 6, 2, 3, 5, 0, 2, 4, 3], [1, 0, 1, 1, 1], [2, 1, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 2, 3, 0, 3, 1, 0, 2, 2, 1, 2, 3, 1, 0, 3, 3, 2, 3, 3, 3, 1, 2, 1, 1, 3, 1, 3, 3, 2, 2, 0, 3, 2, 3, 3, 0, 1, 1, 3, 0, 2, 1, 0, 1, 1, 3, 1, 0, 1, 2, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 1, 2, 1], [0, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1], [1, 0]], "fitness": 100, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += mod(int(5.0),( in0 + int(3.0) ))\\nin2 = ( in0 - int(4.0) )\\ni2 *= int(5.0)\\nif int(4.0) \\l res0:{:\\ni1 -= int(2.0)\\nb0 = not b0\\n:}else:{:\\nb0 = int(9.0) \\g i0\\nb0 = int(8.0) \\l ( min(in1, min(int(8.0), i0)) - ( ( int(6.0) - ( min(int(9.0), res0) * abs(abs(( abs(max(min(int(9.0), ( int(8.0) - int(0.0) )), abs(int(2.0)))) + min(min(divInt(( i2 - min(( min(max(in0, int(9.0)), int(3.0)) - abs(in2) ), ( int(4.0) - i0 )) ),int(1.0)), int(6.0)), max(int(6.0), i2)) ))) ) ) - int(7.0) ) )\\n:}\\nb0 = ( int(0.0) - int(0.0) ) \\l int(2.0)\\nin1 -= in0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 10, 10, 1, 9, 25, 25, 4, 5, 0, 6, 4, 2, 0, 1, 18, 5, 68, 14, 16, 16, 2]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 1], [1, 1], [2, 7], [5, 0], [0, 2], [], [1, 1], [0, 0], [], [], [], [1, 0, 1, 2, 6, 4], [1], [0, 2, 0, 3, 1, 0, 3, 3, 1, 0, 0], [0], [2, 2, 0], [0, 1], []], "fitness": 100, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb0 = i1 != ( i0 + abs(int(2.0)) )\\nb2 = i1 \\l abs(min(int(7.0), i2))\\nres0 -= in1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 6, 1, 11, 1, 3, 2, 0]}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 2, 2, 2, 0, 2, 1, 1, 0], [0, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 0, 8, 5, 6, 6, 4, 8, 9, 1, 1, 6, 9, 3, 7, 1, 7, 4, 7, 6, 5, 7, 1, 6, 8, 0, 8, 2, 8, 8, 2, 4, 6, 7, 8, 4, 5, 0, 8, 0, 5, 3, 1, 3, 5, 2], [0, 2, 0, 3, 4, 2], [2, 1], [1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 2, 1], [0], [0, 0], [2, 4, 6, 6, 4, 6, 0, 6, 2, 6, 2, 0, 4, 1, 1, 3, 1, 0, 2, 5, 0, 0, 5, 5, 4, 6, 1, 3, 2, 6, 4, 1, 4, 5, 4, 3, 3, 5, 0, 2, 3, 3, 0, 6, 5, 1, 1, 4, 0, 4, 4, 3, 2, 6, 6, 6, 6, 6, 4, 2, 0], [0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 2, 1, 3, 1, 1, 1, 1, 3, 2, 1, 2, 0, 1, 3, 2, 0, 1, 1, 2, 2, 1, 2, 3, 3, 3, 3, 2, 3, 2, 0, 1, 2, 2, 3, 1, 2, 0, 3, 2, 1, 2, 0, 0, 3, 0, 3, 2, 1, 1, 2, 0, 3, 0, 1, 3, 3, 3, 2, 3, 3, 0, 2, 0, 1, 2, 1, 2, 3, 1, 3, 2, 2, 3, 0, 2, 0, 1, 3, 3, 2, 2, 0, 2, 2, 2, 3, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 2, 1, 0, 0, 2, 3, 1, 1, 2, 0, 0, 2, 0, 3, 0, 2, 1, 0, 0, 3, 2, 1, 3, 2, 0, 0, 1, 3, 0, 3, 0, 2, 0, 2, 1, 2, 1, 0, 3, 0, 2, 0, 3, 3, 1, 0, 0, 0, 0, 3, 0, 2, 1, 0, 2, 2, 3, 1, 2, 2, 1, 0, 1, 1, 3, 3, 1, 0, 3, 0, 2, 0, 0, 1, 3, 1, 2, 2, 0, 2, 3, 2, 0, 0, 3, 1, 3, 2, 1, 0, 0, 0, 1, 3, 1, 2, 0, 3, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [2, 0, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 0, 0, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0, 0, 2, 0, 1, 2, 0, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2], [2, 1, 0, 0, 0, 1, 0, 1, 1, 2, 1, 0, 2, 0, 2, 0, 2, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 2, 2, 1, 0, 2], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1]], "fitness": 100, "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 = in1\\nres0 = res0\\nif ( in1 \\l int(4.0) or ( ( b2 and res0 == i0 ) or int(2.0) \\l ( int(0.0) * abs(int(8.0)) ) ) ):{:\\nloopBreak% = 0\\nwhile int(5.0) \\ge int(6.0):{:\\nloopBreak% = 0\\nwhile not int(6.0) \\le min(( int(4.0) - divInt(res0,int(8.0)) ), max(( i2 + int(9.0) ), int(1.0))):{:\\nres0 = ( ( int(1.0) + ( min(max(min(min(( min(( i2 + int(6.0) ), mod(( abs(int(9.0)) - divInt(i0,abs(divInt(int(3.0),divInt(in1,i1)))) ),max(i1, min(( int(7.0) + int(1.0) ), divInt(in0,min(i1, int(7.0))))))) - min(max(max(mod(abs(abs(i0)),( i2 - int(4.0) )), ( int(7.0) * divInt(max(int(6.0), abs(( divInt(max(in2, divInt(i0,int(5.0))),abs(max(divInt(( i0 - ( mod(mod(max(in2, divInt(int(7.0),min(( in2 + int(1.0) ), max(divInt(( int(6.0) * ( mod(int(8.0),in1) + res0 ) ),( abs(int(0.0)) * int(8.0) )), ( i1 + in0 ))))),( i2 * min(res0, ( int(2.0) - in1 )) )),i1) + min(( int(8.0) + min(( in1 - in2 ), int(8.0)) ), abs(in1)) ) ),min(in0, ( in0 - mod(int(2.0),( int(4.0) + in2 )) ))), max(i0, ( i2 + abs(min(int(6.0), in0)) ))))) - in0 ))),i0) )), res0), abs(in2)) ), divInt(int(7.0),i1)), divInt(mod(max(int(8.0), mod(( int(4.0) - i1 ),int(5.0))),int(0.0)),max(abs(int(8.0)), in1))), abs(i0)), mod(in1,in1)) + int(0.0) ) ) * max(int(5.0), mod(divInt(in0,( max(( i2 * res0 ), abs(int(3.0))) - abs(mod(int(1.0),res0)) )),res0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif res0 == int(3.0):{:\\nb1 = True\\n:}\\nres0 = max(int(5.0), ( in1 + abs(int(2.0)) ))\\ni2 *= i0\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 998, "mapping_values": [1, 10, 10, 4, 6, 47, 47, 6, 2, 3, 12, 6, 6, 1, 2, 61, 5, 205, 56, 46, 32, 25]}, {"genotype": [[0], [1], [0], [], [1], [1, 1], [9, 7], [], [], [], [], [], [], [], [], [6], [1], [2, 1, 1], [1], [], [1], [0]], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= divInt(int(9.0),int(7.0))\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 995, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 0, 1, 1]}, {"genotype": [[0], [1], [0], [], [1], [1], [7], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 993, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 2, 0, 1, 2, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 1, 4, 6, 3, 8, 6, 7, 9, 2, 9, 5, 0, 5, 8, 2, 6, 2, 1, 6, 8, 4, 0, 0, 5, 8, 2, 3, 8, 9, 5, 6, 5, 3, 0, 6, 6, 8, 4, 1, 8, 2, 5, 9, 7, 3, 7, 5, 2, 7, 2, 9, 1], [1, 3, 0, 1, 5], [0, 0, 0, 2], [1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0], [3, 3, 3, 0, 1, 0, 1, 2], [1, 0], [1, 0, 0], [3, 4, 4, 5, 6, 4, 0, 1, 0, 0, 6, 1, 3, 1, 5, 5, 6, 3, 3, 1, 2, 5, 1, 2, 5, 6, 4, 1, 6, 5, 2, 3, 0, 1, 0, 1, 1, 6, 6, 4, 0, 0, 5, 5, 4, 3, 2, 4, 1, 4, 4, 4, 5, 3, 2, 6, 1, 6, 6, 3, 2, 6, 1, 1, 4, 0], [1, 1, 0, 1], [3, 0, 2, 2, 3, 3, 0, 3, 0, 2, 2, 0, 2, 3, 2, 1, 2, 2, 2, 2, 0, 3, 1, 0, 1, 0, 2, 1, 0, 0, 3, 2, 0, 0, 2, 3, 3, 2, 3, 1, 1, 2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 3, 3, 0, 2, 0, 2, 2, 3, 2, 0, 1, 2, 0, 2, 3, 2, 1, 3, 1, 1, 3, 3, 3, 0, 3, 0, 2, 3, 0, 1, 1, 2, 2, 2, 2, 3, 0, 1, 0, 1, 0, 1, 3, 2, 3, 0, 2, 0, 1, 3, 1, 2, 1, 0, 3, 1, 2, 0, 0, 3, 3, 1, 0, 1, 2, 3, 2, 0, 1, 0, 1, 1, 3, 2, 3, 1, 2, 0, 0, 0, 1, 2, 2, 3, 1, 0, 0, 0, 2, 0, 1, 2, 1, 1, 0, 1, 0, 3, 0, 2, 0, 1, 2, 3, 2, 2, 0, 2, 1, 1, 2, 1, 0, 3, 0, 2, 1, 2, 3, 2, 2, 0, 3, 0, 0, 2, 0, 0, 0, 2, 3, 3, 0, 1, 3, 1, 3, 1, 1, 3, 2, 3, 0, 1, 1, 1, 3, 3, 3, 2, 0, 3, 1, 0, 2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 1, 3, 2, 0, 3, 1, 3, 3, 3, 2, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 2, 1, 2, 2, 0, 0, 2, 0, 0, 1, 1, 2, 0, 0, 0, 1, 1, 0, 2, 0, 2, 1, 1, 1, 2, 2, 0, 0, 2, 0, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 0, 2], [2, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 2, 1, 2, 2, 2, 0, 0, 2, 1, 2, 1, 1, 1, 2, 2, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1]], "fitness": 100, "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif ( ( max(in0, divInt(mod(max(abs(in1), max(in1, mod(divInt(in2,divInt(abs(mod(int(4.0),( ( mod(( res0 * abs(int(5.0)) ),in1) + int(1.0) ) - i0 ))),( int(4.0) + i1 ))),i0))),min(divInt(i0,res0), ( min(abs(( min(int(6.0), int(3.0)) + ( min(( int(8.0) + ( int(6.0) + int(7.0) ) ), i1) * max(int(9.0), max(abs(in0), ( i1 + divInt(divInt(min(( in2 + int(2.0) ), mod(in2,divInt(min(mod(int(9.0),min(int(5.0), int(0.0))), max(max(min(res0, abs(in0)), ( min(in0, int(5.0)) * int(8.0) )), ( ( ( ( abs(i1) - int(2.0) ) - i2 ) + int(6.0) ) + in2 ))),int(2.0)))),max(mod(max(i1, mod(i2,int(1.0))),max(int(6.0), ( int(8.0) - in2 ))), abs(int(4.0)))),mod(res0,in1)) ))) ) )), abs(min(int(0.0), i1))) + int(0.0) ))),( min(( res0 * int(5.0) ), in2) + int(8.0) ))) \\g int(2.0) or abs(mod(min(int(3.0), mod(i2,in0)),i0)) \\ge int(8.0) ) or ( b0 or False ) ):{:\\nif mod(divInt(min(int(9.0), i1),i0),i1) \\l ( i1 * int(5.0) ):{:\\nb0 = b0\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nres0 -= mod(int(6.0),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = res0 \\g int(3.0)\\n:}else:{:\\nif not in1 != max(i0, divInt(i0,int(0.0))):{:\\nin2 *= ( max(divInt(( in2 * mod(int(6.0),int(6.0)) ),( int(8.0) * in1 )), max(in0, divInt(int(4.0),mod(min(( ( i2 + max(in1, i1) ) + ( in1 * in1 ) ), in1),divInt(max(abs(in2), int(1.0)),min(int(8.0), max(int(2.0), int(5.0)))))))) - max(mod(min(in0, int(9.0)),int(7.0)), int(3.0)) )\\n:}\\ni2 = max(max(max(( res0 * min(int(7.0), i1) ), divInt(mod(( int(5.0) - res0 ),( ( res0 - int(2.0) ) - int(7.0) )),int(2.0))), max(( in0 * max(int(9.0), abs(min(abs(( i2 * res0 )), int(1.0)))) ), i1)), i1)\\n:}\\nin1 += i0\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 993, "mapping_values": [1, 10, 10, 4, 6, 54, 54, 5, 4, 3, 13, 5, 8, 2, 3, 66, 4, 231, 62, 53, 35, 30]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [0, 1, 6], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(016.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 998, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [0, 8, 9], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(089.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 1, 2, 1, 2, 0], [0, 0], [0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 6, 8, 3, 3, 5, 7, 0, 9, 0, 7, 1, 5, 1, 9, 7, 4, 7, 1, 3, 5, 7, 6, 0, 1, 0, 3, 5, 1, 7, 1, 2, 8, 7, 2, 8, 3, 7, 7, 5], [1, 2, 2, 3, 0, 1, 1], [2, 1, 0, 0, 1], [1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 2, 3, 2], [0], [0, 0], [2, 5, 5, 6, 0, 1, 6, 6, 5, 2, 1, 6, 2, 3, 1, 0, 4, 5, 5, 2, 1, 2, 6, 6, 1, 3, 6, 1, 2, 2, 4, 5, 4, 0, 2, 6, 2, 5, 2, 0, 4, 2, 2, 5, 3, 4, 3, 1], [0], [0, 2, 1, 0, 2, 3, 3, 1, 0, 3, 3, 3, 0, 3, 1, 2, 2, 2, 0, 3, 0, 2, 3, 1, 3, 3, 1, 3, 2, 3, 3, 1, 0, 2, 0, 1, 1, 1, 1, 0, 3, 2, 3, 3, 1, 1, 3, 2, 0, 0, 2, 2, 2, 1, 3, 2, 3, 0, 3, 2, 1, 3, 1, 2, 3, 3, 3, 1, 3, 2, 0, 1, 0, 3, 2, 3, 3, 2, 1, 1, 1, 3, 1, 0, 2, 1, 2, 3, 2, 1, 2, 0, 1, 3, 1, 1, 3, 3, 0, 0, 3, 3, 0, 2, 0, 0, 0, 2, 3, 2, 1, 1, 3, 0, 0, 1, 3, 1, 1, 0, 0, 1, 1, 0, 3, 3, 3, 2, 1, 2, 0, 2, 0, 3, 3, 3, 1, 3, 0, 0, 3, 2, 1, 2, 2, 2, 2, 3, 0, 1, 0, 3, 0, 2, 0, 2, 3, 0, 3, 3, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 2, 1, 3, 3, 0, 0, 3, 3, 3, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1], [2, 0, 1, 1, 1, 2, 0, 1, 2, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0, 1, 2, 2, 0, 1, 0, 1, 1, 1, 2, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 2, 2, 1, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 1, 1, 2, 0], [2, 2, 0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0]], "fitness": 100, "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nb2 = not i2 \\g ( int(7.0) * in2 )\\nb1 = not mod(abs(min(int(9.0), in2)),max(max(max(res0, abs(int(6.0))), ( ( mod(i0,min(i1, divInt(max(int(8.0), abs(max(int(3.0), max(divInt(max(max(int(3.0), res0), ( res0 * int(5.0) )),int(7.0)), int(0.0))))),int(9.0)))) + in2 ) - abs(divInt(min(abs(int(0.0)), int(7.0)),abs(divInt(i2,i1)))) )), ( ( mod(int(1.0),abs(divInt(min(res0, max(divInt(int(5.0),abs(int(1.0))), ( abs(min(max(int(9.0), min(( i2 + int(7.0) ), in0)), max(mod(max(max(( int(4.0) - int(7.0) ), int(1.0)), abs(int(3.0))),i1), mod(int(5.0),( max(( int(7.0) + ( i0 * int(6.0) ) ), min(int(0.0), int(1.0))) + abs(abs(in1)) ))))) * in2 ))),min(max(in2, ( i2 + i1 )), i2)))) - divInt(abs(mod(int(0.0),int(3.0))),max(res0, res0)) ) - int(5.0) ))) == max(int(1.0), int(7.0))\\nb0 = i1 == in0\\nres0 = int(12.0)\\nif True:{:\\nb0 = int(8.0) \\ge i1\\nif not ( abs(min(abs(mod(int(7.0),divInt(i2,( i2 - abs(max(min(int(2.0), abs(in1)), in2)) )))), min(mod(int(8.0),( ( mod(mod(abs(in1),int(3.0)),i0) * min(i2, ( res0 + ( abs(i2) + abs(abs(max(in2, i2))) ) )) ) * abs(i0) )), in1))) \\l int(7.0) or i2 \\g i2 ):{:\\nb1 = not in2 \\g divInt(int(7.0),min(max(in0, in1), max(abs(min(in0, int(5.0))), i1)))\\n:}\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 993, "mapping_values": [1, 8, 8, 2, 6, 41, 41, 7, 5, 1, 13, 7, 6, 1, 2, 48, 1, 182, 37, 58, 18, 19]}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 1, 2, 2, 0], [1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 9, 4, 6, 5, 7, 2, 7, 1, 2, 9, 1, 4, 3, 7, 8, 2, 2, 0, 0, 4, 2, 9, 2, 1, 0, 1, 7, 0, 5, 0, 1, 6, 7, 6, 2, 7, 4, 1, 2, 6], [4], [], [], [0, 1, 0], [0], [2, 1], [1], [], [6, 5, 5, 2, 5, 5, 5, 2, 0, 1, 2, 2, 6, 0, 2, 5, 6, 1, 3, 3, 3, 4, 0, 3, 3, 2, 5, 1, 1, 3, 5, 6, 4, 6, 3, 1, 1, 2, 4, 4, 3, 4, 5, 1, 0, 6, 0, 2, 2, 4, 4, 1, 6, 6, 2], [1, 0, 1], [2, 2, 2, 3, 1, 0, 0, 0, 1, 3, 2, 2, 3, 0, 2, 0, 3, 2, 2, 2, 3, 3, 1, 3, 1, 0, 2, 2, 1, 0, 2, 2, 2, 0, 3, 1, 0, 2, 3, 0, 1, 1, 2, 3, 0, 3, 1, 3, 2, 1, 1, 0, 2, 2, 3, 3, 3, 2, 1, 2, 2, 3, 2, 3, 2, 1, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 3, 3, 0, 0, 3, 0, 1, 3, 2, 1, 3, 2, 3, 0, 3, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 0, 0, 3, 1, 2, 3, 0, 2, 2, 1, 0, 0, 1, 2, 2, 0, 2, 1, 2, 0, 0, 1, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 1, 3, 2, 3, 1, 0, 2, 2, 3, 0, 0, 3, 2, 0, 1, 2, 1, 0, 0, 1, 2, 2, 0, 3, 0, 0, 1, 3, 3, 0, 3, 1, 2, 3, 0, 3, 3, 3, 1, 0, 1, 0, 3, 1, 0, 3, 1, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 3, 1, 3, 0, 0, 3, 3, 1, 0, 0, 3, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 2, 1, 1, 1, 2, 0, 2, 1, 1, 2, 2, 2, 0, 1, 0, 1, 1, 2, 2, 0, 0, 2, 1, 1, 2, 1, 1, 2, 1, 0, 1, 2, 2, 2, 0, 2, 2, 2, 1, 0, 1, 0, 0, 2, 0, 0, 2], [1, 2, 1, 2, 2, 1, 1, 0, 0, 2, 0, 0, 1, 2, 1, 2, 0, 2, 2, 2, 0, 2, 2, 2, 1, 2, 0, 1, 2, 0, 2, 0, 2, 2, 1], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0]], "fitness": 100, "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 -= ( divInt(( max(int(1.0), in2) * in2 ),i2) - int(4.0) )\\nin2 = min(mod(( min(in2, mod(in2,max(( divInt(( abs(max(int(9.0), max(int(4.0), i2))) * divInt(( int(6.0) * i0 ),mod(mod(( i1 - max(int(5.0), i2) ),( abs(i2) - int(7.0) )),int(2.0))) ),mod(min(res0, abs(int(7.0))),max(( int(1.0) + int(2.0) ), i0))) + ( ( max(abs(abs(( int(9.0) * ( mod(abs(( min(( int(1.0) + max(min(i2, in2), res0) ), max(int(4.0), i1)) + max(mod(abs(abs(in0)),in0), min(in0, int(3.0))) )),min(mod(int(7.0),abs(( max(in1, max(divInt(( int(8.0) - int(2.0) ),( ( int(2.0) * ( int(0.0) - divInt(i0,in0) ) ) * abs(int(0.0)) )), divInt(max(in0, divInt(mod(int(4.0),i2),in2)),int(2.0)))) + ( divInt(i1,( int(9.0) * ( i1 * in0 ) )) * int(2.0) ) ))), in2)) + mod(( ( ( mod(( res0 * ( in1 * int(1.0) ) ),max(divInt(abs(int(0.0)),res0), ( mod(max(in0, i1),min(mod(i1,int(1.0)), mod(int(7.0),i2))) * in1 ))) - int(0.0) ) * ( ( in1 + max(in0, in1) ) - int(5.0) ) ) * abs(abs(in2)) ),abs(int(0.0))) ) ))), divInt(min(i1, abs(abs(abs(int(1.0))))),i0)) + int(6.0) ) * res0 ) ), max(int(7.0), i0)))) + min(int(6.0), max(i2, min(( ( i2 * int(2.0) ) * int(7.0) ), int(4.0)))) ),in1), min(int(1.0), abs(in1)))\\nloopBreak% = 0\\nwhile not i1 \\le min(min(int(2.0), res0), res0):{:\\nloopBreak% = 0\\nwhile False:{:\\ni2 -= abs(int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 999, "mapping_values": [1, 5, 5, 2, 3, 42, 42, 1, 0, 0, 3, 1, 2, 1, 0, 55, 3, 202, 57, 51, 35, 24]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [2, 2], [], [], [], [], [], [], [], [], [6], [1], [1], [], [], [0], []], "fitness": 100, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 += int(22.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 994, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 0, 1], [1, 0, 1], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(101.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 1000, "mapping_values": [1, 1, 1, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [0, 1], [9, 2], [], [], [], [], [], [], [], [], [6], [0], [1], [], [], [], []], "fitness": 100, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(92.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [1, 0, 1], [1, 1], [2, 8], [], [1, 2], [], [0], [], [0], [], [], [6, 6], [0, 1], [1, 1], [], [], [1], []], "fitness": 100, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nres0 = int(2.0)\\nb1 = b2\\nres0 -= int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 996, "mapping_values": [1, 3, 3, 0, 3, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 2, 1, 0, 0, 2, 0], [1, 1], [1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 2, 6, 6, 2, 0, 7, 0, 3, 4, 0, 0, 5], [4, 4, 0], [2, 0, 2], [], [1, 1, 0, 0, 1], [0, 0, 0], [0, 2], [], [], [2, 1, 6, 1, 6, 3, 5, 6, 1, 4, 2, 6, 3, 2, 4, 1], [1, 1, 0, 0], [3, 2, 2, 2, 1, 0, 2, 0, 1, 2, 0, 1, 0, 1, 1, 3, 3, 2, 3, 2, 1, 0, 2, 3, 2, 1, 0, 2, 3, 2, 3, 1, 3, 1, 1, 1, 0, 3, 1, 0, 1, 2, 3, 0, 3, 3, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0], [2, 1, 0, 2, 1, 2, 2, 2, 2, 2, 2, 1], [2, 1, 1, 1, 2, 2, 0], [1, 1, 0, 1, 0, 1, 0]], "fitness": 100, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\ni2 *= abs(mod(( mod(int(5.0),i1) - ( res0 - int(7.0) ) ),divInt(i1,int(2.0))))\\nb2 = res0 \\le int(6.0)\\nloopBreak% = 0\\nwhile int(6.0) \\le max(min(mod(abs(divInt(int(2.0),in0)),mod(max(divInt(int(0.0),in2), ( abs(( abs(int(7.0)) - abs(int(0.0)) )) * int(3.0) )),int(4.0))), res0), abs(int(0.0))):{:\\ni1 *= in1\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( abs(in0) + abs(max(int(5.0), i2)) )\\nloopBreak% = 0\\nwhile b0:{:\\nb2 = not in1 \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 998, "mapping_values": [1, 8, 8, 2, 6, 14, 14, 3, 3, 0, 5, 3, 2, 0, 0, 16, 4, 50, 12, 12, 7, 7]}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1], [2, 0, 0, 2, 2, 0, 1], [0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 5, 1, 9, 0, 4, 6, 6, 3, 7, 9, 8, 9, 6, 4, 5], [4, 4, 4, 4, 1], [0, 0, 1], [0], [0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 3], [], [0, 0], [2, 1, 0, 6, 1, 6, 5, 1, 3, 4, 5, 2, 1, 4, 3], [0, 0], [1, 2, 0, 2, 3, 1, 0, 1, 1, 0, 1, 0, 1, 3, 1, 2, 2, 1, 1, 3, 3, 1, 0, 1, 3, 2, 2, 1, 3, 2, 0, 3, 2, 0, 3, 0, 0, 2, 0, 0, 3, 0, 3, 3, 1, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 2, 2, 0, 1, 0, 2, 1, 1, 2], [1, 1, 2, 0, 2], [0, 1, 0, 1, 1]], "fitness": 100, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\nres0 = int()\\nif b0:{:\\nb0 = ( int(6.0) \\le divInt(i2,mod(min(int(4.0), i1),int(5.0))) and int(1.0) \\le i0 )\\n:}\\nres0 = int(9.0)\\nloopBreak% = 0\\nwhile i1 \\le int(04.0):{:\\nif min(int(6.0), divInt(( int(6.0) - int(3.0) ),abs(abs(int(7.0))))) \\le res0:{:\\nb1 = int(9.0) \\g min(mod(( int(8.0) - max(mod(in2,min(( i1 * abs(in0) ), in1)), ( in2 + i2 )) ),max(i1, max(abs(int(9.0)), int(6.0)))), ( int(4.0) * in1 ))\\n:}\\nin0 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 989, "mapping_values": [1, 7, 7, 3, 4, 17, 17, 5, 3, 1, 7, 5, 2, 0, 2, 15, 2, 50, 10, 11, 5, 5]}]